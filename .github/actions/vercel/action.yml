name: Build & Deploy to Vercel
description: Build and deploy a Vercel project using CI/CD

inputs:
  ref:
    description: The Git ref to deploy
    required: false
  package:
    description: The workspace package to deploy, which is used for turbo-ignore
    required: true
  environment:
    description: production | preview
    required: false
    default: "preview"
  force:
    description: Force deployment even if there are no changes (skips turbo-ignore)
    required: false
    default: "false"
  skip_deploy:
    description: Skip deployment
    required: false
    default: "false"
  promote:
    description: Promote the production deployment
    required: false
    default: "false"

outputs:
  deployment_url:
    description: The URL of the deployment
    value: ${{ steps.deploy-preview.outputs.deployment_url || steps.deploy-production.outputs.deployment_url }}

runs:
  using: "composite"

  steps:
    # set the ref to a specific branch so that the deployment is scoped to that branch (instead of a headless ref)
    - uses: actions/checkout@v4
      with:
        fetch-depth: 2 # used for turbo-ignore
        ref: ${{ inputs.ref || github.ref }}

    - name: Install
      uses: ./.github/actions/install
      with:
        run_install: false # install is handled by vercel build

    # turbo-ignore is used to skip the build step if there are no changes since the last commit
    - name: Ignore Build Step
      id: ignore-build
      shell: bash
      if: inputs.force == 'false'
      continue-on-error: true
      run: |
        set +e
        pnpx turbo-ignore ${{ inputs.package }} --fallback=HEAD^1
        echo "exit_code=$?" >> $GITHUB_OUTPUT

    - name: Install Vercel CLI
      if: steps.ignore-build.outputs.exit_code == '1' || inputs.force == 'true'
      shell: bash
      run: pnpm install --global vercel@latest

    - name: Pull Vercel Environment
      if: steps.ignore-build.outputs.exit_code == '1' || inputs.force == 'true'
      shell: bash
      run: vercel pull --yes --environment=${{ inputs.environment }} --token=$VERCEL_TOKEN

    # Preview deployment

    - name: Build Vercel Preview
      shell: bash
      if: (steps.ignore-build.outputs.exit_code == '1' || inputs.force == 'true') && inputs.environment == 'preview'
      run: vercel build --yes --token=$VERCEL_TOKEN

    - name: Deploy Vercel Preview
      shell: bash
      if: (steps.ignore-build.outputs.exit_code == '1' || inputs.force == 'true') && inputs.environment == 'preview' && inputs.skip_deploy == 'false'
      id: deploy-preview
      run: |
        DEPLOYMENT_URL="$(vercel deploy --yes --prebuilt --token=$VERCEL_TOKEN --archive=tgz)"
        echo "deployment_url=$DEPLOYMENT_URL" >> $GITHUB_OUTPUT

    # Production deployment

    - name: Build Vercel Production
      shell: bash
      if: (steps.ignore-build.outputs.exit_code == '1' || inputs.force == 'true') && inputs.environment == 'production'
      run: vercel build --yes --prod --token=$VERCEL_TOKEN

    - name: Deploy Vercel Production
      shell: bash
      if: (steps.ignore-build.outputs.exit_code == '1' || inputs.force == 'true') && inputs.environment == 'production' && inputs.skip_deploy == 'false'
      id: deploy-production
      run: |
        DEPLOYMENT_URL="$(vercel deploy --yes --prebuilt --prod --skip-domain --token=$VERCEL_TOKEN --archive=tgz)"
        echo "deployment_url=$DEPLOYMENT_URL" >> $GITHUB_OUTPUT

    # Print deployment information

    - name: Wait for Deployment
      shell: bash
      if: (steps.ignore-build.outputs.exit_code == '1' || inputs.force == 'true') && inputs.skip_deploy == 'false'
      run: vercel inspect ${{ steps.deploy-preview.outputs.deployment_url || steps.deploy-production.outputs.deployment_url }} --token=$VERCEL_TOKEN --wait

    # Promote production deployment if promote=true

    - name: Promote Vercel Production
      shell: bash
      if: (steps.ignore-build.outputs.exit_code == '1' || inputs.force == 'true') && inputs.environment == 'production' && inputs.skip_deploy == 'false' && inputs.promote == 'true'
      run: vercel promote ${{ steps.deploy-production.outputs.deployment_url }} --token=$VERCEL_TOKEN
