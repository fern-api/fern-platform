# yaml-language-server: $schema=https://raw.githubusercontent.com/fern-api/fern/main/fern.schema.json

imports:
  commons: ../../commons.yml

service:
  auth: true
  base-path: /api/patient-payments/v3
  endpoints:
    search:
      docs: |
        Returns all patient payments satisfying the search criteria AND whose organization_id matches
        the current organization_id of the authenticated user.
      method: GET
      path: ""
      request:
        name: SearchPatientPaymentsRequest
        query-parameters:
          limit:
            type: optional<integer>
            docs: Defaults to 100. The value must be greater than 0 and less than 1000.
          patient_external_id: optional<commons.PatientExternalId>
          encounter_external_id: optional<commons.EncounterExternalId>
          service_line_id: optional<commons.ServiceLineId>
          sources:
            type: optional<PatientPaymentSource>
            allow-multiple: true
          statuses:
            type: optional<PatientPaymentStatus>
            allow-multiple: true
          sort:
            type: optional<PatientPaymentSortField>
            docs: Defaults to payment_timestamp
          sort_direction:
            type: optional<commons.SortDirection>
            docs: Sort direction. Defaults to descending order if not provided.
          page_token: optional<commons.PageToken>
      response: PatientPaymentsPage
      errors:
        - error: commons.UnprocessableEntityError
          docs: if limit <= 0 or limit >= 1000

    get:
      docs: |
        Returns the patient payment for the provided patient_payment_id.
        If the patient payment's organization_id does not match the current organization_id of the
        authenticated user, then response code of 403 will be returned.
      method: GET
      path: /{patient_payment_id}
      path-parameters:
        patient_payment_id: PatientPaymentId
      response: PatientPayment
      errors:
        - error: commons.EntityNotFoundError
          docs: if no PatientPayment exists with the provided patient_payment_id
        - error: commons.UnauthorizedError
          docs: if the authenticated user does not have permission to view the found PatientPayment

    create:
      docs: |
        Creates a new patient payment record and returns the newly created PatientPayment object.
        It is expected that the organization_id of the input patient_payment object will match
        the current organization_id of the auathenticated user. Otherwise, response code of 403 will be returned.
        It is also expected that one of `patient_external_id`, `encounter_external_id`, or `service_line_id` is provided.
        If more than one of `patient_external_id`, `encounter_external_id`, or `service_line_id` are provided, then the most
        specific property will be used.
        The order of specificity from the most specific to least specific is `service_line_id`, `encounter_external_id`, and
        `patient_external_id`.
      method: POST
      path: ""
      request:
        name: PatientPaymentCreate
        body:
          properties:
            amount_cents: integer
            payment_timestamp: optional<datetime>
            status: optional<PatientPaymentStatus>
            payment_name: optional<string>
            payment_note: optional<string>
            patient_external_id: optional<commons.PatientExternalId>
            encounter_external_id: optional<commons.EncounterExternalId>
            service_line_id: optional<commons.ServiceLineId>
      response: PatientPayment
      errors:
        - error: commons.UnauthorizedError
          docs: if the authenticated user does not have permission to update the found PatientPayment
        - error: commons.UnprocessableEntityError
          docs: if none of `patient_external_id`, `encounter_external_id`, or `service_line_id` is provided
    update:
      docs: |
        Updates the patient payment record matching the provided patient_payment_id.
        If the matching record's organization_id does not match the authenticated user's
        current organization_id, then a response code of `403` will be returned.
        If more than one of `patient_external_id`, `encounter_external_id`, or `service_line_id` are provided, then the most
        specific property will be used.
        The order of specificity from the most specific to least specific is `service_line_id`, `encounter_external_id`, and
        `patient_external_id`.
      method: PATCH
      path: /{patient_payment_id}
      path-parameters:
        patient_payment_id: PatientPaymentId
      request:
        name: PatientPaymentUpdate
        body:
          properties:
            amount_cents: optional<integer>
            payment_timestamp: optional<datetime>
            status: optional<PatientPaymentStatus>
            payment_name: optional<string>
            payment_note: optional<string>
            patient_external_id: optional<commons.PatientExternalId>
            encounter_external_id: optional<commons.EncounterExternalId>
            service_line_id: optional<commons.ServiceLineId>
      response: PatientPayment
      errors:
        - error: commons.EntityNotFoundError
          docs: if no PatientPayment exists with the provided patient_payment_id
        - error: commons.UnauthorizedError
          docs: if the authenticated user does not have permission to update the found PatientPayment
        - error: commons.UnprocessableEntityError
          docs: |
            if the found PatientPayment's source is not 'MANUAL_ENTRY', or if any of `patient_external_id` or `encounter_external_id`
            conflicts with the existing `service_line_id`.
    delete:
      docs: |
        Deletes the patient payment record matching the provided patient_payment_id.
        If the matching record's organization_id does not match the authenticated user's
        current organization_id, then a response code of `403` will be returned.
      method: DELETE
      path: /{patient_payment_id}
      path-parameters:
        patient_payment_id: PatientPaymentId
      errors:
        - error: commons.EntityNotFoundError
          docs: if no PatientPayment exists with the provided patient_payment_id
        - error: commons.UnauthorizedError
          docs: if the authenticated user does not have permission to delete the found PatientPayment
        - error: commons.UnprocessableEntityError
          docs: if the found PatientPayment's source is not 'MANUAL_ENTRY'

types:
  PatientPaymentId: string

  PatientPaymentSortField:
    enum:
      - source
      - amount_cents
      - payment_timestamp
      - status
      - payment_name
      - payment_note

  PatientPaymentSource:
    enum:
      - name: MANUAL_ENTRY
        value: "MANUAL_ENTRY"
      - name: CHARGEBEE_PAYMENTS
        value: "CHARGEBEE_PAYMENTS"
      - name: CHARGEBEE_MANUALLY_VOIDED_BY_CANDID
        value: "CHARGEBEE MANUALLY VOIDED BY CANDID"
      - name: CHARGEBEE_REFUNDS
        value: "CHARGEBEE_REFUNDS"
      - name: SQUARE_REFUNDS
        value: "SQUARE_REFUNDS"
      - name: SQUARE_PAYMENTS
        value: "SQUARE_PAYMENTS"
      - name: STRIPE_CHARGES
        value: "STRIPE_CHARGES"
      - name: STRIPE_REFUNDS
        value: "STRIPE_REFUNDS"
      - name: ELATION_PAYMENTS
        value: "ELATION_PAYMENTS"

  PatientPayment:
    properties:
      patient_payment_id: PatientPaymentId
      organization_id: commons.OrganizationId
      source_internal_id: string
      source: PatientPaymentSource
      amount_cents: integer
      payment_timestamp: optional<datetime>
      status: optional<PatientPaymentStatus>
      payment_name: optional<string>
      payment_note: optional<string>
      patient_external_id: optional<commons.PatientExternalId>
      encounter_external_id: optional<commons.EncounterExternalId>
      service_line_id: optional<commons.ServiceLineId>

  PatientPaymentsPage:
    extends: commons.ResourcePage
    properties:
      items: list<PatientPayment>

  PatientPaymentStatus:
    enum:
      - PENDING
      - value: paid
        name: PAID
      - CANCELED
      - value: voided
        name: VOIDED
      - FAILED
      - COMPLETED
      - value: succeeded
        name: STRIPE_SUCCEEDED
      - value: pending
        name: STRIPE_PENDING
      - value: failed
        name: STRIPE_FAILED
      - value: requires_action
        name: STRIPE_REQUIRES_ACTION
      - value: canceled
        name: STRIPE_CANCELED
