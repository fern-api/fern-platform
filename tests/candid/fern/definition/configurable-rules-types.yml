imports:
  commons: commons.yml
  tasks: tasks/commons.yml

types:
  FieldName: string

  VariableId: uuid

  FieldType:
    union:
      primitive: PrimitiveType
      object: ObjectType
      # For now, just single containers (i.e. Container<T>)
      container: ContainerType
      unknown:
        docs: |
          For conveying that a type is unknown. Unknown types are considered compatible with all other types.
          For internal use only within the framework, e.g. an unknown container type is compatible with any expected container type.
          Not for external use, e.g. the framework will never allow unknown literals to be provided by a client.
      # map: MapType

  PrimitiveType:
    # i.e. a "leaf node"
    union:
      native_primitive: NativePrimitiveType
      aliased_primitive: AliasedPrimitiveType
      # enum: EnumType

  NativePrimitiveType:
    enum:
      - INTEGER
      - DOUBLE
      - STRING
      - BOOLEAN
      - DATETIME
      - DATE
      - DECIMAL
      - EMPTY

  AliasedPrimitiveType:
    properties:
      name: string
      description: optional<string>
      native_primitive: NativePrimitiveType

  ObjectType:
    properties:
      fields: list<Field>

  ContainerType:
    properties:
      container: ContainerWrapperType
      contained_type: FieldType

  # MapType:
  #   properties:
  #     keyType: FieldType
  #     valueType: FieldType

  # EnumType:
  #   properties:
  #     name: string
  #     description: optional<string>
  #     field_type: NativePrimitiveType
  #     values: list<PrimitiveValue>

  ContainerWrapperType:
    enum:
      - LIST
      - OPTIONAL

  Field:
    properties:
      name: FieldName
      display_name: string
      description: optional<string>
      field_type: FieldType

  Comparator:
    enum:
      - IS_EQUAL_TO
      - IS_NOT_EQUAL_TO
      - IS_GREATER_THAN
      - IS_GREATER_THAN_OR_EQUAL_TO
      - IS_LESS_THAN
      - IS_LESS_THAN_OR_EQUAL_TO
      - IS_IN
      - IS_NOT_IN
      - CONTAINS
      - CONTAINS_IGNORING_CASE
      - DOES_NOT_CONTAIN
      - DOES_NOT_CONTAIN_IGNORING_CASE
      - STARTS_WITH
      - STARTS_WITH_IGNORING_CASE
      # Used by the frontend when the comparator is not set yet
      # The backend validates that this is not sent
      - UNSET

  ComparatorWithMetadata:
    properties:
      comparator: Comparator
      display_name: string

  ValidComparison:
    properties:
      lhs: FieldType
      comparator: ComparatorWithMetadata
      rhs: FieldType

  FieldValue:
    union:
      primitive_value: PrimitiveValue
      object_value: ObjectValue
      container_value: ContainerValue

  PrimitiveValue:
    union:
      integer: integer
      double: double
      string: string
      boolean: boolean
      datetime: datetime
      date: commons.Date
      decimal: commons.Decimal
      empty: {}

  ObjectValue:
    properties:
      members: list<ObjectFieldValue>

  ObjectFieldValue:
    properties:
      name: FieldName
      value: FieldValue

  ContainerValue:
    union:
      list: list<FieldValue>
      optional: optional<FieldValue>

  Statement:
    properties:
      condition: Condition
      action: Action

  Condition:
    union:
      and: AndCondition
      or: OrCondition
      evaluate_comparator: EvaluateComparatorCondition

  AndCondition:
    properties:
      conditions: list<Condition>

  OrCondition:
    properties:
      conditions: list<Condition>

  EvaluateComparatorCondition:
    properties:
      lhs: Comparable
      comparator: Comparator
      rhs: Comparable

  Comparable:
    union:
      field: FieldReference
      literal: FieldValue
      variable: VariableReference
      # TODO(thomas): You could imagine building a collection on the fly that mixes and matches these
      # E.g. <LHS> IS IN [<variable>, <variable>, <literal>]

  FieldReference:
    docs: The path to extract the field from the inputs.
    properties:
      path: Path

  VariableReference:
    properties:
      variable_id: VariableId
      # TODO(thomas): You could imagine being able to extract an element from an object/list variable
      # path: optional<Path>

  Path:
    docs: An ordered list of path elements to locate a (nested) Field. Elements are
      evaluated in order.
    properties:
      elements: list<PathElement>

  PathElement:
    docs: Extract the underlying type of an ObjectType or ContainerType Field.
    union:
      object_element:
        docs: |
          Extract an object field by name.
          E.g. providing FieldName("bar") here on object foo with string field foo.bar will extract a string field (bar).
        type: FieldName
      list_element:
        docs: Extract the underlying type from a list.
        type: ListElement
      optional_element:
        docs: Extract the underlying type from an optional.
        type: OptionalElement

  ListElement:
    docs: |
      Extract the underlying type from a list.
      E.g., using any of these on a list<optional<object>> will evaluate the remainder of the Statement on the underlying optional<object>.
      The exception to this is the count element, which returns an integer primitive type.
    union:
      all_items:
        docs: |
          Evaluate that the Statement is true for any item.
          Short-circuit if any item evaluates to false.
      any_items:
        docs: |
          Evaluate that the Statement is true for any item.
          Short-circuit if any item evaluates to true.
      first_item:
        docs: |
          Evaluate the Statement for the first item.
          Evaluates to false if there are no items in the list.
      last_item:
        docs: |
          Evaluate the Statement for the last item.
          Evaluates to false if there are no items in the list.
      nth_item:
        docs: |
          Evaluate the Statement for the nth item (1-indexed).
          Raises a runtime error if the index is out of the bounds of the list.
        type: integer
      count:
        docs: Evaluate the Statement against the number of items in the List (an integer).

  OptionalElement:
    # Inspired by Java's Optional https://docs.oracle.com/javase/8/docs/api/java/util/Optional.html
    docs: |
      Extract the underlying type from an optional.
      E.g., using any of these on an optional<list<string>> will evaluate the remainder of the Statement on the underlying list<string>.
    union:
      if_present:
        # Optional.ifPresent()
        docs: Continue to evaluate the Statement on the contained item if present, else
          evaluate to False (or abort an Action).
      or_else_fail:
        # Optional.orElseThrow()
        docs: Evaluate the Statement on the contained item if present, else fail the
          Statement.
      # One could imagine...
      # or_else:
      #   # Optional.orElse()
      #   docs: Evaluate the Statement on the contained item if present, else use the provided literal of the same type.
      #   type: FieldValue
      # or_else_get:
      #   # Optional.orElseGet()
      #   docs: Evaluate the Statement on the contained item if present, else locate and use the provided Field of the same type.
      #   type: Path

  Action:
    union:
      hold_claim: HoldClaimAction
      hold_ready_to_submit_claim: HoldReadyToSubmitClaimAction
      create_task: CreateTaskAction
      create_task_v2: CreateTaskV2Action
      then_validate_or_else: ThenValidateOrElseAction
      route_to_work_queue: RouteToWorkQueueAction
      # create_task: CreateTaskAction
      # multi: MultiAction
      # set_claim_status: SetClaimStatusAction
      # transform_claim: TransformClaimAction

  HoldClaimAction:
    docs: Hold the claim.
    properties: {}

  HoldReadyToSubmitClaimAction:
    docs: Hold the claim, but also indicate that it is ready for submission.
    properties: {}

  HoldClaimAvailableAction:
    properties: {}

  HoldReadyToSubmitClaimAvailableAction:
    properties: {}

  HoldClaimExecutedAction:
    properties:
      claim_id: commons.ClaimId

  HoldReadyToSubmitClaimExecutedAction:
    properties:
      claim_id: commons.ClaimId

  CreateTaskAction:
    union:
      customer_data_request_task: CustomerDataRequestTaskAction
      other_task: OtherTaskAction

  CreateTaskV2Action:
    properties:
      category: optional<tasks.TaskCategory>
      task_type: tasks.TaskType
      assignee: optional<commons.UserId>
      work_queue_id: commons.WorkQueueId
      context: string
      action_required: string

  CustomerDataRequestTaskAction:
    properties:
      category: tasks.TaskCategory
      context: string
      action_required: string

  OtherTaskAction:
    properties:
      task_type: OtherTaskType
      assignee: commons.Auth0Id
      context: string
      action_required: string

  # Must be kept in sync with legacy TaskType enum defined in app/schemas/task.py and the fern task type in tasks.yml
  # This is all task types which are not CUSTOMER_DATA_REQUEST
  OtherTaskType:
    enum:
      - CLAIM_SUBMISSION_RUN_VALIDATIONS_FAILURE
      - CLAIM_SUBMISSION_SUBMIT_CLAIM_FAILURE
      - CLAIM_SUBMISSION_TRANSFORM_FAILURE
      - CODE_CLAIM
      - CODE_CLAIM_REVIEW
      - ELIGIBILITY
      - CLAIM_FOLLOW_UP
      - REJECTION_RESOLUTION
      - PAYER_CONFIGURATION_ERROR
      - DENIAL_RESOLUTION

  CreateTaskAvailableAction:
    properties: {}

  CreateTaskV2AvailableAction:
    properties:
      available_work_queue_ids: set<commons.WorkQueueId>

  CreateTaskExecutedAction:
    properties:
      claim_id: commons.ClaimId

  CreateTaskV2ExecutedAction:
    properties:
      claim_id: commons.ClaimId
      work_queue_id: commons.WorkQueueId

  ThenValidateOrElseAction:
    docs: Evaluate the provided Condition. If the result is false, then apply the Action.
    properties:
      then_validate: Condition
      or_else: Action

  ThenValidateOrElseAvailableAction:
    # NOTE(thomas): For now, all scoped inputs are allowed to be used in the THEN condition and all scoped actions are allowed for OR_ELSE.
    properties: {}

  ThenValidateOrElseExecutedAction:
    properties:
      # Present if we executed the underlying action
      or_else_executed_action: optional<ExecutedAction>

  RouteToWorkQueueAction:
    properties:
      work_queue_id: commons.WorkQueueId

  RouteToWorkQueueAvailableAction:
    properties: {}

  RouteToWorkQueueExecutedAction:
    properties:
      work_queue_id: commons.WorkQueueId

  # TransformClaimAction:
  #   properties:
  #     edits: map<Path, Comparable>

  # TransformClaimAvailableAction:
  #   properties:
  #     mutable_output: Field

  AvailableActionWithMetadata:
    properties:
      display_name: string
      description: optional<string>
      action: AvailableAction

  AvailableAction:
    union:
      # NOTE(thomas/john): Should be kept in sync with Action
      hold_claim_available_action: HoldClaimAvailableAction
      hold_ready_to_submit_claim_available_action: HoldReadyToSubmitClaimAvailableAction
      create_task_available_action: CreateTaskAvailableAction
      create_task_v2_available_action: CreateTaskV2AvailableAction
      then_validate_or_else_available_action: ThenValidateOrElseAvailableAction
      route_to_work_queue_available_action: RouteToWorkQueueAvailableAction
      # transform_claim_available_action: TransformClaimAvailableAction

  ExecutedAction:
    union:
      # NOTE(thomas/john): Should be kept in sync with Action
      hold_claim_executed_action: HoldClaimExecutedAction
      hold_ready_to_submit_claim_executed_action: HoldReadyToSubmitClaimExecutedAction
      create_task_executed_action: CreateTaskExecutedAction
      create_task_v2_executed_action: CreateTaskV2ExecutedAction
      then_validate_or_else_executed_action: ThenValidateOrElseExecutedAction
      route_to_work_queue_executed_action: RouteToWorkQueueExecutedAction
