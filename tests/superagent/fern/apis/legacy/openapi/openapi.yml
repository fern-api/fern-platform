openapi: 3.0.2
info:
  title: Superagent
  description: Build, manage and deploy LLM-powered Agents
  version: 0.0.59
paths:
  /api/v1/agents:
    get:
      tags:
        - Agent
      summary: List All Agents
      description: List all agents
      operationId: List_all_agents_api_v1_agents_get
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AgentListOutput'
      security:
        - JWTBearer: []
    post:
      tags:
        - Agent
      summary: Create Agent
      description: Create a new agent
      operationId: Create_agent_api_v1_agents_post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/app__lib__models__agent__Agent'
        required: true
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AgentOutput'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
      security:
        - JWTBearer: []
  /api/v1/agents/library:
    get:
      tags:
        - Agent
      summary: List Library Agents
      description: List all library agents
      operationId: List_library_agents_api_v1_agents_library_get
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AgentListOutput'
      security:
        - JWTBearer: []
  /api/v1/agents/{agentId}:
    get:
      tags:
        - Agent
      summary: Get Agent
      description: Get a specific agent
      operationId: Get_agent_api_v1_agents__agentId__get
      parameters:
        - required: true
          schema:
            title: Agentid
            type: string
          name: agentId
          in: path
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AgentOutput'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
      security:
        - JWTBearer: []
    delete:
      tags:
        - Agent
      summary: Delete Agent
      description: Delete a specific agent
      operationId: Delete_agent_api_v1_agents__agentId__delete
      parameters:
        - required: true
          schema:
            title: Agentid
            type: string
          name: agentId
          in: path
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AgentOutput'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
      security:
        - JWTBearer: []
    patch:
      tags:
        - Agent
      summary: Patch Agent
      description: Patch a specific agent
      operationId: Patch_agent_api_v1_agents__agentId__patch
      parameters:
        - required: true
          schema:
            title: Agentid
            type: string
          name: agentId
          in: path
      requestBody:
        content:
          application/json:
            schema:
              title: Body
              type: object
        required: true
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AgentOutput'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
      security:
        - JWTBearer: []
  /api/v1/agents/{agentId}/predict:
    post:
      tags:
        - Agent
      summary: Prompt Agent
      description: Invoke a specific agent
      operationId: Prompt_agent_api_v1_agents__agentId__predict_post
      parameters:
        - required: true
          schema:
            title: Agentid
            type: string
          name: agentId
          in: path
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PredictAgent'
        required: true
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PredictAgentOutput'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
      security:
        - APIKeyHeader: []
        - APIKeyHeader: []
  /api/v1/agent-documents:
    get:
      tags:
        - Agent documents
      summary: List Agent Documents
      description: List all agent documents
      operationId: List_agent_documents_api_v1_agent_documents_get
      parameters:
        - required: false
          schema:
            title: Expand
            type: boolean
            default: false
          name: expand
          in: query
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AgentDocumentListOuput'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
      security:
        - JWTBearer: []
    post:
      tags:
        - Agent documents
      summary: Create Agent Document
      description: Create a agent document
      operationId: Create_agent_document_api_v1_agent_documents_post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/app__lib__models__agent_document__AgentDocument'
        required: true
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AgentDocumentOutput'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
      security:
        - JWTBearer: []
  /api/v1/agent-documents/{agentDocumentId}:
    get:
      tags:
        - Agent documents
      summary: Get Agent Document
      description: Get a specific agent document
      operationId: Get_agent_document_api_v1_agent_documents__agentDocumentId__get
      parameters:
        - required: true
          schema:
            title: Agentdocumentid
            type: string
          name: agentDocumentId
          in: path
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AgentDocumentOutput'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
      security:
        - JWTBearer: []
    delete:
      tags:
        - Agent documents
      summary: Delete Agent Document
      description: Delete a specific agent document
      operationId: Delete_agent_document_api_v1_agent_documents__agentDocumentId__delete
      parameters:
        - required: true
          schema:
            title: Agentdocumentid
            type: string
          name: agentDocumentId
          in: path
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AgentDocumentOutput'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
      security:
        - JWTBearer: []
  /api/v1/tags:
    get:
      tags:
        - Tags
      summary: List Tags
      description: List all tags
      operationId: List_tags_api_v1_tags_get
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TagListOutput'
      security:
        - JWTBearer: []
    post:
      tags:
        - Tags
      summary: Create A Tag
      description: Create a new tag
      operationId: Create_a_tag_api_v1_tags_post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/app__lib__models__tag__Tag'
        required: true
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TagOutput'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
      security:
        - JWTBearer: []
  /api/v1/tags/{tagId}:
    get:
      tags:
        - Tags
      summary: Get Tag
      description: Get a specific tag
      operationId: Get_tag_api_v1_tags__tagId__get
      parameters:
        - required: true
          schema:
            title: Tagid
            type: string
          name: tagId
          in: path
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TagOutput'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
      security:
        - JWTBearer: []
    delete:
      tags:
        - Tags
      summary: Delete Tag
      description: Delete a specific tag
      operationId: Delete_tag_api_v1_tags__tagId__delete
      parameters:
        - required: true
          schema:
            title: Tagid
            type: string
          name: tagId
          in: path
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TagOutput'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
      security:
        - JWTBearer: []
    patch:
      tags:
        - Tags
      summary: Patch Tag
      description: Patch a specific tag
      operationId: Patch_tag_api_v1_tags__tagId__patch
      parameters:
        - required: true
          schema:
            title: Tagid
            type: string
          name: tagId
          in: path
      requestBody:
        content:
          application/json:
            schema:
              title: Body
              type: object
        required: true
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TagOutput'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
      security:
        - JWTBearer: []
  /api/v1/agent-tools:
    get:
      tags:
        - Agent tools
      summary: List Agent Tools
      description: List all agent tools
      operationId: List_agent_tools_api_v1_agent_tools_get
      parameters:
        - required: false
          schema:
            title: Expand
            type: boolean
            default: false
          name: expand
          in: query
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AgentToolListOutput'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
      security:
        - JWTBearer: []
    post:
      tags:
        - Agent tools
      summary: Create Agent Tool
      description: Create a agent tool
      operationId: Create_agent_tool_api_v1_agent_tools_post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/app__lib__models__agent_tool__AgentTool'
        required: true
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AgentToolOutput'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
      security:
        - JWTBearer: []
  /api/v1/agent-tools/{agentToolId}:
    get:
      tags:
        - Agent tools
      summary: Get Agent Tool
      description: Get a specific agent tool
      operationId: Get_agent_tool_api_v1_agent_tools__agentToolId__get
      parameters:
        - required: true
          schema:
            title: Agenttoolid
            type: string
          name: agentToolId
          in: path
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AgentToolOutput'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
      security:
        - JWTBearer: []
    delete:
      tags:
        - Agent tools
      summary: Delete Agent Tool
      description: Delete a specific agent tool
      operationId: Delete_agent_tool_api_v1_agent_tools__agentToolId__delete
      parameters:
        - required: true
          schema:
            title: Agenttoolid
            type: string
          name: agentToolId
          in: path
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AgentToolOutput'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
      security:
        - JWTBearer: []
  /api/v1/auth/sign-in:
    post:
      tags:
        - Auth
      summary: Sign In
      operationId: sign_in_api_v1_auth_sign_in_post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignIn'
        required: true
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SignInOutput'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /api/v1/auth/sign-up:
    post:
      tags:
        - Auth
      summary: Sign Up
      operationId: sign_up_api_v1_auth_sign_up_post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignUp'
        required: true
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SignInOutput'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /api/v1/auth/oauth/callback:
    post:
      tags:
        - Auth
      summary: Oauth Handler
      operationId: oauth_handler_api_v1_auth_oauth_callback_post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OAuth'
        required: true
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /api/v1/users/me:
    get:
      tags:
        - User
      summary: Read User Me
      operationId: read_user_me_api_v1_users_me_get
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserOutput'
      security:
        - JWTBearer: []
  /api/v1/users/{userId}:
    get:
      tags:
        - User
      summary: Read User
      operationId: read_user_api_v1_users__userId__get
      parameters:
        - required: true
          schema:
            title: Userid
            type: string
          name: userId
          in: path
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserOutput'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /api/v1/api-tokens:
    get:
      tags:
        - Api token
      summary: List Api Tokens
      description: List all API tokens
      operationId: List_API_tokens_api_v1_api_tokens_get
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiTokenListOutput'
      security:
        - JWTBearer: []
    post:
      tags:
        - Api token
      summary: Create Api Token
      description: Create a new API token
      operationId: Create_API_token_api_v1_api_tokens_post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/app__lib__models__api_token__ApiToken'
        required: true
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiTokenOutput'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
      security:
        - JWTBearer: []
  /api/v1/api-tokens/{tokenId}:
    get:
      tags:
        - Api token
      summary: Get Api Token
      description: Get a specific API token
      operationId: Get_API_token_api_v1_api_tokens__tokenId__get
      parameters:
        - required: true
          schema:
            title: Tokenid
            type: string
          name: tokenId
          in: path
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiTokenOutput'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
      security:
        - JWTBearer: []
    delete:
      tags:
        - Api token
      summary: Delete Api Token
      description: Delete a specific API token
      operationId: Delete_API_token_api_v1_api_tokens__tokenId__delete
      parameters:
        - required: true
          schema:
            title: Tokenid
            type: string
          name: tokenId
          in: path
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiTokenOutput'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
      security:
        - JWTBearer: []
  /api/v1/documents:
    get:
      tags:
        - Documents
      summary: List Documents
      description: List all documents
      operationId: List_documents_api_v1_documents_get
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentListOutput'
      security:
        - JWTBearer: []
    post:
      tags:
        - Documents
      summary: Create Document
      description: Create a new document
      operationId: Create_document_api_v1_documents_post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/app__lib__models__document__Document'
        required: true
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentOuput'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
      security:
        - JWTBearer: []
  /api/v1/documents/{documentId}:
    get:
      tags:
        - Documents
      summary: Get Document
      description: Get a specific document
      operationId: Get_document_api_v1_documents__documentId__get
      parameters:
        - required: true
          schema:
            title: Documentid
            type: string
          name: documentId
          in: path
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentOuput'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
      security:
        - JWTBearer: []
    delete:
      tags:
        - Documents
      summary: Delete Document
      description: Delete a specific document
      operationId: Delete_document_api_v1_documents__documentId__delete
      parameters:
        - required: true
          schema:
            title: Documentid
            type: string
          name: documentId
          in: path
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentOuput'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
      security:
        - JWTBearer: []
    patch:
      tags:
        - Documents
      summary: Patch Document
      description: Patch a specific document
      operationId: Patch_document_api_v1_documents__documentId__patch
      parameters:
        - required: true
          schema:
            title: Documentid
            type: string
          name: documentId
          in: path
      requestBody:
        content:
          application/json:
            schema:
              title: Body
              type: object
        required: true
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentOuput'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
      security:
        - JWTBearer: []
  /api/v1/prompts:
    get:
      tags:
        - Prompts
      summary: List Prompts
      description: List all prompts
      operationId: List_prompts_api_v1_prompts_get
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PromptListOutput'
      security:
        - JWTBearer: []
    post:
      tags:
        - Prompts
      summary: Create A Prompt
      description: Create a new prompt
      operationId: Create_a_prompt_api_v1_prompts_post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/app__lib__models__prompt__Prompt'
        required: true
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PromptOutput'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
      security:
        - JWTBearer: []
  /api/v1/prompts/{promptId}:
    get:
      tags:
        - Prompts
      summary: Get Prompt
      description: Get a specific prompt
      operationId: Get_prompt_api_v1_prompts__promptId__get
      parameters:
        - required: true
          schema:
            title: Promptid
            type: string
          name: promptId
          in: path
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PromptOutput'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
      security:
        - JWTBearer: []
    delete:
      tags:
        - Prompts
      summary: Delete Prompt
      description: Delete a specific prompt
      operationId: Delete_prompt_api_v1_prompts__promptId__delete
      parameters:
        - required: true
          schema:
            title: Promptid
            type: string
          name: promptId
          in: path
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PromptOutput'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
      security:
        - JWTBearer: []
    patch:
      tags:
        - Prompts
      summary: Patch Prompt
      description: Patch a specific prompt
      operationId: Patch_prompt_api_v1_prompts__promptId__patch
      parameters:
        - required: true
          schema:
            title: Promptid
            type: string
          name: promptId
          in: path
      requestBody:
        content:
          application/json:
            schema:
              title: Body
              type: object
        required: true
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PromptOutput'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
      security:
        - JWTBearer: []
  /api/v1/tools:
    get:
      tags:
        - Tools
      summary: List Tools
      description: List all tools
      operationId: List_tools_api_v1_tools_get
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ToolListOutput'
      security:
        - JWTBearer: []
    post:
      tags:
        - Tools
      summary: Create A Tool
      description: Create a new tool
      operationId: Create_a_tool_api_v1_tools_post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/app__lib__models__tool__Tool'
        required: true
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ToolOutput'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
      security:
        - JWTBearer: []
  /api/v1/tools/{toolId}:
    get:
      tags:
        - Tools
      summary: Get Tool
      description: Get a specific tool
      operationId: Get_tool_api_v1_tools__toolId__get
      parameters:
        - required: true
          schema:
            title: Toolid
            type: string
          name: toolId
          in: path
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ToolOutput'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
      security:
        - JWTBearer: []
    delete:
      tags:
        - Tools
      summary: Delete Tool
      description: Delete a specific tool
      operationId: Delete_tool_api_v1_tools__toolId__delete
      parameters:
        - required: true
          schema:
            title: Toolid
            type: string
          name: toolId
          in: path
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ToolOutput'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
      security:
        - JWTBearer: []
    patch:
      tags:
        - Tools
      summary: Patch Tool
      description: Patch a specific tool
      operationId: Patch_tool_api_v1_tools__toolId__patch
      parameters:
        - required: true
          schema:
            title: Toolid
            type: string
          name: toolId
          in: path
      requestBody:
        content:
          application/json:
            schema:
              title: Body
              type: object
        required: true
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ToolOutput'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
      security:
        - JWTBearer: []
  /api/v1/traces:
    get:
      tags:
        - Traces
      summary: List Agent Traces
      description: List all agent traces
      operationId: List_agent_traces_api_v1_traces_get
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
      security:
        - JWTBearer: []
components:
  schemas:
    AgentDocumentListOuput:
      title: AgentDocumentListOuput
      required:
        - success
        - data
      type: object
      properties:
        success:
          title: Success
          type: boolean
        data:
          title: Data
          type: array
          items:
            $ref: '#/components/schemas/app__lib__models__response__AgentDocument'
    AgentDocumentOutput:
      title: AgentDocumentOutput
      required:
        - success
      type: object
      properties:
        success:
          title: Success
          type: boolean
        data:
          $ref: '#/components/schemas/app__lib__models__response__AgentDocument'
    AgentListOutput:
      title: AgentListOutput
      required:
        - success
        - data
      type: object
      properties:
        success:
          title: Success
          type: boolean
        data:
          title: Data
          type: array
          items:
            $ref: '#/components/schemas/app__lib__models__response__Agent'
    AgentOutput:
      title: AgentOutput
      required:
        - success
      type: object
      properties:
        success:
          title: Success
          type: boolean
        data:
          $ref: '#/components/schemas/app__lib__models__response__Agent'
    AgentToolListOutput:
      title: AgentToolListOutput
      required:
        - success
        - data
      type: object
      properties:
        success:
          title: Success
          type: boolean
        data:
          title: Data
          type: array
          items:
            $ref: '#/components/schemas/app__lib__models__response__AgentTool'
    AgentToolOutput:
      title: AgentToolOutput
      required:
        - success
      type: object
      properties:
        success:
          title: Success
          type: boolean
        data:
          $ref: '#/components/schemas/app__lib__models__response__AgentTool'
    AgentType:
      title: AgentType
      enum:
        - REACT
        - PLANSOLVE
        - OPENAI
      type: string
      description: An enumeration.
    ApiTokenListOutput:
      title: ApiTokenListOutput
      required:
        - success
        - data
      type: object
      properties:
        success:
          title: Success
          type: boolean
        data:
          title: Data
          type: array
          items:
            $ref: '#/components/schemas/app__lib__models__response__ApiToken'
    ApiTokenOutput:
      title: ApiTokenOutput
      required:
        - success
      type: object
      properties:
        success:
          title: Success
          type: boolean
        data:
          $ref: '#/components/schemas/app__lib__models__response__ApiToken'
    DocumentListOutput:
      title: DocumentListOutput
      required:
        - success
        - data
      type: object
      properties:
        success:
          title: Success
          type: boolean
        data:
          title: Data
          type: array
          items:
            $ref: '#/components/schemas/app__lib__models__response__Document'
    DocumentOuput:
      title: DocumentOuput
      required:
        - success
      type: object
      properties:
        success:
          title: Success
          type: boolean
        data:
          $ref: '#/components/schemas/app__lib__models__response__Document'
    DocumentType:
      title: DocumentType
      enum:
        - TXT
        - PDF
        - CSV
        - YOUTUBE
        - OPENAPI
        - URL
        - MARKDOWN
        - FIRESTORE
        - PSYCHIC
        - GITHUB_REPOSITORY
        - WEBPAGE
        - STRIPE
        - AIRTABLE
        - SITEMAP
        - NOTION
      type: string
      description: An enumeration.
    HTTPValidationError:
      title: HTTPValidationError
      type: object
      properties:
        detail:
          title: Detail
          type: array
          items:
            $ref: '#/components/schemas/ValidationError'
    OAuth:
      title: OAuth
      required:
        - email
        - name
      type: object
      properties:
        email:
          title: Email
          type: string
        name:
          title: Name
          type: string
        access_token:
          title: Access Token
          type: string
        provider:
          title: Provider
          type: string
    PredictAgent:
      title: PredictAgent
      required:
        - input
      type: object
      properties:
        input:
          title: Input
          type: object
        has_streaming:
          title: Has Streaming
          type: boolean
          default: false
        session:
          title: Session
          type: string
        cache_ttl:
          title: Cache Ttl
          type: integer
    PredictAgentOutput:
      title: PredictAgentOutput
      required:
        - success
        - data
        - trace
      type: object
      properties:
        success:
          title: Success
          type: boolean
        data:
          title: Data
          type: string
        trace:
          title: Trace
          type: object
    PromptListOutput:
      title: PromptListOutput
      required:
        - success
        - data
      type: object
      properties:
        success:
          title: Success
          type: boolean
        data:
          title: Data
          type: array
          items:
            $ref: '#/components/schemas/app__lib__models__response__Prompt'
    PromptOutput:
      title: PromptOutput
      required:
        - success
      type: object
      properties:
        success:
          title: Success
          type: boolean
        data:
          $ref: '#/components/schemas/app__lib__models__response__Prompt'
    SignIn:
      title: SignIn
      required:
        - email
        - password
      type: object
      properties:
        email:
          title: Email
          type: string
        password:
          title: Password
          type: string
    SignInOutput:
      title: SignInOutput
      required:
        - success
        - data
      type: object
      properties:
        success:
          title: Success
          type: boolean
        data:
          title: Data
          type: object
    SignUp:
      title: SignUp
      required:
        - email
        - password
      type: object
      properties:
        email:
          title: Email
          type: string
        password:
          title: Password
          type: string
        name:
          title: Name
          type: string
        metadata:
          title: Metadata
          type: object
    TagListOutput:
      title: TagListOutput
      required:
        - success
        - data
      type: object
      properties:
        success:
          title: Success
          type: boolean
        data:
          title: Data
          type: array
          items:
            $ref: '#/components/schemas/app__lib__models__response__Tag'
    TagOutput:
      title: TagOutput
      required:
        - success
      type: object
      properties:
        success:
          title: Success
          type: boolean
        data:
          $ref: '#/components/schemas/app__lib__models__response__Tag'
    ToolListOutput:
      title: ToolListOutput
      required:
        - success
        - data
      type: object
      properties:
        success:
          title: Success
          type: boolean
        data:
          title: Data
          type: array
          items:
            $ref: '#/components/schemas/app__lib__models__response__Tool'
    ToolOutput:
      title: ToolOutput
      required:
        - success
      type: object
      properties:
        success:
          title: Success
          type: boolean
        data:
          $ref: '#/components/schemas/app__lib__models__response__Tool'
    ToolType:
      title: ToolType
      enum:
        - BROWSER
        - SEARCH
        - WOLFRAM_ALPHA
        - REPLICATE
        - ZAPIER_NLA
        - AGENT
        - OPENAPI
        - CHATGPT_PLUGIN
        - METAPHOR
      type: string
      description: An enumeration.
    User:
      title: User
      required:
        - id
        - email
      type: object
      properties:
        id:
          title: Id
          type: string
        email:
          title: Email
          type: string
        password:
          title: Password
          type: string
        name:
          title: Name
          type: string
        createdAt:
          title: Createdat
          type: string
          format: date-time
        updatedAt:
          title: Updatedat
          type: string
          format: date-time
        deletedAt:
          title: Deletedat
          type: string
          format: date-time
        provider:
          title: Provider
          type: string
        accessToken:
          title: Accesstoken
          type: string
    UserOutput:
      title: UserOutput
      required:
        - success
      type: object
      properties:
        success:
          title: Success
          type: boolean
        data:
          $ref: '#/components/schemas/User'
    ValidationError:
      title: ValidationError
      required:
        - loc
        - msg
        - type
      type: object
      properties:
        loc:
          title: Location
          type: array
          items:
            anyOf:
              - type: string
              - type: integer
        msg:
          title: Message
          type: string
        type:
          title: Error Type
          type: string
    app__lib__models__agent__Agent:
      title: Agent
      required:
        - name
        - type
      type: object
      properties:
        name:
          title: Name
          type: string
        type:
          title: Type
          type: string
        description:
          title: Description
          type: string
        avatarUrl:
          title: Avatarurl
          type: string
        llm:
          title: Llm
          type: object
        hasMemory:
          title: Hasmemory
          type: boolean
          default: false
        promptId:
          title: Promptid
          type: string
    app__lib__models__agent_document__AgentDocument:
      title: AgentDocument
      required:
        - agentId
        - documentId
      type: object
      properties:
        agentId:
          title: Agentid
          type: string
        documentId:
          title: Documentid
          type: string
    app__lib__models__agent_tool__AgentTool:
      title: AgentTool
      required:
        - agentId
        - toolId
      type: object
      properties:
        agentId:
          title: Agentid
          type: string
        toolId:
          title: Toolid
          type: string
    app__lib__models__api_token__ApiToken:
      title: ApiToken
      required:
        - description
      type: object
      properties:
        description:
          title: Description
          type: string
    app__lib__models__document__Document:
      title: Document
      required:
        - type
        - name
      type: object
      properties:
        type:
          title: Type
          type: string
        url:
          title: Url
          type: string
        description:
          title: Description
          type: string
        content:
          title: Content
          type: string
        name:
          title: Name
          type: string
        authorization:
          title: Authorization
          type: object
        metadata:
          title: Metadata
          type: object
        from_page:
          title: From Page
          type: integer
          default: 1
        to_page:
          title: To Page
          type: integer
        splitter:
          title: Splitter
          type: object
    app__lib__models__prompt__Prompt:
      title: Prompt
      required:
        - name
        - input_variables
        - template
      type: object
      properties:
        name:
          title: Name
          type: string
        input_variables:
          title: Input Variables
          type: array
          items: {}
        template:
          title: Template
          type: string
    app__lib__models__response__Agent:
      title: Agent
      required:
        - id
        - userId
        - name
        - type
        - llm
        - hasMemory
        - isPublic
        - isListed
      type: object
      properties:
        id:
          title: Id
          type: string
        description:
          title: Description
          type: string
        avatarUrl:
          title: Avatarurl
          type: string
        shareableToken:
          title: Shareabletoken
          type: string
        userId:
          title: Userid
          type: string
        documentId:
          title: Documentid
          type: string
        toolId:
          title: Toolid
          type: string
        tags:
          title: Tags
          type: array
          items:
            type: object
        promptId:
          title: Promptid
          type: string
        prompt:
          title: Prompt
          type: object
        name:
          title: Name
          type: string
        type:
          $ref: '#/components/schemas/AgentType'
        llm:
          title: Llm
          type: object
        hasMemory:
          title: Hasmemory
          type: boolean
        isPublic:
          title: Ispublic
          type: boolean
        isListed:
          title: Islisted
          type: boolean
        createdAt:
          title: Createdat
          type: string
          format: date-time
        updatedAt:
          title: Updatedat
          type: string
          format: date-time
    app__lib__models__response__AgentDocument:
      title: AgentDocument
      required:
        - id
        - agentId
      type: object
      properties:
        id:
          title: Id
          type: string
        documentId:
          title: Documentid
          type: string
        document:
          $ref: '#/components/schemas/app__lib__models__response__Document'
        agentId:
          title: Agentid
          type: string
        createdAt:
          title: Createdat
          type: string
          format: date-time
        updatedAt:
          title: Updatedat
          type: string
          format: date-time
        deletedAt:
          title: Deletedat
          type: string
          format: date-time
    app__lib__models__response__AgentTool:
      title: AgentTool
      required:
        - id
        - agentId
      type: object
      properties:
        id:
          title: Id
          type: string
        toolId:
          title: Toolid
          type: string
        tool:
          $ref: '#/components/schemas/app__lib__models__response__Tool'
        agentId:
          title: Agentid
          type: string
        createdAt:
          title: Createdat
          type: string
          format: date-time
        updatedAt:
          title: Updatedat
          type: string
          format: date-time
        deletedAt:
          title: Deletedat
          type: string
          format: date-time
    app__lib__models__response__ApiToken:
      title: ApiToken
      required:
        - id
        - userId
        - description
        - token
      type: object
      properties:
        id:
          title: Id
          type: string
        userId:
          title: Userid
          type: string
        description:
          title: Description
          type: string
        token:
          title: Token
          type: string
    app__lib__models__response__Document:
      title: Document
      required:
        - id
        - userId
        - type
        - name
      type: object
      properties:
        id:
          title: Id
          type: string
        description:
          title: Description
          type: string
        userId:
          title: Userid
          type: string
        type:
          $ref: '#/components/schemas/DocumentType'
        url:
          title: Url
          type: string
        content:
          title: Content
          type: string
        contentHash:
          title: Contenthash
          type: string
        name:
          title: Name
          type: string
        splitter:
          title: Splitter
          type: object
        createdAt:
          title: Createdat
          type: string
          format: date-time
        updatedAt:
          title: Updatedat
          type: string
          format: date-time
        index:
          title: Index
          type: object
        authorization:
          title: Authorization
          type: object
        metadata:
          title: Metadata
          type: object
    app__lib__models__response__Prompt:
      title: Prompt
      required:
        - id
        - name
        - template
        - input_variables
        - userId
      type: object
      properties:
        id:
          title: Id
          type: string
        name:
          title: Name
          type: string
        template:
          title: Template
          type: string
        input_variables:
          title: Input Variables
          type: array
          items: {}
        userId:
          title: Userid
          type: string
        createdAt:
          title: Createdat
          type: string
          format: date-time
        updatedAt:
          title: Updatedat
          type: string
          format: date-time
        deletedAt:
          title: Deletedat
          type: string
          format: date-time
    app__lib__models__response__Tag:
      title: Tag
      required:
        - id
        - name
        - userId
      type: object
      properties:
        id:
          title: Id
          type: string
        name:
          title: Name
          type: string
        color:
          title: Color
          type: string
        userId:
          title: Userid
          type: string
        createdAt:
          title: Createdat
          type: string
          format: date-time
        updatedAt:
          title: Updatedat
          type: string
          format: date-time
    app__lib__models__response__Tool:
      title: Tool
      required:
        - id
        - name
        - userId
        - returnDirect
      type: object
      properties:
        id:
          title: Id
          type: string
        name:
          title: Name
          type: string
        description:
          title: Description
          type: string
        type:
          $ref: '#/components/schemas/ToolType'
        metadata:
          title: Metadata
          type: object
        userId:
          title: Userid
          type: string
        returnDirect:
          title: Returndirect
          type: boolean
        createdAt:
          title: Createdat
          type: string
          format: date-time
        updatedAt:
          title: Updatedat
          type: string
          format: date-time
    app__lib__models__tag__Tag:
      title: Tag
      required:
        - name
        - color
      type: object
      properties:
        name:
          title: Name
          type: string
        color:
          title: Color
          type: string
    app__lib__models__tool__Tool:
      title: Tool
      required:
        - name
        - type
        - description
      type: object
      properties:
        name:
          title: Name
          type: string
        type:
          title: Type
          type: string
        description:
          title: Description
          type: string
        returnDirect:
          title: Returndirect
          type: boolean
          default: false
        authorization:
          title: Authorization
          type: object
        metadata:
          title: Metadata
          type: object
  securitySchemes:
    JWTBearer:
      type: http
      scheme: bearer
