{
  "openapi": "3.0.2",
  "servers": [
    {
      "url": "https://api.sandbox.primer.io"
    },
    {
      "url": "https://api.primer.io"
    }
  ],
  "tags": [
    {
      "name": "Client Session API"
    },
    {
      "name": "Payments API"
    },
    {
      "name": "Payment Methods API"
    },
    {
      "name": "Observability API"
    },
    {
      "name": "Loyalty API"
    }
  ],
  "info": {
    "x-logo": {
      "url": "https://apidocs.primer.io/docs/assets/images/primer-logo.svg"
    },
    "title": "Primer API",
    "version": "2.0.0"
  },
  "x-readme": {
    "explorer-enabled": true,
    "samples-languages": ["curl", "javascript", "python", "kotlin", "swift"],
    "headers": [
      {
        "key": "X-API-VERSION",
        "value": "2021-09-27"
      }
    ],
    "proxy-enabled": true,
    "samples-enabled": true
  },
  "security": [
    {
      "ApiKeyAuth": []
    }
  ],
  "paths": {
    "/client-session": {
      "post": {
        "tags": ["Client Session API"],
        "summary": "Create a client session",
        "description": "Creating a client session generates a client token: a temporary key used to initialize [Universal Checkout](https://primer.io/docs/accept-payments/setup-universal-checkout/installation/web) and authenticate it against your account.\n\nUniversal Checkout automatically retrieves all the settings from the client session and the Dashboard to configure the payment methods and the checkout experience.\n\n<b>Note:</b>\nWhen creating a Client Session, please make sure to provide `currencyCode`, `orderId`, and `amount`. \nIf any of these are not yet available, you can provide them when making the payment request.\n\nClient tokens expire after 24 hours.\n",
        "operationId": "create_client_side_token_client_session_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "Request",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ClientSessionAPIRequest"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClientSessionAPIResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestErrorResponse"
                },
                "example": {
                  "error": {
                    "errorId": "ClientSessionValidationError",
                    "description": "The client token is invalid.",
                    "recoverySuggestion": "Please provide a valid client token.",
                    "diagnosticsId": "1234567898"
                  }
                }
              }
            }
          },
          "422": {
            "description": "Error Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnprocessableEntityErrorResponse"
                },
                "example": {
                  "error": {
                    "errorId": "RequestValidationError",
                    "description": "We were unable to validate your request, please check your payload against https://primer.io/docs/api",
                    "diagnosticsId": "1234567898",
                    "validationErrors": [
                      {
                        "model": "ClientSessionAPIRequest",
                        "errors": [
                          {
                            "path": "$.customerId",
                            "description": "Value must be a valid string"
                          }
                        ]
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    },
    "/payments": {
      "get": {
        "tags": ["Payments API"],
        "summary": "Search & list payments",
        "description": "<p/>\n\nRetrieve a list of your payments.\n\nResults are paginated, they will only return up to 100 payments maximum.\nTo access the next page of result, set the `cursor` query parameter to the value of `nextCursor` in your current result payload. Use `prevCursor` to go back to the previous page.\n\n**Note:** this endpoint returns a list of summarized payments. Not all payments attributes are present. You can use the query parameters to filter payments. \nYou can separate multiple query parameters with the `&` symbol.\nQuery parameters with types of the form \"Array of strings\" (such as the status parameter) can be specified as a comma-separated list.\n\n**Note:** payments will be available within a minute from being created.\n",
        "operationId": "list_payments_payments_get",
        "parameters": [
          {
            "description": "Filter payments by their status.",
            "required": false,
            "schema": {
              "title": "Payment status",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/PaymentStatus"
              },
              "description": "Filter payments by their status."
            },
            "name": "status",
            "in": "query"
          },
          {
            "description": "Filter payments by their payment method type.",
            "required": false,
            "schema": {
              "title": "Payment method type",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/PaymentMethodTypeEnum"
              },
              "description": "Filter payments by their payment method type."
            },
            "name": "payment_method_type",
            "in": "query"
          },
          {
            "description": "Filter payments by their payment processor.",
            "required": false,
            "schema": {
              "title": "Payment processor",
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Filter payments by their payment processor."
            },
            "name": "processor",
            "in": "query"
          },
          {
            "description": "Filter payments by their payment currency.\n\nUse the three-letter currency code in [ISO 4217 format](https://en.wikipedia.org/wiki/ISO_4217#Active_codes).\ne.g. use `USD` for US dollars.\n",
            "required": false,
            "schema": {
              "title": "Payment currency",
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Filter payments by their payment currency.\n\nUse the three-letter currency code in [ISO 4217 format](https://en.wikipedia.org/wiki/ISO_4217#Active_codes).\ne.g. use `USD` for US dollars.\"\n"
            },
            "name": "currency_code",
            "in": "query"
          },
          {
            "description": "Return only payments from this date (inclusive).",
            "required": false,
            "schema": {
              "title": "Payment date",
              "type": "string",
              "description": "Return only payments from this date (inclusive).",
              "format": "date-time"
            },
            "name": "from_date",
            "in": "query"
          },
          {
            "description": "Return only payments up to this date (inclusive).",
            "required": false,
            "schema": {
              "title": "Payment date",
              "type": "string",
              "description": "Return only payments up to this date (inclusive).",
              "format": "date-time"
            },
            "name": "to_date",
            "in": "query"
          },
          {
            "description": "Return payments related to this order ID.",
            "required": false,
            "schema": {
              "title": "Payment order ID",
              "type": "string",
              "description": "Return payments related to this order ID."
            },
            "name": "order_id",
            "in": "query"
          },
          {
            "description": "Return payments of this amount minimum (inclusive).",
            "required": false,
            "schema": {
              "title": "Payment amount",
              "type": "integer",
              "description": "Return payments of this amount minimum (inclusive)."
            },
            "name": "min_amount",
            "in": "query"
          },
          {
            "description": "Return payments of this amount max (inclusive).",
            "required": false,
            "schema": {
              "title": "Payment amount",
              "type": "integer",
              "description": "Return payments of this amount max (inclusive)."
            },
            "name": "max_amount",
            "in": "query"
          },
          {
            "description": "ID of the customer that has made the payment.",
            "required": false,
            "schema": {
              "title": "Customer ID",
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "ID of the customer that has made the payment."
            },
            "name": "customer_id",
            "in": "query"
          },
          {
            "description": "ID of the merchant involved in the payment.",
            "required": false,
            "schema": {
              "title": "Merchant ID",
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "ID of the merchant involved in the payment."
            },
            "name": "merchant_id",
            "in": "query"
          },
          {
            "description": "Email of the customer that has made the payment.",
            "required": false,
            "schema": {
              "title": "Customer email address",
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Email of the customer that has made the payment."
            },
            "name": "customer_email_address",
            "in": "query"
          },
          {
            "description": "Last 4 digits of the card used for the payment.",
            "required": false,
            "schema": {
              "title": "Last 4 digits",
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Last 4 digits of the card used for the payment."
            },
            "name": "last_4_digits",
            "in": "query"
          },
          {
            "description": "Paypal email address associated with the payment.",
            "required": false,
            "schema": {
              "title": "Paypal email",
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Paypal email address associated with the payment."
            },
            "name": "paypal_email",
            "in": "query"
          },
          {
            "description": "Klarna email address associated with the payment.",
            "required": false,
            "schema": {
              "title": "Klarna email",
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Klarna email address associated with the payment."
            },
            "name": "klarna_email",
            "in": "query"
          },
          {
            "description": "Maximum number of payments to return per page.",
            "required": false,
            "schema": {
              "title": "Limit result set",
              "maximum": 100,
              "minimum": 1,
              "type": "integer",
              "description": "Maximum number of payments to return per page.",
              "default": 100
            },
            "name": "limit",
            "in": "query"
          },
          {
            "description": "If results are paginated, pass the `nextCursor` to access next page.",
            "required": false,
            "schema": {
              "title": "Page cursor",
              "type": "string",
              "description": "If results are paginated, pass the `nextCursor` to access next page."
            },
            "name": "cursor",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentListAPIResponse"
                }
              }
            }
          },
          "422": {
            "description": "Error Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnprocessableEntityErrorResponse"
                },
                "example": {
                  "error": {
                    "errorId": "RequestValidationError",
                    "description": "Invalid type for `currencyCode`",
                    "recoverySuggestion": "The currency code must be a valid value",
                    "diagnosticsId": "1234567898"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Payments API"],
        "summary": "Create a payment",
        "description": "<p/>\n\nCreate and authorize a payment for a given customer order. You should provide a payment method token here to avoid PCI implications.\n\nIf only a payment method token is passed, the values passed with the Client Session determine the amount, currency etc.\n\nNote: `amount`, `currencyCode` and `orderId` are required during payment creation. Make sure to pass these fields when creating a client session, or if not yet available, when creating a payment.\n\nAll fields provided on this request will take preference over any field on the `order` associated with the client session. E.g. if you pass `amount` on this request, it will override the `amount` on the `order` associated with the Client Session.\n",
        "operationId": "create_payment_payments_post",
        "parameters": [
          {
            "required": false,
            "schema": {
              "title": "X-Idempotency-Key",
              "type": "string"
            },
            "name": "X-Idempotency-Key",
            "description": "Optional key to make the request idempotent. Learn more in the [Idempotency Key guide](../docs#idempotency-key).",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PaymentCreationAPIRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentAPIResponse"
                },
                "example": {
                  "id": "kHdEw9EG",
                  "date": "2021-02-21T15:36:16.367687",
                  "status": "AUTHORIZED",
                  "orderId": "order-abc",
                  "customerId": "customer-123",
                  "currencyCode": "EUR",
                  "amount": 42,
                  "paymentMethod": {
                    "paymentMethodToken": "heNwnqaeRiqvY1UcslfQc3wxNjEzOTIxNjc4",
                    "vaultedPaymentMethodToken": "_xlXlmBcTnuFxc2N3HAI73wxNjE1NTU5ODY5",
                    "descriptor": "Purchase: Socks",
                    "analyticsId": "VtkMDAxZW5isH0HsbbNxZ3lo",
                    "paymentMethodType": "PAYMENT_CARD",
                    "paymentMethodData": {
                      "first6Digits": "411111",
                      "last4Digits": "1111",
                      "expirationMonth": "12",
                      "expirationYear": "2030",
                      "cardholderName": "John Biggins",
                      "network": "Visa",
                      "isNetworkTokenized": false,
                      "binData": {
                        "network": "VISA",
                        "regionalRestriction": "UNKNOWN",
                        "accountNumberType": "UNKNOWN",
                        "accountFundingType": "UNKNOWN",
                        "prepaidReloadableIndicator": "NOT_APPLICABLE",
                        "productUsageType": "UNKNOWN",
                        "productCode": "VISA",
                        "productName": "VISA"
                      }
                    }
                  },
                  "processor": {
                    "name": "STRIPE",
                    "processor_merchant_id": "acct_stripe_1234",
                    "amountCaptured": 0,
                    "amountRefunded": 0
                  },
                  "transactions": [
                    {
                      "type": "SALE",
                      "processorStatus": "AUTHORIZED",
                      "processorName": "STRIPE",
                      "processorMerchantId": "acct_stripe_1234",
                      "processorTransactionId": "54c4eb5b3ef8a"
                    }
                  ],
                  "customer": {
                    "email": "customer123@gmail.com"
                  },
                  "metadata": {
                    "productId": 123,
                    "merchantId": "a13bsd62s"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Error Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestErrorResponse"
                },
                "example": {
                  "error": {
                    "errorId": "PaymentError",
                    "description": "The payment could not be created.",
                    "diagnosticsId": "1234567898"
                  }
                }
              }
            }
          },
          "422": {
            "description": "Error Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnprocessableEntityErrorResponse"
                },
                "example": {
                  "error": {
                    "errorId": "RequestValidationError",
                    "description": "Missing fields for payment.",
                    "recoverySuggestion": "When creating a payment `amount` must either be provided via the Client Session or the Payment request.",
                    "diagnosticsId": "1234567898"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/payments/{id}/capture": {
      "post": {
        "tags": ["Payments API"],
        "summary": "Capture a payment",
        "description": "<p/>\n\nIf you have successfully authorized a payment, you can now fully capture, or partially capture funds from the authorized payment, depending on whether your selected payment processor supports it. The payment will be updated to `SETTLED` or `SETTLING`, depending on the payment method type.\n\nThe payload sent in this capture request is completely optional. If you don't send a payload with the capture request, the full amount that was authorized will be sent for capture. \n\nBelow are the available payload attributes, which give you more granular control when capturing funds, if you require it.\n",
        "operationId": "capture_payment_payments__id__capture_post",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Payment ID",
              "type": "string"
            },
            "name": "id",
            "description": "ID of the payment to capture.",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "title": "X-Idempotency-Key",
              "type": "string"
            },
            "name": "X-Idempotency-Key",
            "description": "Optional key to make the request idempotent. Learn more in the [Idempotency Key guide](../docs#idempotency-key).",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "Data",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PaymentCaptureAPIRequest"
                  }
                ],
                "default": {
                  "final": true
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentAPIResponse"
                },
                "example": {
                  "id": "kHdEw9EG",
                  "date": "2021-02-21T15:36:16.367687",
                  "status": "SETTLED",
                  "orderId": "order-abc",
                  "customerId": "customer-123",
                  "currencyCode": "EUR",
                  "amount": 42,
                  "paymentMethod": {
                    "paymentMethodToken": "heNwnqaeRiqvY1UcslfQc3wxNjEzOTIxNjc4",
                    "vaultedPaymentMethodToken": "_xlXlmBcTnuFxc2N3HAI73wxNjE1NTU5ODY5",
                    "descriptor": "Purchase: Socks",
                    "analyticsId": "VtkMDAxZW5isH0HsbbNxZ3lo",
                    "paymentMethodType": "PAYMENT_CARD",
                    "paymentMethodData": {
                      "first6Digits": "411111",
                      "last4Digits": "1111",
                      "expirationMonth": "12",
                      "expirationYear": "2030",
                      "cardholderName": "John Biggins",
                      "network": "Visa",
                      "isNetworkTokenized": false,
                      "binData": {
                        "network": "VISA",
                        "regionalRestriction": "UNKNOWN",
                        "accountNumberType": "UNKNOWN",
                        "accountFundingType": "UNKNOWN",
                        "prepaidReloadableIndicator": "NOT_APPLICABLE",
                        "productUsageType": "UNKNOWN",
                        "productCode": "VISA",
                        "productName": "VISA"
                      }
                    }
                  },
                  "processor": {
                    "name": "STRIPE",
                    "processor_merchant_id": "acct_stripe_1234",
                    "amountCaptured": 42,
                    "amountRefunded": 0
                  },
                  "transactions": [
                    {
                      "type": "SALE",
                      "processorStatus": "SETTLED",
                      "processorName": "STRIPE",
                      "processorMerchantId": "acct_stripe_1234",
                      "processorTransactionId": "54c4eb5b3ef8a"
                    }
                  ],
                  "customer": {
                    "email": "customer123@gmail.com"
                  },
                  "metadata": {
                    "productId": 123,
                    "merchantId": "a13bsd62s"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Error Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestErrorResponse"
                },
                "example": {
                  "error": {
                    "errorId": "PaymentError",
                    "description": "The payment could not be found",
                    "diagnosticsId": "1234567898"
                  }
                }
              }
            }
          },
          "422": {
            "description": "Error Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnprocessableEntityErrorResponse"
                },
                "example": {
                  "error": {
                    "errorId": "RequestValidationError",
                    "description": "We were unable to validate your request, please check your payload against https://primer.io/docs/api",
                    "diagnosticsId": "1234567898",
                    "validationErrors": [
                      {
                        "model": "PaymentCaptureAPIRequest",
                        "errors": [
                          {
                            "path": "$.amount",
                            "description": "Value must be a valid integer"
                          }
                        ]
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    },
    "/payments/{id}/cancel": {
      "post": {
        "tags": ["Payments API"],
        "summary": "Cancel a payment",
        "description": "<p/>\n\nProvided the payment has not reached `SETTLED` status, Primer will send a \"void\" request to the payment processor, thereby cancelling the payment and releasing the hold on customer funds. \n\nUpon success, the payment will transition to `CANCELLED`. \n\nThe payload is optional.\n",
        "operationId": "cancel_payment_payments__id__cancel_post",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Payment ID",
              "type": "string"
            },
            "name": "id",
            "description": "ID of payment to cancel.",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "title": "X-Idempotency-Key",
              "type": "string"
            },
            "name": "X-Idempotency-Key",
            "description": "Optional key to make the request idempotent. Learn more in the [Idempotency Key guide](../docs#idempotency-key).",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "Data",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PaymentCancelAPIRequest"
                  }
                ],
                "default": {}
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentAPIResponse"
                },
                "example": {
                  "id": "kHdEw9EG",
                  "date": "2021-02-21T15:36:16.367687",
                  "status": "CANCELLED",
                  "orderId": "order-abc",
                  "customerId": "customer-123",
                  "currencyCode": "EUR",
                  "amount": 42,
                  "paymentMethod": {
                    "paymentMethodToken": "heNwnqaeRiqvY1UcslfQc3wxNjEzOTIxNjc4",
                    "vaultedPaymentMethodToken": "_xlXlmBcTnuFxc2N3HAI73wxNjE1NTU5ODY5",
                    "descriptor": "Purchase: Socks",
                    "analyticsId": "VtkMDAxZW5isH0HsbbNxZ3lo",
                    "paymentMethodType": "PAYMENT_CARD",
                    "paymentMethodData": {
                      "first6Digits": "411111",
                      "last4Digits": "1111",
                      "expirationMonth": "12",
                      "expirationYear": "2030",
                      "cardholderName": "John Biggins",
                      "network": "Visa",
                      "isNetworkTokenized": false,
                      "binData": {
                        "network": "VISA",
                        "regionalRestriction": "UNKNOWN",
                        "accountNumberType": "UNKNOWN",
                        "accountFundingType": "UNKNOWN",
                        "prepaidReloadableIndicator": "NOT_APPLICABLE",
                        "productUsageType": "UNKNOWN",
                        "productCode": "VISA",
                        "productName": "VISA"
                      }
                    }
                  },
                  "processor": {
                    "name": "STRIPE",
                    "processor_merchant_id": "acct_stripe_1234",
                    "amountCaptured": 0,
                    "amountRefunded": 0
                  },
                  "transactions": [
                    {
                      "type": "SALE",
                      "processorStatus": "CANCELLED",
                      "processorName": "STRIPE",
                      "processorMerchantId": "acct_stripe_1234",
                      "processorTransactionId": "54c4eb5b3ef8a"
                    }
                  ],
                  "customer": {
                    "email": "customer123@gmail.com"
                  },
                  "metadata": {
                    "productId": 123,
                    "merchantId": "a13bsd62s"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Error Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestErrorResponse"
                },
                "example": {
                  "error": {
                    "errorId": "PaymentError",
                    "description": "The payment could not be found",
                    "diagnosticsId": "1234567898"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/payments/{id}/refund": {
      "post": {
        "tags": ["Payments API"],
        "summary": "Refund a payment",
        "description": "<p/>\n\nBy default, this request will refund the full amount.\n\nOptionally, pass in a lesser amount for a partial refund.\n",
        "operationId": "refund_payment_payments__id__refund_post",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Payment ID",
              "type": "string"
            },
            "name": "id",
            "description": "ID of payment to refund.",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "title": "X-Idempotency-Key",
              "type": "string"
            },
            "name": "X-Idempotency-Key",
            "description": "Optional key to make the request idempotent. Learn more in the [Idempotency Key guide](../docs#idempotency-key).",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "Data",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PaymentRefundAPIRequest"
                  }
                ],
                "default": {}
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentAPIResponse"
                },
                "example": {
                  "id": "kHdEw9EG",
                  "date": "2021-02-21T15:36:16.367687",
                  "status": "SETTLED",
                  "orderId": "order-abc",
                  "customerId": "customer-123",
                  "currencyCode": "EUR",
                  "amount": 42,
                  "paymentMethod": {
                    "paymentMethodToken": "heNwnqaeRiqvY1UcslfQc3wxNjEzOTIxNjc4",
                    "vaultedPaymentMethodToken": "_xlXlmBcTnuFxc2N3HAI73wxNjE1NTU5ODY5",
                    "descriptor": "Purchase: Socks",
                    "analyticsId": "VtkMDAxZW5isH0HsbbNxZ3lo",
                    "paymentMethodType": "PAYMENT_CARD",
                    "paymentMethodData": {
                      "first6Digits": "411111",
                      "last4Digits": "1111",
                      "expirationMonth": "12",
                      "expirationYear": "2030",
                      "cardholderName": "John Biggins",
                      "network": "Visa",
                      "isNetworkTokenized": false,
                      "binData": {
                        "network": "VISA",
                        "regionalRestriction": "UNKNOWN",
                        "accountNumberType": "UNKNOWN",
                        "accountFundingType": "UNKNOWN",
                        "prepaidReloadableIndicator": "NOT_APPLICABLE",
                        "productUsageType": "UNKNOWN",
                        "productCode": "VISA",
                        "productName": "VISA"
                      }
                    }
                  },
                  "processor": {
                    "name": "STRIPE",
                    "processor_merchant_id": "acct_stripe_1234",
                    "amountCaptured": 42,
                    "amountRefunded": 42
                  },
                  "transactions": [
                    {
                      "type": "SALE",
                      "processorStatus": "SETTLED",
                      "processorName": "STRIPE",
                      "processorMerchantId": "acct_stripe_1234",
                      "processorTransactionId": "54c4eb5b3ef8a"
                    },
                    {
                      "type": "REFUND",
                      "processorStatus": "SETTLED",
                      "processorName": "STRIPE",
                      "processorMerchantId": "acct_stripe_1234",
                      "processorTransactionId": "54c4eb5b3ef8a"
                    }
                  ],
                  "customer": {
                    "email": "customer123@gmail.com"
                  },
                  "metadata": {
                    "productId": 123,
                    "merchantId": "a13bsd62s"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Error Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestErrorResponse"
                },
                "example": {
                  "error": {
                    "errorId": "PaymentError",
                    "description": "The payment could not be found",
                    "diagnosticsId": "1234567898"
                  }
                }
              }
            }
          },
          "422": {
            "description": "Error Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnprocessableEntityErrorResponse"
                },
                "example": {
                  "error": {
                    "errorId": "RequestValidationError",
                    "description": "We were unable to validate your request, please check your payload against https://primer.io/docs/api",
                    "diagnosticsId": "1234567898",
                    "validationErrors": [
                      {
                        "model": "PaymentCaptureAPIRequest",
                        "errors": [
                          {
                            "path": "$.amount",
                            "description": "Value must be a valid integer"
                          }
                        ]
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    },
    "/payments/{id}/resume": {
      "post": {
        "tags": ["Payments API"],
        "summary": "Resume a payment",
        "description": "<p/>\n\nResume a payment's workflow execution from a paused state. This is usually required when a Workflow was paused in order to get further information from the customer, or when waiting for an asynchronous response from a third party connection.\n",
        "operationId": "resume_payment_payments__id__resume_post",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Payment ID",
              "type": "string"
            },
            "name": "id",
            "description": "ID of payment to resume.",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PaymentResumeAPIRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentAPIResponse"
                },
                "example": {
                  "id": "kHdEw9EG",
                  "date": "2021-02-21T15:36:16.367687",
                  "status": "AUTHORIZED",
                  "orderId": "order-abc",
                  "customerId": "customer-123",
                  "currencyCode": "EUR",
                  "amount": 42,
                  "paymentMethod": {
                    "paymentMethodToken": "heNwnqaeRiqvY1UcslfQc3wxNjEzOTIxNjc4",
                    "vaultedPaymentMethodToken": "_xlXlmBcTnuFxc2N3HAI73wxNjE1NTU5ODY5",
                    "descriptor": "Purchase: Socks",
                    "analyticsId": "VtkMDAxZW5isH0HsbbNxZ3lo",
                    "paymentMethodType": "PAYMENT_CARD",
                    "paymentMethodData": {
                      "first6Digits": "411111",
                      "last4Digits": "1111",
                      "expirationMonth": "12",
                      "expirationYear": "2030",
                      "cardholderName": "John Biggins",
                      "network": "Visa",
                      "isNetworkTokenized": false,
                      "binData": {
                        "network": "VISA",
                        "regionalRestriction": "UNKNOWN",
                        "accountNumberType": "UNKNOWN",
                        "accountFundingType": "UNKNOWN",
                        "prepaidReloadableIndicator": "NOT_APPLICABLE",
                        "productUsageType": "UNKNOWN",
                        "productCode": "VISA",
                        "productName": "VISA"
                      }
                    }
                  },
                  "processor": {
                    "name": "STRIPE",
                    "processor_merchant_id": "acct_stripe_1234",
                    "amountCaptured": 0,
                    "amountRefunded": 0
                  },
                  "transactions": [
                    {
                      "type": "SALE",
                      "processorStatus": "AUTHORIZED",
                      "processorName": "STRIPE",
                      "processorMerchantId": "acct_stripe_1234",
                      "processorTransactionId": "54c4eb5b3ef8a"
                    }
                  ],
                  "customer": {
                    "email": "customer123@gmail.com"
                  },
                  "metadata": {
                    "productId": 123,
                    "merchantId": "a13bsd62s"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Error Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestErrorResponse"
                },
                "example": {
                  "error": {
                    "errorId": "PaymentError",
                    "description": "The payment could not be found",
                    "diagnosticsId": "1234567898"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/payments/{id}": {
      "get": {
        "tags": ["Payments API"],
        "summary": "Get a payment",
        "description": "<p/>\n\nRetrieve a payment by its ID.\n",
        "operationId": "get_payment_by_id_payments__id__get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Payment ID",
              "type": "string"
            },
            "name": "id",
            "description": "ID of payment to retrieve.",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentAPIResponse"
                },
                "example": {
                  "id": "kHdEw9EG",
                  "date": "2021-02-21T15:36:16.367687",
                  "status": "AUTHORIZED",
                  "orderId": "order-abc",
                  "customerId": "customer-123",
                  "currencyCode": "EUR",
                  "amount": 42,
                  "paymentMethod": {
                    "paymentMethodToken": "heNwnqaeRiqvY1UcslfQc3wxNjEzOTIxNjc4",
                    "vaultedPaymentMethodToken": "_xlXlmBcTnuFxc2N3HAI73wxNjE1NTU5ODY5",
                    "descriptor": "Purchase: Socks",
                    "analyticsId": "VtkMDAxZW5isH0HsbbNxZ3lo",
                    "paymentMethodType": "PAYMENT_CARD",
                    "paymentMethodData": {
                      "first6Digits": "411111",
                      "last4Digits": "1111",
                      "expirationMonth": "12",
                      "expirationYear": "2030",
                      "cardholderName": "John Biggins",
                      "network": "Visa",
                      "isNetworkTokenized": false,
                      "binData": {
                        "network": "VISA",
                        "regionalRestriction": "UNKNOWN",
                        "accountNumberType": "UNKNOWN",
                        "accountFundingType": "UNKNOWN",
                        "prepaidReloadableIndicator": "NOT_APPLICABLE",
                        "productUsageType": "UNKNOWN",
                        "productCode": "VISA",
                        "productName": "VISA"
                      }
                    }
                  },
                  "processor": {
                    "name": "STRIPE",
                    "processor_merchant_id": "acct_stripe_1234",
                    "amountCaptured": 0,
                    "amountRefunded": 0
                  },
                  "transactions": [
                    {
                      "type": "SALE",
                      "processorStatus": "AUTHORIZED",
                      "processorName": "STRIPE",
                      "processorMerchantId": "acct_stripe_1234",
                      "processorTransactionId": "54c4eb5b3ef8a"
                    }
                  ],
                  "customer": {
                    "email": "customer123@gmail.com"
                  },
                  "metadata": {
                    "productId": 123,
                    "merchantId": "a13bsd62s"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Error Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestErrorResponse"
                },
                "example": {
                  "error": {
                    "errorId": "PaymentError",
                    "description": "The payment could not be found",
                    "diagnosticsId": "1234567898"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/payment-instruments/{token}/vault": {
      "post": {
        "tags": ["Payment Methods API"],
        "summary": "Save a payment method token",
        "description": "<p/>\n\nSave a `SINGLE_USE` payment method token so it can be used again later.\n\nIf you try to vault an already vaulted token, you will get the existing vaulted token back.\n",
        "operationId": "vault_payment_method_payment_methods__token__vault_post",
        "parameters": [
          {
            "description": "Payment method token to store.",
            "required": true,
            "schema": {
              "title": "Token",
              "type": "string",
              "description": "Payment method token"
            },
            "name": "token",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VaultPaymentMethodAPIRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MerchantPaymentMethodTokenAPIResponse"
                }
              }
            }
          },
          "422": {
            "description": "Error Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnprocessableEntityErrorResponse"
                },
                "example": {
                  "error": {
                    "errorId": "RequestValidationError",
                    "description": "We were unable to validate your request, please check your payload against https://primer.io/docs/api",
                    "diagnosticsId": "1234567898",
                    "validationErrors": [
                      {
                        "model": "VaultPaymentInstrumentAPIRequest",
                        "errors": [
                          {
                            "path": "$.customerId",
                            "description": "Ensure this value has at least 1 characters"
                          }
                        ]
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    },
    "/payment-instruments": {
      "get": {
        "tags": ["Payment Methods API"],
        "summary": "List saved payment methods",
        "description": "Retrieve a list of stored payment methods for a customer.",
        "operationId": "get_payment_methods_payment_methods_get",
        "parameters": [
          {
            "description": "Return payment methods for this customer ID.",
            "required": true,
            "schema": {
              "title": "Customer ID",
              "type": "string",
              "description": "Return payment methods for this customer ID."
            },
            "name": "customer_id",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MerchantPaymentMethodTokenListAPIResponse"
                }
              }
            }
          }
        }
      }
    },
    "/payment-instruments/{token}": {
      "delete": {
        "tags": ["Payment Methods API"],
        "summary": "Delete a saved payment method",
        "description": "Delete a saved payment method.",
        "operationId": "delete_payment_method_payment_methods__token__delete",
        "parameters": [
          {
            "description": "Saved payment method token to delete.",
            "required": true,
            "schema": {
              "title": "Token",
              "type": "string",
              "description": "Payment method token"
            },
            "name": "token",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MerchantPaymentMethodTokenAPIResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestErrorResponse"
                },
                "example": {
                  "error": {
                    "errorId": "InvalidPaymentInstrumentToken",
                    "description": "Invalid payment instrument.",
                    "diagnosticsId": "1234567898"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/payment-instruments/{token}/default": {
      "post": {
        "tags": ["Payment Methods API"],
        "summary": "Update the default saved payment method",
        "description": "Update a saved payment method to be the default stored payment method for a customer.",
        "operationId": "set_payment_method_default_payment_methods__token__default_post",
        "parameters": [
          {
            "description": "Saved payment method token to set to default.",
            "required": true,
            "schema": {
              "title": "Token",
              "type": "string",
              "description": "Payment method token"
            },
            "name": "token",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MerchantPaymentMethodTokenAPIResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestErrorResponse"
                },
                "example": {
                  "error": {
                    "errorId": "InvalidPaymentInstrumentToken",
                    "description": "Invalid payment instrument.",
                    "diagnosticsId": "1234567898"
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "ApiKeyAuth": {
        "type": "apiKey",
        "in": "header",
        "name": "X-API-KEY"
      }
    },
    "schemas": {
      "AccountFundingTypeEnum": {
        "title": "AccountFundingTypeEnum",
        "enum": ["CREDIT", "DEBIT", "PREPAID", "CHARGE", "DEFERRED_DEBIT", "UNKNOWN"],
        "type": "string",
        "description": "An enumeration."
      },
      "ApayaCustomerTokenAPISchema": {
        "title": "ApayaCustomerTokenAPISchema",
        "required": ["mx"],
        "type": "object",
        "properties": {
          "mx": {
            "title": "Mx",
            "type": "string"
          },
          "mnc": {
            "title": "Mnc",
            "type": "integer"
          },
          "mcc": {
            "title": "Mcc",
            "type": "integer"
          }
        }
      },
      "BinDataOptionalAPISchema": {
        "title": "BinDataAPISchema",
        "type": "object",
        "properties": {
          "network": {
            "$ref": "#/components/schemas/CardNetworkEnum"
          }
        }
      },
      "BinDataAPISchema": {
        "title": "BinDataAPISchema",
        "required": [
          "network",
          "regionalRestriction",
          "accountNumberType",
          "accountFundingType",
          "prepaidReloadableIndicator",
          "productUsageType",
          "productCode",
          "productName"
        ],
        "type": "object",
        "properties": {
          "network": {
            "$ref": "#/components/schemas/CardNetworkEnum"
          },
          "issuerCountryCode": {
            "$ref": "#/components/schemas/CountryCodeEnum"
          },
          "issuerName": {
            "title": "Issuername",
            "type": "string"
          },
          "issuerCurrencyCode": {
            "$ref": "#/components/schemas/Currency"
          },
          "regionalRestriction": {
            "$ref": "#/components/schemas/CardRegionRestrictionEnum"
          },
          "accountNumberType": {
            "$ref": "#/components/schemas/CardAccountNumberTypeEnum"
          },
          "accountFundingType": {
            "$ref": "#/components/schemas/AccountFundingTypeEnum"
          },
          "prepaidReloadableIndicator": {
            "$ref": "#/components/schemas/PrepaidReloadableEnum"
          },
          "productUsageType": {
            "$ref": "#/components/schemas/CardProductTypeEnum"
          },
          "productCode": {
            "title": "Productcode",
            "type": "string"
          },
          "productName": {
            "title": "Productname",
            "type": "string"
          }
        }
      },
      "BlockingPaymentActionTypeEnum": {
        "title": "BlockingPaymentActionTypeEnum",
        "enum": ["3DS_AUTHENTICATION", "USE_PRIMER_SDK"],
        "type": "string",
        "description": "An enumeration."
      },
      "CardAccountNumberTypeEnum": {
        "title": "CardAccountNumberTypeEnum",
        "enum": ["PRIMARY_ACCOUNT_NUMBER", "NETWORK_TOKEN", "UNKNOWN"],
        "type": "string",
        "description": "An enumeration."
      },
      "CardNetworkEnum": {
        "title": "CardNetworkEnum",
        "enum": [
          "AMEX",
          "DANKORT",
          "DINERS_CLUB",
          "DISCOVER",
          "ENROUTE",
          "ELO",
          "HIPER",
          "INTERAC",
          "JCB",
          "MAESTRO",
          "MASTERCARD",
          "MIR",
          "PRIVATE_LABEL",
          "UNIONPAY",
          "VISA",
          "OTHER"
        ],
        "type": "string",
        "description": "The list of available card networks.\n"
      },
      "CardProductTypeEnum": {
        "title": "CardProductTypeEnum",
        "enum": ["CONSUMER", "BUSINESS", "GOVERNMENT", "UNKNOWN"],
        "type": "string",
        "description": "An enumeration."
      },
      "CardRegionRestrictionEnum": {
        "title": "CardRegionRestrictionEnum",
        "enum": ["DOMESTIC_USE_ONLY", "NONE", "UNKNOWN"],
        "type": "string",
        "description": "An enumeration."
      },
      "ClientSessionUpdateAPIRequest": {
        "title": "ClientSessionUpdateAPIRequest",
        "type": "object",
        "properties": {
          "customerId": {
            "title": "The ID of the customer using the checkout.",
            "type": "string",
            "description": "A unique identifier for your customer."
          },
          "orderId": {
            "title": "Order ID",
            "type": "string",
            "description": "Your reference for the order."
          },
          "currencyCode": {
            "title": "Currency",
            "type": "string",
            "description": "The three-letter currency code in [ISO 4217 format](https://en.wikipedia.org/wiki/ISO_4217#Active_codes). e.g. use `USD` for US dollars."
          },
          "amount": {
            "title": "Payment amount",
            "minimum": 0,
            "type": "integer",
            "description": "The amount you would like to charge the customer, in minor units. e.g. for $7, use `700`."
          },
          "metadata": {
            "title": "Payment Metadata",
            "type": "object",
            "description": "Additional data to be used throughout the payment lifecycle.\n\nProvide the entire object to update it. Anything provided previously will be overwritten.\n"
          },
          "customer": {
            "title": "Customer Details",
            "allOf": [
              {
                "$ref": "#/components/schemas/CheckoutCustomerDetailsAPISchema"
              }
            ],
            "description": "More information associated with the customer.\n\nEach of the fields in this object must be updated in its entirety, i.e. provide the entire object to update it. Anything provided previously will be overwritten.\n"
          },
          "order": {
            "title": "Order Details",
            "allOf": [
              {
                "$ref": "#/components/schemas/OrderDetailsAPISchema"
              }
            ],
            "description": "More information associated with the order.\n\nEach of the fields in this object must be updated in its entirety, i.e. provide the entire object to update it. Anything provided previously will be overwritten.\n"
          },
          "paymentMethod": {
            "title": "Payment Method Options",
            "allOf": [
              {
                "$ref": "#/components/schemas/CheckoutPaymentMethodOptionsAPISchema"
              }
            ],
            "description": "Enable certain options associated with the payment method. Provide the entire object to update it. Anything provided previously will be overwritten."
          }
        },
        "additionalProperties": false,
        "example": {
          "customerId": "customer-123",
          "orderId": "order-abc",
          "customer": {
            "emailAddress": "john@primer.io"
          },
          "order": {
            "countryCode": "FR",
            "lineItems": [
              {
                "itemId": "shoe-123",
                "description": "Blue Shoe",
                "amount": 100,
                "quantity": 10
              }
            ]
          }
        }
      },
      "ClientSessionAPIRequest": {
        "title": "ClientSessionAPIRequest",
        "type": "object",
        "properties": {
          "orderId": {
            "title": "Order ID",
            "type": "string",
            "description": "Your reference for the payment."
          },
          "currencyCode": {
            "title": "Currency",
            "type": "string",
            "description": "The three-letter currency code in [ISO 4217 format](https://en.wikipedia.org/wiki/ISO_4217#Active_codes). e.g. use `USD` for US dollars."
          },
          "amount": {
            "title": "Payment amount",
            "minimum": 0,
            "type": "integer",
            "description": "The amount you would like to charge the customer, in minor units. e.g. for $7, use `700`.\n\nSome currencies, such as Japanese Yen, do not have minor units. In this case you should use the value as it is, without any formatting. For example for ¥100, use `100`.\n\nIf the amount is provided on this level, it would override any amount calculated from the provided line items, shipping and other amounts."
          },
          "order": {
            "title": "Order Details",
            "allOf": [
              {
                "$ref": "#/components/schemas/OrderDetailsAPISchema"
              }
            ],
            "description": "More information associated with the order."
          },
          "customerId": {
            "title": "The ID of the customer using the checkout",
            "type": "string",
            "description": "A unique identifier for your customer.\nCreate a client session token with a customer ID to enable the client-side SDK to retrieve and manage your customer's saved payment methods."
          },
          "customer": {
            "title": "Customer Details",
            "allOf": [
              {
                "$ref": "#/components/schemas/CheckoutCustomerDetailsAPISchema"
              }
            ],
            "description": "More information associated with the customer."
          },
          "metadata": {
            "title": "Payment Metadata",
            "type": "object",
            "description": "Additional data to be used throughout the payment lifecycle.\n\nA dictionary of key-value pairs where the values can only be strings or\nintegers.\n\ne.g. `{\"productId\": 1001, \"merchantId\": \"a13bsd62s\"}`\n"
          },
          "paymentMethod": {
            "title": "Payment Method Options",
            "allOf": [
              {
                "$ref": "#/components/schemas/CheckoutPaymentMethodOptionsAPISchema"
              }
            ],
            "description": "Enable certain options associated with the payment method."
          }
        },
        "additionalProperties": false,
        "example": {
          "orderId": "order-abc",
          "currencyCode": "GBP",
          "amount": 1000,
          "order": {
            "countryCode": "FR",
            "lineItems": [
              {
                "itemId": "shoe-123",
                "description": "Blue Shoe",
                "amount": 100,
                "quantity": 10
              }
            ]
          },
          "customerId": "customer-123",
          "customer": {
            "emailAddress": "john@primer.io"
          },
          "metadata": {
            "productType": "Shoe"
          },
          "paymentMethod": {
            "vaultOnSuccess": true,
            "options": {
              "PAYMENT_CARD": {
                "networks": {
                  "VISA": {
                    "surcharge": {
                      "amount": 10
                    }
                  }
                }
              },
              "GOOGLE_PAY": {
                "surcharge": {
                  "amount": 20
                }
              }
            }
          }
        }
      },
      "OrderDetailsAPISchema": {
        "title": "OrderDetailsAPISchema",
        "type": "object",
        "properties": {
          "countryCode": {
            "title": "Country Code",
            "allOf": [
              {
                "$ref": "#/components/schemas/CountryCodeEnum"
              }
            ],
            "description": "The country in which the order is created"
          },
          "fees": {
            "title": "Fee Details",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrderFeesAPISchema"
            },
            "description": "The details of fees charged."
          },
          "lineItems": {
            "title": "Line Items",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrderLineItemsAPISchema"
            },
            "description": "The details of the line items of the order."
          },
          "shipping": {
            "title": "Shipping Details",
            "allOf": [
              {
                "$ref": "#/components/schemas/OrderShippingAPISchema"
              }
            ],
            "description": "The details of shipping charged."
          }
        }
      },
      "OrderFeesAPISchema": {
        "title": "OrderFeesAPISchema",
        "type": "object",
        "required": ["amount", "type"],
        "properties": {
          "amount": {
            "minimum": 0,
            "type": "integer",
            "description": "The fee amount charged to the customer, in minor  units. e.g. for $7, use `700`."
          },
          "type": {
            "type": "string",
            "description": "The type of fee."
          },
          "description": {
            "type": "string",
            "description": "A description of the fee, e.g. \"Currency Conversion Fee\"."
          }
        }
      },
      "OrderLineItemsAPISchema": {
        "title": "OrderLineItemsAPISchema",
        "type": "object",
        "required": ["itemId", "description", "amount", "quantity"],
        "properties": {
          "itemId": {
            "title": "Item ID",
            "type": "string",
            "description": "A unique identifier for the line item."
          },
          "description": {
            "title": "Item ID",
            "type": "string",
            "description": "A description of the item."
          },
          "amount": {
            "minimum": 0,
            "type": "integer",
            "description": "The amount charged to the customer, in minor units. The minimum amount is 0."
          },
          "discountAmount": {
            "title": "Discount Amount",
            "minimum": 0,
            "type": "integer",
            "description": "Any discount applicable to this item, in minor units."
          },
          "quantity": {
            "type": "integer",
            "description": "The number of the particular line item that is being ordered."
          },
          "taxAmount": {
            "title": "Tax Amount",
            "type": "integer",
            "description": "The tax charged on this item (if known), in minor units."
          },
          "taxCode": {
            "title": "Tax Code",
            "type": "string",
            "description": "The tax code associated with this item, in minor units. This is required for Primer-initiated tax calculations."
          },
          "productType": {
            "title": "Product Type",
            "allOf": [
              {
                "$ref": "#/components/schemas/ProductTypeEnum"
              }
            ],
            "description": "An identifier for the product type."
          }
        }
      },
      "OrderShippingAPISchema": {
        "title": "OrderShippingAPISchema",
        "type": "object",
        "properties": {
          "amount": {
            "minimum": 0,
            "type": "integer",
            "description": "The shipping amount charged to the customer, in minor  units. e.g. for $7, use `700`."
          }
        }
      },
      "CheckoutPaymentMethodOptionsAPISchema": {
        "title": "PaymentMethodOptionsAPISchema",
        "type": "object",
        "properties": {
          "vaultOnSuccess": {
            "type": "boolean",
            "description": "Whether the payment method should be vaulted on a successful payment or not."
          },
          "options": {
            "title": "Payment Method Options",
            "type": "object",
            "description": "Additional options for the payment methods represented as dictionary \nwith key of [available payment methods](https://primer.io/docs/payment-methods/available-payment-methods) and value of corresponding options.\n",
            "properties": {
              "<PAYMENT_METHOD_TYPE>": {
                "type": "object",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/CheckoutPaymentMethodOptionAPISchema"
                  }
                ]
              },
              "PAYMENT_CARD": {
                "type": "object",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/CheckoutPaymentMethodCardOptionAPISchema"
                  }
                ]
              }
            }
          }
        }
      },
      "CheckoutPaymentMethodOptionAPISchema": {
        "title": "PaymentMethodOptionAPISchema",
        "type": "object",
        "description": "Options for the payment method of type `PAYMENT_METHOD_TYPE`. \n",
        "required": ["surcharge"],
        "properties": {
          "surcharge": {
            "title": "Surcharge",
            "description": "Surcharge information",
            "allOf": [
              {
                "$ref": "#/components/schemas/CheckoutPaymentMethodOptionSurchargeAPISchema"
              }
            ]
          }
        }
      },
      "CheckoutPaymentMethodCardOptionAPISchema": {
        "title": "Payment Method Card Option",
        "type": "object",
        "properties": {
          "networks": {
            "title": "Card networks",
            "allOf": [
              {
                "$ref": "#/components/schemas/CheckoutPaymentMethodOptionCardNetworkAPISchema"
              }
            ],
            "description": "Dictionary of available card networks as a key with value of Payment Method Card Network Option."
          }
        }
      },
      "CheckoutPaymentMethodOptionCardNetworkAPISchema": {
        "title": "Payment Method Card Network Option",
        "type": "object",
        "properties": {
          "AMEX": {
            "$ref": "#/components/schemas/CheckoutPaymentMethodOptionCardNetworkSurchargeAPISchema"
          },
          "DANKORT": {
            "$ref": "#/components/schemas/CheckoutPaymentMethodOptionCardNetworkSurchargeAPISchema"
          },
          "DINERS_CLUB": {
            "$ref": "#/components/schemas/CheckoutPaymentMethodOptionCardNetworkSurchargeAPISchema"
          },
          "DISCOVER": {
            "$ref": "#/components/schemas/CheckoutPaymentMethodOptionCardNetworkSurchargeAPISchema"
          },
          "ENROUTE": {
            "$ref": "#/components/schemas/CheckoutPaymentMethodOptionCardNetworkSurchargeAPISchema"
          },
          "ELO": {
            "$ref": "#/components/schemas/CheckoutPaymentMethodOptionCardNetworkSurchargeAPISchema"
          },
          "HIPER": {
            "$ref": "#/components/schemas/CheckoutPaymentMethodOptionCardNetworkSurchargeAPISchema"
          },
          "INTERAC": {
            "$ref": "#/components/schemas/CheckoutPaymentMethodOptionCardNetworkSurchargeAPISchema"
          },
          "JCB": {
            "$ref": "#/components/schemas/CheckoutPaymentMethodOptionCardNetworkSurchargeAPISchema"
          },
          "MAESTRO": {
            "$ref": "#/components/schemas/CheckoutPaymentMethodOptionCardNetworkSurchargeAPISchema"
          },
          "MASTERCARD": {
            "$ref": "#/components/schemas/CheckoutPaymentMethodOptionCardNetworkSurchargeAPISchema"
          },
          "MIR": {
            "$ref": "#/components/schemas/CheckoutPaymentMethodOptionCardNetworkSurchargeAPISchema"
          },
          "PRIVATE_LABEL": {
            "$ref": "#/components/schemas/CheckoutPaymentMethodOptionCardNetworkSurchargeAPISchema"
          },
          "UNIONPAY": {
            "$ref": "#/components/schemas/CheckoutPaymentMethodOptionCardNetworkSurchargeAPISchema"
          },
          "VISA": {
            "$ref": "#/components/schemas/CheckoutPaymentMethodOptionCardNetworkSurchargeAPISchema"
          },
          "OTHER": {
            "$ref": "#/components/schemas/CheckoutPaymentMethodOptionCardNetworkSurchargeAPISchema"
          }
        },
        "additionalProperties": false
      },
      "CheckoutPaymentMethodOptionCardNetworkSurchargeAPISchema": {
        "type": "object",
        "properties": {
          "surcharge": {
            "$ref": "#/components/schemas/CheckoutPaymentMethodOptionSurchargeAPISchema",
            "title": "Surcharge",
            "description": "Surcharge information"
          }
        }
      },
      "CheckoutPaymentMethodOptionSurchargeAPISchema": {
        "title": "CheckoutPaymentMethodOptionSurchargeAPISchema",
        "type": "object",
        "properties": {
          "amount": {
            "type": "integer",
            "description": "The surcharge amount, in minor units. Surcharge amount must be used in conjunction with line item amounts, if a top level amount is passed then surcharge will not be calculated."
          }
        }
      },
      "PaymentRequestPaymentMethodOptionsAPISchema": {
        "title": "PaymentRequestPaymentMethodOptionsAPISchema",
        "type": "object",
        "properties": {
          "vaultOnSuccess": {
            "type": "boolean",
            "description": "Whether the payment method should be vaulted on a successful payment or not."
          },
          "descriptor": {
            "title": "Payment descriptor",
            "type": "string",
            "description": "A description of the payment, as it would typically appear on a bank statement."
          },
          "paymentType": {
            "title": "Recurring Payment Type",
            "allOf": [
              {
                "$ref": "#/components/schemas/RecurringTransactionTypeEnum"
              }
            ],
            "description": "Payment types, primarily to be used for recurring payments.\nNote: If you successfully vault a `SINGLE_USE` token on payment creation, then there's no need to set a value for this field and it will be flagged as `FIRST_PAYMENT`. Otherwise, see the table below for all possible values.\n\n| paymentType | Use case |\n| --- | --- |\n| `FIRST_PAYMENT` | a customer-initiated payment which is the first in a series of recurring payments or subscription, or a card on file scenario.\n| `ECOMMERCE` | a customer-initiated payment using stored payment details where the cardholder is present.\n| `SUBSCRIPTION` | a merchant-initiated payment as part of a series of payments on a fixed schedule and a set amount.\n| `UNSCHEDULED` | a merchant-initiated payment using stored payment details with no fixed schedule or amount."
          }
        }
      },
      "PaymentResponsePaymentMethodOptionsAPISchema": {
        "title": "PaymentResponsePaymentMethodOptionsAPISchema",
        "type": "object",
        "properties": {
          "descriptor": {
            "title": "Payment descriptor",
            "type": "string",
            "description": "The description of the payment, as it would typically appear on a bank statement."
          },
          "paymentMethodToken": {
            "title": "Payment Method Token",
            "type": "string",
            "description": "The payment method token used to authorize the transaction."
          },
          "vaultedPaymentMethodToken": {
            "title": "Vaulted Payment Method Token",
            "type": "string",
            "description": "If the payment method token was vaulted, this is the new token. Use this token for recurring payments."
          },
          "analyticsId": {
            "title": "Unique analytics ID",
            "type": "string",
            "description": "Unique analytics identifier corresponding to a payment method"
          },
          "paymentMethodType": {
            "title": "Payment method type",
            "allOf": [
              {
                "$ref": "#/components/schemas/PaymentMethodTypeEnum"
              }
            ],
            "description": "Payment method type"
          },
          "paymentMethodData": {
            "title": "Payment method data",
            "anyOf": [
              {
                "$ref": "#/components/schemas/PaymentCardTokenAPISchema"
              },
              {
                "$ref": "#/components/schemas/PayPalOrderTokenAPISchema"
              },
              {
                "$ref": "#/components/schemas/PayPalBillingAgreementAPISchema"
              },
              {
                "$ref": "#/components/schemas/GoCardlessMandateAPISchema"
              },
              {
                "$ref": "#/components/schemas/KlarnaPaymentSessionAPISchema"
              },
              {
                "$ref": "#/components/schemas/KlarnaCustomerTokenAPISchema"
              },
              {
                "$ref": "#/components/schemas/IdealPayNLTokenAPISchema"
              },
              {
                "$ref": "#/components/schemas/ApayaCustomerTokenAPISchema"
              }
            ],
            "description": "Payment method data"
          },
          "threeDSecureAuthentication": {
            "title": "Threedsecureauthentication",
            "allOf": [
              {
                "$ref": "#/components/schemas/ThreeDSecureAuthenticationAPISchema"
              }
            ],
            "default": {
              "response_code": "NOT_PERFORMED"
            }
          }
        }
      },
      "CheckoutCustomerDetailsAPISchema": {
        "title": "CustomerDetailsAPISchema",
        "type": "object",
        "properties": {
          "emailAddress": {
            "title": "Email Address",
            "type": "string",
            "description": "Customer email address.\n",
            "format": "email"
          },
          "mobileNumber": {
            "title": "Mobile Number",
            "type": "string",
            "description": "The customer's mobile number"
          },
          "firstName": {
            "title": "First Name",
            "type": "string",
            "description": "The customer's first name"
          },
          "lastName": {
            "title": "Last Name",
            "type": "string",
            "description": "The customer's last name"
          },
          "billingAddress": {
            "title": "Billing Address",
            "allOf": [
              {
                "$ref": "#/components/schemas/core_api__api__commons__schemas__addess__AddressAPISchema"
              }
            ],
            "description": "Customer billing address.\n"
          },
          "shippingAddress": {
            "title": "Shipping Address",
            "allOf": [
              {
                "$ref": "#/components/schemas/core_api__api__commons__schemas__addess__AddressAPISchema"
              }
            ],
            "description": "Customer shipping address"
          },
          "taxId": {
            "title": "Tax ID",
            "type": "string",
            "description": "The customer's tax id number for tax exemptions"
          },
          "nationalDocumentId": {
            "title": "National Document ID",
            "type": "string",
            "description": "The customer's national identification number"
          }
        }
      },
      "CustomerDetailsAPISchema": {
        "title": "CustomerDetailsAPISchema",
        "type": "object",
        "properties": {
          "emailAddress": {
            "title": "Email Address",
            "type": "string",
            "description": "Customer email address.\n\nNote: It is recommended to include this field if a 3DS check will be performed\n",
            "format": "email"
          },
          "mobileNumber": {
            "title": "Mobile Number",
            "type": "string",
            "description": "The customer's mobile number"
          },
          "firstName": {
            "title": "First Name",
            "type": "string",
            "description": "The customer's first name"
          },
          "lastName": {
            "title": "Last Name",
            "type": "string",
            "description": "The customer's last name"
          },
          "billingAddress": {
            "title": "Billing Address",
            "allOf": [
              {
                "$ref": "#/components/schemas/core_api__api__commons__schemas__addess__AddressAPISchema"
              }
            ],
            "description": "Customer billing address.\n\nNote: It is recommended to include this field if a 3DS check will be performed\n"
          },
          "shippingAddress": {
            "title": "Shipping Address",
            "allOf": [
              {
                "$ref": "#/components/schemas/core_api__api__commons__schemas__addess__AddressAPISchema"
              }
            ],
            "description": "Customer shipping address"
          },
          "taxId": {
            "title": "Tax ID",
            "type": "string",
            "description": "The customer's tax id number for tax exemptions"
          },
          "nationalDocumentId": {
            "title": "National Document ID",
            "type": "string",
            "description": "The customer's national identification number"
          }
        }
      },
      "ClientSessionAPIResponse": {
        "title": "ClientSessionAPIResponse",
        "type": "object",
        "properties": {
          "clientToken": {
            "title": "Client token",
            "type": "string",
            "description": "Client token used to initialize the SDK on all platforms."
          },
          "clientTokenExpirationDate": {
            "title": "Expiration Date",
            "type": "string",
            "description": "Expiration date & time of the client token (UTC with no timezoneinfo).",
            "format": "date-time"
          },
          "orderId": {
            "title": "Order ID",
            "type": "string",
            "description": "Your reference for the payment."
          },
          "currencyCode": {
            "title": "Currency",
            "type": "string",
            "description": "The three-letter currency code in [ISO 4217 format](https://en.wikipedia.org/wiki/ISO_4217#Active_codes). e.g. use `USD` for US dollars."
          },
          "amount": {
            "title": "Payment amount",
            "minimum": 0,
            "type": "integer",
            "description": "The amount you are going to charge the customer, in minor units. This amount is calculated from the line items, shipping and other amounts provided in the `order`. \nIf a top-level amount is provided, it would override any calculated amount."
          },
          "order": {
            "title": "Order Details",
            "allOf": [
              {
                "$ref": "#/components/schemas/OrderDetailsAPISchema"
              }
            ],
            "description": "More information associated with the order."
          },
          "customerId": {
            "title": "The ID of the customer using the checkout",
            "type": "string",
            "description": "A unique identifier for your customer."
          },
          "customer": {
            "title": "Customer Details",
            "allOf": [
              {
                "$ref": "#/components/schemas/CustomerDetailsAPISchema"
              }
            ],
            "description": "More information associated with the customer."
          },
          "metadata": {
            "title": "Payment Metadata",
            "type": "object",
            "description": "Additional data to be used throughout the payment lifecycle.\n"
          },
          "paymentMethod": {
            "title": "Payment Method Options",
            "allOf": [
              {
                "$ref": "#/components/schemas/CheckoutPaymentMethodOptionsAPISchema"
              }
            ],
            "description": "Enable certain options associated with the payment methods."
          },
          "warnings": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ClientSessionWarningsAPIResponse"
              }
            ],
            "description": "Warning messages to indicate missing information that are required for payment methods, checkout modules and other features; or when third-party services are unavailable."
          }
        },
        "example": {
          "clientToken": "client-session-token",
          "clientExpirationDate": "2019-08-24T14:15:22Z",
          "orderId": "order-abc",
          "currencyCode": "GBP",
          "amount": 1000,
          "order": {
            "countryCode": "FR",
            "lineItems": [
              {
                "itemId": "shoe-123",
                "description": "Blue Shoe",
                "amount": 100,
                "quantity": 10
              }
            ],
            "fees": [
              {
                "type": "SURCHARGE",
                "amount": 20
              }
            ]
          },
          "customerId": "customer-123",
          "customer": {
            "emailAddress": "john@primer.io"
          },
          "metadata": {
            "productType": "Shoe"
          },
          "paymentMethod": {
            "vaultOnSuccess": true,
            "options": {
              "PAYMENT_CARD": {
                "networks": {
                  "VISA": {
                    "surcharge": {
                      "amount": 10
                    }
                  }
                }
              },
              "GOOGLE_PAY": {
                "surcharge": {
                  "amount": 20
                }
              }
            }
          },
          "warnings": [
            {
              "type": "TAXJAR",
              "code": "MISSING_DATA",
              "message": "Shipping details are required for calculating tax."
            }
          ]
        }
      },
      "ClientSessionWarningsAPIResponse": {
        "title": "ClientSessionWarningsAPIResponse",
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "The type of the connection involved",
            "example": "TAXJAR"
          },
          "code": {
            "type": "string",
            "description": "A unique code describing the particular issue",
            "example": "MISSING_DATA"
          },
          "message": {
            "type": "string",
            "description": "More information as to the reason for the warning"
          }
        }
      },
      "CountryCodeEnum": {
        "title": "CountryCodeEnum",
        "enum": [
          "AW",
          "AF",
          "AO",
          "AI",
          "AX",
          "AL",
          "AD",
          "AE",
          "AR",
          "AM",
          "AS",
          "AQ",
          "TF",
          "AG",
          "AU",
          "AT",
          "AZ",
          "BI",
          "BE",
          "BJ",
          "BQ",
          "BF",
          "BD",
          "BG",
          "BH",
          "BS",
          "BA",
          "BL",
          "BY",
          "BZ",
          "BM",
          "BO",
          "BR",
          "BB",
          "BN",
          "BT",
          "BV",
          "BW",
          "CF",
          "CA",
          "CC",
          "CH",
          "CL",
          "CN",
          "CI",
          "CM",
          "CD",
          "CG",
          "CK",
          "CO",
          "KM",
          "CV",
          "CR",
          "CU",
          "CW",
          "CX",
          "KY",
          "CY",
          "CZ",
          "DE",
          "DJ",
          "DM",
          "DK",
          "DO",
          "DZ",
          "EC",
          "EG",
          "ER",
          "EH",
          "ES",
          "EE",
          "ET",
          "FI",
          "FJ",
          "FK",
          "FR",
          "FO",
          "FM",
          "GA",
          "GB",
          "GE",
          "GG",
          "GH",
          "GI",
          "GN",
          "GP",
          "GM",
          "GW",
          "GQ",
          "GR",
          "GD",
          "GL",
          "GT",
          "GF",
          "GU",
          "GY",
          "HK",
          "HM",
          "HN",
          "HR",
          "HT",
          "HU",
          "ID",
          "IM",
          "IN",
          "IO",
          "IE",
          "IR",
          "IQ",
          "IS",
          "IL",
          "IT",
          "JM",
          "JE",
          "JO",
          "JP",
          "KZ",
          "KE",
          "KG",
          "KH",
          "KI",
          "KN",
          "KR",
          "KW",
          "LA",
          "LB",
          "LR",
          "LY",
          "LC",
          "LI",
          "LK",
          "LS",
          "LT",
          "LU",
          "LV",
          "MO",
          "MF",
          "MA",
          "MC",
          "MD",
          "MG",
          "MV",
          "MX",
          "MH",
          "MK",
          "ML",
          "MT",
          "MM",
          "ME",
          "MN",
          "MP",
          "MZ",
          "MR",
          "MS",
          "MQ",
          "MU",
          "MW",
          "MY",
          "YT",
          "NA",
          "NC",
          "NE",
          "NF",
          "NG",
          "NI",
          "NU",
          "NL",
          "NO",
          "NP",
          "NR",
          "NZ",
          "OM",
          "PK",
          "PA",
          "PN",
          "PE",
          "PH",
          "PW",
          "PG",
          "PL",
          "PR",
          "KP",
          "PT",
          "PY",
          "PS",
          "PF",
          "QA",
          "RE",
          "RO",
          "RU",
          "RW",
          "SA",
          "SD",
          "SN",
          "SG",
          "GS",
          "SH",
          "SJ",
          "SB",
          "SL",
          "SV",
          "SM",
          "SO",
          "PM",
          "RS",
          "SS",
          "ST",
          "SR",
          "SK",
          "SI",
          "SE",
          "SZ",
          "SX",
          "SC",
          "SY",
          "TC",
          "TD",
          "TG",
          "TH",
          "TJ",
          "TK",
          "TM",
          "TL",
          "TO",
          "TT",
          "TN",
          "TR",
          "TV",
          "TW",
          "TZ",
          "UG",
          "UA",
          "UM",
          "UY",
          "US",
          "UZ",
          "VA",
          "VC",
          "VE",
          "VG",
          "VI",
          "VN",
          "VU",
          "WF",
          "WS",
          "YE",
          "ZA",
          "ZM",
          "ZW"
        ],
        "description": "An enumeration."
      },
      "Currency": {
        "title": "Currency",
        "enum": [
          "AED",
          "AFN",
          "ALL",
          "AMD",
          "ANG",
          "AOA",
          "ARS",
          "AUD",
          "AWG",
          "AZN",
          "BAM",
          "BBD",
          "BDT",
          "BGN",
          "BHD",
          "BIF",
          "BMD",
          "BND",
          "BOB",
          "BOV",
          "BRL",
          "BSD",
          "BTN",
          "BWP",
          "BYR",
          "BYN",
          "BZD",
          "CAD",
          "CDF",
          "CHE",
          "CHF",
          "CHW",
          "CLF",
          "CLP",
          "CNY",
          "COP",
          "COU",
          "CRC",
          "CUC",
          "CUP",
          "CVE",
          "CZK",
          "DJF",
          "DKK",
          "DOP",
          "DZD",
          "EGP",
          "ERN",
          "ETB",
          "EUR",
          "FJD",
          "FKP",
          "GBP",
          "GEL",
          "GHS",
          "GIP",
          "GMD",
          "GNF",
          "GTQ",
          "GYD",
          "HKD",
          "HNL",
          "HRK",
          "HTG",
          "HUF",
          "IDR",
          "ILS",
          "INR",
          "IQD",
          "IRR",
          "ISK",
          "JMD",
          "JOD",
          "JPY",
          "KES",
          "KGS",
          "KHR",
          "KMF",
          "KPW",
          "KRW",
          "KWD",
          "KYD",
          "KZT",
          "LAK",
          "LBP",
          "LKR",
          "LRD",
          "LSL",
          "LTL",
          "LVL",
          "LYD",
          "MAD",
          "MDL",
          "MGA",
          "MKD",
          "MMK",
          "MNT",
          "MOP",
          "MRO",
          "MUR",
          "MVR",
          "MWK",
          "MXN",
          "MXV",
          "MYR",
          "MZN",
          "NAD",
          "NGN",
          "NIO",
          "NOK",
          "NPR",
          "NZD",
          "OMR",
          "PAB",
          "PEN",
          "PGK",
          "PHP",
          "PKR",
          "PLN",
          "PYG",
          "QAR",
          "RON",
          "RSD",
          "RUB",
          "RWF",
          "SAR",
          "SBD",
          "SCR",
          "SDG",
          "SEK",
          "SGD",
          "SHP",
          "SLL",
          "SOS",
          "SRD",
          "SSP",
          "STD",
          "SVC",
          "SYP",
          "SZL",
          "THB",
          "TJS",
          "TMT",
          "TND",
          "TOP",
          "TRY",
          "TTD",
          "TWD",
          "TZS",
          "UAH",
          "UGX",
          "USD",
          "USN",
          "USS",
          "UYI",
          "UYU",
          "UZS",
          "VEF",
          "VND",
          "VUV",
          "WST",
          "XAF",
          "XAG",
          "XAU",
          "XBA",
          "XBB",
          "XBC",
          "XBD",
          "XCD",
          "XDR",
          "XFU",
          "XOF",
          "XPD",
          "XPF",
          "XPT",
          "XSU",
          "XTS",
          "XUA",
          "YER",
          "ZAR",
          "ZMW",
          "ZWL"
        ],
        "description": "Enumerates all supported currencies"
      },
      "PaymentResponseProcessorAPISchema": {
        "title": "PaymentResponseProcessorAPISchema",
        "type": "object",
        "properties": {
          "name": {
            "title": "Processor Name",
            "type": "string",
            "description": "The payment processor used for this payment."
          },
          "processorMerchantId": {
            "title": "Processor Merchant ID",
            "type": "string",
            "description": "The merchant ID registered at the payment processor used for this payment."
          },
          "amountCaptured": {
            "title": "Amount captured",
            "type": "integer",
            "description": "If no capture was performed, this value will be set to `0`.\n\nIf one or more partial captures were performed, this value will be a sum\nof all partial capture amounts.\n"
          },
          "amountRefunded": {
            "title": "Amount refunded",
            "type": "integer",
            "description": "If no refund was performed, this value will be set to `0`.\n\nIf one or more partial refunds were performed, this value will be a sum\nof all partial refund amounts.\n"
          }
        }
      },
      "GoCardlessMandateAPISchema": {
        "title": "GoCardlessMandateAPISchema",
        "required": ["gocardlessMandateId"],
        "type": "object",
        "properties": {
          "gocardlessMandateId": {
            "title": "Mandate agreement ID",
            "type": "string",
            "description": "Unique identifier of a GoCardless mandate agreement"
          }
        }
      },
      "IdealPayNLTokenAPISchema": {
        "title": "IdealPayNLTokenAPISchema",
        "required": ["paymentMethodConfigId"],
        "type": "object",
        "properties": {
          "paymentMethodConfigId": {
            "title": "Paymentmethodconfigid",
            "type": "string",
            "format": "uuid"
          }
        }
      },
      "KlarnaAddressAPISchema": {
        "title": "KlarnaAddressAPISchema",
        "type": "object",
        "properties": {
          "title": {
            "title": "Title",
            "type": "string"
          },
          "firstName": {
            "title": "Firstname",
            "type": "string"
          },
          "lastName": {
            "title": "Lastname",
            "type": "string"
          },
          "email": {
            "title": "Email",
            "type": "string"
          },
          "phoneNumber": {
            "title": "Phonenumber",
            "type": "string"
          },
          "addressLine1": {
            "title": "Addressline1",
            "type": "string"
          },
          "addressLine2": {
            "title": "Addressline2",
            "type": "string"
          },
          "addressLine3": {
            "title": "Addressline3",
            "type": "string"
          },
          "city": {
            "title": "City",
            "type": "string"
          },
          "state": {
            "title": "State",
            "type": "string"
          },
          "countryCode": {
            "$ref": "#/components/schemas/CountryCodeEnum"
          },
          "postalCode": {
            "title": "Postalcode",
            "type": "string"
          }
        }
      },
      "KlarnaCustomerTokenAPISchema": {
        "title": "KlarnaCustomerTokenAPISchema",
        "required": ["klarnaCustomerToken", "sessionData"],
        "type": "object",
        "properties": {
          "klarnaCustomerToken": {
            "title": "Klarnacustomertoken",
            "type": "string"
          },
          "sessionData": {
            "$ref": "#/components/schemas/KlarnaSessionDetailsAPISchema"
          }
        }
      },
      "KlarnaPaymentSessionAPISchema": {
        "title": "KlarnaPaymentSessionAPISchema",
        "required": ["klarnaAuthorizationToken", "sessionData"],
        "type": "object",
        "properties": {
          "klarnaAuthorizationToken": {
            "title": "Klarnaauthorizationtoken",
            "type": "string"
          },
          "sessionData": {
            "$ref": "#/components/schemas/KlarnaSessionDetailsAPISchema"
          }
        }
      },
      "KlarnaSessionDetailsAPISchema": {
        "title": "KlarnaSessionDetailsAPISchema",
        "required": ["billingAddress", "purchaseCountry", "purchaseCurrency", "locale", "orderLines"],
        "type": "object",
        "properties": {
          "recurringDescription": {
            "title": "Recurringdescription",
            "type": "string"
          },
          "billingAddress": {
            "$ref": "#/components/schemas/KlarnaAddressAPISchema"
          },
          "shippingAddress": {
            "$ref": "#/components/schemas/KlarnaAddressAPISchema"
          },
          "purchaseCountry": {
            "title": "Purchasecountry",
            "type": "string"
          },
          "purchaseCurrency": {
            "title": "Purchasecurrency",
            "type": "string"
          },
          "locale": {
            "title": "Locale",
            "type": "string"
          },
          "orderLines": {
            "title": "Orderlines",
            "type": "array",
            "items": {}
          },
          "tokenDetails": {
            "$ref": "#/components/schemas/KlarnaTokenDetails"
          }
        }
      },
      "KlarnaTokenDetails": {
        "title": "KlarnaTokenDetails",
        "required": ["type"],
        "type": "object",
        "properties": {
          "type": {
            "title": "Type",
            "type": "string"
          },
          "brand": {
            "title": "Brand",
            "type": "string"
          },
          "masked_number": {
            "title": "Masked Number",
            "type": "string"
          },
          "expiry_date": {
            "title": "Expiry Date",
            "type": "string"
          }
        }
      },
      "PayPalBillingAgreementAPISchema": {
        "title": "PayPalBillingAgreementAPISchema",
        "required": ["paypalBillingAgreementId"],
        "type": "object",
        "properties": {
          "paypalBillingAgreementId": {
            "title": "Paypalbillingagreementid",
            "type": "string"
          },
          "externalPayerInfo": {
            "title": "Payer Info",
            "allOf": [
              {
                "$ref": "#/components/schemas/PayPalExternalPayerInfoAPISchema"
              }
            ],
            "description": "Information about the PayPal customer"
          },
          "shippingAddress": {
            "title": "Shipping address",
            "allOf": [
              {
                "$ref": "#/components/schemas/AddressAPISchema"
              }
            ],
            "description": "The PayPal customer's shipping address"
          },
          "paypalStatus": {
            "title": "PayPal order status",
            "type": "string"
          }
        }
      },
      "PayPalExternalPayerInfoAPISchema": {
        "title": "PayPalExternalPayerInfoAPISchema",
        "type": "object",
        "properties": {
          "externalPayerId": {
            "title": "Externalpayerid",
            "type": "string"
          },
          "email": {
            "title": "Email",
            "type": "string"
          },
          "firstName": {
            "title": "Firstname",
            "type": "string"
          },
          "lastName": {
            "title": "Lastname",
            "type": "string"
          }
        }
      },
      "PayPalOrderTokenAPISchema": {
        "title": "PayPalOrderTokenAPISchema",
        "required": ["paypalOrderId"],
        "type": "object",
        "properties": {
          "paypalOrderId": {
            "title": "PayPal order identifier",
            "type": "string"
          },
          "externalPayerInfo": {
            "title": "Payer Info",
            "allOf": [
              {
                "$ref": "#/components/schemas/PayPalExternalPayerInfoAPISchema"
              }
            ],
            "description": "Information about the PayPal customer"
          },
          "paypalStatus": {
            "title": "PayPal order status",
            "type": "string"
          }
        }
      },
      "PaymentAPIResponse": {
        "title": "PaymentAPIResponse",
        "type": "object",
        "properties": {
          "id": {
            "title": "Payment identifier",
            "type": "string",
            "description": "The unique payment ID.\n\nYou can use this ID to retrieve the payment details, or perform downstream\noperations.\n"
          },
          "date": {
            "title": "Payment date",
            "type": "string",
            "description": "The date and time at which the payment was created in UTC format.",
            "format": "date-time"
          },
          "status": {
            "title": "Current status",
            "allOf": [
              {
                "$ref": "#/components/schemas/PaymentStatus"
              }
            ],
            "description": "See the payment [status table](../docs#payment-status) for more information."
          },
          "orderId": {
            "title": "Order ID",
            "type": "string",
            "description": "Your reference for the payment."
          },
          "currencyCode": {
            "title": "Currency",
            "type": "string",
            "description": "The three-letter currency code in [ISO 4217 format](https://en.wikipedia.org/wiki/ISO_4217#Active_codes). e.g. use `USD` for US dollars."
          },
          "amount": {
            "title": "Payment amount",
            "minimum": 0,
            "type": "integer",
            "description": "The amount you charged the customer, in minor units."
          },
          "order": {
            "title": "Order Details",
            "allOf": [
              {
                "$ref": "#/components/schemas/OrderDetailsAPISchema"
              }
            ],
            "description": "More information associated with the order."
          },
          "customerId": {
            "title": "The ID of the customer using the checkout",
            "type": "string",
            "description": "The unique identifier for your customer."
          },
          "customer": {
            "title": "Customer Details",
            "allOf": [
              {
                "$ref": "#/components/schemas/CustomerDetailsAPISchema"
              }
            ],
            "description": "More information associated with the customer."
          },
          "metadata": {
            "title": "Payment Metadata",
            "type": "object",
            "description": "Additional data to be used throughout the payment lifecycle.\n"
          },
          "paymentMethod": {
            "title": "Payment Method Options",
            "allOf": [
              {
                "$ref": "#/components/schemas/PaymentResponsePaymentMethodOptionsAPISchema"
              }
            ],
            "description": "The payment method options provided in the request, as well as the token used to process the payment."
          },
          "processor": {
            "title": "Processor Information",
            "allOf": [
              {
                "$ref": "#/components/schemas/PaymentResponseProcessorAPISchema"
              }
            ],
            "description": "More information associated with the payment processor, including the processor name."
          },
          "requiredAction": {
            "title": "Required action",
            "allOf": [
              {
                "$ref": "#/components/schemas/PaymentRequiredActionAPISchema"
              }
            ],
            "description": "Required action to perform in order to resume the payment workflow. This can be requiring a 3DS check from the customer for instance."
          },
          "statusReason": {
            "title": "Status Reason",
            "allOf": [
              {
                "$ref": "#/components/schemas/StatusReasonAPISchema"
              }
            ],
            "description": "Check this field for more information regarding the payment's status. This is especially useful when the status is `DECLINED` or `FAILED`.\n"
          },
          "transactions": {
            "title": "Transactions",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TransactionOverviewAPISchema"
            },
            "description": "A list summarizing the transactions that occurred while processing the payment.\n\nNote: a refund is a separate transaction and so will appear in this `transactions` list if a refund was performed."
          }
        }
      },
      "PaymentCancelAPIRequest": {
        "title": "PaymentCancelAPIRequest",
        "type": "object",
        "properties": {
          "reason": {
            "title": "Cancellation reason",
            "type": "string",
            "description": "You can optionally specify a reason for the cancellation. This is for your own records."
          }
        },
        "additionalProperties": false,
        "example": {
          "reason": "Customer returned order #1234."
        }
      },
      "PaymentCaptureAPIRequest": {
        "title": "PaymentCaptureAPIRequest",
        "type": "object",
        "properties": {
          "amount": {
            "title": "Amount to capture",
            "minimum": 0,
            "type": "integer",
            "description": "The amount you would like to capture, in minor units. The currency used on authorization is assumed.\n\nIf no amount is specified it defaults to the full amount."
          },
          "final": {
            "title": "Final capture",
            "type": "boolean",
            "description": "Indicates whether the capture request is the final capture request.\n\nAfter a final capture, no subsequent captures are allowed.",
            "default": true
          }
        },
        "additionalProperties": false,
        "example": {
          "amount": 42
        }
      },
      "PaymentCardTokenAPISchema": {
        "title": "PaymentCardTokenAPISchema",
        "required": ["last4Digits", "expirationMonth", "expirationYear"],
        "type": "object",
        "properties": {
          "first6Digits": {
            "title": "Payment card's first six digits",
            "maxLength": 6,
            "minLength": 6,
            "type": "string"
          },
          "last4Digits": {
            "title": "Payment card's last four digits",
            "maxLength": 4,
            "minLength": 4,
            "type": "string"
          },
          "expirationMonth": {
            "title": "Expiration month",
            "maxLength": 2,
            "minLength": 2,
            "type": "string"
          },
          "expirationYear": {
            "title": "Expiration year",
            "maxLength": 4,
            "minLength": 4,
            "type": "string"
          },
          "cardholderName": {
            "title": "Cardholder's name",
            "type": "string"
          },
          "network": {
            "title": "Card network",
            "type": "string"
          },
          "isNetworkTokenized": {
            "title": "Is represented by a digital PAN",
            "type": "boolean",
            "default": false
          },
          "binData": {
            "$ref": "#/components/schemas/BinDataAPISchema"
          }
        }
      },
      "PaymentCreationAPIRequest": {
        "title": "PaymentCreationAPIRequest",
        "required": ["paymentMethodToken"],
        "type": "object",
        "properties": {
          "orderId": {
            "title": "Order ID",
            "type": "string",
            "description": "Your reference for the payment."
          },
          "currencyCode": {
            "title": "Currency",
            "type": "string",
            "description": "The three-letter currency code in [ISO 4217 format](https://en.wikipedia.org/wiki/ISO_4217#Active_codes).\ne.g. use `USD` for US dollars.\n"
          },
          "amount": {
            "title": "Payment amount",
            "minimum": 0,
            "type": "integer",
            "description": "The amount you would like to charge the customer, in minor units. e.g. for $7, use `700`.\n\nSome currencies, such as Japanese Yen, do not have minor units. In this case you should use the value as it is, without any formatting. For example for ¥100, use `100`. The minimum amount is 0."
          },
          "order": {
            "title": "Order Details",
            "allOf": [
              {
                "$ref": "#/components/schemas/OrderDetailsAPISchema"
              }
            ],
            "description": "More information associated with the order."
          },
          "paymentMethodToken": {
            "title": "Payment method token",
            "type": "string",
            "description": "The payment method token used to authorize the payment.\n"
          },
          "customerId": {
            "title": "The ID of the customer using the checkout",
            "type": "string",
            "description": "A unique identifier for your customer.\nThis attribute is required if `paymentMethod.vaultOnSuccess` is set to `True`."
          },
          "customer": {
            "title": "Customer Details",
            "allOf": [
              {
                "$ref": "#/components/schemas/CustomerDetailsAPISchema"
              }
            ],
            "description": "More information associated with the customer.\n"
          },
          "metadata": {
            "title": "Payment Metadata",
            "type": "object",
            "description": "Additional data to be used throughout the payment lifecycle.\n\nA dictionary of key-value pairs where the values can only be strings or\nintegers.\n\ne.g. `{\"productId\": 1001, \"merchantId\": \"a13bsd62s\"}`\n"
          },
          "paymentMethod": {
            "title": "Payment Method Options",
            "allOf": [
              {
                "$ref": "#/components/schemas/PaymentRequestPaymentMethodOptionsAPISchema"
              }
            ],
            "description": "Enable certain options associated with the payment method."
          }
        },
        "additionalProperties": false,
        "example": {
          "orderId": "order-abc",
          "currencyCode": "EUR",
          "amount": 42,
          "paymentMethodToken": "heNwnqaeRiqvY1UcslfQc3wxNjEzOTIxNjc4",
          "customerId": "customer-123",
          "customer": {
            "emailAddress": "customer123@gmail.com"
          },
          "metadata": {
            "productId": 123,
            "merchantId": "a13bsd62s"
          },
          "paymentMethod": {
            "vaultOnSuccess": true
          }
        }
      },
      "StatusReasonAPISchema": {
        "title": "StatusReasonAPISchema",
        "required": ["type"],
        "type": "object",
        "properties": {
          "type": {
            "title": "Payment status type",
            "allOf": [
              {
                "$ref": "#/components/schemas/PaymentStatusTypeEnum"
              }
            ],
            "description": "Type of the status."
          },
          "declineType": {
            "title": "Decline Type",
            "allOf": [
              {
                "$ref": "#/components/schemas/DeclineTypeEnum"
              }
            ],
            "description": "If the error is of type `ISSUER_DECLINED` this will be returned.\n\nDeclines of type `SOFT_DECLINE` may be retried,\nwhereas declines of type `HARD_DECLINE` should not be retried.\n"
          },
          "code": {
            "title": "Payment status code",
            "allOf": [
              {
                "$ref": "#/components/schemas/TransactionDeclineReasonV2Enum"
              }
            ],
            "description": "If the error is of type `ISSUER_DECLINED`, this will be returned."
          },
          "message": {
            "title": "Processor message",
            "type": "string",
            "description": "In case of an error on the processor's part, we will return the message returned by the processor. This is usually a human readable error."
          }
        }
      },
      "PaymentMethodTypeEnum": {
        "title": "PaymentMethodTypeEnum",
        "enum": [
          "PAYMENT_CARD",
          "PAYPAL_ORDER",
          "PAYPAL_BILLING_AGREEMENT",
          "GOCARDLESS_MANDATE",
          "KLARNA_AUTHORIZATION_TOKEN",
          "KLARNA_CUSTOMER_TOKEN",
          "PAY_NL_IDEAL",
          "APAYA",
          "OFF_SESSION_PAYMENT",
          "CARD_OFF_SESSION_PAYMENT",
          "APPLE_PAY",
          "APPLE_PAY_ENCRYPTED_TOKEN",
          "GOOGLE_PAY"
        ],
        "type": "string",
        "description": "Payment method type, where `OFF_SESSION_PAYMENT` is used for APM (Alternative Payment Method) payments and `PAYMENT_CARD` for traditional debit or credit cards. Please note that this list is different from one indicated on [available payment methods](https://primer.io/docs/payment-methods/available-payment-methods) page and values of this field will be changed in the future versions of the API."
      },
      "PaymentListAPIResponse": {
        "title": "PaymentListAPIResponse",
        "type": "object",
        "properties": {
          "data": {
            "title": "Data",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PaymentSummaryAPISchema"
            }
          },
          "nextCursor": {
            "title": "Nextcursor",
            "type": "string"
          },
          "prevCursor": {
            "title": "Prevcursor",
            "type": "string"
          }
        }
      },
      "PaymentRefundAPIRequest": {
        "title": "PaymentRefundAPIRequest",
        "type": "object",
        "properties": {
          "amount": {
            "title": "Amount to refund",
            "minimum": 0,
            "type": "integer",
            "description": "The amount you would like to refund the customer, in minor units. e.g. for $7, use `700`.\n\nDefaults to remaining non-refunded amount."
          },
          "orderId": {
            "title": "Order ID",
            "type": "string",
            "description": "Optionally you can pass a specific order ID for the refund.\n\nBy default this will be set to the original `orderId` given on payment creation."
          },
          "reason": {
            "title": "Refund reason",
            "type": "string",
            "description": "You can optionally specify a reason for the refund. This is for your own records."
          }
        },
        "additionalProperties": false,
        "example": {
          "amount": 42,
          "orderId": "order-1234-refund"
        }
      },
      "PaymentRequiredActionAPISchema": {
        "title": "PaymentRequiredActionAPISchema",
        "required": ["name", "description"],
        "type": "object",
        "properties": {
          "name": {
            "title": "Name",
            "allOf": [
              {
                "$ref": "#/components/schemas/BlockingPaymentActionTypeEnum"
              }
            ],
            "description": "Action name"
          },
          "description": {
            "title": "Description",
            "type": "string",
            "description": "Human description of the required action to perform."
          },
          "clientToken": {
            "title": "Client token",
            "type": "string",
            "description": "The client token to be returned to the SDK if a required action is returned."
          }
        }
      },
      "PaymentResumeAPIRequest": {
        "title": "PaymentResumeAPIRequest",
        "required": ["resumeToken"],
        "type": "object",
        "properties": {
          "resumeToken": {
            "title": "Resume token",
            "type": "string",
            "description": "A token containing any information that is sent back from the checkout to complete a blocked payment flow.",
            "format": "uuid"
          }
        },
        "additionalProperties": false
      },
      "PaymentSummaryAPISchema": {
        "title": "PaymentSummaryAPISchema",
        "required": ["id", "date", "status", "orderId", "currencyCode", "amount"],
        "type": "object",
        "properties": {
          "id": {
            "title": "Payment identifier",
            "type": "string",
            "description": "The unique payment ID.\n\nYou can use this ID to retrieve the payment details, or perform downstream\noperations.\n"
          },
          "date": {
            "title": "Payment date",
            "type": "string",
            "description": "The date and time at which the payment was created in UTC format.",
            "format": "date-time"
          },
          "status": {
            "title": "Current status",
            "allOf": [
              {
                "$ref": "#/components/schemas/PaymentStatus"
              }
            ],
            "description": "See the payment [status table](../docs#payment-status) for more information."
          },
          "orderId": {
            "title": "Order ID",
            "type": "string",
            "description": "Your reference for the payment."
          },
          "processor": {
            "title": "Processor",
            "type": "string",
            "description": "The payment processor used for this payment.",
            "allOf": [
              {
                "$ref": "#/components/schemas/PaymentSummaryProcessorAPISchema"
              }
            ]
          },
          "currencyCode": {
            "title": "Currency",
            "type": "string",
            "description": "The three-letter currency code in [ISO 4217 format](https://en.wikipedia.org/wiki/ISO_4217#Active_codes). e.g. use `USD` for US dollars."
          },
          "amount": {
            "title": "Payment amount",
            "type": "integer",
            "description": "The payment amount, in minor units. e.g. $7 would show as `700`."
          },
          "metadata": {
            "title": "Payment Metadata",
            "type": "object",
            "description": "Additional data to be used throughout the payment lifecycle.\n\nA dictionary of key-value pairs where the values can only be strings or\nintegers.\n\ne.g. `{\"productId\": 1001, \"merchantId\": \"a13bsd62s\"}`\n"
          }
        },
        "example": {
          "id": "IHQlakKC",
          "date": "2021-03-24T14:56:56.869248",
          "status": "SETTLED",
          "orderId": "my-order-123",
          "currencyCode": "EUR",
          "amount": 700,
          "processor": {
            "name": "STRIPE",
            "processorMerchantId": "acct_stripe_1234"
          },
          "metadata": {
            "productId": 123,
            "merchantId": "a13bsd62s"
          }
        }
      },
      "PaymentSummaryProcessorAPISchema": {
        "title": "PaymentSummaryProcessorAPISchema",
        "required": ["name"],
        "type": "object",
        "properties": {
          "name": {
            "title": "Processor Name",
            "type": "string",
            "description": "The payment processor used for this payment."
          },
          "processorMerchantId": {
            "title": "Processor Merchant ID",
            "type": "string",
            "description": "The merchant ID registered at the payment processor used for this payment."
          }
        }
      },
      "PrepaidReloadableEnum": {
        "title": "PrepaidReloadableEnum",
        "enum": ["RELOADABLE", "NON_RELOADABLE", "NOT_APPLICABLE", "UNKNOWN"],
        "type": "string",
        "description": "An enumeration."
      },
      "RecurringTransactionTypeEnum": {
        "title": "RecurringTransactionTypeEnum",
        "enum": ["FIRST_PAYMENT", "ECOMMERCE", "SUBSCRIPTION", "UNSCHEDULED"],
        "type": "string",
        "description": "An enumeration."
      },
      "ProductTypeEnum": {
        "title": "ProductTypeEnum",
        "enum": ["PHYSICAL", "DIGITAL"],
        "type": "string",
        "description": "An enumeration"
      },
      "ThreeDSecureAuthResponseCodeEnum": {
        "title": "ThreeDSecureAuthResponseCodeEnum",
        "enum": ["NOT_PERFORMED", "SKIPPED", "AUTH_SUCCESS", "AUTH_FAILED", "CHALLENGE", "METHOD"],
        "type": "string",
        "description": "An enumeration."
      },
      "ThreeDSecureAuthenticationAPISchema": {
        "title": "ThreeDSecureAuthenticationAPISchema",
        "required": ["responseCode"],
        "type": "object",
        "properties": {
          "responseCode": {
            "$ref": "#/components/schemas/ThreeDSecureAuthResponseCodeEnum"
          },
          "reasonCode": {
            "title": "Reasoncode",
            "anyOf": [
              {
                "$ref": "#/components/schemas/ThreeDSecureSkippedReasonCodeEnum"
              },
              {
                "$ref": "#/components/schemas/ThreeDSecureFailedReasonCodeEnum"
              }
            ]
          },
          "reasonText": {
            "title": "Reasontext",
            "type": "string"
          },
          "protocolVersion": {
            "title": "Protocolversion",
            "type": "string"
          },
          "challengeIssued": {
            "title": "Challengeissued",
            "type": "boolean"
          }
        }
      },
      "ThreeDSecureFailedReasonCodeEnum": {
        "title": "ThreeDSecureFailedReasonCodeEnum",
        "enum": [
          "UNKNOWN",
          "REJECTED_BY_ISSUER",
          "CARD_AUTHENTICATION_FAILED",
          "UNKNOWN_DEVICE",
          "UNSUPPORTED_DEVICE",
          "EXCEEDS_AUTHENTICATION_FREQUENCY_LIMIT",
          "EXPIRED_CARD",
          "INVALID_CARD_NUMBER",
          "INVALID_TRANSACTION",
          "NO_CARD_RECORD",
          "SECURITY_FAILURE",
          "STOLEN_CARD",
          "SUSPECTED_FRAUD",
          "TRANSACTION_NOT_PERMITTED_TO_CARDHOLDER",
          "CARDHOLDER_NOT_ENROLLED_IN_SERVICE",
          "TRANSACTION_TIMED_OUT_AT_THE_ACS",
          "LOW_CONFIDENCE",
          "MEDIUM_CONFIDENCE",
          "HIGH_CONFIDENCE",
          "VERY_HIGH_CONFIDENCE",
          "EXCEEDS_ACS_MAXIMUM_CHALLENGES",
          "NON_PAYMENT_NOT_SUPPORTED",
          "THREE_RI_NOT_SUPPORTED",
          "ACS_TECHNICAL_ISSUE",
          "DECOUPLED_REQUIRED_BY_ACS",
          "DECOUPLED_MAX_EXPIRY_EXCEEDED",
          "DECOUPLED_AUTHENTICATION_INSUFFICIENT_TIME",
          "AUTHENTICATION_ATTEMPTED_BUT_NOT_PERFORMED_BY_CARDHOLDER",
          "ACS_TIMED_OUT",
          "INVALID_ACS_RESPONSE",
          "ACS_SYSTEM_ERROR_RESPONSE",
          "ERROR_GENERATING_CAVV",
          "PROTOCOL_VERSION_NOT_SUPPORTED",
          "TRANSACTION_EXCLUDED_FROM_ATTEMPTS_PROCESSING",
          "REQUESTED_PROGRAM_NOT_SUPPORTED"
        ],
        "type": "string",
        "description": "This enum is derived from the `transStatusReason` on page 218 of the\n[EMV Co 3DS protocol specification](https://www.emvco.com/terms-of-use/?u=/wp-content/uploads/documents/EMVCo_3DS_Spec_v220_122018.pdf)\n\n| Code | Description                             |\n|------|-----------------------------------------|\n| 01   | Card authentication failed              |\n| 02   | Unknown Device                          |\n| 03   | Unsupported Device                      |\n| 04   | Exceeds authentication frequency limit  |\n| 05   | Expired card                            |\n| 06   | Invalid card number                     |\n| 07   | Invalid transaction                     |\n| 08   | No Card record                          |\n| 09   | Security failure                        |\n| 10   | Stolen card                             |\n| 11   | Suspected fraud                         |\n| 12   | Transaction not permitted to cardholder |\n| 13   | Cardholder not enrolled in service      |\n| 14   | Transaction timed out at the ACS        |\n| 15   | Low confidence                          |\n| 16   | Medium confidence                       |"
      },
      "ThreeDSecureSkippedReasonCodeEnum": {
        "title": "ThreeDSecureSkippedReasonCodeEnum",
        "enum": [
          "GATEWAY_UNAVAILABLE",
          "DISABLED_BY_MERCHANT",
          "NOT_SUPPORTED_BY_ISSUER",
          "FAILED_TO_NEGOTIATE",
          "UNKNOWN_ACS_RESPONSE",
          "3DS_SERVER_ERROR",
          "ACQUIRER_NOT_CONFIGURED",
          "ACQUIRER_NOT_PARTICIPATING"
        ],
        "type": "string",
        "description": "An enumeration."
      },
      "TokenTypeEnum": {
        "title": "TokenTypeEnum",
        "enum": ["MULTI_USE", "SINGLE_USE"],
        "type": "string",
        "description": "An enumeration."
      },
      "DeclineTypeEnum": {
        "title": "DeclineTypeEnum",
        "enum": ["SOFT_DECLINE", "HARD_DECLINE"],
        "type": "string",
        "description": "An enumeration."
      },
      "TransactionDeclineReasonV2Enum": {
        "title": "TransactionDeclineReasonV2Enum",
        "enum": [
          "ERROR",
          "INVALID_CARD_NUMBER",
          "EXPIRED_CARD",
          "LOST_OR_STOLEN_CARD",
          "SUSPECTED_FRAUD",
          "UNKNOWN",
          "DECLINED",
          "REFER_TO_CARD_ISSUER",
          "DO_NOT_HONOR",
          "INSUFFICIENT_FUNDS",
          "WITHDRAWAL_LIMIT_EXCEEDED",
          "ISSUER_TEMPORARILY_UNAVAILABLE",
          "AUTHENTICATION_REQUIRED"
        ],
        "type": "string",
        "description": "An enumeration."
      },
      "TransactionOverviewAPISchema": {
        "title": "TransactionOverviewAPISchema",
        "required": ["id", "processor", "processorMerchantId", "type", "status"],
        "type": "object",
        "properties": {
          "transactionType": {
            "title": "Transaction type",
            "allOf": [
              {
                "$ref": "#/components/schemas/TransactionTypeEnum"
              }
            ]
          },
          "processorTransactionId": {
            "title": "Processor's transaction ID",
            "type": "string",
            "description": "Processor's unique identifier for the transaction"
          },
          "processorName": {
            "title": "Processor Name",
            "type": "string",
            "description": "An identifier of a processor."
          },
          "processorMerchantId": {
            "title": "Processor master account identifier",
            "type": "string",
            "description": "Processor's main account identifier.\n\n* Adyen: Account code\n* Braintree: Merchant ID\n* Stripe: Account ID\"\n"
          },
          "processorStatus": {
            "title": "Processor Transaction status",
            "allOf": [
              {
                "$ref": "#/components/schemas/PaymentStatus"
              }
            ],
            "description": "Transaction status, please refer to the [Transaction Status Codes](#section/API-Usage-Guide/Payment-Status) table for more information"
          },
          "processorStatusReason": {
            "title": "Payment error",
            "allOf": [
              {
                "$ref": "#/components/schemas/StatusReasonAPISchema"
              }
            ],
            "description": "If the transaction has a declined or failed status.\n\nOnly if the status is `DECLINED` or `FAILED`, otherwise `null`.\n"
          }
        }
      },
      "PaymentStatus": {
        "title": "PaymentStatus",
        "enum": [
          "PENDING",
          "FAILED",
          "AUTHORIZED",
          "SETTLING",
          "PARTIALLY_SETTLED",
          "SETTLED",
          "DECLINED",
          "CANCELLED"
        ],
        "type": "string",
        "description": "An enumeration."
      },
      "PaymentStatusTypeEnum": {
        "title": "PaymentStatusTypeEnum",
        "enum": ["APPLICATION_ERROR", "GATEWAY_REJECTED", "ISSUER_DECLINED"],
        "type": "string",
        "description": "An enumeration."
      },
      "TransactionTypeEnum": {
        "title": "TransactionTypeEnum",
        "enum": ["SALE", "REFUND"],
        "type": "string",
        "description": "An enumeration."
      },
      "core_api__api__commons__schemas__addess__AddressAPISchema": {
        "title": "AddressAPISchema",
        "type": "object",
        "properties": {
          "firstName": {
            "title": "Firstname",
            "type": "string"
          },
          "lastName": {
            "title": "Lastname",
            "type": "string"
          },
          "addressLine1": {
            "title": "Addressline1",
            "type": "string"
          },
          "addressLine2": {
            "title": "Addressline2",
            "type": "string"
          },
          "city": {
            "title": "City",
            "type": "string"
          },
          "state": {
            "title": "State",
            "type": "string"
          },
          "countryCode": {
            "$ref": "#/components/schemas/CountryCodeEnum"
          },
          "postalCode": {
            "title": "Postalcode",
            "type": "string"
          }
        }
      },
      "AddressAPISchema": {
        "title": "AddressAPISchema",
        "required": ["addressLine1", "city", "countryCode"],
        "type": "object",
        "properties": {
          "firstName": {
            "title": "First Name",
            "type": "string"
          },
          "lastName": {
            "title": "Last Name",
            "type": "string"
          },
          "addressLine1": {
            "title": "Address Line 1",
            "type": "string",
            "description": "Street name, Company name or PO Box"
          },
          "addressLine2": {
            "title": "Address Line 2",
            "type": "string",
            "description": "Apartment, Unit or Building number"
          },
          "city": {
            "title": "City",
            "type": "string",
            "description": "Name of the city, district, town or village"
          },
          "state": {
            "title": "State",
            "type": "string",
            "description": "State, County or Province"
          },
          "countryCode": {
            "title": "Country Code",
            "allOf": [
              {
                "$ref": "#/components/schemas/CountryCodeEnum"
              }
            ],
            "description": "Two letter ISO country code"
          },
          "postalCode": {
            "title": "Postal Code",
            "type": "string",
            "description": "Postal or ZIP code"
          }
        }
      },
      "MerchantPaymentMethodTokenAPIResponse": {
        "title": "MerchantPaymentMethodTokenAPIResponse",
        "type": "object",
        "properties": {
          "createdAt": {
            "title": "Creation date",
            "type": "string",
            "description": "Creation date & time of the object (UTC)",
            "format": "date-time"
          },
          "deletedAt": {
            "title": "Revocation date",
            "type": "string",
            "description": "Date & time when this object was revoked. (UTC)",
            "format": "date-time"
          },
          "deleted": {
            "title": "Revoked",
            "type": "boolean",
            "description": "Whether or not this object has been revoked."
          },
          "token": {
            "title": "Token",
            "type": "string",
            "description": "The vaulted payment method token."
          },
          "tokenType": {
            "title": "Token type",
            "type": "string",
            "description": "* `MULTI_USE` a vaulted token that can be re-used with subsequent payments"
          },
          "analyticsId": {
            "title": "Unique analytics ID",
            "type": "string",
            "description": "Unique analytics identifier corresponding to a payment method"
          },
          "paymentMethodType": {
            "$ref": "#/components/schemas/PaymentMethodTypeEnum",
            "title": "Payment method type",
            "description": "Payment method type associated with a token."
          },
          "paymentMethodData": {
            "title": "Payment method data",
            "anyOf": [
              {
                "$ref": "#/components/schemas/PaymentCardTokenAPISchemaPaymentMethodsAPI"
              },
              {
                "$ref": "#/components/schemas/PayPalBillingAgreementAPISchema"
              },
              {
                "$ref": "#/components/schemas/GoCardlessMandateAPISchema"
              },
              {
                "$ref": "#/components/schemas/KlarnaCustomerTokenAPISchema"
              },
              {
                "$ref": "#/components/schemas/ApayaCustomerTokenAPISchema"
              }
            ],
            "description": "Payment method data"
          },
          "customerId": {
            "title": "Customer ID",
            "type": "string",
            "description": "The ID representing the customer"
          },
          "default": {
            "title": "Default",
            "type": "boolean",
            "description": "Whether or not this payment method is the default",
            "default": false
          }
        },
        "example": {
          "createdAt": "2021-03-01T12:00:00.123456",
          "token": "_xlXlmBcTnuFxc2N3HAI73wxNjE1NTU5ODY5",
          "tokenType": "MULTI_USE",
          "analyticsId": "vuXhpZouWxaZpRZ-x_brZmtT",
          "paymentMethodType": "PAYMENT_CARD",
          "payment_method_data": {
            "last4Digits": "1111",
            "expirationMonth": "12",
            "expirationYear": "2030",
            "cardholderName": "John Biggins",
            "network": "Visa",
            "networkTransactionId": 20210628190752,
            "accountFundingType": "DEBIT"
          },
          "customerId": "customer-123",
          "deleted": false,
          "default": true
        }
      },
      "MerchantPaymentMethodTokenListAPIResponse": {
        "title": "MerchantPaymentMethodTokenListAPIResponse",
        "type": "object",
        "properties": {
          "data": {
            "title": "Data",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MerchantPaymentMethodTokenAPIResponse"
            }
          }
        }
      },
      "PaymentCardTokenAPISchemaPaymentMethodsAPI": {
        "title": "PaymentCardTokenAPISchemaPaymentMethodsAPI",
        "required": ["last4Digits", "expirationMonth", "expirationYear"],
        "type": "object",
        "properties": {
          "last4Digits": {
            "title": "Payment card's last four digits",
            "maxLength": 4,
            "minLength": 4,
            "type": "string"
          },
          "expirationMonth": {
            "title": "Expiration month",
            "maxLength": 2,
            "minLength": 2,
            "type": "string"
          },
          "expirationYear": {
            "title": "Expiration year",
            "maxLength": 4,
            "minLength": 4,
            "type": "string"
          },
          "cardholderName": {
            "title": "Cardholder's name",
            "type": "string"
          },
          "network": {
            "title": "Card network",
            "type": "string"
          },
          "networkTransactionId": {
            "title": "Network Transaction ID",
            "type": "string",
            "description": "An ID for the transaction assigned by the card network. Used to correlate recurring payments."
          },
          "accountFundingType": {
            "title": "Account Funding Type",
            "allOf": [
              {
                "$ref": "#/components/schemas/AccountFundingTypeEnum"
              }
            ],
            "description": "The type of card, e.g. Debit, Credit"
          }
        },
        "description": "Used exclusively by the Payment Methods API"
      },
      "VaultPaymentMethodAPIRequest": {
        "title": "VaultPaymentMethodAPIRequest",
        "required": ["customerId"],
        "type": "object",
        "properties": {
          "customerId": {
            "title": "Customer ID",
            "minLength": 1,
            "type": "string",
            "description": "The ID representing the customer"
          }
        },
        "additionalProperties": false
      },
      "ErrorObject": {
        "title": "ErrorObject",
        "type": "object",
        "properties": {
          "errorId": {
            "title": "Error ID",
            "type": "string",
            "description": "An error ID"
          },
          "description": {
            "title": "Error description",
            "type": "string",
            "description": "A human description of the error"
          },
          "recoverySuggestion": {
            "title": "Error recovery suggestion",
            "type": "string",
            "description": "A human readable recovery suggestion of the error"
          },
          "diagnosticsId": {
            "title": "Error diagnostics ID",
            "type": "string",
            "description": "An ID that you can quote when contacting the support team (support@primer.io)."
          }
        }
      },
      "BadRequestErrorResponse": {
        "title": "BadRequestErrorResponse",
        "allOf": [
          {
            "$ref": "#/components/schemas/ErrorObject"
          }
        ]
      },
      "UnprocessableEntityErrorResponse": {
        "title": "UnprocessableEntityErrorResponse",
        "allOf": [
          {
            "$ref": "#/components/schemas/ErrorObject"
          }
        ]
      }
    }
  }
}
