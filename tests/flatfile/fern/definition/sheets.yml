# yaml-language-server: $schema=https://raw.githubusercontent.com/fern-api/fern/main/fern.schema.json

imports:
  property: property.yml
  commons: commons.yml
  records: records.yml

service:
  auth: true
  base-path: /sheets
  audiences:
    - public
  endpoints:
    list:
      path: ""
      method: GET
      docs: Returns sheets in a workbook
      display-name: List sheets
      request:
        name: ListSheetsRequest
        query-parameters:
          workbookId:
            docs: ID of workbook
            type: commons.WorkbookId
      response: ListSheetsResponse

    get:
      path: /{sheetId}
      method: GET
      docs: Returns a sheet in a workbook
      display-name: Get a sheet
      path-parameters:
        sheetId:
          docs: ID of sheet
          type: commons.SheetId
      response: SheetResponse

    delete:
      path: /{sheetId}
      method: DELETE
      audiences:
        - public
      display-name: Delete a sheet
      docs: Deletes a specific sheet from a workbook
      path-parameters:
        sheetId:
          docs: ID of sheet
          type: commons.SheetId
      response: commons.Success
      errors:
        - commons.BadRequestError
        - commons.NotFoundError

    validate:
      path: /{sheetId}/validate
      method: POST
      docs: Trigger data hooks and validation to run on a sheet
      display-name: Validate a sheet
      path-parameters:
        sheetId:
          docs: ID of sheet
          type: commons.SheetId
      response: commons.Success
      errors:
        - commons.BadRequestError
        - commons.NotFoundError

    getRecordsAsCsv:
      path: /{sheetId}/download
      method: GET
      docs: Returns records from a sheet in a workbook as a csv file
      display-name: Download records as a CSV file
      path-parameters:
        sheetId:
          docs: ID of sheet
          type: commons.SheetId
      request:
        name: GetRecordsCsvRequest
        query-parameters:
          versionId: optional<string>
          sinceVersionId: optional<commons.VersionId>
          sortField:
            type: optional<commons.SortField>
          sortDirection:
            docs: Sort direction - asc (ascending) or desc (descending)
            type: optional<commons.SortDirection>
          filter:
            docs: Options to filter records
            type: optional<commons.Filter>
          filterField:
            type: optional<commons.FilterField>
          searchValue:
            type: optional<commons.SearchValue>
          searchField:
            type: optional<commons.SearchField>
          ids:
            type: optional<commons.RecordId>
            allow-multiple: true
            docs: >
              The Record Ids param (ids) is a list of record ids that can be passed to several record endpoints allowing the user to identify specific records to INCLUDE in the query, or specific records to EXCLUDE, depending on whether or not filters are being applied. When passing a query param that filters the record dataset, such as 'searchValue', or a 'filter' of 'valid' | 'error' | 'all', the 'ids' param will EXCLUDE those records from the filtered results. For basic queries that do not filter the dataset, passing record ids in the 'ids' param will limit the dataset to INCLUDE just those specific records
      response: file

    getRecordCounts:
      path: /{sheetId}/counts
      method: GET
      docs: Returns counts of records from a sheet
      display-name: Get record counts
      path-parameters:
        sheetId:
          docs: ID of sheet
          type: commons.SheetId
      request:
        name: GetRecordCountsRequest
        query-parameters:
          versionId: optional<string>
          sinceVersionId: optional<commons.VersionId>
          filter:
            docs: Options to filter records
            type: optional<commons.Filter>
          filterField:
            type: optional<commons.FilterField>
          searchValue:
            type: optional<commons.SearchValue>
          searchField:
            type: optional<commons.SearchField>
          byField:
            docs: If true, the error counts for each field will also be returned
            type: optional<boolean>
          q:
            type: optional<string>
            docs: >-
              An FFQL query used to filter the result set to be counted
      response: RecordCountsResponse

    createSnapshot:
      path: /{sheetId}/snapshots
      method: POST
      docs: Creates a snapshot of a sheet
      display-name: Create a snapshot
      path-parameters:
        sheetId:
          docs: ID of sheet
          type: commons.SheetId
      request:
        name: CreateSnapshotRequest
        body:
          properties:
            label:
              docs: Label for the snapshot
              type: optional<string>
      response: SnapshotResponse
      errors:
        - commons.BadRequestError
        - commons.NotFoundError

    listSnapshots:
      path: /{sheetId}/snapshots
      method: GET
      docs: List all snapshots of a sheet
      display-name: List snapshots
      path-parameters:
        sheetId:
          docs: ID of sheet
          type: commons.SheetId
      response: SnapshotsResponse
      errors:
        - commons.BadRequestError
        - commons.NotFoundError

types:
  ListSheetsResponse:
    properties:
      data: list<Sheet>

  SheetResponse:
    properties:
      data: Sheet

  Sheet:
    docs: A place to store tabular data
    properties:
      id: commons.SheetId
      workbookId: commons.WorkbookId
      name: string
      config: SheetConfig
      countRecords: optional<records.RecordCounts>
      namespace: optional<string>
      updatedAt:
        type: datetime
        docs: Date the sheet was last updated
      createdAt:
        type: datetime
        docs: Date the sheet was created

  SheetConfig:
    docs: Describes shape of data as well as behavior
    properties:
      name: string
      description: optional<string>
      slug: optional<string>
      readonly: optional<boolean>
      access: optional<list<SheetAccess>>
      fields: list<property.Property>
      actions: optional<list<commons.Action>>

  RecordCountsResponse:
    properties:
      data: RecordCountsResponseData

  RecordCountsResponseData:
    extends: commons.Success
    properties:
      counts: records.RecordCounts

  SnapshotResponse:
    properties:
      data: Snapshot

  SnapshotsResponse:
    properties:
      data: list<Snapshot>

  Snapshot:
    properties:
      id: commons.SnapshotId
      sheetId: commons.SheetId
      label: optional<string>
      createdAt: datetime

  SheetAccess:
    enum:
      - value: "*"
        name: ALL
      - add
      - edit
      - delete
      - import
