/**
 * This file was auto-generated by Fern from our API Definition.
 */

/**
 * Unique identifiers for features that can be demonstrated with snippets.
 */
export type StructuredFeatureId =
    | "AUTHENTICATION"
    | "ERRORS"
    | "USAGE"
    | "PAGINATION"
    | "RETRIES"
    | "REQUEST_OPTIONS"
    | "STREAMING"
    | "TIMEOUTS"
    | "CUSTOM_CLIENT";

export const StructuredFeatureId = {
    Authentication: "AUTHENTICATION",
    Errors: "ERRORS",
    Usage: "USAGE",
    Pagination: "PAGINATION",
    Retries: "RETRIES",
    RequestOptions: "REQUEST_OPTIONS",
    Streaming: "STREAMING",
    Timeouts: "TIMEOUTS",
    CustomClient: "CUSTOM_CLIENT",
    _visit: <R>(value: StructuredFeatureId, visitor: StructuredFeatureId.Visitor<R>) => {
        switch (value) {
            case StructuredFeatureId.Authentication:
                return visitor.authentication();
            case StructuredFeatureId.Errors:
                return visitor.errors();
            case StructuredFeatureId.Usage:
                return visitor.usage();
            case StructuredFeatureId.Pagination:
                return visitor.pagination();
            case StructuredFeatureId.Retries:
                return visitor.retries();
            case StructuredFeatureId.RequestOptions:
                return visitor.requestOptions();
            case StructuredFeatureId.Streaming:
                return visitor.streaming();
            case StructuredFeatureId.Timeouts:
                return visitor.timeouts();
            case StructuredFeatureId.CustomClient:
                return visitor.customClient();
            default:
                return visitor._other();
        }
    },
} as const;

export declare namespace StructuredFeatureId {
    interface Visitor<R> {
        authentication: () => R;
        errors: () => R;
        usage: () => R;
        pagination: () => R;
        retries: () => R;
        requestOptions: () => R;
        streaming: () => R;
        timeouts: () => R;
        customClient: () => R;
        _other: () => R;
    }
}
