/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../../index";
import * as FernGeneratorCli from "../../../../api/index";
import * as core from "../../../../core";
import { GithubRemote } from "./GithubRemote";

export const Remote: core.serialization.Schema<serializers.Remote.Raw, FernGeneratorCli.Remote> = core.serialization
    .union("type", {
        github: GithubRemote,
    })
    .transform<FernGeneratorCli.Remote>({
        transform: (value) => {
            switch (value.type) {
                case "github":
                    return FernGeneratorCli.Remote.github(value);
                default:
                    return value as FernGeneratorCli.Remote;
            }
        },
        untransform: ({ _visit, ...value }) => value as any,
    });

export declare namespace Remote {
    type Raw = Remote.Github;

    interface Github extends GithubRemote.Raw {
        type: "github";
    }
}
