types:
  GetSecretsResponseSecretsItem:
    docs: Data representing a secret.
    properties:
      created:
        type: datetime
        docs: The date when the secret was created.
      name:
        type: string
        docs: The name of the secret.
      teamId:
        type: optional<string>
        docs: The unique identifier of the team the secret was created for.
      uid:
        type: string
        docs: The unique identifier of the secret.
      userId:
        type: optional<string>
        docs: The unique identifier of the user who created the secret.
      value:
        type: optional<string>
        docs: The value of the secret.
      createdAt:
        type: optional<double>
        docs: Timestamp for when the secret was created.
      projectId:
        type: optional<string>
        docs: The unique identifier of the project which the secret belongs to.
      decryptable:
        type: optional<boolean>
        docs: >-
          Indicates whether the secret value can be decrypted after it has been
          created.
    source:
      openapi: openapi.json
  GetSecretsResponse:
    properties:
      secrets: list<GetSecretsResponseSecretsItem>
      pagination: root.Pagination
    source:
      openapi: openapi.json
  CreateSecretResponseValue:
    properties:
      type: optional<literal<"Buffer">>
      data: optional<list<double>>
    source:
      openapi: openapi.json
  CreateSecretResponse:
    properties:
      value: CreateSecretResponseValue
      created:
        type: datetime
        docs: The date when the secret was created.
      name:
        type: string
        docs: The name of the secret.
      teamId:
        type: optional<string>
        docs: The unique identifier of the team the secret was created for.
      uid:
        type: string
        docs: The unique identifier of the secret.
      userId:
        type: optional<string>
        docs: The unique identifier of the user who created the secret.
      createdAt:
        type: optional<double>
        docs: Timestamp for when the secret was created.
      projectId:
        type: optional<string>
        docs: The unique identifier of the project which the secret belongs to.
      decryptable:
        type: optional<boolean>
        docs: >-
          Indicates whether the secret value can be decrypted after it has been
          created.
    source:
      openapi: openapi.json
  RenameSecretResponse:
    properties:
      uid: string
      name: string
      created: datetime
      oldName: string
    source:
      openapi: openapi.json
  GetSecretRequestDecrypt:
    enum:
      - 'true'
      - 'false'
    docs: >-
      Whether to try to decrypt the value of the secret. Only works if
      `decryptable` has been set to `true` when the secret was created.
    source:
      openapi: openapi.json
  GetSecretResponse:
    docs: Data representing a secret.
    properties:
      created:
        type: datetime
        docs: The date when the secret was created.
      name:
        type: string
        docs: The name of the secret.
      teamId:
        type: optional<string>
        docs: The unique identifier of the team the secret was created for.
      uid:
        type: string
        docs: The unique identifier of the secret.
      userId:
        type: optional<string>
        docs: The unique identifier of the user who created the secret.
      value:
        type: optional<string>
        docs: The value of the secret.
      createdAt:
        type: optional<double>
        docs: Timestamp for when the secret was created.
      projectId:
        type: optional<string>
        docs: The unique identifier of the project which the secret belongs to.
      decryptable:
        type: optional<boolean>
        docs: >-
          Indicates whether the secret value can be decrypted after it has been
          created.
    source:
      openapi: openapi.json
  DeleteSecretResponse:
    properties:
      uid:
        type: string
        docs: The unique identifier of the deleted secret.
      name:
        type: string
        docs: The name of the deleted secret.
      created:
        type: double
        docs: The date when the secret was created.
    source:
      openapi: openapi.json
imports:
  root: __package__.yml
service:
  auth: false
  base-path: ''
  endpoints:
    getSecrets:
      path: /v3/secrets
      method: GET
      auth: true
      docs: >-
        Retrieves the active Vercel secrets for the authenticated user or team.
        By default it returns 20 secrets. The rest can be retrieved using the
        pagination options. The body will contain an entry for each secret.
      display-name: List secrets
      request:
        name: GetSecretsRequest
        query-parameters:
          id:
            type: optional<string>
            docs: Filter out secrets based on comma separated secret ids.
          projectId:
            type: optional<string>
            docs: Filter out secrets that belong to a project.
          teamId:
            type: optional<string>
            docs: The Team identifier to perform the request on behalf of.
          slug:
            type: optional<string>
            docs: The Team slug to perform the request on behalf of.
      response:
        docs: Successful response retrieving a list of secrets.
        type: GetSecretsResponse
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
        - root.ForbiddenError
        - root.GoneError
      examples:
        - query-parameters:
            id: sec_RKc5iV0rV3ZSrFrHiruRno7k,sec_fGc5iV0rV3ZSrFrHiruRnouQ
            projectId: prj_2WjyKQmM8ZnGcJsPWMrHRHrE
          response:
            body:
              secrets:
                - created: '2021-02-10T13:11:49Z'
                  name: my-api-key
                  teamId: team_LLHUOMOoDlqOp8wPE4kFo9pE
                  uid: sec_XCG7t7AIHuO2SBA8667zNUiM
                  userId: 2qDDuGFTWXBLDNnqZfWPDp1A
                  value: value
                  createdAt: 1609492210000
                  projectId: prj_2WjyKQmM8ZnGcJsPWMrHRHrE
                  decryptable: true
              pagination:
                count: 20
                next: 1540095775951
                prev: 1540095775951
    createSecret:
      path: /v2/secrets/{name}
      method: POST
      auth: true
      docs: Allows to create a new secret.
      path-parameters:
        name: optional<string>
      display-name: Create a new secret
      request:
        name: CreateSecretRequest
        query-parameters:
          teamId:
            type: optional<string>
            docs: The Team identifier to perform the request on behalf of.
          slug:
            type: optional<string>
            docs: The Team slug to perform the request on behalf of.
        body:
          properties:
            name:
              type: string
              docs: The name of the secret (max 100 characters).
              name: createSecretRequestName
            value:
              type: string
              docs: The value of the new secret.
            decryptable:
              type: optional<boolean>
              docs: >-
                Whether the secret value can be decrypted after it has been
                created.
            projectId:
              type: optional<string>
              docs: Associate a secret to a project.
              availability: deprecated
      response:
        docs: Successful response showing the created secret.
        type: CreateSecretResponse
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
        - root.PaymentRequiredError
        - root.ForbiddenError
        - root.GoneError
      examples:
        - request:
            name: my-api-key
            value: some secret value
          response:
            body:
              value:
                type: Buffer
                data:
                  - 1.1
              created: '2021-02-10T13:11:49Z'
              name: my-api-key
              teamId: team_LLHUOMOoDlqOp8wPE4kFo9pE
              uid: sec_XCG7t7AIHuO2SBA8667zNUiM
              userId: 2qDDuGFTWXBLDNnqZfWPDp1A
              createdAt: 1609492210000
              projectId: prj_2WjyKQmM8ZnGcJsPWMrHRHrE
              decryptable: true
    renameSecret:
      path: /v2/secrets/{name}
      method: PATCH
      auth: true
      docs: >-
        Enables to edit the name of a secret. The name has to be unique to the
        user or teamâ€™s secrets.
      path-parameters:
        name:
          type: string
          docs: The name of the secret.
      display-name: Change secret name
      request:
        name: RenameSecretRequest
        query-parameters:
          teamId:
            type: optional<string>
            docs: The Team identifier to perform the request on behalf of.
          slug:
            type: optional<string>
            docs: The Team slug to perform the request on behalf of.
        body:
          properties:
            name:
              type: string
              docs: The name of the new secret.
              name: renameSecretRequestName
      response:
        docs: ''
        type: RenameSecretResponse
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
        - root.ForbiddenError
        - root.GoneError
      examples:
        - path-parameters:
            name: my-api-key
          request:
            name: my-api-key
          response:
            body:
              uid: uid
              name: name
              created: '2024-01-15T09:30:00Z'
              oldName: oldName
    getSecret:
      path: /v3/secrets/{idOrName}
      method: GET
      auth: true
      docs: >-
        Retrieves the information for a specific secret by passing either the
        secret id or name in the URL.
      path-parameters:
        idOrName:
          type: string
          docs: The name or the unique identifier to which the secret belongs to.
      display-name: Get a single secret
      request:
        name: GetSecretRequest
        query-parameters:
          decrypt:
            type: optional<GetSecretRequestDecrypt>
            docs: >-
              Whether to try to decrypt the value of the secret. Only works if
              `decryptable` has been set to `true` when the secret was created.
          teamId:
            type: optional<string>
            docs: The Team identifier to perform the request on behalf of.
          slug:
            type: optional<string>
            docs: The Team slug to perform the request on behalf of.
      response:
        docs: Successful response retrieving a secret.
        type: GetSecretResponse
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
        - root.ForbiddenError
        - root.NotFoundError
        - root.GoneError
      examples:
        - path-parameters:
            idOrName: sec_RKc5iV0rV3ZSrFrHiruRno7k
          response:
            body:
              created: '2021-02-10T13:11:49Z'
              name: my-api-key
              teamId: team_LLHUOMOoDlqOp8wPE4kFo9pE
              uid: sec_XCG7t7AIHuO2SBA8667zNUiM
              userId: 2qDDuGFTWXBLDNnqZfWPDp1A
              value: value
              createdAt: 1609492210000
              projectId: prj_2WjyKQmM8ZnGcJsPWMrHRHrE
              decryptable: true
    deleteSecret:
      path: /v2/secrets/{idOrName}
      method: DELETE
      auth: true
      docs: This deletes the user or teamâ€™s secret defined in the URL.
      path-parameters:
        idOrName:
          type: string
          docs: The name or the unique identifier to which the secret belongs to.
      display-name: Delete a secret
      request:
        name: DeleteSecretRequest
        query-parameters:
          teamId:
            type: optional<string>
            docs: The Team identifier to perform the request on behalf of.
          slug:
            type: optional<string>
            docs: The Team slug to perform the request on behalf of.
      response:
        docs: ''
        type: DeleteSecretResponse
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
        - root.ForbiddenError
        - root.GoneError
      examples:
        - path-parameters:
            idOrName: sec_RKc5iV0rV3ZSrFrHiruRno7k
          response:
            body:
              uid: sec_XCG7t7AIHuO2SBA8667zNUiM
              name: my-api-key
              created: 1.1
  source:
    openapi: openapi.json
