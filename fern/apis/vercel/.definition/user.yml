imports:
  root: __package__.yml
types:
  ListUserEventsResponse:
    docs: Successful response.
    properties:
      events:
        docs: Array of events generated by the User.
        type: list<root.UserEvent>
    source:
      openapi: openapi.json
  GetAuthUserResponseUser:
    discriminated: false
    union:
      - root.AuthUser
      - root.AuthUserLimited
    source:
      openapi: openapi.json
  GetAuthUserResponse:
    docs: Successful response.
    properties:
      user: GetAuthUserResponseUser
    source:
      openapi: openapi.json
  RequestDeleteRequestReasonsItem:
    docs: An object describing the reason why the User account is being deleted.
    properties:
      slug:
        type: string
        docs: Idenitifier slug of the reason why the User account is being deleted.
      description:
        type: string
        docs: Description of the reason why the User account is being deleted.
    source:
      openapi: openapi.json
  RequestDeleteResponse:
    properties:
      id:
        type: string
        docs: Unique identifier of the User who has initiated deletion.
      email:
        type: string
        docs: Email address of the User who has initiated deletion.
      message:
        type: string
        docs: User deletion progress status.
    source:
      openapi: openapi.json
service:
  auth: false
  base-path: ''
  endpoints:
    listUserEvents:
      path: /v3/events
      method: GET
      auth: true
      docs: >-
        Retrieves a list of "events" generated by the User on Vercel. Events are
        generated when the User performs a particular action, such as logging
        in, creating a deployment, and joining a Team (just to name a few). When
        the `teamId` parameter is supplied, then the events that are returned
        will be in relation to the Team that was specified.
      display-name: List User Events
      request:
        name: ListUserEventsRequest
        query-parameters:
          limit:
            type: optional<double>
            docs: Maximum number of items which may be returned.
          since:
            type: optional<string>
            docs: Timestamp to only include items created since then.
          until:
            type: optional<string>
            docs: Timestamp to only include items created until then.
          types:
            type: optional<string>
            docs: Comma-delimited list of event \"types\" to filter the results by.
          userId:
            type: optional<string>
            docs: >-
              When retrieving events for a Team, the `userId` parameter may be
              specified to filter events generated by a specific member of the
              Team.
          withPayload:
            type: optional<string>
            docs: >-
              When set to `true`, the response will include the `payload` field
              for each event.
          teamId:
            type: optional<string>
            docs: The Team identifier to perform the request on behalf of.
          slug:
            type: optional<string>
            docs: The Team slug to perform the request on behalf of.
      response:
        docs: Successful response.
        type: ListUserEventsResponse
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
        - root.ForbiddenError
      examples:
        - query-parameters:
            limit: 20
            since: '2019-12-08T10:00:38.976Z'
            until: '2019-12-09T23:00:38.976Z'
            types: login,team-member-join,domain-buy
            userId: aeIInYVk59zbFF2SxfyxxmuO
            withPayload: 'true'
          response:
            body:
              events:
                - id: uev_bfmMjiMnXfnPbT97dGdpJbCN
                  text: You logged in via GitHub
                  entities:
                    - type: author
                      start: 0
                      end: 3
                  createdAt: 1632859321020
                  user:
                    avatar: avatar
                    email: email
                    uid: uid
                    username: username
                  userId: zTuNVUXEAvvnNN3IaqinkyMw
    getAuthUser:
      path: /v2/user
      method: GET
      auth: true
      docs: Retrieves information related to the currently authenticated User.
      display-name: Get the User
      response:
        docs: Successful response.
        type: GetAuthUserResponse
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
        - root.ForbiddenError
        - root.ConflictError
      examples:
        - response:
            body:
              user:
                createdAt: 1630748523395
                softBlock:
                  blockedAt: 1.1
                  reason: SUBSCRIPTION_CANCELED
                  blockedDueToOverageType: analyticsUsage
                billing:
                  currency: usd
                  cancelation: 1.1
                  period:
                    start: 1.1
                    end: 1.1
                  contract:
                    start: 1.1
                    end: 1.1
                  plan: pro
                  planIteration: planIteration
                  platform: stripe
                  orbCustomerId: orbCustomerId
                  syncedAt: 1.1
                  programType: startup
                  trial:
                    start: 1.1
                    end: 1.1
                  email: email
                  tax:
                    type: type
                    id: id
                  language: language
                  name: name
                  subscriptions:
                    - id: id
                      period:
                        start: 1.1
                        end: 1.1
                      frequency:
                        interval: month
                        intervalCount: 1.1
                      items:
                        - id: id
                          priceId: priceId
                          productId: productId
                          amount: 1.1
                          quantity: 1.1
                  purchaseOrder: purchaseOrder
                  status: active
                  pricingExperiment: august-2022
                  orbMigrationScheduledAt: 1.1
                  forceOrbMigration: true
                  awsMarketplace:
                    productCode: productCode
                    customerId: customerId
                  reseller: reseller
                resourceConfig:
                  blobStores: 1.1
                  nodeType: nodeType
                  concurrentBuilds: 1.1
                  awsAccountType: awsAccountType
                  awsAccountIds:
                    - awsAccountIds
                  cfZoneName: cfZoneName
                  imageOptimizationType: imageOptimizationType
                  edgeConfigs: 1.1
                  edgeConfigSize: 1.1
                  edgeFunctionMaxSizeBytes: 1.1
                  edgeFunctionExecutionTimeoutMs: 1.1
                  serverlessFunctionDefaultMaxExecutionTime: 1.1
                  kvDatabases: 1.1
                  postgresDatabases: 1.1
                  integrationStores: 1.1
                  cronJobs: 1.1
                  cronJobsPerProject: 1.1
                stagingPrefix: stagingPrefix
                activeDashboardViews:
                  - scopeId: scopeId
                importFlowGitNamespace: importFlowGitNamespace
                importFlowGitNamespaceId: importFlowGitNamespaceId
                importFlowGitProvider: github
                preferredScopesAndGitNamespaces:
                  - scopeId: scopeId
                dismissedToasts:
                  - name: name
                    dismissals:
                      - scopeId: scopeId
                        createdAt: 1.1
                favoriteProjectsAndSpaces:
                  - projectId: projectId
                    scopeSlug: scopeSlug
                    scopeId: scopeId
                hasTrialAvailable: true
                remoteCaching:
                  enabled: true
                dataCache:
                  excessBillingEnabled: true
                featureBlocks:
                  webAnalytics:
                    isCurrentlyBlocked: true
                northstarMigration:
                  teamId: teamId
                  projects: 1.1
                  stores: 1.1
                  integrationConfigurations: 1.1
                  integrationClients: 1.1
                  startTime: 1.1
                  endTime: 1.1
                id: AEIIDYVk59zbFF2Sxfyxxmua
                email: me@example.com
                name: John Doe
                username: jdoe
                avatar: 22cb30c85ff45ac4c72de8981500006b28114aa1
                defaultTeamId: defaultTeamId
                version: northstar
    requestDelete:
      path: /v1/user
      method: DELETE
      auth: true
      docs: >-
        Initiates the deletion process for the currently authenticated User, by
        sending a deletion confirmation email. The email contains a link that
        the user needs to visit in order to proceed with the deletion process.
      display-name: Delete User Account
      request:
        name: RequestDeleteRequest
        body:
          properties:
            reasons:
              type: optional<list<RequestDeleteRequestReasonsItem>>
              docs: >-
                Optional array of objects that describe the reason why the User
                account is being deleted.
      response:
        docs: >-
          Response indicating that the User deletion process has been initiated,
          and a confirmation email has been sent.
        type: RequestDeleteResponse
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
        - root.ForbiddenError
      examples:
        - request: {}
          response:
            body:
              id: id
              email: email
              message: Verification email sent
  source:
    openapi: openapi.json
