docs: CRUD API for managing the generator entity itself.

imports:
  commons: ./commons.yml

types:
  GetGeneratorByImageRequest:
    properties:
      dockerImage: string

  GeneratorId:
    type: string
    docs: The type of the generator, e.g. fern-python-sdk

  SdkGenerator:
    properties: {}

  ModelGenerator:
    properties: {}

  ServerGenerator:
    properties: {}

  OtherGenerator:
    properties: {}

  # Generator type is a union of the different types of generators in order to
  # add more type-specific fields down the line.
  GeneratorType:
    union:
      sdk: SdkGenerator
      model: ModelGenerator
      server: ServerGenerator
      other: OtherGenerator

  GeneratorLanguage:
    enum:
      - python
      - go
      - java
      - typescript
      - ruby
      - csharp
      - php
      - swift
      - rust

  Script:
    properties:
      steps:
        type: list<string>
        docs: Each line of the script should be an entry within the list. These steps should be assumed to run via bash/command line.

  # These scripts might be over specifiying, but also sets us up in a decent position to centralize information to generate CI actions files when the time comes
  GeneratorScripts:
    properties:
      preInstallScript:
        type: optional<Script>
        docs: The steps necessary to prepare the environment to run any of the scripts below, for example installing yarn itself.
      installScript:
        type: optional<Script>
        docs: The steps necessary for installing the generated resource, if any (ex - `yarn install`).
      compileScript:
        type: optional<Script>
        docs: The steps for building the generated resource.
      testScript:
        type: optional<Script>
        docs: The steps for running tests for the generated resource.

  Generator:
    properties:
      id: GeneratorId
      displayName: string
      generatorType: GeneratorType
      generatorLanguage: optional<GeneratorLanguage>
      dockerImage:
        type: string
        docs: The name of the docker image to pull to run this generator.
      scripts: optional<GeneratorScripts>

service:
  audiences:
    - generators
  auth: false
  base-path: /generators
  endpoints:
    upsertGenerator:
      auth: true
      docs: Update or create the specified generator.
      method: PUT
      path: ""
      request: Generator

    getGeneratorByImage:
      docs: Get the generator corresponding to the given docker image.
      method: POST
      path: /by-image
      request: GetGeneratorByImageRequest
      response: optional<Generator>

    getGenerator:
      docs: Get the specified generator.
      method: GET
      path: /{generatorId}
      path-parameters:
        generatorId: GeneratorId
      response: optional<Generator>

    listGenerators:
      docs: Get the all generators. This is currently not paginated since the list will be short, but there may in the future be need for pagination.
      method: GET
      path: ""
      response: list<Generator>
