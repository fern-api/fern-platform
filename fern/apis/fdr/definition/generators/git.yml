# yaml-language-server: $schema=https://raw.githubusercontent.com/fern-api/fern/main/fern.schema.json

docs: Produces an internal schema to easily track and view pull requests across Fern-managed repositories. This API is named `git` to allow for flexibility in adding other git providers down the line (e.g. gitlab).

imports:
  commons: ./commons.yml

types:
  # Soon to add to our data model:
  #   - Orgs (internal)
  #   - Products (internal)
  #   - Features (internal)
  RepositoryId: string

  Repository:
    properties:
      id: RepositoryId
      name: string
      owner: string
      fullName:
        type: string
        docs: The full name of the repository, e.g. fern-api/fern. It includes the owner, as well as the name of the repository.
      url: string
      repositoryOwner:
        type: commons.OrganizationId
        docs: The Fern organization ID of the repository owner.

  GithubUser:
    properties:
      name: string
      email: string
      username: string

  GithubTeam:
    properties:
      name: string
      teamId: string

  PullRequestReviewer:
    union:
      user: GithubUser
      team: GithubTeam

  PullRequestState:
    enum:
      - open
      - closed
      # Technically Github's API only returns open or closed, and merged_at indicates the merge, but we'll add it here for querying convenience.
      - merged

  PullRequest:
    properties:
      id: string
      repositoryId: RepositoryId
      author: GithubUser
      reviewers: list<string>
      title: string
      link: string
      checks: list<string>
      state: PullRequestState
      createdAt: datetime
      updatedAt: optional<datetime>
      mergedAt: optional<datetime>
      closedAt: optional<datetime>

  OrganizationRepositoryMap:
    docs: A mapping of organization ID to the repositories that Fern manages for that organization.
    properties:
      organizationId: commons.OrganizationId
      repositoryIds: list<RepositoryId>

  ListRepositoriesResponse:
    properties:
      repositories: list<Repository>

  ListPullRequestsResponse:
    properties:
      pullRequests: list<PullRequest>

  ListOrganizationRepositoryMapsResponse:
    properties:
      maps: list<OrganizationRepositoryMap>

service:
  audiences:
    - generators
  base-path: /generators/github
  auth: true
  endpoints:
    getRepository:
      docs: Get a repository by its ID.
      method: GET
      path: /repository/{id}
      path-parameters:
        id: RepositoryId
      response: Repository

    listRepositories:
      docs: Get all repositories.
      method: GET
      path: "/repository"
      pagination:
        offset: $request.page
        results: $response.repositories
      request:
        name: ListRepositoriesRequest
        query-parameters:
          page:
            type: optional<integer>
            docs: The page integer to retrieve. Defaults to 0.
          pageSize:
            type: optional<integer>
            docs: The integer of items to retrieve per page. Defaults to 20.
      response: ListRepositoriesResponse

    upsertRepository:
      docs: Update or create the specified repository.
      method: PUT
      path: /repository
      request: Repository

    getPullRequest:
      docs: Get a pull request by its ID.
      method: GET
      path: /pull-request/{id}
      path-parameters:
        id: string
      response: PullRequest

    listPullRequests:
      docs: Get all pull requests.
      method: GET
      path: "/pull-request"
      pagination:
        offset: $request.page
        results: $response.pullRequests
      request:
        name: ListPullRequestsRequest
        query-parameters:
          page:
            type: optional<integer>
            docs: The page integer to retrieve. Defaults to 0.
          pageSize:
            type: optional<integer>
            docs: The integer of items to retrieve per page. Defaults to 20.
      response: ListPullRequestsResponse

    upsertPullRequest:
      docs: Update or create the specified pull request.
      method: PUT
      path: /pull-request
      request: PullRequest

    deletePullRequest:
      docs: Delete specified pull request.
      method: DELETE
      path: /pull-request/{id}
      path-parameters:
        id: string

    getOrganizationRepositoryMap:
      docs: Get the repositories owned by a particular organization.
      method: GET
      path: /repository-owners/{organizationId}
      path-parameters:
        organizationId: string
      response: OrganizationRepositoryMap

    listOrganizationRepositoryMaps:
      docs: Get all repository/owner mappings.
      method: GET
      path: "/repository-owners"
      pagination:
        offset: $request.page
        results: $response.maps
      request:
        name: ListOrganizationRepositoryMapsRequest
        query-parameters:
          page:
            type: optional<integer>
            docs: The page integer to retrieve. Defaults to 0.
          pageSize:
            type: optional<integer>
            docs: The integer of items to retrieve per page. Defaults to 20.
      response: ListOrganizationRepositoryMapsResponse

errors:
  PullRequestNotFoundError:
    status-code: 404
    type: commons.InvalidVersionErrorMessage

  RepositoryNotFoundError:
    status-code: 404
    type: commons.InvalidVersionErrorMessage
