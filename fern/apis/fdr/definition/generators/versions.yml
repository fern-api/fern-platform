# yaml-language-server: $schema=https://raw.githubusercontent.com/fern-api/fern/main/fern.schema.json

docs: CRUD API for managing generator versions.

imports:
  commons: ./commons.yml
  root: ./__package__.yml

types:
  GeneratorReleaseRequest:
    extends: commons.ReleaseRequest
    properties:
      generator_id: root.GeneratorId
      ir_version: string
      migration:
        type: optional<string>
        docs: The TypeScript file for the migration to run when upgrading to this version.
      custom_config_schema:
        type: optional<string>
        docs: The JSON schema (stringified) for the custom config that this generator version supports.

  GeneratorRelease:
    extends: commons.Release
    properties:
      generator_id: root.GeneratorId
      ir_version: string
      migration:
        type: optional<string>
        docs: The TypeScript file for the migration to run when upgrading to this version.
      custom_config_schema:
        type: optional<string>
        docs: The JSON schema (stringified) for the custom config that this generator version supports.

service:
  audiences:
    - generators
  base-path: /generators/versions
  auth: true
  endpoints:
    getLatestGeneratorVersion:
      docs: Get the latest generator version that has not been yanked.
      method: POST
      path: /latest
      request:
        name: GetLatestGeneratorVersionRequest
        body:
          properties:
            type: string
            retain_major_version:
              type: optional<string>
              docs: |
                Whether or not to include major versions when searching for the latest version. If specified, we will only return the latest version
                that is the same major version as provided. Useful while we do not support config migrations, etc.
            release_type:
              type: optional<commons.ReleaseType>
              docs: A filter for the release type, specifically if you'd like to get RC releases only, etc.
      response: GeneratorRelease

    getChangelog:
      docs: Get the changelog for the specified generator upgrade.
      method: GET
      path: /{generator}/changelog/{from_version}/to/{to_version}
      path-parameters:
        generator: root.GeneratorId
        from_version: string
        to_version: string
      response: list<commons.ChangelogEntry>

    upsertGeneratorRelease:
      docs: Update or create the specified generator version.
      method: PUT
      path: ""
      request: GeneratorReleaseRequest

    getGeneratorRelease:
      docs: Get the specified generator version.
      method: GET
      path: /{generator}/{version}
      path-parameters:
        generator: root.GeneratorId
        version: string
      response: GeneratorRelease

    getAllGeneratorReleases:
      docs: Get all generator versions for the specified generator.
      method: GET
      path: /{generator}
      path-parameters:
        generator: root.GeneratorId
      response: list<GeneratorRelease>
