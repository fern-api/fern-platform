# yaml-language-server: $schema=https://raw.githubusercontent.com/fern-api/fern/main/fern.schema.json

imports:
  commons: commons.yml

service:
  auth: true
  base-path: /snippets
  endpoints:
    get:
      path: ""
      docs: Get snippet by endpoint method and path
      display-name: Get snippet for endpoint
      availability: pre-release
      audiences:
        - external
        - fiddle
      method: POST
      request:
        name: GetSnippetRequest
        body:
          properties:
            orgId:
              type: optional<commons.OrgId>
              docs: |
                If the same API is defined across multiple organization,
                you must specify an organization ID.
            apiId:
              type: optional<commons.ApiId>
              docs: |
                If you have more than one API, you must specify its ID.
            sdks:
              type: optional<list<SDKRequest>>
              docs: |
                The SDKs for which to load snippets. If unspecified,
                snippets for the latest published SDKs will be returned.
            endpoint: commons.EndpointIdentifier
            # TODO: Nice to have, allow client variable name to be configurable
            # clientName:
            #   type: optional<string>
            #   docs: |
            #     The name of the client to be used in the snippet. If not specified then the default client name (the API name) will be used.
            payload:
              type: optional<CustomSnippetPayload>
              docs: |
                The JSON payload to be used as the input for the code snippet. This should just be thought of as the
                request body you'd be sending to the endpoint as a cURL. If not specified then the default payload will be used.

      response: list<Snippet>
      errors:
        - commons.UnauthorizedError
        - commons.UserNotInOrgError
        - commons.UnavailableError
        - ApiIdRequiredError
        - OrgIdRequiredError
        - OrgIdAndApiIdNotFound
        - OrgIdNotFound
        - EndpointNotFound
        - SDKNotFound
      examples:
        - request:
            endpoint:
              method: GET
              path: /v1/search
          response:
            body:
              - type: python
                sdk:
                  package: vellum-ai
                  version: 1.2.1
                sync_client: |
                  import Vellum from vellum.client

                  client = Vellum(api_key="YOUR_API_KEY")
                  client.search(query="Find documents written in the last 5 days")
                async_client: |
                  import VellumAsync from vellum.client

                  client = VellumAsync(api_key="YOUR_API_KEY")
                  await client.search(query="Find documents written in the last 5 days")
              - type: typescript
                sdk:
                  package: vellum-ai
                  version: 1.2.1
                client: |
                  import { VellumClient } from "vellum-ai";

                  const vellum = VellumClient({
                    apiKey="YOUR_API_KEY"
                  })
                  vellum.search({
                    query: "Find documents written in the last 5 days"
                  })

    load:
      path: /load
      display-name: Load all snippets
      method: POST
      availability: pre-release
      audiences:
        - external
        - fiddle
      request:
        name: ListSnippetsRequest
        query-parameters:
          page: optional<integer>
        body:
          properties:
            orgId:
              type: optional<commons.OrgId>
              docs: |
                If the same API is defined across multiple organization,
                you must specify an organization ID.
            apiId:
              type: optional<commons.ApiId>
              docs: |
                If you have more than one API, you must specify its ID.
            sdks:
              type: optional<list<SDKRequest>>
              docs: |
                The SDKs for which to load snippets. If unspecified,
                snippets for the latest published SDKs will be returned.
      response: SnippetsPage
      errors:
        - commons.UnauthorizedError
        - commons.UserNotInOrgError
        - commons.UnavailableError
        - InvalidPageError
        - ApiIdRequiredError
        - OrgIdRequiredError
        - OrgIdAndApiIdNotFound
        - OrgIdNotFound
        - SDKNotFound
      examples:
        - query-parameters:
            page: 1
          request:
            orgId: vellum
            apiId: vellum-ai
            sdks:
              - type: python
                package: vellum-ai
                # version: 1.2.1
          response:
            body:
              next: 2
              snippets:
                /v1/search:
                  GET:
                    - type: python
                      sdk:
                        package: vellum-ai
                        version: 1.2.1
                      sync_client: |
                        import Vellum from vellum.client

                        client = Vellum(api_key="YOUR_API_KEY")
                        client.search(query="Find documents written in the last 5 days")
                      async_client: |
                        import Vellum from vellum.client

                        client = Vellum(api_key="YOUR_API_KEY")
                        client.search(query="Find documents written in the last 5 days")
                    - type: typescript
                      sdk:
                        package: vellum-ai
                        version: 1.2.1
                      client: |
                        import { VellumClient } from "vellum-ai";

                        const vellum = VellumClient({
                          apiKey="YOUR_API_KEY"
                        })
                        vellum.search({
                          query: "Find documents written in the last 5 days"
                        })
                v1/document-indexes:
                  POST:
                    - type: python
                      sdk:
                        package: vellum-ai
                        version: 1.2.1
                      sync_client: |
                        import Vellum from vellum.client

                        client = Vellum(api_key="YOUR_API_KEY")
                        client.document_indexes.create(name="meeting-reports", status="ACTIVE")
                      async_client: |
                        import VellumAsync from vellum.client

                        client = VellumAsync(api_key="YOUR_API_KEY")
                        await client.document_indexes.create(name="meeting-reports", status="ACTIVE")
                    - type: typescript
                      sdk:
                        package: vellum-ai
                        version: 1.2.1
                      client: |
                        import { VellumClient } from "vellum-ai";

                        const vellum = VellumClient({
                          apiKey="YOUR_API_KEY"
                        })
                        vellum.documentIndexes.create({
                          name: "meeting-reports",
                          status: "ACTIVE"
                        })

types:
  SDKRequest:
    union:
      typescript: TypeScriptSDKRequest
      python: PythonSDKRequest
      go: GoSDKRequest
      ruby: RubySDKRequest
      java: JavaSDKRequest

  TypeScriptSDKRequest:
    properties:
      package: string
      version: optional<string>

  PythonSDKRequest:
    properties:
      package: string
      version: optional<string>

  GoSDKRequest:
    properties:
      githubRepo: string
      version: optional<string>

  RubySDKRequest:
    properties:
      gem: string
      version: optional<string>

  JavaSDKRequest:
    properties:
      group:
        type: string
        docs: The maven repository group (e.g. `com.stripe.java`)
      artifact:
        type: string
        docs: The artifact (e.g. `stripe-java`)
      version: optional<string>

  SDK:
    union:
      typescript: TypeScriptSDK
      python: PythonSDK
      go: GoSDK
      ruby: RubySDK
      java: JavaSDK

  TypeScriptSDK:
    properties:
      package: string
      version: string

  PythonSDK:
    properties:
      package: string
      version: string

  GoSDK:
    properties:
      githubRepo: string
      version: string

  RubySDK:
    properties:
      gem: string
      version: string

  JavaSDK:
    properties:
      group:
        type: string
        docs: The maven repository group (e.g. `com.stripe.java`)
      artifact:
        type: string
        docs: The artifact (e.g. `stripe-java`)
      version: string

  ####### Load Snippets #######

  ### Load Snippets Custom Payload ###
  ParameterPayload:
    properties:
      name: string
      value: unknown
  CustomSnippetPayload:
    properties:
      headers: optional<list<ParameterPayload>>
      pathParameters: optional<list<ParameterPayload>>
      queryParameters: optional<list<ParameterPayload>>
      requestBody: optional<unknown>

  SnippetsPage:
    properties:
      next:
        type: optional<integer>
        docs: If present, pass this into the `page` query parameter to load the next page.
      snippets:
        type: map<commons.EndpointPath, SnippetsByEndpointMethod>
        docs: |
          The snippets are returned as a map of endpoint path (e.g. `/api/users`) 
          to a map of endpoint method (e.g. `POST`) to snippets.

  SnippetsByEndpointMethod:
    type: map<commons.EndpointMethod, list<Snippet>>

  Snippet:
    union:
      typescript: TypeScriptSnippet
      python: PythonSnippet
      java: JavaSnippet
      go: GoSnippet
      ruby: RubySnippet

  TypeScriptSnippet:
    properties:
      sdk: TypeScriptSDK
      client: string

  PythonSnippet:
    properties:
      sdk: PythonSDK
      async_client: string
      sync_client: string

  GoSnippet:
    properties:
      sdk: GoSDK
      client: string

  RubySnippet:
    properties:
      sdk: RubySDK
      client: string

  JavaSnippet:
    properties:
      sdk: JavaSDK
      async_client: string
      sync_client: string

errors:
  ApiIdRequiredError:
    status-code: 400
    docs: "An ApiId is required"
    type: string

  OrgIdRequiredError:
    status-code: 400
    docs: "An OrgId is required"
    type: string

  SnippetTemplateNotFoundError:
    status-code: 404
    docs: "A template for this snippet could not be found"
    type: string

  InvalidPageError:
    status-code: 400
    docs: "Page must be >=1"
    type: string

  OrgIdAndApiIdNotFound:
    status-code: 404
    docs: The requested OrgId and ApiId was not found
    type: string

  EndpointNotFound:
    status-code: 404
    docs: The requested endpoint was not found
    type: string

  OrgIdNotFound:
    status-code: 404
    docs: The requested OrgId was not found
    type: string

  SDKNotFound:
    status-code: 404
    docs: The requested SDK was not found
    type: string
