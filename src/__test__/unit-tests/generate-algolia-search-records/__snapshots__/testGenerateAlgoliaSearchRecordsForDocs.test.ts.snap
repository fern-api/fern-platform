// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`generateAlgoliaSearchRecordsForDocs {"name":"primer"} 1`] = `
Array [
  Object {
    "path": "v2.2/introduction/getting-started",
    "subtitle": "The Primer API is used to manage Client Sessions, Payments and saved payment methods. All other actions are either managed in the
Universal Checkout implementation or in the Dashboard.

Check out:

 * Client Sessions [https://primer.io/docs/payments/universal-checkout/manage-client-sessions]
 * Universal Checkout [https://primer.io/docs/accept-payments/setup-universal-checkout/installation/web]
 * Managing Payments [https://primer.io/docs/accept-payments/manage-payments]

Test the APIs yourself in our API Reference. Don't hesitate to reach out with any questions or feedback. You can email Primer
directly at support@primer.io [support@primer.io], or contact your Primer account manager.


API ENDPOINT DEPLOYMENTS

 * Sandbox: https://api.sandbox.primer.io [https://api.sandbox.primer.io]
 * Production: https://api.primer.io [https://api.primer.io]


API VERSIONS

Primer makes updates to the APIs on a regular basis, as we release new features. To allow you to update your integration as you
are ready, we allow for a X-Api-Version header to be passed on all API requests.

If you omit the version header, your request will default to the earliest supported version of the API.

curl -X POST 'https://api.primer.io/<ENDPOINT>' \\\\
  --header 'X-Api-Version: 2.2'



AVAILABLE VERSIONS

Read about the available versions of the APIs below on our Changelog [https://apiref.primer.io/changelog].",
    "title": "Getting Started",
    "type": "page",
  },
  Object {
    "path": "v2.2/introduction/authentication",
    "subtitle": "Primer uses API keys to authenticate requests. You can manage API keys in the Developers
[https://sandbox-dashboard.primer.io/developers] area of the dashboard.

As API keys carry many privileges such as authorizing payments, it is important to keep them private and secure. Do not hardcode
or share API keys (particularly in your source version control system), and they should only be used in your backend.

Authentication is handled via HTTP headers, specifically the X-Api-Key header.

curl -X POST 'https://api.primer.io/<ENDPOINT>' \\\\
  --header 'X-Api-Key: <YOUR_API_KEY>'



MANAGING API KEYS

Head up to the Developers area [https://sandbox-dashboard.primer.io/developers] on the dashboard to manage your API keys.

You will be able to generate or revoke API keys and edit their respective scopes. Be aware that any changes to existing API keys
will be reflected immediately and could cause unwanted side effects.


AVAILABLE SCOPES

Scope Description client_tokens:write Create client tokens for use with the client SDK. third_party:webhook_trigger Allows you to
post to our webhooks endpoint. API keys with this scope can be used to enable communication between your processor and Primer
about important payment lifecycle events. transactions:authorize Authorize a payment transactions:cancel Cancel a payment.
transactions:capture Submit a payment for settlement. transactions:retrieve Retrieve one or more payments. transactions:refund
Refund a payment. payment_instrument:read Read stored payment methods. payment_instrument:write Write stored payment methods.",
    "title": "Authentication",
    "type": "page",
  },
  Object {
    "path": "v2.2/introduction/api-responses",
    "subtitle": "STATUS CODES

The following table summarizes the HTTP response codes you may receive from the Primer REST API.

Status Code Description 200 Success 400 Bad Request 401 Unauthorized 403 Forbidden 404 Entity Not Found 409 Entity Already Exists
422 Input Validation Failed


ERROR RESPONSES

Primer uses conventional HTTP response codes to indicate the success or failure of an API request. HTTP codes in the 2XX range
indicate a successful request, whereas codes in the 4XX range indicate a failed request usually due to invalid inputs or
operations.

The format of the payload for all errors is common. When an unsuccessful request occurs, you will receive a payload in the
following format:

{
  \\"error\\": {
    \\"errorId\\": \\"AnErrorId\\",
    \\"description\\": \\"A human description of the error.\\",
    \\"diagnosticsId\\": \\"1234567890\\",
    \\"validationErrors\\": []
  }
}


All error payloads will be comprised of a unique errorId which you can use to identify the error, a human description description,
and a diagnosticsId that you can quote when contacting the support team (support@primer.io [support@primer.io]). In case of a
badly formed request, Primer will also return additional validationErrors.


PAYMENT STATUS

As the payments are created, processed, and finalised, they go through a number of states that you will get as an API response,
through webhook notifications, and in the Dashboard. These states are used across all processors, as processor specific states are
mapped to these. An additional message, in the field processorMessage, from the processor may also be included that details the
reason for the state, primarily on failure states.

Status Description PENDING The payment has been created by Primer but not yet authorized. FAILED The processor failed to process
this payment. AUTHORIZED The payment is authorized and awaiting capture. SETTLING The payment has been submitted for settlement
and funds will be settled later. PARTIALLY_SETTLED The payment has been partially settled. SETTLED Funds have been settled into
your account. DECLINED This payment was declined by the processor, either at a gateway or acquirer level. See the reason object in
your response payload for more details. CANCELLED The payment was cancelled prior to it being settled.

Don't hesitate to reach out with any questions or feedback. You can email Primer directly at support@primer.io
[support@primer.io], or contact your Primer account manager.",
    "title": "API Responses",
    "type": "page",
  },
  Object {
    "path": "v2.2/introduction/idempotency-key",
    "subtitle": "Primer supports a request idempotency mechanism for our Payments API. This optional feature enables you to safely retry a request
without risking the user being charged or refunded multiple times.

This is particularly useful when an API call fails due to the request being invalid, due to a network issue, or if Primer is
momentarily unavailable.

If this is the case, make another request with the same idempotency key:

 * If a request with the same idempotency key has already been successfully processed by Primer, the new request will be ignored.
   A 400 error will be returned with an errorId set to TransactionRequestIdempotencyKeyAlreadyExists.
 * Otherwise, Primer will attempt to process the new request.

To make an idempotent request, generate an idempotency key and pass it to the header X-Idempotency-Key.

curl -X POST 'https://api.primer.io/<ENDPOINT>' \\\\
  --header 'X-Idempotency-Key: <idempotency-key>'


The way you generate the key is totally up to you, as long as it is unique per request attempt.

Keep in mind that a payment request resulting in a declined or failed payment is still considered Successfully processed for the
API. Therefore, if you want to allow the user to retry an unsuccessful payment, make sure to not use the same idempotency key.

As a such, don't use anything too restrictive like an orderId for the idempotency key as multiple payment attempts and refunds can
be made for a single order.",
    "title": "Idempotency Key",
    "type": "page",
  },
  Object {
    "path": "v2.2/introduction/loyalty-transactions",
    "subtitle": "Primer's Loyalty API provides an interface to interact with 3rd party loyalty point and service providers.

All of the endpoints below reference a connectionId. This is the unique Primer identifier for your loyalty provider connection.
Primer will provide this once the loyalty provider connection is created.

To identify the customer in the context of the loyalty provider, a customerId is also necessary.


GET THE CUSTOMER BALANCE

Call the Loyalty Customers [https://apiref.primer.io/reference/get_loyalty_customer] endpoint, which includes the customer's
balance. In future this object could contain further details.


REDEEM POINTS

Call the Loyalty Transactions [https://apiref.primer.io/reference/post_loyalty_transaction] endpoint to create a REDEMPTION
transaction.

Provide an orderId to link multiple transactions together.


REFUND POINTS

Call the Loyalty Transactions [https://apiref.primer.io/reference/post_loyalty_transaction] endpoint to create a REFUND
transaction. This transaction is completely independent from a redeem transaction.

Provide an orderId to link multiple transactions together.


GET A LIST OF TRANSACTIONS

Call the Loyalty Transactions [https://apiref.primer.io/reference/get_loyalty_transaction] endpoint to retrieve a list of all your
transactions. In most cases it makes sense to filter by connectionId. You can also filter by customerId or orderId.",
    "title": "Loyalty Transactions",
    "type": "page",
  },
  Object {
    "path": "v2.2/changelog/api-migration-guide",
    "subtitle": "We are continually introducing new functionality to the Primer Ecosystem, some of which requires additional inputs on our APIs. To
make sure these changes donâ€™t break any existing integrations, we roll them out safely using API Versions.


MIGRATING TO V2.1

The latest version of our APIs focus on capturing more details to enable a richer checkout experience. Some of these details are
required to allow configuration of the checkout via the Primer Dashboard. Also some of these details are needed to work with
advanced Payment Processors or Payment Methods.

The examples below only illustrate how to transition between the two versions of the endpoints, however you should read the latest
API Reference linked above for details on the usage of the endpoints. Also read how to introduce API Versioning into your requests
in the latest API Reference linked above.


CLIENT SESSION

This is an example of a request in v1: POST /auth/client-token.

{
  \\"customerCountryCode\\": \\"GB\\",
  \\"customerId\\": \\"customer-123\\",
  \\"checkout\\": {
    \\"paymentFlow\\": \\"DEFAULT\\"
  }
}


This is an example of a equivalent request in v2: POST /client-session with X-Api-Version=\\"2021-09-27\\".

{
  \\"customerId\\": \\"customer-123\\",
  \\"customer\\": {
    \\"emailAddress\\": \\"customer@primer.io\\",
    \\"mobileNumber\\": \\"+44841234567\\",
    \\"firstName\\": \\"John\\",
    \\"lastName\\": \\"Doe\\",
    \\"billingAddress\\": {
      \\"addressLine1\\": \\"42A\\",
      \\"postalCode\\": \\"abcde\\",
      \\"city\\": \\"Cambridge\\",
      \\"state\\": \\"Cambridgeshire\\",
      \\"countryCode\\": \\"GB\\"
    },
    \\"shippingAddress\\": {
      \\"addressLine1\\": \\"42A\\",
      \\"postalCode\\": \\"abcde\\",
      \\"city\\": \\"Cambridge\\",
      \\"state\\": \\"Cambridgeshire\\",
      \\"countryCode\\": \\"GB\\"
    }
  },
  \\"order\\": {
    \\"lineItems\\": [
      {
        \\"itemId\\": \\"item-1\\",
        \\"description\\": \\"My item\\",
        \\"amount\\": 1337,
        \\"quantity\\": 1
      }
    ],
    \\"countryCode\\": \\"GB\\"
  },
  \\"currencyCode\\": \\"GBP\\",
  \\"orderId\\": \\"order-123\\",
  \\"metadata\\": {
    \\"productType\\": \\"Merchandise\\"
  },
  \\"paymentMethod\\": {
    \\"vaultOnSuccess\\": true
  }
}



V2.1

This is an example of a equivalent request in v2.1: POST /client-session with X-Api-Version=\\"2.1\\".

{
  \\"customerId\\": \\"customer-123\\",
  \\"customer\\": {
    \\"emailAddress\\": \\"customer@primer.io\\",
    \\"mobileNumber\\": \\"+44841234567\\",
    \\"firstName\\": \\"John\\",
    \\"lastName\\": \\"Doe\\",
    \\"billingAddress\\": {
      \\"addressLine1\\": \\"42A\\",
      \\"postalCode\\": \\"abcde\\",
      \\"city\\": \\"Cambridge\\",
      \\"state\\": \\"Cambridgeshire\\",
      \\"countryCode\\": \\"GB\\"
    },
    \\"shippingAddress\\": {
      \\"addressLine1\\": \\"42A\\",
      \\"postalCode\\": \\"abcde\\",
      \\"city\\": \\"Cambridge\\",
      \\"state\\": \\"Cambridgeshire\\",
      \\"countryCode\\": \\"GB\\"
    }
  },
  \\"lineItems\\": [
    {
      \\"itemId\\": \\"item-1\\",
      \\"description\\": \\"My item\\",
      \\"amount\\": 1337,
      \\"quantity\\": 1
    }
  ],
  \\"orderDetails\\": {
    \\"countryCode\\": \\"GB\\"
  },
  \\"currencyCode\\": \\"GBP\\",
  \\"orderId\\": \\"order-123\\",
  \\"metadata\\": {
    \\"productType\\": \\"Merchandise\\"
  },
  \\"paymentMethod\\": {
    \\"vaultOnSuccess\\": true
  }
}



SUMMARY OF THE V2.1 CHANGES

 * order is now called orderDetails
 * lineItems is now a top-level element
 * amount has been removed. You should always specify lineItems and we would dynamically calculate the amount. See our API
   Reference [https://apiref.primer.io/reference] for how we calculate the amount.


CREATE A PAYMENT

This is an example of an equivalent request: POST /payments with X-Api-Version=\\"2021-09-27\\".

POST /payments

{
  \\"orderId\\": \\"order-123\\",
  \\"currencyCode\\": \\"GBP\\",
  \\"amount\\": 1337,
  \\"paymentInstrument\\": {
    \\"token\\": \\"{{payment_method_token}}\\" // As received from the SDK
  },
  \\"statementDescriptor\\": \\"Test payment\\",
  \\"customer\\": {
    \\"email\\": \\"customer@primer.io\\",
    \\"billingAddress\\": {
      \\"addressLine1\\": \\"42A\\",
      \\"postalCode\\": \\"abcde\\",
      \\"city\\": \\"Cambridge\\",
      \\"state\\": \\"Cambridgeshire\\",
      \\"countryCode\\": \\"GB\\"
    }
  }
}


This is an example of an equivalent request in v2: POST /payments with X-Api-Version=\\"2021-09-27\\".

{
  \\"orderId\\": \\"order-123\\",
  \\"amount\\": 1000,
  \\"currencyCode\\": \\"GBP\\",
  \\"customer\\": {
    \\"email\\": \\"customer@primer.io\\",
    \\"billingAddress\\": {
      \\"addressLine1\\": \\"42A\\",
      \\"postalCode\\": \\"abcde\\",
      \\"city\\": \\"Cambridge\\",
      \\"state\\": \\"Cambridgeshire\\",
      \\"countryCode\\": \\"GB\\"
    }
  },
  \\"metadata\\": {
    \\"productType\\": \\"Merchandise\\"
  },
  \\"paymentMethodToken\\": \\"{{payment_method_token}}\\", // As received from the SDK
  \\"paymentMethod\\": {
    \\"descriptor\\": \\"Test payment\\",
    \\"paymentType\\": \\"FIRST_PAYMENT\\"
  }
}


This is an example of an equivalent request in v2.1: POST /payments with X-Api-Version=\\"2.1\\"

{
  \\"paymentMethodToken\\": \\"{{payment_method_token}}\\" // As received from the SDK
}


OR

{
  \\"orderId\\": \\"order-123\\",
  \\"amount\\": 1337,
  \\"currencyCode\\": \\"GBP\\",
  \\"customer\\": {
    \\"email\\": \\"customer@primer.io\\",
    \\"billingAddress\\": {
      \\"addressLine1\\": \\"42A\\",
      \\"postalCode\\": \\"abcde\\",
      \\"city\\": \\"Cambridge\\",
      \\"state\\": \\"Cambridgeshire\\",
      \\"countryCode\\": \\"GB\\"
    }
  },
  \\"lineItems\\": [
    {
      \\"itemId\\": \\"item-1\\",
      \\"description\\": \\"My item\\",
      \\"amount\\": 1337,
      \\"quantity\\": 1
    }
  ],
  \\"orderDetails\\": {
    \\"countryCode\\": \\"GB\\"
  },
  \\"metadata\\": {
    \\"productType\\": \\"Merchandise\\"
  },
  \\"paymentMethodToken\\": \\"{{payment_method_token}}\\", // As received from the SDK
  \\"paymentMethod\\": {
    \\"descriptor\\": \\"Test payment\\",
    \\"paymentType\\": \\"FIRST_PAYMENT\\"
  }
}



SUMMARY OF THE V2.1 CHANGES

 * order is now called orderDetails
 * lineItems is now a top-level element",
    "title": "API Migration Guide",
    "type": "page",
  },
  Object {
    "path": "v2.2/changelog/api-v-2-2",
    "subtitle": "This version includes improvements to the Client Session API, Payments API and the Payment Methods API. You must set the
X-Api-Version header to 2.2 to use v2.2 of the API.


CLIENT SESSION API

 * Added order.lineItems.productData on the request and response


PAYMENTS API

 * Added order.lineItems.productData on the request and response",
    "title": "API v2.2",
    "type": "page",
  },
  Object {
    "path": "v2.2/changelog/api-v-2-1",
    "subtitle": "Version 2.1 includes improvements to the Client Session API, Payments API and the Payment Methods API.

Starting API v2.1, the API Version X-Api-Version is a semantic version without a patch (e.g. 2.1) rather than a date ðŸŽ‰ Set the
X-Api-Version header to 2.1 to use v2.1 of the API.


CLIENT SESSION API

 * Added paymentMethod.paymentType and paymentMethod.descriptor on the request and response of the client session
 * Added order.lineItems[].productType on the request and response of the client session
 * Added GET /client-session to get the content of a client session
 * Added PATCH /client-session to update the content of a client session
 * Additional validation has been put in place to ensure that a currencyCode is always passed if any amount value is passed


PAYMENTS API

 * Added paymentMethod.isVaulted boolean field to indicate whether the paymentMethod.paymentMethodToken in the response is a
   vaulted token (and can therefore be used for future payments) or not. This replaces vaultedPaymentMethodToken.
 * Added order.lineItems[].productType on the request and response
 * amount, currencyCode, customerId and orderId are now required fields when making a payment with a vaulted token (i.e. a
   recurring payment).
 * When paying with a vaulted token, additional validation has been put in place to ensure the customerId matches the customerId
   associated with the vaulted token.


PAYMENT METHODS API

 * Added verify in POST /payment-instruments/{paymentMethodToken}/vault to set whether or not the payment method token should be
   verified before vaulting
 * Added isVerified to the payment method response",
    "title": "API v2.1",
    "type": "page",
  },
  Object {
    "path": "v2.2/changelog/api-v-2",
    "subtitle": "Version 2 includes improvements to the Client Session API and the Payments API.


CLIENT SESSION API

 * X-API-Version -> 2021-09-27
 * Creating a payment using only a payment method token is now possible. The order, customer and metadata passed on the Client
   Session request is then used for the payment.
 * The create Client Session endpoint request was extended to include order, customer, etc.
 * All references to paymentInstrument from the previous Payments API version have been refactored to paymentMethod to be more
   consistent throughout
 * The customer billingAddress and shippingAddress fields are now all optional


PAYMENTS API

 * X-API-Version -> 2021-09-27
 * Creating a payment using only a payment method token is now possible. The order, customer and metadata passed on the Client
   Session request is then used for the payment.
 * The create payment endpoint request was extended to include order, customer, etc. It now more closely resembles the
   /client-session endpoint
 * The response of all the Payments API endpoints was refactored to match the create payment request structure
 * All references to paymentInstrument from the previous Payments API version have been refactored to paymentMethod to be more
   consistent throughout
 * All the payments API endpoints (create, capture, cancel, refund, etc.) are now versioned
 * paymentMethodData in PaymentMethod responses (for card payment method types) all now contain a first6digits field in addition
   to the last4digits returned. This is an opt-in field, so it is null by default.
 * The customer billingAddress and shippingAddress fields are now all optional",
    "title": "API v2",
    "type": "page",
  },
  Object {
    "path": "v2.2/primer-api/client-session-api/retrieve-a-client-session",
    "subtitle": "This API call retrieves all the details associated with the client session corresponding to the client token that is provided in
the request. The fields with empty values are excluded from the response.",
    "title": "Retrieve a client session",
    "type": "endpoint",
  },
  Object {
    "path": "v2.2/primer-api/client-session-api/create-a-client-session",
    "subtitle": "Creating a client session generates a client token: a temporary key used to initialize Universal Checkout
[https://primer.io/docs/accept-payments/setup-universal-checkout/installation/web] and authenticate it against your account.

Universal Checkout automatically retrieves all the settings from the client session and the Dashboard to configure the payment
methods and the checkout experience.

Note: When creating a Client Session, please make sure to provide currencyCode, orderId, and at least one of amount or lineItems.
If any of these are not yet available, you can provide them w hen making the payment request.

POST /client-session does not have required fields as all fields are not always known when a client session is created. Use PATCH
/client-session to update the parameters throughout the checkout session.

Client tokens expire after 24 hours.",
    "title": "Create a client session",
    "type": "endpoint",
  },
  Object {
    "path": "v2.2/primer-api/client-session-api/update-client-session",
    "subtitle": "You can update a clients session created earlier with the PATCH /client-session API call.

The only required field for the request is clientToken. Other supported request fields are same as for the POST /client-session
API call.

You need to specify only the fields you wish to update. However, if the items that are to be updated are of type array, then you
need to provide the complete array along with modified items.

If you wish to update nested fields on the client session, such as the customer emailAddress field, you can pass the customer
object with only one field, emailAddress, to update.

If you simply wish to clear the value of the field, pass null as your input.

You can update paymentMethod.vaultOnSuccess field but updating of the paymentMethod.options field through PATCH /client-session is
not supported.

The response will contain all the fields of the client session including the ones that were changed.",
    "title": "Update client session",
    "type": "endpoint",
  },
  Object {
    "path": "v2.2/primer-api/payments-api/search-list-payments",
    "subtitle": "Retrieve a list of your payments.

Results are paginated, they will only return up to 100 payments maximum. To access the next page of result, set the cursor query
parameter to the value of nextCursor in your current result payload. Use prevCursor to go back to the previous page.

Note: this endpoint returns a list of summarized payments. Not all payments attributes are present. You can use the query
parameters to filter payments. You can separate multiple query parameters with the & symbol. Query parameters with types of the
form \\"Array of strings\\" (such as the status parameter) can be specified as a comma-separated list.

For example, if you wanted to get both FAILED and CANCELLED payments, for customer john-123, you would use:

curl --location --request GET 'https://api.primer.io/payments?status=FAILED,CANCELLED&customer_id=john-123' \\\\
--header 'X-Api-Key: <YOUR_API_KEY>'


You can alternatively specify a list by repeating the parameter multiple times.

Note: payments will be available within a minute from being created.",
    "title": "Search & list payments",
    "type": "endpoint",
  },
  Object {
    "path": "v2.2/primer-api/payments-api/create-a-payment",
    "subtitle": "Create and authorize a payment for a given customer order. You should provide a payment method token here to avoid PCI
implications.

If only a payment method token is passed, the values passed with the Client Session is used to determine the amount, currency etc.
Note: amount, currencyCode and orderId are required during payment creation. Make sure to pass these fields when creating a client
session, or if not yet available, when creating a payment.

All fields provided on this request will take preference over any field on the order associated with the client session. E.g. if
you pass amount on this request, it will override the amount on the order associated with the Client Session. Parameters that are
not on this request will be fetched from previously created Client Session and merged. E.g. if you specify customer.billingAddress
in Client Session and then pass customer.emailAddress data with this request, it will automatically merge the customer fields and
use both billingAddress and emailAddress for later calculations.",
    "title": "Create a payment",
    "type": "endpoint",
  },
  Object {
    "path": "v2.2/primer-api/payments-api/authorize-a-payment",
    "subtitle": "Manually authorize a payment using a provided processor. This is useful if you want to authorize a payment without a workflow
action. The processor merchant ID must be provided which can be found on the Integrations page
[https://dashboard.primer.io/integrations]. The processor name is optional but it must be provided if your account has multiple
processors configured which share the same merchant IDs.",
    "title": "Authorize a payment",
    "type": "endpoint",
  },
  Object {
    "path": "v2.2/primer-api/payments-api/capture-a-payment",
    "subtitle": "If you have successfully authorized a payment, you can now fully capture, or partially capture funds from the authorized payment,
depending on whether your selected payment processor supports it. The payment will be updated to SETTLED or SETTLING, depending on
the payment method type.

The payload sent in this capture request is completely optional. If you don't send a payload with the capture request, the full
amount that was authorized will be sent for capture. Below are the available payload attributes, which give you more granular
control when capturing funds, if you require it.",
    "title": "Capture a payment",
    "type": "endpoint",
  },
  Object {
    "path": "v2.2/primer-api/payments-api/cancel-a-payment",
    "subtitle": "Provided the payment has not reached SETTLED status, Primer will send a \\"void\\" request to the payment processor, thereby
cancelling the payment and releasing the hold on customer funds. Upon success, the payment will transition to CANCELLED. The
payload is optional.",
    "title": "Cancel a payment",
    "type": "endpoint",
  },
  Object {
    "path": "v2.2/primer-api/payments-api/refund-a-payment",
    "subtitle": "By default, this request will refund the full amount.

Optionally, pass in a lesser amount for a partial refund.",
    "title": "Refund a payment",
    "type": "endpoint",
  },
  Object {
    "path": "v2.2/primer-api/payments-api/resume-a-payment",
    "subtitle": "Resume a payment's workflow execution from a paused state. This is usually required when a Workflow was paused in order to get
further information from the customer, or when waiting for an asynchronous response from a third party connection.",
    "title": "Resume a payment",
    "type": "endpoint",
  },
  Object {
    "path": "v2.2/primer-api/payments-api/adjust-authorized-amount",
    "subtitle": "Adjust authorized amount. This is only possible if authorizationType was set to ESTIMATED when the payment was created, and the
mechanism is supported by the payment method.",
    "title": "Adjust authorized amount",
    "type": "endpoint",
  },
  Object {
    "path": "v2.2/primer-api/payments-api/get-a-payment",
    "subtitle": "Retrieve a payment by its ID.",
    "title": "Get a payment",
    "type": "endpoint",
  },
  Object {
    "path": "v2.2/primer-api/payment-methods-api/save-a-payment-method-token",
    "subtitle": "Save a SINGLE_USE payment method token so it can be used again later. You can optionally choose to verify the payment method
before vaulting. If verification fails, no payment method data will be vaulted. Verification can minimise fraud and boost
subscription rates for recurring payments.

If you try to vault an already vaulted token, you will get the existing vaulted token back.",
    "title": "Save a payment method token",
    "type": "endpoint",
  },
  Object {
    "path": "v2.2/primer-api/payment-methods-api/list-saved-payment-methods",
    "subtitle": "Retrieve a list of stored payment methods for a customer.",
    "title": "List saved payment methods",
    "type": "endpoint",
  },
  Object {
    "path": "v2.2/primer-api/payment-methods-api/delete-a-saved-payment-method",
    "subtitle": "Delete a saved payment method.",
    "title": "Delete a saved payment method",
    "type": "endpoint",
  },
  Object {
    "path": "v2.2/primer-api/payment-methods-api/update-the-default-saved-payment-method",
    "subtitle": "Update a saved payment method to be the default stored payment method for a customer.",
    "title": "Update the default saved payment method",
    "type": "endpoint",
  },
  Object {
    "path": "v2.2/primer-api/observability-api/create-an-external-payment",
    "subtitle": "The Observability API is currently in beta. Please contact support@primer.io [support@primer.io] for access.

Creating a payment with the Observability API sends external payments data to Primer to populate Observability Payment Insights
dashboards [https://primer.io/observability]. Payments created through the Payments API [/reference/create_payment_payments_post]
will be automatically populated and do not need to be sent in the Observability API.

Create an API key with the observability-payments:write scope.

Each record must be created with a unique paymentId. To update a payment record with new data use the PATCH endpoint.",
    "title": "Create an external payment",
    "type": "endpoint",
  },
  Object {
    "path": "v2.2/primer-api/observability-api/update-an-external-payment",
    "subtitle": "The Observability API is currently in beta. Please contact support@primer.io [support@primer.io] for access.

You can update payments created earlier through the Observability API with this endpoint. The only required field for the request
is paymentId. Other supported request fields are the same as for the create an external payment [/reference/external_payment] API
call.

If you wish to update nested fields on the payment, you only need to pass the fields that you wish to update. For example to
update the processor name, you would pass in processor.name only.

The response will contain all the fields of the payment including the ones that were changed.",
    "title": "Update an external payment",
    "type": "endpoint",
  },
  Object {
    "path": "v2.2/primer-api/loyalty-api/get-a-loyalty-customers-points-balance",
    "subtitle": "The Loyalty API is currently in beta. Please contact support@primer.io [support@primer.io] for access.

Create an API key with the loyalty-transactions:read scopes.

Get a loyalty customer by ID and connection ID. This includes the customer's points balance.

The connectionId is the unique Primer identifier for your loyalty provider connection. Primer will provide this once the loyalty
provider connection is created.

The customerId refers to the customer identifier on the loyalty provider's side.",
    "title": "Get a loyalty customer's points balance",
    "type": "endpoint",
  },
  Object {
    "path": "v2.2/primer-api/loyalty-api/list-the-transactions-for-a-customer",
    "subtitle": "The Loyalty API is currently in beta. Please contact support@primer.io [support@primer.io] for access.

Create an API key with the loyalty-transactions:read scopes.

Get all your loyalty transactions. You can filter by connectionId (recommended) and by customerId and orderId.

Additionally provide a limit to restrict the number of transactions in the response, and an offset to determine where to start.",
    "title": "List the transactions for a customer",
    "type": "endpoint",
  },
  Object {
    "path": "v2.2/primer-api/loyalty-api/create-a-loyalty-transaction",
    "subtitle": "The Loyalty API is currently in beta. Please contact support@primer.io [support@primer.io] for access.

Create an API key with the loyalty-transactions:write scopes.

Create a loyalty transaction. This is either a points redemption or a points refund.",
    "title": "Create a loyalty transaction",
    "type": "endpoint",
  },
]
`;
