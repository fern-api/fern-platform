{
  "pages": {
    "docs/mdx/our-products.mdx": {
      "markdown": "### Encounters\nCandid's primary entry point for submitting encounter information is the [Encounters](../api-reference/encounters) endpoint. Candid uses\nthe information sent to this endpoint to submit claims.\n\n### Eligibility\nCandid's [Eligibility](../api-reference/eligibility) endpoint can be used to run real-time\neligibility checks on patients to confirm active medical coverage and to understand the patient's benefits (co-pays, deductibles, etc).\n\n### Exports\nCandid's [Exports](../api-reference/exports) endpoints are used to programmatically download CSV\nexports of changes to a claim's status and associated metadata (e.g., service line amounts, patient and subscriber info, provider info).\n\n### Tasks\nCandid's [Tasks](../api-reference/tasks) endpoint can be used to embed Candid's Tasks in another system, like your integrated\nEMR partner.\n\n### Example workflow using Candid's products\n1. When a patient signs up or schedules an appointment, [Eligibility](../api-reference/eligibility) is used to run a real-time eligibility check to confirm the patient's medical coverage.\n2. A day before the patient's appointment, [Eligibility](../api-reference/eligibility) is used again to re-confirm the patient's coverage. It may have lapsed since they scheduled the appointment.\n3. After visit has been completed, an [Encounter](../api-reference/encounters) is submitted to Candid. This either happens in real-time immediately when the visit is completed and/or signed, or in a batch job at the end of the day.\n4. [Exports](../api-reference/exports) are downloaded and processed daily. Patient payments are sent to collect the balance owed on finalized adjudicated claims based on this data.\n5. [Tasks](../api-reference/tasks) are synchronized with your system if you are not working them directly in the Candid app.\n"
    },
    "docs/mdx/payer-information.mdx": {
      "markdown": "Candid Health supports most payers. You can find a list of supported payers with their respective `payer_id`, `payer_name`, and `cpid` below.\n\nThe `payer_id` and `payer_name` should be used in the corresponding subscriber\\'s insurance card information and when you use the [Encounters](../api-reference/encounters) endpoint.\n\nThe `cpid` should be used in the `tradingPartnerServiceId` field of the [Eligibility](../api-reference/eligibility) endpoint. The `cpid` is a Change Healthcare defined payer identifier.\n\nWhen denoting a claim as self-pay, please use the `responsible party` field on the [Encounters](../api-reference/encounters) endpoint.\n\n### IMPORTANT\nWhen submitting claims to Candid, please ensure you are using the exact `payer_name` that is listed below. The relationship between `payer_name` and `payer_id` is not one-to-one, meaning that certain `payer_id`s are used for multiple payers. As such, Candid has to do a match on a combination of `payer_name` and `payer_id` to determine the right place to send the claim in those instances.\n\n<details>\n<summary>\nView list of supported Payer IDs, Payer Names, and CPIDs or <a href=\"https://app.joincandidhealth.com/dynamic-files/payers-list.csv\" target=\"_blank\">download a CSV here</a>.\n</summary>\n</details>\n"
    },
    "docs/mdx/getting-started.mdx": {
      "markdown": "This page outlines how to use our Python and TypeScript SDKs to interact with our API.\nSpecifically, you'll learn how to make a request to create an Encounter.\n\n## Prerequisites\n\n- Python 3.x or TypeScript 4.x installed on your system\n- Candid Client ID\n- Candid Client Secret\n\n## Installation\n\nFirst, install the SDK using your package manager:\n<CodeBlocks>\n    <CodeBlock title=\"Python\">\n    ```bash\n    pip install candidhealth # or poetry install, etc\n    ```\n    </CodeBlock>\n    <CodeBlock title=\"NPM/Yarn/PNPM\">\n    ```bash\n    yarn add candidhealth   # or npm install, pnpm i, etc.\n    ```\n    </CodeBlock>\n</CodeBlocks>\n## Authentication\n\nTo make requests to our API, you'll need to use your API key for authentication. Initialize the SDK as follows:\n\n<CodeBlocks>\n    <CodeBlock title=\"Python\">\n    ```python\n    from candid.client import CandidApiClient\n    from candid.environment import CandidApiEnvironment\n\n    client = CandidApiClient(\n        environment=CandidApiEnvironment.STAGING,\n        options=CandidApiClientOptions(\n            client_id=\"YOUR_CLIENT_ID\",\n            client_secret=\"YOUR_CLIENT_SECRET\"\n        )\n    )\n    ```\n    </CodeBlock>\n    <CodeBlock title=\"TypeScript\">\n    ```typescript\n    import { CandidApi, CandidApiClient, CandidApiEnvironment } from \"candidhealth\";\n\n    const client = new CandidApiClient({\n        environment: CandidApiEnvironment.Staging,\n        clientId: \"YOUR_CLIENT_ID\",\n        clientSecret: \"YOUR_CLIENT_SECRET\",\n    });\n    ```\n    </CodeBlock>\n</CodeBlocks>\n\nCandid provides two environments, `STAGING` and `PRODUCTION`. Take care to pass the correct environment when creating your API client so that requests are routed correctly.\n\n## Making an Example Request\n\nIn this example, we'll create an Encounter using the V4 API.\n\n<CodeBlocks>\n    <CodeBlock title=\"Python\">\n    ```python\n    created_encounter = client.encounters.v_4.create(\n        external_id=EncounterExternalId(\"emr-claim-id-abcd\",\n        date_of_service=Date(\"2023-05-23\",\n        billable_status=BillableStatusType.BILLABLE,  # or BillableStatusType.NOT_BILLABLE\n        responsible_party=ResponsiblePartyType.INSURANCE_PAY,  # or ResponsiblePartyType.SELF_PAY\n        patient=PatientCreate(\n            external_id=\"emr-patient-id-123\",\n            first_name=\"Loki\",\n            last_name=\"Laufeyson\",\n            date_of_birth=Date(\"1983-12-17\",\n            gender=Gender.MALE,\n            address=StreetAddressShortZip(\n                address_1=\"1234 Main St\",\n                address_2=\"Apt 9876\",\n                city=\"Asgard\",\n                state=State.CA,\n                zip_code=\"94109\",\n                zip_plus_four_code=\"1234\",\n            ),\n        ),\n        patient_authorized_release=True,\n        billing_provider=BillingProvider(\n            organization_name=\"Acme Health PC\",\n            npi=\"1234567890\",\n            tax_id=\"123456789\",\n            address=StreetAddressLongZip(\n                address_1=\"1234 Main St\",\n                address_2=\"Apt 9876\",\n                city=\"Asgard\",\n                state=State.CA,\n                zip_code=\"94109\",\n                zip_plus_four_code=\"1234\",\n            ),\n        ),\n        rendering_provider=RenderingProvider(\n            first_name=\"Doctor\",\n            last_name=\"Strange\",\n            npi=\"9876543210\",\n        ),\n        diagnoses=[\n            DiagnosisCreate(code_type=DiagnosisTypeCode.ABF, code=\"Z63.88\",\n            DiagnosisCreate(code_type=DiagnosisTypeCode.ABF, code=\"E66.66\",\n        ],\n        place_of_service_code=FacilityTypeCode.TELEHEALTH,\n        service_lines=[\n            ServiceLineCreate(\n                procedure_code=\"99212\",\n                modifiers=[],\n                quantity=Decimal(\"1.0\",\n                units=ServiceLineUnits.UN,\n                charge_amount_cents=1500,\n                diagnosis_pointers=[0, 1],\n            ),\n        ],\n        clinical_notes=[],\n        provider_accepts_assignment=True,\n        benefits_assigned_to_provider=True,\n    )\n    ```\n    </CodeBlock>\n    <CodeBlock title=\"TypeScript\">\n    ```typescript\n    const createEncounterResponse = await client.encounters.v4.create({\n        externalId: CandidApi.EncounterExternalId(\"emr-claim-id-abcd\",\n        dateOfService: CandidApi.Date_(\"2023-05-23\",\n        billableStatus: \"BILLABLE\", // or \"NOT_BILLABLE\n        responsibleParty: \"INSURANCE_PAY\", // or \"SELF_PAY\"\n        patient: {\n            externalId: \"emr-patient-id-123\",\n            firstName: \"Loki\",\n            lastName: \"Laufeyson\",\n            dateOfBirth: CandidApi.Date_(\"1983-12-17\",\n            gender: \"male\",\n            address: {\n                address1: \"1234 Main St\",\n                address2: \"Apt 9876\",\n                city: \"Asgard\",\n                state: \"CA\",\n                zipCode: \"94109\",\n                zipPlusFourCode: \"1234\",\n            },\n        },\n        patientAuthorizedRelease: true,\n        billingProvider: {\n            organizationName: \"Acme Health PC\",\n            npi: \"1234567890\",\n            taxId: \"123456789\",\n            address: {\n                address1: \"1234 Main St\",\n                address2: \"Apt 9876\",\n                city: \"Asgard\",\n                state: \"CA\",\n                zipCode: \"94109\",\n                zipPlusFourCode: \"1234\",\n            },\n        },\n        renderingProvider: {\n            firstName: \"Doctor\",\n            lastName: \"Strange\",\n            npi: \"9876543210\",\n        },\n        diagnoses: [\n            { codeType: \"ABF\", code: \"Z63.88\" },\n            { codeType: \"ABF\", code: \"E66.66\" },\n        ],\n        placeOfServiceCode: \"02\", // telemedicine\n        serviceLines: [\n            {\n                procedureCode: \"99212\",\n                modifiers: [],\n                quantity: CandidApi.Decimal(\"1.0\",\n                units: \"UN\",\n                chargeAmountCents: 1500,\n                diagnosisPointers: [0, 1],\n            }\n        ],\n        clinicalNotes: [],\n        providerAcceptsAssignment: true,\n        benefitsAssignedToProvider: true,\n    });\n    ```\n    </CodeBlock>\n</CodeBlocks>\n\n## Error Handling\n\nEach endpoint in our SDK documents which errors and exceptions can be raised\nif the request fails. These can be caught and handled via native exception-handling:\n\n<CodeBlocks>\n    <CodeBlock title=\"Python\">\n    ```python\n    from candid.resources.encounters.resources.v_4.errors import EncounterExternalIdUniquenessError\n\n    try:\n        created_encounter = client.encounters.v_4.create(...)\n    except EncounterExternalIdUniquenessError as e:\n        print(f\"An error occurred: {e}\")\n    ```\n    </CodeBlock>\n    <CodeBlock title=\"TypeScript\">\n    ```typescript\n    if (createEncounterResponse.ok) {\n        const { body: newEncounter } = createEncounterResponse;\n        console.log(newEncounter.encounterId);\n    } else {\n        console.error(createEncounterResponse.error);\n    }\n    ```\n    </CodeBlock>\n</CodeBlocks>\n## Full Source Code\n\n<CodeBlocks>\n    <CodeBlock title=\"Python\">\n    ```python\n    from candid.candid_api_client import CandidApiClient, CandidApiClientOptions\n    from candid import (\n        CandidApiEnvironment,\n        EncounterExternalId,\n        Date,\n        PatientCreate,\n        Gender,\n        StreetAddressShortZip,\n        State,\n        StreetAddressLongZip,\n        DiagnosisCreate,\n        DiagnosisTypeCode,\n        FacilityTypeCode,\n        ServiceLineCreate,\n        ServiceLineUnits,\n        Decimal,\n    )\n    from candid.resources.encounter_providers.resources.v_2 import BillingProvider, RenderingProvider\n    from candid.resources.encounters.resources.v_4 import BillableStatusType, ResponsiblePartyType\n\n    client = CandidApiClient(\n        environment=CandidApiEnvironment.STAGING,\n        options=CandidApiClientOptions(\n            client_id=\"YOUR_CLIENT_ID\",\n            client_secret=\"YOUR_CLIENT_SECRET\"\n        )\n    )\n\n    created_encounter = client.encounters.v_4.create(\n        external_id=EncounterExternalId(\"emr-claim-id-abcd\",\n        date_of_service=Date(\"2023-05-23\",\n        billable_status=BillableStatusType.BILLABLE,  # or BillableStatusType.NOT_BILLABLE\n        responsible_party=ResponsiblePartyType.INSURANCE_PAY,  # or ResponsiblePartyType.SELF_PAY\n        patient=PatientCreate(\n            external_id=\"emr-patient-id-123\",\n            first_name=\"Loki\",\n            last_name=\"Laufeyson\",\n            date_of_birth=Date(\"1983-12-17\",\n            gender=Gender.MALE,\n            address=StreetAddressShortZip(\n                address_1=\"1234 Main St\",\n                address_2=\"Apt 9876\",\n                city=\"Asgard\",\n                state=State.CA,\n                zip_code=\"94109\",\n                zip_plus_four_code=\"1234\",\n            ),\n        ),\n        patient_authorized_release=True,\n        billing_provider=BillingProvider(\n            organization_name=\"Acme Health PC\",\n            npi=\"1234567890\",\n            tax_id=\"123456789\",\n            address=StreetAddressLongZip(\n                address_1=\"1234 Main St\",\n                address_2=\"Apt 9876\",\n                city=\"Asgard\",\n                state=State.CA,\n                zip_code=\"94109\",\n                zip_plus_four_code=\"1234\",\n            ),\n        ),\n        rendering_provider=RenderingProvider(\n            first_name=\"Doctor\",\n            last_name=\"Strange\",\n            npi=\"9876543210\",\n        ),\n        diagnoses=[\n            DiagnosisCreate(code_type=DiagnosisTypeCode.ABF, code=\"Z63.88\",\n            DiagnosisCreate(code_type=DiagnosisTypeCode.ABF, code=\"E66.66\",\n        ],\n        place_of_service_code=FacilityTypeCode.TELEHEALTH,\n        service_lines=[\n            ServiceLineCreate(\n                procedure_code=\"99212\",\n                modifiers=[],\n                quantity=Decimal(\"1.0\",\n                units=ServiceLineUnits.UN,\n                charge_amount_cents=1500,\n                diagnosis_pointers=[0, 1],\n            ),\n        ],\n        clinical_notes=[],\n        provider_accepts_assignment=True,\n        benefits_assigned_to_provider=True,\n    )\n    ```\n    </CodeBlock>\n    <CodeBlock title=\"TypeScript\">\n    ```typescript\n    import { CandidApi, CandidApiClient, CandidApiEnvironment } from \"candidhealth\";\n\n    const client = new CandidApiClient({\n        environment: CandidApiEnvironment.Staging,\n        clientId: \"YOUR_CLIENT_ID\",\n        clientSecret: \"YOUR_CLIENT_SECRET\",\n    });\n\n    const createEncounterResponse = await client.encounters.v4.create({\n        externalId: CandidApi.EncounterExternalId(\"emr-claim-id-abcd\",\n        dateOfService: CandidApi.Date_(\"2023-05-23\",\n        billableStatus: \"BILLABLE\", // or \"NOT_BILLABLE\n        responsibleParty: \"INSURANCE_PAY\", // or \"SELF_PAY\"\n        patient: {\n            externalId: \"emr-patient-id-123\",\n            firstName: \"Loki\",\n            lastName: \"Laufeyson\",\n            dateOfBirth: CandidApi.Date_(\"1983-12-17\",\n            gender: \"male\",\n            address: {\n                address1: \"1234 Main St\",\n                address2: \"Apt 9876\",\n                city: \"Asgard\",\n                state: \"CA\",\n                zipCode: \"94109\",\n                zipPlusFourCode: \"1234\",\n            },\n        },\n        patientAuthorizedRelease: true,\n        billingProvider: {\n            organizationName: \"Acme Health PC\",\n            npi: \"1234567890\",\n            taxId: \"123456789\",\n            address: {\n                address1: \"1234 Main St\",\n                address2: \"Apt 9876\",\n                city: \"Asgard\",\n                state: \"CA\",\n                zipCode: \"94109\",\n                zipPlusFourCode: \"1234\",\n            },\n        },\n        renderingProvider: {\n            firstName: \"Doctor\",\n            lastName: \"Strange\",\n            npi: \"9876543210\",\n        },\n        diagnoses: [\n            { codeType: \"ABF\", code: \"Z63.88\" },\n            { codeType: \"ABF\", code: \"E66.66\" },\n        ],\n        placeOfServiceCode: \"02\", // telemedicine\n        serviceLines: [\n            {\n                procedureCode: \"99212\",\n                modifiers: [],\n                quantity: CandidApi.Decimal(\"1.0\",\n                units: \"UN\",\n                chargeAmountCents: 1500,\n                diagnosisPointers: [0, 1],\n            }\n        ],\n        clinicalNotes: [],\n        providerAcceptsAssignment: true,\n        benefitsAssignedToProvider: true,\n    });\n    ```\n    </CodeBlock>\n</CodeBlocks>\n"
    },
    "docs/mdx/design-principles.mdx": {
      "markdown": "We strive to keep our API integration experience seamless. When making API design decisions, we do\nthe following:\n- We aim to use the same APIs internally that you use. This allows us to catch errors early and to make sure\n    that our API is easy to use.\n- We aim to make our API simple. We want to make sure that you can get up and running quickly. We also want to\n    make sure that you don't have to write a lot of code to use our API.\n- We aim to make our API consistent. Whether it is naming conventions, data types, or the way that we pass back\nerrors, we want to make sure that our API works similarly across different services and endpoints.\n- We aim to make our API reliable. We want to make sure that our API is always available and that it always\nworks as expected.\n- We bias against breaking changes. We try our best to make sure that you don't have to make changes to your\nexisting code unless there is a good reason.\n- We aim to use the same terminology that you use. We want to make sure that our API is easy to understand and\nthat you don't have to learn a new vocabulary to use it.\nSometimes, you may find issues before we do. You may find places where we can do the things above better. If you do,\nplease let us know! We are always looking for ways to improve our API, and you can reach us by emailing\nsupport@joincandidhealth.com.\n"
    },
    "docs/mdx/development-lifecycle.mdx": {
      "markdown": "Endpoints in our API live in one of three states: incubating, available, and deprecated.\n\n- **Incubating**: Endpoints in this state can be used, but proceed with caution. We are still working on them, and\n  they may change or break at any time.\n- **Available**: Endpoints in this state are available and reliable to use. We actively provide support for them, so\n  please do let us know if anything is not working as expected!\n- **Deprecated**: Endpoints in this state are available to use, however we generally will have a recommendation of\n  something better to use (maybe a new version or a different endpoint). We provide support for these on a case-by-case\n  basis, sometimes asking you to upgrade your client to resolve any issues.\n\nOur endpoint documentation will specify if the endpoint is incubating or deprecated. Otherwise, you can safely assume\nthat it is available.\n"
    },
    "docs/mdx/breaking-changes.mdx": {
      "markdown": "We do our absolute best to avoid breaking changes in our API.\nHowever, sometimes we need to make changes to our API that\nwill break existing clients. Here's how we recommend thinking\nabout breaking changes from us:\n\n1. Endpoints marked as `Incubating` are subject to breaking changes without notice.\n2. Endpoints marked as `Available` or `Deprecated` are generally not\n   subject to breaking changes, only being done in rare cases\n   when no other options exist.\n3. Any breaking changes that we do make will be clearly\n   documented in the Breaking Changes page in our API documentation along with\n   a date, so there is always a historical record.\n4. We try to notify you of breaking changes as early as possible.\n   We do this by sending an email to a breaking changes email list we keep.\n   If you would like to be added to this list, please email\n   [support@joincandidhealth.com](mailto:support@joincandidhealth.com).\n\n### What is a breaking change\n\nWe consider a break any change that meets one of the two following criteria:\n\n- A schema change to a request shape that leads to a previously valid client\n  request shape becoming invalid.\n- A schema change to a response shape that leads to a previously valid client\n  response parser becoming invalid.\n\nHere are some examples of changes that we consider **non-breaking**:\n\n- Adding a new field to an existing response shape\n- Making a required field on a request shape optional\n- Removing an optional field on a response shape\n\nHere are some examples of changes that we consider **breaking**:\n\n- Removing a required field on a response shape\n- Changing the data type of a field\n"
    },
    "docs/mdx/conventions.mdx": {
      "markdown": "### Type Aliases & Branding\n\nFor many string or UUID types, you may notice we alias / brand them as their own type. Branding is a technique\nto preserve the underlying type but distinguish it as a new type, so it is easier to avoid mixing them up while\ndeveloping.\n\nThis also allows us to communicate extra information to you about how they may be intended to be used. For example,\nwe brand decimal strings with the type `Decimal` to indicate that the server will parse them into Python\nDecimal objects.\n\nWhen using them in the API requests, these types all still serialize as JSON strings in the HTTP\npayload. However, if you are using our typed clients (SDK), the client will provide them to you as the branded type.\n\n### Pagination\n\nWe use pagination in our API to make sure that we don't return too much data at once. Many of our endpoints return\nan extension of the `ResourcePage` type:\n\n```yaml\nResourcePage:\n  items: T[]\n  next_page_token: PageToken | None\n  prev_page_token: PageToken | None\n```\n\n### Decimals\n\nWe avoid using floating-point arithmetic that leads to imprecision. Instead, we use the `Decimal` type,\nwhich is a string alias type that represents a decimal number as a string. These decimal strings are parsed into the\n[Python Decimal class](https://docs.python.org/3/library/decimal.html#decimal-objects).\n\n### Unions\n\nWe use unions to represent a type that can be one of several different types. When a union shape is used, our\nunion discriminant will always be the `type` field unless otherwise specified.\n\nWe also expect that it is a non-breaking change to add a new union member to a union type. This means that if you\nhandle a union field in a response, we expect you to gracefully handle an `_other` case. This allows us\nto better serve and improve our APIs at a quick velocity without breaking your code.\n"
    }
  },
  "config": {
    "title": "Candid | API Reference",
    "logoV2": {
      "dark": "4bfdd0cb-a52a-4dcc-ab47-1fb7b87ee3c1"
    },
    "logoHref": "https://www.joincandidhealth.com/",
    "favicon": "c4b8923d-7379-4d8d-9593-590ae88fd1b1",
    "navigation": {
      "items": [
        {
          "title": "Introduction",
          "items": [
            {
              "title": "Our Products",
              "id": "docs/mdx/our-products.mdx",
              "type": "page"
            },
            {
              "title": "Payer Information",
              "id": "docs/mdx/payer-information.mdx",
              "type": "page"
            },
            {
              "title": "Getting Started",
              "id": "docs/mdx/getting-started.mdx",
              "type": "page"
            }
          ],
          "type": "section"
        },
        {
          "title": "API Principles",
          "items": [
            {
              "title": "Design Principles",
              "id": "docs/mdx/design-principles.mdx",
              "type": "page"
            },
            {
              "title": "Development Lifecycle",
              "id": "docs/mdx/development-lifecycle.mdx",
              "type": "page"
            },
            {
              "title": "Breaking Changes",
              "id": "docs/mdx/breaking-changes.mdx",
              "type": "page"
            },
            {
              "title": "Conventions",
              "id": "docs/mdx/conventions.mdx",
              "type": "page"
            }
          ],
          "type": "section"
        },
        {
          "title": "API Reference",
          "api": "2ebcf262-f1aa-4d8d-bcfe-5f788e818357",
          "showErrors": true,
          "type": "api"
        }
      ]
    },
    "colorsV2": {
      "accentPrimary": {
        "color": {
          "r": 150,
          "g": 156,
          "b": 238
        },
        "type": "unthemed"
      }
    },
    "navbarLinks": [
      {
        "text": "Contact Sales",
        "url": "https://www.joincandidhealth.com/contact/sales",
        "type": "primary"
      }
    ]
  }
}
