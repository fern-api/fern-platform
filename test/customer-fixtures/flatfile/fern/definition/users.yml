# yaml-language-server: $schema=https://raw.githubusercontent.com/fern-api/fern/main/fern.schema.json

imports:
  commons: commons.yml

service:
  auth: true
  base-path: ""
  audiences:
    - public
  endpoints:
    list:
      path: /users
      method: GET
      docs: Gets a list of users
      display-name: List users
      request:
        name: ListUsersRequest
        query-parameters:
          email:
            type: optional<string>
            docs: Email of guest to return
      response: ListUsersResponse

    create:
      audiences:
        - internal
      path: /users
      method: POST
      docs: A user is a privileged user that logs in with a username and password.
      display-name: Create a user
      request: UserConfig
      response: UserResponse

    get:
      path: /users/{userId}
      method: GET
      docs: Gets a user
      display-name: Get a user
      path-parameters:
        userId:
          docs: The user id
          type: commons.UserId
      response: UserResponse

    listApiTokens:
      path: /users/{userId}/api-token
      method: GET
      docs: Gets all the api tokens for a user.
      display-name: List all tokens
      path-parameters:
        userId:
          docs: The user id
          type: commons.UserId
      request:
        name: ListApiTokensRequest
        query-parameters:
          tenantId: string
          pageSize:
            docs: Number of tokens to return in a page (default 10)
            type: optional<integer>
          pageNumber:
            docs: Based on pageSize, which page of records to return
            type: optional<integer>
      response: ListApiTokensResponse

    createApiToken:
      path: /users/{userId}/api-token
      method: POST
      docs: Creates an api token for authenticating against Flatfile APIs.
      display-name: Create an API token
      path-parameters:
        userId:
          docs: The user id
          type: commons.UserId
      request:
        name: CreateApiTokenRequest
        query-parameters:
          tenantId: string

    exchangeToken:
      path: /invitations/exchange
      method: POST
      docs: Exchange an invitation for an access token
      display-name: Exchange an invitation for an access token
      request:
        name: ExchangeTokenRequest
        body:
          properties:
            token:
              type: optional<string>
              docs: The token to use for the request
            email:
              type: optional<string>
              docs: The invited guest's email, required if no token
            spaceId:
              type: optional<string>
              docs: The spaceId, required if no token
      response: ExchangeTokenResponse

types:
  ListUsersResponse:
    properties:
      data: list<User>

  UserResponse:
    properties:
      data: User

  User:
    docs: Configurations for the user
    extends: UserConfig
    properties:
      id: commons.UserId

  UserConfig:
    docs: Properties used to create a new user
    properties:
      email: string
      name: string
      accountId: commons.AccountId

  ListApiTokensResponse:
    docs: List of api tokens without secrets
    properties:
      pagination: optional<commons.Pagination>
      data: list<ApiToken>

  ApiToken:
    docs: Client id and secret used for authenticating against our APIs
    properties:
      clientId: string
      description: string
      metadata: map<string, unknown>
      createdAt: datetime
      secret: optional<string>

  ExchangeTokenResponse:
    properties:
      data: ExchangeTokenData

  ExchangeTokenData:
    properties:
      valid:
        docs: Whether the provided token was valid
        type: boolean
      token:
        docs: The refreshed token, if the provided token was valid
        type: optional<string>
      sentTo:
        docs: >-
          The email address the recovery email was sent to, if the provided
          token was not valid
        type: optional<string>
