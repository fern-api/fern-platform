# yaml-language-server: $schema=https://raw.githubusercontent.com/fern-api/fern/main/fern.schema.json

imports:
  commons: commons.yml
  events: events.yml

service:
  auth: true
  base-path: /agents
  endpoints:
    list:
      path: ""
      method: GET
      audiences:
        - public
      display-name: List agents
      request:
        name: ListAgentsRequest
        query-parameters:
          environmentId: commons.EnvironmentId
      response: ListAgentsResponse
      examples:
        - name: Example0
          query-parameters:
            environmentId: $commons.EnvironmentId.Example0
          response:
            body: $ListAgentsResponse.Example0

    create:
      path: ""
      method: POST
      audiences:
        - public
      display-name: Create an agent
      request:
        name: CreateAgentsRequest
        query-parameters:
          environmentId: commons.EnvironmentId
        body: AgentConfig
      response: AgentResponse
      errors:
        - commons.BadRequestError
      examples:
        - name: Agent Response
          query-parameters:
            environmentId: $commons.EnvironmentId.Example0
          request: $AgentConfig.Example0
          response:
            body: $AgentResponse.Example0
        - name: Error Response
          query-parameters:
            environmentId: $commons.EnvironmentId.Example0
          request: $AgentConfig.Example0
          response:
            error: commons.BadRequestError
            body:
              errors:
                - key: "123"
                  message: "ID 123 not found"

    get:
      path: /{agentId}
      method: GET
      audiences:
        - public
      display-name: Get an agent
      path-parameters:
        agentId: commons.AgentId
      request:
        name: GetAgentRequest
        query-parameters:
          environmentId: commons.EnvironmentId
      response: AgentResponse
      errors:
        - commons.BadRequestError
        - commons.NotFoundError
      examples:
        - name: Example0
          query-parameters:
            environmentId: $commons.EnvironmentId.Example0
          path-parameters:
            agentId: $commons.AgentId.Example0
          response:
            body: $AgentResponse.Example0

    getAgentLogs:
      path: /{agentId}/logs
      method: GET
      audiences:
        - public
      display-name: Get logs for an agent
      path-parameters:
        agentId: commons.AgentId
      request:
        name: GetAgentLogsRequest
        query-parameters:
          environmentId: commons.EnvironmentId
      response: GetAgentLogsResponse
      errors:
        - commons.BadRequestError
        - commons.NotFoundError
      examples:
        - name: Example0
          query-parameters:
            environmentId: $commons.EnvironmentId.Example0
          path-parameters:
            agentId: $commons.AgentId.Example0
          response:
            body: $GetAgentLogsResponse.Example0

    getEnvironmentAgentLogs:
      method: GET
      path: "/logs"
      audiences:
        - public
      display-name: Get all agent logs in your environment
      request:
        name: GetEnvironmentAgentLogsRequest
        query-parameters:
          environmentId: commons.EnvironmentId
          pageSize:
            docs: Number of logs to return in a page (default 20)
            type: optional<integer>
          pageNumber:
            docs: Based on pageSize, which page of records to return
            type: optional<integer>
      response: GetAgentLogsResponse
      errors:
        - commons.BadRequestError
        - commons.NotFoundError

    getEnvironmentStats:
      method: GET
      path: "/stats"
      display-name: Get environment stats
      request:
        name: GetEnvironmentStatsRequest
        query-parameters:
          environmentId: commons.EnvironmentId
          start:
            docs: Start time for stats, defaults to 7 days ago
            type: optional<datetime>
          end:
            docs: End time for stats, defaults to now
            type: optional<datetime>
      response: EnvironmentStatsResponse
      errors:
        - commons.ForbiddenError

    delete:
      path: /{agentId}
      method: DELETE
      audiences:
        - public
      display-name: Delete an agent
      docs: Deletes a single agent
      path-parameters:
        agentId: commons.AgentId
      response: commons.Success
      errors:
        - commons.BadRequestError
        - commons.NotFoundError

types:
  ListAgentsResponse:
    properties:
      data: list<Agent>
    examples:
      - name: Example0
        value:
          data:
            - $Agent.Example0

  AgentResponse:
    properties:
      data: Agent
    examples:
      - name: Example0
        value:
          data: $Agent.Example0

  AgentConfig:
    docs: Properties used to create a new agent
    properties:
      topics:
        docs: The topics the agent should listen for
        type: optional<list<events.EventTopic>>
      compiler:
        docs: The compiler of the agent
        type: optional<Compiler>
      source:
        docs: The source of the agent
        type: optional<string>
    examples:
      - name: Example0
        value:
          topics:
            - $events.EventTopic.Example0
          compiler: $Compiler.Example0
          source: "module.exports = { routeEvent: async (...args) => { console.log(args) } }"

  EnvironmentStatsResponse:
    properties:
      data: EnvironmentStats

  EnvironmentStats:
    properties:
      agentExecutions: optional<AgentStats>

  AgentStats:
    docs: Statistics about Flatfile agents
    properties:
      start:
        type: datetime
        docs: The time these statistics started
      end:
        type: datetime
        docs: The cutoff point for these statistics
      executions:
        type: integer
        docs: The total number of agent executions for this time period
      succeeded:
        type: integer
        docs: The total number of successful agent executions for this time period
      failed:
        type: integer

  Agent:
    extends: AgentConfig
    properties:
      id: commons.AgentId
    examples:
      - name: Example0
        value:
          id: "123"
          topics:
            - $events.EventTopic.Example0
          compiler: $Compiler.Example0
          source: "module.exports = { routeEvent: async (...args) => { console.log(args) } }"

  Compiler:
    docs: The compiler of the agent
    enum:
      - js
    examples:
      - name: Example0
        value: js

  GetAgentLogsResponse:
    properties:
      pagination: optional<commons.Pagination>
      data: list<AgentLog>
    examples:
      - name: Example0
        value:
          pagination: $commons.Pagination.Example0
          data:
            - $AgentLog.Example0

  AgentLog:
    docs: A log of an agent execution
    properties:
      eventId: commons.EventId
      success:
        docs: Whether the agent execution was successful
        type: boolean
      createdAt: datetime
      completedAt: datetime
      log:
        docs: The log of the agent execution
        type: optional<string>
    examples:
      - name: Example0
        value:
          eventId: us_evt_9cuesESa7W9cuesE
          success: true
          createdAt: "2022-09-18T00:19:57.007Z"
          completedAt: "2022-09-18T00:20:04.007Z"
          log: SUCCESS
