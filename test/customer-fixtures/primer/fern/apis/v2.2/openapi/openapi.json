{
  "openapi": "3.0.2",
  "servers": [
    {
      "url": "https://api.sandbox.primer.io",
      "x-fern-server-name": "Production"
    },
    {
      "url": "https://api.primer.io",
      "x-fern-server-name": "Sandbox"
    }
  ],
  "info": {
    "x-logo": {
      "url": "https://apidocs.primer.io/docs/assets/images/primer-logo.svg"
    },
    "title": "Primer API",
    "version": "2.2"
  },
  "tags": [
    {
      "name": "Client Session API"
    },
    {
      "name": "Payments API"
    },
    {
      "name": "Payment Methods API"
    },
    {
      "name": "Observability API"
    },
    {
      "name": "Loyalty API"
    }
  ],
  "security": [{ "ApiKeyAuth": [] }],
  "paths": {
    "/client-session": {
      "post": {
        "tags": ["Client Session API"],
        "summary": "Create a client session",
        "description": "Creating a client session generates a client token: a temporary key used to initialize [Universal Checkout](https://primer.io/docs/accept-payments/setup-universal-checkout/installation/web) and authenticate it against your account.\n\nUniversal Checkout automatically retrieves all the settings from the client session and the Dashboard to configure the payment methods and the checkout experience.\n\n<b>Note:</b>\nWhen creating a Client Session, please make sure to provide `currencyCode`, `orderId`, and at least one of `amount` or `lineItems`. \nIf any of these are not yet available, you can provide them w\nhen making the payment request.\n\n<code>POST /client-session</code> does not have required fields as all fields are not always known when a client session is created. \nUse <code>PATCH /client-session</code> to update the parameters throughout the checkout session.\n\nClient tokens expire after 24 hours.\n",
        "operationId": "create_client_side_token_client_session_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ClientSessionAPIRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClientSessionWithTokenAPIResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestErrorResponse"
                },
                "example": {
                  "error": {
                    "errorId": "ClientSessionValidationError",
                    "description": "The client token is invalid.",
                    "recoverySuggestion": "Please provide a valid client token.",
                    "diagnosticsId": "1234567898"
                  }
                }
              }
            }
          },
          "422": {
            "description": "Error Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnprocessableEntityErrorResponse"
                },
                "example": {
                  "error": {
                    "errorId": "RequestValidationError",
                    "description": "We were unable to validate your request, please check your payload against https://primer.io/docs/api",
                    "diagnosticsId": "1234567898",
                    "validationErrors": [
                      {
                        "model": "ClientSessionAPIRequest",
                        "errors": [
                          {
                            "path": "$.customerId",
                            "description": "Value must be a valid string"
                          }
                        ]
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": ["Client Session API"],
        "summary": "Retrieve a client session",
        "description": "This API call retrieves all the details associated with the client session corresponding to the client token that is provided in the request. The fields with empty values are excluded from the response.\n",
        "operationId": "retrieve_client_side_token_client_session_get",
        "parameters": [
          {
            "description": "Client token corresponding to the client session to retrieve",
            "schema": {
              "title": "Client Token",
              "type": "string",
              "description": "Client token"
            },
            "name": "clientToken",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClientSessionAPIResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Error Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnprocessableEntityErrorResponse"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": ["Client Session API"],
        "summary": "Update client session",
        "description": "You can update a clients session created earlier with the `PATCH /client-session` [API call](#operation/create_client_side_token_client_session_post).\n\nThe only required field for the request is `clientToken`. Other supported request fields are same as for the `POST /client-session` [API call](#operation/create_client_side_token_client_session_post).\n\nYou need to specify only the fields you wish to update. However, if the items that are to be updated are of type `array`, then you need to provide the complete array along with modified items.\n\nIf you wish to update nested fields on the client session, such as the customer `emailAddress` field, you can pass the `customer` object with only one field, `emailAddress`, to update.\n\nIf you simply wish to clear the value of the field, pass `null` as your input.\n\nYou can update `paymentMethod.vaultOnSuccess` field but updating of the `paymentMethod.options` field through `PATCH /client-session` is not supported.\n\nThe response will contain all the fields of the client session including the ones that were changed.\n",
        "operationId": "update_client_side_token_client_session_patch",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ClientSessionUpdateAPIRequest",
                "title": "Request"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClientSessionAPIResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Error Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnprocessableEntityErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/payments": {
      "get": {
        "tags": ["Payments API"],
        "summary": "Search & list payments",
        "description": "<p/>\n\nRetrieve a list of your payments.\n\nResults are paginated, they will only return up to 100 payments maximum.\nTo access the next page of result, set the `cursor` query parameter to the value of `nextCursor` in\nyour current result payload. Use `prevCursor` to go back to the previous page.\n\n**Note:** this endpoint returns a list of\nsummarized payments. Not all payments attributes are present. You can use\nthe query parameters to filter payments. You can separate multiple query parameters with the `&` symbol.\nQuery parameters with types of the form \"Array of strings\" (such as the status parameter) can be specified as a comma-separated list.\n\n**Note:** payments will be available within a minute from being created.\n",
        "operationId": "list_payments_payments_get",
        "parameters": [
          {
            "description": "Filter payments by their status.",
            "required": false,
            "schema": {
              "title": "Payment status",
              "type": "array",
              "items": { "$ref": "#/components/schemas/PaymentStatus" },
              "description": "Filter payments by their status."
            },
            "name": "status",
            "in": "query"
          },
          {
            "description": "Filter payments by their payment method type.",
            "required": false,
            "schema": {
              "title": "Payment method type",
              "type": "array",
              "items": { "$ref": "#/components/schemas/PaymentMethodTypeEnum" },
              "description": "Filter payments by their payment method type."
            },
            "name": "payment_method_type",
            "in": "query"
          },
          {
            "description": "Filter payments by their payment processor.",
            "required": false,
            "schema": {
              "title": "Payment processor",
              "type": "array",
              "items": { "type": "string" },
              "description": "Filter payments by their payment processor."
            },
            "name": "processor",
            "in": "query"
          },
          {
            "description": "Filter payments by their payment currency.\ne.g. use `USD` for US dollars.\n",
            "required": false,
            "schema": {
              "title": "Payment currency",
              "type": "array",
              "items": { "type": "string" },
              "description": "Filter payments by their payment currency.\n\nUse the 3-letter currency code in [ISO 4217 format](https://en.wikipedia.org/wiki/ISO_4217#Active_codes).\ne.g. use `USD` for US dollars.\"\n"
            },
            "name": "currency_code",
            "in": "query"
          },
          {
            "description": "Return only payments from this date (inclusive).",
            "required": false,
            "schema": {
              "title": "Payment date",
              "type": "string",
              "description": "Return only payments from this date (inclusive).",
              "format": "date-time"
            },
            "name": "from_date",
            "in": "query"
          },
          {
            "description": "Return only payments up to this date (inclusive).",
            "required": false,
            "schema": {
              "title": "Payment date",
              "type": "string",
              "description": "Return only payments up to this date (inclusive).",
              "format": "date-time"
            },
            "name": "to_date",
            "in": "query"
          },
          {
            "description": "Return payments related to this order ID.",
            "required": false,
            "schema": {
              "title": "Payment order ID",
              "type": "string",
              "description": "Return payments related to this order ID."
            },
            "name": "order_id",
            "in": "query"
          },
          {
            "description": "Return payments of this amount minimum (inclusive).",
            "required": false,
            "schema": {
              "title": "Payment amount",
              "type": "integer",
              "description": "Return payments of this amount minimum (inclusive)."
            },
            "name": "min_amount",
            "in": "query"
          },
          {
            "description": "Return payments of this amount max (inclusive).",
            "required": false,
            "schema": {
              "title": "Payment amount",
              "type": "integer",
              "description": "Return payments of this amount max (inclusive)."
            },
            "name": "max_amount",
            "in": "query"
          },
          {
            "description": "ID of the customer that has made the payment.",
            "required": false,
            "schema": {
              "title": "Customer ID",
              "type": "array",
              "items": { "type": "string" },
              "description": "ID of the customer that has made the payment."
            },
            "name": "customer_id",
            "in": "query"
          },
          {
            "description": "ID of the merchant involved in the payment.",
            "required": false,
            "schema": {
              "title": "Merchant ID",
              "type": "array",
              "items": { "type": "string" },
              "description": "ID of the merchant involved in the payment."
            },
            "name": "merchant_id",
            "in": "query"
          },
          {
            "description": "Email of the customer that has made the payment.",
            "required": false,
            "schema": {
              "title": "Customer email address",
              "type": "array",
              "items": { "type": "string" },
              "description": "Email of the customer that has made the payment."
            },
            "name": "customer_email_address",
            "in": "query"
          },
          {
            "description": "Last 4 digits of the card used for the payment.",
            "required": false,
            "schema": {
              "title": "Last 4 digits",
              "type": "array",
              "items": { "type": "string" },
              "description": "Last 4 digits of the card used for the payment."
            },
            "name": "last_4_digits",
            "in": "query"
          },
          {
            "description": "Paypal email address associated with the payment.",
            "required": false,
            "schema": {
              "title": "Paypal email",
              "type": "array",
              "items": { "type": "string" },
              "description": "Paypal email address associated with the payment."
            },
            "name": "paypal_email",
            "in": "query"
          },
          {
            "description": "Klarna email address associated with the payment.",
            "required": false,
            "schema": {
              "title": "Klarna email",
              "type": "array",
              "items": { "type": "string" },
              "description": "Klarna email address associated with the payment."
            },
            "name": "klarna_email",
            "in": "query"
          },
          {
            "description": "Maximum number of payments to return per page.",
            "required": false,
            "schema": {
              "title": "Limit result set",
              "maximum": 100,
              "minimum": 1,
              "type": "integer",
              "description": "Maximum number of payments to return per page.",
              "default": 100
            },
            "name": "limit",
            "in": "query"
          },
          {
            "description": "If results are paginated, pass the `nextCursor` to access next page.",
            "required": false,
            "schema": {
              "title": "Page cursor",
              "type": "string",
              "description": "If results are paginated, pass the `nextCursor` to access next page."
            },
            "name": "cursor",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentListAPIResponse"
                }
              }
            }
          },
          "422": {
            "description": "Error Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnprocessableEntityErrorResponse"
                },
                "example": {
                  "error": {
                    "errorId": "RequestValidationError",
                    "description": "Invalid type for `currencyCode`",
                    "recoverySuggestion": "The currency code must be a valid value",
                    "diagnosticsId": "1234567898"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Payments API"],
        "summary": "Create a payment",
        "description": "<p/>\n\nCreate and authorize a payment for a given customer order. You\nshould provide a payment method token here to avoid PCI implications.\n\nIf only a payment method token is passed, the values passed with the Client Session is used to determine the amount, currency etc.\nNote: `amount`, `currencyCode` and `orderId` are required during payment creation. Make sure to pass these fields when creating a client session, or if not yet available, when creating a payment.\n\nAll fields provided on this request will take preference over any field on the `order` associated with the client session. E.g. if you pass `amount` on this request, it will override the `amount` on the `order` associated with the Client Session.\nParameters that are not on this request will be fetched from previously created Client Session and merged. E.g. if you specify `customer.billingAddress` in Client Session and then pass `customer.emailAddress` data with this request, it will automatically merge the `customer` fields and use both `billingAddress` and `emailAddress` for later calculations.\n",
        "operationId": "create_payment_payments_post",
        "parameters": [
          {
            "required": false,
            "schema": { "title": "X-Idempotency-Key", "type": "string" },
            "name": "X-Idempotency-Key",
            "description": "Optional key to make the request idempotent. Learn more in the [Idempotency Key guide](../docs#idempotency-key).",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PaymentCreationAPIRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/PaymentAPIResponse" },
                "example": {
                  "id": "kHdEw9EG",
                  "date": "2021-02-21T15:36:16.367687",
                  "status": "AUTHORIZED",
                  "orderId": "order-abc",
                  "currencyCode": "EUR",
                  "amount": 42,
                  "customerId": "customer-123",
                  "customer": { "email": "customer123@gmail.com" },
                  "paymentMethod": {
                    "paymentType": "SUBSCRIPTION",
                    "paymentMethodToken": "heNwnqaeRiqvY1UcslfQc3wxNjEzOTIxNjc4",
                    "isVaulted": true,
                    "authorizationType": "FINAL",
                    "descriptor": "Purchase: Socks",
                    "analyticsId": "VtkMDAxZW5isH0HsbbNxZ3lo",
                    "paymentMethodType": "PAYMENT_CARD",
                    "paymentMethodData": {
                      "first6Digits": "411111",
                      "last4Digits": "1111",
                      "expirationMonth": "12",
                      "expirationYear": "2030",
                      "cardholderName": "John Biggins",
                      "network": "Visa",
                      "isNetworkTokenized": false,
                      "binData": {
                        "network": "VISA",
                        "regionalRestriction": "UNKNOWN",
                        "accountNumberType": "UNKNOWN",
                        "accountFundingType": "UNKNOWN",
                        "prepaidReloadableIndicator": "NOT_APPLICABLE",
                        "productUsageType": "UNKNOWN",
                        "productCode": "VISA",
                        "productName": "VISA"
                      }
                    }
                  },
                  "processor": {
                    "name": "STRIPE",
                    "processorMerchantId": "acct_stripe_1234",
                    "amountCaptured": 0,
                    "amountRefunded": 0
                  },
                  "transactions": [
                    {
                      "type": "SALE",
                      "processorStatus": "AUTHORIZED",
                      "processorName": "STRIPE",
                      "processorMerchantId": "acct_stripe_1234",
                      "processorTransactionId": "54c4eb5b3ef8a"
                    }
                  ],
                  "metadata": { "productId": 123, "merchantId": "a13bsd62s" },
                  "riskData": {
                    "fraudCheck": {
                      "source": "FRAUD_PROVIDER",
                      "preAuthorizationResult": "THREE_DS",
                      "postAuthorizationResult": "ACCEPT"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Error Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestErrorResponse"
                },
                "example": {
                  "error": {
                    "errorId": "PaymentError",
                    "description": "The payment could not be created.",
                    "diagnosticsId": "1234567898"
                  }
                }
              }
            }
          },
          "422": {
            "description": "Error Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnprocessableEntityErrorResponse"
                },
                "example": {
                  "error": {
                    "errorId": "RequestValidationError",
                    "description": "Missing fields for payment.",
                    "recoverySuggestion": "When creating a payment `amount` must either be provided via the Client Session or the Payment request.",
                    "diagnosticsId": "1234567898"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/payments/{id}/authorize": {
      "post": {
        "tags": ["Payments API"],
        "summary": "Authorize a payment",
        "description": "<p/>\n\nManually authorize a payment using a provided processor. This is useful if you want to authorize a payment without a workflow action.\nThe processor merchant ID must be provided which can be found on the [Integrations page](https://dashboard.primer.io/integrations).\nThe processor name is optional but it must be provided if your account has multiple processors configured which share the same merchant IDs.\n",
        "operationId": "authorize_payment_payments__id__authorize_post",
        "parameters": [
          {
            "required": true,
            "schema": { "title": "Payment ID", "type": "string" },
            "name": "id",
            "description": "ID of the payment to authorize.",
            "in": "path"
          },
          {
            "required": false,
            "schema": { "title": "X-Idempotency-Key", "type": "string" },
            "name": "X-Idempotency-Key",
            "description": "Optional key to make the request idempotent. Learn more in the [Idempotency Key guide](../docs#idempotency-key).",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PaymentAuthorizationAPIRequest"
              },
              "example": {
                "processor": { "processorMerchantId": "acct_myprocessor_1234" }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/PaymentAPIResponse" },
                "example": {
                  "id": "kHdEw9EG",
                  "date": "2021-02-21T15:36:16.367687",
                  "status": "AUTHORIZED",
                  "orderId": "order-abc",
                  "customerId": "customer-123",
                  "currencyCode": "EUR",
                  "amount": 42,
                  "paymentMethod": {
                    "paymentType": "SUBSCRIPTION",
                    "paymentMethodToken": "heNwnqaeRiqvY1UcslfQc3wxNjEzOTIxNjc4",
                    "isVaulted": true,
                    "authorizationType": "FINAL",
                    "descriptor": "Purchase: Socks",
                    "analyticsId": "VtkMDAxZW5isH0HsbbNxZ3lo",
                    "paymentMethodType": "PAYMENT_CARD",
                    "paymentMethodData": {
                      "first6Digits": "411111",
                      "last4Digits": "1111",
                      "expirationMonth": "12",
                      "expirationYear": "2030",
                      "cardholderName": "John Biggins",
                      "network": "Visa",
                      "isNetworkTokenized": false,
                      "binData": {
                        "network": "VISA",
                        "regionalRestriction": "UNKNOWN",
                        "accountNumberType": "UNKNOWN",
                        "accountFundingType": "UNKNOWN",
                        "prepaidReloadableIndicator": "NOT_APPLICABLE",
                        "productUsageType": "UNKNOWN",
                        "productCode": "VISA",
                        "productName": "VISA"
                      }
                    }
                  },
                  "processor": {
                    "name": "MYPROCESSOR",
                    "processorMerchantId": "acct_myprocessor_1234",
                    "amountCaptured": 42,
                    "amountRefunded": 0
                  },
                  "customer": { "email": "customer123@gmail.com" },
                  "metadata": { "productId": 123, "merchantId": "a13bsd62s" },
                  "transactions": [
                    {
                      "type": "SALE",
                      "processorStatus": "AUTHORIZED",
                      "processorName": "MYPROCESSOR",
                      "processorMerchantId": "acct_myprocessor_1234",
                      "processorTransactionId": "54c4eb5b3ef8a"
                    }
                  ],
                  "riskData": {
                    "fraudCheck": {
                      "source": "FRAUD_PROVIDER",
                      "preAuthorizationResult": "THREE_DS",
                      "postAuthorizationResult": "ACCEPT"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Error Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestErrorResponse"
                },
                "examples": {
                  "PaymentAlreadyAuthorized": {
                    "value": {
                      "error": {
                        "errorId": "PaymentAlreadyAuthorized",
                        "description": "The payment has already been authorized",
                        "diagnosticsId": "1234567898"
                      }
                    }
                  },
                  "InvalidPaymentStatus": {
                    "value": {
                      "error": {
                        "errorId": "InvalidPaymentStatus",
                        "description": "A settled payment cannot be authorized",
                        "diagnosticsId": "1234567898"
                      }
                    }
                  },
                  "MerchantAccountNotFound": {
                    "value": {
                      "error": {
                        "errorId": "MerchantAccountNotFound",
                        "description": "The merchant account could not be found",
                        "diagnosticsId": "1234567898"
                      }
                    }
                  },
                  "MerchantAccountConflict": {
                    "value": {
                      "error": {
                        "errorId": "MerchantAccountConflict",
                        "description": "More than one merchant account was found for the provided processor merchant ID",
                        "diagnosticsId": "1234567898"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Payment not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundErrorResponse"
                },
                "example": {
                  "error": {
                    "errorId": "PaymentNotFoundError",
                    "description": "The payment could not be found",
                    "diagnosticsId": "1234567898",
                    "validationErrors": []
                  }
                }
              }
            }
          },
          "409": {
            "description": "Idempotency key already exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConflictErrorResponse"
                },
                "example": {
                  "error": {
                    "errorId": "IdempotencyKeyAlreadyExists",
                    "description": "The idempotency key \"1234567898\" already exists for transaction",
                    "diagnosticsId": "1234567898"
                  }
                }
              }
            }
          },
          "422": {
            "description": "Request failed validation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnprocessableEntityErrorResponse"
                },
                "example": {
                  "error": {
                    "errorId": "RequestValidationError",
                    "description": "We were unable to validate your request, please check your payload against https://primer.io/docs/api",
                    "diagnosticsId": "1234567898",
                    "validationErrors": [
                      {
                        "model": "PaymentAuthorizationAPIRequest",
                        "errors": [
                          {
                            "path": "$.processor.processorMerchantId",
                            "description": "Value must be a valid string"
                          }
                        ]
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    },
    "/payments/{id}/capture": {
      "post": {
        "tags": ["Payments API"],
        "summary": "Capture a payment",
        "description": "<p/>\n\nIf you have successfully authorized a payment, you can now\nfully capture, or partially capture funds from the authorized payment, depending\non whether your selected payment processor supports it. The payment will\nbe updated to `SETTLED` or `SETTLING`, depending on the payment method type.\n\nThe payload sent in this capture request is completely optional. If you don't\nsend a payload with the capture request, the full amount that was authorized\nwill be sent for capture. Below are the available payload attributes, which\ngive you more granular control when capturing funds, if you require it.\n",
        "operationId": "capture_payment_payments__id__capture_post",
        "parameters": [
          {
            "required": true,
            "schema": { "title": "Payment ID", "type": "string" },
            "name": "id",
            "description": "ID of the payment to capture.",
            "in": "path"
          },
          {
            "required": false,
            "schema": { "title": "X-Idempotency-Key", "type": "string" },
            "name": "X-Idempotency-Key",
            "description": "Optional key to make the request idempotent. Learn more in the [Idempotency Key guide](../docs#idempotency-key).",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PaymentCaptureAPIRequest",
                "title": "Data",
                "default": { "final": true }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/PaymentAPIResponse" },
                "example": {
                  "id": "kHdEw9EG",
                  "date": "2021-02-21T15:36:16.367687",
                  "status": "SETTLED",
                  "orderId": "order-abc",
                  "customerId": "customer-123",
                  "currencyCode": "EUR",
                  "amount": 42,
                  "paymentMethod": {
                    "paymentType": "SUBSCRIPTION",
                    "paymentMethodToken": "heNwnqaeRiqvY1UcslfQc3wxNjEzOTIxNjc4",
                    "isVaulted": true,
                    "authorizationType": "FINAL",
                    "descriptor": "Purchase: Socks",
                    "analyticsId": "VtkMDAxZW5isH0HsbbNxZ3lo",
                    "paymentMethodType": "PAYMENT_CARD",
                    "paymentMethodData": {
                      "first6Digits": "411111",
                      "last4Digits": "1111",
                      "expirationMonth": "12",
                      "expirationYear": "2030",
                      "cardholderName": "John Biggins",
                      "network": "Visa",
                      "isNetworkTokenized": false,
                      "binData": {
                        "network": "VISA",
                        "regionalRestriction": "UNKNOWN",
                        "accountNumberType": "UNKNOWN",
                        "accountFundingType": "UNKNOWN",
                        "prepaidReloadableIndicator": "NOT_APPLICABLE",
                        "productUsageType": "UNKNOWN",
                        "productCode": "VISA",
                        "productName": "VISA"
                      }
                    }
                  },
                  "processor": {
                    "name": "STRIPE",
                    "processorMerchantId": "acct_stripe_1234",
                    "amountCaptured": 42,
                    "amountRefunded": 0
                  },
                  "transactions": [
                    {
                      "type": "SALE",
                      "processorStatus": "SETTLED",
                      "processorName": "STRIPE",
                      "processorMerchantId": "acct_stripe_1234",
                      "processorTransactionId": "54c4eb5b3ef8a"
                    }
                  ],
                  "customer": { "email": "customer123@gmail.com" },
                  "metadata": { "productId": 123, "merchantId": "a13bsd62s" },
                  "riskData": {
                    "fraudCheck": {
                      "source": "FRAUD_PROVIDER",
                      "preAuthorizationResult": "THREE_DS",
                      "postAuthorizationResult": "ACCEPT"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Error Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestErrorResponse"
                },
                "example": {
                  "error": {
                    "errorId": "PaymentError",
                    "description": "The payment could not be found",
                    "diagnosticsId": "1234567898"
                  }
                }
              }
            }
          },
          "422": {
            "description": "Error Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnprocessableEntityErrorResponse"
                },
                "example": {
                  "error": {
                    "errorId": "RequestValidationError",
                    "description": "We were unable to validate your request, please check your payload against https://primer.io/docs/api",
                    "diagnosticsId": "1234567898",
                    "validationErrors": [
                      {
                        "model": "PaymentCaptureAPIRequest",
                        "errors": [
                          {
                            "path": "$.amount",
                            "description": "Value must be a valid integer"
                          }
                        ]
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    },
    "/payments/{id}/cancel": {
      "post": {
        "tags": ["Payments API"],
        "summary": "Cancel a payment",
        "description": "<p/>\n\nProvided the payment has not reached `SETTLED` status, Primer will\nsend a \"void\" request to the payment processor, thereby cancelling the payment\nand releasing the hold on customer funds. Upon success, the payment will transition\nto `CANCELLED`. The payload is optional.\n",
        "operationId": "cancel_payment_payments__id__cancel_post",
        "parameters": [
          {
            "required": true,
            "schema": { "title": "Payment ID", "type": "string" },
            "name": "id",
            "description": "ID of payment to cancel.",
            "in": "path"
          },
          {
            "required": false,
            "schema": { "title": "X-Idempotency-Key", "type": "string" },
            "name": "X-Idempotency-Key",
            "description": "Optional key to make the request idempotent. Learn more in the [Idempotency Key guide](../docs#idempotency-key).",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PaymentCancelAPIRequest",
                "title": "Data",
                "default": {}
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/PaymentAPIResponse" },
                "example": {
                  "id": "kHdEw9EG",
                  "date": "2021-02-21T15:36:16.367687",
                  "status": "CANCELLED",
                  "orderId": "order-abc",
                  "customerId": "customer-123",
                  "currencyCode": "EUR",
                  "amount": 42,
                  "paymentMethod": {
                    "paymentType": "SUBSCRIPTION",
                    "paymentMethodToken": "heNwnqaeRiqvY1UcslfQc3wxNjEzOTIxNjc4",
                    "isVaulted": true,
                    "authorizationType": "FINAL",
                    "descriptor": "Purchase: Socks",
                    "analyticsId": "VtkMDAxZW5isH0HsbbNxZ3lo",
                    "paymentMethodType": "PAYMENT_CARD",
                    "paymentMethodData": {
                      "first6Digits": "411111",
                      "last4Digits": "1111",
                      "expirationMonth": "12",
                      "expirationYear": "2030",
                      "cardholderName": "John Biggins",
                      "network": "Visa",
                      "isNetworkTokenized": false,
                      "binData": {
                        "network": "VISA",
                        "regionalRestriction": "UNKNOWN",
                        "accountNumberType": "UNKNOWN",
                        "accountFundingType": "UNKNOWN",
                        "prepaidReloadableIndicator": "NOT_APPLICABLE",
                        "productUsageType": "UNKNOWN",
                        "productCode": "VISA",
                        "productName": "VISA"
                      }
                    }
                  },
                  "processor": {
                    "name": "STRIPE",
                    "processorMerchantId": "acct_stripe_1234",
                    "amountCaptured": 0,
                    "amountRefunded": 0
                  },
                  "transactions": [
                    {
                      "type": "SALE",
                      "processorStatus": "CANCELLED",
                      "processorName": "STRIPE",
                      "processorMerchantId": "acct_stripe_1234",
                      "processorTransactionId": "54c4eb5b3ef8a"
                    }
                  ],
                  "customer": { "email": "customer123@gmail.com" },
                  "metadata": { "productId": 123, "merchantId": "a13bsd62s" },
                  "riskData": {
                    "fraudCheck": {
                      "source": "FRAUD_PROVIDER",
                      "preAuthorizationResult": "THREE_DS",
                      "postAuthorizationResult": "ACCEPT"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Error Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestErrorResponse"
                },
                "example": {
                  "error": {
                    "errorId": "PaymentError",
                    "description": "The payment could not be found",
                    "diagnosticsId": "1234567898"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/payments/{id}/refund": {
      "post": {
        "tags": ["Payments API"],
        "summary": "Refund a payment",
        "description": "<p/>\n\nBy default, this request will refund the full amount.\n\nOptionally, pass in a lesser amount for a partial refund.\n",
        "operationId": "refund_payment_payments__id__refund_post",
        "parameters": [
          {
            "required": true,
            "schema": { "title": "Payment ID", "type": "string" },
            "name": "id",
            "description": "ID of payment to refund.",
            "in": "path"
          },
          {
            "required": false,
            "schema": { "title": "X-Idempotency-Key", "type": "string" },
            "name": "X-Idempotency-Key",
            "description": "Optional key to make the request idempotent. Learn more in the [Idempotency Key guide](../docs#idempotency-key).",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PaymentRefundAPIRequest",
                "title": "Data",
                "default": {}
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/PaymentAPIResponse" },
                "example": {
                  "id": "kHdEw9EG",
                  "date": "2021-02-21T15:36:16.367687",
                  "status": "SETTLED",
                  "orderId": "order-abc",
                  "customerId": "customer-123",
                  "currencyCode": "EUR",
                  "amount": 42,
                  "paymentMethod": {
                    "paymentType": "SUBSCRIPTION",
                    "paymentMethodToken": "heNwnqaeRiqvY1UcslfQc3wxNjEzOTIxNjc4",
                    "isVaulted": true,
                    "authorizationType": "FINAL",
                    "descriptor": "Purchase: Socks",
                    "analyticsId": "VtkMDAxZW5isH0HsbbNxZ3lo",
                    "paymentMethodType": "PAYMENT_CARD",
                    "paymentMethodData": {
                      "first6Digits": "411111",
                      "last4Digits": "1111",
                      "expirationMonth": "12",
                      "expirationYear": "2030",
                      "cardholderName": "John Biggins",
                      "network": "Visa",
                      "isNetworkTokenized": false,
                      "binData": {
                        "network": "VISA",
                        "regionalRestriction": "UNKNOWN",
                        "accountNumberType": "UNKNOWN",
                        "accountFundingType": "UNKNOWN",
                        "prepaidReloadableIndicator": "NOT_APPLICABLE",
                        "productUsageType": "UNKNOWN",
                        "productCode": "VISA",
                        "productName": "VISA"
                      }
                    }
                  },
                  "processor": {
                    "name": "STRIPE",
                    "processorMerchantId": "acct_stripe_1234",
                    "amountCaptured": 42,
                    "amountRefunded": 42
                  },
                  "transactions": [
                    {
                      "type": "SALE",
                      "processorStatus": "SETTLED",
                      "processorName": "STRIPE",
                      "processorMerchantId": "acct_stripe_1234",
                      "processorTransactionId": "54c4eb5b3ef8a"
                    },
                    {
                      "type": "REFUND",
                      "processorStatus": "SETTLED",
                      "processorName": "STRIPE",
                      "processorMerchantId": "acct_stripe_1234",
                      "processorTransactionId": "54c4eb5b3ef8a"
                    }
                  ],
                  "customer": { "email": "customer123@gmail.com" },
                  "metadata": { "productId": 123, "merchantId": "a13bsd62s" },
                  "riskData": {
                    "fraudCheck": {
                      "source": "FRAUD_PROVIDER",
                      "preAuthorizationResult": "THREE_DS",
                      "postAuthorizationResult": "ACCEPT"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Error Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestErrorResponse"
                },
                "example": {
                  "error": {
                    "errorId": "PaymentError",
                    "description": "The payment could not be found",
                    "diagnosticsId": "1234567898"
                  }
                }
              }
            }
          },
          "422": {
            "description": "Error Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnprocessableEntityErrorResponse"
                },
                "example": {
                  "error": {
                    "errorId": "RequestValidationError",
                    "description": "We were unable to validate your request, please check your payload against https://primer.io/docs/api",
                    "diagnosticsId": "1234567898",
                    "validationErrors": [
                      {
                        "model": "PaymentCaptureAPIRequest",
                        "errors": [
                          {
                            "path": "$.amount",
                            "description": "Value must be a valid integer"
                          }
                        ]
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    },
    "/payments/{id}/resume": {
      "post": {
        "tags": ["Payments API"],
        "summary": "Resume a payment",
        "description": "<p/>\n\nResume a payment's workflow execution from a paused state. This\nis usually required when a Workflow was paused in order to get further information\nfrom the customer, or when waiting for an asynchronous response from a third\nparty connection.\n",
        "operationId": "resume_payment_payments__id__resume_post",
        "parameters": [
          {
            "required": true,
            "schema": { "title": "Payment ID", "type": "string" },
            "name": "id",
            "description": "ID of payment to resume.",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PaymentResumeAPIRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/PaymentAPIResponse" },
                "example": {
                  "id": "kHdEw9EG",
                  "date": "2021-02-21T15:36:16.367687",
                  "status": "AUTHORIZED",
                  "orderId": "order-abc",
                  "customerId": "customer-123",
                  "currencyCode": "EUR",
                  "amount": 42,
                  "paymentMethod": {
                    "paymentType": "SUBSCRIPTION",
                    "paymentMethodToken": "heNwnqaeRiqvY1UcslfQc3wxNjEzOTIxNjc4",
                    "isVaulted": true,
                    "authorizationType": "FINAL",
                    "descriptor": "Purchase: Socks",
                    "analyticsId": "VtkMDAxZW5isH0HsbbNxZ3lo",
                    "paymentMethodType": "PAYMENT_CARD",
                    "paymentMethodData": {
                      "first6Digits": "411111",
                      "last4Digits": "1111",
                      "expirationMonth": "12",
                      "expirationYear": "2030",
                      "cardholderName": "John Biggins",
                      "network": "Visa",
                      "isNetworkTokenized": false,
                      "binData": {
                        "network": "VISA",
                        "regionalRestriction": "UNKNOWN",
                        "accountNumberType": "UNKNOWN",
                        "accountFundingType": "UNKNOWN",
                        "prepaidReloadableIndicator": "NOT_APPLICABLE",
                        "productUsageType": "UNKNOWN",
                        "productCode": "VISA",
                        "productName": "VISA"
                      }
                    }
                  },
                  "processor": {
                    "name": "STRIPE",
                    "processorMerchantId": "acct_stripe_1234",
                    "amountCaptured": 0,
                    "amountRefunded": 0
                  },
                  "transactions": [
                    {
                      "type": "SALE",
                      "processorStatus": "AUTHORIZED",
                      "processorName": "STRIPE",
                      "processorMerchantId": "acct_stripe_1234",
                      "processorTransactionId": "54c4eb5b3ef8a"
                    }
                  ],
                  "customer": { "email": "customer123@gmail.com" },
                  "metadata": { "productId": 123, "merchantId": "a13bsd62s" },
                  "riskData": {
                    "fraudCheck": {
                      "source": "FRAUD_PROVIDER",
                      "preAuthorizationResult": "THREE_DS",
                      "postAuthorizationResult": "ACCEPT"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Error Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestErrorResponse"
                },
                "example": {
                  "error": {
                    "errorId": "PaymentError",
                    "description": "The payment could not be found",
                    "diagnosticsId": "1234567898"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/payments/{id}/adjust-authorization": {
      "post": {
        "tags": ["Payments API"],
        "summary": "Adjust authorized amount",
        "description": "<p/>\n\nAdjust authorized amount. This is only possible if `authorizationType` was set to \n`ESTIMATED` when the payment was created, and the mechanism is supported by the payment method.\n",
        "operationId": "adjust_authorization_payments__id__adjust_authorization_post",
        "parameters": [
          {
            "required": true,
            "schema": { "title": "Payment ID", "type": "string" },
            "name": "id",
            "description": "ID of payment for adjusting authorization.",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PaymentAdjustAuthorizationAPIRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/PaymentAPIResponse" },
                "example": {
                  "id": "kHdEw9EG",
                  "date": "2021-02-21T15:36:16.367687",
                  "status": "AUTHORIZED",
                  "orderId": "order-abc",
                  "customerId": "customer-123",
                  "currencyCode": "EUR",
                  "amount": 42,
                  "paymentMethod": {
                    "paymentMethodToken": "heNwnqaeRiqvY1UcslfQc3wxNjEzOTIxNjc4",
                    "authorizationType": "ESTIMATED",
                    "isVaulted": true,
                    "descriptor": "Purchase: Socks",
                    "analyticsId": "VtkMDAxZW5isH0HsbbNxZ3lo",
                    "paymentMethodType": "PAYMENT_CARD",
                    "paymentMethodData": {
                      "first6Digits": "411111",
                      "last4Digits": "1111",
                      "expirationMonth": "12",
                      "expirationYear": "2030",
                      "cardholderName": "John Biggins",
                      "network": "Visa",
                      "isNetworkTokenized": false,
                      "binData": {
                        "network": "VISA",
                        "regionalRestriction": "UNKNOWN",
                        "accountNumberType": "UNKNOWN",
                        "accountFundingType": "UNKNOWN",
                        "prepaidReloadableIndicator": "NOT_APPLICABLE",
                        "productUsageType": "UNKNOWN",
                        "productCode": "VISA",
                        "productName": "VISA"
                      }
                    }
                  },
                  "processor": {
                    "name": "STRIPE",
                    "processorMerchantId": "acct_stripe_1234",
                    "amountCaptured": 0,
                    "amountRefunded": 0
                  },
                  "transactions": [
                    {
                      "type": "SALE",
                      "processorStatus": "AUTHORIZED",
                      "processorName": "STRIPE",
                      "processorMerchantId": "acct_stripe_1234",
                      "processorTransactionId": "54c4eb5b3ef8a"
                    }
                  ],
                  "customer": { "email": "customer123@gmail.com" },
                  "metadata": { "productId": 123, "merchantId": "a13bsd62s" },
                  "riskData": {
                    "fraudCheck": {
                      "source": "FRAUD_PROVIDER",
                      "preAuthorizationResult": "THREE_DS",
                      "postAuthorizationResult": "ACCEPT"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestErrorResponse"
                },
                "examples": {
                  "IncorrectPaymentAuthorizationType": {
                    "summary": "Incorrect authorization type",
                    "value": {
                      "error": {
                        "errorId": "IncorrectPaymentAuthorizationType",
                        "description": "Adjust authorization is only allowed on payments where authorizationType is set to estimated and not final.",
                        "diagnosticsId": "1234567898"
                      }
                    }
                  },
                  "PaymentIsNotAuthorized": {
                    "summary": "Payment is not authorized",
                    "value": {
                      "error": {
                        "errorId": "PaymentIsNotAuthorizedYet",
                        "description": "Adjust Authorization is only allowed on authorized payments.",
                        "diagnosticsId": "1234567898"
                      }
                    }
                  },
                  "AdjustAuthorizationNonCardPayment": {
                    "summary": "Adjust Authorization with non-card payment",
                    "value": {
                      "error": {
                        "errorId": "AdjustAuthorizationNonCardPayment",
                        "description": "Adjust Authorization is only available on card payments.",
                        "diagnosticsId": "1234567898"
                      }
                    }
                  },
                  "AdjustAuthorizationNotSupported": {
                    "summary": "Processor doesn't support authorization adjust",
                    "value": {
                      "error": {
                        "errorId": "AdjustAuthorizationNotSupported",
                        "description": "Adjust Authorization for processor X is not supported.",
                        "diagnosticsId": "1234567898"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Payment not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundErrorResponse"
                },
                "example": {
                  "error": {
                    "errorId": "EntityNotFound",
                    "description": "No matching Payment could be found.",
                    "diagnosticsId": "1234567898",
                    "validationErrors": []
                  }
                }
              }
            }
          },
          "422": {
            "description": "Invalid payload",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnprocessableEntityErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/payments/{id}": {
      "get": {
        "tags": ["Payments API"],
        "summary": "Get a payment",
        "description": "<p/>\n\nRetrieve a payment by its ID.\n",
        "operationId": "get_payment_by_id_payments__id__get",
        "parameters": [
          {
            "required": true,
            "schema": { "title": "Payment ID", "type": "string" },
            "name": "id",
            "description": "ID of payment to retrieve.",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/PaymentAPIResponse" },
                "example": {
                  "id": "kHdEw9EG",
                  "date": "2021-02-21T15:36:16.367687",
                  "status": "AUTHORIZED",
                  "orderId": "order-abc",
                  "customerId": "customer-123",
                  "currencyCode": "EUR",
                  "amount": 42,
                  "paymentMethod": {
                    "paymentType": "SUBSCRIPTION",
                    "paymentMethodToken": "heNwnqaeRiqvY1UcslfQc3wxNjEzOTIxNjc4",
                    "isVaulted": true,
                    "authorizationType": "FINAL",
                    "descriptor": "Purchase: Socks",
                    "analyticsId": "VtkMDAxZW5isH0HsbbNxZ3lo",
                    "paymentMethodType": "PAYMENT_CARD",
                    "paymentMethodData": {
                      "first6Digits": "411111",
                      "last4Digits": "1111",
                      "expirationMonth": "12",
                      "expirationYear": "2030",
                      "cardholderName": "John Biggins",
                      "network": "Visa",
                      "isNetworkTokenized": false,
                      "binData": {
                        "network": "VISA",
                        "regionalRestriction": "UNKNOWN",
                        "accountNumberType": "UNKNOWN",
                        "accountFundingType": "UNKNOWN",
                        "prepaidReloadableIndicator": "NOT_APPLICABLE",
                        "productUsageType": "UNKNOWN",
                        "productCode": "VISA",
                        "productName": "VISA"
                      }
                    }
                  },
                  "processor": {
                    "name": "STRIPE",
                    "processorMerchantId": "acct_stripe_1234",
                    "amountCaptured": 0,
                    "amountRefunded": 0
                  },
                  "transactions": [
                    {
                      "type": "SALE",
                      "processorStatus": "AUTHORIZED",
                      "processorName": "STRIPE",
                      "processorMerchantId": "acct_stripe_1234",
                      "processorTransactionId": "54c4eb5b3ef8a"
                    }
                  ],
                  "customer": { "email": "customer123@gmail.com" },
                  "metadata": { "productId": 123, "merchantId": "a13bsd62s" }
                }
              }
            }
          },
          "400": {
            "description": "Error Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestErrorResponse"
                },
                "example": {
                  "error": {
                    "errorId": "PaymentError",
                    "description": "The payment could not be found",
                    "diagnosticsId": "1234567898"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/payment-instruments/{paymentMethodToken}/vault": {
      "post": {
        "tags": ["Payment Methods API"],
        "summary": "Save a payment method token",
        "description": "<p/>\n\nSave a `SINGLE_USE` payment method token so it can be used\nagain later. You can optionally choose to verify the payment method\nbefore vaulting. If verification fails, no payment method data will\nbe vaulted. Verification can minimise fraud and boost subscription\nrates for recurring payments.\n\nIf you try to vault an already vaulted token, you will get the existing vaulted token back.\n",
        "operationId": "vault_payment_method_payment_methods__token__vault_post",
        "parameters": [
          {
            "description": "Payment method token to store.",
            "required": true,
            "schema": {
              "title": "Payment Method Token",
              "type": "string",
              "description": "Payment method token"
            },
            "name": "paymentMethodToken",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VaultPaymentMethodAPIRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VerifiedMerchantPaymentMethodTokenAPIResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestErrorResponse"
                },
                "example": {
                  "error": {
                    "errorId": "FailedVerification",
                    "description": "Payment method could not be verified",
                    "diagnosticsId": "1234567898"
                  }
                }
              }
            }
          },
          "422": {
            "description": "Error Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnprocessableEntityErrorResponse"
                },
                "example": {
                  "error": {
                    "errorId": "RequestValidationError",
                    "description": "We were unable to validate your request, please check your payload against https://primer.io/docs/api",
                    "diagnosticsId": "1234567898",
                    "validationErrors": [
                      {
                        "model": "VaultPaymentInstrumentAPIRequest",
                        "errors": [
                          {
                            "path": "$.customerId",
                            "description": "Ensure this value has at least 1 characters"
                          }
                        ]
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    },
    "/payment-instruments": {
      "get": {
        "tags": ["Payment Methods API"],
        "summary": "List saved payment methods",
        "description": "Retrieve a list of stored payment methods for a customer.",
        "operationId": "get_payment_methods_payment_methods_get",
        "parameters": [
          {
            "description": "Return payment methods for this customer ID.",
            "required": true,
            "schema": {
              "title": "Customer ID",
              "type": "string",
              "description": "Return payment methods for this customer ID."
            },
            "name": "customer_id",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VerifiedMerchantPaymentMethodTokenListAPIResponse"
                }
              }
            }
          }
        }
      }
    },
    "/payment-instruments/{paymentMethodToken}": {
      "delete": {
        "tags": ["Payment Methods API"],
        "summary": "Delete a saved payment method",
        "description": "Delete a saved payment method.",
        "operationId": "delete_payment_method_payment_methods__token__delete",
        "parameters": [
          {
            "description": "Saved payment method token to delete.",
            "required": true,
            "schema": {
              "title": "Payment Method Token",
              "type": "string",
              "description": "Payment method token"
            },
            "name": "paymentMethodToken",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VerifiedMerchantPaymentMethodTokenAPIResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestErrorResponse"
                },
                "example": {
                  "error": {
                    "errorId": "InvalidPaymentInstrumentToken",
                    "description": "Invalid payment instrument.",
                    "diagnosticsId": "1234567898"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/payment-instruments/{paymentMethodToken}/default": {
      "post": {
        "tags": ["Payment Methods API"],
        "summary": "Update the default saved payment method",
        "description": "Update a saved payment method to be the default stored payment method for a customer.",
        "operationId": "set_payment_method_default_payment_methods__token__default_post",
        "parameters": [
          {
            "description": "Saved payment method token to set to default.",
            "required": true,
            "schema": {
              "title": "Token",
              "type": "string",
              "description": "Payment method token"
            },
            "name": "paymentMethodToken",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MerchantPaymentMethodTokenAPIResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestErrorResponse"
                },
                "example": {
                  "error": {
                    "errorId": "InvalidPaymentInstrumentToken",
                    "description": "Invalid payment instrument.",
                    "diagnosticsId": "1234567898"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/observability/payments": {
      "post": {
        "summary": "Create an external payment",
        "operationId": "external_payment",
        "description": "The Observability API is currently in beta. Please contact [support@primer.io](mailto:support@primer.io) for access.\n\nCreating a payment with the Observability API sends external payments data to Primer to populate [Observability Payment Insights dashboards](https://primer.io/observability). Payments created through the [Payments API](/reference/create_payment_payments_post) will be automatically populated and do not need to be sent in the Observability API.\n\nCreate an API key with the `observability-payments:write` scope.\n\nEach record must be created with a unique `paymentId`. To update a payment record with new data use the `PATCH` endpoint.\n",
        "tags": ["Observability API"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PaymentsInsightsPayment"
              },
              "examples": {
                "CreatePaymentExample": {
                  "value": {
                    "paymentId": "IHQlakKC",
                    "currencyCode": "EUR",
                    "amount": 700,
                    "createdAt": "2022-12-22T17:27:08Z",
                    "processor": {
                      "name": "STRIPE",
                      "merchantId": "processor-merchant-id-1"
                    },
                    "status": "DECLINED",
                    "statusReason": {
                      "type": "APPLICATION_ERROR",
                      "declineType": "HARD_DECLINE",
                      "code": "EXPIRED_CARD"
                    },
                    "metadata": { "key-123": "value-123" },
                    "paymentType": "FIRST_PAYMENT",
                    "order": { "id": "order-abc", "countryCode": "GB" },
                    "descriptor": "Authorized ticket charge",
                    "paymentMethod": {
                      "paymentMethodType": "PAYMENT_CARD",
                      "threeDSecureAuthentication": {
                        "transStatus": "A",
                        "transStatusReason": "01",
                        "responseCode": "NOT_PERFORMED",
                        "eci": "02",
                        "challengeIssued": false,
                        "protocolVersion": "2.1.0",
                        "reasonCode": "NOT_SUPPORTED_BY_ISSUER",
                        "reasonText": "Access Not Authorized"
                      },
                      "data": {
                        "first6Digits": "220073",
                        "binData": {
                          "network": "VISA",
                          "issuerCountryCode": "GB",
                          "issuerName": "121 FINANCIAL CREDIT UNION",
                          "productUsageType": "BUSINESS",
                          "accountFundingType": "PREPAID"
                        }
                      }
                    }
                  },
                  "summary": "Create payment example"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentsInsightsPayment"
                },
                "examples": {
                  "CreatePaymentExample": {
                    "value": {
                      "paymentId": "IHQlakKC",
                      "currencyCode": "EUR",
                      "amount": 700,
                      "createdAt": "2022-12-22T17:27:08Z",
                      "processor": {
                        "name": "STRIPE",
                        "merchantId": "processor-merchant-id-1"
                      },
                      "status": "DECLINED",
                      "statusReason": {
                        "type": "APPLICATION_ERROR",
                        "declineType": "HARD_DECLINE",
                        "code": "EXPIRED_CARD"
                      },
                      "metadata": { "key-123": "value-123" },
                      "paymentType": "FIRST_PAYMENT",
                      "order": { "id": "order-abc", "countryCode": "GB" },
                      "descriptor": "Authorized ticket charge",
                      "paymentMethod": {
                        "paymentMethodType": "PAYMENT_CARD",
                        "threeDSecureAuthentication": {
                          "transStatus": "A",
                          "transStatusReason": "01",
                          "responseCode": "NOT_PERFORMED",
                          "eci": "02",
                          "challengeIssued": false,
                          "protocolVersion": "2.1.0",
                          "reasonCode": "NOT_SUPPORTED_BY_ISSUER",
                          "reasonText": "Access Not Authorized"
                        },
                        "data": {
                          "first6Digits": "220073",
                          "binData": {
                            "network": "VISA",
                            "issuerCountryCode": "GB",
                            "issuerName": "121 FINANCIAL CREDIT UNION",
                            "productUsageType": "BUSINESS",
                            "accountFundingType": "PREPAID"
                          }
                        }
                      }
                    },
                    "summary": "Create payment example"
                  }
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/observability/payments/{paymentId}": {
      "patch": {
        "summary": "Update an external payment",
        "operationId": "external_payment_update",
        "description": "The Observability API is currently in beta. Please contact [support@primer.io](mailto:support@primer.io) for access.\n\nYou can update payments created earlier through the Observability API with this endpoint. The only required field for the request is `paymentId`. Other supported request fields are the same as for the [create an external payment](/reference/external_payment) API call.\n\nIf you wish to update nested fields on the payment, you only need to pass the fields that you wish to update. For example to update the processor name, you would pass in `processor.name` only.\n\nThe response will contain all the fields of the payment including the ones that were changed.\n",
        "parameters": [
          {
            "in": "path",
            "name": "paymentId",
            "schema": { "type": "string" },
            "required": true
          }
        ],
        "tags": ["Observability API"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PaymentsInsightsPatchedPayment"
              },
              "examples": {
                "CreatePaymentExample": {
                  "value": {
                    "paymentId": "IHQlakKC",
                    "currencyCode": "EUR",
                    "amount": 700,
                    "createdAt": "2022-12-22T17:27:08Z",
                    "processor": {
                      "name": "STRIPE",
                      "merchantId": "processor-merchant-id-1"
                    },
                    "status": "DECLINED",
                    "statusReason": {
                      "type": "APPLICATION_ERROR",
                      "declineType": "HARD_DECLINE",
                      "code": "EXPIRED_CARD"
                    },
                    "metadata": { "key-123": "value-123" },
                    "paymentType": "FIRST_PAYMENT",
                    "order": { "id": "order-abc", "countryCode": "GB" },
                    "descriptor": "Authorized ticket charge",
                    "paymentMethod": {
                      "paymentMethodType": "PAYMENT_CARD",
                      "threeDSecureAuthentication": {
                        "transStatus": "A",
                        "transStatusReason": "01",
                        "responseCode": "NOT_PERFORMED",
                        "eci": "02",
                        "challengeIssued": false,
                        "protocolVersion": "2.1.0",
                        "reasonCode": "NOT_SUPPORTED_BY_ISSUER",
                        "reasonText": "Access Not Authorized"
                      },
                      "data": {
                        "first6Digits": "220073",
                        "binData": {
                          "network": "VISA",
                          "issuerCountryCode": "GB",
                          "issuerName": "121 FINANCIAL CREDIT UNION",
                          "productUsageType": "BUSINESS",
                          "accountFundingType": "PREPAID"
                        }
                      }
                    }
                  },
                  "summary": "Create payment example"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentsInsightsPayment"
                },
                "examples": {
                  "CreatePaymentExample": {
                    "value": {
                      "paymentId": "IHQlakKC",
                      "currencyCode": "EUR",
                      "amount": 700,
                      "createdAt": "2022-12-22T17:27:08Z",
                      "processor": {
                        "name": "STRIPE",
                        "merchantId": "processor-merchant-id-1"
                      },
                      "status": "DECLINED",
                      "statusReason": {
                        "type": "APPLICATION_ERROR",
                        "declineType": "HARD_DECLINE",
                        "code": "EXPIRED_CARD"
                      },
                      "metadata": { "key-123": "value-123" },
                      "paymentType": "FIRST_PAYMENT",
                      "order": { "id": "order-abc", "countryCode": "GB" },
                      "descriptor": "Authorized ticket charge",
                      "paymentMethod": {
                        "paymentMethodType": "PAYMENT_CARD",
                        "threeDSecureAuthentication": {
                          "transStatus": "A",
                          "transStatusReason": "01",
                          "responseCode": "NOT_PERFORMED",
                          "eci": "02",
                          "challengeIssued": false,
                          "protocolVersion": "2.1.0",
                          "reasonCode": "NOT_SUPPORTED_BY_ISSUER",
                          "reasonText": "Access Not Authorized"
                        },
                        "data": {
                          "first6Digits": "220073",
                          "binData": {
                            "network": "VISA",
                            "issuerCountryCode": "GB",
                            "issuerName": "121 FINANCIAL CREDIT UNION",
                            "productUsageType": "BUSINESS",
                            "accountFundingType": "PREPAID"
                          }
                        }
                      }
                    },
                    "summary": "Create payment example"
                  }
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/loyalty-customers/{id}": {
      "get": {
        "tags": ["Loyalty API"],
        "summary": "Get a loyalty customer's points balance",
        "description": "The Loyalty API is currently in beta.\nPlease contact [support@primer.io](mailto:support@primer.io) for access.\n\nCreate an API key with the `loyalty-transactions:read` scopes.\n\nGet a loyalty customer by ID and connection ID. This includes the customer's points balance.\n\nThe `connectionId` is the unique Primer identifier for your loyalty provider connection. Primer will provide this once the loyalty provider connection is created.\n\nThe `customerId` refers to the customer identifier on the loyalty provider's side.\n",
        "operationId": "get_loyalty_customer",
        "parameters": [
          {
            "required": true,
            "schema": { "title": "Connection ID", "type": "string" },
            "name": "connectionId",
            "description": "ID of the Primer connection configuration.",
            "in": "query"
          },
          {
            "required": true,
            "schema": { "title": "Loyalty Customer ID", "type": "string" },
            "name": "id",
            "description": "The unique identifier for the customer on the loyalty provider.",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoyaltyAPIBalanceResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestErrorResponse"
                },
                "example": {
                  "error": {
                    "errorId": "ConnectionNotFound",
                    "description": "The provided connection ID doesn't exist.",
                    "recoverySuggestion": "Please provide a valid connection ID.",
                    "diagnosticsId": "1234567898"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/loyalty-transactions": {
      "post": {
        "tags": ["Loyalty API"],
        "summary": "Create a loyalty transaction",
        "description": "The Loyalty API is currently in beta.\nPlease contact [support@primer.io](mailto:support@primer.io) for access.\n\nCreate an API key with the `loyalty-transactions:write` scopes.\n\nCreate a loyalty transaction. This is either a points redemption or a points refund.\n",
        "operationId": "post_loyalty_transaction",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoyaltyAPITransactionRequest",
                "title": "Request"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoyaltyAPITransactionResponse"
                },
                "example": {
                  "date": "2023-01-01",
                  "id": "t101",
                  "connectionId": "waon-123",
                  "orderId": "order-123",
                  "customerId": "waon-customer-123",
                  "connectionTransactionId": "waonTx1",
                  "connectionName": "WOAN",
                  "type": "REDEMPTION",
                  "value": 200
                }
              }
            }
          },
          "400": {
            "description": "Error Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestErrorResponse"
                },
                "example": {
                  "error": {
                    "errorId": "ConnectionNotFound",
                    "description": "The provided connection ID doesn't exist.",
                    "recoverySuggestion": "Please provide a valid connection ID.",
                    "diagnosticsId": "1234567898"
                  }
                }
              }
            }
          },
          "422": {
            "description": "Error Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnprocessableEntityErrorResponse"
                },
                "example": {
                  "error": {
                    "errorId": "RequestValidationError",
                    "description": "We were unable to validate your request, please check your payload against https://primer.io/docs/api",
                    "diagnosticsId": "1234567898",
                    "validationErrors": [
                      {
                        "model": "RedeemAPIRequest",
                        "errors": [
                          {
                            "path": "$.order_id",
                            "description": "Value must be a valid string"
                          }
                        ]
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": ["Loyalty API"],
        "summary": "List the transactions for a customer",
        "description": "The Loyalty API is currently in beta.\nPlease contact [support@primer.io](mailto:support@primer.io) for access.\n\nCreate an API key with the `loyalty-transactions:read` scopes.\n\nGet all your loyalty transactions. You can filter by `connectionId` (recommended) and by `customerId` and `orderId`.\n\nAdditionally provide a `limit` to restrict the number of transactions in the response, and an `offset` to determine where to start.\n",
        "operationId": "get_loyalty_customer_transactions",
        "parameters": [
          {
            "description": "Filter transactions by customer Id.",
            "required": false,
            "schema": { "title": "Connection ID", "type": "string" },
            "name": "connectionId",
            "in": "query"
          },
          {
            "description": "Filter transactions by customer Id.",
            "required": false,
            "schema": { "title": "Loyalty Customer ID", "type": "string" },
            "name": "customerId",
            "in": "query"
          },
          {
            "description": "Filter transactions by orderId.",
            "required": false,
            "schema": { "title": "Order ID", "type": "string" },
            "name": "orderId",
            "in": "query"
          },
          {
            "description": "Limit the number of returned results",
            "required": false,
            "schema": { "title": "Limit", "type": "integer", "default": 50 },
            "name": "limit",
            "in": "query",
            "example": 10
          },
          {
            "description": "The number of items to skip before returning results",
            "required": false,
            "schema": { "title": "Offset", "type": "integer", "default": 0 },
            "name": "offset",
            "in": "query",
            "example": 20
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoyaltyAPITransactionsListResponse"
                },
                "example": {
                  "items": [
                    {
                      "id": "t101",
                      "date": "2023-01-01T12:00:00.00000",
                      "connectionId": "waon-123",
                      "customerId": "waon-customer-123",
                      "orderId": "order-123",
                      "connectionName": "WOAN",
                      "connectionTransactionId": "waonTx1",
                      "type": "REDEMPTION",
                      "value": 200
                    },
                    {
                      "id": "t102",
                      "date": "2023-01-02T12:00:00.00000",
                      "connectionId": "waon-123",
                      "customerId": "waon-customer-123",
                      "orderId": "order-123",
                      "connectionName": "WOAN",
                      "connectionTransactionId": "waonTx1",
                      "type": "REDEMPTION",
                      "value": 200
                    }
                  ],
                  "total": 54,
                  "limit": 2,
                  "offset": 0
                }
              }
            }
          },
          "400": {
            "description": "Error Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestErrorResponse"
                },
                "example": {
                  "error": {
                    "errorId": "ConnectionNotFound",
                    "description": "The provided connection ID doesn't exist.",
                    "recoverySuggestion": "Please provide a valid connection ID.",
                    "diagnosticsId": "1234567898"
                  }
                }
              }
            }
          },
          "422": {
            "description": "Error Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnprocessableEntityErrorResponse"
                },
                "example": {
                  "error": {
                    "errorId": "RequestValidationError",
                    "description": "Invalid type for `orderId`",
                    "recoverySuggestion": "OrderID must be a valid string",
                    "diagnosticsId": "1234567898"
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "ApiKeyAuth": { "type": "apiKey", "in": "header", "name": "X-API-KEY" }
    },
    "schemas": {
      "AccountFundingTypeEnum": {
        "title": "AccountFundingTypeEnum",
        "enum": ["CREDIT", "DEBIT", "PREPAID", "CHARGE", "DEFERRED_DEBIT", "UNKNOWN"],
        "type": "string",
        "description": "An enumeration."
      },
      "ApayaCustomerTokenAPISchema": {
        "title": "ApayaCustomerTokenAPISchema",
        "required": ["mx"],
        "type": "object",
        "properties": {
          "mx": { "title": "Mx", "type": "string" },
          "mnc": { "title": "Mnc", "type": "integer" },
          "mcc": { "title": "Mcc", "type": "integer" }
        }
      },
      "BinDataAPISchema": {
        "title": "BinDataAPISchema",
        "required": [
          "network",
          "regionalRestriction",
          "accountNumberType",
          "accountFundingType",
          "prepaidReloadableIndicator",
          "productUsageType",
          "productCode",
          "productName"
        ],
        "type": "object",
        "properties": {
          "network": { "$ref": "#/components/schemas/CardNetworkEnum" },
          "issuerCountryCode": {
            "$ref": "#/components/schemas/CountryCodeEnum"
          },
          "issuerName": { "title": "Issuername", "type": "string" },
          "issuerCurrencyCode": { "$ref": "#/components/schemas/Currency" },
          "regionalRestriction": {
            "$ref": "#/components/schemas/CardRegionRestrictionEnum"
          },
          "accountNumberType": {
            "$ref": "#/components/schemas/CardAccountNumberTypeEnum"
          },
          "accountFundingType": {
            "$ref": "#/components/schemas/AccountFundingTypeEnum"
          },
          "prepaidReloadableIndicator": {
            "$ref": "#/components/schemas/PrepaidReloadableEnum"
          },
          "productUsageType": {
            "$ref": "#/components/schemas/CardProductTypeEnum"
          },
          "productCode": { "title": "Productcode", "type": "string" },
          "productName": { "title": "Productname", "type": "string" }
        }
      },
      "BlockingPaymentActionTypeEnum": {
        "title": "BlockingPaymentActionTypeEnum",
        "enum": ["3DS_AUTHENTICATION", "USE_PRIMER_SDK", "PAYMENT_METHOD_VOUCHER", "PROCESSOR_3DS"],
        "type": "string",
        "description": "An enumeration."
      },
      "CardAccountNumberTypeEnum": {
        "title": "CardAccountNumberTypeEnum",
        "enum": ["PRIMARY_ACCOUNT_NUMBER", "NETWORK_TOKEN", "UNKNOWN"],
        "type": "string",
        "description": "An enumeration."
      },
      "CardNetworkEnum": {
        "title": "CardNetworkEnum",
        "enum": [
          "AMEX",
          "DANKORT",
          "DINERS_CLUB",
          "DISCOVER",
          "ENROUTE",
          "ELO",
          "HIPER",
          "INTERAC",
          "JCB",
          "MAESTRO",
          "MASTERCARD",
          "MIR",
          "PRIVATE_LABEL",
          "UNIONPAY",
          "VISA",
          "OTHER"
        ],
        "type": "string",
        "description": "The list of available card networks.\n"
      },
      "CardProductTypeEnum": {
        "title": "CardProductTypeEnum",
        "enum": ["CONSUMER", "BUSINESS", "GOVERNMENT", "UNKNOWN"],
        "type": "string",
        "description": "An enumeration."
      },
      "CardRegionRestrictionEnum": {
        "title": "CardRegionRestrictionEnum",
        "enum": ["DOMESTIC_USE_ONLY", "NONE", "UNKNOWN"],
        "type": "string",
        "description": "An enumeration."
      },
      "ClientSessionUpdateAPIRequest": {
        "title": "ClientSessionUpdateAPIRequest",
        "type": "object",
        "properties": {
          "clientToken": {
            "title": "Client token",
            "type": "string",
            "description": "Client token for use in the Primer-JS SDK obtained via `POST` /client-session API call."
          },
          "customerId": {
            "title": "The ID of the customer using the checkout.",
            "type": "string",
            "description": "A unique identifier for your customer."
          },
          "orderId": {
            "title": "Order ID",
            "type": "string",
            "description": "Your reference for the order."
          },
          "currencyCode": {
            "title": "Currency",
            "type": "string",
            "description": "\nThe 3-letter currency code in [ISO 4217 format](https://en.wikipedia.org/wiki/ISO_4217#Active_codes).\ne.g. use `USD` for US dollars.\n"
          },
          "amount": {
            "title": "Payment amount",
            "minimum": 0,
            "type": "integer",
            "description": "The amount you would like to charge the customer, in minor units. e.g. for $7, use `700`.\n\nSome currencies, such as Japanese Yen, do not have minor units. In this case you should use the value as it is, without any formatting. For example for ¥100, use `100`.\n\nIf the amount is provided on this level, it would override any amount calculated from the provided line items, shipping and other amounts."
          },
          "metadata": {
            "title": "Payment Metadata",
            "type": "object",
            "description": "Additional data to be used throughout the payment lifecycle.\n\nProvide the entire object to update it. Anything provided previously will be overwritten.\n"
          },
          "customer": {
            "$ref": "#/components/schemas/CheckoutCustomerDetailsAPISchema",
            "title": "Customer Details",
            "description": "More information associated with the customer.\n\nEach of the fields in this object must be updated in its entirety, i.e. provide the entire object to update it. Anything provided previously will be overwritten.\n"
          },
          "order": {
            "$ref": "#/components/schemas/OrderDetailsAPISchema",
            "title": "Order Details",
            "description": "More information associated with the order.\n\nEach of the fields in this object must be updated in its entirety, i.e. provide the entire object to update it. Anything provided previously will be overwritten.\n"
          },
          "paymentMethod": {
            "$ref": "#/components/schemas/CheckoutPaymentMethodOptionsAPISchema",
            "title": "Payment Method Options",
            "description": "Enable certain options associated with the payment method. Provide the entire object to update it. Anything provided previously will be overwritten."
          }
        },
        "additionalProperties": false,
        "example": {
          "clientToken": "client-session-token",
          "customerId": "customer-123",
          "orderId": "order-abc",
          "customer": { "emailAddress": "john@primer.io" },
          "amount": 500,
          "paymentMethod": { "authorizationType": "FINAL" },
          "order": {
            "lineItems": [
              {
                "itemId": "shoe-123",
                "description": "Blue Shoe",
                "amount": 100,
                "quantity": 10
              }
            ],
            "countryCode": "FR"
          }
        }
      },
      "ClientSessionAPIRequest": {
        "title": "ClientSessionAPIRequest",
        "type": "object",
        "properties": {
          "orderId": {
            "title": "Order identifier",
            "type": "string",
            "description": "Your reference for the payment.",
            "minLength": 1,
            "maxLength": 256
          },
          "currencyCode": {
            "$ref": "#/components/schemas/Currency",
            "title": "Currency",
            "description": "The 3-letter currency code in [ISO 4217 format](https://en.wikipedia.org/wiki/ISO_4217#Active_codes).\ne.g. use `USD` for US dollars.\n"
          },
          "amount": {
            "title": "Payment amount",
            "minimum": 0,
            "type": "integer",
            "description": "The amount you would like to charge the customer, in minor units. e.g. for $7, use `700`.\n\nSome currencies, such as Japanese Yen, do not have minor units. In this case you should use the value as it is, without any formatting. For example for ¥100, use `100`.\n\nIf the amount is provided on this level, it would override any amount calculated from the provided line items, shipping and other amounts."
          },
          "order": {
            "$ref": "#/components/schemas/OrderDetailsAPISchema",
            "title": "Order Details",
            "description": "More information associated with the order."
          },
          "customerId": {
            "title": "The ID of the customer using the checkout",
            "type": "string",
            "description": "A unique identifier for your customer.\nCreate a client session token with a `customerId` to enable the client-side SDK to retrieve and manage your customer's saved payment methods. A client session token also enables saving payment methods against this customer id.",
            "minLength": 1,
            "maxLength": 256
          },
          "customer": {
            "$ref": "#/components/schemas/CheckoutCustomerDetailsAPISchema",
            "title": "Customer Details",
            "description": "More information associated with the customer."
          },
          "metadata": {
            "title": "Payment Metadata",
            "type": "object",
            "description": "Additional data to be used throughout the payment lifecycle.\n\nA dictionary of key-value pairs where the values can only be strings or\nintegers.\n\ne.g. `{\"productId\": 1001, \"merchantId\": \"a13bsd62s\"}`\n"
          },
          "paymentMethod": {
            "$ref": "#/components/schemas/CheckoutPaymentMethodOptionsAPISchema",
            "title": "Payment Method Options",
            "description": "Enable certain options associated with the payment method."
          }
        },
        "additionalProperties": false,
        "example": {
          "orderId": "order-abc",
          "currencyCode": "GBP",
          "amount": 1000,
          "order": {
            "countryCode": "FR,",
            "lineItems": [
              {
                "itemId": "shoe-123",
                "description": "Blue Shoe",
                "amount": 100,
                "quantity": 10
              }
            ]
          },
          "customerId": "customer-123",
          "customer": { "emailAddress": "john@primer.io" },
          "metadata": { "productType": "Shoes" },
          "paymentMethod": {
            "descriptor": "Purchase: Shoes",
            "paymentMethodType": "PAYMENT_CARD",
            "vaultOnSuccess": true,
            "vaultOn3DS": false,
            "options": {
              "PAYMENT_CARD": {
                "networks": { "VISA": { "surcharge": { "amount": 10 } } }
              },
              "GOOGLE_PAY": { "surcharge": { "amount": 20 } }
            },
            "authorizationType": "ESTIMATED"
          }
        }
      },
      "OrderDetailsAPISchema": {
        "title": "OrderDetailsAPISchema",
        "type": "object",
        "properties": {
          "lineItems": {
            "title": "Line Items",
            "type": "array",
            "items": { "$ref": "#/components/schemas/OrderLineItemsAPISchema" },
            "description": "The details of the line items of the order."
          },
          "countryCode": {
            "$ref": "#/components/schemas/CountryCodeEnum",
            "title": "Country Code",
            "description": "The country in which the order is created"
          },
          "retailerCountryCode": {
            "$ref": "#/components/schemas/CountryCodeEnum",
            "title": "Retailer Country Code",
            "description": "The country code of the retailer"
          },
          "fees": {
            "title": "Fee Details",
            "type": "array",
            "items": { "$ref": "#/components/schemas/OrderFeesAPISchema" },
            "description": "The details of fees charged."
          },
          "shipping": {
            "$ref": "#/components/schemas/OrderShippingAPISchema",
            "title": "Shipping Details",
            "description": "The details of shipping charged."
          }
        }
      },
      "OrderFeesAPISchema": {
        "title": "OrderFeesAPISchema",
        "type": "object",
        "required": ["amount"],
        "properties": {
          "amount": {
            "minimum": 0,
            "type": "integer",
            "description": "The fee amount charged to the customer, in minor  units. e.g. for $7, use `700`."
          },
          "type": {
            "type": "string",
            "description": "The type of fee.",
            "minLength": 1,
            "maxLength": 256
          },
          "description": {
            "type": "string",
            "description": "A description of the fee, e.g. \"Currency Conversion Fee\".",
            "minLength": 1,
            "maxLength": 256
          }
        }
      },
      "OrderLineItemsAPISchema": {
        "title": "OrderLineItemsAPISchema",
        "description": "The details of the line items of the order.\n\nThe total amount of a line item is calculated like so: \n````\n  totalAmount = (amount * quantity) - discountAmount + taxAmount\n```\n",
        "type": "object",
        "required": ["amount"],
        "properties": {
          "itemId": {
            "title": "Item ID",
            "type": "string",
            "description": "A unique identifier for the line item.",
            "minLength": 1,
            "maxLength": 256
          },
          "name": {
            "title": "Name",
            "type": "string",
            "description": "A name of the item.",
            "maxLength": 256
          },
          "description": {
            "title": "Item ID",
            "type": "string",
            "description": "A description of the item.",
            "maxLength": 256
          },
          "amount": {
            "minimum": 0,
            "type": "integer",
            "description": "The amount charged to the customer, in minor units. The minimum amount is 0."
          },
          "quantity": {
            "type": "integer",
            "description": "The number of the particular line item that is being ordered.",
            "default": 1
          },
          "discountAmount": {
            "title": "Discount Amount",
            "minimum": 0,
            "type": "integer",
            "description": "Any discount applicable to this item, in minor units. This discount is applied for the entire line item, and not per `quantity`."
          },
          "taxAmount": {
            "title": "Tax Amount",
            "minimum": 0,
            "type": "integer",
            "description": "The tax charged on this item, in minor units. This tax amount is applied for the entire line item, and not per `quantity`."
          },
          "taxCode": {
            "title": "Tax Code",
            "type": "string",
            "description": "The tax code associated with this item, in minor units. This is required for Primer-initiated tax calculations.",
            "minLength": 1,
            "maxLength": 256
          },
          "productType": {
            "$ref": "#/components/schemas/ProductTypeEnum",
            "title": "Product Type",
            "description": "An identifier for the product type."
          },
          "productData": {
            "$ref": "#/components/schemas/OrderLineItemsProductDataAPISchema",
            "title": "Product Data",
            "description": "Details related to the product"
          }
        }
      },
      "OrderLineItemsProductDataAPISchema": {
        "title": "OrderLineItemsAPISchema",
        "description": "Details related to the product",
        "type": "object",
        "properties": {
          "sku": {
            "title": "SKU",
            "type": "string",
            "description": "The product SKU",
            "minLength": 1,
            "maxLength": 256
          },
          "brand": {
            "title": "Brand",
            "type": "string",
            "description": "The product brand",
            "minLength": 1,
            "maxLength": 256
          },
          "color": {
            "title": "Color",
            "type": "string",
            "description": "The product color",
            "minLength": 1,
            "maxLength": 256
          },
          "globalTradeItemNumber": {
            "title": "Global Trade Item Number",
            "type": "string",
            "description": "The product Global Trade Item Number (e.g. ISBN)",
            "minLength": 1,
            "maxLength": 256
          },
          "manufacturerPartNumber": {
            "title": "Manufacturer Part Number",
            "type": "string",
            "description": "The product Manufacturer Part Number",
            "minLength": 1,
            "maxLength": 256
          },
          "weight": {
            "title": "Weight",
            "type": "number",
            "description": "The product weight",
            "minimum": 0
          },
          "weightUnit": {
            "title": "SKU",
            "type": "string",
            "description": "The product weight unit (e.g. kg, g)",
            "minLength": 1,
            "maxLength": 256
          }
        }
      },
      "OrderShippingAPISchema": {
        "title": "OrderShippingAPISchema",
        "type": "object",
        "properties": {
          "amount": {
            "minimum": 0,
            "type": "integer",
            "description": "The shipping amount charged to the customer, in minor units. e.g. for $7, use `700`."
          }
        }
      },
      "CheckoutPaymentMethodOptionsAPISchema": {
        "title": "PaymentMethodOptionsAPISchema",
        "type": "object",
        "properties": {
          "vaultOnSuccess": {
            "type": "boolean",
            "description": "Whether the payment method should be vaulted on a successful payment or not.",
            "default": false
          },
          "vaultOn3DS": {
            "type": "boolean",
            "description": "Whether the payment method should be vaulted after a successful 3DS authentication or not.",
            "default": false
          },
          "descriptor": {
            "title": "Payment descriptor",
            "type": "string",
            "description": "A description of the payment, as it would typically appear on a bank statement.",
            "maxLength": 256
          },
          "paymentType": {
            "$ref": "#/components/schemas/RecurringPaymentTypeSchema"
          },
          "options": {
            "title": "Payment Method Options",
            "type": "object",
            "description": "Additional options for the payment methods represented as dictionary \nwith key of [available payment methods](https://primer.io/docs/payment-methods/available-payment-methods) and value of corresponding options.\n",
            "properties": {
              "<PAYMENT_METHOD_TYPE>": {
                "type": "object",
                "$ref": "#/components/schemas/CheckoutPaymentMethodOptionAPISchema"
              },
              "PAYMENT_CARD": {
                "type": "object",
                "$ref": "#/components/schemas/CheckoutPaymentMethodCardOptionAPISchema"
              }
            }
          },
          "authorizationType": {
            "title": "Authorization Type",
            "$ref": "#/components/schemas/AuthorizationTypeEnum",
            "description": "Allows to adjust the authorized amount after the authorization, if supported by payment method.\n`FINAL` - the authorized amount is final and can not be adjusted. Adjusting the amount can be only done via canceling the payment and re-authorization with new amount.\n`ESTIMATED` - the amount can be adjusted after the authorization, if supported by payment method.\n"
          }
        }
      },
      "CheckoutPaymentMethodOptionAPISchema": {
        "title": "PaymentMethodOptionAPISchema",
        "type": "object",
        "description": "Options for the payment method of type `PAYMENT_METHOD_TYPE`.\n",
        "required": ["surcharge"],
        "properties": {
          "surcharge": {
            "$ref": "#/components/schemas/CheckoutPaymentMethodOptionSurchargeAPISchema",
            "title": "Surcharge",
            "description": "Surcharge information"
          }
        }
      },
      "CheckoutPaymentMethodCardOptionAPISchema": {
        "title": "Payment Method Card Option",
        "type": "object",
        "properties": {
          "networks": {
            "$ref": "#/components/schemas/CheckoutPaymentMethodOptionCardNetworkAPISchema",
            "title": "Card networks",
            "description": "Dictionary of available card networks as a key with value of Payment Method Card Network Option."
          }
        }
      },
      "CheckoutPaymentMethodOptionCardNetworkAPISchema": {
        "title": "Payment Method Card Network Option",
        "type": "object",
        "properties": {
          "AMEX": {
            "$ref": "#/components/schemas/CheckoutPaymentMethodOptionCardNetworkSurchargeAPISchema"
          },
          "DANKORT": {
            "$ref": "#/components/schemas/CheckoutPaymentMethodOptionCardNetworkSurchargeAPISchema"
          },
          "DINERS_CLUB": {
            "$ref": "#/components/schemas/CheckoutPaymentMethodOptionCardNetworkSurchargeAPISchema"
          },
          "DISCOVER": {
            "$ref": "#/components/schemas/CheckoutPaymentMethodOptionCardNetworkSurchargeAPISchema"
          },
          "ENROUTE": {
            "$ref": "#/components/schemas/CheckoutPaymentMethodOptionCardNetworkSurchargeAPISchema"
          },
          "ELO": {
            "$ref": "#/components/schemas/CheckoutPaymentMethodOptionCardNetworkSurchargeAPISchema"
          },
          "HIPER": {
            "$ref": "#/components/schemas/CheckoutPaymentMethodOptionCardNetworkSurchargeAPISchema"
          },
          "INTERAC": {
            "$ref": "#/components/schemas/CheckoutPaymentMethodOptionCardNetworkSurchargeAPISchema"
          },
          "JCB": {
            "$ref": "#/components/schemas/CheckoutPaymentMethodOptionCardNetworkSurchargeAPISchema"
          },
          "MAESTRO": {
            "$ref": "#/components/schemas/CheckoutPaymentMethodOptionCardNetworkSurchargeAPISchema"
          },
          "MASTERCARD": {
            "$ref": "#/components/schemas/CheckoutPaymentMethodOptionCardNetworkSurchargeAPISchema"
          },
          "MIR": {
            "$ref": "#/components/schemas/CheckoutPaymentMethodOptionCardNetworkSurchargeAPISchema"
          },
          "PRIVATE_LABEL": {
            "$ref": "#/components/schemas/CheckoutPaymentMethodOptionCardNetworkSurchargeAPISchema"
          },
          "UNIONPAY": {
            "$ref": "#/components/schemas/CheckoutPaymentMethodOptionCardNetworkSurchargeAPISchema"
          },
          "VISA": {
            "$ref": "#/components/schemas/CheckoutPaymentMethodOptionCardNetworkSurchargeAPISchema"
          },
          "OTHER": {
            "$ref": "#/components/schemas/CheckoutPaymentMethodOptionCardNetworkSurchargeAPISchema"
          }
        },
        "additionalProperties": false
      },
      "CheckoutPaymentMethodOptionCardNetworkSurchargeAPISchema": {
        "type": "object",
        "properties": {
          "surcharge": {
            "$ref": "#/components/schemas/CheckoutPaymentMethodOptionSurchargeAPISchema",
            "title": "Surcharge",
            "description": "Surcharge information"
          }
        }
      },
      "CheckoutPaymentMethodOptionSurchargeAPISchema": {
        "title": "CheckoutPaymentMethodOptionSurchargeAPISchema",
        "type": "object",
        "properties": {
          "amount": {
            "type": "integer",
            "minimum": 0,
            "description": "The surcharge amount, in minor units. Surcharge amount must be used in conjunction with line item amounts, if a top level amount is passed then surcharge will not be calculated."
          }
        }
      },
      "PaymentRequestPaymentMethodOptionsAPISchema": {
        "title": "PaymentRequestPaymentMethodOptionsAPISchema",
        "type": "object",
        "properties": {
          "vaultOnSuccess": {
            "type": "boolean",
            "description": "Whether the payment method should be vaulted on a successful payment or not.",
            "default": false
          },
          "vaultOn3DS": {
            "type": "boolean",
            "description": "Whether the payment method should be vaulted after a successful 3DS authentication or not.",
            "default": false
          },
          "descriptor": {
            "title": "Payment descriptor",
            "type": "string",
            "description": "A description of the payment, as it would typically appear on a bank statement.",
            "maxLength": 256
          },
          "paymentType": {
            "$ref": "#/components/schemas/RecurringPaymentTypeSchema"
          },
          "authorizationType": {
            "$ref": "#/components/schemas/AuthorizationTypeEnum",
            "title": "Authorization Type",
            "description": "Allows to adjust the authorized amount after the authorization, if supported by payment method.\n`FINAL` - the authorized amount is final and can not be adjusted. Adjusting the amount can be only done via canceling the payment and re-authorization with new amount.\n`ESTIMATED` - the amount can be adjusted after the authorization, if supported by payment method.\nDefaults to `FINAL`.\n",
            "default": "FINAL"
          }
        }
      },
      "PaymentResponsePaymentMethodOptionsAPISchema": {
        "title": "PaymentResponsePaymentMethodOptionsAPISchema",
        "type": "object",
        "properties": {
          "descriptor": {
            "title": "Payment descriptor",
            "type": "string",
            "description": "The description of the payment, as it would typically appear\non a bank statement.\n",
            "maxLength": 256
          },
          "paymentType": {
            "$ref": "#/components/schemas/RecurringPaymentTypeSchema"
          },
          "paymentMethodToken": {
            "title": "Payment method token",
            "type": "string",
            "description": "The payment method token used to authorize the transaction."
          },
          "isVaulted": {
            "title": "Is Vaulted flag",
            "type": "boolean",
            "description": "Whether the payment method token represents a vaulted payment method and can be used for future payments.",
            "default": false
          },
          "analyticsId": {
            "title": "Unique analytics ID",
            "type": "string",
            "description": "Unique analytics identifier corresponding to a payment method",
            "maxLength": 256
          },
          "paymentMethodType": {
            "$ref": "#/components/schemas/PaymentMethodTypeEnum",
            "title": "Payment method type",
            "description": "Payment method type used for payment authorization."
          },
          "paymentMethodData": {
            "title": "Payment method data",
            "anyOf": [
              { "$ref": "#/components/schemas/PaymentCardTokenAPISchema" },
              { "$ref": "#/components/schemas/PayPalOrderTokenAPISchema" },
              {
                "$ref": "#/components/schemas/PayPalBillingAgreementAPISchema"
              },
              { "$ref": "#/components/schemas/GoCardlessMandateAPISchema" },
              { "$ref": "#/components/schemas/KlarnaPaymentSessionAPISchema" },
              { "$ref": "#/components/schemas/KlarnaCustomerTokenAPISchema" },
              { "$ref": "#/components/schemas/IdealPayNLTokenAPISchema" },
              { "$ref": "#/components/schemas/ApayaCustomerTokenAPISchema" }
            ],
            "description": "Payment method data"
          },
          "threeDSecureAuthentication": {
            "$ref": "#/components/schemas/ThreeDSecureAuthenticationAPISchema",
            "title": "Threedsecureauthentication",
            "default": { "response_code": "NOT_PERFORMED" }
          },
          "authorizationType": {
            "$ref": "#/components/schemas/AuthorizationTypeEnum",
            "title": "Authorization Type",
            "description": "Allows to adjust the authorized amount after the authorization, if supported by payment method. `FINAL` - the authorized amount is final and can not be adjusted. Adjusting the amount can be only done via canceling the payment and re-authorization with new amount. `ESTIMATED` - the amount can be adjusted after the authorization, if supported by payment method."
          }
        }
      },
      "CheckoutCustomerDetailsAPISchema": {
        "title": "CustomerDetailsAPISchema",
        "type": "object",
        "properties": {
          "emailAddress": {
            "title": "Email Address",
            "type": "string",
            "description": "Customer email address. <br />Must be a valid email address. Supports internationalized email addresses.\n",
            "format": "email"
          },
          "mobileNumber": {
            "title": "Mobile Number",
            "type": "string",
            "description": "The customer's mobile number",
            "minLength": 1,
            "maxLength": 256
          },
          "firstName": {
            "title": "First Name",
            "type": "string",
            "description": "The customer's first name",
            "minLength": 1,
            "maxLength": 256
          },
          "lastName": {
            "title": "Last Name",
            "type": "string",
            "description": "The customer's last name",
            "minLength": 1,
            "maxLength": 256
          },
          "billingAddress": {
            "$ref": "#/components/schemas/OptionalAddressAPISchema",
            "title": "Billing Address",
            "description": "Customer billing address.\n"
          },
          "shippingAddress": {
            "$ref": "#/components/schemas/OptionalAddressAPISchema",
            "title": "Shipping Address",
            "description": "Customer shipping address"
          },
          "taxId": {
            "title": "Tax ID",
            "type": "string",
            "description": "The customer's tax id number for tax exemptions",
            "maxLength": 256
          },
          "nationalDocumentId": {
            "title": "National Document ID",
            "type": "string",
            "description": "The customer's national identification number",
            "maxLength": 256
          }
        }
      },
      "CustomerDetailsAPISchema": {
        "title": "CustomerDetailsAPISchema",
        "type": "object",
        "properties": {
          "emailAddress": {
            "title": "Email Address",
            "type": "string",
            "description": "Customer email address.\n\nNote: It is recommended to include this field if a 3DS check will be performed\n",
            "format": "email"
          },
          "mobileNumber": {
            "title": "Mobile Number",
            "type": "string",
            "description": "The customer's mobile number",
            "maxLength": 256
          },
          "firstName": {
            "title": "First Name",
            "type": "string",
            "description": "The customer's first name",
            "maxLength": 256
          },
          "lastName": {
            "title": "Last Name",
            "type": "string",
            "description": "The customer's last name",
            "maxLength": 256
          },
          "billingAddress": {
            "$ref": "#/components/schemas/OptionalAddressAPISchema",
            "title": "Billing Address",
            "description": "Customer billing address.\n\nNote: It is recommended to include this field if a 3DS check will be performed\n"
          },
          "shippingAddress": {
            "$ref": "#/components/schemas/OptionalAddressAPISchema",
            "title": "Shipping Address",
            "description": "Customer shipping address"
          },
          "taxId": {
            "title": "Tax ID",
            "type": "string",
            "description": "The customer's tax id number for tax exemptions",
            "maxLength": 256
          },
          "nationalDocumentId": {
            "title": "National Document ID",
            "type": "string",
            "description": "The customer's national identification number",
            "maxLength": 256
          }
        }
      },
      "ClientSessionWithTokenAPIResponse": {
        "title": "ClientSessionWithTokenAPIResponse",
        "type": "object",
        "properties": {
          "clientToken": {
            "title": "Client token",
            "type": "string",
            "description": "Client token used to initialize the SDK on all platforms."
          },
          "clientTokenExpirationDate": {
            "title": "Expiration Date",
            "type": "string",
            "description": "Expiration date & time of the client token (UTC with no timezoneinfo).",
            "format": "date-time"
          },
          "orderId": {
            "title": "Order ID",
            "type": "string",
            "description": "Your reference for the payment."
          },
          "currencyCode": {
            "title": "Currency",
            "type": "string",
            "description": "The 3-letter currency code in [ISO 4217 format](https://en.wikipedia.org/wiki/ISO_4217#Active_codes).\ne.g. use `USD` for US dollars.\n"
          },
          "amount": {
            "title": "Payment amount",
            "minimum": 0,
            "type": "integer",
            "description": "The amount you would like to charge the customer, in minor units. e.g. for $7, use `700`.\n\nSome currencies, such as Japanese Yen, do not have minor units. In this case you should use the value as it is, without any formatting. For example for ¥100, use `100`.\n\nIf the amount is provided on this level, it would override any amount calculated from the provided line items, shipping and other amounts."
          },
          "order": {
            "$ref": "#/components/schemas/OrderDetailsAPISchema",
            "title": "Order Details",
            "description": "More information associated with the order."
          },
          "customerId": {
            "title": "The ID of the customer using the checkout",
            "type": "string",
            "description": "A unique identifier for your customer."
          },
          "customer": {
            "$ref": "#/components/schemas/CustomerDetailsAPISchema",
            "title": "Customer Details",
            "description": "More information associated with the customer."
          },
          "metadata": {
            "title": "Payment Metadata",
            "type": "object",
            "description": "Additional data to be used throughout the payment lifecycle.\n"
          },
          "paymentMethod": {
            "$ref": "#/components/schemas/CheckoutPaymentMethodOptionsAPISchema",
            "title": "Payment Method Options",
            "description": "Enable certain options associated with the payment methods."
          },
          "warnings": {
            "$ref": "#/components/schemas/ClientSessionWarningsAPIResponse",
            "description": "Warning messages to indicate missing information that are required for payment methods, checkout modules and other features; or when third-party services are unavailable."
          }
        },
        "example": {
          "clientToken": "client-session-token",
          "clientExpirationDate": "2019-08-24T14:15:22Z",
          "customerId": "customer-123",
          "orderId": "order-abc",
          "currencyCode": "GBP",
          "metadata": { "productType": "Shoe" },
          "customer": { "emailAddress": "john@primer.io" },
          "amount": 20,
          "order": {
            "countryCode": "FR",
            "fees": [{ "type": "SURCHARGE", "amount": 20 }]
          },
          "paymentMethod": {
            "vaultOnSuccess": true,
            "vaultOn3DS": false,
            "options": {
              "PAYMENT_CARD": {
                "networks": { "VISA": { "surcharge": { "amount": 10 } } }
              },
              "GOOGLE_PAY": { "surcharge": { "amount": 20 } }
            },
            "authorizationType": "ESTIMATED"
          },
          "warnings": [
            {
              "type": "TAXJAR",
              "code": "MISSING_DATA",
              "message": "Shipping details are required for calculating tax."
            }
          ]
        }
      },
      "ClientSessionAPIResponse": {
        "title": "ClientSessionAPIResponse",
        "type": "object",
        "properties": {
          "customerId": {
            "title": "The ID of the customer using the checkout",
            "type": "string",
            "description": "A unique identifier for your customer.",
            "maxLength": 256
          },
          "orderId": {
            "title": "Order ID",
            "type": "string",
            "description": "Your reference for the payment.",
            "maxLength": 256
          },
          "currencyCode": {
            "$ref": "#/components/schemas/Currency",
            "title": "Currency",
            "description": "The 3-letter currency code in [ISO 4217 format](https://en.wikipedia.org/wiki/ISO_4217#Active_codes).\ne.g. use `USD` for US dollars.\n"
          },
          "amount": {
            "title": "Payment amount",
            "minimum": 0,
            "type": "integer",
            "description": "The amount you are going to charge the customer, in minor units. This amount is calculated from the line items, shipping and other amounts provided in the `order`. \nIf a top-level amount is provided, it would override any calculated amount."
          },
          "metadata": {
            "title": "Payment Metadata",
            "type": "object",
            "description": "Additional data to be used throughout the payment lifecycle.\n"
          },
          "customer": {
            "$ref": "#/components/schemas/CustomerDetailsAPISchema",
            "title": "Customer Details",
            "description": "More information associated with the customer."
          },
          "order": {
            "$ref": "#/components/schemas/OrderDetailsAPISchema",
            "title": "Order Details",
            "description": "More information associated with the order."
          },
          "paymentMethod": {
            "$ref": "#/components/schemas/CheckoutPaymentMethodOptionsAPISchema",
            "title": "Payment Method Options",
            "description": "Enable certain options associated with the payment methods."
          }
        },
        "example": {
          "customerId": "customer-123",
          "orderId": "order-abc",
          "currencyCode": "GBP",
          "amount": 650,
          "metadata": { "productType": "Clothing" },
          "customer": { "emailAddress": "john@primer.io" },
          "order": {
            "lineItems": [
              {
                "itemId": "t-shirt-1",
                "description": "White T-Shirt",
                "amount": 500,
                "quantity": 1
              }
            ],
            "fees": [{ "type": "SURCHARGE", "amount": 100 }],
            "shipping": { "amount": 50 },
            "paymentMethod": {
              "vaultOnSuccess": false,
              "vaultOn3DS": false,
              "options": {
                "GOOGLE_PAY": { "surcharge": { "amount": 100 } },
                "PAYMENT_CARD": {
                  "networks": {
                    "VISA": { "surcharge": { "amount": 10 } },
                    "MASTERCARD": { "surcharge": { "amount": 20 } }
                  }
                },
                "PAY_NL_IDEAL": { "surcharge": { "amount": 50 } }
              }
            },
            "authorizationType": "ESTIMATED"
          }
        }
      },
      "ClientSessionWarningsAPIResponse": {
        "title": "ClientSessionWarningsAPIResponse",
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "The type of the connection involved",
            "example": "TAXJAR"
          },
          "code": {
            "type": "string",
            "description": "A unique code describing the particular issue",
            "example": "MISSING_DATA"
          },
          "message": {
            "type": "string",
            "description": "More information as to the reason for the warning"
          }
        }
      },
      "CountryCodeEnum": {
        "title": "CountryCodeEnum",
        "enum": [
          "AW",
          "AF",
          "AO",
          "AI",
          "AX",
          "AL",
          "AD",
          "AE",
          "AR",
          "AM",
          "AS",
          "AQ",
          "TF",
          "AG",
          "AU",
          "AT",
          "AZ",
          "BI",
          "BE",
          "BJ",
          "BQ",
          "BF",
          "BD",
          "BG",
          "BH",
          "BS",
          "BA",
          "BL",
          "BY",
          "BZ",
          "BM",
          "BO",
          "BR",
          "BB",
          "BN",
          "BT",
          "BV",
          "BW",
          "CF",
          "CA",
          "CC",
          "CH",
          "CL",
          "CN",
          "CI",
          "CM",
          "CD",
          "CG",
          "CK",
          "CO",
          "KM",
          "CV",
          "CR",
          "CU",
          "CW",
          "CX",
          "KY",
          "CY",
          "CZ",
          "DE",
          "DJ",
          "DM",
          "DK",
          "DO",
          "DZ",
          "EC",
          "EG",
          "ER",
          "EH",
          "ES",
          "EE",
          "ET",
          "FI",
          "FJ",
          "FK",
          "FR",
          "FO",
          "FM",
          "GA",
          "GB",
          "GE",
          "GG",
          "GH",
          "GI",
          "GN",
          "GP",
          "GM",
          "GW",
          "GQ",
          "GR",
          "GD",
          "GL",
          "GT",
          "GF",
          "GU",
          "GY",
          "HK",
          "HM",
          "HN",
          "HR",
          "HT",
          "HU",
          "ID",
          "IM",
          "IN",
          "IO",
          "IE",
          "IR",
          "IQ",
          "IS",
          "IL",
          "IT",
          "JM",
          "JE",
          "JO",
          "JP",
          "KZ",
          "KE",
          "KG",
          "KH",
          "KI",
          "KN",
          "KR",
          "KW",
          "LA",
          "LB",
          "LR",
          "LY",
          "LC",
          "LI",
          "LK",
          "LS",
          "LT",
          "LU",
          "LV",
          "MO",
          "MF",
          "MA",
          "MC",
          "MD",
          "MG",
          "MV",
          "MX",
          "MH",
          "MK",
          "ML",
          "MT",
          "MM",
          "ME",
          "MN",
          "MP",
          "MZ",
          "MR",
          "MS",
          "MQ",
          "MU",
          "MW",
          "MY",
          "YT",
          "NA",
          "NC",
          "NE",
          "NF",
          "NG",
          "NI",
          "NU",
          "NL",
          "NO",
          "NP",
          "NR",
          "NZ",
          "OM",
          "PK",
          "PA",
          "PN",
          "PE",
          "PH",
          "PW",
          "PG",
          "PL",
          "PR",
          "KP",
          "PT",
          "PY",
          "PS",
          "PF",
          "QA",
          "RE",
          "RO",
          "RU",
          "RW",
          "SA",
          "SD",
          "SN",
          "SG",
          "GS",
          "SH",
          "SJ",
          "SB",
          "SL",
          "SV",
          "SM",
          "SO",
          "PM",
          "RS",
          "SS",
          "ST",
          "SR",
          "SK",
          "SI",
          "SE",
          "SZ",
          "SX",
          "SC",
          "SY",
          "TC",
          "TD",
          "TG",
          "TH",
          "TJ",
          "TK",
          "TM",
          "TL",
          "TO",
          "TT",
          "TN",
          "TR",
          "TV",
          "TW",
          "TZ",
          "UG",
          "UA",
          "UM",
          "UY",
          "US",
          "UZ",
          "VA",
          "VC",
          "VE",
          "VG",
          "VI",
          "VN",
          "VU",
          "WF",
          "WS",
          "YE",
          "ZA",
          "ZM",
          "ZW"
        ],
        "description": "2-letter country code in <a href='https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2#Officially_assigned_code_elements'>ISO 3166-1 alpha</a> format, \ne.g. <code>FR</code> for France and <code>GB</code> for the United Kingdom.\n"
      },
      "Currency": {
        "title": "Currency",
        "enum": [
          "AED",
          "AFN",
          "ALL",
          "AMD",
          "ANG",
          "AOA",
          "ARS",
          "AUD",
          "AWG",
          "AZN",
          "BAM",
          "BBD",
          "BDT",
          "BGN",
          "BHD",
          "BIF",
          "BMD",
          "BND",
          "BOB",
          "BOV",
          "BRL",
          "BSD",
          "BTN",
          "BWP",
          "BYR",
          "BYN",
          "BZD",
          "CAD",
          "CDF",
          "CHE",
          "CHF",
          "CHW",
          "CLF",
          "CLP",
          "CNY",
          "COP",
          "COU",
          "CRC",
          "CUC",
          "CUP",
          "CVE",
          "CZK",
          "DJF",
          "DKK",
          "DOP",
          "DZD",
          "EGP",
          "ERN",
          "ETB",
          "EUR",
          "FJD",
          "FKP",
          "GBP",
          "GEL",
          "GHS",
          "GIP",
          "GMD",
          "GNF",
          "GTQ",
          "GYD",
          "HKD",
          "HNL",
          "HRK",
          "HTG",
          "HUF",
          "IDR",
          "ILS",
          "INR",
          "IQD",
          "IRR",
          "ISK",
          "JMD",
          "JOD",
          "JPY",
          "KES",
          "KGS",
          "KHR",
          "KMF",
          "KPW",
          "KRW",
          "KWD",
          "KYD",
          "KZT",
          "LAK",
          "LBP",
          "LKR",
          "LRD",
          "LSL",
          "LTL",
          "LVL",
          "LYD",
          "MAD",
          "MDL",
          "MGA",
          "MKD",
          "MMK",
          "MNT",
          "MOP",
          "MRO",
          "MUR",
          "MVR",
          "MWK",
          "MXN",
          "MXV",
          "MYR",
          "MZN",
          "NAD",
          "NGN",
          "NIO",
          "NOK",
          "NPR",
          "NZD",
          "OMR",
          "PAB",
          "PEN",
          "PGK",
          "PHP",
          "PKR",
          "PLN",
          "PYG",
          "QAR",
          "RON",
          "RSD",
          "RUB",
          "RWF",
          "SAR",
          "SBD",
          "SCR",
          "SDG",
          "SEK",
          "SGD",
          "SHP",
          "SLL",
          "SOS",
          "SRD",
          "SSP",
          "STD",
          "SVC",
          "SYP",
          "SZL",
          "THB",
          "TJS",
          "TMT",
          "TND",
          "TOP",
          "TRY",
          "TTD",
          "TWD",
          "TZS",
          "UAH",
          "UGX",
          "USD",
          "USN",
          "USS",
          "UYI",
          "UYU",
          "UZS",
          "VEF",
          "VND",
          "VUV",
          "WST",
          "XAF",
          "XAG",
          "XAU",
          "XBA",
          "XBB",
          "XBC",
          "XBD",
          "XCD",
          "XDR",
          "XFU",
          "XOF",
          "XPD",
          "XPF",
          "XPT",
          "XSU",
          "XTS",
          "XUA",
          "YER",
          "ZAR",
          "ZMW",
          "ZWL"
        ],
        "description": "3-letter currency code in <a href='https://en.wikipedia.org/wiki/ISO_4217#Active_codes'>ISO 4217</a> format, \ne.g. <code>USD</code> for US dollars.\n"
      },
      "PaymentResponseProcessorAPISchema": {
        "title": "PaymentResponseProcessorAPISchema",
        "type": "object",
        "properties": {
          "name": {
            "title": "Processor Name",
            "type": "string",
            "description": "The payment processor used for this payment.",
            "maxLength": 256
          },
          "processorMerchantId": {
            "title": "Processor Merchant ID",
            "type": "string",
            "description": "The merchant ID registered at the payment processor used for this payment.",
            "maxLength": 256
          },
          "amountCaptured": {
            "title": "Amount captured",
            "type": "integer",
            "minimum": 0,
            "description": "If no capture was performed, this value will be set to `0`.\n\nIf one or more partial captures were performed, this value will be a sum\nof all partial capture amounts.\n"
          },
          "amountRefunded": {
            "title": "Amount refunded",
            "type": "integer",
            "minimum": 0,
            "description": "If no refund was performed, this value will be set to `0`.\n\nIf one or more partial refunds were performed, this value will be a sum\nof all partial refund amounts.\n"
          }
        }
      },
      "GoCardlessMandateAPISchema": {
        "title": "GoCardlessMandateAPISchema",
        "required": ["gocardlessMandateId"],
        "type": "object",
        "properties": {
          "gocardlessMandateId": {
            "title": "Mandate agreement ID",
            "type": "string",
            "description": "Unique identifier of a GoCardless mandate agreement"
          }
        }
      },
      "IdealPayNLTokenAPISchema": {
        "title": "IdealPayNLTokenAPISchema",
        "required": ["paymentMethodConfigId"],
        "type": "object",
        "properties": {
          "paymentMethodConfigId": {
            "title": "Paymentmethodconfigid",
            "type": "string",
            "format": "uuid"
          }
        }
      },
      "KlarnaAddressAPISchema": {
        "title": "KlarnaAddressAPISchema",
        "type": "object",
        "properties": {
          "title": { "title": "Title", "type": "string" },
          "firstName": { "title": "Firstname", "type": "string" },
          "lastName": { "title": "Lastname", "type": "string" },
          "email": { "title": "Email", "type": "string" },
          "phoneNumber": { "title": "Phonenumber", "type": "string" },
          "addressLine1": { "title": "Addressline1", "type": "string" },
          "addressLine2": { "title": "Addressline2", "type": "string" },
          "addressLine3": { "title": "Addressline3", "type": "string" },
          "city": { "title": "City", "type": "string" },
          "state": { "title": "State", "type": "string" },
          "countryCode": { "$ref": "#/components/schemas/CountryCodeEnum" },
          "postalCode": { "title": "Postalcode", "type": "string" }
        }
      },
      "KlarnaCustomerTokenAPISchema": {
        "title": "KlarnaCustomerTokenAPISchema",
        "required": ["klarnaCustomerToken", "sessionData"],
        "type": "object",
        "properties": {
          "klarnaCustomerToken": {
            "title": "Klarnacustomertoken",
            "type": "string"
          },
          "sessionData": {
            "$ref": "#/components/schemas/KlarnaSessionDetailsAPISchema"
          }
        }
      },
      "KlarnaPaymentSessionAPISchema": {
        "title": "KlarnaPaymentSessionAPISchema",
        "required": ["klarnaAuthorizationToken", "sessionData"],
        "type": "object",
        "properties": {
          "klarnaAuthorizationToken": {
            "title": "Klarnaauthorizationtoken",
            "type": "string"
          },
          "sessionData": {
            "$ref": "#/components/schemas/KlarnaSessionDetailsAPISchema"
          }
        }
      },
      "KlarnaSessionDetailsAPISchema": {
        "title": "KlarnaSessionDetailsAPISchema",
        "required": ["billingAddress", "purchaseCountry", "purchaseCurrency", "locale", "orderLines"],
        "type": "object",
        "properties": {
          "recurringDescription": {
            "title": "Recurringdescription",
            "type": "string"
          },
          "billingAddress": {
            "$ref": "#/components/schemas/KlarnaAddressAPISchema"
          },
          "shippingAddress": {
            "$ref": "#/components/schemas/KlarnaAddressAPISchema"
          },
          "purchaseCountry": { "title": "Purchasecountry", "type": "string" },
          "purchaseCurrency": { "title": "Purchasecurrency", "type": "string" },
          "locale": { "title": "Locale", "type": "string" },
          "orderLines": { "title": "Orderlines", "type": "array", "items": {} },
          "tokenDetails": { "$ref": "#/components/schemas/KlarnaTokenDetails" }
        }
      },
      "KlarnaTokenDetails": {
        "title": "KlarnaTokenDetails",
        "required": ["type"],
        "type": "object",
        "properties": {
          "type": { "title": "Type", "type": "string" },
          "brand": { "title": "Brand", "type": "string" },
          "masked_number": { "title": "Masked Number", "type": "string" },
          "expiry_date": { "title": "Expiry Date", "type": "string" }
        }
      },
      "PayPalBillingAgreementAPISchema": {
        "title": "PayPalBillingAgreementAPISchema",
        "required": ["paypalBillingAgreementId"],
        "type": "object",
        "properties": {
          "paypalBillingAgreementId": {
            "title": "Paypalbillingagreementid",
            "type": "string"
          },
          "externalPayerInfo": {
            "$ref": "#/components/schemas/PayPalExternalPayerInfoAPISchema",
            "title": "Payer Info",
            "description": "Information about the PayPal customer"
          },
          "shippingAddress": {
            "$ref": "#/components/schemas/AddressAPISchema",
            "title": "Shipping address",
            "description": "The PayPal customer's shipping address"
          },
          "paypalStatus": { "title": "PayPal order status", "type": "string" }
        }
      },
      "PayPalExternalPayerInfoAPISchema": {
        "title": "PayPalExternalPayerInfoAPISchema",
        "type": "object",
        "properties": {
          "externalPayerId": { "title": "Externalpayerid", "type": "string" },
          "email": { "title": "Email", "type": "string" },
          "firstName": { "title": "Firstname", "type": "string" },
          "lastName": { "title": "Lastname", "type": "string" }
        }
      },
      "PayPalOrderTokenAPISchema": {
        "title": "PayPalOrderTokenAPISchema",
        "required": ["paypalOrderId"],
        "type": "object",
        "properties": {
          "paypalOrderId": {
            "title": "PayPal order identifier",
            "type": "string"
          },
          "externalPayerInfo": {
            "$ref": "#/components/schemas/PayPalExternalPayerInfoAPISchema",
            "title": "Payer Info",
            "description": "Information about the PayPal customer"
          },
          "paypalStatus": { "title": "PayPal order status", "type": "string" }
        }
      },
      "PaymentAPIResponse": {
        "title": "PaymentAPIResponse",
        "type": "object",
        "properties": {
          "id": {
            "title": "Payment identifier",
            "type": "string",
            "description": "The unique payment ID.\n\nYou can use this ID to retrieve the payment details, or perform downstream\noperations.\n"
          },
          "date": {
            "title": "Payment date",
            "type": "string",
            "description": "The date and time at which the payment was created in UTC format.",
            "format": "date-time"
          },
          "status": {
            "$ref": "#/components/schemas/PaymentStatus",
            "title": "Current status",
            "description": "See the payment [status table](../docs#payment-status) for more information."
          },
          "orderId": {
            "title": "Order ID",
            "type": "string",
            "description": "Your reference for the payment.",
            "maxLength": 256
          },
          "currencyCode": {
            "$ref": "#/components/schemas/Currency",
            "title": "Currency",
            "description": "The 3-letter currency code in [ISO 4217 format](https://en.wikipedia.org/wiki/ISO_4217#Active_codes).\ne.g. use `USD` for US dollars.\n"
          },
          "amount": {
            "title": "Payment amount",
            "minimum": 0,
            "type": "integer",
            "description": "The amount you charged the customer, in minor units."
          },
          "order": {
            "$ref": "#/components/schemas/OrderDetailsAPISchema",
            "title": "Order Details",
            "description": "More information associated with the order."
          },
          "customerId": {
            "title": "The ID of the customer using the checkout",
            "type": "string",
            "description": "The unique identifier for your customer.",
            "maxLength": 256
          },
          "customer": {
            "$ref": "#/components/schemas/CustomerDetailsAPISchema",
            "title": "Customer Details",
            "description": "More information associated with the customer."
          },
          "metadata": {
            "title": "Payment Metadata",
            "type": "object",
            "description": "Additional data to be used throughout the payment lifecycle.\n"
          },
          "paymentMethod": {
            "$ref": "#/components/schemas/PaymentResponsePaymentMethodOptionsAPISchema",
            "title": "Payment Method Options",
            "description": "The payment method options provided in the request, as well as the token used to process the payment."
          },
          "processor": {
            "$ref": "#/components/schemas/PaymentResponseProcessorAPISchema",
            "title": "Processor Information",
            "description": "More information associated with the payment processor, including the processor name."
          },
          "requiredAction": {
            "$ref": "#/components/schemas/PaymentRequiredActionAPISchema",
            "title": "Required action",
            "description": "Required action to perform in order to resume the payment workflow. This can be requiring a 3DS check from the customer for instance."
          },
          "statusReason": {
            "$ref": "#/components/schemas/StatusReasonAPISchema",
            "title": "Status Reason",
            "description": "Check this field for more information regarding the payment's status. This is especially useful when the status is `DECLINED` or `FAILED`.\n"
          },
          "transactions": {
            "title": "Transactions",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TransactionOverviewAPISchema"
            },
            "description": "A list summarizing the transactions that occurred while processing the payment.\n\nNote: a refund is a separate transaction and so will appear in this `transactions` list if a refund was performed."
          },
          "riskData": {
            "$ref": "#/components/schemas/RiskDataAPISchema",
            "title": "Risk Data"
          }
        }
      },
      "PaymentCancelAPIRequest": {
        "title": "PaymentCancelAPIRequest",
        "type": "object",
        "properties": {
          "reason": {
            "title": "Cancellation reason",
            "type": "string",
            "description": "You can optionally specify a reason for the cancellation. This is for your own records."
          }
        },
        "additionalProperties": false,
        "example": { "reason": "Customer returned order #1234." }
      },
      "PaymentAuthorizationAPIRequest": {
        "title": "PaymentAuthorizationAPIRequest",
        "type": "object",
        "required": ["processor"],
        "properties": {
          "processor": {
            "$ref": "#/components/schemas/PaymentAuthorizationRequestProcessorAPISchema",
            "title": "Processor",
            "description": "The payment processor to use for this payment."
          }
        }
      },
      "PaymentCaptureAPIRequest": {
        "title": "PaymentCaptureAPIRequest",
        "type": "object",
        "properties": {
          "amount": {
            "title": "Amount to capture",
            "minimum": 0,
            "type": "integer",
            "description": "The amount you would like to capture, in minor units. The currency used on authorization is assumed.\n\nIf no amount is specified it defaults to the full amount."
          },
          "final": {
            "title": "Final capture",
            "type": "boolean",
            "description": "Indicates whether the capture request is the final capture request.\n\nAfter a final capture, no subsequent captures are allowed.",
            "default": true
          },
          "order": {
            "title": "Order",
            "description": "More information associated with the order.",
            "type": "object",
            "properties": {
              "retailerCountryCode": {
                "$ref": "#/components/schemas/CountryCodeEnum",
                "title": "Retailer Country Code",
                "description": "The country code of the retailer.\nThis field is passed to the processor and overwrites the retailer country code set in order details."
              }
            }
          }
        },
        "additionalProperties": false,
        "example": { "amount": 42 }
      },
      "PaymentCardTokenAPISchema": {
        "title": "PaymentCardTokenAPISchema",
        "required": ["last4Digits", "expirationMonth", "expirationYear"],
        "type": "object",
        "properties": {
          "first6Digits": {
            "title": "Payment card's first six digits",
            "maxLength": 6,
            "minLength": 6,
            "type": "string"
          },
          "last4Digits": {
            "title": "Payment card's last four digits",
            "maxLength": 4,
            "minLength": 4,
            "type": "string"
          },
          "expirationMonth": {
            "title": "Expiration month",
            "maxLength": 2,
            "minLength": 2,
            "type": "string"
          },
          "expirationYear": {
            "title": "Expiration year",
            "maxLength": 4,
            "minLength": 4,
            "type": "string"
          },
          "cardholderName": { "title": "Cardholder's name", "type": "string" },
          "network": { "title": "Card network", "type": "string" },
          "isNetworkTokenized": {
            "title": "Is represented by a digital PAN",
            "type": "boolean",
            "default": false
          },
          "binData": { "$ref": "#/components/schemas/BinDataAPISchema" }
        }
      },
      "PaymentCreationAPIRequest": {
        "title": "PaymentCreationAPIRequest",
        "required": ["paymentMethodToken"],
        "type": "object",
        "properties": {
          "orderId": {
            "title": "Order ID",
            "type": "string",
            "description": "Your reference for the payment.",
            "maxLength": 256
          },
          "currencyCode": {
            "$ref": "#/components/schemas/Currency",
            "title": "Currency",
            "description": "The 3-letter currency code in [ISO 4217 format](https://en.wikipedia.org/wiki/ISO_4217#Active_codes).\ne.g. use `USD` for US dollars.\n"
          },
          "amount": {
            "title": "Payment amount",
            "minimum": 0,
            "type": "integer",
            "description": "The amount you would like to charge the customer, in minor units. e.g. for $7, use `700`.\n\nSome currencies, such as Japanese Yen, do not have minor units. In this case you should use the value as it is, without any formatting. For example for ¥100, use `100`. The minimum amount is 0."
          },
          "order": {
            "$ref": "#/components/schemas/OrderDetailsAPISchema",
            "title": "Order Details",
            "description": "More information associated with the order."
          },
          "paymentMethodToken": {
            "title": "Payment method token",
            "type": "string",
            "description": "The payment method token used to authorize the payment.\n"
          },
          "customerId": {
            "title": "The ID of the customer using the checkout",
            "type": "string",
            "description": "A unique identifier for your customer.\nThis attribute is required if `paymentMethod.vaultOnSuccess` is set to `True`.",
            "maxLength": 256
          },
          "customer": {
            "$ref": "#/components/schemas/CustomerDetailsAPISchema",
            "title": "Customer Details",
            "description": "More information associated with the customer.\n"
          },
          "metadata": {
            "title": "Payment Metadata",
            "type": "object",
            "description": "Additional data to be used throughout the payment lifecycle.\n\nA dictionary of key-value pairs where the values can only be strings or\nintegers.\n\ne.g. `{\"productId\": 1001, \"merchantId\": \"a13bsd62s\"}`\n"
          },
          "paymentMethod": {
            "$ref": "#/components/schemas/PaymentRequestPaymentMethodOptionsAPISchema",
            "title": "Payment Method Options",
            "description": "Enable certain options associated with the payment method."
          }
        },
        "additionalProperties": false,
        "example": {
          "orderId": "order-abc",
          "currencyCode": "EUR",
          "amount": 42,
          "paymentMethodToken": "heNwnqaeRiqvY1UcslfQc3wxNjEzOTIxNjc4",
          "customerId": "customer-123",
          "customer": { "emailAddress": "customer123@gmail.com" },
          "metadata": { "productId": 123, "merchantId": "a13bsd62s" },
          "paymentMethod": {
            "paymentType": "SUBSCRIPTION",
            "vaultOnSuccess": true,
            "authorizationType": "ESTIMATED"
          }
        }
      },
      "StatusReasonAPISchema": {
        "title": "StatusReasonAPISchema",
        "required": ["type"],
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/PaymentStatusTypeEnum",
            "title": "Payment status type",
            "description": "Type of the status."
          },
          "declineType": {
            "$ref": "#/components/schemas/DeclineTypeEnum",
            "title": "Decline Type",
            "description": "If the error is of type `ISSUER_DECLINED` this will be returned.\n\nDeclines of type `SOFT_DECLINE` may be retried,\nwhereas declines of type `HARD_DECLINE` should not be retried.\n"
          },
          "code": {
            "$ref": "#/components/schemas/TransactionDeclineReasonV2Enum",
            "title": "Payment status code",
            "description": "If the error is of type `ISSUER_DECLINED`, this will be returned."
          },
          "message": {
            "title": "Processor message",
            "type": "string",
            "description": "In case of an error on the processor's part, we will return the message returned by the processor. This is usually a human readable error."
          }
        }
      },
      "RiskDataAPISchema": {
        "title": "RiskDataAPISchema",
        "description": "Risk data associated with this payment.\n",
        "type": "object",
        "properties": {
          "fraudCheck": {
            "title": "Fraud Check",
            "$ref": "#/components/schemas/FraudCheckAPISchema"
          }
        }
      },
      "FraudCheckAPISchema": {
        "title": "FraudCheckAPISchema",
        "description": "Results of the pre-authorization and post-authorization fraud checks.\n",
        "type": "object",
        "properties": {
          "source": { "type": "string", "example": "FRAUD_PROVIDER" },
          "preAuthorizationResult": {
            "$ref": "#/components/schemas/FraudDecisionTypeEnum",
            "example": "THREE_DS"
          },
          "postAuthorizationResult": {
            "$ref": "#/components/schemas/FraudDecisionTypeEnum",
            "example": "ACCEPT"
          }
        }
      },
      "FraudDecisionTypeEnum": {
        "title": "FraudDecisionTypeEnum",
        "enum": ["ACCEPT", "REFUSE", "FAILED", "THREE_DS"],
        "type": "string",
        "description": "Possible fraud check outcomes."
      },
      "PaymentMethodTypeEnum": {
        "title": "PaymentMethodTypeEnum",
        "enum": [
          "PAYMENT_CARD",
          "PAYPAL_ORDER",
          "PAYPAL_BILLING_AGREEMENT",
          "GOCARDLESS_MANDATE",
          "KLARNA_AUTHORIZATION_TOKEN",
          "KLARNA_CUSTOMER_TOKEN",
          "PAY_NL_IDEAL",
          "APAYA",
          "OFF_SESSION_PAYMENT",
          "CARD_OFF_SESSION_PAYMENT",
          "APPLE_PAY",
          "APPLE_PAY_ENCRYPTED_TOKEN",
          "GOOGLE_PAY"
        ],
        "type": "string",
        "description": "Payment method type, where `OFF_SESSION_PAYMENT` is used for APM (Alternative Payment Method) payments and `PAYMENT_CARD` for traditional debit or credit cards. Please note that this list is different from one indicated on [available payment methods](https://primer.io/docs/payment-methods/available-payment-methods) page and values of this field will be changed in the future versions of the API."
      },
      "PaymentListAPIResponse": {
        "title": "PaymentListAPIResponse",
        "type": "object",
        "properties": {
          "data": {
            "title": "Data",
            "type": "array",
            "items": { "$ref": "#/components/schemas/PaymentSummaryAPISchema" }
          },
          "nextCursor": { "title": "Nextcursor", "type": "string" },
          "prevCursor": { "title": "Prevcursor", "type": "string" }
        }
      },
      "PaymentRefundAPIRequest": {
        "title": "PaymentRefundAPIRequest",
        "type": "object",
        "properties": {
          "amount": {
            "title": "Amount to refund",
            "minimum": 0,
            "type": "integer",
            "description": "The amount you would like to refund the customer, in minor units. e.g. for $7, use `700`.\n\nDefaults to remaining non-refunded amount."
          },
          "orderId": {
            "title": "Order ID",
            "type": "string",
            "description": "Optionally you can pass a specific order ID for the refund.\n\nBy default this will be set to the original `orderId` given on payment creation."
          },
          "reason": {
            "title": "Refund reason",
            "type": "string",
            "description": "You can optionally specify a reason for the refund. This is for your own records."
          }
        },
        "additionalProperties": false,
        "example": { "amount": 42, "orderId": "order-1234-refund" }
      },
      "PaymentRequiredActionAPISchema": {
        "title": "PaymentRequiredActionAPISchema",
        "required": ["name", "description"],
        "type": "object",
        "properties": {
          "name": {
            "$ref": "#/components/schemas/BlockingPaymentActionTypeEnum",
            "title": "Name",
            "description": "Action name"
          },
          "description": {
            "title": "Description",
            "type": "string",
            "description": "Human description of the required action to perform."
          },
          "clientToken": {
            "title": "Client token",
            "type": "string",
            "description": "The client token to be returned to the SDK if a required action is returned."
          }
        }
      },
      "PaymentResumeAPIRequest": {
        "title": "PaymentResumeAPIRequest",
        "required": ["resumeToken"],
        "type": "object",
        "properties": {
          "resumeToken": {
            "title": "Resume token",
            "type": "string",
            "description": "A token containing any information that is sent back from the checkout to complete a blocked payment flow.",
            "format": "uuid"
          }
        },
        "additionalProperties": false
      },
      "PaymentSummaryAPISchema": {
        "title": "PaymentSummaryAPISchema",
        "required": ["id", "date", "status", "orderId", "currencyCode", "amount"],
        "type": "object",
        "properties": {
          "id": {
            "title": "Payment identifier",
            "type": "string",
            "description": "The unique payment ID.\n\nYou can use this ID to retrieve the payment details, or perform downstream\noperations.\n"
          },
          "date": {
            "title": "Payment date",
            "type": "string",
            "description": "The date and time at which the payment was created in UTC format.",
            "format": "date-time"
          },
          "status": {
            "$ref": "#/components/schemas/PaymentStatus",
            "title": "Current status",
            "description": "See the payment [status table](../docs#payment-status) for more information."
          },
          "orderId": {
            "title": "Order ID",
            "type": "string",
            "description": "Your reference for the payment."
          },
          "processor": {
            "$ref": "#/components/schemas/PaymentSummaryProcessorAPISchema",
            "title": "Processor",
            "description": "The payment processor used for this payment."
          },
          "currencyCode": {
            "title": "Currency",
            "type": "string",
            "description": "The 3-letter currency code in [ISO 4217 format](https://en.wikipedia.org/wiki/ISO_4217#Active_codes).\ne.g. use `USD` for US dollars.\n"
          },
          "amount": {
            "title": "Payment amount",
            "type": "integer",
            "description": "The payment amount, in minor units. e.g. $7 would show as `700`."
          },
          "metadata": {
            "title": "Payment Metadata",
            "type": "object",
            "description": "Additional data to be used throughout the payment lifecycle.\n\nA dictionary of key-value pairs where the values can only be strings or\nintegers.\n\ne.g. `{\"productId\": 1001, \"merchantId\": \"a13bsd62s\"}`\n"
          }
        },
        "example": {
          "id": "IHQlakKC",
          "date": "2021-03-24T14:56:56.869248",
          "status": "SETTLED",
          "orderId": "my-order-123",
          "currencyCode": "EUR",
          "amount": 700,
          "processor": {
            "name": "STRIPE",
            "processorMerchantId": "acct_stripe_1234"
          },
          "metadata": { "productId": 123, "merchantId": "a13bsd62s" }
        }
      },
      "PaymentAdjustAuthorizationAPIRequest": {
        "title": "PaymentAdjustAuthorizationAPIRequest",
        "required": ["amount"],
        "type": "object",
        "properties": {
          "amount": {
            "title": "Payment amount",
            "minimum": 0,
            "type": "integer",
            "description": "The **final** amount you would like to charge the customer, in minor units. e.g. for $7, use `700`.\n\nSome currencies, such as Japanese Yen, do not have minor units. In this case you should use the value as it is, without any formatting. For example for ¥100, use `100`.\n\nIf the amount is provided on this level, it would override any amount calculated from the provided line items, shipping and other amounts."
          }
        }
      },
      "PaymentAuthorizationRequestProcessorAPISchema": {
        "title": "PaymentAuthorizationRequestProcessorAPISchema",
        "type": "object",
        "required": ["processorMerchantId"],
        "properties": {
          "processorMerchantId": {
            "type": "string",
            "title": "Processor Merchant ID",
            "description": "The processor's merchant ID used to authorize the payment."
          },
          "name": {
            "type": "string",
            "title": "Processor Name",
            "description": "The processor name should be provided if the processorMerchantId is not unique across all of your integrations."
          }
        }
      },
      "PaymentSummaryProcessorAPISchema": {
        "title": "PaymentSummaryProcessorAPISchema",
        "required": ["name"],
        "type": "object",
        "properties": {
          "name": {
            "title": "Processor Name",
            "type": "string",
            "description": "The payment processor used for this payment."
          },
          "processorMerchantId": {
            "title": "Processor Merchant ID",
            "type": "string",
            "description": "The merchant ID registered at the payment processor used for this payment."
          }
        }
      },
      "PrepaidReloadableEnum": {
        "title": "PrepaidReloadableEnum",
        "enum": ["RELOADABLE", "NON_RELOADABLE", "NOT_APPLICABLE", "UNKNOWN"],
        "type": "string",
        "description": "An enumeration."
      },
      "RecurringTransactionTypeEnum": {
        "title": "RecurringTransactionTypeEnum",
        "enum": ["FIRST_PAYMENT", "ECOMMERCE", "SUBSCRIPTION", "UNSCHEDULED"],
        "type": "string",
        "description": "An enumeration."
      },
      "RecurringPaymentTypeSchema": {
        "$ref": "#/components/schemas/RecurringTransactionTypeEnum",
        "title": "Recurring Payment Type",
        "description": "Payment types, primarily to be used for recurring payments.\nNote: If you successfully vault a `SINGLE_USE` token on payment creation, then there's no need to set a value for this field and it will be flagged as `FIRST_PAYMENT`. Otherwise, see the table below for all possible values.\n\n| paymentType | Use case |\n| --- | --- |\n| `FIRST_PAYMENT` | a customer-initiated payment which is the first in a series of recurring payments or subscription, or a card on file scenario.\n| `ECOMMERCE` | a customer-initiated payment using stored payment details where the cardholder is present.\n| `SUBSCRIPTION` | a merchant-initiated payment as part of a series of payments on a fixed schedule and a set amount.\n| `UNSCHEDULED` | a merchant-initiated payment using stored payment details with no fixed schedule or amount."
      },
      "ProductTypeEnum": {
        "title": "ProductTypeEnum",
        "enum": ["PHYSICAL", "DIGITAL"],
        "type": "string",
        "description": "An enumeration"
      },
      "ThreeDSecureAuthResponseCodeEnum": {
        "title": "ThreeDSecureAuthResponseCodeEnum",
        "enum": ["NOT_PERFORMED", "SKIPPED", "AUTH_SUCCESS", "AUTH_FAILED", "CHALLENGE", "METHOD"],
        "type": "string",
        "description": "An enumeration."
      },
      "ThreeDSecureAuthenticationAPISchema": {
        "title": "ThreeDSecureAuthenticationAPISchema",
        "required": ["responseCode"],
        "type": "object",
        "properties": {
          "responseCode": {
            "$ref": "#/components/schemas/ThreeDSecureAuthResponseCodeEnum"
          },
          "reasonCode": {
            "title": "Reasoncode",
            "anyOf": [
              {
                "$ref": "#/components/schemas/ThreeDSecureSkippedReasonCodeEnum"
              },
              {
                "$ref": "#/components/schemas/ThreeDSecureFailedReasonCodeEnum"
              }
            ]
          },
          "reasonText": { "title": "Reasontext", "type": "string" },
          "protocolVersion": { "title": "Protocolversion", "type": "string" },
          "challengeIssued": { "title": "Challengeissued", "type": "boolean" }
        }
      },
      "ThreeDSecureFailedReasonCodeEnum": {
        "title": "ThreeDSecureFailedReasonCodeEnum",
        "enum": [
          "UNKNOWN",
          "REJECTED_BY_ISSUER",
          "CARD_AUTHENTICATION_FAILED",
          "UNKNOWN_DEVICE",
          "UNSUPPORTED_DEVICE",
          "EXCEEDS_AUTHENTICATION_FREQUENCY_LIMIT",
          "EXPIRED_CARD",
          "INVALID_CARD_NUMBER",
          "INVALID_TRANSACTION",
          "NO_CARD_RECORD",
          "SECURITY_FAILURE",
          "STOLEN_CARD",
          "SUSPECTED_FRAUD",
          "TRANSACTION_NOT_PERMITTED_TO_CARDHOLDER",
          "CARDHOLDER_NOT_ENROLLED_IN_SERVICE",
          "TRANSACTION_TIMED_OUT_AT_THE_ACS",
          "LOW_CONFIDENCE",
          "MEDIUM_CONFIDENCE",
          "HIGH_CONFIDENCE",
          "VERY_HIGH_CONFIDENCE",
          "EXCEEDS_ACS_MAXIMUM_CHALLENGES",
          "NON_PAYMENT_NOT_SUPPORTED",
          "THREE_RI_NOT_SUPPORTED",
          "ACS_TECHNICAL_ISSUE",
          "DECOUPLED_REQUIRED_BY_ACS",
          "DECOUPLED_MAX_EXPIRY_EXCEEDED",
          "DECOUPLED_AUTHENTICATION_INSUFFICIENT_TIME",
          "AUTHENTICATION_ATTEMPTED_BUT_NOT_PERFORMED_BY_CARDHOLDER",
          "ACS_TIMED_OUT",
          "INVALID_ACS_RESPONSE",
          "ACS_SYSTEM_ERROR_RESPONSE",
          "ERROR_GENERATING_CAVV",
          "PROTOCOL_VERSION_NOT_SUPPORTED",
          "TRANSACTION_EXCLUDED_FROM_ATTEMPTS_PROCESSING",
          "REQUESTED_PROGRAM_NOT_SUPPORTED"
        ],
        "type": "string",
        "description": "This enum is derived from the `transStatusReason` on page 218 of the\n[EMV Co 3DS protocol specification](https://www.emvco.com/terms-of-use/?u=/wp-content/uploads/documents/EMVCo_3DS_Spec_v220_122018.pdf)\n\n| Code | Description                             |\n|------|-----------------------------------------|\n| 01   | Card authentication failed              |\n| 02   | Unknown Device                          |\n| 03   | Unsupported Device                      |\n| 04   | Exceeds authentication frequency limit  |\n| 05   | Expired card                            |\n| 06   | Invalid card number                     |\n| 07   | Invalid transaction                     |\n| 08   | No Card record                          |\n| 09   | Security failure                        |\n| 10   | Stolen card                             |\n| 11   | Suspected fraud                         |\n| 12   | Transaction not permitted to cardholder |\n| 13   | Cardholder not enrolled in service      |\n| 14   | Transaction timed out at the ACS        |\n| 15   | Low confidence                          |\n| 16   | Medium confidence                       |"
      },
      "ThreeDSecureSkippedReasonCodeEnum": {
        "title": "ThreeDSecureSkippedReasonCodeEnum",
        "enum": [
          "GATEWAY_UNAVAILABLE",
          "DISABLED_BY_MERCHANT",
          "NOT_SUPPORTED_BY_ISSUER",
          "FAILED_TO_NEGOTIATE",
          "UNKNOWN_ACS_RESPONSE",
          "3DS_SERVER_ERROR",
          "ACQUIRER_NOT_CONFIGURED",
          "ACQUIRER_NOT_PARTICIPATING"
        ],
        "type": "string",
        "description": "An enumeration."
      },
      "TokenTypeEnum": {
        "title": "TokenTypeEnum",
        "enum": ["MULTI_USE", "SINGLE_USE"],
        "type": "string",
        "description": "An enumeration."
      },
      "DeclineTypeEnum": {
        "title": "DeclineTypeEnum",
        "enum": ["SOFT_DECLINE", "HARD_DECLINE"],
        "type": "string",
        "description": "An enumeration."
      },
      "TransactionDeclineReasonV2Enum": {
        "title": "TransactionDeclineReasonV2Enum",
        "enum": [
          "ERROR",
          "INVALID_CARD_NUMBER",
          "EXPIRED_CARD",
          "LOST_OR_STOLEN_CARD",
          "SUSPECTED_FRAUD",
          "UNKNOWN",
          "DECLINED",
          "REFER_TO_CARD_ISSUER",
          "DO_NOT_HONOR",
          "INSUFFICIENT_FUNDS",
          "WITHDRAWAL_LIMIT_EXCEEDED",
          "ISSUER_TEMPORARILY_UNAVAILABLE",
          "AUTHENTICATION_REQUIRED"
        ],
        "type": "string",
        "description": "An enumeration."
      },
      "TransactionOverviewAPISchema": {
        "title": "TransactionOverviewAPISchema",
        "required": ["id", "processor", "processorMerchantId", "type", "status", "date", "amount", "currencyCode"],
        "type": "object",
        "properties": {
          "date": {
            "title": "Creation date",
            "type": "string",
            "description": "Date & time of the transaction (UTC)"
          },
          "amount": {
            "minimum": 0,
            "type": "integer",
            "description": "Transaction amount in minor units"
          },
          "currencyCode": {
            "$ref": "#/components/schemas/Currency",
            "title": "Currency",
            "description": "\nThe 3-letter currency code in [ISO 4217 format](https://en.wikipedia.org/wiki/ISO_4217#Active_codes).\ne.g. use `USD` for US dollars.\n"
          },
          "transactionType": {
            "$ref": "#/components/schemas/TransactionTypeEnum",
            "title": "Transaction type"
          },
          "processorTransactionId": {
            "title": "Processor's transaction ID",
            "type": "string",
            "description": "Processor's unique identifier for the transaction"
          },
          "processorName": {
            "title": "Processor Name",
            "type": "string",
            "description": "An identifier of a processor."
          },
          "processorMerchantId": {
            "title": "Processor master account identifier",
            "type": "string",
            "description": "Processor's main account identifier.\n\n* Adyen: Account code\n* Braintree: Merchant ID\n* Stripe: Account ID\"\n"
          },
          "processorStatus": {
            "$ref": "#/components/schemas/PaymentStatus",
            "title": "Processor Transaction status",
            "description": "Transaction status, please refer to the [Transaction Status Codes](#section/API-Usage-Guide/Payment-Status) table for more information"
          },
          "processorStatusReason": {
            "$ref": "#/components/schemas/StatusReasonAPISchema",
            "title": "Payment error",
            "description": "If the transaction has a declined or failed status.\n\nOnly if the status is `DECLINED` or `FAILED`, otherwise `null`.\n"
          }
        }
      },
      "PaymentStatus": {
        "title": "PaymentStatus",
        "enum": [
          "PENDING",
          "FAILED",
          "AUTHORIZED",
          "SETTLING",
          "PARTIALLY_SETTLED",
          "SETTLED",
          "DECLINED",
          "CANCELLED"
        ],
        "type": "string",
        "description": "An enumeration."
      },
      "PaymentStatusTypeEnum": {
        "title": "PaymentStatusTypeEnum",
        "enum": ["APPLICATION_ERROR", "GATEWAY_REJECTED", "ISSUER_DECLINED"],
        "type": "string",
        "description": "An enumeration."
      },
      "TransactionTypeEnum": {
        "title": "TransactionTypeEnum",
        "enum": ["SALE", "REFUND"],
        "type": "string",
        "description": "An enumeration."
      },
      "OptionalAddressAPISchema": {
        "title": "OptionalAddressAPISchema",
        "type": "object",
        "properties": {
          "firstName": {
            "title": "First Name",
            "type": "string",
            "minLength": 1,
            "maxLength": 256
          },
          "lastName": {
            "title": "Last Name",
            "type": "string",
            "minLength": 1,
            "maxLength": 256
          },
          "addressLine1": {
            "title": "Address Line 1",
            "type": "string",
            "description": "Street name, Company name or PO Box",
            "minLength": 1,
            "maxLength": 256
          },
          "addressLine2": {
            "title": "Address Line 2",
            "type": "string",
            "description": "Apartment, Unit or Building number",
            "maxLength": 256
          },
          "city": {
            "title": "City",
            "type": "string",
            "description": "Name of the city, district, town or village",
            "minLength": 1,
            "maxLength": 256
          },
          "state": {
            "title": "State",
            "type": "string",
            "description": "State, County or Province",
            "minLength": 1,
            "maxLength": 256
          },
          "countryCode": {
            "$ref": "#/components/schemas/CountryCodeEnum",
            "title": "Country Code",
            "description": "Two letter ISO country code"
          },
          "postalCode": {
            "title": "Postal Code",
            "type": "string",
            "description": "Postal or ZIP code",
            "minLength": 1,
            "maxLength": 256
          }
        }
      },
      "AddressAPISchema": {
        "title": "AddressAPISchema",
        "required": ["addressLine1", "city", "countryCode"],
        "type": "object",
        "properties": {
          "firstName": { "title": "First Name", "type": "string" },
          "lastName": { "title": "Last Name", "type": "string" },
          "addressLine1": {
            "title": "Address Line 1",
            "type": "string",
            "description": "Street name, Company name or PO Box"
          },
          "addressLine2": {
            "title": "Address Line 2",
            "type": "string",
            "description": "Apartment, Unit or Building number"
          },
          "city": {
            "title": "City",
            "type": "string",
            "description": "Name of the city, district, town or village"
          },
          "state": {
            "title": "State",
            "type": "string",
            "description": "State, County or Province"
          },
          "countryCode": {
            "$ref": "#/components/schemas/CountryCodeEnum",
            "title": "Country Code",
            "description": "Two letter ISO country code"
          },
          "postalCode": {
            "title": "Postal Code",
            "type": "string",
            "description": "Postal or ZIP code"
          }
        }
      },
      "MerchantPaymentMethodTokenAPIResponse": {
        "title": "MerchantPaymentMethodTokenAPIResponse",
        "type": "object",
        "properties": {
          "createdAt": {
            "title": "Creation date",
            "type": "string",
            "description": "Creation date & time of the object (UTC)",
            "format": "date-time"
          },
          "deletedAt": {
            "title": "Revocation date",
            "type": "string",
            "description": "Date & time when this object was revoked. (UTC)",
            "format": "date-time"
          },
          "deleted": {
            "title": "Revoked",
            "type": "boolean",
            "description": "Whether or not this object has been revoked."
          },
          "token": {
            "title": "Token",
            "type": "string",
            "description": "The vaulted payment method token."
          },
          "tokenType": {
            "title": "Token type",
            "type": "string",
            "description": "* `MULTI_USE` a vaulted token that can be re-used with subsequent payments"
          },
          "analyticsId": {
            "title": "Unique analytics ID",
            "type": "string",
            "description": "Unique analytics identifier corresponding to a payment method"
          },
          "paymentMethodType": {
            "$ref": "#/components/schemas/PaymentMethodTypeEnum",
            "title": "Payment method type",
            "description": "Payment method type associated with a token."
          },
          "paymentMethodData": {
            "title": "Payment method data",
            "anyOf": [
              { "$ref": "#/components/schemas/PaymentCardTokenAPISchema" },
              {
                "$ref": "#/components/schemas/PayPalBillingAgreementAPISchema"
              },
              { "$ref": "#/components/schemas/GoCardlessMandateAPISchema" },
              { "$ref": "#/components/schemas/KlarnaCustomerTokenAPISchema" },
              { "$ref": "#/components/schemas/ApayaCustomerTokenAPISchema" }
            ],
            "description": "Payment method data"
          },
          "customerId": {
            "title": "Customer ID",
            "type": "string",
            "description": "The ID representing the customer"
          },
          "description": {
            "title": "Description",
            "type": "string",
            "description": "A friendly description given by the user"
          },
          "default": {
            "title": "Default",
            "type": "boolean",
            "description": "Whether or not this payment method is the default",
            "default": false
          }
        },
        "example": {
          "createdAt": "2021-03-01T12:00:00.123456",
          "token": "_xlXlmBcTnuFxc2N3HAI73wxNjE1NTU5ODY5",
          "tokenType": "MULTI_USE",
          "analyticsId": "vuXhpZouWxaZpRZ-x_brZmtT",
          "paymentMethodType": "PAYMENT_CARD",
          "payment_method_data": {
            "last4Digits": "1111",
            "expirationMonth": "12",
            "expirationYear": "2030",
            "cardholderName": "John Biggins",
            "network": "Visa",
            "networkTransactionId": 20210628190752,
            "accountFundingType": "DEBIT"
          },
          "customerId": "customer-123",
          "description": "My first card",
          "deleted": false,
          "default": true
        }
      },
      "VerifiedMerchantPaymentMethodTokenAPIResponse": {
        "title": "VerifiedMerchantPaymentMethodTokenAPIResponse",
        "allOf": [
          {
            "$ref": "#/components/schemas/MerchantPaymentMethodTokenAPIResponse"
          },
          {
            "properties": {
              "isVerified": {
                "title": "Payment method verified",
                "type": "boolean",
                "description": "Whether or not this payment method was verified"
              }
            },
            "example": { "isVerified": false }
          }
        ]
      },
      "VerifiedMerchantPaymentMethodTokenListAPIResponse": {
        "title": "MerchantPaymentMethodTokenListAPIResponse",
        "type": "object",
        "properties": {
          "data": {
            "title": "Data",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/VerifiedMerchantPaymentMethodTokenAPIResponse"
            }
          }
        }
      },
      "VaultPaymentMethodAPIRequest": {
        "title": "VaultPaymentMethodAPIRequest",
        "required": ["customerId"],
        "type": "object",
        "properties": {
          "customerId": {
            "title": "Customer ID",
            "minLength": 1,
            "type": "string",
            "description": "The ID representing the customer"
          },
          "verify": {
            "type": "boolean",
            "default": false,
            "description": "Whether the payment method should be verified before vaulting or not"
          }
        },
        "additionalProperties": false
      },
      "LoyaltyAPIBalanceResponse": {
        "title": "LoyaltyAPIBalanceResponse",
        "type": "object",
        "properties": {
          "id": {
            "title": "Loyalty Customer ID",
            "type": "string",
            "description": "The unique identifier for the customer on the loyalty provider."
          },
          "connectionId": {
            "title": "Connection ID",
            "type": "string",
            "description": "ID of the Primer connection configuration.",
            "format": "uuid"
          },
          "connectionName": {
            "title": "Provider Name",
            "type": "string",
            "description": "Name of the loyalty provider."
          },
          "balance": {
            "title": "Balance",
            "type": "integer",
            "description": "The loyalty customer's points balance."
          }
        },
        "example": {
          "id": "waon-customer-123",
          "connectionId": "waon-123",
          "connectionName": "WOAN",
          "balance": 500
        }
      },
      "LoyaltyTransactionTypeEnum": {
        "title": "LoyaltyTransactionTypeEnum",
        "enum": ["REDEMPTION", "REFUND"],
        "type": "string",
        "description": "An enumeration."
      },
      "LoyaltyAPITransactionRequest": {
        "title": "LoyaltyAPITransactionRequest",
        "type": "object",
        "required": ["value", "orderId", "customerId", "connectionId"],
        "properties": {
          "connectionId": {
            "title": "Connection ID",
            "type": "string",
            "description": "ID of the Primer connection configuration.",
            "format": "uuid"
          },
          "customerId": {
            "title": "Loyalty Customer ID",
            "type": "string",
            "description": "The unique identifier for the customer on the loyalty provider."
          },
          "orderId": {
            "title": "Order ID",
            "type": "string",
            "description": "Unique identifier for the order."
          },
          "type": {
            "$ref": "#/components/schemas/LoyaltyTransactionTypeEnum",
            "title": "Transaction type",
            "description": "The type of the transaction."
          },
          "value": {
            "title": "Value",
            "type": "integer",
            "description": "The value of points to redeem."
          }
        },
        "example": {
          "connectionId": "waon-123",
          "customerId": "waon-customer-123",
          "orderId": "order-123",
          "value": 200,
          "type": "REDEMPTION"
        }
      },
      "LoyaltyAPITransactionResponse": {
        "title": "LoyaltyAPITransactionResponse",
        "type": "object",
        "properties": {
          "date": {
            "title": "Transaction date",
            "type": "string",
            "description": "Creation date & time of the transaction (UTC)",
            "format": "date-time"
          },
          "id": {
            "title": "Transaction ID",
            "type": "string",
            "description": "Unique Primer identifier for the loyalty transaction."
          },
          "connectionId": {
            "title": "Connection ID",
            "type": "string",
            "description": "ID of the Primer connection configuration.",
            "format": "uuid"
          },
          "customerId": {
            "title": "Loyalty Customer ID",
            "type": "string",
            "description": "The unique identifier for the customer on the loyalty provider."
          },
          "orderId": {
            "title": "Order ID",
            "type": "string",
            "description": "Unique identifier for the order."
          },
          "connectionTransactionId": {
            "title": "Provider Transaction ID",
            "type": "string",
            "description": "ID of the transaction on the loyalty provider's side."
          },
          "connectionName": {
            "title": "Provider Name",
            "type": "string",
            "description": "Name of the loyalty provider."
          },
          "type": {
            "$ref": "#/components/schemas/LoyaltyTransactionTypeEnum",
            "title": "Transaction type",
            "description": "The type of the transaction."
          },
          "value": {
            "title": "Value",
            "type": "integer",
            "description": "The value of the transaction."
          }
        }
      },
      "LoyaltyAPITransactionsListResponse": {
        "title": "LoyaltyAPITransactionsListResponse",
        "type": "object",
        "properties": {
          "items": {
            "title": "Loyalty transactions list",
            "description": "The list of loyalty transactions",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LoyaltyAPITransactionResponse"
            }
          },
          "total": {
            "title": "Total results",
            "description": "The total number of available results",
            "type": "integer"
          },
          "limit": {
            "title": "Limit",
            "description": "The limit of the paged result",
            "type": "integer"
          },
          "offset": {
            "title": "Offset",
            "description": "The offset of the paged result",
            "type": "integer"
          }
        }
      },
      "PaymentsInsightsBinData": {
        "type": "object",
        "properties": {
          "network": { "$ref": "#/components/schemas/CardNetworkEnum" },
          "issuerCountryCode": {
            "enum": [
              "AW",
              "AF",
              "AO",
              "AI",
              "AX",
              "AL",
              "AD",
              "AE",
              "AR",
              "AM",
              "AS",
              "AQ",
              "TF",
              "AG",
              "AU",
              "AT",
              "AZ",
              "BI",
              "BE",
              "BJ",
              "BQ",
              "BF",
              "BD",
              "BG",
              "BH",
              "BS",
              "BA",
              "BL",
              "BY",
              "BZ",
              "BM",
              "BO",
              "BR",
              "BB",
              "BN",
              "BT",
              "BV",
              "BW",
              "CF",
              "CA",
              "CC",
              "CH",
              "CL",
              "CN",
              "CI",
              "CM",
              "CD",
              "CG",
              "CK",
              "CO",
              "KM",
              "CV",
              "CR",
              "CU",
              "CW",
              "CX",
              "KY",
              "CY",
              "CZ",
              "DE",
              "DJ",
              "DM",
              "DK",
              "DO",
              "DZ",
              "EC",
              "EG",
              "ER",
              "EH",
              "ES",
              "EE",
              "ET",
              "FI",
              "FJ",
              "FK",
              "FR",
              "FO",
              "FM",
              "GA",
              "GB",
              "GE",
              "GG",
              "GH",
              "GI",
              "GN",
              "GP",
              "GM",
              "GW",
              "GQ",
              "GR",
              "GD",
              "GL",
              "GT",
              "GF",
              "GU",
              "GY",
              "HK",
              "HM",
              "HN",
              "HR",
              "HT",
              "HU",
              "ID",
              "IM",
              "IN",
              "IO",
              "IE",
              "IR",
              "IQ",
              "IS",
              "IL",
              "IT",
              "JM",
              "JE",
              "JO",
              "JP",
              "KZ",
              "KE",
              "KG",
              "KH",
              "KI",
              "KN",
              "KR",
              "KW",
              "LA",
              "LB",
              "LR",
              "LY",
              "LC",
              "LI",
              "LK",
              "LS",
              "LT",
              "LU",
              "LV",
              "MO",
              "MF",
              "MA",
              "MC",
              "MD",
              "MG",
              "MV",
              "MX",
              "MH",
              "MK",
              "ML",
              "MT",
              "MM",
              "ME",
              "MN",
              "MP",
              "MZ",
              "MR",
              "MS",
              "MQ",
              "MU",
              "MW",
              "MY",
              "YT",
              "NA",
              "NC",
              "NE",
              "NF",
              "NG",
              "NI",
              "NU",
              "NL",
              "NO",
              "NP",
              "NR",
              "NZ",
              "OM",
              "PK",
              "PA",
              "PN",
              "PE",
              "PH",
              "PW",
              "PG",
              "PL",
              "PR",
              "KP",
              "PT",
              "PY",
              "PS",
              "PF",
              "QA",
              "RE",
              "RO",
              "RU",
              "RW",
              "SA",
              "SD",
              "SN",
              "SG",
              "GS",
              "SH",
              "SJ",
              "SB",
              "SL",
              "SV",
              "SM",
              "SO",
              "PM",
              "RS",
              "SS",
              "ST",
              "SR",
              "SK",
              "SI",
              "SE",
              "SZ",
              "SX",
              "SC",
              "SY",
              "TC",
              "TD",
              "TG",
              "TH",
              "TJ",
              "TK",
              "TM",
              "TL",
              "TO",
              "TT",
              "TN",
              "TR",
              "TV",
              "TW",
              "TZ",
              "UG",
              "UA",
              "UM",
              "UY",
              "US",
              "UZ",
              "VA",
              "VC",
              "VE",
              "VG",
              "VI",
              "VN",
              "VU",
              "WF",
              "WS",
              "YE",
              "ZA",
              "ZM",
              "ZW"
            ],
            "type": "string",
            "description": "2-letter country code in [ISO 3166-1](\nhttps://en.wikipedia.org/wiki/ISO_3166-1_alpha-2#Officially_assigned_code_elements) alpha format,\ne.g. FR for France and GB for the United Kingdom.\n    "
          },
          "issuerName": {
            "type": "string",
            "description": "The name of the issuing bank.",
            "maxLength": 250
          },
          "productUsageType": {
            "type": "string",
            "description": "The usage type of the payment card e.g. commercial, consumer.",
            "maxLength": 250
          },
          "accountFundingType": {
            "type": "string",
            "description": "The funding type of the payment card e.g. credit, debit, prepaid.",
            "maxLength": 250
          }
        }
      },
      "PaymentsInsightsOrder": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The order reference for the payment.",
            "maxLength": 250
          },
          "countryCode": {
            "enum": [
              "AW",
              "AF",
              "AO",
              "AI",
              "AX",
              "AL",
              "AD",
              "AE",
              "AR",
              "AM",
              "AS",
              "AQ",
              "TF",
              "AG",
              "AU",
              "AT",
              "AZ",
              "BI",
              "BE",
              "BJ",
              "BQ",
              "BF",
              "BD",
              "BG",
              "BH",
              "BS",
              "BA",
              "BL",
              "BY",
              "BZ",
              "BM",
              "BO",
              "BR",
              "BB",
              "BN",
              "BT",
              "BV",
              "BW",
              "CF",
              "CA",
              "CC",
              "CH",
              "CL",
              "CN",
              "CI",
              "CM",
              "CD",
              "CG",
              "CK",
              "CO",
              "KM",
              "CV",
              "CR",
              "CU",
              "CW",
              "CX",
              "KY",
              "CY",
              "CZ",
              "DE",
              "DJ",
              "DM",
              "DK",
              "DO",
              "DZ",
              "EC",
              "EG",
              "ER",
              "EH",
              "ES",
              "EE",
              "ET",
              "FI",
              "FJ",
              "FK",
              "FR",
              "FO",
              "FM",
              "GA",
              "GB",
              "GE",
              "GG",
              "GH",
              "GI",
              "GN",
              "GP",
              "GM",
              "GW",
              "GQ",
              "GR",
              "GD",
              "GL",
              "GT",
              "GF",
              "GU",
              "GY",
              "HK",
              "HM",
              "HN",
              "HR",
              "HT",
              "HU",
              "ID",
              "IM",
              "IN",
              "IO",
              "IE",
              "IR",
              "IQ",
              "IS",
              "IL",
              "IT",
              "JM",
              "JE",
              "JO",
              "JP",
              "KZ",
              "KE",
              "KG",
              "KH",
              "KI",
              "KN",
              "KR",
              "KW",
              "LA",
              "LB",
              "LR",
              "LY",
              "LC",
              "LI",
              "LK",
              "LS",
              "LT",
              "LU",
              "LV",
              "MO",
              "MF",
              "MA",
              "MC",
              "MD",
              "MG",
              "MV",
              "MX",
              "MH",
              "MK",
              "ML",
              "MT",
              "MM",
              "ME",
              "MN",
              "MP",
              "MZ",
              "MR",
              "MS",
              "MQ",
              "MU",
              "MW",
              "MY",
              "YT",
              "NA",
              "NC",
              "NE",
              "NF",
              "NG",
              "NI",
              "NU",
              "NL",
              "NO",
              "NP",
              "NR",
              "NZ",
              "OM",
              "PK",
              "PA",
              "PN",
              "PE",
              "PH",
              "PW",
              "PG",
              "PL",
              "PR",
              "KP",
              "PT",
              "PY",
              "PS",
              "PF",
              "QA",
              "RE",
              "RO",
              "RU",
              "RW",
              "SA",
              "SD",
              "SN",
              "SG",
              "GS",
              "SH",
              "SJ",
              "SB",
              "SL",
              "SV",
              "SM",
              "SO",
              "PM",
              "RS",
              "SS",
              "ST",
              "SR",
              "SK",
              "SI",
              "SE",
              "SZ",
              "SX",
              "SC",
              "SY",
              "TC",
              "TD",
              "TG",
              "TH",
              "TJ",
              "TK",
              "TM",
              "TL",
              "TO",
              "TT",
              "TN",
              "TR",
              "TV",
              "TW",
              "TZ",
              "UG",
              "UA",
              "UM",
              "UY",
              "US",
              "UZ",
              "VA",
              "VC",
              "VE",
              "VG",
              "VI",
              "VN",
              "VU",
              "WF",
              "WS",
              "YE",
              "ZA",
              "ZM",
              "ZW"
            ],
            "type": "string",
            "description": "2-letter country code in [ISO 3166-1](\nhttps://en.wikipedia.org/wiki/ISO_3166-1_alpha-2#Officially_assigned_code_elements) alpha format,\ne.g. FR for France and GB for the United Kingdom."
          }
        },
        "required": ["id"]
      },
      "PaymentsInsightsPatchedPayment": {
        "type": "object",
        "properties": {
          "paymentId": {
            "type": "string",
            "description": "The payment ID.\n\nThe payment ID must be unique. You can use this unique payment ID to update payment details.",
            "maxLength": 250
          },
          "currencyCode": {
            "enum": [
              "AED",
              "AFN",
              "ALL",
              "AMD",
              "ANG",
              "AOA",
              "ARS",
              "AUD",
              "AWG",
              "AZN",
              "BAM",
              "BBD",
              "BDT",
              "BGN",
              "BHD",
              "BIF",
              "BMD",
              "BND",
              "BOB",
              "BOV",
              "BRL",
              "BSD",
              "BTN",
              "BWP",
              "BYR",
              "BYN",
              "BZD",
              "CAD",
              "CDF",
              "CHE",
              "CHF",
              "CHW",
              "CLF",
              "CLP",
              "CNY",
              "COP",
              "COU",
              "CRC",
              "CUC",
              "CUP",
              "CVE",
              "CZK",
              "DJF",
              "DKK",
              "DOP",
              "DZD",
              "EGP",
              "ERN",
              "ETB",
              "EUR",
              "FJD",
              "FKP",
              "GBP",
              "GEL",
              "GHS",
              "GIP",
              "GMD",
              "GNF",
              "GTQ",
              "GYD",
              "HKD",
              "HNL",
              "HRK",
              "HTG",
              "HUF",
              "IDR",
              "ILS",
              "INR",
              "IQD",
              "IRR",
              "ISK",
              "JMD",
              "JOD",
              "JPY",
              "KES",
              "KGS",
              "KHR",
              "KMF",
              "KPW",
              "KRW",
              "KWD",
              "KYD",
              "KZT",
              "LAK",
              "LBP",
              "LKR",
              "LRD",
              "LSL",
              "LTL",
              "LVL",
              "LYD",
              "MAD",
              "MDL",
              "MGA",
              "MKD",
              "MMK",
              "MNT",
              "MOP",
              "MRO",
              "MUR",
              "MVR",
              "MWK",
              "MXN",
              "MXV",
              "MYR",
              "MZN",
              "NAD",
              "NGN",
              "NIO",
              "NOK",
              "NPR",
              "NZD",
              "OMR",
              "PAB",
              "PEN",
              "PGK",
              "PHP",
              "PKR",
              "PLN",
              "PYG",
              "QAR",
              "RON",
              "RSD",
              "RUB",
              "RWF",
              "SAR",
              "SBD",
              "SCR",
              "SDG",
              "SEK",
              "SGD",
              "SHP",
              "SLL",
              "SOS",
              "SRD",
              "SSP",
              "STD",
              "SVC",
              "SYP",
              "SZL",
              "THB",
              "TJS",
              "TMT",
              "TND",
              "TOP",
              "TRY",
              "TTD",
              "TWD",
              "TZS",
              "UAH",
              "UGX",
              "USD",
              "USN",
              "USS",
              "UYI",
              "UYU",
              "UZS",
              "VEF",
              "VND",
              "VUV",
              "WST",
              "XAF",
              "XAG",
              "XAU",
              "XBA",
              "XBB",
              "XBC",
              "XBD",
              "XCD",
              "XDR",
              "XFU",
              "XOF",
              "XPD",
              "XPF",
              "XPT",
              "XSU",
              "XTS",
              "XUA",
              "YER",
              "ZAR",
              "ZMW",
              "ZWL"
            ],
            "type": "string",
            "description": "The 3-letter currency code in\n[ISO 4217 format](https://en.wikipedia.org/wiki/ISO_4217#Active_codes).\n\ne.g. use `USD` for US dollars."
          },
          "processor": {
            "$ref": "#/components/schemas/PaymentsInsightsProcessor"
          },
          "amount": {
            "type": "integer",
            "minimum": 0,
            "description": "The amount you would like to charge the customer,\nin minor units. e.g. for $7, use `700`.\n\nSome currencies, such as Japanese Yen, do not have minor units.\nIn this case you should use the value as it is, without any formatting.\nFor example for ¥100, use `100`.\nThe minimum amount is 0."
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "The payment creation date and time (UTC) in [ISO 8601 format](\nhttps://en.wikipedia.org/wiki/ISO_8601).\n\nCannot be updated in partial updates PATCH."
          },
          "order": { "$ref": "#/components/schemas/PaymentsInsightsOrder" },
          "status": {
            "enum": [
              "DECLINED",
              "CANCELLED",
              "FAILED",
              "SETTLING",
              "PARTIALLY_SETTLED",
              "AUTHORIZED",
              "SETTLED",
              "PENDING"
            ],
            "type": "string",
            "description": "See the payment [status table](\nhttps://apiref.primer.io/docs#payment-status) for more information."
          },
          "statusReason": {
            "$ref": "#/components/schemas/PaymentsInsightsStatusReason",
            "description": "Pass more information regarding the payment's status in this field.\n\nThis is especially useful when the status is `DECLINED` or `FAILED`."
          },
          "paymentMethod": {
            "$ref": "#/components/schemas/PaymentsInsightsPaymentMethod"
          },
          "metadata": {
            "type": "object",
            "description": "Additional data to be used throughout the payment lifecycle.\n\nAd dictionary of key-value pairs where the values can only be strings or integers.\n\ne.g. `{\"productId\": 1001, \"merchantId\": \"88278a\"}`"
          },
          "paymentType": {
            "enum": ["FIRST_PAYMENT", "ECOMMERCE", "SUBSCRIPTION", "UNSCHEDULED", "MOTO", "IN_STORE"],
            "type": "string",
            "description": "Payment types, primarily to be used for recurring payments.\n\nNote: If you successfully vault a `SINGLE_USE` token on payment\ncreation, then there's no need to set a value for this field and it will\nbe flagged as `FIRST_PAYMENT`. Otherwise, see the table below for all\npossible values.\n\n\n| paymentType | Use case |\n| --- | --- |\n| `FIRST_PAYMENT` | a customer-initiated payment which is the first in a series of recurring payments or subscription, or a card on file scenario. |\n| `ECOMMERCE` | a customer-initiated payment using stored payment details where the cardholder is present. |\n| `SUBSCRIPTION` | a merchant-initiated payment as part of a series of payments on a fixed schedule and a set amount. |\n| `UNSCHEDULED` | a merchant-initiated payment using stored payment details with no fixed schedule or amount. |\n| `MOTO` | a merchant-initiated mail order or telephone order payment. |\n| `IN_STORE` | a customer-initiated payment where the customer is physically present in a shop. |"
          },
          "descriptor": {
            "type": "string",
            "description": "A description of the payment,\nas it would typically appear on a bank statement.",
            "maxLength": 250
          }
        }
      },
      "PaymentsInsightsPayment": {
        "type": "object",
        "properties": {
          "paymentId": {
            "type": "string",
            "description": "The payment ID.\n\nThe payment ID must be unique. You can use this unique payment ID to update payment details.",
            "maxLength": 250
          },
          "currencyCode": {
            "enum": [
              "AED",
              "AFN",
              "ALL",
              "AMD",
              "ANG",
              "AOA",
              "ARS",
              "AUD",
              "AWG",
              "AZN",
              "BAM",
              "BBD",
              "BDT",
              "BGN",
              "BHD",
              "BIF",
              "BMD",
              "BND",
              "BOB",
              "BOV",
              "BRL",
              "BSD",
              "BTN",
              "BWP",
              "BYR",
              "BYN",
              "BZD",
              "CAD",
              "CDF",
              "CHE",
              "CHF",
              "CHW",
              "CLF",
              "CLP",
              "CNY",
              "COP",
              "COU",
              "CRC",
              "CUC",
              "CUP",
              "CVE",
              "CZK",
              "DJF",
              "DKK",
              "DOP",
              "DZD",
              "EGP",
              "ERN",
              "ETB",
              "EUR",
              "FJD",
              "FKP",
              "GBP",
              "GEL",
              "GHS",
              "GIP",
              "GMD",
              "GNF",
              "GTQ",
              "GYD",
              "HKD",
              "HNL",
              "HRK",
              "HTG",
              "HUF",
              "IDR",
              "ILS",
              "INR",
              "IQD",
              "IRR",
              "ISK",
              "JMD",
              "JOD",
              "JPY",
              "KES",
              "KGS",
              "KHR",
              "KMF",
              "KPW",
              "KRW",
              "KWD",
              "KYD",
              "KZT",
              "LAK",
              "LBP",
              "LKR",
              "LRD",
              "LSL",
              "LTL",
              "LVL",
              "LYD",
              "MAD",
              "MDL",
              "MGA",
              "MKD",
              "MMK",
              "MNT",
              "MOP",
              "MRO",
              "MUR",
              "MVR",
              "MWK",
              "MXN",
              "MXV",
              "MYR",
              "MZN",
              "NAD",
              "NGN",
              "NIO",
              "NOK",
              "NPR",
              "NZD",
              "OMR",
              "PAB",
              "PEN",
              "PGK",
              "PHP",
              "PKR",
              "PLN",
              "PYG",
              "QAR",
              "RON",
              "RSD",
              "RUB",
              "RWF",
              "SAR",
              "SBD",
              "SCR",
              "SDG",
              "SEK",
              "SGD",
              "SHP",
              "SLL",
              "SOS",
              "SRD",
              "SSP",
              "STD",
              "SVC",
              "SYP",
              "SZL",
              "THB",
              "TJS",
              "TMT",
              "TND",
              "TOP",
              "TRY",
              "TTD",
              "TWD",
              "TZS",
              "UAH",
              "UGX",
              "USD",
              "USN",
              "USS",
              "UYI",
              "UYU",
              "UZS",
              "VEF",
              "VND",
              "VUV",
              "WST",
              "XAF",
              "XAG",
              "XAU",
              "XBA",
              "XBB",
              "XBC",
              "XBD",
              "XCD",
              "XDR",
              "XFU",
              "XOF",
              "XPD",
              "XPF",
              "XPT",
              "XSU",
              "XTS",
              "XUA",
              "YER",
              "ZAR",
              "ZMW",
              "ZWL"
            ],
            "type": "string",
            "description": "The 3-letter currency code in\n[ISO 4217 format](https://en.wikipedia.org/wiki/ISO_4217#Active_codes).\n\ne.g. use `USD` for US dollars."
          },
          "processor": {
            "$ref": "#/components/schemas/PaymentsInsightsProcessor"
          },
          "amount": {
            "type": "integer",
            "minimum": 0,
            "description": "The amount you would like to charge the customer,\nin minor units. e.g. for $7, use `700`.\n\nSome currencies, such as Japanese Yen, do not have minor units.\nIn this case you should use the value as it is, without any formatting.\nFor example for ¥100, use `100`.\nThe minimum amount is 0."
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "The payment creation date and time (UTC) in [ISO 8601 format](\nhttps://en.wikipedia.org/wiki/ISO_8601).\n\nCannot be updated in partial updates PATCH."
          },
          "order": { "$ref": "#/components/schemas/PaymentsInsightsOrder" },
          "status": {
            "enum": [
              "DECLINED",
              "CANCELLED",
              "FAILED",
              "SETTLING",
              "PARTIALLY_SETTLED",
              "AUTHORIZED",
              "SETTLED",
              "PENDING"
            ],
            "type": "string",
            "description": "See the payment [status table](\nhttps://apiref.primer.io/docs#payment-status) for more information."
          },
          "statusReason": {
            "$ref": "#/components/schemas/PaymentsInsightsStatusReason",
            "description": "Pass more information regarding the payment's status in this field.\n\nThis is especially useful when the status is `DECLINED` or `FAILED`."
          },
          "paymentMethod": {
            "$ref": "#/components/schemas/PaymentsInsightsPaymentMethod"
          },
          "metadata": {
            "type": "object",
            "description": "Additional data to be used throughout the payment lifecycle.\n\nAd dictionary of key-value pairs where the values can only be strings or integers.\n\ne.g. `{\"productId\": 1001, \"merchantId\": \"88278a\"}`"
          },
          "paymentType": {
            "enum": ["FIRST_PAYMENT", "ECOMMERCE", "SUBSCRIPTION", "UNSCHEDULED", "MOTO", "IN_STORE"],
            "type": "string",
            "description": "Payment types, primarily to be used for recurring payments.\n\nNote: If you successfully vault a `SINGLE_USE` token on payment\ncreation, then there's no need to set a value for this field and it will\nbe flagged as `FIRST_PAYMENT`. Otherwise, see the table below for all\npossible values.\n\n\n| paymentType | Use case |\n| --- | --- |\n| `FIRST_PAYMENT` | a customer-initiated payment which is the first in a series of recurring payments or subscription, or a card on file scenario. |\n| `ECOMMERCE` | a customer-initiated payment using stored payment details where the cardholder is present. |\n| `SUBSCRIPTION` | a merchant-initiated payment as part of a series of payments on a fixed schedule and a set amount. |\n| `UNSCHEDULED` | a merchant-initiated payment using stored payment details with no fixed schedule or amount. |\n| `MOTO` | a merchant-initiated mail order or telephone order payment. |\n| `IN_STORE` | a customer-initiated payment where the customer is physically present in a shop. |"
          },
          "descriptor": {
            "type": "string",
            "description": "A description of the payment,\nas it would typically appear on a bank statement.",
            "maxLength": 250
          }
        },
        "required": ["amount", "createdAt", "currencyCode", "order", "paymentId", "paymentMethod", "processor"]
      },
      "PaymentsInsightsPaymentMethod": {
        "type": "object",
        "properties": {
          "paymentMethodType": {
            "$ref": "#/components/schemas/PaymentMethodTypeEnum",
            "description": "Payment method type used for payment authorization."
          },
          "data": {
            "$ref": "#/components/schemas/PaymentsInsightsPaymentMethodData"
          },
          "threeDSecureAuthentication": {
            "$ref": "#/components/schemas/PaymentsInsightsThreeDSecureAuthentication"
          }
        },
        "required": ["paymentMethodType"]
      },
      "PaymentsInsightsPaymentMethodData": {
        "type": "object",
        "properties": {
          "binData": { "$ref": "#/components/schemas/PaymentsInsightsBinData" },
          "first6Digits": {
            "type": "string",
            "description": "The first six digits of the card used for payment,\nalso known as the Bank Identification Number (BIN).",
            "maxLength": 250
          }
        }
      },
      "PaymentsInsightsProcessor": {
        "type": "object",
        "properties": {
          "name": {
            "enum": [
              "APAYA",
              "ADYEN",
              "AFTERPAY",
              "AIRWALLEX",
              "ALIANT",
              "ALIPAY",
              "ATOME",
              "BANKED",
              "BARCLAYCARD",
              "BRAINTREE",
              "BUCKAROO",
              "BRIDGE",
              "CHAI",
              "CHECKOUT",
              "CLEARPAY",
              "COINBASE",
              "CYBERSOURCE",
              "DLOCAL",
              "EBANX",
              "ECOSPEND",
              "FINTECTURE",
              "GLOBAL_PAYMENTS",
              "HOOLAH",
              "INGENICO",
              "INGENICO-CONNECT",
              "KLARNA",
              "LAYBUY",
              "MPGS",
              "MOLLIE",
              "NEONOMICS",
              "NEXI",
              "NUVEI",
              "OMISE",
              "OPENNODE",
              "PAY_NL",
              "PAY-NL",
              "PAYGENT",
              "PAYPAL",
              "PRIMER_TEST",
              "STRIPE",
              "TRILO",
              "TRUELAYER",
              "VOLT",
              "VYNE",
              "WORLDPAY",
              "EMERCHANTPAY",
              "XFERS",
              "RAPYD",
              "AUTHNET",
              "NETS",
              "NETAXEPT",
              "PRIMER_PROCESSOR",
              "REACH",
              "TRUST_PAYMENTS",
              "TWOC2P",
              "MERCADO_PAGO",
              "PAYU",
              "XENDIT",
              "FISERV",
              "PACYPAY",
              "SHOPEEPAY",
              "TRIPLE_A",
              "IPAY88",
              "APPLE_PAY",
              "GOOGLE_PAY",
              "RISKIFIED",
              "TAXJAR",
              "STITCH",
              "SIGNIFYD"
            ],
            "type": "string",
            "description": "The payment processor used for this payment.\nPrimer supports the above processors through the Payments API,\nhowever any value can be passed here.",
            "maxLength": 250
          },
          "merchantId": {
            "type": "string",
            "description": "The merchant ID registered at the payment processor used for this payment.",
            "maxLength": 250
          }
        },
        "required": ["name"]
      },
      "PaymentsInsightsStatusReason": {
        "type": "object",
        "properties": {
          "type": {
            "enum": ["APPLICATION_ERROR", "GATEWAY_REJECTED", "ISSUER_DECLINED"],
            "type": "string"
          },
          "declineType": {
            "enum": ["SOFT_DECLINE", "HARD_DECLINE"],
            "type": "string",
            "description": "Declines of type `SOFT_DECLINE` may have been retried.\nWhereas declines of type `HARD_DECLINE` should have not been retried.\n"
          },
          "code": {
            "enum": [
              "ERROR",
              "INVALID_CARD_NUMBER",
              "EXPIRED_CARD",
              "LOST_OR_STOLEN_CARD",
              "SUSPECTED_FRAUD",
              "UNKNOWN",
              "DECLINED",
              "REFER_TO_CARD_ISSUER",
              "DO_NOT_HONOR",
              "INSUFFICIENT_FUNDS",
              "WITHDRAWAL_LIMIT_EXCEEDED",
              "ISSUER_TEMPORARILY_UNAVAILABLE",
              "AUTHENTICATION_REQUIRED"
            ],
            "type": "string",
            "description": "Payment status code with the error code when\nthe issuer declined the payment."
          },
          "message": {
            "type": "string",
            "description": "Message detail returned by the processor when\nthe error on appeared on their part.",
            "maxLength": 250
          }
        }
      },
      "PaymentsInsightsThreeDSecureAuthentication": {
        "type": "object",
        "properties": {
          "transStatus": { "type": "string", "maxLength": 250 },
          "transStatusReason": { "type": "string", "maxLength": 250 },
          "responseCode": {
            "enum": ["NOT_PERFORMED", "SKIPPED", "AUTH_SUCCESS", "AUTH_FAILED", "CHALLENGE", "METHOD"],
            "type": "string",
            "description": "The response returned during the 3D Secure authentication call."
          },
          "challengeIssued": {
            "type": "boolean",
            "description": "The challenge status of the 3D Secure authentication.\nSet to false for frictionless 3D Secure authentication."
          },
          "protocolVersion": {
            "type": "string",
            "description": "The protocol version used during 3D Secure authentication.",
            "maxLength": 250
          },
          "reasonCode": {
            "type": "string",
            "description": "The reason code for unsuccessful 3D Secure authentication attempts.",
            "maxLength": 250
          },
          "reasonText": {
            "type": "string",
            "description": "The human readable reason text for unsuccessful\n3D Secure authentication attempts.",
            "maxLength": 250
          },
          "eci": {
            "type": "string",
            "description": "E-commerce Indicator (ECI)",
            "maxLength": 250
          }
        }
      },
      "ErrorObject": {
        "title": "Error",
        "type": "object",
        "description": "An object containing information about the error that occurred.",
        "required": ["errorId", "description"],
        "properties": {
          "errorId": {
            "title": "Error ID",
            "type": "string",
            "description": "An error ID"
          },
          "description": {
            "title": "Error description",
            "type": "string",
            "description": "A human readable description of the error"
          },
          "diagnosticsId": {
            "title": "Error diagnostics ID",
            "type": "string",
            "description": "An ID that you can quote when contacting the support team (support@primer.io)."
          },
          "validationErrors": {
            "title": "Validation Errors",
            "type": "array",
            "items": { "type": "object" },
            "description": "Returned in case of a badly formed request"
          }
        }
      },
      "BadRequestErrorResponse": {
        "title": "BadRequestErrorResponse",
        "type": "object",
        "required": ["error"],
        "properties": {
          "error": { "$ref": "#/components/schemas/ErrorObject" }
        }
      },
      "NotFoundErrorResponse": {
        "title": "NotFoundErrorResponse",
        "type": "object",
        "required": ["error"],
        "properties": {
          "error": { "$ref": "#/components/schemas/ErrorObject" }
        }
      },
      "ConflictErrorResponse": {
        "title": "ConflictErrorResponse",
        "type": "object",
        "required": ["error"],
        "properties": {
          "error": { "$ref": "#/components/schemas/ErrorObject" }
        }
      },
      "UnprocessableEntityErrorResponse": {
        "title": "UnprocessableEntityErrorResponse",
        "type": "object",
        "required": ["error"],
        "properties": {
          "error": { "$ref": "#/components/schemas/ErrorObject" }
        }
      },
      "AuthorizationTypeEnum": {
        "title": "AuthorizationTypeEnum",
        "enum": ["ESTIMATED", "FINAL"],
        "type": "string",
        "description": "Type of authorization for the payment."
      }
    }
  }
}
