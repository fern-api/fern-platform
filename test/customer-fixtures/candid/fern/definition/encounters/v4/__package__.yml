# yaml-language-server: $schema=https://raw.githubusercontent.com/fern-api/fern/main/fern.schema.json

imports:
  commons: ../../commons.yml
  billing-notes: ../../billing-notes.yml
  contracts: ../../contracts.yml
  diagnoses: ../../diagnoses.yml
  patient-payments: ../../patient-payments/v3/__package__.yml
  tags: ../../tags.yml
  claims: ../../claims.yml
  service-lines: ../../service-lines/v2/__package__.yml
  credentialing: ../../credentialing.yml
  individual: ../../individual.yml
  guarantor: ../../guarantor/v1/__package__.yml
  encounter-provider: ../../encounter-providers/v2/__package__.yml
  service-facility: ../../service-facility.yml

service:
  auth: true
  base-path: /api/encounters/v4
  audiences:
    - external
  endpoints:
    getAll:
      display-name: Get all encounters
      method: GET
      path: ""
      response: EncounterPage
      request:
        name: GetAllEncountersRequest
        query-parameters:
          limit:
            type: optional<integer>
            docs: Defaults to 100
          claim_status: optional<claims.ClaimStatus>
          sort:
            type: optional<EncounterSortOptions>
            docs: Defaults to created_at:desc
          page_token: optional<commons.PageToken>
          date_of_service_min: optional<commons.Date>
          date_of_service_max: optional<commons.Date>
          primary_payer_names:
            type: optional<string>
            docs: Comma delimited string
          search_term:
            type: optional<string>
            docs: |
              Filter by any of the following fields: encounter_id, claim_id, patient external_id,
              patient date of birth, patient first name, patient last name,
              or encounter external id.
          external_id:
            type: optional<commons.EncounterExternalId>
            docs: Filter to an exact match on encounter external_id, if one exists
          diagnoses_updated_since:
            type: optional<datetime>
            docs: |
              ISO 8601 timestamp; ideally in UTC (although not required): 2019-08-24T14:15:22Z
          tag_ids:
            type: optional<tags.TagId>
            allow-multiple: true
          work_queue_id: optional<commons.WorkQueueId>
          billable_status: optional<BillableStatusType>
          responsible_party: optional<ResponsiblePartyType>
          owner_of_next_action: optional<EncounterOwnerOfNextActionType>

    get:
      display-name: Get encounter
      method: GET
      path: /{encounter_id}
      path-parameters:
        encounter_id: commons.EncounterId
      response: Encounter

    create:
      display-name: Create encounter
      method: POST
      path: ""
      request:
        name: EncounterCreate
        body:
          extends: EncounterBase
          properties:
            patient: individual.PatientCreate
            billing_provider: encounter-provider.BillingProvider
            rendering_provider: encounter-provider.RenderingProvider
            referring_provider:
              type: optional<encounter-provider.ReferringProvider>
              docs: |
                The provider who referred the services that were rendered.
                All physicians who order services or refer Medicare beneficiaries must
                report this data.
                If a claim involves multiple referring physicians, create a separate
                encounter for each physician.
            service_facility: optional<service-facility.EncounterServiceFacilityBase>
            subscriber_primary:
              type: optional<individual.SubscriberCreate>
              docs: |
                Subscriber_primary is required when responsible_party is INSURANCE_PAY (i.e. when the claim should be billed to insurance).
                These are not required fields when responsible_party is SELF_PAY (i.e. when the claim should be billed to the patient).
                However, if you collect this for patients, even self-pay, we recommend including it when sending encounters to Candid.
                Note: Cash Pay is no longer a valid payer_id in v4, please use responsible party to define self-pay claims
            subscriber_secondary:
              type: optional<individual.SubscriberCreate>
              docs: |
                Please always include this when you have it, even for self-pay claims
            diagnoses:
              type: list<diagnoses.DiagnosisCreate>
              docs: |
                Ideally, this field should contain no more than 12 diagnoses. However, more diagnoses
                may be submitted at this time, and coders will later prioritize the 12 that will be
                submitted to the payor.
            clinical_notes: optional<list<ClinicalNoteCategoryCreate>>
            billing_notes:
              type: optional<list<billing-notes.BillingNoteBase>>
              docs: |
                Spot to store misc, human-readable, notes about this encounter to be used
                in the billing process.
            place_of_service_code: commons.FacilityTypeCode
            patient_histories: optional<list<PatientHistoryCategory>>
            service_lines:
              type: optional<list<service-lines.ServiceLineCreate>>
              docs: |
                Each service line must be linked to a diagnosis. Concretely,
                `service_line.diagnosis_pointers`must contain at least one entry which should be
                in bounds of the diagnoses list field
            guarantor:
              type: optional<guarantor.GuarantorCreate>
              docs: |
                Personal and contact info for the guarantor of the patient responsibility.

      response: Encounter
      errors:
        - EncounterExternalIdUniquenessError
        - commons.EntityNotFoundError
        - EncounterGuarantorMissingContactInfoError
        - commons.HttpRequestValidationsError
        - CashPayPayerError

    update:
      display-name: Update encounter
      method: PATCH
      path: /{encounter_id}
      path-parameters:
        encounter_id: commons.EncounterId
      request:
        name: EncounterUpdate
        body:
          properties:
            prior_authorization_number:
              type: optional<PriorAuthorizationNumber>
              docs: Box 23 on the CMS-1500 claim form.
            external_id:
              type: optional<commons.EncounterExternalId>
              docs: |
                A client-specified unique ID to associate with this encounter;
                for example, your internal encounter ID or a Dr. Chrono encounter ID.
                This field should not contain PHI.
            date_of_service:
              type: optional<commons.Date>
              docs: |
                Date formatted as YYYY-MM-DD; eg: 2019-08-24.
                This date must be the local date in the timezone where the service occurred.
                Box 24a on the CMS-1500 claim form.
                If service occurred over a range of dates, this should be the start date.
            diagnosis_ids:
              type: optional<list<diagnoses.DiagnosisId>>
              docs: |
                Ideally, this field should contain no more than 12 diagnoses. However, more diagnoses
                may be submitted at this time, and coders will later prioritize the 12 that will be
                submitted to the payor.
            tag_ids: optional<list<tags.TagId>>
            clinical_notes: optional<list<ClinicalNoteCategoryCreate>>
            pay_to_address: optional<commons.StreetAddressLongZip>
            billable_status:
              type: optional<BillableStatusType>
            responsible_party: optional<ResponsiblePartyType>
            provider_accepts_assignment: optional<boolean>
            benefits_assigned_to_provider: optional<boolean>
            synchronicity: optional<SynchronicityType>
            place_of_service_code: optional<commons.FacilityTypeCode>
            appointment_type: optional<string>
            end_date_of_service: optional<commons.Date>
            subscriber_secondary: optional<individual.SubscriberCreate>
      response: Encounter
      errors:
        - EncounterExternalIdUniquenessError
        - commons.EntityNotFoundError
        - commons.UnauthorizedError
        - commons.HttpRequestValidationsError

    getAttachments:
      display-name: Get attachments for encounter
      method: GET
      path: /{encounter_id}/attachments
      path-parameters:
        encounter_id: commons.EncounterId
      response: list<EncounterAttachment>

    # createAttachment requires fern to add support for file upload
    # https://github.com/fern-api/fern/issues/269
    # createAttachment:
    #   method: POST
    #   path: /{encounter_id}/attachments/v3

    generateClinicalNotesPdf:
      display-name: Generate clinical notes PDF
      method: POST
      path: /{encounter_id}/clinical-notes-pdf/generate
      path-parameters:
        encounter_id: commons.EncounterId
      response: GenerateClinicalNotesPdfResponse

    recomputeNetworkStatusResults:
      display-name: Recompute encounter network status
      docs: Initiates a re-calculation of the contracting status
      method: PUT
      path: /{encounter_id}/network-status-results
      path-parameters:
        encounter_id: commons.EncounterId
      response: NetworkStatusComputationResults

    markAsNotBillable:
      display-name: Mark encounter not billable
      method: PUT
      path: /{encounter_id}/mark-as-not-billable
      path-parameters:
        encounter_id: commons.EncounterId
      response: MarkAsNotBillableResponse

types:
  EncounterBase:
    properties:
      external_id:
        type: commons.EncounterExternalId
        docs: |
          A client-specified unique ID to associate with this encounter;
          for example, your internal encounter ID or a Dr. Chrono encounter ID.
          This field should not contain PHI.
      date_of_service:
        type: commons.Date
        docs: |
          Date formatted as YYYY-MM-DD; eg: 2019-08-24.
          This date must be the local date in the timezone where the service occurred.
          Box 24a on the CMS-1500 claim form.
          If service occurred over a range of dates, this should be the start date.
      end_date_of_service:
        type: optional<commons.Date>
        docs: |
          Date formatted as YYYY-MM-DD; eg: 2019-08-25.
          This date must be the local date in the timezone where the service occurred.
          If omitted, the Encounter is assumed to be for a single day.
          Must not be temporally before the date_of_service field.
      prior_authorization_number:
        type: optional<PriorAuthorizationNumber>
        docs: Box 23 on the CMS-1500 claim form.
      patient_authorized_release:
        type: boolean
        docs: |
          Whether this patient has authorized the release of medical information
          for billing purpose.
          Box 12 on the CMS-1500 claim form.
      benefits_assigned_to_provider:
        type: boolean
        docs: |
          Whether this patient has authorized insurance payments to be made to you,
          not them. If false, patient may receive reimbursement.
          Box 13 on the CMS-1500 claim form.
      provider_accepts_assignment:
        type: boolean
        docs: |
          Whether you have accepted the patient's authorization for insurance payments
          to be made to you, not them.
          Box 27 on the CMS-1500 claim form.
      appointment_type:
        type: optional<string>
        docs: |
          Human-readable description of the appointment type (ex: "Acupuncture - Headaches")
      existing_medications:
        type: optional<list<Medication>>
      vitals:
        type: optional<Vitals>
      interventions:
        type: optional<list<Intervention>>
      pay_to_address:
        type: optional<commons.StreetAddressLongZip>
      synchronicity:
        type: optional<SynchronicityType>
        docs: |
          Whether or not this was a synchronous or asynchronous encounter.
          Asynchronous encounters occur when providers and patients communicate online using
          forms, instant messaging, or other pre-recorded digital mediums.
          Synchronous encounters occur in live, real-time settings where the patient interacts
          directly with the provider, such as over video or a phone call.
      billable_status:
        type: BillableStatusType
        docs: |
          Defines if the Encounter is to be billed by Candid to the responsible_party.
          Examples for when this should be set to NOT_BILLABLE include
          if the Encounter has not occurred yet or if there is no intention of ever billing the responsible_party.
      responsible_party:
        type: ResponsiblePartyType
        docs: |
          Defines the party to be billed with the initial balance owed on the claim.

  Encounter:
    extends: EncounterBase
    properties:
      encounter_id: commons.EncounterId
      claims: list<claims.Claim>
      patient: individual.Patient
      guarantor: optional<guarantor.Guarantor>
      billing_provider: encounter-provider.EncounterProvider
      rendering_provider: encounter-provider.EncounterProvider
      referring_provider: optional<encounter-provider.EncounterProvider>
      service_facility: service-facility.EncounterServiceFacility
      subscriber_primary: optional<individual.Subscriber>
      subscriber_secondary: optional<individual.Subscriber>
      url:
        type: commons.LinkUrl
        docs: URL that links directly to the claim created in Candid
      diagnoses: list<diagnoses.Diagnosis>
      clinical_notes: list<ClinicalNoteCategory>
      billing_notes:
        type: optional<list<billing-notes.BillingNote>>
        docs: |
          Spot to store misc, human-readable, notes about this encounter to be
          used in the billing process.
      place_of_service_code: optional<commons.FacilityTypeCode>
      place_of_service_code_as_submitted: optional<commons.FacilityTypeCode>
      patient_histories: list<PatientHistoryCategory>
      patient_payments: list<patient-payments.PatientPayment>
      tags: list<tags.Tag>
      coding_attribution: optional<CodingAttributionType>
      work_queue_id: optional<commons.WorkQueueId>
      work_queue_membership_activated_at: optional<datetime>
      owner_of_next_action:
        type: EncounterOwnerOfNextActionType
        docs: The party who is responsible for taking the next action on an Encounter, as defined by ownership of open Tasks.

  EncounterSortOptions:
    enum:
      - name: CREATED_AT_ASC
        value: created_at:asc
      - name: CREATED_AT_DESC
        value: created_at:desc
      - name: DATE_OF_SERVICE_ASC
        value: date_of_service:asc
      - name: DATE_OF_SERVICE_DESC
        value: date_of_service:desc

  Medication:
    properties:
      name: string
      rx_cui: optional<RxCui>
      dosage: optional<string>
      dosage_form: optional<string>
      frequency: optional<string>
      as_needed: optional<boolean>

  Vitals:
    properties:
      height_in: integer
      weight_lbs: integer
      blood_pressure_systolic_mmhg: integer
      blood_pressure_diastolic_mmhg: integer
      body_temperature_f: optional<double>

  Intervention:
    properties:
      name: string
      category: InterventionCategory
      description:
        type: optional<string>
        docs: |
          "Examples: 'Birth Control LAC', 'Tracking', 'Stress Management', 'Supplement', 'Labs'"
      medication:
        type: optional<Medication>
        docs: Required when `type` is `allopathic`
      labs:
        type: optional<list<Lab>>
        docs: Required when `type` is `tests`

  InterventionCategory:
    enum:
      - allopathic
      - naturopathic
      - tests
      - lifestyle

  Lab:
    properties:
      name: string
      code: optional<string>
      code_type: optional<LabCodeType>

  LabCodeType:
    enum:
      - quest
      - labcorp

  PatientHistoryCategory:
    properties:
      category: PatientHistoryCategoryEnum
      questions:
        type: list<IntakeQuestion>
        docs: Must contain at least one item.

  PatientHistoryCategoryEnum:
    enum:
      - present_illness
      - medical
      - family
      - social

  IntakeQuestion:
    properties:
      id: IntakeQuestionId
      text: string
      responses: optional<list<IntakeResponseAndFollowUps>>

  IntakeResponseAndFollowUps:
    properties:
      response: optional<string>
      follow_ups: optional<list<IntakeFollowUp>>

  IntakeFollowUp:
    properties:
      id: IntakeFollowUpId
      text: string
      response: optional<string>

  ClinicalNoteCategoryCreate:
    properties:
      category: NoteCategory
      notes: list<ClinicalNote>

  ClinicalNoteCategory:
    properties:
      category: NoteCategory
      notes: list<string>
      notes_structured: optional<list<ClinicalNote>>

  NoteCategory:
    enum:
      - clinical
      - care_plan
      - diagnoses
      - vitals
      - physical_exam
      - review_of_systems
      - medical_decisions
      - history_of_present_illness
      - patient_info
      - chief_complaint
      - health_record
      - consent
      - procedure
      - time_in_appointment

  ClinicalNote:
    properties:
      text: string
      author_name: string
      author_npi: optional<commons.Npi>
      timestamp: datetime

  ResponsiblePartyType:
    enum:
      - INSURANCE_PAY
      - SELF_PAY
      - UNKNOWN

  BillableStatusType:
    enum:
      - BILLABLE
      - NOT_BILLABLE

  EncounterOwnerOfNextActionType:
    enum:
      - CANDID
      - CUSTOMER
      - CODER
      - NONE

  SynchronicityType:
    enum:
      - name: SYNCHRONOUS
        value: Synchronous
      - name: ASYNCHRONOUS
        value: Asynchronous

  CodingAttributionType:
    enum:
      - CANDID
      - CUSTOMER
      - TCN
      - PJF

  AttachmentId: uuid

  BaseAttachment:
    properties:
      attachment_id: AttachmentId
      file_name: string
      description: string
      content_type: string
      authed_url: commons.LinkUrl

  EncounterAttachment:
    extends: BaseAttachment
    properties:
      attachment_type: EncounterAttachmentType

  EncounterAttachmentType:
    enum:
      - DOCUMENTATION

  GenerateClinicalNotesPdfResponse:
    discriminant: result
    union:
      success: SuccessfulGenerateClinicalNotesPdfResponse

  SuccessfulGenerateClinicalNotesPdfResponse:
    properties:
      download_link: commons.ContentDownloadUrl
      ttl_seconds: double

  NetworkStatusComputationResults:
    properties:
      contracting_status_result: AttributableContractingStatusResult
      credentialing_status_result: credentialing.EncounterCredentialingStatusResult
      network_status: NetworkStatus

  AttributableContractingStatusResult:
    discriminant: contracting_status
    union:
      out_of_network: OutOfNetworkContractingStatusResult
      in_network: InNetworkContractingStatusResult
      unknown: {}

  OutOfNetworkContractingStatusResult:
    properties:
      out_of_network_reason: ContractingOutOfOfNetworkReason

  ContractingOutOfOfNetworkReason:
    enum:
      - no_effective_contract
      - missing_contract_linkage

  InNetworkContractingStatusResult:
    properties:
      applicable_contracts: list<contracts.Contract>

  NetworkStatus:
    enum:
      - in_network
      - out_of_network
      - unknown
      - not_adjudicated

  MarkAsNotBillableResponse:
    properties:
      closed_task_ids: set<commons.TaskId>

  EncounterPage:
    extends: commons.ResourcePage
    properties:
      items: list<Encounter>

  PriorAuthorizationNumber: string
  RxCui: string
  IntakeQuestionId: string
  IntakeFollowUpId: string

  EncounterExternalIdUniquenessErrorType:
    properties:
      external_id: optional<commons.EncounterExternalId>

  EncounterGuarantorMissingContactInfoErrorType:
    properties:
      missing_fields: list<string>

  CashPayPayerErrorMessage:
    properties:
      message: string

errors:
  EncounterExternalIdUniquenessError:
    status-code: 422
    type: EncounterExternalIdUniquenessErrorType
  EncounterGuarantorMissingContactInfoError:
    status-code: 422
    type: EncounterGuarantorMissingContactInfoErrorType
  CashPayPayerError:
    status-code: 422
    type: CashPayPayerErrorMessage
