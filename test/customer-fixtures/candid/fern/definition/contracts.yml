# yaml-language-server: $schema=https://raw.githubusercontent.com/fern-api/fern/main/fern.schema.json

imports:
  commons: commons.yml
  payers: payers.yml
  organization-provider: organization-providers/v2/__package__.yml

service:
  auth: true
  base-path: /api/contracts/v2
  endpoints:
    get:
      method: GET
      path: /{contract_id}
      path-parameters:
        contract_id: ContractId
      response: Contract

    getAll:
      method: GET
      path: ""
      response: list<Contract>
      request:
        name: GetAllContractsRequest
        query-parameters:
          skip:
            type: optional<integer>
            docs: Number of contracts to offset in the returned result. Defaults to 0.
          limit:
            type: optional<integer>
            docs: Max number of contracts returned. Defaults to 100. Max is 1000.
          contracting_provider_id: optional<ContractingProviderId>
          rendering_provider_ids:
            type: optional<RenderingProviderid>
            allow-multiple: true
          payer_names:
            type: optional<string>
            allow-multiple: true
            docs: Filter to contracts that include any of the included payer names.
          states:
            type: optional<commons.State>
            allow-multiple: true
          contract_status:
            type: optional<ContractStatus>
            docs: The status of the contract. Defaults to `pending`

    create:
      docs: Creates a new contract within the user's current organization
      method: POST
      path: ""
      request:
        name: ContractCreate
        body:
          extends: ContractBase
          properties:
            contracting_provider_id:
              type: ContractingProviderId
              docs: The UUID of the provider under agreement to the contract
            rendering_provider_ids:
              type: set<RenderingProviderid>
              docs: |
                A rendering provider isn't contracted directly with the payer but can render
                services under the contract held by the contracting provider.
                Max items is 100.
            payer_uuid:
              type: uuid
              docs: The UUID of the insurance company under agreement to the contract
      response: Contract

    delete:
      method: DELETE
      path: /{contract_id}
      path-parameters:
        contract_id: ContractId

    update:
      method: PATCH
      path: /{contract_id}
      path-parameters:
        contract_id: ContractId
      request:
        name: ContractUpdate
        body:
          properties:
            rendering_provider_ids:
              type: optional<set<RenderingProviderid>>
              docs: |
                A rendering provider isn't contracted directly with the payer but can render
                services under the contract held by the contracting provider.
                Max items is 100.
            effective_date:
              type: optional<commons.Date>
              docs: The starting day upon which the contract is effective
            expiration_date:
              type: optional<commons.Date>
              docs: An optional end day upon which the contract expires
            regions:
              type: optional<commons.Regions>
              docs: |
                If present, the contract's rendering providers will be patched to this exact
                value, overriding what was set before.
            contract_status: optional<ContractStatus>
            authorized_signatory: optional<AuthorizedSignatory>
      response: Contract

types:
  ContractId: uuid
  ContractingProviderId: uuid
  RenderingProviderid: uuid

  ContractBase:
    properties:
      effective_date:
        type: commons.Date
        docs: The starting day upon which the contract is effective
      expiration_date:
        type: optional<commons.Date>
        docs: An optional end day upon which the contract expires
      regions:
        type: commons.Regions
        docs: |
          The state(s) to which the contract's coverage extends.
          It may also be set to "national" for the entirety of the US.
      contract_status: optional<ContractStatus>
      authorized_signatory: optional<AuthorizedSignatory>

  Contract:
    extends: ContractBase
    properties:
      contract_id: ContractId
      contracting_provider:
        type: organization-provider.OrganizationProvider
        docs: The provider under contract
      rendering_providers:
        type: map<uuid, organization-provider.OrganizationProvider>
        docs: The providers who can render medical services under the contract
      payer:
        type: optional<payers.Payer>
        docs: The insurance company under contract

  ContractStatus:
    enum:
      - value: pending
        docs: |
          Contract is still in the works and has not been signed and counter-signed yet
      - value: effective
        docs: |
          Contract is active and in effect (claims will need to
          be submitted under effective contracts)
      - value: cancelled
        docs: |
          Contract is no longer effective but kept around for historical documentation

  AuthorizedSignatory:
    properties:
      first_name: optional<string>
      last_name: optional<string>
      title: optional<string>
      email: optional<string>
      phone: optional<string>
      fax: optional<string>
