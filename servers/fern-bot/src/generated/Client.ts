/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as core from "./core";
import * as FernProxy from "./api/index";
import urlJoin from "url-join";
import * as errors from "./errors/index";
import * as stream from "stream";

export declare namespace FernProxyClient {
    interface Options {
        environment: core.Supplier<string>;
    }

    interface RequestOptions {
        timeoutInSeconds?: number;
        maxRetries?: number;
        abortSignal?: AbortSignal;
    }
}

export class FernProxyClient {
    constructor(protected readonly _options: FernProxyClient.Options) {}

    /**
     * @param {FernProxy.ProxyRequest} request
     * @param {FernProxyClient.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await fernProxy.rest({
     *         url: "string",
     *         method: "string",
     *         headers: {
     *             "string": "string"
     *         },
     *         body: {
     *             type: "json",
     *             value: {
     *                 "key": "value"
     *             }
     *         },
     *         stream: true,
     *         streamTerminator: "string"
     *     })
     */
    public async rest(
        request: FernProxy.ProxyRequest,
        requestOptions?: FernProxyClient.RequestOptions
    ): Promise<FernProxy.ProxyResponse> {
        const _response = await core.fetcher({
            url: urlJoin(await core.Supplier.get(this._options.environment), "/api/fern-docs/proxy/rest"),
            method: "POST",
            headers: {
                "X-Fern-Language": "JavaScript",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
            },
            contentType: "application/json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return _response.body as FernProxy.ProxyResponse;
        }

        if (_response.error.reason === "status-code") {
            throw new errors.FernProxyError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.FernProxyError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.FernProxyTimeoutError();
            case "unknown":
                throw new errors.FernProxyError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * @param {FernProxy.GrpcProxyRequest} request
     * @param {FernProxyClient.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await fernProxy.grpc({
     *         baseUrl: "string",
     *         endpoint: "string",
     *         headers: {
     *             "string": "string"
     *         },
     *         schema: {
     *             type: "remote"
     *         },
     *         body: {
     *             "key": "value"
     *         }
     *     })
     */
    public async grpc(
        request: FernProxy.GrpcProxyRequest,
        requestOptions?: FernProxyClient.RequestOptions
    ): Promise<FernProxy.GrpcProxyResponse> {
        const _response = await core.fetcher({
            url: urlJoin(await core.Supplier.get(this._options.environment), "/api/fern-docs/proxy/grpc"),
            method: "POST",
            headers: {
                "X-Fern-Language": "JavaScript",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
            },
            contentType: "application/json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return _response.body as FernProxy.GrpcProxyResponse;
        }

        if (_response.error.reason === "status-code") {
            throw new errors.FernProxyError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.FernProxyError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.FernProxyTimeoutError();
            case "unknown":
                throw new errors.FernProxyError({
                    message: _response.error.errorMessage,
                });
        }
    }

    public async file(
        request: FernProxy.ProxyRequest,
        requestOptions?: FernProxyClient.RequestOptions
    ): Promise<stream.Readable> {
        const _response = await core.fetcher<stream.Readable>({
            url: urlJoin(await core.Supplier.get(this._options.environment), "/api/fern-docs/proxy/file"),
            method: "POST",
            headers: {
                "X-Fern-Language": "JavaScript",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
            },
            contentType: "application/json",
            body: request,
            responseType: "streaming",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return _response.body;
        }

        if (_response.error.reason === "status-code") {
            throw new errors.FernProxyError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.FernProxyError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.FernProxyTimeoutError();
            case "unknown":
                throw new errors.FernProxyError({
                    message: _response.error.errorMessage,
                });
        }
    }

    public async stream(
        request: FernProxy.ProxyRequest,
        requestOptions?: FernProxyClient.RequestOptions
    ): Promise<core.Stream<unknown>> {
        const _response = await core.fetcher<stream.Readable>({
            url: urlJoin(await core.Supplier.get(this._options.environment), "/api/fern-docs/proxy/stream"),
            method: "POST",
            headers: {
                "X-Fern-Language": "JavaScript",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
            },
            contentType: "application/json",
            body: request,
            responseType: "streaming",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return new core.Stream({
                stream: _response.body,
                parse: async (data) => {
                    return data;
                },
                signal: requestOptions?.abortSignal,
                eventShape: {
                    type: "json",
                    messageTerminator: "\n",
                },
            });
        }

        if (_response.error.reason === "status-code") {
            throw new errors.FernProxyError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.FernProxyError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.FernProxyTimeoutError();
            case "unknown":
                throw new errors.FernProxyError({
                    message: _response.error.errorMessage,
                });
        }
    }
}
