service: "fern-bot"
frameworkVersion: "3"
plugins:
  - "serverless-esbuild"
  - "serverless-step-functions"
provider:
  name: aws
  runtime: nodejs18.x
  deploymentMethod: direct
  region: "us-east-1"
  # 900 second timeout, e.g. 15 minutes
  timeout: 900
  # 10GB memory
  memorySize: 10240
  environment:
    AWS_NODEJS_CONNECTION_REUSE_ENABLED: "1"
    NODE_OPTIONS: "--enable-source-maps --stack-trace-limit=1000"
    GITHUB_APP_LOGIN_NAME: ${env:GITHUB_APP_LOGIN_NAME, 'fern-api[bot]'}
    GITHUB_APP_LOGIN_ID: ${env:GITHUB_APP_LOGIN_ID, 'placeholder'}
    GITHUB_APP_ID: ${env:GITHUB_APP_ID, 'placeholder'}
    GITHUB_APP_PRIVATE_KEY: ${env:GITHUB_APP_PRIVATE_KEY, 'placeholder'}
    GITHUB_APP_CLIENT_ID: ${env:GITHUB_APP_CLIENT_ID, 'placeholder'}
    GITHUB_APP_CLIENT_SECRET: ${env:GITHUB_APP_CLIENT_SECRET, 'placeholder'}
    GITHUB_APP_WEBHOOK_SECRET: ${env:GITHUB_APP_WEBHOOK_SECRET, 'placeholder'}
    # This is the Lambda URL, locally you can use the URL from smee: https://smee.io/3DXoSvCO2NH87w8e
    GITHUB_APP_WEBHOOK_PROXY_URL: ${env:GITHUB_APP_WEBHOOK_PROXY_URL, 'placeholder'}
    CO_API_KEY: ${env:CO_API_KEY, 'placeholder'}
    DEFAULT_VENUS_ORIGIN: ${env:DEFAULT_VENUS_ORIGIN, 'placeholder'}
    DEFAULT_FDR_ORIGIN: ${env:DEFAULT_FDR_ORIGIN, 'placeholder'}
    FERNIE_SLACK_APP_TOKEN: ${env:FERNIE_SLACK_APP_TOKEN, 'placeholder'}
    CUSTOMER_ALERTS_SLACK_CHANNEL: ${env:CUSTOMER_ALERTS_SLACK_CHANNEL, 'placeholder'}
    CUSTOMER_PULLS_SLACK_CHANNEL: ${env:CUSTOMER_PULLS_SLACK_CHANNEL, 'placeholder'}
    REPO_TO_RUN_ON: ${env:REPO_TO_RUN_ON, 'OMIT'}
    FERN_TOKEN: ${env:FERN_TOKEN, 'OMIT'}
    # For Probot explicitly (it picks these up by default)
    APP_ID: ${env:GITHUB_APP_ID, 'placeholder'}
    WEBHOOK_SECRET: ${env:GITHUB_APP_WEBHOOK_SECRET, 'placeholder'}
    WEBHOOK_PROXY_URL: ${env:GITHUB_APP_WEBHOOK_PROXY_URL, 'placeholder'}

  # Roles for the lambda functions
  iam:
    role:
      statements:
        - Effect: "Allow"
          Action:
            - s3:ListBucket
          Resource: arn:aws:s3:::fern-bot-${opt:stage}
        - Effect: "Allow"
          Action:
            - s3:GetObject
            - s3:PutObject
            - s3:DeleteObject
          Resource: arn:aws:s3:::fern-bot-${opt:stage}/*

  # Images that will be built locally and uploaded to ECR
  ecr:
    images:
      generator_languages_image:
        platform: linux/amd64
        path: ./

functions:
  # ========== Updater Step Function ============
  # The functions needed for the step function
  #
  # Gets metadata on repo installations for the github app
  updateRepoDataset:
    # 900 second timeout, e.g. 15 minutes
    timeout: 900
    # 10GB memory
    memorySize: 10240
    # 10GB storage
    ephemeralStorageSize: 10240
    handler: "src/functions/update-repo-data/updateRepoData.handler"
    # Adding a layer to have git available in the lambda
    # https://github.com/lambci/git-lambda-layer
    layers:
      - arn:aws:lambda:us-east-1:553035198032:layer:git-lambda2:8
    environment:
      REPO_DATA_S3_BUCKET: "fern-bot-${opt:stage}"
      REPO_DATA_S3_KEY: "lambdas/repos.csv"

  # Processes one repo at a time, from the updateRepoDataset metadata
  updateOpenApiSpec:
    timeout: 900
    memorySize: 5120
    ephemeralStorageSize: 10240
    handler: "src/functions/oas-cron/updateOpenApiSpec.handler"
    layers:
      - arn:aws:lambda:us-east-1:553035198032:layer:git-lambda2:8

  updateGeneratorVersion:
    timeout: 900
    memorySize: 5120
    ephemeralStorageSize: 10240
    handler: "src/functions/generator-updates/updateGeneratorVersion.handler"
    layers:
      - arn:aws:lambda:us-east-1:553035198032:layer:git-lambda2:8

  updateFDRRepoData:
    timeout: 900
    memorySize: 5120
    ephemeralStorageSize: 10240
    handler: "src/functions/update-fdr-repo-data/updateFDRRepoData.handler"
    layers:
      - arn:aws:lambda:us-east-1:553035198032:layer:git-lambda2:8

  # =============================================

  # For on-demand invoking update, especially useful for triggering one-off updates
  updateOpenApiSpecs:
    timeout: 900
    memorySize: 10240
    ephemeralStorageSize: 10240
    handler: "src/functions/oas-cron/updateOpenApiSpecs.handler"
    layers:
      - arn:aws:lambda:us-east-1:553035198032:layer:git-lambda2:8

  updateGeneratorVersions:
    timeout: 900
    memorySize: 10240
    ephemeralStorageSize: 10240
    handler: "src/functions/generator-updates/updateGeneratorVersions.handler"
    layers:
      - arn:aws:lambda:us-east-1:553035198032:layer:git-lambda2:8

  # =============================================

  # Non-step function event-driven functions
  sendStaleNotifications:
    timeout: 900
    memorySize: 5120
    ephemeralStorageSize: 10240
    handler: "src/functions/stale-notifs/sendStaleNotifications.handler"
    layers:
      - arn:aws:lambda:us-east-1:553035198032:layer:git-lambda2:8
    events:
      - schedule:
          # Every Monday at 6a EST (10a UTC), note we run the below updates daily at midnight
          rate: cron(0 10 * * ? 1)
          enabled: true

  # =============================================

  # gRPC proxy endpooint, exposed as an endpoint (not scheduled).
  proxyGrpc:
    timeout: 30
    memorySize: 5120
    ephemeralStorageSize: 10240
    handler: "src/functions/grpc-proxy/proxyGrpc.handler"
    events:
      - httpApi: "POST /grpc"

  # =============================================

  # A webhook listener for GitHub events, also an endpoint (not scheduled).
  githubWebhookListener:
    timeout: 30
    memorySize: 5120
    ephemeralStorageSize: 10240
    url: true
    image:
      name: generator_languages_image
      command:
        - "githubWebhookListener.handler"
      entryPoint:
        - "/lambda-entrypoint.sh"
    events:
      - httpApi:
          path: /api/github/webhooks
          method: post

stepFunctions:
  stateMachines:
    updateSpecs:
      name: updateSpecs-${opt:stage}
      events:
        - schedule:
            rate: cron(0 0 * * ? *)
            enabled: true
      definition:
        StartAt: UpdateRepoDataInS3
        States:
          UpdateRepoDataInS3:
            Type: Task
            Resource:
              Fn::Sub: "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:fern-bot-${opt:stage}-updateRepoDataset"
            Next: Parallelize
          Parallelize:
            Type: Parallel
            Branches:
              - StartAt: UpdateSpecsBranch
                States:
                  UpdateSpecsBranch:
                    Type: Map
                    MaxConcurrency: 50
                    End: true
                    ItemReader:
                      ReaderConfig:
                        InputType: CSV
                        CSVHeaderLocation: FIRST_ROW
                      Resource: "arn:aws:states:::s3:getObject"
                      Parameters:
                        Bucket: "fern-bot-${opt:stage}"
                        Key: "lambdas/repos.csv"
                    ItemProcessor:
                      ProcessorConfig:
                        Mode: DISTRIBUTED
                        ExecutionType: STANDARD
                      StartAt: HandleRepoForSpec
                      States:
                        HandleRepoForSpec:
                          Type: Task
                          Resource: "arn:aws:states:::lambda:invoke"
                          Parameters:
                            "Payload.$": "$"
                            FunctionName:
                              Fn::GetAtt: [updateOpenApiSpec, Arn]
                          End: true
                          # Try to discard whatever result AWS has for us
                          # since we'll hit a size limit otherwise, and
                          # the output is useless to us.
                          ResultPath: null
                          OutputPath: null
              - StartAt: UpdateGeneratorsBranch
                States:
                  UpdateGeneratorsBranch:
                    Type: Map
                    End: true
                    MaxConcurrency: 50
                    ItemReader:
                      ReaderConfig:
                        InputType: CSV
                        CSVHeaderLocation: FIRST_ROW
                      Resource: "arn:aws:states:::s3:getObject"
                      Parameters:
                        Bucket: "fern-bot-${opt:stage}"
                        Key: "lambdas/repos.csv"
                    ItemProcessor:
                      ProcessorConfig:
                        Mode: DISTRIBUTED
                        ExecutionType: STANDARD
                      StartAt: HandleRepoForGenerator
                      States:
                        HandleRepoForGenerator:
                          Type: Task
                          Resource: "arn:aws:states:::lambda:invoke"
                          Parameters:
                            "Payload.$": "$"
                            FunctionName:
                              Fn::GetAtt: [updateGeneratorVersion, Arn]
                          End: true
                          # Try to discard whatever result AWS has for us
                          # since we'll hit a size limit otherwise, and
                          # the output is useless to us.
                          ResultPath: null
                          OutputPath: null
              - StartAt: UpdateFDRRepoDataBranch
                States:
                  UpdateFDRRepoDataBranch:
                    Type: Map
                    End: true
                    MaxConcurrency: 50
                    ItemReader:
                      ReaderConfig:
                        InputType: CSV
                        CSVHeaderLocation: FIRST_ROW
                      Resource: "arn:aws:states:::s3:getObject"
                      Parameters:
                        Bucket: "fern-bot-${opt:stage}"
                        Key: "lambdas/repos.csv"
                    ItemProcessor:
                      ProcessorConfig:
                        Mode: DISTRIBUTED
                        ExecutionType: STANDARD
                      StartAt: HandleFDRRepoForGenerator
                      States:
                        HandleFDRRepoForGenerator:
                          Type: Task
                          Resource: "arn:aws:states:::lambda:invoke"
                          Parameters:
                            "Payload.$": "$"
                            FunctionName:
                              Fn::GetAtt: [updateFDRRepoData, Arn]
                          End: true
                          # Try to discard whatever result AWS has for us
                          # since we'll hit a size limit otherwise, and
                          # the output is useless to us.
                          ResultPath: null
                          OutputPath: null
            End: true
            # Same as above, try to discard the result
            ResultPath: null
            OutputPath: null

resources:
  Resources:
    BotBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: fern-bot-${opt:stage}

custom:
  esbuild:
    minify: true
    bundle: true
    sourcemap: true
    target: "node18"
    platform: "node"
    concurrency: 10
    packager: pnpm
    external:
      - fern-api
      - fern
