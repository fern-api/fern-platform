/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as FernRegistry from "../../../index";
import express from "express";
export interface GeneratorsServiceMethods {
    upsertGenerator(req: express.Request<never, never, FernRegistry.generators.Generator, never>, res: {
        send: () => Promise<void>;
        cookie: (cookie: string, value: string, options?: express.CookieOptions) => void;
        locals: any;
    }, next: express.NextFunction): void | Promise<void>;
    getGeneratorByImage(req: express.Request<never, FernRegistry.generators.Generator | undefined, FernRegistry.generators.GetGeneratorByImageRequest, never>, res: {
        send: (responseBody: FernRegistry.generators.Generator | undefined) => Promise<void>;
        cookie: (cookie: string, value: string, options?: express.CookieOptions) => void;
        locals: any;
    }, next: express.NextFunction): void | Promise<void>;
    getGenerator(req: express.Request<{
        generatorId: FernRegistry.generators.GeneratorId;
    }, FernRegistry.generators.Generator | undefined, never, never>, res: {
        send: (responseBody: FernRegistry.generators.Generator | undefined) => Promise<void>;
        cookie: (cookie: string, value: string, options?: express.CookieOptions) => void;
        locals: any;
    }, next: express.NextFunction): void | Promise<void>;
    listGenerators(req: express.Request<never, FernRegistry.generators.Generator[], never, never>, res: {
        send: (responseBody: FernRegistry.generators.Generator[]) => Promise<void>;
        cookie: (cookie: string, value: string, options?: express.CookieOptions) => void;
        locals: any;
    }, next: express.NextFunction): void | Promise<void>;
}
/**
 * CRUD API for managing the generator entity itself.
 */
export declare class GeneratorsService {
    private readonly methods;
    private router;
    constructor(methods: GeneratorsServiceMethods, middleware?: express.RequestHandler[]);
    addMiddleware(handler: express.RequestHandler): this;
    toRouter(): express.Router;
}
