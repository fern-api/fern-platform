/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as FernRegistry from "../../../../../index";
import express from "express";
export interface CliServiceMethods {
    getLatestCliRelease(req: express.Request<never, FernRegistry.generators.CliRelease, FernRegistry.generators.GetLatestCliReleaseRequest, never>, res: {
        send: (responseBody: FernRegistry.generators.CliRelease) => Promise<void>;
        cookie: (cookie: string, value: string, options?: express.CookieOptions) => void;
        locals: any;
    }, next: express.NextFunction): void | Promise<void>;
    getChangelog(req: express.Request<never, FernRegistry.generators.GetChangelogResponse, FernRegistry.generators.GetChangelogRequest, never>, res: {
        send: (responseBody: FernRegistry.generators.GetChangelogResponse) => Promise<void>;
        cookie: (cookie: string, value: string, options?: express.CookieOptions) => void;
        locals: any;
    }, next: express.NextFunction): void | Promise<void>;
    getMinCliForIr(req: express.Request<{
        irVersion: number;
    }, FernRegistry.generators.CliRelease, never, never>, res: {
        send: (responseBody: FernRegistry.generators.CliRelease) => Promise<void>;
        cookie: (cookie: string, value: string, options?: express.CookieOptions) => void;
        locals: any;
    }, next: express.NextFunction): void | Promise<void>;
    upsertCliRelease(req: express.Request<never, never, FernRegistry.generators.CliReleaseRequest, never>, res: {
        send: () => Promise<void>;
        cookie: (cookie: string, value: string, options?: express.CookieOptions) => void;
        locals: any;
    }, next: express.NextFunction): void | Promise<void>;
    getCliRelease(req: express.Request<{
        cliVersion: string;
    }, FernRegistry.generators.CliRelease, never, never>, res: {
        send: (responseBody: FernRegistry.generators.CliRelease) => Promise<void>;
        cookie: (cookie: string, value: string, options?: express.CookieOptions) => void;
        locals: any;
    }, next: express.NextFunction): void | Promise<void>;
    listCliReleases(req: express.Request<never, FernRegistry.generators.ListCliReleasesResponse, never, {
        page?: number;
        pageSize?: number;
    }>, res: {
        send: (responseBody: FernRegistry.generators.ListCliReleasesResponse) => Promise<void>;
        cookie: (cookie: string, value: string, options?: express.CookieOptions) => void;
        locals: any;
    }, next: express.NextFunction): void | Promise<void>;
}
/**
 * CRUD API for managing CLI versions, as well as the corresponding IR metadata.
 */
export declare class CliService {
    private readonly methods;
    private router;
    constructor(methods: CliServiceMethods, middleware?: express.RequestHandler[]);
    addMiddleware(handler: express.RequestHandler): this;
    toRouter(): express.Router;
}
