/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as FernRegistry from "../../../../../index";
import express from "express";
export interface V3ServiceMethods {
    getOrganization(req: express.Request<{
        domain: string;
    }, FernRegistry.OrgId, never, never>, res: {
        send: (responseBody: FernRegistry.OrgId) => Promise<void>;
        cookie: (cookie: string, value: string, options?: express.CookieOptions) => void;
        locals: any;
    }, next: express.NextFunction): void | Promise<void>;
    getNavigation(req: express.Request<{
        domain: string;
        id: FernRegistry.docs.v3.DocsInstanceId;
    }, FernRegistry.navigation.latest.RootNode, never, never>, res: {
        send: (responseBody: FernRegistry.navigation.latest.RootNode) => Promise<void>;
        cookie: (cookie: string, value: string, options?: express.CookieOptions) => void;
        locals: any;
    }, next: express.NextFunction): void | Promise<void>;
    getConfig(req: express.Request<{
        domain: string;
        id: FernRegistry.docs.v3.DocsInstanceId;
    }, FernRegistry.docs.v3.DocsConfig, never, never>, res: {
        send: (responseBody: FernRegistry.docs.v3.DocsConfig) => Promise<void>;
        cookie: (cookie: string, value: string, options?: express.CookieOptions) => void;
        locals: any;
    }, next: express.NextFunction): void | Promise<void>;
    getFilesMetadata(req: express.Request<{
        domain: string;
        id: FernRegistry.docs.v3.DocsInstanceId;
    }, Record<FernRegistry.docs.v3.FilePath, FernRegistry.docs.v3.FileMetadata>, FernRegistry.docs.v3.GetFilesMetadataRequest, never>, res: {
        send: (responseBody: Record<FernRegistry.docs.v3.FilePath, FernRegistry.docs.v3.FileMetadata>) => Promise<void>;
        cookie: (cookie: string, value: string, options?: express.CookieOptions) => void;
        locals: any;
    }, next: express.NextFunction): void | Promise<void>;
    startDocsPreview(req: express.Request<{
        organization: FernRegistry.OrgId;
    }, FernRegistry.docs.v3.StartDocsRegisterResponse, FernRegistry.docs.v3.StartDocsPreviewRequest, never>, res: {
        send: (responseBody: FernRegistry.docs.v3.StartDocsRegisterResponse) => Promise<void>;
        cookie: (cookie: string, value: string, options?: express.CookieOptions) => void;
        locals: any;
    }, next: express.NextFunction): void | Promise<void>;
    startDocsRegister(req: express.Request<{
        organization: FernRegistry.OrgId;
        domain: string;
    }, FernRegistry.docs.v3.StartDocsRegisterResponse, FernRegistry.docs.v3.StartDocsRegisterRequest, never>, res: {
        send: (responseBody: FernRegistry.docs.v3.StartDocsRegisterResponse) => Promise<void>;
        cookie: (cookie: string, value: string, options?: express.CookieOptions) => void;
        locals: any;
    }, next: express.NextFunction): void | Promise<void>;
    finishDocsRegister(req: express.Request<{
        organization: FernRegistry.OrgId;
        docsRegistrationId: FernRegistry.docs.v1.write.DocsRegistrationId;
    }, FernRegistry.docs.v3.FinishDocsRegisterResponse, FernRegistry.docs.v3.PutDocsMetadata, never>, res: {
        send: (responseBody: FernRegistry.docs.v3.FinishDocsRegisterResponse) => Promise<void>;
        cookie: (cookie: string, value: string, options?: express.CookieOptions) => void;
        locals: any;
    }, next: express.NextFunction): void | Promise<void>;
    startDocsRevalidation(req: express.Request<{
        domain: string;
    }, never, never, never>, res: {
        send: () => Promise<void>;
        cookie: (cookie: string, value: string, options?: express.CookieOptions) => void;
        locals: any;
    }, next: express.NextFunction): void | Promise<void>;
    getDocsRevalidationStatus(req: express.Request<{
        domain: string;
    }, FernRegistry.docs.v3.DocsRegisterStatus, never, never>, res: {
        send: (responseBody: FernRegistry.docs.v3.DocsRegisterStatus) => Promise<void>;
        cookie: (cookie: string, value: string, options?: express.CookieOptions) => void;
        locals: any;
    }, next: express.NextFunction): void | Promise<void>;
}
export declare class V3Service {
    private readonly methods;
    private router;
    constructor(methods: V3ServiceMethods, middleware?: express.RequestHandler[]);
    addMiddleware(handler: express.RequestHandler): this;
    toRouter(): express.Router;
}
