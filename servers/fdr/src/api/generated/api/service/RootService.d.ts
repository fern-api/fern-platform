/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as FernRegistry from "..";
import express from "express";
export interface RootServiceMethods {
    get(req: express.Request<never, FernRegistry.Snippet[], FernRegistry.GetSnippetRequest, never>, res: {
        send: (responseBody: FernRegistry.Snippet[]) => Promise<void>;
        cookie: (cookie: string, value: string, options?: express.CookieOptions) => void;
        locals: any;
    }): void | Promise<void>;
    load(req: express.Request<never, FernRegistry.SnippetsPage, FernRegistry.ListSnippetsRequest, {
        page?: number;
    }>, res: {
        send: (responseBody: FernRegistry.SnippetsPage) => Promise<void>;
        cookie: (cookie: string, value: string, options?: express.CookieOptions) => void;
        locals: any;
    }): void | Promise<void>;
}
export declare class RootService {
    private readonly methods;
    private router;
    constructor(methods: RootServiceMethods, middleware?: express.RequestHandler[]);
    addMiddleware(handler: express.RequestHandler): this;
    toRouter(): express.Router;
}
