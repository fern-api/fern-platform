// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`generateAlgoliaSearchRecordsForDocs > {"name":"candid"} 1`] = `
[
  {
    "breadcrumbs": [
      {
        "slug": "introduction/our-products",
        "title": "Our Products",
      },
      {
        "slug": "introduction/our-products#encounters",
        "title": "Encounters",
      },
    ],
    "content": "Candid's primary entry point for submitting encounter information is the [Encounters](../api-reference/encounters) endpoint. Candid uses
the information sent to this endpoint to submit claims.",
    "indexSegmentId": "constant",
    "slug": "introduction/our-products#encounters",
    "title": "Encounters",
    "type": "markdown-section-v1",
  },
  {
    "breadcrumbs": [
      {
        "slug": "introduction/our-products",
        "title": "Our Products",
      },
      {
        "slug": "introduction/our-products#eligibility",
        "title": "Eligibility",
      },
    ],
    "content": "Candid's [Eligibility](../api-reference/eligibility) endpoint can be used to run real-time
eligibility checks on patients to confirm active medical coverage and to understand the patient's benefits (co-pays, deductibles, etc).",
    "indexSegmentId": "constant",
    "slug": "introduction/our-products#eligibility",
    "title": "Eligibility",
    "type": "markdown-section-v1",
  },
  {
    "breadcrumbs": [
      {
        "slug": "introduction/our-products",
        "title": "Our Products",
      },
      {
        "slug": "introduction/our-products#exports",
        "title": "Exports",
      },
    ],
    "content": "Candid's [Exports](../api-reference/exports) endpoints are used to programmatically download CSV
exports of changes to a claim's status and associated metadata (e.g., service line amounts, patient and subscriber info, provider info).",
    "indexSegmentId": "constant",
    "slug": "introduction/our-products#exports",
    "title": "Exports",
    "type": "markdown-section-v1",
  },
  {
    "breadcrumbs": [
      {
        "slug": "introduction/our-products",
        "title": "Our Products",
      },
      {
        "slug": "introduction/our-products#tasks",
        "title": "Tasks",
      },
    ],
    "content": "Candid's [Tasks](../api-reference/tasks) endpoint can be used to embed Candid's Tasks in another system, like your integrated
EMR partner.",
    "indexSegmentId": "constant",
    "slug": "introduction/our-products#tasks",
    "title": "Tasks",
    "type": "markdown-section-v1",
  },
  {
    "breadcrumbs": [
      {
        "slug": "introduction/our-products",
        "title": "Our Products",
      },
      {
        "slug": "introduction/our-products#example-workflow-using-candids-products",
        "title": "Example workflow using Candid's products",
      },
    ],
    "content": "1. When a patient signs up or schedules an appointment, [Eligibility](../api-reference/eligibility) is used to run a real-time eligibility check to confirm the patient's medical coverage.
2. A day before the patient's appointment, [Eligibility](../api-reference/eligibility) is used again to re-confirm the patient's coverage. It may have lapsed since they scheduled the appointment.
3. After visit has been completed, an [Encounter](../api-reference/encounters) is submitted to Candid. This either happens in real-time immediately when the visit is completed and/or signed, or in a batch job at the end of the day.
4. [Exports](../api-reference/exports) are downloaded and processed daily. Patient payments are sent to collect the balance owed on finalized adjudicated claims based on this data.
5. [Tasks](../api-reference/tasks) are synchronized with your system if you are not working them directly in the Candid app.",
    "indexSegmentId": "constant",
    "slug": "introduction/our-products#example-workflow-using-candids-products",
    "title": "Example workflow using Candid's products",
    "type": "markdown-section-v1",
  },
  {
    "breadcrumbs": [],
    "description": "",
    "indexSegmentId": "constant",
    "slug": "introduction/our-products",
    "title": "Our Products",
    "type": "page-v4",
  },
  {
    "content": "ENCOUNTERS

Candid's primary entry point for submitting encounter information is the Encounters [../api-reference/encounters] endpoint. Candid
uses the information sent to this endpoint to submit claims.


ELIGIBILITY

Candid's Eligibility [../api-reference/eligibility] endpoint can be used to run real-time eligibility checks on patients to
confirm active medical coverage and to understand the patient's benefits (co-pays, deductibles, etc).


EXPORTS

Candid's Exports [../api-reference/exports] endpoints are used to programmatically download CSV exports of changes to a claim's
status and associated metadata (e.g., service line amounts, patient and subscriber info, provider info).


TASKS

Candid's Tasks [../api-reference/tasks] endpoint can be used to embed Candid's Tasks in another system, like your integrated EMR
partner.


EXAMPLE WORKFLOW USING CANDID'S PRODUCTS

 1. When a patient signs up or schedules an appointment, Eligibility [../api-reference/eligibility] is used to run a real-time
    eligibility check to confirm the patient's medical coverage.
 2. A day before the patient's appointment, Eligibility [../api-reference/eligibility] is used again to re-confirm the patient's
    coverage. It may have lapsed since they scheduled the appointment.
 3. After visit has been completed, an Encounter [../api-reference/encounters] is submitted to Candid. This either happens in
    real-time immediately when the visit is completed and/or signed, or in a batch job at the end of the day.
 4. Exports [../api-reference/exports] are downloaded and processed daily. Patient payments are sent to collect the balance owed
    on finalized adjudicated claims based on this data.
 5. Tasks [../api-reference/tasks] are synchronized with your system if you are not working them directly in the Candid app.",
    "indexSegmentId": "constant",
    "path": {
      "parts": [
        {
          "name": "Introduction",
          "urlSlug": "introduction",
        },
        {
          "name": "Our Products",
          "urlSlug": "our-products",
        },
      ],
    },
    "title": "Our Products",
    "type": "page-v2",
  },
  {
    "breadcrumbs": [
      {
        "slug": "introduction/payer-information",
        "title": "Payer Information",
      },
    ],
    "content": "Candid Health supports most payers. You can find a list of supported payers with their respective \`payer_id\`, \`payer_name\`, and \`cpid\` below.

The \`payer_id\` and \`payer_name\` should be used in the corresponding subscriber\\'s insurance card information and when you use the [Encounters](../api-reference/encounters) endpoint.

The \`cpid\` should be used in the \`tradingPartnerServiceId\` field of the [Eligibility](../api-reference/eligibility) endpoint. The \`cpid\` is a Change Healthcare defined payer identifier.

When denoting a claim as self-pay, please use the \`responsible party\` field on the [Encounters](../api-reference/encounters) endpoint.",
    "indexSegmentId": "constant",
    "slug": "introduction/payer-information",
    "title": "Payer Information",
    "type": "markdown-section-v1",
  },
  {
    "breadcrumbs": [
      {
        "slug": "introduction/payer-information",
        "title": "Payer Information",
      },
      {
        "slug": "introduction/payer-information#important",
        "title": "IMPORTANT",
      },
    ],
    "content": "When submitting claims to Candid, please ensure you are using the exact \`payer_name\` that is listed below. The relationship between \`payer_name\` and \`payer_id\` is not one-to-one, meaning that certain \`payer_id\`s are used for multiple payers. As such, Candid has to do a match on a combination of \`payer_name\` and \`payer_id\` to determine the right place to send the claim in those instances.



View list of supported Payer IDs, Payer Names, and CPIDs or download a CSV here.

",
    "indexSegmentId": "constant",
    "slug": "introduction/payer-information#important",
    "title": "IMPORTANT",
    "type": "markdown-section-v1",
  },
  {
    "breadcrumbs": [],
    "description": "Candid Health supports most payers. You can find a list of supported payers with their respective \`payer_id\`, \`payer_name\`, and \`cpid\` below.

The \`payer_id\` and \`payer_name\` should be used in the corresponding subscriber\\'s insurance card information and when you use the [Encounters](../api-reference/encounters) endpoint.

The \`cpid\` should be used in the \`tradingPartnerServiceId\` field of the [Eligibility](../api-reference/eligibility) endpoint. The \`cpid\` is a Change Healthcare defined payer identifier.

When denoting a claim as self-pay, please use the \`responsible party\` field on the [Encounters](../api-reference/encounters) endpoint.

",
    "indexSegmentId": "constant",
    "slug": "introduction/payer-information",
    "title": "Payer Information",
    "type": "page-v4",
  },
  {
    "content": "Candid Health supports most payers. You can find a list of supported payers with their respective payer_id, payer_name, and cpid
below.

The payer_id and payer_name should be used in the corresponding subscriber's insurance card information and when you use the
Encounters [../api-reference/encounters] endpoint.

The cpid should be used in the tradingPartnerServiceId field of the Eligibility [../api-reference/eligibility] endpoint. The cpid
is a Change Healthcare defined payer identifier.

When denoting a claim as self-pay, please use the responsible party field on the Encounters [../api-reference/encounters]
endpoint.


IMPORTANT

When submitting claims to Candid, please ensure you are using the exact payer_name that is listed below. The relationship between
payer_name and payer_id is not one-to-one, meaning that certain payer_ids are used for multiple payers. As such, Candid has to do
a match on a combination of payer_name and payer_id to determine the right place to send the claim in those instances.

View list of supported Payer IDs, Payer Names, and CPIDs or download a CSV here
[https://app.joincandidhealth.com/dynamic-files/payers-list.csv].",
    "indexSegmentId": "constant",
    "path": {
      "parts": [
        {
          "name": "Introduction",
          "urlSlug": "introduction",
        },
        {
          "name": "Payer Information",
          "urlSlug": "payer-information",
        },
      ],
    },
    "title": "Payer Information",
    "type": "page-v2",
  },
  {
    "breadcrumbs": [
      {
        "slug": "introduction/getting-started",
        "title": "Getting Started",
      },
    ],
    "content": "This page outlines how to use our Python and TypeScript SDKs to interact with our API.
Specifically, you'll learn how to make a request to create an Encounter.",
    "indexSegmentId": "constant",
    "slug": "introduction/getting-started",
    "title": "Getting Started",
    "type": "markdown-section-v1",
  },
  {
    "breadcrumbs": [
      {
        "slug": "introduction/getting-started",
        "title": "Getting Started",
      },
      {
        "slug": "introduction/getting-started#prerequisites",
        "title": "Prerequisites",
      },
    ],
    "content": "- Python 3.x or TypeScript 4.x installed on your system
- Candid Client ID
- Candid Client Secret",
    "indexSegmentId": "constant",
    "slug": "introduction/getting-started#prerequisites",
    "title": "Prerequisites",
    "type": "markdown-section-v1",
  },
  {
    "breadcrumbs": [
      {
        "slug": "introduction/getting-started",
        "title": "Getting Started",
      },
      {
        "slug": "introduction/getting-started#installation",
        "title": "Installation",
      },
    ],
    "content": "First, install the SDK using your package manager:


\`\`\`bash
pip install candidhealth # or poetry install, etc
\`\`\`


\`\`\`bash
yarn add candidhealth   # or npm install, pnpm i, etc.
\`\`\`

",
    "indexSegmentId": "constant",
    "slug": "introduction/getting-started#installation",
    "title": "Installation",
    "type": "markdown-section-v1",
  },
  {
    "breadcrumbs": [
      {
        "slug": "introduction/getting-started",
        "title": "Getting Started",
      },
      {
        "slug": "introduction/getting-started#authentication",
        "title": "Authentication",
      },
    ],
    "content": "To make requests to our API, you'll need to use your API key for authentication. Initialize the SDK as follows:



\`\`\`python
from candid.client import CandidApiClient
from candid.environment import CandidApiEnvironment

client = CandidApiClient(
environment=CandidApiEnvironment.STAGING,
options=CandidApiClientOptions(
client_id="YOUR_CLIENT_ID",
client_secret="YOUR_CLIENT_SECRET"
)
)
\`\`\`


\`\`\`typescript
import { CandidApi, CandidApiClient, CandidApiEnvironment } from "candidhealth";

const client = new CandidApiClient({
environment: CandidApiEnvironment.Staging,
clientId: "YOUR_CLIENT_ID",
clientSecret: "YOUR_CLIENT_SECRET",
});
\`\`\`



Candid provides two environments, \`STAGING\` and \`PRODUCTION\`. Take care to pass the correct environment when creating your API client so that requests are routed correctly.",
    "indexSegmentId": "constant",
    "slug": "introduction/getting-started#authentication",
    "title": "Authentication",
    "type": "markdown-section-v1",
  },
  {
    "breadcrumbs": [
      {
        "slug": "introduction/getting-started",
        "title": "Getting Started",
      },
      {
        "slug": "introduction/getting-started#making-an-example-request",
        "title": "Making an Example Request",
      },
    ],
    "content": "In this example, we'll create an Encounter using the V4 API.



\`\`\`python
created_encounter = client.encounters.v_4.create(
external_id=EncounterExternalId("emr-claim-id-abcd",
date_of_service=Date("2023-05-23",
billable_status=BillableStatusType.BILLABLE,  # or BillableStatusType.NOT_BILLABLE
responsible_party=ResponsiblePartyType.INSURANCE_PAY,  # or ResponsiblePartyType.SELF_PAY
patient=PatientCreate(
external_id="emr-patient-id-123",
first_name="Loki",
last_name="Laufeyson",
date_of_birth=Date("1983-12-17",
gender=Gender.MALE,
address=StreetAddressShortZip(
address_1="1234 Main St",
address_2="Apt 9876",
city="Asgard",
state=State.CA,
zip_code="94109",
zip_plus_four_code="1234",
),
),
patient_authorized_release=True,
billing_provider=BillingProvider(
organization_name="Acme Health PC",
npi="1234567890",
tax_id="123456789",
address=StreetAddressLongZip(
address_1="1234 Main St",
address_2="Apt 9876",
city="Asgard",
state=State.CA,
zip_code="94109",
zip_plus_four_code="1234",
),
),
rendering_provider=RenderingProvider(
first_name="Doctor",
last_name="Strange",
npi="9876543210",
),
diagnoses=[
DiagnosisCreate(code_type=DiagnosisTypeCode.ABF, code="Z63.88",
DiagnosisCreate(code_type=DiagnosisTypeCode.ABF, code="E66.66",
],
place_of_service_code=FacilityTypeCode.TELEHEALTH,
service_lines=[
ServiceLineCreate(
procedure_code="99212",
modifiers=[],
quantity=Decimal("1.0",
units=ServiceLineUnits.UN,
charge_amount_cents=1500,
diagnosis_pointers=[0, 1],
),
],
clinical_notes=[],
provider_accepts_assignment=True,
benefits_assigned_to_provider=True,
)
\`\`\`


\`\`\`typescript
const createEncounterResponse = await client.encounters.v4.create({
externalId: CandidApi.EncounterExternalId("emr-claim-id-abcd",
dateOfService: CandidApi.Date_("2023-05-23",
billableStatus: "BILLABLE", // or "NOT_BILLABLE
responsibleParty: "INSURANCE_PAY", // or "SELF_PAY"
patient: {
externalId: "emr-patient-id-123",
firstName: "Loki",
lastName: "Laufeyson",
dateOfBirth: CandidApi.Date_("1983-12-17",
gender: "male",
address: {
address1: "1234 Main St",
address2: "Apt 9876",
city: "Asgard",
state: "CA",
zipCode: "94109",
zipPlusFourCode: "1234",
},
},
patientAuthorizedRelease: true,
billingProvider: {
organizationName: "Acme Health PC",
npi: "1234567890",
taxId: "123456789",
address: {
address1: "1234 Main St",
address2: "Apt 9876",
city: "Asgard",
state: "CA",
zipCode: "94109",
zipPlusFourCode: "1234",
},
},
renderingProvider: {
firstName: "Doctor",
lastName: "Strange",
npi: "9876543210",
},
diagnoses: [
{ codeType: "ABF", code: "Z63.88" },
{ codeType: "ABF", code: "E66.66" },
],
placeOfServiceCode: "02", // telemedicine
serviceLines: [
{
procedureCode: "99212",
modifiers: [],
quantity: CandidApi.Decimal("1.0",
units: "UN",
chargeAmountCents: 1500,
diagnosisPointers: [0, 1],
}
],
clinicalNotes: [],
providerAcceptsAssignment: true,
benefitsAssignedToProvider: true,
});
\`\`\`

",
    "indexSegmentId": "constant",
    "slug": "introduction/getting-started#making-an-example-request",
    "title": "Making an Example Request",
    "type": "markdown-section-v1",
  },
  {
    "breadcrumbs": [
      {
        "slug": "introduction/getting-started",
        "title": "Getting Started",
      },
      {
        "slug": "introduction/getting-started#error-handling",
        "title": "Error Handling",
      },
    ],
    "content": "Each endpoint in our SDK documents which errors and exceptions can be raised
if the request fails. These can be caught and handled via native exception-handling:



\`\`\`python
from candid.resources.encounters.resources.v_4.errors import EncounterExternalIdUniquenessError

try:
created_encounter = client.encounters.v_4.create(...)
except EncounterExternalIdUniquenessError as e:
print(f"An error occurred: {e}")
\`\`\`


\`\`\`typescript
if (createEncounterResponse.ok) {
const { body: newEncounter } = createEncounterResponse;
console.log(newEncounter.encounterId);
} else {
console.error(createEncounterResponse.error);
}
\`\`\`

",
    "indexSegmentId": "constant",
    "slug": "introduction/getting-started#error-handling",
    "title": "Error Handling",
    "type": "markdown-section-v1",
  },
  {
    "breadcrumbs": [
      {
        "slug": "introduction/getting-started",
        "title": "Getting Started",
      },
      {
        "slug": "introduction/getting-started#full-source-code",
        "title": "Full Source Code",
      },
    ],
    "content": "

\`\`\`python
from candid.candid_api_client import CandidApiClient, CandidApiClientOptions
from candid import (
CandidApiEnvironment,
EncounterExternalId,
Date,
PatientCreate,
Gender,
StreetAddressShortZip,
State,
StreetAddressLongZip,
DiagnosisCreate,
DiagnosisTypeCode,
FacilityTypeCode,
ServiceLineCreate,
ServiceLineUnits,
Decimal,
)
from candid.resources.encounter_providers.resources.v_2 import BillingProvider, RenderingProvider
from candid.resources.encounters.resources.v_4 import BillableStatusType, ResponsiblePartyType

client = CandidApiClient(
environment=CandidApiEnvironment.STAGING,
options=CandidApiClientOptions(
client_id="YOUR_CLIENT_ID",
client_secret="YOUR_CLIENT_SECRET"
)
)

created_encounter = client.encounters.v_4.create(
external_id=EncounterExternalId("emr-claim-id-abcd",
date_of_service=Date("2023-05-23",
billable_status=BillableStatusType.BILLABLE,  # or BillableStatusType.NOT_BILLABLE
responsible_party=ResponsiblePartyType.INSURANCE_PAY,  # or ResponsiblePartyType.SELF_PAY
patient=PatientCreate(
external_id="emr-patient-id-123",
first_name="Loki",
last_name="Laufeyson",
date_of_birth=Date("1983-12-17",
gender=Gender.MALE,
address=StreetAddressShortZip(
address_1="1234 Main St",
address_2="Apt 9876",
city="Asgard",
state=State.CA,
zip_code="94109",
zip_plus_four_code="1234",
),
),
patient_authorized_release=True,
billing_provider=BillingProvider(
organization_name="Acme Health PC",
npi="1234567890",
tax_id="123456789",
address=StreetAddressLongZip(
address_1="1234 Main St",
address_2="Apt 9876",
city="Asgard",
state=State.CA,
zip_code="94109",
zip_plus_four_code="1234",
),
),
rendering_provider=RenderingProvider(
first_name="Doctor",
last_name="Strange",
npi="9876543210",
),
diagnoses=[
DiagnosisCreate(code_type=DiagnosisTypeCode.ABF, code="Z63.88",
DiagnosisCreate(code_type=DiagnosisTypeCode.ABF, code="E66.66",
],
place_of_service_code=FacilityTypeCode.TELEHEALTH,
service_lines=[
ServiceLineCreate(
procedure_code="99212",
modifiers=[],
quantity=Decimal("1.0",
units=ServiceLineUnits.UN,
charge_amount_cents=1500,
diagnosis_pointers=[0, 1],
),
],
clinical_notes=[],
provider_accepts_assignment=True,
benefits_assigned_to_provider=True,
)
\`\`\`


\`\`\`typescript
import { CandidApi, CandidApiClient, CandidApiEnvironment } from "candidhealth";

const client = new CandidApiClient({
environment: CandidApiEnvironment.Staging,
clientId: "YOUR_CLIENT_ID",
clientSecret: "YOUR_CLIENT_SECRET",
});

const createEncounterResponse = await client.encounters.v4.create({
externalId: CandidApi.EncounterExternalId("emr-claim-id-abcd",
dateOfService: CandidApi.Date_("2023-05-23",
billableStatus: "BILLABLE", // or "NOT_BILLABLE
responsibleParty: "INSURANCE_PAY", // or "SELF_PAY"
patient: {
externalId: "emr-patient-id-123",
firstName: "Loki",
lastName: "Laufeyson",
dateOfBirth: CandidApi.Date_("1983-12-17",
gender: "male",
address: {
address1: "1234 Main St",
address2: "Apt 9876",
city: "Asgard",
state: "CA",
zipCode: "94109",
zipPlusFourCode: "1234",
},
},
patientAuthorizedRelease: true,
billingProvider: {
organizationName: "Acme Health PC",
npi: "1234567890",
taxId: "123456789",
address: {
address1: "1234 Main St",
address2: "Apt 9876",
city: "Asgard",
state: "CA",
zipCode: "94109",
zipPlusFourCode: "1234",
},
},
renderingProvider: {
firstName: "Doctor",
lastName: "Strange",
npi: "9876543210",
},
diagnoses: [
{ codeType: "ABF", code: "Z63.88" },
{ codeType: "ABF", code: "E66.66" },
],
placeOfServiceCode: "02", // telemedicine
serviceLines: [
{
procedureCode: "99212",
modifiers: [],
quantity: CandidApi.Decimal("1.0",
units: "UN",
chargeAmountCents: 1500,
diagnosisPointers: [0, 1],
}
],
clinicalNotes: [],
providerAcceptsAssignment: true,
benefitsAssignedToProvider: true,
});
\`\`\`

",
    "indexSegmentId": "constant",
    "slug": "introduction/getting-started#full-source-code",
    "title": "Full Source Code",
    "type": "markdown-section-v1",
  },
  {
    "breadcrumbs": [],
    "description": "This page outlines how to use our Python and TypeScript SDKs to interact with our API.
Specifically, you'll learn how to make a request to create an Encounter.

",
    "indexSegmentId": "constant",
    "slug": "introduction/getting-started",
    "title": "Getting Started",
    "type": "page-v4",
  },
  {
    "content": "This page outlines how to use our Python and TypeScript SDKs to interact with our API. Specifically, you'll learn how to make a
request to create an Encounter.


PREREQUISITES

 * Python 3.x or TypeScript 4.x installed on your system
 * Candid Client ID
 * Candid Client Secret


INSTALLATION

First, install the SDK using your package manager: bash pip install candidhealth # or poetry install, etc bash yarn add
candidhealth # or npm install, pnpm i, etc.


AUTHENTICATION

To make requests to our API, you'll need to use your API key for authentication. Initialize the SDK as follows:

\`\`\`python from candid.client import CandidApiClient from candid.environment import CandidApiEnvironment

client = CandidApiClient(
    environment=CandidApiEnvironment.STAGING,
    options=CandidApiClientOptions(
        client_id="YOUR_CLIENT_ID",
        client_secret="YOUR_CLIENT_SECRET"
    )
)
\`\`\`
</CodeBlock>
<CodeBlock title="TypeScript">
\`\`\`typescript
import { CandidApi, CandidApiClient, CandidApiEnvironment } from "candidhealth";

const client = new CandidApiClient({
    environment: CandidApiEnvironment.Staging,
    clientId: "YOUR_CLIENT_ID",
    clientSecret: "YOUR_CLIENT_SECRET",
});
\`\`\`
</CodeBlock>


Candid provides two environments, STAGING and PRODUCTION. Take care to pass the correct environment when creating your API client
so that requests are routed correctly.


MAKING AN EXAMPLE REQUEST

In this example, we'll create an Encounter using the V4 API.

\`\`\`python created_encounter = client.encounters.v_4.create( external_id=EncounterExternalId("emr-claim-id-abcd",
date_of_service=Date("2023-05-23", billable_status=BillableStatusType.BILLABLE, # or BillableStatusType.NOT_BILLABLE
responsible_party=ResponsiblePartyType.INSURANCE_PAY, # or ResponsiblePartyType.SELF_PAY patient=PatientCreate(
external_id="emr-patient-id-123", first_name="Loki", last_name="Laufeyson", date_of_birth=Date("1983-12-17", gender=Gender.MALE,
address=StreetAddressShortZip( address_1="1234 Main St", address_2="Apt 9876", city="Asgard", state=State.CA, zip_code="94109",
zip_plus_four_code="1234", ), ), patient_authorized_release=True, billing_provider=BillingProvider( organization_name="Acme Health
PC", npi="1234567890", tax_id="123456789", address=StreetAddressLongZip( address_1="1234 Main St", address_2="Apt 9876",
city="Asgard", state=State.CA, zip_code="94109", zip_plus_four_code="1234", ), ), rendering_provider=RenderingProvider(
first_name="Doctor", last_name="Strange", npi="9876543210", ), diagnoses=[ DiagnosisCreate(code_type=DiagnosisTypeCode.ABF,
code="Z63.88", DiagnosisCreate(code_type=DiagnosisTypeCode.ABF, code="E66.66", ],
place_of_service_code=FacilityTypeCode.TELEHEALTH, service_lines=[ ServiceLineCreate( procedure_code="99212", modifiers=[],
quantity=Decimal("1.0", units=ServiceLineUnits.UN, charge_amount_cents=1500, diagnosis_pointers=[0, 1], ), ], clinical_notes=[],
provider_accepts_assignment=True, benefits_assigned_to_provider=True, ) \`\`\` \`\`\`typescript const createEncounterResponse = await
client.encounters.v4.create({ externalId: CandidApi.EncounterExternalId("emr-claim-id-abcd", dateOfService:
CandidApi.Date_("2023-05-23", billableStatus: "BILLABLE", // or "NOT_BILLABLE responsibleParty: "INSURANCE_PAY", // or "SELF_PAY"
patient: { externalId: "emr-patient-id-123", firstName: "Loki", lastName: "Laufeyson", dateOfBirth: CandidApi.Date_("1983-12-17",
gender: "male", address: { address1: "1234 Main St", address2: "Apt 9876", city: "Asgard", state: "CA", zipCode: "94109",
zipPlusFourCode: "1234", }, }, patientAuthorizedRelease: true, billingProvider: { organizationName: "Acme Health PC", npi:
"1234567890", taxId: "123456789", address: { address1: "1234 Main St", address2: "Apt 9876", city: "Asgard", state: "CA", zipCode:
"94109", zipPlusFourCode: "1234", }, }, renderingProvider: { firstName: "Doctor", lastName: "Strange", npi: "9876543210", },
diagnoses: [ { codeType: "ABF", code: "Z63.88" }, { codeType: "ABF", code: "E66.66" }, ], placeOfServiceCode: "02", //
telemedicine serviceLines: [ { procedureCode: "99212", modifiers: [], quantity: CandidApi.Decimal("1.0", units: "UN",
chargeAmountCents: 1500, diagnosisPointers: [0, 1], } ], clinicalNotes: [], providerAcceptsAssignment: true,
benefitsAssignedToProvider: true, }); \`\`\`


ERROR HANDLING

Each endpoint in our SDK documents which errors and exceptions can be raised if the request fails. These can be caught and handled
via native exception-handling:

\`\`\`python from candid.resources.encounters.resources.v_4.errors import EncounterExternalIdUniquenessError

try:
    created_encounter = client.encounters.v_4.create(...)
except EncounterExternalIdUniquenessError as e:
    print(f"An error occurred: {e}")
\`\`\`
</CodeBlock>
<CodeBlock title="TypeScript">
\`\`\`typescript
if (createEncounterResponse.ok) {
    const { body: newEncounter } = createEncounterResponse;
    console.log(newEncounter.encounterId);
} else {
    console.error(createEncounterResponse.error);
}
\`\`\`
</CodeBlock>


## Full Source Code \`\`\`python from candid.candid_api_client import CandidApiClient, CandidApiClientOptions from candid import (
CandidApiEnvironment, EncounterExternalId, Date, PatientCreate, Gender, StreetAddressShortZip, State, StreetAddressLongZip,
DiagnosisCreate, DiagnosisTypeCode, FacilityTypeCode, ServiceLineCreate, ServiceLineUnits, Decimal, ) from
candid.resources.encounter_providers.resources.v_2 import BillingProvider, RenderingProvider from
candid.resources.encounters.resources.v_4 import BillableStatusType, ResponsiblePartyType

client = CandidApiClient(
    environment=CandidApiEnvironment.STAGING,
    options=CandidApiClientOptions(
        client_id="YOUR_CLIENT_ID",
        client_secret="YOUR_CLIENT_SECRET"
    )
)

created_encounter = client.encounters.v_4.create(
    external_id=EncounterExternalId("emr-claim-id-abcd",
    date_of_service=Date("2023-05-23",
    billable_status=BillableStatusType.BILLABLE,  # or BillableStatusType.NOT_BILLABLE
    responsible_party=ResponsiblePartyType.INSURANCE_PAY,  # or ResponsiblePartyType.SELF_PAY
    patient=PatientCreate(
        external_id="emr-patient-id-123",
        first_name="Loki",
        last_name="Laufeyson",
        date_of_birth=Date("1983-12-17",
        gender=Gender.MALE,
        address=StreetAddressShortZip(
            address_1="1234 Main St",
            address_2="Apt 9876",
            city="Asgard",
            state=State.CA,
            zip_code="94109",
            zip_plus_four_code="1234",
        ),
    ),
    patient_authorized_release=True,
    billing_provider=BillingProvider(
        organization_name="Acme Health PC",
        npi="1234567890",
        tax_id="123456789",
        address=StreetAddressLongZip(
            address_1="1234 Main St",
            address_2="Apt 9876",
            city="Asgard",
            state=State.CA,
            zip_code="94109",
            zip_plus_four_code="1234",
        ),
    ),
    rendering_provider=RenderingProvider(
        first_name="Doctor",
        last_name="Strange",
        npi="9876543210",
    ),
    diagnoses=[
        DiagnosisCreate(code_type=DiagnosisTypeCode.ABF, code="Z63.88",
        DiagnosisCreate(code_type=DiagnosisTypeCode.ABF, code="E66.66",
    ],
    place_of_service_code=FacilityTypeCode.TELEHEALTH,
    service_lines=[
        ServiceLineCreate(
            procedure_code="99212",
            modifiers=[],
            quantity=Decimal("1.0",
            units=ServiceLineUnits.UN,
            charge_amount_cents=1500,
            diagnosis_pointers=[0, 1],
        ),
    ],
    clinical_notes=[],
    provider_accepts_assignment=True,
    benefits_assigned_to_provider=True,
)
\`\`\`
</CodeBlock>
<CodeBlock title="TypeScript">
\`\`\`typescript
import { CandidApi, CandidApiClient, CandidApiEnvironment } from "candidhealth";

const client = new CandidApiClient({
    environment: CandidApiEnvironment.Staging,
    clientId: "YOUR_CLIENT_ID",
    clientSecret: "YOUR_CLIENT_SECRET",
});

const createEncounterResponse = await client.encounters.v4.create({
    externalId: CandidApi.EncounterExternalId("emr-claim-id-abcd",
    dateOfService: CandidApi.Date_("2023-05-23",
    billableStatus: "BILLABLE", // or "NOT_BILLABLE
    responsibleParty: "INSURANCE_PAY", // or "SELF_PAY"
    patient: {
        externalId: "emr-patient-id-123",
        firstName: "Loki",
        lastName: "Laufeyson",
        dateOfBirth: CandidApi.Date_("1983-12-17",
        gender: "male",
        address: {
            address1: "1234 Main St",
            address2: "Apt 9876",
            city: "Asgard",
            state: "CA",
            zipCode: "94109",
            zipPlusFourCode: "1234",
        },
    },
    patientAuthorizedRelease: true,
    billingProvider: {
        organizationName: "Acme Health PC",
        npi: "1234567890",
        taxId: "123456789",
        address: {
            address1: "1234 Main St",
            address2: "Apt 9876",
            city: "Asgard",
            state: "CA",
            zipCode: "94109",
            zipPlusFourCode: "1234",
        },
    },
    renderingProvider: {
        firstName: "Doctor",
        lastName: "Strange",
        npi: "9876543210",
    },
    diagnoses: [
        { codeType: "ABF", code: "Z63.88" },
        { codeType: "ABF", code: "E66.66" },
    ],
    placeOfServiceCode: "02", // telemedicine
    serviceLines: [
        {
            procedureCode: "99212",
            modifiers: [],
            quantity: CandidApi.Decimal("1.0",
            units: "UN",
            chargeAmountCents: 1500,
            diagnosisPointers: [0, 1],
        }
    ],
    clinicalNotes: [],
    providerAcceptsAssignment: true,
    benefitsAssignedToProvider: true,
});
\`\`\`
</CodeBlock>
",
    "indexSegmentId": "constant",
    "path": {
      "parts": [
        {
          "name": "Introduction",
          "urlSlug": "introduction",
        },
        {
          "name": "Getting Started",
          "urlSlug": "getting-started",
        },
      ],
    },
    "title": "Getting Started",
    "type": "page-v2",
  },
  {
    "breadcrumbs": [
      {
        "slug": "api-principles/design-principles",
        "title": "Design Principles",
      },
    ],
    "content": "We strive to keep our API integration experience seamless. When making API design decisions, we do
the following:
- We aim to use the same APIs internally that you use. This allows us to catch errors early and to make sure
that our API is easy to use.
- We aim to make our API simple. We want to make sure that you can get up and running quickly. We also want to
make sure that you don't have to write a lot of code to use our API.
- We aim to make our API consistent. Whether it is naming conventions, data types, or the way that we pass back
errors, we want to make sure that our API works similarly across different services and endpoints.
- We aim to make our API reliable. We want to make sure that our API is always available and that it always
works as expected.
- We bias against breaking changes. We try our best to make sure that you don't have to make changes to your
existing code unless there is a good reason.
- We aim to use the same terminology that you use. We want to make sure that our API is easy to understand and
that you don't have to learn a new vocabulary to use it.
Sometimes, you may find issues before we do. You may find places where we can do the things above better. If you do,
please let us know! We are always looking for ways to improve our API, and you can reach us by emailing
support@joincandidhealth.com.",
    "indexSegmentId": "constant",
    "slug": "api-principles/design-principles",
    "title": "Design Principles",
    "type": "markdown-section-v1",
  },
  {
    "breadcrumbs": [],
    "description": "We strive to keep our API integration experience seamless. When making API design decisions, we do
the following:
- We aim to use the same APIs internally that you use. This allows us to catch errors early and to make sure
that our API is easy to use.
- We aim to make our API simple. We want to make sure that you can get up and running quickly. We also want to
make sure that you don't have to write a lot of code to use our API.
- We aim to make our API consistent. Whether it is naming conventions, data types, or the way that we pass back
errors, we want to make sure that our API works similarly across different services and endpoints.
- We aim to make our API reliable. We want to make sure that our API is always available and that it always
works as expected.
- We bias against breaking changes. We try our best to make sure that you don't have to make changes to your
existing code unless there is a good reason.
- We aim to use the same terminology that you use. We want to make sure that our API is easy to understand and
that you don't have to learn a new vocabulary to use it.
Sometimes, you may find issues before we do. You may find places where we can do the things above better. If you do,
please let us know! We are always looking for ways to improve our API, and you can reach us by emailing
support@joincandidhealth.com.

",
    "indexSegmentId": "constant",
    "slug": "api-principles/design-principles",
    "title": "Design Principles",
    "type": "page-v4",
  },
  {
    "content": "We strive to keep our API integration experience seamless. When making API design decisions, we do the following:

 * We aim to use the same APIs internally that you use. This allows us to catch errors early and to make sure that our API is easy
   to use.
 * We aim to make our API simple. We want to make sure that you can get up and running quickly. We also want to make sure that you
   don't have to write a lot of code to use our API.
 * We aim to make our API consistent. Whether it is naming conventions, data types, or the way that we pass back errors, we want
   to make sure that our API works similarly across different services and endpoints.
 * We aim to make our API reliable. We want to make sure that our API is always available and that it always works as expected.
 * We bias against breaking changes. We try our best to make sure that you don't have to make changes to your existing code unless
   there is a good reason.
 * We aim to use the same terminology that you use. We want to make sure that our API is easy to understand and that you don't
   have to learn a new vocabulary to use it. Sometimes, you may find issues before we do. You may find places where we can do the
   things above better. If you do, please let us know! We are always looking for ways to improve our API, and you can reach us by
   emailing support@joincandidhealth.com [support@joincandidhealth.com].",
    "indexSegmentId": "constant",
    "path": {
      "parts": [
        {
          "name": "API Principles",
          "urlSlug": "api-principles",
        },
        {
          "name": "Design Principles",
          "urlSlug": "design-principles",
        },
      ],
    },
    "title": "Design Principles",
    "type": "page-v2",
  },
  {
    "breadcrumbs": [
      {
        "slug": "api-principles/development-lifecycle",
        "title": "Development Lifecycle",
      },
    ],
    "content": "Endpoints in our API live in one of three states: incubating, available, and deprecated.

- **Incubating**: Endpoints in this state can be used, but proceed with caution. We are still working on them, and
they may change or break at any time.
- **Available**: Endpoints in this state are available and reliable to use. We actively provide support for them, so
please do let us know if anything is not working as expected!
- **Deprecated**: Endpoints in this state are available to use, however we generally will have a recommendation of
something better to use (maybe a new version or a different endpoint). We provide support for these on a case-by-case
basis, sometimes asking you to upgrade your client to resolve any issues.

Our endpoint documentation will specify if the endpoint is incubating or deprecated. Otherwise, you can safely assume
that it is available.",
    "indexSegmentId": "constant",
    "slug": "api-principles/development-lifecycle",
    "title": "Development Lifecycle",
    "type": "markdown-section-v1",
  },
  {
    "breadcrumbs": [],
    "description": "Endpoints in our API live in one of three states: incubating, available, and deprecated.

- **Incubating**: Endpoints in this state can be used, but proceed with caution. We are still working on them, and
they may change or break at any time.
- **Available**: Endpoints in this state are available and reliable to use. We actively provide support for them, so
please do let us know if anything is not working as expected!
- **Deprecated**: Endpoints in this state are available to use, however we generally will have a recommendation of
something better to use (maybe a new version or a different endpoint). We provide support for these on a case-by-case
basis, sometimes asking you to upgrade your client to resolve any issues.

Our endpoint documentation will specify if the endpoint is incubating or deprecated. Otherwise, you can safely assume
that it is available.

",
    "indexSegmentId": "constant",
    "slug": "api-principles/development-lifecycle",
    "title": "Development Lifecycle",
    "type": "page-v4",
  },
  {
    "content": "Endpoints in our API live in one of three states: incubating, available, and deprecated.

 * Incubating: Endpoints in this state can be used, but proceed with caution. We are still working on them, and they may change or
   break at any time.
 * Available: Endpoints in this state are available and reliable to use. We actively provide support for them, so please do let us
   know if anything is not working as expected!
 * Deprecated: Endpoints in this state are available to use, however we generally will have a recommendation of something better
   to use (maybe a new version or a different endpoint). We provide support for these on a case-by-case basis, sometimes asking
   you to upgrade your client to resolve any issues.

Our endpoint documentation will specify if the endpoint is incubating or deprecated. Otherwise, you can safely assume that it is
available.",
    "indexSegmentId": "constant",
    "path": {
      "parts": [
        {
          "name": "API Principles",
          "urlSlug": "api-principles",
        },
        {
          "name": "Development Lifecycle",
          "urlSlug": "development-lifecycle",
        },
      ],
    },
    "title": "Development Lifecycle",
    "type": "page-v2",
  },
  {
    "breadcrumbs": [
      {
        "slug": "api-principles/breaking-changes",
        "title": "Breaking Changes",
      },
    ],
    "content": "We do our absolute best to avoid breaking changes in our API.
However, sometimes we need to make changes to our API that
will break existing clients. Here's how we recommend thinking
about breaking changes from us:

1. Endpoints marked as \`Incubating\` are subject to breaking changes without notice.
2. Endpoints marked as \`Available\` or \`Deprecated\` are generally not
subject to breaking changes, only being done in rare cases
when no other options exist.
3. Any breaking changes that we do make will be clearly
documented in the Breaking Changes page in our API documentation along with
a date, so there is always a historical record.
4. We try to notify you of breaking changes as early as possible.
We do this by sending an email to a breaking changes email list we keep.
If you would like to be added to this list, please email
[support@joincandidhealth.com](mailto:support@joincandidhealth.com).",
    "indexSegmentId": "constant",
    "slug": "api-principles/breaking-changes",
    "title": "Breaking Changes",
    "type": "markdown-section-v1",
  },
  {
    "breadcrumbs": [
      {
        "slug": "api-principles/breaking-changes",
        "title": "Breaking Changes",
      },
      {
        "slug": "api-principles/breaking-changes#what-is-a-breaking-change",
        "title": "What is a breaking change",
      },
    ],
    "content": "We consider a break any change that meets one of the two following criteria:

- A schema change to a request shape that leads to a previously valid client
request shape becoming invalid.
- A schema change to a response shape that leads to a previously valid client
response parser becoming invalid.

Here are some examples of changes that we consider **non-breaking**:

- Adding a new field to an existing response shape
- Making a required field on a request shape optional
- Removing an optional field on a response shape

Here are some examples of changes that we consider **breaking**:

- Removing a required field on a response shape
- Changing the data type of a field",
    "indexSegmentId": "constant",
    "slug": "api-principles/breaking-changes#what-is-a-breaking-change",
    "title": "What is a breaking change",
    "type": "markdown-section-v1",
  },
  {
    "breadcrumbs": [],
    "description": "We do our absolute best to avoid breaking changes in our API.
However, sometimes we need to make changes to our API that
will break existing clients. Here's how we recommend thinking
about breaking changes from us:

1. Endpoints marked as \`Incubating\` are subject to breaking changes without notice.
2. Endpoints marked as \`Available\` or \`Deprecated\` are generally not
subject to breaking changes, only being done in rare cases
when no other options exist.
3. Any breaking changes that we do make will be clearly
documented in the Breaking Changes page in our API documentation along with
a date, so there is always a historical record.
4. We try to notify you of breaking changes as early as possible.
We do this by sending an email to a breaking changes email list we keep.
If you would like to be added to this list, please email
[support@joincandidhealth.com](mailto:support@joincandidhealth.com).

",
    "indexSegmentId": "constant",
    "slug": "api-principles/breaking-changes",
    "title": "Breaking Changes",
    "type": "page-v4",
  },
  {
    "content": "We do our absolute best to avoid breaking changes in our API. However, sometimes we need to make changes to our API that will
break existing clients. Here's how we recommend thinking about breaking changes from us:

 1. Endpoints marked as Incubating are subject to breaking changes without notice.
 2. Endpoints marked as Available or Deprecated are generally not subject to breaking changes, only being done in rare cases when
    no other options exist.
 3. Any breaking changes that we do make will be clearly documented in the Breaking Changes page in our API documentation along
    with a date, so there is always a historical record.
 4. We try to notify you of breaking changes as early as possible. We do this by sending an email to a breaking changes email list
    we keep. If you would like to be added to this list, please email support@joincandidhealth.com [support@joincandidhealth.com].


WHAT IS A BREAKING CHANGE

We consider a break any change that meets one of the two following criteria:

 * A schema change to a request shape that leads to a previously valid client request shape becoming invalid.
 * A schema change to a response shape that leads to a previously valid client response parser becoming invalid.

Here are some examples of changes that we consider non-breaking:

 * Adding a new field to an existing response shape
 * Making a required field on a request shape optional
 * Removing an optional field on a response shape

Here are some examples of changes that we consider breaking:

 * Removing a required field on a response shape
 * Changing the data type of a field",
    "indexSegmentId": "constant",
    "path": {
      "parts": [
        {
          "name": "API Principles",
          "urlSlug": "api-principles",
        },
        {
          "name": "Breaking Changes",
          "urlSlug": "breaking-changes",
        },
      ],
    },
    "title": "Breaking Changes",
    "type": "page-v2",
  },
  {
    "breadcrumbs": [
      {
        "slug": "api-principles/conventions",
        "title": "Conventions",
      },
      {
        "slug": "api-principles/conventions#type-aliases-branding",
        "title": "Type Aliases & Branding",
      },
    ],
    "content": "For many string or UUID types, you may notice we alias / brand them as their own type. Branding is a technique
to preserve the underlying type but distinguish it as a new type, so it is easier to avoid mixing them up while
developing.

This also allows us to communicate extra information to you about how they may be intended to be used. For example,
we brand decimal strings with the type \`Decimal\` to indicate that the server will parse them into Python
Decimal objects.

When using them in the API requests, these types all still serialize as JSON strings in the HTTP
payload. However, if you are using our typed clients (SDK), the client will provide them to you as the branded type.",
    "indexSegmentId": "constant",
    "slug": "api-principles/conventions#type-aliases-branding",
    "title": "Type Aliases & Branding",
    "type": "markdown-section-v1",
  },
  {
    "breadcrumbs": [
      {
        "slug": "api-principles/conventions",
        "title": "Conventions",
      },
      {
        "slug": "api-principles/conventions#pagination",
        "title": "Pagination",
      },
    ],
    "content": "We use pagination in our API to make sure that we don't return too much data at once. Many of our endpoints return
an extension of the \`ResourcePage\` type:

\`\`\`yaml
ResourcePage:
items: T[]
next_page_token: PageToken | None
prev_page_token: PageToken | None
\`\`\`",
    "indexSegmentId": "constant",
    "slug": "api-principles/conventions#pagination",
    "title": "Pagination",
    "type": "markdown-section-v1",
  },
  {
    "breadcrumbs": [
      {
        "slug": "api-principles/conventions",
        "title": "Conventions",
      },
      {
        "slug": "api-principles/conventions#decimals",
        "title": "Decimals",
      },
    ],
    "content": "We avoid using floating-point arithmetic that leads to imprecision. Instead, we use the \`Decimal\` type,
which is a string alias type that represents a decimal number as a string. These decimal strings are parsed into the
[Python Decimal class](https://docs.python.org/3/library/decimal.html#decimal-objects).",
    "indexSegmentId": "constant",
    "slug": "api-principles/conventions#decimals",
    "title": "Decimals",
    "type": "markdown-section-v1",
  },
  {
    "breadcrumbs": [
      {
        "slug": "api-principles/conventions",
        "title": "Conventions",
      },
      {
        "slug": "api-principles/conventions#unions",
        "title": "Unions",
      },
    ],
    "content": "We use unions to represent a type that can be one of several different types. When a union shape is used, our
union discriminant will always be the \`type\` field unless otherwise specified.

We also expect that it is a non-breaking change to add a new union member to a union type. This means that if you
handle a union field in a response, we expect you to gracefully handle an \`_other\` case. This allows us
to better serve and improve our APIs at a quick velocity without breaking your code.",
    "indexSegmentId": "constant",
    "slug": "api-principles/conventions#unions",
    "title": "Unions",
    "type": "markdown-section-v1",
  },
  {
    "breadcrumbs": [],
    "description": "",
    "indexSegmentId": "constant",
    "slug": "api-principles/conventions",
    "title": "Conventions",
    "type": "page-v4",
  },
  {
    "content": "TYPE ALIASES & BRANDING

For many string or UUID types, you may notice we alias / brand them as their own type. Branding is a technique to preserve the
underlying type but distinguish it as a new type, so it is easier to avoid mixing them up while developing.

This also allows us to communicate extra information to you about how they may be intended to be used. For example, we brand
decimal strings with the type Decimal to indicate that the server will parse them into Python Decimal objects.

When using them in the API requests, these types all still serialize as JSON strings in the HTTP payload. However, if you are
using our typed clients (SDK), the client will provide them to you as the branded type.


PAGINATION

We use pagination in our API to make sure that we don't return too much data at once. Many of our endpoints return an extension of
the ResourcePage type:

ResourcePage:
  items: T[]
  next_page_token: PageToken | None
  prev_page_token: PageToken | None



DECIMALS

We avoid using floating-point arithmetic that leads to imprecision. Instead, we use the Decimal type, which is a string alias type
that represents a decimal number as a string. These decimal strings are parsed into the Python Decimal class
[https://docs.python.org/3/library/decimal.html#decimal-objects].


UNIONS

We use unions to represent a type that can be one of several different types. When a union shape is used, our union discriminant
will always be the type field unless otherwise specified.

We also expect that it is a non-breaking change to add a new union member to a union type. This means that if you handle a union
field in a response, we expect you to gracefully handle an _other case. This allows us to better serve and improve our APIs at a
quick velocity without breaking your code.",
    "indexSegmentId": "constant",
    "path": {
      "parts": [
        {
          "name": "API Principles",
          "urlSlug": "api-principles",
        },
        {
          "name": "Conventions",
          "urlSlug": "conventions",
        },
      ],
    },
    "title": "Conventions",
    "type": "page-v2",
  },
  {
    "endpoint": {
      "method": "POST",
      "name": "Get Token",
      "path": {
        "parts": [
          {
            "type": "literal",
            "value": "/api/auth/v2",
          },
          {
            "type": "literal",
            "value": "/token",
          },
        ],
      },
    },
    "indexSegmentId": "constant",
    "path": {
      "parts": [
        {
          "name": "API Reference",
          "urlSlug": "api-reference",
        },
        {
          "name": "auth",
          "urlSlug": "auth",
        },
        {
          "name": "Get Token",
          "urlSlug": "get-token",
        },
      ],
    },
    "type": "endpoint-v2",
  },
  {
    "endpoint": {
      "description": "This API is a wrapper around Change Healthcare's eligibility API. Below are some helpful documentation links:

 * Candid Health Support article [https://support.joincandidhealth.com/hc/en-us/articles/7937415468820]
 * Change Healthcare - API Reference: Check Eligibility
   [https://developers.changehealthcare.com/eligibilityandclaims/reference/medicaleligibility]
 * Change Healthcare - Guides: Eligibility FAQs
   [https://developers.changehealthcare.com/eligibilityandclaims/docs/eligibility-api-requests]
 * Change Healthcare - Guides: Sandbox API Values and Test Responses
   [https://developers.changehealthcare.com/eligibilityandclaims/docs/eligibility-sandbox-api-values-and-test-responses]
 * Change Healthcare - Guides: Sandbox Predefined Fields and Values
   [https://developers.changehealthcare.com/eligibilityandclaims/docs/sandbox-predefined-fields-and-values]
 * Change Healthcare - Guides: Using Test Payers in the Sandbox
   [https://developers.changehealthcare.com/eligibilityandclaims/docs/use-the-test-payers-in-the-sandbox-api]

A schema of the response object can be found here: Change Healthcare Docs
[https://developers.changehealthcare.com/eligibilityandclaims/reference/medicaleligibility]",
      "method": "POST",
      "name": "Submit encounter eligibility check",
      "path": {
        "parts": [
          {
            "type": "literal",
            "value": "/api/eligibility/v2",
          },
          {
            "type": "literal",
            "value": "",
          },
        ],
      },
    },
    "indexSegmentId": "constant",
    "path": {
      "parts": [
        {
          "name": "API Reference",
          "urlSlug": "api-reference",
        },
        {
          "name": "eligibility",
          "urlSlug": "eligibility",
        },
        {
          "name": "v2",
          "urlSlug": "v-2",
        },
        {
          "name": "Submit encounter eligibility check",
          "urlSlug": "submit-eligibility-check",
        },
      ],
    },
    "type": "endpoint-v2",
  },
  {
    "endpoint": {
      "method": "GET",
      "name": "Get all encounters",
      "path": {
        "parts": [
          {
            "type": "literal",
            "value": "/api/encounters/v4",
          },
          {
            "type": "literal",
            "value": "",
          },
        ],
      },
    },
    "indexSegmentId": "constant",
    "path": {
      "parts": [
        {
          "name": "API Reference",
          "urlSlug": "api-reference",
        },
        {
          "name": "encounters",
          "urlSlug": "encounters",
        },
        {
          "name": "Get all encounters",
          "urlSlug": "get-all",
        },
      ],
    },
    "type": "endpoint-v2",
  },
  {
    "endpoint": {
      "method": "GET",
      "name": "Get encounter",
      "path": {
        "parts": [
          {
            "type": "literal",
            "value": "/api/encounters/v4",
          },
          {
            "type": "literal",
            "value": "/",
          },
          {
            "type": "pathParameter",
            "value": "encounter_id",
          },
          {
            "type": "literal",
            "value": "",
          },
        ],
      },
    },
    "indexSegmentId": "constant",
    "path": {
      "parts": [
        {
          "name": "API Reference",
          "urlSlug": "api-reference",
        },
        {
          "name": "encounters",
          "urlSlug": "encounters",
        },
        {
          "name": "Get encounter",
          "urlSlug": "get",
        },
      ],
    },
    "type": "endpoint-v2",
  },
  {
    "endpoint": {
      "method": "POST",
      "name": "Create encounter",
      "path": {
        "parts": [
          {
            "type": "literal",
            "value": "/api/encounters/v4",
          },
          {
            "type": "literal",
            "value": "",
          },
        ],
      },
    },
    "indexSegmentId": "constant",
    "path": {
      "parts": [
        {
          "name": "API Reference",
          "urlSlug": "api-reference",
        },
        {
          "name": "encounters",
          "urlSlug": "encounters",
        },
        {
          "name": "Create encounter",
          "urlSlug": "create",
        },
      ],
    },
    "type": "endpoint-v2",
  },
  {
    "endpoint": {
      "method": "PATCH",
      "name": "Update encounter",
      "path": {
        "parts": [
          {
            "type": "literal",
            "value": "/api/encounters/v4",
          },
          {
            "type": "literal",
            "value": "/",
          },
          {
            "type": "pathParameter",
            "value": "encounter_id",
          },
          {
            "type": "literal",
            "value": "",
          },
        ],
      },
    },
    "indexSegmentId": "constant",
    "path": {
      "parts": [
        {
          "name": "API Reference",
          "urlSlug": "api-reference",
        },
        {
          "name": "encounters",
          "urlSlug": "encounters",
        },
        {
          "name": "Update encounter",
          "urlSlug": "update",
        },
      ],
    },
    "type": "endpoint-v2",
  },
  {
    "endpoint": {
      "method": "POST",
      "name": "Compute network status",
      "path": {
        "parts": [
          {
            "type": "literal",
            "value": "/api/expected-network-status/v1",
          },
          {
            "type": "literal",
            "value": "",
          },
        ],
      },
    },
    "indexSegmentId": "constant",
    "path": {
      "parts": [
        {
          "name": "API Reference",
          "urlSlug": "api-reference",
        },
        {
          "name": "expected-network-status",
          "urlSlug": "expected-network-status",
        },
        {
          "name": "Compute network status",
          "urlSlug": "compute",
        },
      ],
    },
    "type": "endpoint-v2",
  },
  {
    "endpoint": {
      "method": "GET",
      "name": "Get Exports",
      "path": {
        "parts": [
          {
            "type": "literal",
            "value": "/api/exports/v3",
          },
          {
            "type": "literal",
            "value": "",
          },
        ],
      },
    },
    "indexSegmentId": "constant",
    "path": {
      "parts": [
        {
          "name": "API Reference",
          "urlSlug": "api-reference",
        },
        {
          "name": "exports",
          "urlSlug": "exports",
        },
        {
          "name": "v3",
          "urlSlug": "v-3",
        },
        {
          "name": "Get Exports",
          "urlSlug": "get-exports",
        },
      ],
    },
    "type": "endpoint-v2",
  },
  {
    "endpoint": {
      "method": "POST",
      "name": "Create",
      "path": {
        "parts": [
          {
            "type": "literal",
            "value": "/api/guarantors/v1",
          },
          {
            "type": "literal",
            "value": "/",
          },
          {
            "type": "pathParameter",
            "value": "encounter_id",
          },
          {
            "type": "literal",
            "value": "",
          },
        ],
      },
    },
    "indexSegmentId": "constant",
    "path": {
      "parts": [
        {
          "name": "API Reference",
          "urlSlug": "api-reference",
        },
        {
          "name": "guarantor",
          "urlSlug": "guarantor",
        },
        {
          "name": "Create",
          "urlSlug": "create",
        },
      ],
    },
    "type": "endpoint-v2",
  },
  {
    "endpoint": {
      "method": "GET",
      "name": "Get",
      "path": {
        "parts": [
          {
            "type": "literal",
            "value": "/api/guarantors/v1",
          },
          {
            "type": "literal",
            "value": "/",
          },
          {
            "type": "pathParameter",
            "value": "guarantor_id",
          },
          {
            "type": "literal",
            "value": "",
          },
        ],
      },
    },
    "indexSegmentId": "constant",
    "path": {
      "parts": [
        {
          "name": "API Reference",
          "urlSlug": "api-reference",
        },
        {
          "name": "guarantor",
          "urlSlug": "guarantor",
        },
        {
          "name": "Get",
          "urlSlug": "get",
        },
      ],
    },
    "type": "endpoint-v2",
  },
  {
    "endpoint": {
      "method": "PATCH",
      "name": "Update",
      "path": {
        "parts": [
          {
            "type": "literal",
            "value": "/api/guarantors/v1",
          },
          {
            "type": "literal",
            "value": "/",
          },
          {
            "type": "pathParameter",
            "value": "guarantor_id",
          },
          {
            "type": "literal",
            "value": "",
          },
        ],
      },
    },
    "indexSegmentId": "constant",
    "path": {
      "parts": [
        {
          "name": "API Reference",
          "urlSlug": "api-reference",
        },
        {
          "name": "guarantor",
          "urlSlug": "guarantor",
        },
        {
          "name": "Update",
          "urlSlug": "update",
        },
      ],
    },
    "type": "endpoint-v2",
  },
  {
    "endpoint": {
      "method": "GET",
      "name": "Get",
      "path": {
        "parts": [
          {
            "type": "literal",
            "value": "/api/organization-providers/v3",
          },
          {
            "type": "literal",
            "value": "/",
          },
          {
            "type": "pathParameter",
            "value": "organization_provider_id",
          },
          {
            "type": "literal",
            "value": "",
          },
        ],
      },
    },
    "indexSegmentId": "constant",
    "path": {
      "parts": [
        {
          "name": "API Reference",
          "urlSlug": "api-reference",
        },
        {
          "name": "organization-providers",
          "urlSlug": "organization-providers",
        },
        {
          "name": "v3",
          "urlSlug": "v-3",
        },
        {
          "name": "Get",
          "urlSlug": "get",
        },
      ],
    },
    "type": "endpoint-v2",
  },
  {
    "endpoint": {
      "method": "GET",
      "name": "Get Multi",
      "path": {
        "parts": [
          {
            "type": "literal",
            "value": "/api/organization-providers/v3",
          },
          {
            "type": "literal",
            "value": "",
          },
        ],
      },
    },
    "indexSegmentId": "constant",
    "path": {
      "parts": [
        {
          "name": "API Reference",
          "urlSlug": "api-reference",
        },
        {
          "name": "organization-providers",
          "urlSlug": "organization-providers",
        },
        {
          "name": "v3",
          "urlSlug": "v-3",
        },
        {
          "name": "Get Multi",
          "urlSlug": "get-multi",
        },
      ],
    },
    "type": "endpoint-v2",
  },
  {
    "endpoint": {
      "method": "POST",
      "name": "Create",
      "path": {
        "parts": [
          {
            "type": "literal",
            "value": "/api/organization-providers/v3",
          },
          {
            "type": "literal",
            "value": "",
          },
        ],
      },
    },
    "indexSegmentId": "constant",
    "path": {
      "parts": [
        {
          "name": "API Reference",
          "urlSlug": "api-reference",
        },
        {
          "name": "organization-providers",
          "urlSlug": "organization-providers",
        },
        {
          "name": "v3",
          "urlSlug": "v-3",
        },
        {
          "name": "Create",
          "urlSlug": "create",
        },
      ],
    },
    "type": "endpoint-v2",
  },
  {
    "endpoint": {
      "method": "PATCH",
      "name": "Update",
      "path": {
        "parts": [
          {
            "type": "literal",
            "value": "/api/organization-providers/v3",
          },
          {
            "type": "literal",
            "value": "/",
          },
          {
            "type": "pathParameter",
            "value": "organization_provider_id",
          },
          {
            "type": "literal",
            "value": "",
          },
        ],
      },
    },
    "indexSegmentId": "constant",
    "path": {
      "parts": [
        {
          "name": "API Reference",
          "urlSlug": "api-reference",
        },
        {
          "name": "organization-providers",
          "urlSlug": "organization-providers",
        },
        {
          "name": "v3",
          "urlSlug": "v-3",
        },
        {
          "name": "Update",
          "urlSlug": "update",
        },
      ],
    },
    "type": "endpoint-v2",
  },
  {
    "endpoint": {
      "method": "GET",
      "name": "Get Actions",
      "path": {
        "parts": [
          {
            "type": "literal",
            "value": "/api/tasks/v3",
          },
          {
            "type": "literal",
            "value": "/",
          },
          {
            "type": "pathParameter",
            "value": "task_id",
          },
          {
            "type": "literal",
            "value": "/actions",
          },
        ],
      },
    },
    "indexSegmentId": "constant",
    "path": {
      "parts": [
        {
          "name": "API Reference",
          "urlSlug": "api-reference",
        },
        {
          "name": "tasks",
          "urlSlug": "tasks",
        },
        {
          "name": "Get Actions",
          "urlSlug": "get-actions",
        },
      ],
    },
    "type": "endpoint-v2",
  },
  {
    "endpoint": {
      "method": "POST",
      "name": "Create billing note",
      "path": {
        "parts": [
          {
            "type": "literal",
            "value": "/api/billing_notes/v2",
          },
          {
            "type": "literal",
            "value": "",
          },
        ],
      },
    },
    "indexSegmentId": "constant",
    "path": {
      "parts": [
        {
          "name": "API Reference",
          "urlSlug": "api-reference",
        },
        {
          "name": "billing-notes",
          "urlSlug": "billing-notes",
        },
        {
          "name": "Create billing note",
          "urlSlug": "create",
        },
      ],
    },
    "type": "endpoint-v2",
  },
  {
    "endpoint": {
      "method": "GET",
      "name": "Get payer",
      "path": {
        "parts": [
          {
            "type": "literal",
            "value": "/api/payers/v3",
          },
          {
            "type": "literal",
            "value": "/",
          },
          {
            "type": "pathParameter",
            "value": "payer_uuid",
          },
          {
            "type": "literal",
            "value": "",
          },
        ],
      },
    },
    "indexSegmentId": "constant",
    "path": {
      "parts": [
        {
          "name": "API Reference",
          "urlSlug": "api-reference",
        },
        {
          "name": "payers",
          "urlSlug": "payers",
        },
        {
          "name": "Get payer",
          "urlSlug": "get",
        },
      ],
    },
    "type": "endpoint-v2",
  },
  {
    "endpoint": {
      "method": "GET",
      "name": "Get all payers",
      "path": {
        "parts": [
          {
            "type": "literal",
            "value": "/api/payers/v3",
          },
          {
            "type": "literal",
            "value": "",
          },
        ],
      },
    },
    "indexSegmentId": "constant",
    "path": {
      "parts": [
        {
          "name": "API Reference",
          "urlSlug": "api-reference",
        },
        {
          "name": "payers",
          "urlSlug": "payers",
        },
        {
          "name": "Get all payers",
          "urlSlug": "get-all",
        },
      ],
    },
    "type": "endpoint-v2",
  },
]
`;

exports[`generateAlgoliaSearchRecordsForDocs > {"name":"primer"} 1`] = `
[
  {
    "breadcrumbs": [
      {
        "slug": "introduction/getting-started",
        "title": "Getting Started",
      },
    ],
    "content": "The Primer API is used to manage Client Sessions, Payments and saved payment methods.
All other actions are either managed in the Universal Checkout implementation or in the Dashboard.

Check out:

- [Client Sessions](https://primer.io/docs/payments/universal-checkout/manage-client-sessions)
- [Universal Checkout](https://primer.io/docs/accept-payments/setup-universal-checkout/installation/web)
- [Managing Payments](https://primer.io/docs/accept-payments/manage-payments)

Test the APIs yourself in our API Reference. Don't hesitate to reach out with any questions or feedback. You can email Primer directly at [support@primer.io](support@primer.io), or contact your Primer account manager.",
    "indexSegmentId": "v2.2-constant",
    "slug": "introduction/getting-started",
    "title": "Getting Started",
    "type": "markdown-section-v1",
  },
  {
    "breadcrumbs": [
      {
        "slug": "introduction/getting-started",
        "title": "Getting Started",
      },
      {
        "slug": "introduction/getting-started#api-endpoint-deployments",
        "title": "API Endpoint Deployments",
      },
    ],
    "content": "- Sandbox: [https://api.sandbox.primer.io](https://api.sandbox.primer.io)
- Production: [https://api.primer.io](https://api.primer.io)",
    "indexSegmentId": "v2.2-constant",
    "slug": "introduction/getting-started#api-endpoint-deployments",
    "title": "API Endpoint Deployments",
    "type": "markdown-section-v1",
  },
  {
    "breadcrumbs": [
      {
        "slug": "introduction/getting-started",
        "title": "Getting Started",
      },
      {
        "slug": "introduction/getting-started#api-versions",
        "title": "API Versions",
      },
    ],
    "content": "Primer makes updates to the APIs on a regular basis, as we release new features. To allow you to update your integration as you are ready, we allow for a \`X-Api-Version\` header to be passed on all API requests.

If you omit the version header, your request will default to the earliest supported version of the API.

\`\`\`bash
curl -X POST 'https://api.primer.io/' \\
--header 'X-Api-Version: 2.2'
\`\`\`",
    "indexSegmentId": "v2.2-constant",
    "slug": "introduction/getting-started#api-versions",
    "title": "API Versions",
    "type": "markdown-section-v1",
  },
  {
    "breadcrumbs": [
      {
        "slug": "introduction/getting-started",
        "title": "Getting Started",
      },
      {
        "slug": "introduction/getting-started#api-versions",
        "title": "API Versions",
      },
      {
        "slug": "introduction/getting-started#available-versions",
        "title": "Available Versions",
      },
    ],
    "content": "Read about the available versions of the APIs below on our [Changelog](https://apiref.primer.io/changelog).",
    "indexSegmentId": "v2.2-constant",
    "slug": "introduction/getting-started#available-versions",
    "title": "Available Versions",
    "type": "markdown-section-v1",
  },
  {
    "breadcrumbs": [],
    "description": "The Primer API is used to manage Client Sessions, Payments and saved payment methods.
All other actions are either managed in the Universal Checkout implementation or in the Dashboard.

Check out:

- [Client Sessions](https://primer.io/docs/payments/universal-checkout/manage-client-sessions)
- [Universal Checkout](https://primer.io/docs/accept-payments/setup-universal-checkout/installation/web)
- [Managing Payments](https://primer.io/docs/accept-payments/manage-payments)

Test the APIs yourself in our API Reference. Don't hesitate to reach out with any questions or feedback. You can email Primer directly at [support@primer.io](support@primer.io), or contact your Primer account manager.

",
    "indexSegmentId": "v2.2-constant",
    "slug": "introduction/getting-started",
    "title": "Getting Started",
    "type": "page-v4",
    "version": {
      "id": "v2.2",
      "slug": "v-2-2",
    },
  },
  {
    "content": "The Primer API is used to manage Client Sessions, Payments and saved payment methods. All other actions are either managed in the
Universal Checkout implementation or in the Dashboard.

Check out:

 * Client Sessions [https://primer.io/docs/payments/universal-checkout/manage-client-sessions]
 * Universal Checkout [https://primer.io/docs/accept-payments/setup-universal-checkout/installation/web]
 * Managing Payments [https://primer.io/docs/accept-payments/manage-payments]

Test the APIs yourself in our API Reference. Don't hesitate to reach out with any questions or feedback. You can email Primer
directly at support@primer.io [support@primer.io], or contact your Primer account manager.


API ENDPOINT DEPLOYMENTS

 * Sandbox: https://api.sandbox.primer.io [https://api.sandbox.primer.io]
 * Production: https://api.primer.io [https://api.primer.io]


API VERSIONS

Primer makes updates to the APIs on a regular basis, as we release new features. To allow you to update your integration as you
are ready, we allow for a X-Api-Version header to be passed on all API requests.

If you omit the version header, your request will default to the earliest supported version of the API.

curl -X POST 'https://api.primer.io/<ENDPOINT>' \\
  --header 'X-Api-Version: 2.2'



AVAILABLE VERSIONS

Read about the available versions of the APIs below on our Changelog [https://apiref.primer.io/changelog].",
    "indexSegmentId": "v2.2-constant",
    "path": {
      "parts": [
        {
          "name": "Introduction",
          "urlSlug": "introduction",
        },
        {
          "name": "Getting Started",
          "urlSlug": "getting-started",
        },
      ],
    },
    "title": "Getting Started",
    "type": "page-v2",
    "version": {
      "id": "v2.2",
      "urlSlug": "v-2-2",
    },
  },
  {
    "breadcrumbs": [
      {
        "slug": "introduction/authentication",
        "title": "Authentication",
      },
    ],
    "content": "Primer uses API keys to authenticate requests. You can manage API keys in the [Developers](https://sandbox-dashboard.primer.io/developers) area of the dashboard.

As API keys carry many privileges such as _authorizing_ payments, it is important to keep them **private** and **secure**. Do not hardcode or share API keys (particularly in your source version control system), and they should only be used in your backend.

Authentication is handled via HTTP headers, specifically the \`X-Api-Key\` header.

\`\`\`bash
curl -X POST 'https://api.primer.io/' \\
--header 'X-Api-Key: '
\`\`\`",
    "indexSegmentId": "v2.2-constant",
    "slug": "introduction/authentication",
    "title": "Authentication",
    "type": "markdown-section-v1",
  },
  {
    "breadcrumbs": [
      {
        "slug": "introduction/authentication",
        "title": "Authentication",
      },
      {
        "slug": "introduction/authentication#managing-api-keys",
        "title": "Managing API Keys",
      },
    ],
    "content": "Head up to the [Developers area](https://sandbox-dashboard.primer.io/developers) on the dashboard to manage your API keys.

You will be able to generate or revoke API keys and edit their respective scopes. Be aware that any changes to existing API keys will be reflected immediately and could cause unwanted side effects.",
    "indexSegmentId": "v2.2-constant",
    "slug": "introduction/authentication#managing-api-keys",
    "title": "Managing API Keys",
    "type": "markdown-section-v1",
  },
  {
    "breadcrumbs": [
      {
        "slug": "introduction/authentication",
        "title": "Authentication",
      },
      {
        "slug": "introduction/authentication#available-scopes",
        "title": "Available scopes",
      },
    ],
    "content": "| Scope                         | Description                                                                                                                                                                           |
| ----------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| \`client_tokens:write\`         | Create client tokens for use with the client SDK.                                                                                                                                     |
| \`third_party:webhook_trigger\` | Allows you to post to our webhooks endpoint. API keys with this scope can be used to enable communication between your processor and Primer about important payment lifecycle events. |
| \`transactions:authorize\`      | Authorize a payment                                                                                                                                                                   |
| \`transactions:cancel\`         | Cancel a payment.                                                                                                                                                                     |
| \`transactions:capture\`        | Submit a payment for settlement.                                                                                                                                                      |
| \`transactions:retrieve\`       | Retrieve one or more payments.                                                                                                                                                        |
| \`transactions:refund\`         | Refund a payment.                                                                                                                                                                     |
| \`payment_instrument:read\`     | Read stored payment methods.                                                                                                                                                          |
| \`payment_instrument:write\`    | Write stored payment methods.                                                                                                                                                         |",
    "indexSegmentId": "v2.2-constant",
    "slug": "introduction/authentication#available-scopes",
    "title": "Available scopes",
    "type": "markdown-section-v1",
  },
  {
    "breadcrumbs": [],
    "description": "Primer uses API keys to authenticate requests. You can manage API keys in the [Developers](https://sandbox-dashboard.primer.io/developers) area of the dashboard.

As API keys carry many privileges such as _authorizing_ payments, it is important to keep them **private** and **secure**. Do not hardcode or share API keys (particularly in your source version control system), and they should only be used in your backend.

Authentication is handled via HTTP headers, specifically the \`X-Api-Key\` header.

\`\`\`bash
curl -X POST 'https://api.primer.io/<ENDPOINT>' \\
--header 'X-Api-Key: <YOUR_API_KEY>'
\`\`\`

",
    "indexSegmentId": "v2.2-constant",
    "slug": "introduction/authentication",
    "title": "Authentication",
    "type": "page-v4",
    "version": {
      "id": "v2.2",
      "slug": "v-2-2",
    },
  },
  {
    "content": "Primer uses API keys to authenticate requests. You can manage API keys in the Developers
[https://sandbox-dashboard.primer.io/developers] area of the dashboard.

As API keys carry many privileges such as authorizing payments, it is important to keep them private and secure. Do not hardcode
or share API keys (particularly in your source version control system), and they should only be used in your backend.

Authentication is handled via HTTP headers, specifically the X-Api-Key header.

curl -X POST 'https://api.primer.io/<ENDPOINT>' \\
  --header 'X-Api-Key: <YOUR_API_KEY>'



MANAGING API KEYS

Head up to the Developers area [https://sandbox-dashboard.primer.io/developers] on the dashboard to manage your API keys.

You will be able to generate or revoke API keys and edit their respective scopes. Be aware that any changes to existing API keys
will be reflected immediately and could cause unwanted side effects.


AVAILABLE SCOPES

Scope Description client_tokens:write Create client tokens for use with the client SDK. third_party:webhook_trigger Allows you to
post to our webhooks endpoint. API keys with this scope can be used to enable communication between your processor and Primer
about important payment lifecycle events. transactions:authorize Authorize a payment transactions:cancel Cancel a payment.
transactions:capture Submit a payment for settlement. transactions:retrieve Retrieve one or more payments. transactions:refund
Refund a payment. payment_instrument:read Read stored payment methods. payment_instrument:write Write stored payment methods.",
    "indexSegmentId": "v2.2-constant",
    "path": {
      "parts": [
        {
          "name": "Introduction",
          "urlSlug": "introduction",
        },
        {
          "name": "Authentication",
          "urlSlug": "authentication",
        },
      ],
    },
    "title": "Authentication",
    "type": "page-v2",
    "version": {
      "id": "v2.2",
      "urlSlug": "v-2-2",
    },
  },
  {
    "breadcrumbs": [
      {
        "slug": "introduction/api-responses",
        "title": "API Responses",
      },
      {
        "slug": "introduction/api-responses#status-codes",
        "title": "Status Codes",
      },
    ],
    "content": "The following table summarizes the HTTP response codes you may receive from
the Primer REST API.

| Status Code | Description             |
| ----------- | ----------------------- |
| \`200\`       | Success                 |
| \`400\`       | Bad Request             |
| \`401\`       | Unauthorized            |
| \`403\`       | Forbidden               |
| \`404\`       | Entity Not Found        |
| \`409\`       | Entity Already Exists   |
| \`422\`       | Input Validation Failed |",
    "indexSegmentId": "v2.2-constant",
    "slug": "introduction/api-responses#status-codes",
    "title": "Status Codes",
    "type": "markdown-section-v1",
  },
  {
    "breadcrumbs": [
      {
        "slug": "introduction/api-responses",
        "title": "API Responses",
      },
      {
        "slug": "introduction/api-responses#error-responses",
        "title": "Error Responses",
      },
    ],
    "content": "Primer uses conventional HTTP response codes to indicate the success or failure of an API request. HTTP codes in the \`2XX\` range indicate a successful request, whereas codes in the \`4XX\` range indicate a failed request usually due to invalid inputs or operations.

The format of the payload for all errors is common. When an unsuccessful request occurs, you will receive a payload in the following format:

\`\`\`json
{
"error": {
"errorId": "AnErrorId",
"description": "A human description of the error.",
"diagnosticsId": "1234567890",
"validationErrors": []
}
}
\`\`\`

All error payloads will be comprised of a unique \`errorId\` which you can use to identify the error, a human description \`description\`, and a \`diagnosticsId\` that you can quote when contacting the support team ([support@primer.io](mailto:support@primer.io)). In case of a badly formed request, Primer will also return additional \`validationErrors\`.",
    "indexSegmentId": "v2.2-constant",
    "slug": "introduction/api-responses#error-responses",
    "title": "Error Responses",
    "type": "markdown-section-v1",
  },
  {
    "breadcrumbs": [
      {
        "slug": "introduction/api-responses",
        "title": "API Responses",
      },
      {
        "slug": "introduction/api-responses#payment-status",
        "title": "Payment Status",
      },
    ],
    "content": "As the payments are created, processed, and finalised, they go through a number of states that you will get as an API response, through webhook notifications, and in the Dashboard. These states are used across all processors, as processor specific states are mapped to these. An additional message, in the field \`processorMessage\`, from the processor may also be included that details the reason for the state, primarily on failure states.

| Status              | Description                                                                                                                                         |
| ------------------- | --------------------------------------------------------------------------------------------------------------------------------------------------- |
| \`PENDING\`           | The payment has been created by Primer but not yet authorized.                                                                                      |
| \`FAILED\`            | The processor failed to process this payment.                                                                                                       |
| \`AUTHORIZED\`        | The payment is authorized and awaiting capture.                                                                                                     |
| \`SETTLING\`          | The payment has been submitted for settlement and funds will be settled later.                                                                      |
| \`PARTIALLY_SETTLED\` | The payment has been partially settled.                                                                                                             |
| \`SETTLED\`           | Funds have been settled into your account.                                                                                                          |
| \`DECLINED\`          | This payment was declined by the processor, either at a gateway or acquirer level. See the reason object in your response payload for more details. |
| \`CANCELLED\`         | The payment was cancelled prior to it being settled.                                                                                                |

Don't hesitate to reach out with any questions or feedback. You can email Primer directly at [support@primer.io](mailto:support@primer.io), or contact your Primer account manager.",
    "indexSegmentId": "v2.2-constant",
    "slug": "introduction/api-responses#payment-status",
    "title": "Payment Status",
    "type": "markdown-section-v1",
  },
  {
    "breadcrumbs": [],
    "description": "",
    "indexSegmentId": "v2.2-constant",
    "slug": "introduction/api-responses",
    "title": "API Responses",
    "type": "page-v4",
    "version": {
      "id": "v2.2",
      "slug": "v-2-2",
    },
  },
  {
    "content": "STATUS CODES

The following table summarizes the HTTP response codes you may receive from the Primer REST API.

Status Code Description 200 Success 400 Bad Request 401 Unauthorized 403 Forbidden 404 Entity Not Found 409 Entity Already Exists
422 Input Validation Failed


ERROR RESPONSES

Primer uses conventional HTTP response codes to indicate the success or failure of an API request. HTTP codes in the 2XX range
indicate a successful request, whereas codes in the 4XX range indicate a failed request usually due to invalid inputs or
operations.

The format of the payload for all errors is common. When an unsuccessful request occurs, you will receive a payload in the
following format:

{
  "error": {
    "errorId": "AnErrorId",
    "description": "A human description of the error.",
    "diagnosticsId": "1234567890",
    "validationErrors": []
  }
}


All error payloads will be comprised of a unique errorId which you can use to identify the error, a human description description,
and a diagnosticsId that you can quote when contacting the support team (support@primer.io [support@primer.io]). In case of a
badly formed request, Primer will also return additional validationErrors.


PAYMENT STATUS

As the payments are created, processed, and finalised, they go through a number of states that you will get as an API response,
through webhook notifications, and in the Dashboard. These states are used across all processors, as processor specific states are
mapped to these. An additional message, in the field processorMessage, from the processor may also be included that details the
reason for the state, primarily on failure states.

Status Description PENDING The payment has been created by Primer but not yet authorized. FAILED The processor failed to process
this payment. AUTHORIZED The payment is authorized and awaiting capture. SETTLING The payment has been submitted for settlement
and funds will be settled later. PARTIALLY_SETTLED The payment has been partially settled. SETTLED Funds have been settled into
your account. DECLINED This payment was declined by the processor, either at a gateway or acquirer level. See the reason object in
your response payload for more details. CANCELLED The payment was cancelled prior to it being settled.

Don't hesitate to reach out with any questions or feedback. You can email Primer directly at support@primer.io
[support@primer.io], or contact your Primer account manager.",
    "indexSegmentId": "v2.2-constant",
    "path": {
      "parts": [
        {
          "name": "Introduction",
          "urlSlug": "introduction",
        },
        {
          "name": "API Responses",
          "urlSlug": "api-responses",
        },
      ],
    },
    "title": "API Responses",
    "type": "page-v2",
    "version": {
      "id": "v2.2",
      "urlSlug": "v-2-2",
    },
  },
  {
    "breadcrumbs": [
      {
        "slug": "introduction/idempotency-key",
        "title": "Idempotency Key",
      },
    ],
    "content": "Primer supports a request idempotency mechanism for our Payments API. This optional feature enables you to safely retry a request without risking the user being charged or refunded multiple times.

This is particularly useful when an API call fails due to the request being invalid, due to a network issue, or if Primer is momentarily unavailable.

If this is the case, make another request with the same idempotency key:

- If a request with the same idempotency key has already been successfully processed by Primer, the new request will be ignored. A \`400\` error will be returned with an \`errorId\` set to \`TransactionRequestIdempotencyKeyAlreadyExists\`.
- Otherwise, Primer will attempt to process the new request.

To make an idempotent request, generate an idempotency key and pass it to the header \`X-Idempotency-Key\`.

\`\`\`bash
curl -X POST 'https://api.primer.io/' \\
--header 'X-Idempotency-Key: '
\`\`\`

The way you generate the key is totally up to you, as long as it is unique per request attempt.

Keep in mind that a payment request resulting in a declined or failed payment is still considered _Successfully processed_ for the API. Therefore, if you want to allow the user to retry an unsuccessful payment, make sure to not use the same idempotency key.

As a such, don't use anything too restrictive like an \`orderId\` for the idempotency key as multiple payment attempts and refunds can be made for a single order.",
    "indexSegmentId": "v2.2-constant",
    "slug": "introduction/idempotency-key",
    "title": "Idempotency Key",
    "type": "markdown-section-v1",
  },
  {
    "breadcrumbs": [],
    "description": "Primer supports a request idempotency mechanism for our Payments API. This optional feature enables you to safely retry a request without risking the user being charged or refunded multiple times.

This is particularly useful when an API call fails due to the request being invalid, due to a network issue, or if Primer is momentarily unavailable.

If this is the case, make another request with the same idempotency key:

- If a request with the same idempotency key has already been successfully processed by Primer, the new request will be ignored. A \`400\` error will be returned with an \`errorId\` set to \`TransactionRequestIdempotencyKeyAlreadyExists\`.
- Otherwise, Primer will attempt to process the new request.

To make an idempotent request, generate an idempotency key and pass it to the header \`X-Idempotency-Key\`.

\`\`\`bash
curl -X POST 'https://api.primer.io/<ENDPOINT>' \\
--header 'X-Idempotency-Key: <idempotency-key>'
\`\`\`

The way you generate the key is totally up to you, as long as it is unique per request attempt.

Keep in mind that a payment request resulting in a declined or failed payment is still considered _Successfully processed_ for the API. Therefore, if you want to allow the user to retry an unsuccessful payment, make sure to not use the same idempotency key.

As a such, don't use anything too restrictive like an \`orderId\` for the idempotency key as multiple payment attempts and refunds can be made for a single order.

",
    "indexSegmentId": "v2.2-constant",
    "slug": "introduction/idempotency-key",
    "title": "Idempotency Key",
    "type": "page-v4",
    "version": {
      "id": "v2.2",
      "slug": "v-2-2",
    },
  },
  {
    "content": "Primer supports a request idempotency mechanism for our Payments API. This optional feature enables you to safely retry a request
without risking the user being charged or refunded multiple times.

This is particularly useful when an API call fails due to the request being invalid, due to a network issue, or if Primer is
momentarily unavailable.

If this is the case, make another request with the same idempotency key:

 * If a request with the same idempotency key has already been successfully processed by Primer, the new request will be ignored.
   A 400 error will be returned with an errorId set to TransactionRequestIdempotencyKeyAlreadyExists.
 * Otherwise, Primer will attempt to process the new request.

To make an idempotent request, generate an idempotency key and pass it to the header X-Idempotency-Key.

curl -X POST 'https://api.primer.io/<ENDPOINT>' \\
  --header 'X-Idempotency-Key: <idempotency-key>'


The way you generate the key is totally up to you, as long as it is unique per request attempt.

Keep in mind that a payment request resulting in a declined or failed payment is still considered Successfully processed for the
API. Therefore, if you want to allow the user to retry an unsuccessful payment, make sure to not use the same idempotency key.

As a such, don't use anything too restrictive like an orderId for the idempotency key as multiple payment attempts and refunds can
be made for a single order.",
    "indexSegmentId": "v2.2-constant",
    "path": {
      "parts": [
        {
          "name": "Introduction",
          "urlSlug": "introduction",
        },
        {
          "name": "Idempotency Key",
          "urlSlug": "idempotency-key",
        },
      ],
    },
    "title": "Idempotency Key",
    "type": "page-v2",
    "version": {
      "id": "v2.2",
      "urlSlug": "v-2-2",
    },
  },
  {
    "breadcrumbs": [
      {
        "slug": "introduction/loyalty-transactions",
        "title": "Loyalty Transactions",
      },
    ],
    "content": "Primer's Loyalty API provides an interface to interact with 3rd party loyalty point and service providers.

All of the endpoints below reference a \`connectionId\`. This is the unique Primer identifier for your loyalty provider connection. Primer will provide this once the loyalty provider connection is created.

To identify the customer in the context of the loyalty provider, a \`customerId\` is also necessary.",
    "indexSegmentId": "v2.2-constant",
    "slug": "introduction/loyalty-transactions",
    "title": "Loyalty Transactions",
    "type": "markdown-section-v1",
  },
  {
    "breadcrumbs": [
      {
        "slug": "introduction/loyalty-transactions",
        "title": "Loyalty Transactions",
      },
      {
        "slug": "introduction/loyalty-transactions#get-the-customer-balance",
        "title": "Get the customer balance",
      },
    ],
    "content": "Call the [Loyalty Customers](https://apiref.primer.io/reference/get_loyalty_customer) endpoint, which includes the customer's balance. In future this object could contain further details.",
    "indexSegmentId": "v2.2-constant",
    "slug": "introduction/loyalty-transactions#get-the-customer-balance",
    "title": "Get the customer balance",
    "type": "markdown-section-v1",
  },
  {
    "breadcrumbs": [
      {
        "slug": "introduction/loyalty-transactions",
        "title": "Loyalty Transactions",
      },
      {
        "slug": "introduction/loyalty-transactions#redeem-points",
        "title": "Redeem points",
      },
    ],
    "content": "Call the [Loyalty Transactions](https://apiref.primer.io/reference/post_loyalty_transaction) endpoint to create a \`REDEMPTION\` transaction.

Provide an \`orderId\` to link multiple transactions together.",
    "indexSegmentId": "v2.2-constant",
    "slug": "introduction/loyalty-transactions#redeem-points",
    "title": "Redeem points",
    "type": "markdown-section-v1",
  },
  {
    "breadcrumbs": [
      {
        "slug": "introduction/loyalty-transactions",
        "title": "Loyalty Transactions",
      },
      {
        "slug": "introduction/loyalty-transactions#refund-points",
        "title": "Refund points",
      },
    ],
    "content": "Call the [Loyalty Transactions](https://apiref.primer.io/reference/post_loyalty_transaction) endpoint to create a \`REFUND\` transaction. This transaction is completely independent from a redeem transaction.

Provide an \`orderId\` to link multiple transactions together.",
    "indexSegmentId": "v2.2-constant",
    "slug": "introduction/loyalty-transactions#refund-points",
    "title": "Refund points",
    "type": "markdown-section-v1",
  },
  {
    "breadcrumbs": [
      {
        "slug": "introduction/loyalty-transactions",
        "title": "Loyalty Transactions",
      },
      {
        "slug": "introduction/loyalty-transactions#get-a-list-of-transactions",
        "title": "Get a list of transactions",
      },
    ],
    "content": "Call the [Loyalty Transactions](https://apiref.primer.io/reference/get_loyalty_transaction) endpoint to retrieve a list of all your transactions. In most cases it makes sense to filter by \`connectionId\`. You can also filter by \`customerId\` or \`orderId\`.",
    "indexSegmentId": "v2.2-constant",
    "slug": "introduction/loyalty-transactions#get-a-list-of-transactions",
    "title": "Get a list of transactions",
    "type": "markdown-section-v1",
  },
  {
    "breadcrumbs": [],
    "description": "Primer's Loyalty API provides an interface to interact with 3rd party loyalty point and service providers.

All of the endpoints below reference a \`connectionId\`. This is the unique Primer identifier for your loyalty provider connection. Primer will provide this once the loyalty provider connection is created.

To identify the customer in the context of the loyalty provider, a \`customerId\` is also necessary.

",
    "indexSegmentId": "v2.2-constant",
    "slug": "introduction/loyalty-transactions",
    "title": "Loyalty Transactions",
    "type": "page-v4",
    "version": {
      "id": "v2.2",
      "slug": "v-2-2",
    },
  },
  {
    "content": "Primer's Loyalty API provides an interface to interact with 3rd party loyalty point and service providers.

All of the endpoints below reference a connectionId. This is the unique Primer identifier for your loyalty provider connection.
Primer will provide this once the loyalty provider connection is created.

To identify the customer in the context of the loyalty provider, a customerId is also necessary.


GET THE CUSTOMER BALANCE

Call the Loyalty Customers [https://apiref.primer.io/reference/get_loyalty_customer] endpoint, which includes the customer's
balance. In future this object could contain further details.


REDEEM POINTS

Call the Loyalty Transactions [https://apiref.primer.io/reference/post_loyalty_transaction] endpoint to create a REDEMPTION
transaction.

Provide an orderId to link multiple transactions together.


REFUND POINTS

Call the Loyalty Transactions [https://apiref.primer.io/reference/post_loyalty_transaction] endpoint to create a REFUND
transaction. This transaction is completely independent from a redeem transaction.

Provide an orderId to link multiple transactions together.


GET A LIST OF TRANSACTIONS

Call the Loyalty Transactions [https://apiref.primer.io/reference/get_loyalty_transaction] endpoint to retrieve a list of all your
transactions. In most cases it makes sense to filter by connectionId. You can also filter by customerId or orderId.",
    "indexSegmentId": "v2.2-constant",
    "path": {
      "parts": [
        {
          "name": "Introduction",
          "urlSlug": "introduction",
        },
        {
          "name": "Loyalty Transactions",
          "urlSlug": "loyalty-transactions",
        },
      ],
    },
    "title": "Loyalty Transactions",
    "type": "page-v2",
    "version": {
      "id": "v2.2",
      "urlSlug": "v-2-2",
    },
  },
  {
    "breadcrumbs": [
      {
        "slug": "changelog/api-migration-guide",
        "title": "API Migration Guide",
      },
    ],
    "content": "We are continually introducing new functionality to the Primer Ecosystem, some of which requires additional inputs on our APIs. To make sure these changes don’t break any existing integrations, we roll them out safely using API Versions.",
    "indexSegmentId": "v2.2-constant",
    "slug": "changelog/api-migration-guide",
    "title": "API Migration Guide",
    "type": "markdown-section-v1",
  },
  {
    "breadcrumbs": [
      {
        "slug": "changelog/api-migration-guide",
        "title": "API Migration Guide",
      },
      {
        "slug": "changelog/api-migration-guide#migrating-to-v-2-1",
        "title": "Migrating to v2.1",
      },
    ],
    "content": "The latest version of our APIs focus on capturing more details to enable a richer checkout experience. Some of these details are required to allow configuration of the checkout via the Primer Dashboard. Also some of these details are needed to work with advanced Payment Processors or Payment Methods.

The examples below only illustrate how to transition between the two versions of the endpoints, however you should read the latest API Reference linked above for details on the usage of the endpoints. Also read how to introduce API Versioning into your requests in the latest API Reference linked above.",
    "indexSegmentId": "v2.2-constant",
    "slug": "changelog/api-migration-guide#migrating-to-v-2-1",
    "title": "Migrating to v2.1",
    "type": "markdown-section-v1",
  },
  {
    "breadcrumbs": [
      {
        "slug": "changelog/api-migration-guide",
        "title": "API Migration Guide",
      },
      {
        "slug": "changelog/api-migration-guide#client-session",
        "title": "Client Session",
      },
    ],
    "content": "This is an example of a request in v1: \`POST /auth/client-token\`.

\`\`\`json
{
"customerCountryCode": "GB",
"customerId": "customer-123",
"checkout": {
"paymentFlow": "DEFAULT"
}
}
\`\`\`

This is an example of a equivalent request in v2: \`POST /client-session\` with \`X-Api-Version="2021-09-27"\`.

\`\`\`json
{
"customerId": "customer-123",
"customer": {
"emailAddress": "customer@primer.io",
"mobileNumber": "+44841234567",
"firstName": "John",
"lastName": "Doe",
"billingAddress": {
"addressLine1": "42A",
"postalCode": "abcde",
"city": "Cambridge",
"state": "Cambridgeshire",
"countryCode": "GB"
},
"shippingAddress": {
"addressLine1": "42A",
"postalCode": "abcde",
"city": "Cambridge",
"state": "Cambridgeshire",
"countryCode": "GB"
}
},
"order": {
"lineItems": [
{
"itemId": "item-1",
"description": "My item",
"amount": 1337,
"quantity": 1
}
],
"countryCode": "GB"
},
"currencyCode": "GBP",
"orderId": "order-123",
"metadata": {
"productType": "Merchandise"
},
"paymentMethod": {
"vaultOnSuccess": true
}
}
\`\`\`",
    "indexSegmentId": "v2.2-constant",
    "slug": "changelog/api-migration-guide#client-session",
    "title": "Client Session",
    "type": "markdown-section-v1",
  },
  {
    "breadcrumbs": [
      {
        "slug": "changelog/api-migration-guide",
        "title": "API Migration Guide",
      },
      {
        "slug": "changelog/api-migration-guide#client-session",
        "title": "Client Session",
      },
      {
        "slug": "changelog/api-migration-guide#v-2-1",
        "title": "v2.1",
      },
    ],
    "content": "This is an example of a equivalent request in v2.1: \`POST /client-session\` with \`X-Api-Version="2.1"\`.

\`\`\`json
{
"customerId": "customer-123",
"customer": {
"emailAddress": "customer@primer.io",
"mobileNumber": "+44841234567",
"firstName": "John",
"lastName": "Doe",
"billingAddress": {
"addressLine1": "42A",
"postalCode": "abcde",
"city": "Cambridge",
"state": "Cambridgeshire",
"countryCode": "GB"
},
"shippingAddress": {
"addressLine1": "42A",
"postalCode": "abcde",
"city": "Cambridge",
"state": "Cambridgeshire",
"countryCode": "GB"
}
},
"lineItems": [
{
"itemId": "item-1",
"description": "My item",
"amount": 1337,
"quantity": 1
}
],
"orderDetails": {
"countryCode": "GB"
},
"currencyCode": "GBP",
"orderId": "order-123",
"metadata": {
"productType": "Merchandise"
},
"paymentMethod": {
"vaultOnSuccess": true
}
}
\`\`\`",
    "indexSegmentId": "v2.2-constant",
    "slug": "changelog/api-migration-guide#v-2-1",
    "title": "v2.1",
    "type": "markdown-section-v1",
  },
  {
    "breadcrumbs": [
      {
        "slug": "changelog/api-migration-guide",
        "title": "API Migration Guide",
      },
      {
        "slug": "changelog/api-migration-guide#summary-of-the-v-2-1-changes",
        "title": "Summary of the v2.1 changes",
      },
    ],
    "content": "- \`order\` is now called \`orderDetails\`
- \`lineItems\` is now a top-level element
- \`amount\` has been removed. You should always specify \`lineItems\` and we would dynamically calculate the amount. See our [API Reference](https://apiref.primer.io/reference) for how we calculate the amount.",
    "indexSegmentId": "v2.2-constant",
    "slug": "changelog/api-migration-guide#summary-of-the-v-2-1-changes",
    "title": "Summary of the v2.1 changes",
    "type": "markdown-section-v1",
  },
  {
    "breadcrumbs": [
      {
        "slug": "changelog/api-migration-guide",
        "title": "API Migration Guide",
      },
      {
        "slug": "changelog/api-migration-guide#create-a-payment",
        "title": "Create a Payment",
      },
    ],
    "content": "This is an example of an equivalent request: \`POST /payments\` with \`X-Api-Version="2021-09-27"\`.

\`POST /payments\`

\`\`\`json
{
"orderId": "order-123",
"currencyCode": "GBP",
"amount": 1337,
"paymentInstrument": {
"token": "{{payment_method_token}}" // As received from the SDK
},
"statementDescriptor": "Test payment",
"customer": {
"email": "customer@primer.io",
"billingAddress": {
"addressLine1": "42A",
"postalCode": "abcde",
"city": "Cambridge",
"state": "Cambridgeshire",
"countryCode": "GB"
}
}
}
\`\`\`

This is an example of an equivalent request in v2: \`POST /payments\` with \`X-Api-Version="2021-09-27"\`.

\`\`\`json
{
"orderId": "order-123",
"amount": 1000,
"currencyCode": "GBP",
"customer": {
"email": "customer@primer.io",
"billingAddress": {
"addressLine1": "42A",
"postalCode": "abcde",
"city": "Cambridge",
"state": "Cambridgeshire",
"countryCode": "GB"
}
},
"metadata": {
"productType": "Merchandise"
},
"paymentMethodToken": "{{payment_method_token}}", // As received from the SDK
"paymentMethod": {
"descriptor": "Test payment",
"paymentType": "FIRST_PAYMENT"
}
}
\`\`\`

This is an example of an equivalent request in v2.1: \`POST /payments\` with \`X-Api-Version="2.1"\`

\`\`\`json
{
"paymentMethodToken": "{{payment_method_token}}" // As received from the SDK
}
\`\`\`

OR

\`\`\`json
{
"orderId": "order-123",
"amount": 1337,
"currencyCode": "GBP",
"customer": {
"email": "customer@primer.io",
"billingAddress": {
"addressLine1": "42A",
"postalCode": "abcde",
"city": "Cambridge",
"state": "Cambridgeshire",
"countryCode": "GB"
}
},
"lineItems": [
{
"itemId": "item-1",
"description": "My item",
"amount": 1337,
"quantity": 1
}
],
"orderDetails": {
"countryCode": "GB"
},
"metadata": {
"productType": "Merchandise"
},
"paymentMethodToken": "{{payment_method_token}}", // As received from the SDK
"paymentMethod": {
"descriptor": "Test payment",
"paymentType": "FIRST_PAYMENT"
}
}
\`\`\`",
    "indexSegmentId": "v2.2-constant",
    "slug": "changelog/api-migration-guide#create-a-payment",
    "title": "Create a Payment",
    "type": "markdown-section-v1",
  },
  {
    "breadcrumbs": [
      {
        "slug": "changelog/api-migration-guide",
        "title": "API Migration Guide",
      },
      {
        "slug": "changelog/api-migration-guide#summary-of-the-v-2-1-changes",
        "title": "Summary of the v2.1 changes",
      },
    ],
    "content": "- \`order\` is now called \`orderDetails\`
- \`lineItems\` is now a top-level element",
    "indexSegmentId": "v2.2-constant",
    "slug": "changelog/api-migration-guide#summary-of-the-v-2-1-changes",
    "title": "Summary of the v2.1 changes",
    "type": "markdown-section-v1",
  },
  {
    "breadcrumbs": [],
    "description": "We are continually introducing new functionality to the Primer Ecosystem, some of which requires additional inputs on our APIs. To make sure these changes don’t break any existing integrations, we roll them out safely using API Versions.

",
    "indexSegmentId": "v2.2-constant",
    "slug": "changelog/api-migration-guide",
    "title": "API Migration Guide",
    "type": "page-v4",
    "version": {
      "id": "v2.2",
      "slug": "v-2-2",
    },
  },
  {
    "content": "We are continually introducing new functionality to the Primer Ecosystem, some of which requires additional inputs on our APIs. To
make sure these changes don’t break any existing integrations, we roll them out safely using API Versions.


MIGRATING TO V2.1

The latest version of our APIs focus on capturing more details to enable a richer checkout experience. Some of these details are
required to allow configuration of the checkout via the Primer Dashboard. Also some of these details are needed to work with
advanced Payment Processors or Payment Methods.

The examples below only illustrate how to transition between the two versions of the endpoints, however you should read the latest
API Reference linked above for details on the usage of the endpoints. Also read how to introduce API Versioning into your requests
in the latest API Reference linked above.


CLIENT SESSION

This is an example of a request in v1: POST /auth/client-token.

{
  "customerCountryCode": "GB",
  "customerId": "customer-123",
  "checkout": {
    "paymentFlow": "DEFAULT"
  }
}


This is an example of a equivalent request in v2: POST /client-session with X-Api-Version="2021-09-27".

{
  "customerId": "customer-123",
  "customer": {
    "emailAddress": "customer@primer.io",
    "mobileNumber": "+44841234567",
    "firstName": "John",
    "lastName": "Doe",
    "billingAddress": {
      "addressLine1": "42A",
      "postalCode": "abcde",
      "city": "Cambridge",
      "state": "Cambridgeshire",
      "countryCode": "GB"
    },
    "shippingAddress": {
      "addressLine1": "42A",
      "postalCode": "abcde",
      "city": "Cambridge",
      "state": "Cambridgeshire",
      "countryCode": "GB"
    }
  },
  "order": {
    "lineItems": [
      {
        "itemId": "item-1",
        "description": "My item",
        "amount": 1337,
        "quantity": 1
      }
    ],
    "countryCode": "GB"
  },
  "currencyCode": "GBP",
  "orderId": "order-123",
  "metadata": {
    "productType": "Merchandise"
  },
  "paymentMethod": {
    "vaultOnSuccess": true
  }
}



V2.1

This is an example of a equivalent request in v2.1: POST /client-session with X-Api-Version="2.1".

{
  "customerId": "customer-123",
  "customer": {
    "emailAddress": "customer@primer.io",
    "mobileNumber": "+44841234567",
    "firstName": "John",
    "lastName": "Doe",
    "billingAddress": {
      "addressLine1": "42A",
      "postalCode": "abcde",
      "city": "Cambridge",
      "state": "Cambridgeshire",
      "countryCode": "GB"
    },
    "shippingAddress": {
      "addressLine1": "42A",
      "postalCode": "abcde",
      "city": "Cambridge",
      "state": "Cambridgeshire",
      "countryCode": "GB"
    }
  },
  "lineItems": [
    {
      "itemId": "item-1",
      "description": "My item",
      "amount": 1337,
      "quantity": 1
    }
  ],
  "orderDetails": {
    "countryCode": "GB"
  },
  "currencyCode": "GBP",
  "orderId": "order-123",
  "metadata": {
    "productType": "Merchandise"
  },
  "paymentMethod": {
    "vaultOnSuccess": true
  }
}



SUMMARY OF THE V2.1 CHANGES

 * order is now called orderDetails
 * lineItems is now a top-level element
 * amount has been removed. You should always specify lineItems and we would dynamically calculate the amount. See our API
   Reference [https://apiref.primer.io/reference] for how we calculate the amount.


CREATE A PAYMENT

This is an example of an equivalent request: POST /payments with X-Api-Version="2021-09-27".

POST /payments

{
  "orderId": "order-123",
  "currencyCode": "GBP",
  "amount": 1337,
  "paymentInstrument": {
    "token": "{{payment_method_token}}" // As received from the SDK
  },
  "statementDescriptor": "Test payment",
  "customer": {
    "email": "customer@primer.io",
    "billingAddress": {
      "addressLine1": "42A",
      "postalCode": "abcde",
      "city": "Cambridge",
      "state": "Cambridgeshire",
      "countryCode": "GB"
    }
  }
}


This is an example of an equivalent request in v2: POST /payments with X-Api-Version="2021-09-27".

{
  "orderId": "order-123",
  "amount": 1000,
  "currencyCode": "GBP",
  "customer": {
    "email": "customer@primer.io",
    "billingAddress": {
      "addressLine1": "42A",
      "postalCode": "abcde",
      "city": "Cambridge",
      "state": "Cambridgeshire",
      "countryCode": "GB"
    }
  },
  "metadata": {
    "productType": "Merchandise"
  },
  "paymentMethodToken": "{{payment_method_token}}", // As received from the SDK
  "paymentMethod": {
    "descriptor": "Test payment",
    "paymentType": "FIRST_PAYMENT"
  }
}


This is an example of an equivalent request in v2.1: POST /payments with X-Api-Version="2.1"

{
  "paymentMethodToken": "{{payment_method_token}}" // As received from the SDK
}


OR

{
  "orderId": "order-123",
  "amount": 1337,
  "currencyCode": "GBP",
  "customer": {
    "email": "customer@primer.io",
    "billingAddress": {
      "addressLine1": "42A",
      "postalCode": "abcde",
      "city": "Cambridge",
      "state": "Cambridgeshire",
      "countryCode": "GB"
    }
  },
  "lineItems": [
    {
      "itemId": "item-1",
      "description": "My item",
      "amount": 1337,
      "quantity": 1
    }
  ],
  "orderDetails": {
    "countryCode": "GB"
  },
  "metadata": {
    "productType": "Merchandise"
  },
  "paymentMethodToken": "{{payment_method_token}}", // As received from the SDK
  "paymentMethod": {
    "descriptor": "Test payment",
    "paymentType": "FIRST_PAYMENT"
  }
}



SUMMARY OF THE V2.1 CHANGES

 * order is now called orderDetails
 * lineItems is now a top-level element",
    "indexSegmentId": "v2.2-constant",
    "path": {
      "parts": [
        {
          "name": "Changelog",
          "urlSlug": "changelog",
        },
        {
          "name": "API Migration Guide",
          "urlSlug": "api-migration-guide",
        },
      ],
    },
    "title": "API Migration Guide",
    "type": "page-v2",
    "version": {
      "id": "v2.2",
      "urlSlug": "v-2-2",
    },
  },
  {
    "breadcrumbs": [
      {
        "slug": "changelog/api-v-2-2",
        "title": "API v2.2",
      },
    ],
    "content": "This version includes improvements to the Client Session API, Payments API and the Payment Methods API.
You must set the \`X-Api-Version\` header to \`2.2\` to use v2.2 of the API.",
    "indexSegmentId": "v2.2-constant",
    "slug": "changelog/api-v-2-2",
    "title": "API v2.2",
    "type": "markdown-section-v1",
  },
  {
    "breadcrumbs": [
      {
        "slug": "changelog/api-v-2-2",
        "title": "API v2.2",
      },
      {
        "slug": "changelog/api-v-2-2#client-session-api",
        "title": "Client Session API",
      },
    ],
    "content": "- Added \`order.lineItems.productData\` on the request and response",
    "indexSegmentId": "v2.2-constant",
    "slug": "changelog/api-v-2-2#client-session-api",
    "title": "Client Session API",
    "type": "markdown-section-v1",
  },
  {
    "breadcrumbs": [
      {
        "slug": "changelog/api-v-2-2",
        "title": "API v2.2",
      },
      {
        "slug": "changelog/api-v-2-2#payments-api",
        "title": "Payments API",
      },
    ],
    "content": "- Added \`order.lineItems.productData\` on the request and response",
    "indexSegmentId": "v2.2-constant",
    "slug": "changelog/api-v-2-2#payments-api",
    "title": "Payments API",
    "type": "markdown-section-v1",
  },
  {
    "breadcrumbs": [],
    "description": "This version includes improvements to the Client Session API, Payments API and the Payment Methods API.
You must set the \`X-Api-Version\` header to \`2.2\` to use v2.2 of the API.

",
    "indexSegmentId": "v2.2-constant",
    "slug": "changelog/api-v-2-2",
    "title": "API v2.2",
    "type": "page-v4",
    "version": {
      "id": "v2.2",
      "slug": "v-2-2",
    },
  },
  {
    "content": "This version includes improvements to the Client Session API, Payments API and the Payment Methods API. You must set the
X-Api-Version header to 2.2 to use v2.2 of the API.


CLIENT SESSION API

 * Added order.lineItems.productData on the request and response


PAYMENTS API

 * Added order.lineItems.productData on the request and response",
    "indexSegmentId": "v2.2-constant",
    "path": {
      "parts": [
        {
          "name": "Changelog",
          "urlSlug": "changelog",
        },
        {
          "name": "API v2.2",
          "urlSlug": "api-v-2-2",
        },
      ],
    },
    "title": "API v2.2",
    "type": "page-v2",
    "version": {
      "id": "v2.2",
      "urlSlug": "v-2-2",
    },
  },
  {
    "breadcrumbs": [
      {
        "slug": "changelog/api-v-2-1",
        "title": "API v2.1",
      },
    ],
    "content": "Version 2.1 includes improvements to the Client Session API, Payments API and the Payment Methods API.

Starting API v2.1, the API Version X-Api-Version is a semantic version without a patch (e.g. 2.1) rather than a date 🎉
Set the \`X-Api-Version\` header to \`2.1\` to use v2.1 of the API.",
    "indexSegmentId": "v2.2-constant",
    "slug": "changelog/api-v-2-1",
    "title": "API v2.1",
    "type": "markdown-section-v1",
  },
  {
    "breadcrumbs": [
      {
        "slug": "changelog/api-v-2-1",
        "title": "API v2.1",
      },
      {
        "slug": "changelog/api-v-2-1#client-session-api",
        "title": "Client Session API",
      },
    ],
    "content": "- Added \`paymentMethod.paymentType\` and \`paymentMethod.descriptor\` on the request and response of the client session
- Added \`order.lineItems[].productType\` on the request and response of the client session
- Added \`GET /client-session\` to get the content of a client session
- Added \`PATCH /client-session\` to update the content of a client session
- Additional validation has been put in place to ensure that a \`currencyCode\` is always passed if any \`amount\` value is passed",
    "indexSegmentId": "v2.2-constant",
    "slug": "changelog/api-v-2-1#client-session-api",
    "title": "Client Session API",
    "type": "markdown-section-v1",
  },
  {
    "breadcrumbs": [
      {
        "slug": "changelog/api-v-2-1",
        "title": "API v2.1",
      },
      {
        "slug": "changelog/api-v-2-1#payments-api",
        "title": "Payments API",
      },
    ],
    "content": "- Added \`paymentMethod.isVaulted\` boolean field to indicate whether the \`paymentMethod.paymentMethodToken\` in the response is a vaulted token (and can therefore be used for future payments) or not. This replaces \`vaultedPaymentMethodToken\`.
- Added \`order.lineItems[].productType\` on the request and response
- \`amount\`, \`currencyCode\`, \`customerId\` and \`orderId\` are now required fields when making a payment with a vaulted token (i.e. a recurring payment).
- When paying with a vaulted token, additional validation has been put in place to ensure the \`customerId\` matches the \`customerId\` associated with the vaulted token.",
    "indexSegmentId": "v2.2-constant",
    "slug": "changelog/api-v-2-1#payments-api",
    "title": "Payments API",
    "type": "markdown-section-v1",
  },
  {
    "breadcrumbs": [
      {
        "slug": "changelog/api-v-2-1",
        "title": "API v2.1",
      },
      {
        "slug": "changelog/api-v-2-1#payment-methods-api",
        "title": "Payment Methods API",
      },
    ],
    "content": "- Added verify in \`POST /payment-instruments/{paymentMethodToken}/vault\` to set whether or not the payment method token should be verified before vaulting
- Added \`isVerified\` to the payment method response",
    "indexSegmentId": "v2.2-constant",
    "slug": "changelog/api-v-2-1#payment-methods-api",
    "title": "Payment Methods API",
    "type": "markdown-section-v1",
  },
  {
    "breadcrumbs": [],
    "description": "Version 2.1 includes improvements to the Client Session API, Payments API and the Payment Methods API.

Starting API v2.1, the API Version X-Api-Version is a semantic version without a patch (e.g. 2.1) rather than a date 🎉
Set the \`X-Api-Version\` header to \`2.1\` to use v2.1 of the API.

",
    "indexSegmentId": "v2.2-constant",
    "slug": "changelog/api-v-2-1",
    "title": "API v2.1",
    "type": "page-v4",
    "version": {
      "id": "v2.2",
      "slug": "v-2-2",
    },
  },
  {
    "content": "Version 2.1 includes improvements to the Client Session API, Payments API and the Payment Methods API.

Starting API v2.1, the API Version X-Api-Version is a semantic version without a patch (e.g. 2.1) rather than a date 🎉 Set the
X-Api-Version header to 2.1 to use v2.1 of the API.


CLIENT SESSION API

 * Added paymentMethod.paymentType and paymentMethod.descriptor on the request and response of the client session
 * Added order.lineItems[].productType on the request and response of the client session
 * Added GET /client-session to get the content of a client session
 * Added PATCH /client-session to update the content of a client session
 * Additional validation has been put in place to ensure that a currencyCode is always passed if any amount value is passed


PAYMENTS API

 * Added paymentMethod.isVaulted boolean field to indicate whether the paymentMethod.paymentMethodToken in the response is a
   vaulted token (and can therefore be used for future payments) or not. This replaces vaultedPaymentMethodToken.
 * Added order.lineItems[].productType on the request and response
 * amount, currencyCode, customerId and orderId are now required fields when making a payment with a vaulted token (i.e. a
   recurring payment).
 * When paying with a vaulted token, additional validation has been put in place to ensure the customerId matches the customerId
   associated with the vaulted token.


PAYMENT METHODS API

 * Added verify in POST /payment-instruments/{paymentMethodToken}/vault to set whether or not the payment method token should be
   verified before vaulting
 * Added isVerified to the payment method response",
    "indexSegmentId": "v2.2-constant",
    "path": {
      "parts": [
        {
          "name": "Changelog",
          "urlSlug": "changelog",
        },
        {
          "name": "API v2.1",
          "urlSlug": "api-v-2-1",
        },
      ],
    },
    "title": "API v2.1",
    "type": "page-v2",
    "version": {
      "id": "v2.2",
      "urlSlug": "v-2-2",
    },
  },
  {
    "breadcrumbs": [
      {
        "slug": "changelog/api-v-2",
        "title": "API v2",
      },
    ],
    "content": "Version 2 includes improvements to the Client Session API and the Payments API.",
    "indexSegmentId": "v2.2-constant",
    "slug": "changelog/api-v-2",
    "title": "API v2",
    "type": "markdown-section-v1",
  },
  {
    "breadcrumbs": [
      {
        "slug": "changelog/api-v-2",
        "title": "API v2",
      },
      {
        "slug": "changelog/api-v-2#client-session-api",
        "title": "Client Session API",
      },
    ],
    "content": "- \`X-API-Version\` -> \`2021-09-27\`
- Creating a payment using *only* a payment method token is now possible. The \`order\`, \`customer\` and \`metadata\` passed on the Client Session request is then used for the payment.
- The create Client Session endpoint request was extended to include \`order\`, \`customer\`, etc.
- All references to \`paymentInstrument\` from the previous Payments API version have been refactored to \`paymentMethod\` to be more consistent throughout
- The customer \`billingAddress\` and \`shippingAddress\` fields are now all optional",
    "indexSegmentId": "v2.2-constant",
    "slug": "changelog/api-v-2#client-session-api",
    "title": "Client Session API",
    "type": "markdown-section-v1",
  },
  {
    "breadcrumbs": [
      {
        "slug": "changelog/api-v-2",
        "title": "API v2",
      },
      {
        "slug": "changelog/api-v-2#payments-api",
        "title": "Payments API",
      },
    ],
    "content": "- \`X-API-Version\` -> \`2021-09-27\`
- Creating a payment using *only* a payment method token is now possible. The \`order\`, \`customer\` and \`metadata\` passed on the Client Session request is then used for the payment.
- The create payment endpoint request was extended to include \`order\`, \`customer\`, etc. It now more closely resembles the \`/client-session\` endpoint
- The response of all the Payments API endpoints was refactored to match the create payment request structure
- All references to \`paymentInstrument\` from the previous Payments API version have been refactored to \`paymentMethod\` to be more consistent throughout
- All the payments API endpoints (create, capture, cancel, refund, etc.) are now versioned
- \`paymentMethodData\` in \`PaymentMethod\` responses (for card payment method types) all now contain a \`first6digits\` field in addition to the \`last4digits\` returned. This is an opt-in field, so it is \`null\` by default.
- The customer \`billingAddress\` and \`shippingAddress\` fields are now all optional",
    "indexSegmentId": "v2.2-constant",
    "slug": "changelog/api-v-2#payments-api",
    "title": "Payments API",
    "type": "markdown-section-v1",
  },
  {
    "breadcrumbs": [],
    "description": "Version 2 includes improvements to the Client Session API and the Payments API.

",
    "indexSegmentId": "v2.2-constant",
    "slug": "changelog/api-v-2",
    "title": "API v2",
    "type": "page-v4",
    "version": {
      "id": "v2.2",
      "slug": "v-2-2",
    },
  },
  {
    "content": "Version 2 includes improvements to the Client Session API and the Payments API.


CLIENT SESSION API

 * X-API-Version -> 2021-09-27
 * Creating a payment using only a payment method token is now possible. The order, customer and metadata passed on the Client
   Session request is then used for the payment.
 * The create Client Session endpoint request was extended to include order, customer, etc.
 * All references to paymentInstrument from the previous Payments API version have been refactored to paymentMethod to be more
   consistent throughout
 * The customer billingAddress and shippingAddress fields are now all optional


PAYMENTS API

 * X-API-Version -> 2021-09-27
 * Creating a payment using only a payment method token is now possible. The order, customer and metadata passed on the Client
   Session request is then used for the payment.
 * The create payment endpoint request was extended to include order, customer, etc. It now more closely resembles the
   /client-session endpoint
 * The response of all the Payments API endpoints was refactored to match the create payment request structure
 * All references to paymentInstrument from the previous Payments API version have been refactored to paymentMethod to be more
   consistent throughout
 * All the payments API endpoints (create, capture, cancel, refund, etc.) are now versioned
 * paymentMethodData in PaymentMethod responses (for card payment method types) all now contain a first6digits field in addition
   to the last4digits returned. This is an opt-in field, so it is null by default.
 * The customer billingAddress and shippingAddress fields are now all optional",
    "indexSegmentId": "v2.2-constant",
    "path": {
      "parts": [
        {
          "name": "Changelog",
          "urlSlug": "changelog",
        },
        {
          "name": "API v2",
          "urlSlug": "api-v-2",
        },
      ],
    },
    "title": "API v2",
    "type": "page-v2",
    "version": {
      "id": "v2.2",
      "urlSlug": "v-2-2",
    },
  },
  {
    "endpoint": {
      "description": "This API call retrieves all the details associated with the client session corresponding to the client token that is provided in
the request. The fields with empty values are excluded from the response.",
      "method": "GET",
      "name": "Retrieve a client session",
      "path": {
        "parts": [
          {
            "type": "literal",
            "value": "",
          },
          {
            "type": "literal",
            "value": "/client-session",
          },
        ],
      },
    },
    "indexSegmentId": "v2.2-constant",
    "path": {
      "parts": [
        {
          "name": "Primer API",
          "urlSlug": "primer-api",
        },
        {
          "name": "Client Session API",
          "urlSlug": "client-session-api",
        },
        {
          "name": "Retrieve a client session",
          "urlSlug": "retrieve-client-side-token",
        },
      ],
    },
    "type": "endpoint-v2",
    "version": {
      "id": "v2.2",
      "urlSlug": "v-2-2",
    },
  },
  {
    "endpoint": {
      "description": "Creating a client session generates a client token: a temporary key used to initialize Universal Checkout
[https://primer.io/docs/accept-payments/setup-universal-checkout/installation/web] and authenticate it against your account.

Universal Checkout automatically retrieves all the settings from the client session and the Dashboard to configure the payment
methods and the checkout experience.

Note: When creating a Client Session, please make sure to provide currencyCode, orderId, and at least one of amount or lineItems.
If any of these are not yet available, you can provide them w hen making the payment request.

POST /client-session does not have required fields as all fields are not always known when a client session is created. Use PATCH
/client-session to update the parameters throughout the checkout session.

Client tokens expire after 24 hours.",
      "method": "POST",
      "name": "Create a client session",
      "path": {
        "parts": [
          {
            "type": "literal",
            "value": "",
          },
          {
            "type": "literal",
            "value": "/client-session",
          },
        ],
      },
    },
    "indexSegmentId": "v2.2-constant",
    "path": {
      "parts": [
        {
          "name": "Primer API",
          "urlSlug": "primer-api",
        },
        {
          "name": "Client Session API",
          "urlSlug": "client-session-api",
        },
        {
          "name": "Create a client session",
          "urlSlug": "create-client-side-token",
        },
      ],
    },
    "type": "endpoint-v2",
    "version": {
      "id": "v2.2",
      "urlSlug": "v-2-2",
    },
  },
  {
    "endpoint": {
      "description": "You can update a clients session created earlier with the PATCH /client-session API call.

The only required field for the request is clientToken. Other supported request fields are same as for the POST /client-session
API call.

You need to specify only the fields you wish to update. However, if the items that are to be updated are of type array, then you
need to provide the complete array along with modified items.

If you wish to update nested fields on the client session, such as the customer emailAddress field, you can pass the customer
object with only one field, emailAddress, to update.

If you simply wish to clear the value of the field, pass null as your input.

You can update paymentMethod.vaultOnSuccess field but updating of the paymentMethod.options field through PATCH /client-session is
not supported.

The response will contain all the fields of the client session including the ones that were changed.",
      "method": "PATCH",
      "name": "Update client session",
      "path": {
        "parts": [
          {
            "type": "literal",
            "value": "",
          },
          {
            "type": "literal",
            "value": "/client-session",
          },
        ],
      },
    },
    "indexSegmentId": "v2.2-constant",
    "path": {
      "parts": [
        {
          "name": "Primer API",
          "urlSlug": "primer-api",
        },
        {
          "name": "Client Session API",
          "urlSlug": "client-session-api",
        },
        {
          "name": "Update client session",
          "urlSlug": "update-client-side-token",
        },
      ],
    },
    "type": "endpoint-v2",
    "version": {
      "id": "v2.2",
      "urlSlug": "v-2-2",
    },
  },
  {
    "endpoint": {
      "description": "Retrieve a list of your payments.

Results are paginated, they will only return up to 100 payments maximum. To access the next page of result, set the cursor query
parameter to the value of nextCursor in your current result payload. Use prevCursor to go back to the previous page.

Note: this endpoint returns a list of summarized payments. Not all payments attributes are present. You can use the query
parameters to filter payments. You can separate multiple query parameters with the & symbol. Query parameters with types of the
form "Array of strings" (such as the status parameter) can be specified as a comma-separated list.

For example, if you wanted to get both FAILED and CANCELLED payments, for customer john-123, you would use:

curl --location --request GET 'https://api.primer.io/payments?status=FAILED,CANCELLED&customer_id=john-123' \\
--header 'X-Api-Key: <YOUR_API_KEY>'


You can alternatively specify a list by repeating the parameter multiple times.

Note: payments will be available within a minute from being created.",
      "method": "GET",
      "name": "Search & list payments",
      "path": {
        "parts": [
          {
            "type": "literal",
            "value": "",
          },
          {
            "type": "literal",
            "value": "/payments",
          },
        ],
      },
    },
    "indexSegmentId": "v2.2-constant",
    "path": {
      "parts": [
        {
          "name": "Primer API",
          "urlSlug": "primer-api",
        },
        {
          "name": "Payments API",
          "urlSlug": "payments-api",
        },
        {
          "name": "Search & list payments",
          "urlSlug": "list-payments",
        },
      ],
    },
    "type": "endpoint-v2",
    "version": {
      "id": "v2.2",
      "urlSlug": "v-2-2",
    },
  },
  {
    "endpoint": {
      "description": "Create and authorize a payment for a given customer order. You should provide a payment method token here to avoid PCI
implications.

If only a payment method token is passed, the values passed with the Client Session is used to determine the amount, currency etc.
Note: amount, currencyCode and orderId are required during payment creation. Make sure to pass these fields when creating a client
session, or if not yet available, when creating a payment.

All fields provided on this request will take preference over any field on the order associated with the client session. E.g. if
you pass amount on this request, it will override the amount on the order associated with the Client Session. Parameters that are
not on this request will be fetched from previously created Client Session and merged. E.g. if you specify customer.billingAddress
in Client Session and then pass customer.emailAddress data with this request, it will automatically merge the customer fields and
use both billingAddress and emailAddress for later calculations.",
      "method": "POST",
      "name": "Create a payment",
      "path": {
        "parts": [
          {
            "type": "literal",
            "value": "",
          },
          {
            "type": "literal",
            "value": "/payments",
          },
        ],
      },
    },
    "indexSegmentId": "v2.2-constant",
    "path": {
      "parts": [
        {
          "name": "Primer API",
          "urlSlug": "primer-api",
        },
        {
          "name": "Payments API",
          "urlSlug": "payments-api",
        },
        {
          "name": "Create a payment",
          "urlSlug": "create-payment",
        },
      ],
    },
    "type": "endpoint-v2",
    "version": {
      "id": "v2.2",
      "urlSlug": "v-2-2",
    },
  },
  {
    "endpoint": {
      "description": "Manually authorize a payment using a provided processor. This is useful if you want to authorize a payment without a workflow
action. The processor merchant ID must be provided which can be found on the Integrations page
[https://dashboard.primer.io/integrations]. The processor name is optional but it must be provided if your account has multiple
processors configured which share the same merchant IDs.",
      "method": "POST",
      "name": "Authorize a payment",
      "path": {
        "parts": [
          {
            "type": "literal",
            "value": "",
          },
          {
            "type": "literal",
            "value": "/payments/",
          },
          {
            "type": "pathParameter",
            "value": "id",
          },
          {
            "type": "literal",
            "value": "/authorize",
          },
        ],
      },
    },
    "indexSegmentId": "v2.2-constant",
    "path": {
      "parts": [
        {
          "name": "Primer API",
          "urlSlug": "primer-api",
        },
        {
          "name": "Payments API",
          "urlSlug": "payments-api",
        },
        {
          "name": "Authorize a payment",
          "urlSlug": "authorize-payment",
        },
      ],
    },
    "type": "endpoint-v2",
    "version": {
      "id": "v2.2",
      "urlSlug": "v-2-2",
    },
  },
  {
    "endpoint": {
      "description": "If you have successfully authorized a payment, you can now fully capture, or partially capture funds from the authorized payment,
depending on whether your selected payment processor supports it. The payment will be updated to SETTLED or SETTLING, depending on
the payment method type.

The payload sent in this capture request is completely optional. If you don't send a payload with the capture request, the full
amount that was authorized will be sent for capture. Below are the available payload attributes, which give you more granular
control when capturing funds, if you require it.",
      "method": "POST",
      "name": "Capture a payment",
      "path": {
        "parts": [
          {
            "type": "literal",
            "value": "",
          },
          {
            "type": "literal",
            "value": "/payments/",
          },
          {
            "type": "pathParameter",
            "value": "id",
          },
          {
            "type": "literal",
            "value": "/capture",
          },
        ],
      },
    },
    "indexSegmentId": "v2.2-constant",
    "path": {
      "parts": [
        {
          "name": "Primer API",
          "urlSlug": "primer-api",
        },
        {
          "name": "Payments API",
          "urlSlug": "payments-api",
        },
        {
          "name": "Capture a payment",
          "urlSlug": "capture-payment",
        },
      ],
    },
    "type": "endpoint-v2",
    "version": {
      "id": "v2.2",
      "urlSlug": "v-2-2",
    },
  },
  {
    "endpoint": {
      "description": "Provided the payment has not reached SETTLED status, Primer will send a "void" request to the payment processor, thereby
cancelling the payment and releasing the hold on customer funds. Upon success, the payment will transition to CANCELLED. The
payload is optional.",
      "method": "POST",
      "name": "Cancel a payment",
      "path": {
        "parts": [
          {
            "type": "literal",
            "value": "",
          },
          {
            "type": "literal",
            "value": "/payments/",
          },
          {
            "type": "pathParameter",
            "value": "id",
          },
          {
            "type": "literal",
            "value": "/cancel",
          },
        ],
      },
    },
    "indexSegmentId": "v2.2-constant",
    "path": {
      "parts": [
        {
          "name": "Primer API",
          "urlSlug": "primer-api",
        },
        {
          "name": "Payments API",
          "urlSlug": "payments-api",
        },
        {
          "name": "Cancel a payment",
          "urlSlug": "cancel-payment",
        },
      ],
    },
    "type": "endpoint-v2",
    "version": {
      "id": "v2.2",
      "urlSlug": "v-2-2",
    },
  },
  {
    "endpoint": {
      "description": "By default, this request will refund the full amount.

Optionally, pass in a lesser amount for a partial refund.",
      "method": "POST",
      "name": "Refund a payment",
      "path": {
        "parts": [
          {
            "type": "literal",
            "value": "",
          },
          {
            "type": "literal",
            "value": "/payments/",
          },
          {
            "type": "pathParameter",
            "value": "id",
          },
          {
            "type": "literal",
            "value": "/refund",
          },
        ],
      },
    },
    "indexSegmentId": "v2.2-constant",
    "path": {
      "parts": [
        {
          "name": "Primer API",
          "urlSlug": "primer-api",
        },
        {
          "name": "Payments API",
          "urlSlug": "payments-api",
        },
        {
          "name": "Refund a payment",
          "urlSlug": "refund-payment",
        },
      ],
    },
    "type": "endpoint-v2",
    "version": {
      "id": "v2.2",
      "urlSlug": "v-2-2",
    },
  },
  {
    "endpoint": {
      "description": "Resume a payment's workflow execution from a paused state. This is usually required when a Workflow was paused in order to get
further information from the customer, or when waiting for an asynchronous response from a third party connection.",
      "method": "POST",
      "name": "Resume a payment",
      "path": {
        "parts": [
          {
            "type": "literal",
            "value": "",
          },
          {
            "type": "literal",
            "value": "/payments/",
          },
          {
            "type": "pathParameter",
            "value": "id",
          },
          {
            "type": "literal",
            "value": "/resume",
          },
        ],
      },
    },
    "indexSegmentId": "v2.2-constant",
    "path": {
      "parts": [
        {
          "name": "Primer API",
          "urlSlug": "primer-api",
        },
        {
          "name": "Payments API",
          "urlSlug": "payments-api",
        },
        {
          "name": "Resume a payment",
          "urlSlug": "resume-payment",
        },
      ],
    },
    "type": "endpoint-v2",
    "version": {
      "id": "v2.2",
      "urlSlug": "v-2-2",
    },
  },
  {
    "endpoint": {
      "description": "Adjust authorized amount. This is only possible if authorizationType was set to ESTIMATED when the payment was created, and the
mechanism is supported by the payment method.",
      "method": "POST",
      "name": "Adjust authorized amount",
      "path": {
        "parts": [
          {
            "type": "literal",
            "value": "",
          },
          {
            "type": "literal",
            "value": "/payments/",
          },
          {
            "type": "pathParameter",
            "value": "id",
          },
          {
            "type": "literal",
            "value": "/adjust-authorization",
          },
        ],
      },
    },
    "indexSegmentId": "v2.2-constant",
    "path": {
      "parts": [
        {
          "name": "Primer API",
          "urlSlug": "primer-api",
        },
        {
          "name": "Payments API",
          "urlSlug": "payments-api",
        },
        {
          "name": "Adjust authorized amount",
          "urlSlug": "adjust-authorization",
        },
      ],
    },
    "type": "endpoint-v2",
    "version": {
      "id": "v2.2",
      "urlSlug": "v-2-2",
    },
  },
  {
    "endpoint": {
      "description": "Retrieve a payment by its ID.",
      "method": "GET",
      "name": "Get a payment",
      "path": {
        "parts": [
          {
            "type": "literal",
            "value": "",
          },
          {
            "type": "literal",
            "value": "/payments/",
          },
          {
            "type": "pathParameter",
            "value": "id",
          },
          {
            "type": "literal",
            "value": "",
          },
        ],
      },
    },
    "indexSegmentId": "v2.2-constant",
    "path": {
      "parts": [
        {
          "name": "Primer API",
          "urlSlug": "primer-api",
        },
        {
          "name": "Payments API",
          "urlSlug": "payments-api",
        },
        {
          "name": "Get a payment",
          "urlSlug": "get-payment-by-id",
        },
      ],
    },
    "type": "endpoint-v2",
    "version": {
      "id": "v2.2",
      "urlSlug": "v-2-2",
    },
  },
  {
    "endpoint": {
      "description": "Save a SINGLE_USE payment method token so it can be used again later. You can optionally choose to verify the payment method
before vaulting. If verification fails, no payment method data will be vaulted. Verification can minimise fraud and boost
subscription rates for recurring payments.

If you try to vault an already vaulted token, you will get the existing vaulted token back.",
      "method": "POST",
      "name": "Save a payment method token",
      "path": {
        "parts": [
          {
            "type": "literal",
            "value": "",
          },
          {
            "type": "literal",
            "value": "/payment-instruments/",
          },
          {
            "type": "pathParameter",
            "value": "paymentMethodToken",
          },
          {
            "type": "literal",
            "value": "/vault",
          },
        ],
      },
    },
    "indexSegmentId": "v2.2-constant",
    "path": {
      "parts": [
        {
          "name": "Primer API",
          "urlSlug": "primer-api",
        },
        {
          "name": "Payment Methods API",
          "urlSlug": "payment-methods-api",
        },
        {
          "name": "Save a payment method token",
          "urlSlug": "vault-payment-method-payment-methods-token-vault-post",
        },
      ],
    },
    "type": "endpoint-v2",
    "version": {
      "id": "v2.2",
      "urlSlug": "v-2-2",
    },
  },
  {
    "endpoint": {
      "description": "Retrieve a list of stored payment methods for a customer.",
      "method": "GET",
      "name": "List saved payment methods",
      "path": {
        "parts": [
          {
            "type": "literal",
            "value": "",
          },
          {
            "type": "literal",
            "value": "/payment-instruments",
          },
        ],
      },
    },
    "indexSegmentId": "v2.2-constant",
    "path": {
      "parts": [
        {
          "name": "Primer API",
          "urlSlug": "primer-api",
        },
        {
          "name": "Payment Methods API",
          "urlSlug": "payment-methods-api",
        },
        {
          "name": "List saved payment methods",
          "urlSlug": "get-payment-methods-payment-methods-get",
        },
      ],
    },
    "type": "endpoint-v2",
    "version": {
      "id": "v2.2",
      "urlSlug": "v-2-2",
    },
  },
  {
    "endpoint": {
      "description": "Delete a saved payment method.",
      "method": "DELETE",
      "name": "Delete a saved payment method",
      "path": {
        "parts": [
          {
            "type": "literal",
            "value": "",
          },
          {
            "type": "literal",
            "value": "/payment-instruments/",
          },
          {
            "type": "pathParameter",
            "value": "paymentMethodToken",
          },
          {
            "type": "literal",
            "value": "",
          },
        ],
      },
    },
    "indexSegmentId": "v2.2-constant",
    "path": {
      "parts": [
        {
          "name": "Primer API",
          "urlSlug": "primer-api",
        },
        {
          "name": "Payment Methods API",
          "urlSlug": "payment-methods-api",
        },
        {
          "name": "Delete a saved payment method",
          "urlSlug": "delete-payment-method-payment-methods-token-delete",
        },
      ],
    },
    "type": "endpoint-v2",
    "version": {
      "id": "v2.2",
      "urlSlug": "v-2-2",
    },
  },
  {
    "endpoint": {
      "description": "Update a saved payment method to be the default stored payment method for a customer.",
      "method": "POST",
      "name": "Update the default saved payment method",
      "path": {
        "parts": [
          {
            "type": "literal",
            "value": "",
          },
          {
            "type": "literal",
            "value": "/payment-instruments/",
          },
          {
            "type": "pathParameter",
            "value": "paymentMethodToken",
          },
          {
            "type": "literal",
            "value": "/default",
          },
        ],
      },
    },
    "indexSegmentId": "v2.2-constant",
    "path": {
      "parts": [
        {
          "name": "Primer API",
          "urlSlug": "primer-api",
        },
        {
          "name": "Payment Methods API",
          "urlSlug": "payment-methods-api",
        },
        {
          "name": "Update the default saved payment method",
          "urlSlug": "set-payment-method-default-payment-methods-token-default-post",
        },
      ],
    },
    "type": "endpoint-v2",
    "version": {
      "id": "v2.2",
      "urlSlug": "v-2-2",
    },
  },
  {
    "endpoint": {
      "description": "The Observability API is currently in beta. Please contact support@primer.io [support@primer.io] for access.

Creating a payment with the Observability API sends external payments data to Primer to populate Observability Payment Insights
dashboards [https://primer.io/observability]. Payments created through the Payments API [/reference/create_payment_payments_post]
will be automatically populated and do not need to be sent in the Observability API.

Create an API key with the observability-payments:write scope.

Each record must be created with a unique paymentId. To update a payment record with new data use the PATCH endpoint.",
      "method": "POST",
      "name": "Create an external payment",
      "path": {
        "parts": [
          {
            "type": "literal",
            "value": "",
          },
          {
            "type": "literal",
            "value": "/observability/payments",
          },
        ],
      },
    },
    "indexSegmentId": "v2.2-constant",
    "path": {
      "parts": [
        {
          "name": "Primer API",
          "urlSlug": "primer-api",
        },
        {
          "name": "Observability API",
          "urlSlug": "observability-api",
        },
        {
          "name": "Create an external payment",
          "urlSlug": "external-payment",
        },
      ],
    },
    "type": "endpoint-v2",
    "version": {
      "id": "v2.2",
      "urlSlug": "v-2-2",
    },
  },
  {
    "endpoint": {
      "description": "The Observability API is currently in beta. Please contact support@primer.io [support@primer.io] for access.

You can update payments created earlier through the Observability API with this endpoint. The only required field for the request
is paymentId. Other supported request fields are the same as for the create an external payment [/reference/external_payment] API
call.

If you wish to update nested fields on the payment, you only need to pass the fields that you wish to update. For example to
update the processor name, you would pass in processor.name only.

The response will contain all the fields of the payment including the ones that were changed.",
      "method": "PATCH",
      "name": "Update an external payment",
      "path": {
        "parts": [
          {
            "type": "literal",
            "value": "",
          },
          {
            "type": "literal",
            "value": "/observability/payments/",
          },
          {
            "type": "pathParameter",
            "value": "paymentId",
          },
          {
            "type": "literal",
            "value": "",
          },
        ],
      },
    },
    "indexSegmentId": "v2.2-constant",
    "path": {
      "parts": [
        {
          "name": "Primer API",
          "urlSlug": "primer-api",
        },
        {
          "name": "Observability API",
          "urlSlug": "observability-api",
        },
        {
          "name": "Update an external payment",
          "urlSlug": "external-payment-update",
        },
      ],
    },
    "type": "endpoint-v2",
    "version": {
      "id": "v2.2",
      "urlSlug": "v-2-2",
    },
  },
  {
    "endpoint": {
      "description": "The Loyalty API is currently in beta. Please contact support@primer.io [support@primer.io] for access.

Create an API key with the loyalty-transactions:read scopes.

Get a loyalty customer by ID and connection ID. This includes the customer's points balance.

The connectionId is the unique Primer identifier for your loyalty provider connection. Primer will provide this once the loyalty
provider connection is created.

The customerId refers to the customer identifier on the loyalty provider's side.",
      "method": "GET",
      "name": "Get a loyalty customer's points balance",
      "path": {
        "parts": [
          {
            "type": "literal",
            "value": "",
          },
          {
            "type": "literal",
            "value": "/loyalty-customers/",
          },
          {
            "type": "pathParameter",
            "value": "id",
          },
          {
            "type": "literal",
            "value": "",
          },
        ],
      },
    },
    "indexSegmentId": "v2.2-constant",
    "path": {
      "parts": [
        {
          "name": "Primer API",
          "urlSlug": "primer-api",
        },
        {
          "name": "Loyalty API",
          "urlSlug": "loyalty-api",
        },
        {
          "name": "Get a loyalty customer's points balance",
          "urlSlug": "get-loyalty-customer",
        },
      ],
    },
    "type": "endpoint-v2",
    "version": {
      "id": "v2.2",
      "urlSlug": "v-2-2",
    },
  },
  {
    "endpoint": {
      "description": "The Loyalty API is currently in beta. Please contact support@primer.io [support@primer.io] for access.

Create an API key with the loyalty-transactions:read scopes.

Get all your loyalty transactions. You can filter by connectionId (recommended) and by customerId and orderId.

Additionally provide a limit to restrict the number of transactions in the response, and an offset to determine where to start.",
      "method": "GET",
      "name": "List the transactions for a customer",
      "path": {
        "parts": [
          {
            "type": "literal",
            "value": "",
          },
          {
            "type": "literal",
            "value": "/loyalty-transactions",
          },
        ],
      },
    },
    "indexSegmentId": "v2.2-constant",
    "path": {
      "parts": [
        {
          "name": "Primer API",
          "urlSlug": "primer-api",
        },
        {
          "name": "Loyalty API",
          "urlSlug": "loyalty-api",
        },
        {
          "name": "List the transactions for a customer",
          "urlSlug": "get-loyalty-customer-transactions",
        },
      ],
    },
    "type": "endpoint-v2",
    "version": {
      "id": "v2.2",
      "urlSlug": "v-2-2",
    },
  },
  {
    "endpoint": {
      "description": "The Loyalty API is currently in beta. Please contact support@primer.io [support@primer.io] for access.

Create an API key with the loyalty-transactions:write scopes.

Create a loyalty transaction. This is either a points redemption or a points refund.",
      "method": "POST",
      "name": "Create a loyalty transaction",
      "path": {
        "parts": [
          {
            "type": "literal",
            "value": "",
          },
          {
            "type": "literal",
            "value": "/loyalty-transactions",
          },
        ],
      },
    },
    "indexSegmentId": "v2.2-constant",
    "path": {
      "parts": [
        {
          "name": "Primer API",
          "urlSlug": "primer-api",
        },
        {
          "name": "Loyalty API",
          "urlSlug": "loyalty-api",
        },
        {
          "name": "Create a loyalty transaction",
          "urlSlug": "post-loyalty-transaction",
        },
      ],
    },
    "type": "endpoint-v2",
    "version": {
      "id": "v2.2",
      "urlSlug": "v-2-2",
    },
  },
  {
    "breadcrumbs": [
      {
        "slug": "introduction/getting-started",
        "title": "Getting Started",
      },
    ],
    "content": "The Primer API is used to manage Client Sessions, Payments and saved payment methods.
All other actions are either managed in the Universal Checkout implementation or in the Dashboard.

Check out:

- [Client Sessions](https://primer.io/docs/payments/universal-checkout/manage-client-sessions)
- [Universal Checkout](https://primer.io/docs/accept-payments/setup-universal-checkout/installation/web)
- [Managing Payments](https://primer.io/docs/accept-payments/manage-payments)

Test the APIs yourself in our API Reference. Don't hesitate to reach out with any questions or feedback. You can email Primer directly at [support@primer.io](support@primer.io), or contact your Primer account manager.",
    "indexSegmentId": "v2.1-constant",
    "slug": "introduction/getting-started",
    "title": "Getting Started",
    "type": "markdown-section-v1",
  },
  {
    "breadcrumbs": [
      {
        "slug": "introduction/getting-started",
        "title": "Getting Started",
      },
      {
        "slug": "introduction/getting-started#api-endpoint-deployments",
        "title": "API Endpoint Deployments",
      },
    ],
    "content": "- Sandbox: [https://api.sandbox.primer.io](https://api.sandbox.primer.io)
- Production: [https://api.primer.io](https://api.primer.io)",
    "indexSegmentId": "v2.1-constant",
    "slug": "introduction/getting-started#api-endpoint-deployments",
    "title": "API Endpoint Deployments",
    "type": "markdown-section-v1",
  },
  {
    "breadcrumbs": [
      {
        "slug": "introduction/getting-started",
        "title": "Getting Started",
      },
      {
        "slug": "introduction/getting-started#api-versions",
        "title": "API Versions",
      },
    ],
    "content": "Primer makes updates to the APIs on a regular basis, as we release new features. To allow you to update your integration as you are ready, we allow for a \`X-Api-Version\` header to be passed on all API requests.

If you omit the version header, your request will default to the earliest supported version of the API.

\`\`\`bash
curl -X POST 'https://api.primer.io/' \\
--header 'X-Api-Version: 2.2'
\`\`\`",
    "indexSegmentId": "v2.1-constant",
    "slug": "introduction/getting-started#api-versions",
    "title": "API Versions",
    "type": "markdown-section-v1",
  },
  {
    "breadcrumbs": [
      {
        "slug": "introduction/getting-started",
        "title": "Getting Started",
      },
      {
        "slug": "introduction/getting-started#api-versions",
        "title": "API Versions",
      },
      {
        "slug": "introduction/getting-started#available-versions",
        "title": "Available Versions",
      },
    ],
    "content": "Read about the available versions of the APIs below on our [Changelog](https://apiref.primer.io/changelog).",
    "indexSegmentId": "v2.1-constant",
    "slug": "introduction/getting-started#available-versions",
    "title": "Available Versions",
    "type": "markdown-section-v1",
  },
  {
    "breadcrumbs": [],
    "description": "The Primer API is used to manage Client Sessions, Payments and saved payment methods.
All other actions are either managed in the Universal Checkout implementation or in the Dashboard.

Check out:

- [Client Sessions](https://primer.io/docs/payments/universal-checkout/manage-client-sessions)
- [Universal Checkout](https://primer.io/docs/accept-payments/setup-universal-checkout/installation/web)
- [Managing Payments](https://primer.io/docs/accept-payments/manage-payments)

Test the APIs yourself in our API Reference. Don't hesitate to reach out with any questions or feedback. You can email Primer directly at [support@primer.io](support@primer.io), or contact your Primer account manager.

",
    "indexSegmentId": "v2.1-constant",
    "slug": "introduction/getting-started",
    "title": "Getting Started",
    "type": "page-v4",
    "version": {
      "id": "v2.1",
      "slug": "v-2-1",
    },
  },
  {
    "content": "The Primer API is used to manage Client Sessions, Payments and saved payment methods. All other actions are either managed in the
Universal Checkout implementation or in the Dashboard.

Check out:

 * Client Sessions [https://primer.io/docs/payments/universal-checkout/manage-client-sessions]
 * Universal Checkout [https://primer.io/docs/accept-payments/setup-universal-checkout/installation/web]
 * Managing Payments [https://primer.io/docs/accept-payments/manage-payments]

Test the APIs yourself in our API Reference. Don't hesitate to reach out with any questions or feedback. You can email Primer
directly at support@primer.io [support@primer.io], or contact your Primer account manager.


API ENDPOINT DEPLOYMENTS

 * Sandbox: https://api.sandbox.primer.io [https://api.sandbox.primer.io]
 * Production: https://api.primer.io [https://api.primer.io]


API VERSIONS

Primer makes updates to the APIs on a regular basis, as we release new features. To allow you to update your integration as you
are ready, we allow for a X-Api-Version header to be passed on all API requests.

If you omit the version header, your request will default to the earliest supported version of the API.

curl -X POST 'https://api.primer.io/<ENDPOINT>' \\
  --header 'X-Api-Version: 2.2'



AVAILABLE VERSIONS

Read about the available versions of the APIs below on our Changelog [https://apiref.primer.io/changelog].",
    "indexSegmentId": "v2.1-constant",
    "path": {
      "parts": [
        {
          "name": "Introduction",
          "urlSlug": "introduction",
        },
        {
          "name": "Getting Started",
          "urlSlug": "getting-started",
        },
      ],
    },
    "title": "Getting Started",
    "type": "page-v2",
    "version": {
      "id": "v2.1",
      "urlSlug": "v-2-1",
    },
  },
  {
    "breadcrumbs": [
      {
        "slug": "introduction/authentication",
        "title": "Authentication",
      },
    ],
    "content": "Primer uses API keys to authenticate requests. You can manage API keys in the [Developers](https://sandbox-dashboard.primer.io/developers) area of the dashboard.

As API keys carry many privileges such as _authorizing_ payments, it is important to keep them **private** and **secure**. Do not hardcode or share API keys (particularly in your source version control system), and they should only be used in your backend.

Authentication is handled via HTTP headers, specifically the \`X-Api-Key\` header.

\`\`\`bash
curl -X POST 'https://api.primer.io/' \\
--header 'X-Api-Key: '
\`\`\`",
    "indexSegmentId": "v2.1-constant",
    "slug": "introduction/authentication",
    "title": "Authentication",
    "type": "markdown-section-v1",
  },
  {
    "breadcrumbs": [
      {
        "slug": "introduction/authentication",
        "title": "Authentication",
      },
      {
        "slug": "introduction/authentication#managing-api-keys",
        "title": "Managing API Keys",
      },
    ],
    "content": "Head up to the [Developers area](https://sandbox-dashboard.primer.io/developers) on the dashboard to manage your API keys.

You will be able to generate or revoke API keys and edit their respective scopes. Be aware that any changes to existing API keys will be reflected immediately and could cause unwanted side effects.",
    "indexSegmentId": "v2.1-constant",
    "slug": "introduction/authentication#managing-api-keys",
    "title": "Managing API Keys",
    "type": "markdown-section-v1",
  },
  {
    "breadcrumbs": [
      {
        "slug": "introduction/authentication",
        "title": "Authentication",
      },
      {
        "slug": "introduction/authentication#available-scopes",
        "title": "Available scopes",
      },
    ],
    "content": "| Scope                         | Description                                                                                                                                                                           |
| ----------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| \`client_tokens:write\`         | Create client tokens for use with the client SDK.                                                                                                                                     |
| \`third_party:webhook_trigger\` | Allows you to post to our webhooks endpoint. API keys with this scope can be used to enable communication between your processor and Primer about important payment lifecycle events. |
| \`transactions:authorize\`      | Authorize a payment                                                                                                                                                                   |
| \`transactions:cancel\`         | Cancel a payment.                                                                                                                                                                     |
| \`transactions:capture\`        | Submit a payment for settlement.                                                                                                                                                      |
| \`transactions:retrieve\`       | Retrieve one or more payments.                                                                                                                                                        |
| \`transactions:refund\`         | Refund a payment.                                                                                                                                                                     |
| \`payment_instrument:read\`     | Read stored payment methods.                                                                                                                                                          |
| \`payment_instrument:write\`    | Write stored payment methods.                                                                                                                                                         |",
    "indexSegmentId": "v2.1-constant",
    "slug": "introduction/authentication#available-scopes",
    "title": "Available scopes",
    "type": "markdown-section-v1",
  },
  {
    "breadcrumbs": [],
    "description": "Primer uses API keys to authenticate requests. You can manage API keys in the [Developers](https://sandbox-dashboard.primer.io/developers) area of the dashboard.

As API keys carry many privileges such as _authorizing_ payments, it is important to keep them **private** and **secure**. Do not hardcode or share API keys (particularly in your source version control system), and they should only be used in your backend.

Authentication is handled via HTTP headers, specifically the \`X-Api-Key\` header.

\`\`\`bash
curl -X POST 'https://api.primer.io/<ENDPOINT>' \\
--header 'X-Api-Key: <YOUR_API_KEY>'
\`\`\`

",
    "indexSegmentId": "v2.1-constant",
    "slug": "introduction/authentication",
    "title": "Authentication",
    "type": "page-v4",
    "version": {
      "id": "v2.1",
      "slug": "v-2-1",
    },
  },
  {
    "content": "Primer uses API keys to authenticate requests. You can manage API keys in the Developers
[https://sandbox-dashboard.primer.io/developers] area of the dashboard.

As API keys carry many privileges such as authorizing payments, it is important to keep them private and secure. Do not hardcode
or share API keys (particularly in your source version control system), and they should only be used in your backend.

Authentication is handled via HTTP headers, specifically the X-Api-Key header.

curl -X POST 'https://api.primer.io/<ENDPOINT>' \\
  --header 'X-Api-Key: <YOUR_API_KEY>'



MANAGING API KEYS

Head up to the Developers area [https://sandbox-dashboard.primer.io/developers] on the dashboard to manage your API keys.

You will be able to generate or revoke API keys and edit their respective scopes. Be aware that any changes to existing API keys
will be reflected immediately and could cause unwanted side effects.


AVAILABLE SCOPES

Scope Description client_tokens:write Create client tokens for use with the client SDK. third_party:webhook_trigger Allows you to
post to our webhooks endpoint. API keys with this scope can be used to enable communication between your processor and Primer
about important payment lifecycle events. transactions:authorize Authorize a payment transactions:cancel Cancel a payment.
transactions:capture Submit a payment for settlement. transactions:retrieve Retrieve one or more payments. transactions:refund
Refund a payment. payment_instrument:read Read stored payment methods. payment_instrument:write Write stored payment methods.",
    "indexSegmentId": "v2.1-constant",
    "path": {
      "parts": [
        {
          "name": "Introduction",
          "urlSlug": "introduction",
        },
        {
          "name": "Authentication",
          "urlSlug": "authentication",
        },
      ],
    },
    "title": "Authentication",
    "type": "page-v2",
    "version": {
      "id": "v2.1",
      "urlSlug": "v-2-1",
    },
  },
  {
    "breadcrumbs": [
      {
        "slug": "introduction/api-responses",
        "title": "API Responses",
      },
      {
        "slug": "introduction/api-responses#status-codes",
        "title": "Status Codes",
      },
    ],
    "content": "The following table summarizes the HTTP response codes you may receive from
the Primer REST API.

| Status Code | Description             |
| ----------- | ----------------------- |
| \`200\`       | Success                 |
| \`400\`       | Bad Request             |
| \`401\`       | Unauthorized            |
| \`403\`       | Forbidden               |
| \`404\`       | Entity Not Found        |
| \`409\`       | Entity Already Exists   |
| \`422\`       | Input Validation Failed |",
    "indexSegmentId": "v2.1-constant",
    "slug": "introduction/api-responses#status-codes",
    "title": "Status Codes",
    "type": "markdown-section-v1",
  },
  {
    "breadcrumbs": [
      {
        "slug": "introduction/api-responses",
        "title": "API Responses",
      },
      {
        "slug": "introduction/api-responses#error-responses",
        "title": "Error Responses",
      },
    ],
    "content": "Primer uses conventional HTTP response codes to indicate the success or failure of an API request. HTTP codes in the \`2XX\` range indicate a successful request, whereas codes in the \`4XX\` range indicate a failed request usually due to invalid inputs or operations.

The format of the payload for all errors is common. When an unsuccessful request occurs, you will receive a payload in the following format:

\`\`\`json
{
"error": {
"errorId": "AnErrorId",
"description": "A human description of the error.",
"diagnosticsId": "1234567890",
"validationErrors": []
}
}
\`\`\`

All error payloads will be comprised of a unique \`errorId\` which you can use to identify the error, a human description \`description\`, and a \`diagnosticsId\` that you can quote when contacting the support team ([support@primer.io](mailto:support@primer.io)). In case of a badly formed request, Primer will also return additional \`validationErrors\`.",
    "indexSegmentId": "v2.1-constant",
    "slug": "introduction/api-responses#error-responses",
    "title": "Error Responses",
    "type": "markdown-section-v1",
  },
  {
    "breadcrumbs": [
      {
        "slug": "introduction/api-responses",
        "title": "API Responses",
      },
      {
        "slug": "introduction/api-responses#payment-status",
        "title": "Payment Status",
      },
    ],
    "content": "As the payments are created, processed, and finalised, they go through a number of states that you will get as an API response, through webhook notifications, and in the Dashboard. These states are used across all processors, as processor specific states are mapped to these. An additional message, in the field \`processorMessage\`, from the processor may also be included that details the reason for the state, primarily on failure states.

| Status              | Description                                                                                                                                         |
| ------------------- | --------------------------------------------------------------------------------------------------------------------------------------------------- |
| \`PENDING\`           | The payment has been created by Primer but not yet authorized.                                                                                      |
| \`FAILED\`            | The processor failed to process this payment.                                                                                                       |
| \`AUTHORIZED\`        | The payment is authorized and awaiting capture.                                                                                                     |
| \`SETTLING\`          | The payment has been submitted for settlement and funds will be settled later.                                                                      |
| \`PARTIALLY_SETTLED\` | The payment has been partially settled.                                                                                                             |
| \`SETTLED\`           | Funds have been settled into your account.                                                                                                          |
| \`DECLINED\`          | This payment was declined by the processor, either at a gateway or acquirer level. See the reason object in your response payload for more details. |
| \`CANCELLED\`         | The payment was cancelled prior to it being settled.                                                                                                |

Don't hesitate to reach out with any questions or feedback. You can email Primer directly at [support@primer.io](mailto:support@primer.io), or contact your Primer account manager.",
    "indexSegmentId": "v2.1-constant",
    "slug": "introduction/api-responses#payment-status",
    "title": "Payment Status",
    "type": "markdown-section-v1",
  },
  {
    "breadcrumbs": [],
    "description": "",
    "indexSegmentId": "v2.1-constant",
    "slug": "introduction/api-responses",
    "title": "API Responses",
    "type": "page-v4",
    "version": {
      "id": "v2.1",
      "slug": "v-2-1",
    },
  },
  {
    "content": "STATUS CODES

The following table summarizes the HTTP response codes you may receive from the Primer REST API.

Status Code Description 200 Success 400 Bad Request 401 Unauthorized 403 Forbidden 404 Entity Not Found 409 Entity Already Exists
422 Input Validation Failed


ERROR RESPONSES

Primer uses conventional HTTP response codes to indicate the success or failure of an API request. HTTP codes in the 2XX range
indicate a successful request, whereas codes in the 4XX range indicate a failed request usually due to invalid inputs or
operations.

The format of the payload for all errors is common. When an unsuccessful request occurs, you will receive a payload in the
following format:

{
  "error": {
    "errorId": "AnErrorId",
    "description": "A human description of the error.",
    "diagnosticsId": "1234567890",
    "validationErrors": []
  }
}


All error payloads will be comprised of a unique errorId which you can use to identify the error, a human description description,
and a diagnosticsId that you can quote when contacting the support team (support@primer.io [support@primer.io]). In case of a
badly formed request, Primer will also return additional validationErrors.


PAYMENT STATUS

As the payments are created, processed, and finalised, they go through a number of states that you will get as an API response,
through webhook notifications, and in the Dashboard. These states are used across all processors, as processor specific states are
mapped to these. An additional message, in the field processorMessage, from the processor may also be included that details the
reason for the state, primarily on failure states.

Status Description PENDING The payment has been created by Primer but not yet authorized. FAILED The processor failed to process
this payment. AUTHORIZED The payment is authorized and awaiting capture. SETTLING The payment has been submitted for settlement
and funds will be settled later. PARTIALLY_SETTLED The payment has been partially settled. SETTLED Funds have been settled into
your account. DECLINED This payment was declined by the processor, either at a gateway or acquirer level. See the reason object in
your response payload for more details. CANCELLED The payment was cancelled prior to it being settled.

Don't hesitate to reach out with any questions or feedback. You can email Primer directly at support@primer.io
[support@primer.io], or contact your Primer account manager.",
    "indexSegmentId": "v2.1-constant",
    "path": {
      "parts": [
        {
          "name": "Introduction",
          "urlSlug": "introduction",
        },
        {
          "name": "API Responses",
          "urlSlug": "api-responses",
        },
      ],
    },
    "title": "API Responses",
    "type": "page-v2",
    "version": {
      "id": "v2.1",
      "urlSlug": "v-2-1",
    },
  },
  {
    "breadcrumbs": [
      {
        "slug": "introduction/idempotency-key",
        "title": "Idempotency Key",
      },
    ],
    "content": "Primer supports a request idempotency mechanism for our Payments API. This optional feature enables you to safely retry a request without risking the user being charged or refunded multiple times.

This is particularly useful when an API call fails due to the request being invalid, due to a network issue, or if Primer is momentarily unavailable.

If this is the case, make another request with the same idempotency key:

- If a request with the same idempotency key has already been successfully processed by Primer, the new request will be ignored. A \`400\` error will be returned with an \`errorId\` set to \`TransactionRequestIdempotencyKeyAlreadyExists\`.
- Otherwise, Primer will attempt to process the new request.

To make an idempotent request, generate an idempotency key and pass it to the header \`X-Idempotency-Key\`.

\`\`\`bash
curl -X POST 'https://api.primer.io/' \\
--header 'X-Idempotency-Key: '
\`\`\`

The way you generate the key is totally up to you, as long as it is unique per request attempt.

Keep in mind that a payment request resulting in a declined or failed payment is still considered _Successfully processed_ for the API. Therefore, if you want to allow the user to retry an unsuccessful payment, make sure to not use the same idempotency key.

As a such, don't use anything too restrictive like an \`orderId\` for the idempotency key as multiple payment attempts and refunds can be made for a single order.",
    "indexSegmentId": "v2.1-constant",
    "slug": "introduction/idempotency-key",
    "title": "Idempotency Key",
    "type": "markdown-section-v1",
  },
  {
    "breadcrumbs": [],
    "description": "Primer supports a request idempotency mechanism for our Payments API. This optional feature enables you to safely retry a request without risking the user being charged or refunded multiple times.

This is particularly useful when an API call fails due to the request being invalid, due to a network issue, or if Primer is momentarily unavailable.

If this is the case, make another request with the same idempotency key:

- If a request with the same idempotency key has already been successfully processed by Primer, the new request will be ignored. A \`400\` error will be returned with an \`errorId\` set to \`TransactionRequestIdempotencyKeyAlreadyExists\`.
- Otherwise, Primer will attempt to process the new request.

To make an idempotent request, generate an idempotency key and pass it to the header \`X-Idempotency-Key\`.

\`\`\`bash
curl -X POST 'https://api.primer.io/<ENDPOINT>' \\
--header 'X-Idempotency-Key: <idempotency-key>'
\`\`\`

The way you generate the key is totally up to you, as long as it is unique per request attempt.

Keep in mind that a payment request resulting in a declined or failed payment is still considered _Successfully processed_ for the API. Therefore, if you want to allow the user to retry an unsuccessful payment, make sure to not use the same idempotency key.

As a such, don't use anything too restrictive like an \`orderId\` for the idempotency key as multiple payment attempts and refunds can be made for a single order.

",
    "indexSegmentId": "v2.1-constant",
    "slug": "introduction/idempotency-key",
    "title": "Idempotency Key",
    "type": "page-v4",
    "version": {
      "id": "v2.1",
      "slug": "v-2-1",
    },
  },
  {
    "content": "Primer supports a request idempotency mechanism for our Payments API. This optional feature enables you to safely retry a request
without risking the user being charged or refunded multiple times.

This is particularly useful when an API call fails due to the request being invalid, due to a network issue, or if Primer is
momentarily unavailable.

If this is the case, make another request with the same idempotency key:

 * If a request with the same idempotency key has already been successfully processed by Primer, the new request will be ignored.
   A 400 error will be returned with an errorId set to TransactionRequestIdempotencyKeyAlreadyExists.
 * Otherwise, Primer will attempt to process the new request.

To make an idempotent request, generate an idempotency key and pass it to the header X-Idempotency-Key.

curl -X POST 'https://api.primer.io/<ENDPOINT>' \\
  --header 'X-Idempotency-Key: <idempotency-key>'


The way you generate the key is totally up to you, as long as it is unique per request attempt.

Keep in mind that a payment request resulting in a declined or failed payment is still considered Successfully processed for the
API. Therefore, if you want to allow the user to retry an unsuccessful payment, make sure to not use the same idempotency key.

As a such, don't use anything too restrictive like an orderId for the idempotency key as multiple payment attempts and refunds can
be made for a single order.",
    "indexSegmentId": "v2.1-constant",
    "path": {
      "parts": [
        {
          "name": "Introduction",
          "urlSlug": "introduction",
        },
        {
          "name": "Idempotency Key",
          "urlSlug": "idempotency-key",
        },
      ],
    },
    "title": "Idempotency Key",
    "type": "page-v2",
    "version": {
      "id": "v2.1",
      "urlSlug": "v-2-1",
    },
  },
  {
    "breadcrumbs": [
      {
        "slug": "introduction/loyalty-transactions",
        "title": "Loyalty Transactions",
      },
    ],
    "content": "Primer's Loyalty API provides an interface to interact with 3rd party loyalty point and service providers.

All of the endpoints below reference a \`connectionId\`. This is the unique Primer identifier for your loyalty provider connection. Primer will provide this once the loyalty provider connection is created.

To identify the customer in the context of the loyalty provider, a \`customerId\` is also necessary.",
    "indexSegmentId": "v2.1-constant",
    "slug": "introduction/loyalty-transactions",
    "title": "Loyalty Transactions",
    "type": "markdown-section-v1",
  },
  {
    "breadcrumbs": [
      {
        "slug": "introduction/loyalty-transactions",
        "title": "Loyalty Transactions",
      },
      {
        "slug": "introduction/loyalty-transactions#get-the-customer-balance",
        "title": "Get the customer balance",
      },
    ],
    "content": "Call the [Loyalty Customers](https://apiref.primer.io/reference/get_loyalty_customer) endpoint, which includes the customer's balance. In future this object could contain further details.",
    "indexSegmentId": "v2.1-constant",
    "slug": "introduction/loyalty-transactions#get-the-customer-balance",
    "title": "Get the customer balance",
    "type": "markdown-section-v1",
  },
  {
    "breadcrumbs": [
      {
        "slug": "introduction/loyalty-transactions",
        "title": "Loyalty Transactions",
      },
      {
        "slug": "introduction/loyalty-transactions#redeem-points",
        "title": "Redeem points",
      },
    ],
    "content": "Call the [Loyalty Transactions](https://apiref.primer.io/reference/post_loyalty_transaction) endpoint to create a \`REDEMPTION\` transaction.

Provide an \`orderId\` to link multiple transactions together.",
    "indexSegmentId": "v2.1-constant",
    "slug": "introduction/loyalty-transactions#redeem-points",
    "title": "Redeem points",
    "type": "markdown-section-v1",
  },
  {
    "breadcrumbs": [
      {
        "slug": "introduction/loyalty-transactions",
        "title": "Loyalty Transactions",
      },
      {
        "slug": "introduction/loyalty-transactions#refund-points",
        "title": "Refund points",
      },
    ],
    "content": "Call the [Loyalty Transactions](https://apiref.primer.io/reference/post_loyalty_transaction) endpoint to create a \`REFUND\` transaction. This transaction is completely independent from a redeem transaction.

Provide an \`orderId\` to link multiple transactions together.",
    "indexSegmentId": "v2.1-constant",
    "slug": "introduction/loyalty-transactions#refund-points",
    "title": "Refund points",
    "type": "markdown-section-v1",
  },
  {
    "breadcrumbs": [
      {
        "slug": "introduction/loyalty-transactions",
        "title": "Loyalty Transactions",
      },
      {
        "slug": "introduction/loyalty-transactions#get-a-list-of-transactions",
        "title": "Get a list of transactions",
      },
    ],
    "content": "Call the [Loyalty Transactions](https://apiref.primer.io/reference/get_loyalty_transaction) endpoint to retrieve a list of all your transactions. In most cases it makes sense to filter by \`connectionId\`. You can also filter by \`customerId\` or \`orderId\`.",
    "indexSegmentId": "v2.1-constant",
    "slug": "introduction/loyalty-transactions#get-a-list-of-transactions",
    "title": "Get a list of transactions",
    "type": "markdown-section-v1",
  },
  {
    "breadcrumbs": [],
    "description": "Primer's Loyalty API provides an interface to interact with 3rd party loyalty point and service providers.

All of the endpoints below reference a \`connectionId\`. This is the unique Primer identifier for your loyalty provider connection. Primer will provide this once the loyalty provider connection is created.

To identify the customer in the context of the loyalty provider, a \`customerId\` is also necessary.

",
    "indexSegmentId": "v2.1-constant",
    "slug": "introduction/loyalty-transactions",
    "title": "Loyalty Transactions",
    "type": "page-v4",
    "version": {
      "id": "v2.1",
      "slug": "v-2-1",
    },
  },
  {
    "content": "Primer's Loyalty API provides an interface to interact with 3rd party loyalty point and service providers.

All of the endpoints below reference a connectionId. This is the unique Primer identifier for your loyalty provider connection.
Primer will provide this once the loyalty provider connection is created.

To identify the customer in the context of the loyalty provider, a customerId is also necessary.


GET THE CUSTOMER BALANCE

Call the Loyalty Customers [https://apiref.primer.io/reference/get_loyalty_customer] endpoint, which includes the customer's
balance. In future this object could contain further details.


REDEEM POINTS

Call the Loyalty Transactions [https://apiref.primer.io/reference/post_loyalty_transaction] endpoint to create a REDEMPTION
transaction.

Provide an orderId to link multiple transactions together.


REFUND POINTS

Call the Loyalty Transactions [https://apiref.primer.io/reference/post_loyalty_transaction] endpoint to create a REFUND
transaction. This transaction is completely independent from a redeem transaction.

Provide an orderId to link multiple transactions together.


GET A LIST OF TRANSACTIONS

Call the Loyalty Transactions [https://apiref.primer.io/reference/get_loyalty_transaction] endpoint to retrieve a list of all your
transactions. In most cases it makes sense to filter by connectionId. You can also filter by customerId or orderId.",
    "indexSegmentId": "v2.1-constant",
    "path": {
      "parts": [
        {
          "name": "Introduction",
          "urlSlug": "introduction",
        },
        {
          "name": "Loyalty Transactions",
          "urlSlug": "loyalty-transactions",
        },
      ],
    },
    "title": "Loyalty Transactions",
    "type": "page-v2",
    "version": {
      "id": "v2.1",
      "urlSlug": "v-2-1",
    },
  },
  {
    "endpoint": {
      "description": "This API call retrieves all the details associated with the client session corresponding to the client token that is provided in
the request. The fields with empty values are excluded from the response.",
      "method": "GET",
      "name": "Retrieve a client session",
      "path": {
        "parts": [
          {
            "type": "literal",
            "value": "",
          },
          {
            "type": "literal",
            "value": "/client-session",
          },
        ],
      },
    },
    "indexSegmentId": "v2.1-constant",
    "path": {
      "parts": [
        {
          "name": "Primer API",
          "urlSlug": "primer-api",
        },
        {
          "name": "Client Session API",
          "urlSlug": "client-session-api",
        },
        {
          "name": "Retrieve a client session",
          "urlSlug": "retrieve-client-side-token",
        },
      ],
    },
    "type": "endpoint-v2",
    "version": {
      "id": "v2.1",
      "urlSlug": "v-2-1",
    },
  },
  {
    "endpoint": {
      "description": "Creating a client session generates a client token: a temporary key used to initialize Universal Checkout
[https://primer.io/docs/accept-payments/setup-universal-checkout/installation/web] and authenticate it against your account.

Universal Checkout automatically retrieves all the settings from the client session and the Dashboard to configure the payment
methods and the checkout experience.

Note: When creating a Client Session, please make sure to provide currencyCode, orderId, and at least one of amount or lineItems.
If any of these are not yet available, you can provide them when making the payment request.

POST /client-session does not have required fields as all fields are not always known when a client session is created. Use PATCH
/client-session to update the parameters throughout the checkout session.

Client tokens expire after 24 hours.",
      "method": "POST",
      "name": "Create a client session",
      "path": {
        "parts": [
          {
            "type": "literal",
            "value": "",
          },
          {
            "type": "literal",
            "value": "/client-session",
          },
        ],
      },
    },
    "indexSegmentId": "v2.1-constant",
    "path": {
      "parts": [
        {
          "name": "Primer API",
          "urlSlug": "primer-api",
        },
        {
          "name": "Client Session API",
          "urlSlug": "client-session-api",
        },
        {
          "name": "Create a client session",
          "urlSlug": "create-client-side-token",
        },
      ],
    },
    "type": "endpoint-v2",
    "version": {
      "id": "v2.1",
      "urlSlug": "v-2-1",
    },
  },
  {
    "endpoint": {
      "description": "You can update a clients session created earlier with the PATCH /client-session API call.

The only required field for the request is clientToken. Other supported request fields are same as for the POST /client-session
API call.

You need to specify only the fields you wish to update. However, if the items that are to be updated are of type array, then you
need to provide the complete array along with modified items.

If you wish to update nested fields on the client session, such as the customer emailAddress field, you can pass the customer
object with only one field, emailAddress, to update.

If you simply wish to clear the value of the field, pass null as your input.

You can update paymentMethod.vaultOnSuccess field but updating of the paymentMethod.options field through PATCH /client-session is
not supported.

The response will contain all the fields of the client session including the ones that were changed.",
      "method": "PATCH",
      "name": "Update client session",
      "path": {
        "parts": [
          {
            "type": "literal",
            "value": "",
          },
          {
            "type": "literal",
            "value": "/client-session",
          },
        ],
      },
    },
    "indexSegmentId": "v2.1-constant",
    "path": {
      "parts": [
        {
          "name": "Primer API",
          "urlSlug": "primer-api",
        },
        {
          "name": "Client Session API",
          "urlSlug": "client-session-api",
        },
        {
          "name": "Update client session",
          "urlSlug": "update-client-side-token",
        },
      ],
    },
    "type": "endpoint-v2",
    "version": {
      "id": "v2.1",
      "urlSlug": "v-2-1",
    },
  },
  {
    "endpoint": {
      "description": "Retrieve a list of your payments.

Results are paginated, they will only return up to 100 payments maximum. To access the next page of result, set the cursor query
parameter to the value of nextCursor in your current result payload. Use prevCursor to go back to the previous page.

Note: this endpoint returns a list of summarized payments. Not all payments attributes are present. You can use the query
parameters to filter payments. You can separate multiple query parameters with the & symbol. Query parameters with types of the
form "Array of strings" (such as the status parameter) can be specified as a comma-separated list.

For example, if you wanted to get both FAILED and CANCELLED payments, for customer john-123, you would use:

curl --location --request GET 'https://api.primer.io/payments?status=FAILED,CANCELLED&customer_id=john-123' \\
--header 'X-Api-Key: <YOUR_API_KEY>'


You can alternatively specify a list by repeating the parameter multiple times.

Note: payments will be available within a minute from being created.",
      "method": "GET",
      "name": "Search & list payments",
      "path": {
        "parts": [
          {
            "type": "literal",
            "value": "",
          },
          {
            "type": "literal",
            "value": "/payments",
          },
        ],
      },
    },
    "indexSegmentId": "v2.1-constant",
    "path": {
      "parts": [
        {
          "name": "Primer API",
          "urlSlug": "primer-api",
        },
        {
          "name": "Payments API",
          "urlSlug": "payments-api",
        },
        {
          "name": "Search & list payments",
          "urlSlug": "list-payments",
        },
      ],
    },
    "type": "endpoint-v2",
    "version": {
      "id": "v2.1",
      "urlSlug": "v-2-1",
    },
  },
  {
    "endpoint": {
      "description": "Create and authorize a payment for a given customer order. You should provide a payment method token here to avoid PCI
implications.

If only a payment method token is passed, the values passed with the Client Session determine the amount, currency etc.

Note: amount, currencyCode and orderId are required during payment creation. Make sure to pass these fields when creating a client
session, or if not yet available, when creating a payment.

All fields provided on this request will take preference over any field on the order associated with the client session. E.g. if
you pass amount on this request, it will override the amount on the order associated with the Client Session.",
      "method": "POST",
      "name": "Create a payment",
      "path": {
        "parts": [
          {
            "type": "literal",
            "value": "",
          },
          {
            "type": "literal",
            "value": "/payments",
          },
        ],
      },
    },
    "indexSegmentId": "v2.1-constant",
    "path": {
      "parts": [
        {
          "name": "Primer API",
          "urlSlug": "primer-api",
        },
        {
          "name": "Payments API",
          "urlSlug": "payments-api",
        },
        {
          "name": "Create a payment",
          "urlSlug": "create-payment",
        },
      ],
    },
    "type": "endpoint-v2",
    "version": {
      "id": "v2.1",
      "urlSlug": "v-2-1",
    },
  },
  {
    "endpoint": {
      "description": "If you have successfully authorized a payment, you can now fully capture, or partially capture funds from the authorized payment,
depending on whether your selected payment processor supports it. The payment will be updated to SETTLED or SETTLING, depending on
the payment method type.

The payload sent in this capture request is completely optional. If you don't send a payload with the capture request, the full
amount that was authorized will be sent for capture. Below are the available payload attributes, which give you more granular
control when capturing funds, if you require it.",
      "method": "POST",
      "name": "Capture a payment",
      "path": {
        "parts": [
          {
            "type": "literal",
            "value": "",
          },
          {
            "type": "literal",
            "value": "/payments/",
          },
          {
            "type": "pathParameter",
            "value": "id",
          },
          {
            "type": "literal",
            "value": "/capture",
          },
        ],
      },
    },
    "indexSegmentId": "v2.1-constant",
    "path": {
      "parts": [
        {
          "name": "Primer API",
          "urlSlug": "primer-api",
        },
        {
          "name": "Payments API",
          "urlSlug": "payments-api",
        },
        {
          "name": "Capture a payment",
          "urlSlug": "capture-payment",
        },
      ],
    },
    "type": "endpoint-v2",
    "version": {
      "id": "v2.1",
      "urlSlug": "v-2-1",
    },
  },
  {
    "endpoint": {
      "description": "Provided the payment has not reached SETTLED status, Primer will send a "void" request to the payment processor, thereby
cancelling the payment and releasing the hold on customer funds. Upon success, the payment will transition to CANCELLED. The
payload is optional.",
      "method": "POST",
      "name": "Cancel a payment",
      "path": {
        "parts": [
          {
            "type": "literal",
            "value": "",
          },
          {
            "type": "literal",
            "value": "/payments/",
          },
          {
            "type": "pathParameter",
            "value": "id",
          },
          {
            "type": "literal",
            "value": "/cancel",
          },
        ],
      },
    },
    "indexSegmentId": "v2.1-constant",
    "path": {
      "parts": [
        {
          "name": "Primer API",
          "urlSlug": "primer-api",
        },
        {
          "name": "Payments API",
          "urlSlug": "payments-api",
        },
        {
          "name": "Cancel a payment",
          "urlSlug": "cancel-payment",
        },
      ],
    },
    "type": "endpoint-v2",
    "version": {
      "id": "v2.1",
      "urlSlug": "v-2-1",
    },
  },
  {
    "endpoint": {
      "description": "By default, this request will refund the full amount.

Optionally, pass in a lesser amount for a partial refund.",
      "method": "POST",
      "name": "Refund a payment",
      "path": {
        "parts": [
          {
            "type": "literal",
            "value": "",
          },
          {
            "type": "literal",
            "value": "/payments/",
          },
          {
            "type": "pathParameter",
            "value": "id",
          },
          {
            "type": "literal",
            "value": "/refund",
          },
        ],
      },
    },
    "indexSegmentId": "v2.1-constant",
    "path": {
      "parts": [
        {
          "name": "Primer API",
          "urlSlug": "primer-api",
        },
        {
          "name": "Payments API",
          "urlSlug": "payments-api",
        },
        {
          "name": "Refund a payment",
          "urlSlug": "refund-payment",
        },
      ],
    },
    "type": "endpoint-v2",
    "version": {
      "id": "v2.1",
      "urlSlug": "v-2-1",
    },
  },
  {
    "endpoint": {
      "description": "Resume a payment's workflow execution from a paused state. This is usually required when a Workflow was paused in order to get
further information from the customer, or when waiting for an asynchronous response from a third party connection.",
      "method": "POST",
      "name": "Resume a payment",
      "path": {
        "parts": [
          {
            "type": "literal",
            "value": "",
          },
          {
            "type": "literal",
            "value": "/payments/",
          },
          {
            "type": "pathParameter",
            "value": "id",
          },
          {
            "type": "literal",
            "value": "/resume",
          },
        ],
      },
    },
    "indexSegmentId": "v2.1-constant",
    "path": {
      "parts": [
        {
          "name": "Primer API",
          "urlSlug": "primer-api",
        },
        {
          "name": "Payments API",
          "urlSlug": "payments-api",
        },
        {
          "name": "Resume a payment",
          "urlSlug": "resume-payment",
        },
      ],
    },
    "type": "endpoint-v2",
    "version": {
      "id": "v2.1",
      "urlSlug": "v-2-1",
    },
  },
  {
    "endpoint": {
      "description": "Retrieve a payment by its ID.",
      "method": "GET",
      "name": "Get a payment",
      "path": {
        "parts": [
          {
            "type": "literal",
            "value": "",
          },
          {
            "type": "literal",
            "value": "/payments/",
          },
          {
            "type": "pathParameter",
            "value": "id",
          },
          {
            "type": "literal",
            "value": "",
          },
        ],
      },
    },
    "indexSegmentId": "v2.1-constant",
    "path": {
      "parts": [
        {
          "name": "Primer API",
          "urlSlug": "primer-api",
        },
        {
          "name": "Payments API",
          "urlSlug": "payments-api",
        },
        {
          "name": "Get a payment",
          "urlSlug": "get-payment-by-id",
        },
      ],
    },
    "type": "endpoint-v2",
    "version": {
      "id": "v2.1",
      "urlSlug": "v-2-1",
    },
  },
  {
    "endpoint": {
      "description": "Save a SINGLE_USE payment method token so it can be used again later. You can optionally choose to verify the payment method
before vaulting. If verification fails, no payment method data will be vaulted. Verification can minimise fraud and boost
subscription rates for recurring payments.

If you try to vault an already vaulted token, you will get the existing vaulted token back.",
      "method": "POST",
      "name": "Save a payment method token",
      "path": {
        "parts": [
          {
            "type": "literal",
            "value": "",
          },
          {
            "type": "literal",
            "value": "/payment-instruments/",
          },
          {
            "type": "pathParameter",
            "value": "paymentMethodToken",
          },
          {
            "type": "literal",
            "value": "/vault",
          },
        ],
      },
    },
    "indexSegmentId": "v2.1-constant",
    "path": {
      "parts": [
        {
          "name": "Primer API",
          "urlSlug": "primer-api",
        },
        {
          "name": "Payment Methods API",
          "urlSlug": "payment-methods-api",
        },
        {
          "name": "Save a payment method token",
          "urlSlug": "vault-payment-method-payment-methods-token-vault-post",
        },
      ],
    },
    "type": "endpoint-v2",
    "version": {
      "id": "v2.1",
      "urlSlug": "v-2-1",
    },
  },
  {
    "endpoint": {
      "description": "Retrieve a list of stored payment methods for a customer.",
      "method": "GET",
      "name": "List saved payment methods",
      "path": {
        "parts": [
          {
            "type": "literal",
            "value": "",
          },
          {
            "type": "literal",
            "value": "/payment-instruments",
          },
        ],
      },
    },
    "indexSegmentId": "v2.1-constant",
    "path": {
      "parts": [
        {
          "name": "Primer API",
          "urlSlug": "primer-api",
        },
        {
          "name": "Payment Methods API",
          "urlSlug": "payment-methods-api",
        },
        {
          "name": "List saved payment methods",
          "urlSlug": "get-payment-methods-payment-methods-get",
        },
      ],
    },
    "type": "endpoint-v2",
    "version": {
      "id": "v2.1",
      "urlSlug": "v-2-1",
    },
  },
  {
    "endpoint": {
      "description": "Delete a saved payment method.",
      "method": "DELETE",
      "name": "Delete a saved payment method",
      "path": {
        "parts": [
          {
            "type": "literal",
            "value": "",
          },
          {
            "type": "literal",
            "value": "/payment-instruments/",
          },
          {
            "type": "pathParameter",
            "value": "paymentMethodToken",
          },
          {
            "type": "literal",
            "value": "",
          },
        ],
      },
    },
    "indexSegmentId": "v2.1-constant",
    "path": {
      "parts": [
        {
          "name": "Primer API",
          "urlSlug": "primer-api",
        },
        {
          "name": "Payment Methods API",
          "urlSlug": "payment-methods-api",
        },
        {
          "name": "Delete a saved payment method",
          "urlSlug": "delete-payment-method-payment-methods-token-delete",
        },
      ],
    },
    "type": "endpoint-v2",
    "version": {
      "id": "v2.1",
      "urlSlug": "v-2-1",
    },
  },
  {
    "endpoint": {
      "description": "Update a saved payment method to be the default stored payment method for a customer.",
      "method": "POST",
      "name": "Update the default saved payment method",
      "path": {
        "parts": [
          {
            "type": "literal",
            "value": "",
          },
          {
            "type": "literal",
            "value": "/payment-instruments/",
          },
          {
            "type": "pathParameter",
            "value": "paymentMethodToken",
          },
          {
            "type": "literal",
            "value": "/default",
          },
        ],
      },
    },
    "indexSegmentId": "v2.1-constant",
    "path": {
      "parts": [
        {
          "name": "Primer API",
          "urlSlug": "primer-api",
        },
        {
          "name": "Payment Methods API",
          "urlSlug": "payment-methods-api",
        },
        {
          "name": "Update the default saved payment method",
          "urlSlug": "set-payment-method-default-payment-methods-token-default-post",
        },
      ],
    },
    "type": "endpoint-v2",
    "version": {
      "id": "v2.1",
      "urlSlug": "v-2-1",
    },
  },
  {
    "breadcrumbs": [
      {
        "slug": "introduction/getting-started",
        "title": "Getting Started",
      },
    ],
    "content": "The Primer API is used to manage Client Sessions, Payments and saved payment methods.
All other actions are either managed in the Universal Checkout implementation or in the Dashboard.

Check out:

- [Client Sessions](https://primer.io/docs/payments/universal-checkout/manage-client-sessions)
- [Universal Checkout](https://primer.io/docs/accept-payments/setup-universal-checkout/installation/web)
- [Managing Payments](https://primer.io/docs/accept-payments/manage-payments)

Test the APIs yourself in our API Reference. Don't hesitate to reach out with any questions or feedback. You can email Primer directly at [support@primer.io](support@primer.io), or contact your Primer account manager.",
    "indexSegmentId": "v2-constant",
    "slug": "introduction/getting-started",
    "title": "Getting Started",
    "type": "markdown-section-v1",
  },
  {
    "breadcrumbs": [
      {
        "slug": "introduction/getting-started",
        "title": "Getting Started",
      },
      {
        "slug": "introduction/getting-started#api-endpoint-deployments",
        "title": "API Endpoint Deployments",
      },
    ],
    "content": "- Sandbox: [https://api.sandbox.primer.io](https://api.sandbox.primer.io)
- Production: [https://api.primer.io](https://api.primer.io)",
    "indexSegmentId": "v2-constant",
    "slug": "introduction/getting-started#api-endpoint-deployments",
    "title": "API Endpoint Deployments",
    "type": "markdown-section-v1",
  },
  {
    "breadcrumbs": [
      {
        "slug": "introduction/getting-started",
        "title": "Getting Started",
      },
      {
        "slug": "introduction/getting-started#api-versions",
        "title": "API Versions",
      },
    ],
    "content": "Primer makes updates to the APIs on a regular basis, as we release new features. To allow you to update your integration as you are ready, we allow for a \`X-Api-Version\` header to be passed on all API requests.

If you omit the version header, your request will default to the earliest supported version of the API.

\`\`\`bash
curl -X POST 'https://api.primer.io/' \\
--header 'X-Api-Version: 2.2'
\`\`\`",
    "indexSegmentId": "v2-constant",
    "slug": "introduction/getting-started#api-versions",
    "title": "API Versions",
    "type": "markdown-section-v1",
  },
  {
    "breadcrumbs": [
      {
        "slug": "introduction/getting-started",
        "title": "Getting Started",
      },
      {
        "slug": "introduction/getting-started#api-versions",
        "title": "API Versions",
      },
      {
        "slug": "introduction/getting-started#available-versions",
        "title": "Available Versions",
      },
    ],
    "content": "Read about the available versions of the APIs below on our [Changelog](https://apiref.primer.io/changelog).",
    "indexSegmentId": "v2-constant",
    "slug": "introduction/getting-started#available-versions",
    "title": "Available Versions",
    "type": "markdown-section-v1",
  },
  {
    "breadcrumbs": [],
    "description": "The Primer API is used to manage Client Sessions, Payments and saved payment methods.
All other actions are either managed in the Universal Checkout implementation or in the Dashboard.

Check out:

- [Client Sessions](https://primer.io/docs/payments/universal-checkout/manage-client-sessions)
- [Universal Checkout](https://primer.io/docs/accept-payments/setup-universal-checkout/installation/web)
- [Managing Payments](https://primer.io/docs/accept-payments/manage-payments)

Test the APIs yourself in our API Reference. Don't hesitate to reach out with any questions or feedback. You can email Primer directly at [support@primer.io](support@primer.io), or contact your Primer account manager.

",
    "indexSegmentId": "v2-constant",
    "slug": "introduction/getting-started",
    "title": "Getting Started",
    "type": "page-v4",
    "version": {
      "id": "v2",
      "slug": "v-2",
    },
  },
  {
    "content": "The Primer API is used to manage Client Sessions, Payments and saved payment methods. All other actions are either managed in the
Universal Checkout implementation or in the Dashboard.

Check out:

 * Client Sessions [https://primer.io/docs/payments/universal-checkout/manage-client-sessions]
 * Universal Checkout [https://primer.io/docs/accept-payments/setup-universal-checkout/installation/web]
 * Managing Payments [https://primer.io/docs/accept-payments/manage-payments]

Test the APIs yourself in our API Reference. Don't hesitate to reach out with any questions or feedback. You can email Primer
directly at support@primer.io [support@primer.io], or contact your Primer account manager.


API ENDPOINT DEPLOYMENTS

 * Sandbox: https://api.sandbox.primer.io [https://api.sandbox.primer.io]
 * Production: https://api.primer.io [https://api.primer.io]


API VERSIONS

Primer makes updates to the APIs on a regular basis, as we release new features. To allow you to update your integration as you
are ready, we allow for a X-Api-Version header to be passed on all API requests.

If you omit the version header, your request will default to the earliest supported version of the API.

curl -X POST 'https://api.primer.io/<ENDPOINT>' \\
  --header 'X-Api-Version: 2.2'



AVAILABLE VERSIONS

Read about the available versions of the APIs below on our Changelog [https://apiref.primer.io/changelog].",
    "indexSegmentId": "v2-constant",
    "path": {
      "parts": [
        {
          "name": "Introduction",
          "urlSlug": "introduction",
        },
        {
          "name": "Getting Started",
          "urlSlug": "getting-started",
        },
      ],
    },
    "title": "Getting Started",
    "type": "page-v2",
    "version": {
      "id": "v2",
      "urlSlug": "v-2",
    },
  },
  {
    "breadcrumbs": [
      {
        "slug": "introduction/authentication",
        "title": "Authentication",
      },
    ],
    "content": "Primer uses API keys to authenticate requests. You can manage API keys in the [Developers](https://sandbox-dashboard.primer.io/developers) area of the dashboard.

As API keys carry many privileges such as _authorizing_ payments, it is important to keep them **private** and **secure**. Do not hardcode or share API keys (particularly in your source version control system), and they should only be used in your backend.

Authentication is handled via HTTP headers, specifically the \`X-Api-Key\` header.

\`\`\`bash
curl -X POST 'https://api.primer.io/' \\
--header 'X-Api-Key: '
\`\`\`",
    "indexSegmentId": "v2-constant",
    "slug": "introduction/authentication",
    "title": "Authentication",
    "type": "markdown-section-v1",
  },
  {
    "breadcrumbs": [
      {
        "slug": "introduction/authentication",
        "title": "Authentication",
      },
      {
        "slug": "introduction/authentication#managing-api-keys",
        "title": "Managing API Keys",
      },
    ],
    "content": "Head up to the [Developers area](https://sandbox-dashboard.primer.io/developers) on the dashboard to manage your API keys.

You will be able to generate or revoke API keys and edit their respective scopes. Be aware that any changes to existing API keys will be reflected immediately and could cause unwanted side effects.",
    "indexSegmentId": "v2-constant",
    "slug": "introduction/authentication#managing-api-keys",
    "title": "Managing API Keys",
    "type": "markdown-section-v1",
  },
  {
    "breadcrumbs": [
      {
        "slug": "introduction/authentication",
        "title": "Authentication",
      },
      {
        "slug": "introduction/authentication#available-scopes",
        "title": "Available scopes",
      },
    ],
    "content": "| Scope                         | Description                                                                                                                                                                           |
| ----------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| \`client_tokens:write\`         | Create client tokens for use with the client SDK.                                                                                                                                     |
| \`third_party:webhook_trigger\` | Allows you to post to our webhooks endpoint. API keys with this scope can be used to enable communication between your processor and Primer about important payment lifecycle events. |
| \`transactions:authorize\`      | Authorize a payment                                                                                                                                                                   |
| \`transactions:cancel\`         | Cancel a payment.                                                                                                                                                                     |
| \`transactions:capture\`        | Submit a payment for settlement.                                                                                                                                                      |
| \`transactions:retrieve\`       | Retrieve one or more payments.                                                                                                                                                        |
| \`transactions:refund\`         | Refund a payment.                                                                                                                                                                     |
| \`payment_instrument:read\`     | Read stored payment methods.                                                                                                                                                          |
| \`payment_instrument:write\`    | Write stored payment methods.                                                                                                                                                         |",
    "indexSegmentId": "v2-constant",
    "slug": "introduction/authentication#available-scopes",
    "title": "Available scopes",
    "type": "markdown-section-v1",
  },
  {
    "breadcrumbs": [],
    "description": "Primer uses API keys to authenticate requests. You can manage API keys in the [Developers](https://sandbox-dashboard.primer.io/developers) area of the dashboard.

As API keys carry many privileges such as _authorizing_ payments, it is important to keep them **private** and **secure**. Do not hardcode or share API keys (particularly in your source version control system), and they should only be used in your backend.

Authentication is handled via HTTP headers, specifically the \`X-Api-Key\` header.

\`\`\`bash
curl -X POST 'https://api.primer.io/<ENDPOINT>' \\
--header 'X-Api-Key: <YOUR_API_KEY>'
\`\`\`

",
    "indexSegmentId": "v2-constant",
    "slug": "introduction/authentication",
    "title": "Authentication",
    "type": "page-v4",
    "version": {
      "id": "v2",
      "slug": "v-2",
    },
  },
  {
    "content": "Primer uses API keys to authenticate requests. You can manage API keys in the Developers
[https://sandbox-dashboard.primer.io/developers] area of the dashboard.

As API keys carry many privileges such as authorizing payments, it is important to keep them private and secure. Do not hardcode
or share API keys (particularly in your source version control system), and they should only be used in your backend.

Authentication is handled via HTTP headers, specifically the X-Api-Key header.

curl -X POST 'https://api.primer.io/<ENDPOINT>' \\
  --header 'X-Api-Key: <YOUR_API_KEY>'



MANAGING API KEYS

Head up to the Developers area [https://sandbox-dashboard.primer.io/developers] on the dashboard to manage your API keys.

You will be able to generate or revoke API keys and edit their respective scopes. Be aware that any changes to existing API keys
will be reflected immediately and could cause unwanted side effects.


AVAILABLE SCOPES

Scope Description client_tokens:write Create client tokens for use with the client SDK. third_party:webhook_trigger Allows you to
post to our webhooks endpoint. API keys with this scope can be used to enable communication between your processor and Primer
about important payment lifecycle events. transactions:authorize Authorize a payment transactions:cancel Cancel a payment.
transactions:capture Submit a payment for settlement. transactions:retrieve Retrieve one or more payments. transactions:refund
Refund a payment. payment_instrument:read Read stored payment methods. payment_instrument:write Write stored payment methods.",
    "indexSegmentId": "v2-constant",
    "path": {
      "parts": [
        {
          "name": "Introduction",
          "urlSlug": "introduction",
        },
        {
          "name": "Authentication",
          "urlSlug": "authentication",
        },
      ],
    },
    "title": "Authentication",
    "type": "page-v2",
    "version": {
      "id": "v2",
      "urlSlug": "v-2",
    },
  },
  {
    "breadcrumbs": [
      {
        "slug": "introduction/api-responses",
        "title": "API Responses",
      },
      {
        "slug": "introduction/api-responses#status-codes",
        "title": "Status Codes",
      },
    ],
    "content": "The following table summarizes the HTTP response codes you may receive from
the Primer REST API.

| Status Code | Description             |
| ----------- | ----------------------- |
| \`200\`       | Success                 |
| \`400\`       | Bad Request             |
| \`401\`       | Unauthorized            |
| \`403\`       | Forbidden               |
| \`404\`       | Entity Not Found        |
| \`409\`       | Entity Already Exists   |
| \`422\`       | Input Validation Failed |",
    "indexSegmentId": "v2-constant",
    "slug": "introduction/api-responses#status-codes",
    "title": "Status Codes",
    "type": "markdown-section-v1",
  },
  {
    "breadcrumbs": [
      {
        "slug": "introduction/api-responses",
        "title": "API Responses",
      },
      {
        "slug": "introduction/api-responses#error-responses",
        "title": "Error Responses",
      },
    ],
    "content": "Primer uses conventional HTTP response codes to indicate the success or failure of an API request. HTTP codes in the \`2XX\` range indicate a successful request, whereas codes in the \`4XX\` range indicate a failed request usually due to invalid inputs or operations.

The format of the payload for all errors is common. When an unsuccessful request occurs, you will receive a payload in the following format:

\`\`\`json
{
"error": {
"errorId": "AnErrorId",
"description": "A human description of the error.",
"diagnosticsId": "1234567890",
"validationErrors": []
}
}
\`\`\`

All error payloads will be comprised of a unique \`errorId\` which you can use to identify the error, a human description \`description\`, and a \`diagnosticsId\` that you can quote when contacting the support team ([support@primer.io](mailto:support@primer.io)). In case of a badly formed request, Primer will also return additional \`validationErrors\`.",
    "indexSegmentId": "v2-constant",
    "slug": "introduction/api-responses#error-responses",
    "title": "Error Responses",
    "type": "markdown-section-v1",
  },
  {
    "breadcrumbs": [
      {
        "slug": "introduction/api-responses",
        "title": "API Responses",
      },
      {
        "slug": "introduction/api-responses#payment-status",
        "title": "Payment Status",
      },
    ],
    "content": "As the payments are created, processed, and finalised, they go through a number of states that you will get as an API response, through webhook notifications, and in the Dashboard. These states are used across all processors, as processor specific states are mapped to these. An additional message, in the field \`processorMessage\`, from the processor may also be included that details the reason for the state, primarily on failure states.

| Status              | Description                                                                                                                                         |
| ------------------- | --------------------------------------------------------------------------------------------------------------------------------------------------- |
| \`PENDING\`           | The payment has been created by Primer but not yet authorized.                                                                                      |
| \`FAILED\`            | The processor failed to process this payment.                                                                                                       |
| \`AUTHORIZED\`        | The payment is authorized and awaiting capture.                                                                                                     |
| \`SETTLING\`          | The payment has been submitted for settlement and funds will be settled later.                                                                      |
| \`PARTIALLY_SETTLED\` | The payment has been partially settled.                                                                                                             |
| \`SETTLED\`           | Funds have been settled into your account.                                                                                                          |
| \`DECLINED\`          | This payment was declined by the processor, either at a gateway or acquirer level. See the reason object in your response payload for more details. |
| \`CANCELLED\`         | The payment was cancelled prior to it being settled.                                                                                                |

Don't hesitate to reach out with any questions or feedback. You can email Primer directly at [support@primer.io](mailto:support@primer.io), or contact your Primer account manager.",
    "indexSegmentId": "v2-constant",
    "slug": "introduction/api-responses#payment-status",
    "title": "Payment Status",
    "type": "markdown-section-v1",
  },
  {
    "breadcrumbs": [],
    "description": "",
    "indexSegmentId": "v2-constant",
    "slug": "introduction/api-responses",
    "title": "API Responses",
    "type": "page-v4",
    "version": {
      "id": "v2",
      "slug": "v-2",
    },
  },
  {
    "content": "STATUS CODES

The following table summarizes the HTTP response codes you may receive from the Primer REST API.

Status Code Description 200 Success 400 Bad Request 401 Unauthorized 403 Forbidden 404 Entity Not Found 409 Entity Already Exists
422 Input Validation Failed


ERROR RESPONSES

Primer uses conventional HTTP response codes to indicate the success or failure of an API request. HTTP codes in the 2XX range
indicate a successful request, whereas codes in the 4XX range indicate a failed request usually due to invalid inputs or
operations.

The format of the payload for all errors is common. When an unsuccessful request occurs, you will receive a payload in the
following format:

{
  "error": {
    "errorId": "AnErrorId",
    "description": "A human description of the error.",
    "diagnosticsId": "1234567890",
    "validationErrors": []
  }
}


All error payloads will be comprised of a unique errorId which you can use to identify the error, a human description description,
and a diagnosticsId that you can quote when contacting the support team (support@primer.io [support@primer.io]). In case of a
badly formed request, Primer will also return additional validationErrors.


PAYMENT STATUS

As the payments are created, processed, and finalised, they go through a number of states that you will get as an API response,
through webhook notifications, and in the Dashboard. These states are used across all processors, as processor specific states are
mapped to these. An additional message, in the field processorMessage, from the processor may also be included that details the
reason for the state, primarily on failure states.

Status Description PENDING The payment has been created by Primer but not yet authorized. FAILED The processor failed to process
this payment. AUTHORIZED The payment is authorized and awaiting capture. SETTLING The payment has been submitted for settlement
and funds will be settled later. PARTIALLY_SETTLED The payment has been partially settled. SETTLED Funds have been settled into
your account. DECLINED This payment was declined by the processor, either at a gateway or acquirer level. See the reason object in
your response payload for more details. CANCELLED The payment was cancelled prior to it being settled.

Don't hesitate to reach out with any questions or feedback. You can email Primer directly at support@primer.io
[support@primer.io], or contact your Primer account manager.",
    "indexSegmentId": "v2-constant",
    "path": {
      "parts": [
        {
          "name": "Introduction",
          "urlSlug": "introduction",
        },
        {
          "name": "API Responses",
          "urlSlug": "api-responses",
        },
      ],
    },
    "title": "API Responses",
    "type": "page-v2",
    "version": {
      "id": "v2",
      "urlSlug": "v-2",
    },
  },
  {
    "breadcrumbs": [
      {
        "slug": "introduction/idempotency-key",
        "title": "Idempotency Key",
      },
    ],
    "content": "Primer supports a request idempotency mechanism for our Payments API. This optional feature enables you to safely retry a request without risking the user being charged or refunded multiple times.

This is particularly useful when an API call fails due to the request being invalid, due to a network issue, or if Primer is momentarily unavailable.

If this is the case, make another request with the same idempotency key:

- If a request with the same idempotency key has already been successfully processed by Primer, the new request will be ignored. A \`400\` error will be returned with an \`errorId\` set to \`TransactionRequestIdempotencyKeyAlreadyExists\`.
- Otherwise, Primer will attempt to process the new request.

To make an idempotent request, generate an idempotency key and pass it to the header \`X-Idempotency-Key\`.

\`\`\`bash
curl -X POST 'https://api.primer.io/' \\
--header 'X-Idempotency-Key: '
\`\`\`

The way you generate the key is totally up to you, as long as it is unique per request attempt.

Keep in mind that a payment request resulting in a declined or failed payment is still considered _Successfully processed_ for the API. Therefore, if you want to allow the user to retry an unsuccessful payment, make sure to not use the same idempotency key.

As a such, don't use anything too restrictive like an \`orderId\` for the idempotency key as multiple payment attempts and refunds can be made for a single order.",
    "indexSegmentId": "v2-constant",
    "slug": "introduction/idempotency-key",
    "title": "Idempotency Key",
    "type": "markdown-section-v1",
  },
  {
    "breadcrumbs": [],
    "description": "Primer supports a request idempotency mechanism for our Payments API. This optional feature enables you to safely retry a request without risking the user being charged or refunded multiple times.

This is particularly useful when an API call fails due to the request being invalid, due to a network issue, or if Primer is momentarily unavailable.

If this is the case, make another request with the same idempotency key:

- If a request with the same idempotency key has already been successfully processed by Primer, the new request will be ignored. A \`400\` error will be returned with an \`errorId\` set to \`TransactionRequestIdempotencyKeyAlreadyExists\`.
- Otherwise, Primer will attempt to process the new request.

To make an idempotent request, generate an idempotency key and pass it to the header \`X-Idempotency-Key\`.

\`\`\`bash
curl -X POST 'https://api.primer.io/<ENDPOINT>' \\
--header 'X-Idempotency-Key: <idempotency-key>'
\`\`\`

The way you generate the key is totally up to you, as long as it is unique per request attempt.

Keep in mind that a payment request resulting in a declined or failed payment is still considered _Successfully processed_ for the API. Therefore, if you want to allow the user to retry an unsuccessful payment, make sure to not use the same idempotency key.

As a such, don't use anything too restrictive like an \`orderId\` for the idempotency key as multiple payment attempts and refunds can be made for a single order.

",
    "indexSegmentId": "v2-constant",
    "slug": "introduction/idempotency-key",
    "title": "Idempotency Key",
    "type": "page-v4",
    "version": {
      "id": "v2",
      "slug": "v-2",
    },
  },
  {
    "content": "Primer supports a request idempotency mechanism for our Payments API. This optional feature enables you to safely retry a request
without risking the user being charged or refunded multiple times.

This is particularly useful when an API call fails due to the request being invalid, due to a network issue, or if Primer is
momentarily unavailable.

If this is the case, make another request with the same idempotency key:

 * If a request with the same idempotency key has already been successfully processed by Primer, the new request will be ignored.
   A 400 error will be returned with an errorId set to TransactionRequestIdempotencyKeyAlreadyExists.
 * Otherwise, Primer will attempt to process the new request.

To make an idempotent request, generate an idempotency key and pass it to the header X-Idempotency-Key.

curl -X POST 'https://api.primer.io/<ENDPOINT>' \\
  --header 'X-Idempotency-Key: <idempotency-key>'


The way you generate the key is totally up to you, as long as it is unique per request attempt.

Keep in mind that a payment request resulting in a declined or failed payment is still considered Successfully processed for the
API. Therefore, if you want to allow the user to retry an unsuccessful payment, make sure to not use the same idempotency key.

As a such, don't use anything too restrictive like an orderId for the idempotency key as multiple payment attempts and refunds can
be made for a single order.",
    "indexSegmentId": "v2-constant",
    "path": {
      "parts": [
        {
          "name": "Introduction",
          "urlSlug": "introduction",
        },
        {
          "name": "Idempotency Key",
          "urlSlug": "idempotency-key",
        },
      ],
    },
    "title": "Idempotency Key",
    "type": "page-v2",
    "version": {
      "id": "v2",
      "urlSlug": "v-2",
    },
  },
  {
    "breadcrumbs": [
      {
        "slug": "introduction/loyalty-transactions",
        "title": "Loyalty Transactions",
      },
    ],
    "content": "Primer's Loyalty API provides an interface to interact with 3rd party loyalty point and service providers.

All of the endpoints below reference a \`connectionId\`. This is the unique Primer identifier for your loyalty provider connection. Primer will provide this once the loyalty provider connection is created.

To identify the customer in the context of the loyalty provider, a \`customerId\` is also necessary.",
    "indexSegmentId": "v2-constant",
    "slug": "introduction/loyalty-transactions",
    "title": "Loyalty Transactions",
    "type": "markdown-section-v1",
  },
  {
    "breadcrumbs": [
      {
        "slug": "introduction/loyalty-transactions",
        "title": "Loyalty Transactions",
      },
      {
        "slug": "introduction/loyalty-transactions#get-the-customer-balance",
        "title": "Get the customer balance",
      },
    ],
    "content": "Call the [Loyalty Customers](https://apiref.primer.io/reference/get_loyalty_customer) endpoint, which includes the customer's balance. In future this object could contain further details.",
    "indexSegmentId": "v2-constant",
    "slug": "introduction/loyalty-transactions#get-the-customer-balance",
    "title": "Get the customer balance",
    "type": "markdown-section-v1",
  },
  {
    "breadcrumbs": [
      {
        "slug": "introduction/loyalty-transactions",
        "title": "Loyalty Transactions",
      },
      {
        "slug": "introduction/loyalty-transactions#redeem-points",
        "title": "Redeem points",
      },
    ],
    "content": "Call the [Loyalty Transactions](https://apiref.primer.io/reference/post_loyalty_transaction) endpoint to create a \`REDEMPTION\` transaction.

Provide an \`orderId\` to link multiple transactions together.",
    "indexSegmentId": "v2-constant",
    "slug": "introduction/loyalty-transactions#redeem-points",
    "title": "Redeem points",
    "type": "markdown-section-v1",
  },
  {
    "breadcrumbs": [
      {
        "slug": "introduction/loyalty-transactions",
        "title": "Loyalty Transactions",
      },
      {
        "slug": "introduction/loyalty-transactions#refund-points",
        "title": "Refund points",
      },
    ],
    "content": "Call the [Loyalty Transactions](https://apiref.primer.io/reference/post_loyalty_transaction) endpoint to create a \`REFUND\` transaction. This transaction is completely independent from a redeem transaction.

Provide an \`orderId\` to link multiple transactions together.",
    "indexSegmentId": "v2-constant",
    "slug": "introduction/loyalty-transactions#refund-points",
    "title": "Refund points",
    "type": "markdown-section-v1",
  },
  {
    "breadcrumbs": [
      {
        "slug": "introduction/loyalty-transactions",
        "title": "Loyalty Transactions",
      },
      {
        "slug": "introduction/loyalty-transactions#get-a-list-of-transactions",
        "title": "Get a list of transactions",
      },
    ],
    "content": "Call the [Loyalty Transactions](https://apiref.primer.io/reference/get_loyalty_transaction) endpoint to retrieve a list of all your transactions. In most cases it makes sense to filter by \`connectionId\`. You can also filter by \`customerId\` or \`orderId\`.",
    "indexSegmentId": "v2-constant",
    "slug": "introduction/loyalty-transactions#get-a-list-of-transactions",
    "title": "Get a list of transactions",
    "type": "markdown-section-v1",
  },
  {
    "breadcrumbs": [],
    "description": "Primer's Loyalty API provides an interface to interact with 3rd party loyalty point and service providers.

All of the endpoints below reference a \`connectionId\`. This is the unique Primer identifier for your loyalty provider connection. Primer will provide this once the loyalty provider connection is created.

To identify the customer in the context of the loyalty provider, a \`customerId\` is also necessary.

",
    "indexSegmentId": "v2-constant",
    "slug": "introduction/loyalty-transactions",
    "title": "Loyalty Transactions",
    "type": "page-v4",
    "version": {
      "id": "v2",
      "slug": "v-2",
    },
  },
  {
    "content": "Primer's Loyalty API provides an interface to interact with 3rd party loyalty point and service providers.

All of the endpoints below reference a connectionId. This is the unique Primer identifier for your loyalty provider connection.
Primer will provide this once the loyalty provider connection is created.

To identify the customer in the context of the loyalty provider, a customerId is also necessary.


GET THE CUSTOMER BALANCE

Call the Loyalty Customers [https://apiref.primer.io/reference/get_loyalty_customer] endpoint, which includes the customer's
balance. In future this object could contain further details.


REDEEM POINTS

Call the Loyalty Transactions [https://apiref.primer.io/reference/post_loyalty_transaction] endpoint to create a REDEMPTION
transaction.

Provide an orderId to link multiple transactions together.


REFUND POINTS

Call the Loyalty Transactions [https://apiref.primer.io/reference/post_loyalty_transaction] endpoint to create a REFUND
transaction. This transaction is completely independent from a redeem transaction.

Provide an orderId to link multiple transactions together.


GET A LIST OF TRANSACTIONS

Call the Loyalty Transactions [https://apiref.primer.io/reference/get_loyalty_transaction] endpoint to retrieve a list of all your
transactions. In most cases it makes sense to filter by connectionId. You can also filter by customerId or orderId.",
    "indexSegmentId": "v2-constant",
    "path": {
      "parts": [
        {
          "name": "Introduction",
          "urlSlug": "introduction",
        },
        {
          "name": "Loyalty Transactions",
          "urlSlug": "loyalty-transactions",
        },
      ],
    },
    "title": "Loyalty Transactions",
    "type": "page-v2",
    "version": {
      "id": "v2",
      "urlSlug": "v-2",
    },
  },
  {
    "endpoint": {
      "description": "Creating a client session generates a client token: a temporary key used to initialize Universal Checkout
[https://primer.io/docs/accept-payments/setup-universal-checkout/installation/web] and authenticate it against your account.

Universal Checkout automatically retrieves all the settings from the client session and the Dashboard to configure the payment
methods and the checkout experience.

Note: When creating a Client Session, please make sure to provide currencyCode, orderId, and amount. If any of these are not yet
available, you can provide them when making the payment request.

Client tokens expire after 24 hours.",
      "method": "POST",
      "name": "Create a client session",
      "path": {
        "parts": [
          {
            "type": "literal",
            "value": "",
          },
          {
            "type": "literal",
            "value": "/client-session",
          },
        ],
      },
    },
    "indexSegmentId": "v2-constant",
    "path": {
      "parts": [
        {
          "name": "Primer API",
          "urlSlug": "primer-api",
        },
        {
          "name": "Client Session API",
          "urlSlug": "client-session-api",
        },
        {
          "name": "Create a client session",
          "urlSlug": "create-client-side-token",
        },
      ],
    },
    "type": "endpoint-v2",
    "version": {
      "id": "v2",
      "urlSlug": "v-2",
    },
  },
  {
    "endpoint": {
      "description": "Retrieve a list of your payments.

Results are paginated, they will only return up to 100 payments maximum. To access the next page of result, set the cursor query
parameter to the value of nextCursor in your current result payload. Use prevCursor to go back to the previous page.

Note: this endpoint returns a list of summarized payments. Not all payments attributes are present. You can use the query
parameters to filter payments. You can separate multiple query parameters with the & symbol. Query parameters with types of the
form "Array of strings" (such as the status parameter) can be specified as a comma-separated list.

For example, if you wanted to get both FAILED and CANCELLED payments, for customer john-123, you would use:

curl --location --request GET 'https://api.primer.io/payments?status=FAILED,CANCELLED&customer_id=john-123' \\
--header 'X-Api-Key: <YOUR_API_KEY>'


You can alternatively specify a list by repeating the parameter multiple times.

Note: payments will be available within a minute from being created.",
      "method": "GET",
      "name": "Search & list payments",
      "path": {
        "parts": [
          {
            "type": "literal",
            "value": "",
          },
          {
            "type": "literal",
            "value": "/payments",
          },
        ],
      },
    },
    "indexSegmentId": "v2-constant",
    "path": {
      "parts": [
        {
          "name": "Primer API",
          "urlSlug": "primer-api",
        },
        {
          "name": "Payments API",
          "urlSlug": "payments-api",
        },
        {
          "name": "Search & list payments",
          "urlSlug": "list-payments",
        },
      ],
    },
    "type": "endpoint-v2",
    "version": {
      "id": "v2",
      "urlSlug": "v-2",
    },
  },
  {
    "endpoint": {
      "description": "Create and authorize a payment for a given customer order. You should provide a payment method token here to avoid PCI
implications.

If only a payment method token is passed, the values passed with the Client Session determine the amount, currency etc.

Note: amount, currencyCode and orderId are required during payment creation. Make sure to pass these fields when creating a client
session, or if not yet available, when creating a payment.

All fields provided on this request will take preference over any field on the order associated with the client session. E.g. if
you pass amount on this request, it will override the amount on the order associated with the Client Session.",
      "method": "POST",
      "name": "Create a payment",
      "path": {
        "parts": [
          {
            "type": "literal",
            "value": "",
          },
          {
            "type": "literal",
            "value": "/payments",
          },
        ],
      },
    },
    "indexSegmentId": "v2-constant",
    "path": {
      "parts": [
        {
          "name": "Primer API",
          "urlSlug": "primer-api",
        },
        {
          "name": "Payments API",
          "urlSlug": "payments-api",
        },
        {
          "name": "Create a payment",
          "urlSlug": "create-payment",
        },
      ],
    },
    "type": "endpoint-v2",
    "version": {
      "id": "v2",
      "urlSlug": "v-2",
    },
  },
  {
    "endpoint": {
      "description": "If you have successfully authorized a payment, you can now fully capture, or partially capture funds from the authorized payment,
depending on whether your selected payment processor supports it. The payment will be updated to SETTLED or SETTLING, depending on
the payment method type.

The payload sent in this capture request is completely optional. If you don't send a payload with the capture request, the full
amount that was authorized will be sent for capture.

Below are the available payload attributes, which give you more granular control when capturing funds, if you require it.",
      "method": "POST",
      "name": "Capture a payment",
      "path": {
        "parts": [
          {
            "type": "literal",
            "value": "",
          },
          {
            "type": "literal",
            "value": "/payments/",
          },
          {
            "type": "pathParameter",
            "value": "id",
          },
          {
            "type": "literal",
            "value": "/capture",
          },
        ],
      },
    },
    "indexSegmentId": "v2-constant",
    "path": {
      "parts": [
        {
          "name": "Primer API",
          "urlSlug": "primer-api",
        },
        {
          "name": "Payments API",
          "urlSlug": "payments-api",
        },
        {
          "name": "Capture a payment",
          "urlSlug": "capture-payment",
        },
      ],
    },
    "type": "endpoint-v2",
    "version": {
      "id": "v2",
      "urlSlug": "v-2",
    },
  },
  {
    "endpoint": {
      "description": "Provided the payment has not reached SETTLED status, Primer will send a "void" request to the payment processor, thereby
cancelling the payment and releasing the hold on customer funds.

Upon success, the payment will transition to CANCELLED.

The payload is optional.",
      "method": "POST",
      "name": "Cancel a payment",
      "path": {
        "parts": [
          {
            "type": "literal",
            "value": "",
          },
          {
            "type": "literal",
            "value": "/payments/",
          },
          {
            "type": "pathParameter",
            "value": "id",
          },
          {
            "type": "literal",
            "value": "/cancel",
          },
        ],
      },
    },
    "indexSegmentId": "v2-constant",
    "path": {
      "parts": [
        {
          "name": "Primer API",
          "urlSlug": "primer-api",
        },
        {
          "name": "Payments API",
          "urlSlug": "payments-api",
        },
        {
          "name": "Cancel a payment",
          "urlSlug": "cancel-payment",
        },
      ],
    },
    "type": "endpoint-v2",
    "version": {
      "id": "v2",
      "urlSlug": "v-2",
    },
  },
  {
    "endpoint": {
      "description": "By default, this request will refund the full amount.

Optionally, pass in a lesser amount for a partial refund.",
      "method": "POST",
      "name": "Refund a payment",
      "path": {
        "parts": [
          {
            "type": "literal",
            "value": "",
          },
          {
            "type": "literal",
            "value": "/payments/",
          },
          {
            "type": "pathParameter",
            "value": "id",
          },
          {
            "type": "literal",
            "value": "/refund",
          },
        ],
      },
    },
    "indexSegmentId": "v2-constant",
    "path": {
      "parts": [
        {
          "name": "Primer API",
          "urlSlug": "primer-api",
        },
        {
          "name": "Payments API",
          "urlSlug": "payments-api",
        },
        {
          "name": "Refund a payment",
          "urlSlug": "refund-payment",
        },
      ],
    },
    "type": "endpoint-v2",
    "version": {
      "id": "v2",
      "urlSlug": "v-2",
    },
  },
  {
    "endpoint": {
      "description": "Resume a payment's workflow execution from a paused state. This is usually required when a Workflow was paused in order to get
further information from the customer, or when waiting for an asynchronous response from a third party connection.",
      "method": "POST",
      "name": "Resume a payment",
      "path": {
        "parts": [
          {
            "type": "literal",
            "value": "",
          },
          {
            "type": "literal",
            "value": "/payments/",
          },
          {
            "type": "pathParameter",
            "value": "id",
          },
          {
            "type": "literal",
            "value": "/resume",
          },
        ],
      },
    },
    "indexSegmentId": "v2-constant",
    "path": {
      "parts": [
        {
          "name": "Primer API",
          "urlSlug": "primer-api",
        },
        {
          "name": "Payments API",
          "urlSlug": "payments-api",
        },
        {
          "name": "Resume a payment",
          "urlSlug": "resume-payment",
        },
      ],
    },
    "type": "endpoint-v2",
    "version": {
      "id": "v2",
      "urlSlug": "v-2",
    },
  },
  {
    "endpoint": {
      "description": "Retrieve a payment by its ID.",
      "method": "GET",
      "name": "Get a payment",
      "path": {
        "parts": [
          {
            "type": "literal",
            "value": "",
          },
          {
            "type": "literal",
            "value": "/payments/",
          },
          {
            "type": "pathParameter",
            "value": "id",
          },
          {
            "type": "literal",
            "value": "",
          },
        ],
      },
    },
    "indexSegmentId": "v2-constant",
    "path": {
      "parts": [
        {
          "name": "Primer API",
          "urlSlug": "primer-api",
        },
        {
          "name": "Payments API",
          "urlSlug": "payments-api",
        },
        {
          "name": "Get a payment",
          "urlSlug": "get-payment-by-id",
        },
      ],
    },
    "type": "endpoint-v2",
    "version": {
      "id": "v2",
      "urlSlug": "v-2",
    },
  },
  {
    "endpoint": {
      "description": "Save a SINGLE_USE payment method token so it can be used again later.

If you try to vault an already vaulted token, you will get the existing vaulted token back.",
      "method": "POST",
      "name": "Save a payment method token",
      "path": {
        "parts": [
          {
            "type": "literal",
            "value": "",
          },
          {
            "type": "literal",
            "value": "/payment-instruments/",
          },
          {
            "type": "pathParameter",
            "value": "token",
          },
          {
            "type": "literal",
            "value": "/vault",
          },
        ],
      },
    },
    "indexSegmentId": "v2-constant",
    "path": {
      "parts": [
        {
          "name": "Primer API",
          "urlSlug": "primer-api",
        },
        {
          "name": "Payment Methods API",
          "urlSlug": "payment-methods-api",
        },
        {
          "name": "Save a payment method token",
          "urlSlug": "vault-payment-method-payment-methods-token-vault-post",
        },
      ],
    },
    "type": "endpoint-v2",
    "version": {
      "id": "v2",
      "urlSlug": "v-2",
    },
  },
  {
    "endpoint": {
      "description": "Retrieve a list of stored payment methods for a customer.",
      "method": "GET",
      "name": "List saved payment methods",
      "path": {
        "parts": [
          {
            "type": "literal",
            "value": "",
          },
          {
            "type": "literal",
            "value": "/payment-instruments",
          },
        ],
      },
    },
    "indexSegmentId": "v2-constant",
    "path": {
      "parts": [
        {
          "name": "Primer API",
          "urlSlug": "primer-api",
        },
        {
          "name": "Payment Methods API",
          "urlSlug": "payment-methods-api",
        },
        {
          "name": "List saved payment methods",
          "urlSlug": "get-payment-methods-payment-methods-get",
        },
      ],
    },
    "type": "endpoint-v2",
    "version": {
      "id": "v2",
      "urlSlug": "v-2",
    },
  },
  {
    "endpoint": {
      "description": "Delete a saved payment method.",
      "method": "DELETE",
      "name": "Delete a saved payment method",
      "path": {
        "parts": [
          {
            "type": "literal",
            "value": "",
          },
          {
            "type": "literal",
            "value": "/payment-instruments/",
          },
          {
            "type": "pathParameter",
            "value": "token",
          },
          {
            "type": "literal",
            "value": "",
          },
        ],
      },
    },
    "indexSegmentId": "v2-constant",
    "path": {
      "parts": [
        {
          "name": "Primer API",
          "urlSlug": "primer-api",
        },
        {
          "name": "Payment Methods API",
          "urlSlug": "payment-methods-api",
        },
        {
          "name": "Delete a saved payment method",
          "urlSlug": "delete-payment-method-payment-methods-token-delete",
        },
      ],
    },
    "type": "endpoint-v2",
    "version": {
      "id": "v2",
      "urlSlug": "v-2",
    },
  },
  {
    "endpoint": {
      "description": "Update a saved payment method to be the default stored payment method for a customer.",
      "method": "POST",
      "name": "Update the default saved payment method",
      "path": {
        "parts": [
          {
            "type": "literal",
            "value": "",
          },
          {
            "type": "literal",
            "value": "/payment-instruments/",
          },
          {
            "type": "pathParameter",
            "value": "token",
          },
          {
            "type": "literal",
            "value": "/default",
          },
        ],
      },
    },
    "indexSegmentId": "v2-constant",
    "path": {
      "parts": [
        {
          "name": "Primer API",
          "urlSlug": "primer-api",
        },
        {
          "name": "Payment Methods API",
          "urlSlug": "payment-methods-api",
        },
        {
          "name": "Update the default saved payment method",
          "urlSlug": "set-payment-method-default-payment-methods-token-default-post",
        },
      ],
    },
    "type": "endpoint-v2",
    "version": {
      "id": "v2",
      "urlSlug": "v-2",
    },
  },
]
`;

exports[`generateAlgoliaSearchRecordsForDocs > {"name":"vellum"} 1`] = `
[
  {
    "breadcrumbs": [
      {
        "slug": "help-center/prompts/prompt-template-syntax",
        "title": "Prompt Template Syntax",
      },
    ],
    "content": "When using an LLM, you input a prompt and get back a completion.
However, in order for a prompt to be reusable, you’ll want to
be able to specify certain parts of it dynamically.

That’s where prompt templates come in. Prompt templates contain
the fixed parts of a prompt with placeholders for the parts that
might change from run to run. When you use a prompt template,
you pass in specific values for the placeholders to create
the final prompt that’s sent to the LLM.

Vellum’s Prompt Syntax supports dynamically constructed
prompts via [jinja templating](https://jinja.palletsprojects.com/en/3.1.x/templates/)
and what we call “blocks.”",
    "indexSegmentId": "constant",
    "slug": "help-center/prompts/prompt-template-syntax",
    "title": "Prompt Template Syntax",
    "type": "markdown-section-v1",
  },
  {
    "breadcrumbs": [
      {
        "slug": "help-center/prompts/prompt-template-syntax",
        "title": "Prompt Template Syntax",
      },
      {
        "slug": "help-center/prompts/prompt-template-syntax#jinja-templating",
        "title": "Jinja Templating",
      },
    ],
    "content": "Jinja is a powerful templating syntax useful for dynamic content.
Most commonly, you’ll use it to reference Prompt Variables.
Below are the most common things you’re likely to want to do,
but you can find jinja’s complete documentation
[here](https://jinja.palletsprojects.com/en/3.1.x/templates/).",
    "indexSegmentId": "constant",
    "slug": "help-center/prompts/prompt-template-syntax#jinja-templating",
    "title": "Jinja Templating",
    "type": "markdown-section-v1",
  },
  {
    "breadcrumbs": [
      {
        "slug": "help-center/prompts/prompt-template-syntax",
        "title": "Prompt Template Syntax",
      },
      {
        "slug": "help-center/prompts/prompt-template-syntax#jinja-templating",
        "title": "Jinja Templating",
      },
      {
        "slug": "help-center/prompts/prompt-template-syntax#variables",
        "title": "Variables",
      },
    ],
    "content": "Reference variables using double-curly-brackets. For example,


\`\`\`
You are a {{ personality_type }} AI assistant.
\`\`\`



Note that all variables are treated as strings!
",
    "indexSegmentId": "constant",
    "slug": "help-center/prompts/prompt-template-syntax#variables",
    "title": "Variables",
    "type": "markdown-section-v1",
  },
  {
    "breadcrumbs": [
      {
        "slug": "help-center/prompts/prompt-template-syntax",
        "title": "Prompt Template Syntax",
      },
      {
        "slug": "help-center/prompts/prompt-template-syntax#jinja-templating",
        "title": "Jinja Templating",
      },
      {
        "slug": "help-center/prompts/prompt-template-syntax#conditionals",
        "title": "Conditionals",
      },
    ],
    "content": "Perform conditional logic based on your input variables using if/else statements


\`\`\`
You are a {{ personality_type }} AI assistant.
{% if personality_type == "rude" %}
You end every message with a frowning emoji.
{% else %}
You end every message with a smiling emoji.
{% endif %}
\`\`\`
",
    "indexSegmentId": "constant",
    "slug": "help-center/prompts/prompt-template-syntax#conditionals",
    "title": "Conditionals",
    "type": "markdown-section-v1",
  },
  {
    "breadcrumbs": [
      {
        "slug": "help-center/prompts/prompt-template-syntax",
        "title": "Prompt Template Syntax",
      },
      {
        "slug": "help-center/prompts/prompt-template-syntax#jinja-templating",
        "title": "Jinja Templating",
      },
      {
        "slug": "help-center/prompts/prompt-template-syntax#comments",
        "title": "Comments",
      },
    ],
    "content": "You can use jinja to leave comments in your prompt that don’t use up any
tokens when compiled and sent to the LLM. For example,


\`\`\`
{# This is a comment #}
Hello, world!
\`\`\`
",
    "indexSegmentId": "constant",
    "slug": "help-center/prompts/prompt-template-syntax#comments",
    "title": "Comments",
    "type": "markdown-section-v1",
  },
  {
    "breadcrumbs": [],
    "description": "When using an LLM, you input a prompt and get back a completion.
However, in order for a prompt to be reusable, you’ll want to
be able to specify certain parts of it dynamically.

That’s where prompt templates come in. Prompt templates contain
the fixed parts of a prompt with placeholders for the parts that
might change from run to run. When you use a prompt template,
you pass in specific values for the placeholders to create
the final prompt that’s sent to the LLM.

Vellum’s Prompt Syntax supports dynamically constructed
prompts via [jinja templating](https://jinja.palletsprojects.com/en/3.1.x/templates/)
and what we call “blocks.”

",
    "indexSegmentId": "constant",
    "slug": "help-center/prompts/prompt-template-syntax",
    "title": "Prompt Template Syntax",
    "type": "page-v4",
  },
  {
    "content": "When using an LLM, you input a prompt and get back a completion. However, in order for a prompt to be reusable, you’ll want to be
able to specify certain parts of it dynamically.

That’s where prompt templates come in. Prompt templates contain the fixed parts of a prompt with placeholders for the parts that
might change from run to run. When you use a prompt template, you pass in specific values for the placeholders to create the final
prompt that’s sent to the LLM.

Vellum’s Prompt Syntax supports dynamically constructed prompts via jinja templating
[https://jinja.palletsprojects.com/en/3.1.x/templates/] and what we call “blocks.”


JINJA TEMPLATING

Jinja is a powerful templating syntax useful for dynamic content. Most commonly, you’ll use it to reference Prompt Variables.
Below are the most common things you’re likely to want to do, but you can find jinja’s complete documentation here
[https://jinja.palletsprojects.com/en/3.1.x/templates/].


VARIABLES

Reference variables using double-curly-brackets. For example,

\`\`\` You are a {{ personality_type }} AI assistant. \`\`\` Note that all variables are treated as strings!


CONDITIONALS

Perform conditional logic based on your input variables using if/else statements

\`\`\` You are a {{ personality_type }} AI assistant. {% if personality_type == "rude" %} You end every message with a frowning
emoji. {% else %} You end every message with a smiling emoji. {% endif %} \`\`\`


COMMENTS

You can use jinja to leave comments in your prompt that don’t use up any tokens when compiled and sent to the LLM. For example,

\`\`\` {# This is a comment #} Hello, world! \`\`\`",
    "indexSegmentId": "constant",
    "path": {
      "parts": [
        {
          "name": "Help Center",
          "urlSlug": "help-center",
        },
        {
          "name": "Prompts",
          "urlSlug": "prompts",
        },
        {
          "name": "Prompt Template Syntax",
          "urlSlug": "prompt-template-syntax",
        },
      ],
    },
    "title": "Prompt Template Syntax",
    "type": "page-v2",
  },
  {
    "breadcrumbs": [
      {
        "slug": "help-center/prompts/playground-history-and-collaboration",
        "title": "Playground History and Collaboration",
      },
    ],
    "content": "Vellum Playground is a powerful tool for rapid iteration and
collaboration between multiple models and prompts. Save, tag,
and share your work with ease using the features outlined below.",
    "indexSegmentId": "constant",
    "slug": "help-center/prompts/playground-history-and-collaboration",
    "title": "Playground History and Collaboration",
    "type": "markdown-section-v1",
  },
  {
    "breadcrumbs": [
      {
        "slug": "help-center/prompts/playground-history-and-collaboration",
        "title": "Playground History and Collaboration",
      },
      {
        "slug": "help-center/prompts/playground-history-and-collaboration#history",
        "title": "History",
      },
    ],
    "content": "Every model generated response and respective prompt are saved
as history items, giving you access to a detailed record of your
work. To access history items, simply activate the toggle button
located at the top right of the Playground, and all history items
will appear on the left side of your screen.

![Playground History](https://vellum-ai.notion.site/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2Fd638fb25-1fc2-4b3a-adeb-295f56837599%2FScreenshot_5_9_23__6_56_PM.png?table=block&id=d0a3d881-45a2-43fe-954a-d9c77e3641b1&spaceId=71c05e3e-272b-4acf-9889-90a304d95d06&width=2000&userId=&cache=v2)",
    "indexSegmentId": "constant",
    "slug": "help-center/prompts/playground-history-and-collaboration#history",
    "title": "History",
    "type": "markdown-section-v1",
  },
  {
    "breadcrumbs": [
      {
        "slug": "help-center/prompts/playground-history-and-collaboration",
        "title": "Playground History and Collaboration",
      },
      {
        "slug": "help-center/prompts/playground-history-and-collaboration#save-collaboration-and-tags",
        "title": "Save, Collaboration, and Tags",
      },
    ],
    "content": "The Playground is designed to help you iterate on prompts and model
providers until you find the perfect fit for your needs. With the
history feature, you can keep track of your team's work in an organized
way by only keeping the iterations you choose to, through the \`save\` button.

Everyone working on the same sandbox can see each other's history items,
and you can also tag them to keep better track of your work.

![Playground](https://vellum-ai.notion.site/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2Fc924c967-face-48d8-946f-29559ee35edf%2FScreenshot_5_9_23__7_20_PM.png?table=block&id=e5eed871-fcb8-4122-826c-3542801fc8ec&spaceId=71c05e3e-272b-4acf-9889-90a304d95d06&width=2000&userId=&cache=v2)",
    "indexSegmentId": "constant",
    "slug": "help-center/prompts/playground-history-and-collaboration#save-collaboration-and-tags",
    "title": "Save, Collaboration, and Tags",
    "type": "markdown-section-v1",
  },
  {
    "breadcrumbs": [
      {
        "slug": "help-center/prompts/playground-history-and-collaboration",
        "title": "Playground History and Collaboration",
      },
      {
        "slug": "help-center/prompts/playground-history-and-collaboration#share-your-work",
        "title": "Share Your Work",
      },
    ],
    "content": "At any point in time, you can easily share your work with anyone in
your organization through a URL by using the “invite” button located
at the top right of the page.

![Share](https://vellum-ai.notion.site/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2F878ebe27-a33d-4d69-9b5d-168bac6b7350%2FScreenshot_5_9_23__7_26_PM.png?table=block&id=16065c5d-5cd4-4b32-adbb-89656696e93b&spaceId=71c05e3e-272b-4acf-9889-90a304d95d06&width=2000&userId=&cache=v2)

With these powerful features, Vellum Playground makes it easy to collaborate,
iterate, and share your work, all in one place.",
    "indexSegmentId": "constant",
    "slug": "help-center/prompts/playground-history-and-collaboration#share-your-work",
    "title": "Share Your Work",
    "type": "markdown-section-v1",
  },
  {
    "breadcrumbs": [],
    "description": "Vellum Playground is a powerful tool for rapid iteration and
collaboration between multiple models and prompts. Save, tag,
and share your work with ease using the features outlined below.

",
    "indexSegmentId": "constant",
    "slug": "help-center/prompts/playground-history-and-collaboration",
    "title": "Playground History and Collaboration",
    "type": "page-v4",
  },
  {
    "content": "Vellum Playground is a powerful tool for rapid iteration and collaboration between multiple models and prompts. Save, tag, and
share your work with ease using the features outlined below.


HISTORY

Every model generated response and respective prompt are saved as history items, giving you access to a detailed record of your
work. To access history items, simply activate the toggle button located at the top right of the Playground, and all history items
will appear on the left side of your screen.

Playground History
[https://vellum-ai.notion.site/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2Fd638fb25-1fc2-4b3a-adeb-295f56837599%2FScreenshot_5_9_23__6_56_PM.png?table=block&id=d0a3d881-45a2-43fe-954a-d9c77e3641b1&spaceId=71c05e3e-272b-4acf-9889-90a304d95d06&width=2000&userId=&cache=v2]


SAVE, COLLABORATION, AND TAGS

The Playground is designed to help you iterate on prompts and model providers until you find the perfect fit for your needs. With
the history feature, you can keep track of your team's work in an organized way by only keeping the iterations you choose to,
through the save button.

Everyone working on the same sandbox can see each other's history items, and you can also tag them to keep better track of your
work.

Playground
[https://vellum-ai.notion.site/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2Fc924c967-face-48d8-946f-29559ee35edf%2FScreenshot_5_9_23__7_20_PM.png?table=block&id=e5eed871-fcb8-4122-826c-3542801fc8ec&spaceId=71c05e3e-272b-4acf-9889-90a304d95d06&width=2000&userId=&cache=v2]


SHARE YOUR WORK

At any point in time, you can easily share your work with anyone in your organization through a URL by using the “invite” button
located at the top right of the page.

Share
[https://vellum-ai.notion.site/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2F878ebe27-a33d-4d69-9b5d-168bac6b7350%2FScreenshot_5_9_23__7_26_PM.png?table=block&id=16065c5d-5cd4-4b32-adbb-89656696e93b&spaceId=71c05e3e-272b-4acf-9889-90a304d95d06&width=2000&userId=&cache=v2]

With these powerful features, Vellum Playground makes it easy to collaborate, iterate, and share your work, all in one place.",
    "indexSegmentId": "constant",
    "path": {
      "parts": [
        {
          "name": "Help Center",
          "urlSlug": "help-center",
        },
        {
          "name": "Prompts",
          "urlSlug": "prompts",
        },
        {
          "name": "Playground History and Collaboration",
          "urlSlug": "playground-history-and-collaboration",
        },
      ],
    },
    "title": "Playground History and Collaboration",
    "type": "page-v2",
  },
  {
    "breadcrumbs": [
      {
        "slug": "help-center/documents/uploading-documents",
        "title": "Uploading Documents",
      },
    ],
    "content": "Any document that you want to query against should be uploaded ahead
of time at [https://app.vellum.ai/document-indexes](https://app.vellum.ai/document-indexes).",
    "indexSegmentId": "constant",
    "slug": "help-center/documents/uploading-documents",
    "title": "Uploading Documents",
    "type": "markdown-section-v1",
  },
  {
    "breadcrumbs": [
      {
        "slug": "help-center/documents/uploading-documents",
        "title": "Uploading Documents",
      },
      {
        "slug": "help-center/documents/uploading-documents#what-is-a-document-index",
        "title": "What is a Document Index?",
      },
    ],
    "content": "Document indexes act as a collection of documents grouped together
for performing searches against for a specific use case. For example,
if you are creating a chatbot to query against OpenAI’s help center
documents, the text files of each article in the help center would be
stored in one index. Here's how it looks in Vellum's UI:

![Document Index](https://vellum-ai.notion.site/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2F54b2e006-53eb-4d6a-8a90-e872d2e16426%2FScreen_Shot_2023-03-08_at_3.18.42_PM.png?table=block&id=28e4ab83-3f41-4971-b76e-d26bb9e62d53&spaceId=71c05e3e-272b-4acf-9889-90a304d95d06&width=2000&userId=&cache=v2)",
    "indexSegmentId": "constant",
    "slug": "help-center/documents/uploading-documents#what-is-a-document-index",
    "title": "What is a Document Index?",
    "type": "markdown-section-v1",
  },
  {
    "breadcrumbs": [
      {
        "slug": "help-center/documents/uploading-documents",
        "title": "Uploading Documents",
      },
      {
        "slug": "help-center/documents/uploading-documents#how-to-upload-documents",
        "title": "How to upload documents?",
      },
    ],
    "content": "You can manually upload files through the UI
or via [API](https://docs.vellum.ai/api-reference/documents/upload).

![Upload Documents](https://vellum-ai.notion.site/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2Fd5044345-d0f3-4100-9b65-d002013eb75a%2FScreen_Shot_2023-03-08_at_3.26.38_PM.png?table=block&id=e3d76862-6331-4cad-9fc9-ac593ba4f3f8&spaceId=71c05e3e-272b-4acf-9889-90a304d95d06&width=1060&userId=&cache=v2)

Each document has a \`Name\` and an \`External ID\` which are
initially populated with the name of the file that you upload.

**Name** - Human readable text which is how the document will be visible in Vellum's UI (in documents tab)

**External ID** - As the contents of a document change and the old documents becomes out of date, you can submit the updated document for reindexing re-uploading it and specifying the same \\\`External ID\\\`.",
    "indexSegmentId": "constant",
    "slug": "help-center/documents/uploading-documents#how-to-upload-documents",
    "title": "How to upload documents?",
    "type": "markdown-section-v1",
  },
  {
    "breadcrumbs": [],
    "description": "Any document that you want to query against should be uploaded ahead
of time at [https://app.vellum.ai/document-indexes](https://app.vellum.ai/document-indexes).

",
    "indexSegmentId": "constant",
    "slug": "help-center/documents/uploading-documents",
    "title": "Uploading Documents",
    "type": "page-v4",
  },
  {
    "content": "Any document that you want to query against should be uploaded ahead of time at https://app.vellum.ai/document-indexes
[https://app.vellum.ai/document-indexes].


WHAT IS A DOCUMENT INDEX?

Document indexes act as a collection of documents grouped together for performing searches against for a specific use case. For
example, if you are creating a chatbot to query against OpenAI’s help center documents, the text files of each article in the help
center would be stored in one index. Here's how it looks in Vellum's UI:

Document Index
[https://vellum-ai.notion.site/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2F54b2e006-53eb-4d6a-8a90-e872d2e16426%2FScreen_Shot_2023-03-08_at_3.18.42_PM.png?table=block&id=28e4ab83-3f41-4971-b76e-d26bb9e62d53&spaceId=71c05e3e-272b-4acf-9889-90a304d95d06&width=2000&userId=&cache=v2]


HOW TO UPLOAD DOCUMENTS?

You can manually upload files through the UI or via API [https://docs.vellum.ai/api-reference/documents/upload].

Upload Documents
[https://vellum-ai.notion.site/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2Fd5044345-d0f3-4100-9b65-d002013eb75a%2FScreen_Shot_2023-03-08_at_3.26.38_PM.png?table=block&id=e3d76862-6331-4cad-9fc9-ac593ba4f3f8&spaceId=71c05e3e-272b-4acf-9889-90a304d95d06&width=1060&userId=&cache=v2]

Each document has a Name and an External ID which are initially populated with the name of the file that you upload.

Name - Human readable text which is how the document will be visible in Vellum's UI (in documents tab)

External ID - As the contents of a document change and the old documents becomes out of date, you can submit the updated document
for reindexing re-uploading it and specifying the same \`External ID\`.",
    "indexSegmentId": "constant",
    "path": {
      "parts": [
        {
          "name": "Help Center",
          "urlSlug": "help-center",
        },
        {
          "name": "Documents",
          "urlSlug": "documents",
        },
        {
          "name": "Uploading Documents",
          "urlSlug": "uploading-documents",
        },
      ],
    },
    "title": "Uploading Documents",
    "type": "page-v2",
  },
  {
    "breadcrumbs": [
      {
        "slug": "help-center/deployments/monitoring-production-traffic",
        "title": "Monitoring production traffic",
      },
    ],
    "content": "You can monitor production traffic of a Vellum Deployment through
all the charts in the Monitoring tab. These charts can be filtered
for various time ranges using the “Relative Date” button. This help
doc details the charts you can see on this tab, if you’d like to see
any other information about your Deployment, please don’t hesitate to
reach out and we can add it in!

![Deployment Details](https://vellum-ai.notion.site/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2F79e7e1d0-cac4-4ef6-a4b6-ce5c00302c32%2FUntitled.png?table=block&id=6ef24046-96eb-4c93-980b-9485f31b5551&spaceId=71c05e3e-272b-4acf-9889-90a304d95d06&width=2000&userId=&cache=v2)

**Number of Completions:** Number of requests made against the Generate endpoint

**Average Quality over Time:** Quality tracked for each completion. This is only visible if Quality is filled out either through the UI or Actuals Endpoint API

**Number of Completions w/ Actuals Submitted:** Number of requests that have an associated quality / Actuals indication

**Average Latency over Time:** Time taken for the request to complete

**Num LLM Provider Errors Over Time:** Number of errors from the LLM provider",
    "indexSegmentId": "constant",
    "slug": "help-center/deployments/monitoring-production-traffic",
    "title": "Monitoring production traffic",
    "type": "markdown-section-v1",
  },
  {
    "breadcrumbs": [],
    "description": "You can monitor production traffic of a Vellum Deployment through
all the charts in the Monitoring tab. These charts can be filtered
for various time ranges using the “Relative Date” button. This help
doc details the charts you can see on this tab, if you’d like to see
any other information about your Deployment, please don’t hesitate to
reach out and we can add it in!

![Deployment Details](https://vellum-ai.notion.site/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2F79e7e1d0-cac4-4ef6-a4b6-ce5c00302c32%2FUntitled.png?table=block&id=6ef24046-96eb-4c93-980b-9485f31b5551&spaceId=71c05e3e-272b-4acf-9889-90a304d95d06&width=2000&userId=&cache=v2)

**Number of Completions:** Number of requests made against the Generate endpoint

**Average Quality over Time:** Quality tracked for each completion. This is only visible if Quality is filled out either through the UI or Actuals Endpoint API

**Number of Completions w/ Actuals Submitted:** Number of requests that have an associated quality / Actuals indication

**Average Latency over Time:** Time taken for the request to complete

**Num LLM Provider Errors Over Time:** Number of errors from the LLM provider

",
    "indexSegmentId": "constant",
    "slug": "help-center/deployments/monitoring-production-traffic",
    "title": "Monitoring production traffic",
    "type": "page-v4",
  },
  {
    "content": "You can monitor production traffic of a Vellum Deployment through all the charts in the Monitoring tab. These charts can be
filtered for various time ranges using the “Relative Date” button. This help doc details the charts you can see on this tab, if
you’d like to see any other information about your Deployment, please don’t hesitate to reach out and we can add it in!

Deployment Details
[https://vellum-ai.notion.site/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2F79e7e1d0-cac4-4ef6-a4b6-ce5c00302c32%2FUntitled.png?table=block&id=6ef24046-96eb-4c93-980b-9485f31b5551&spaceId=71c05e3e-272b-4acf-9889-90a304d95d06&width=2000&userId=&cache=v2]

Number of Completions: Number of requests made against the Generate endpoint

Average Quality over Time: Quality tracked for each completion. This is only visible if Quality is filled out either through the
UI or Actuals Endpoint API

Number of Completions w/ Actuals Submitted: Number of requests that have an associated quality / Actuals indication

Average Latency over Time: Time taken for the request to complete

Num LLM Provider Errors Over Time: Number of errors from the LLM provider",
    "indexSegmentId": "constant",
    "path": {
      "parts": [
        {
          "name": "Help Center",
          "urlSlug": "help-center",
        },
        {
          "name": "Deployments",
          "urlSlug": "deployments",
        },
        {
          "name": "Monitoring production traffic",
          "urlSlug": "monitoring-production-traffic",
        },
      ],
    },
    "title": "Monitoring production traffic",
    "type": "page-v2",
  },
  {
    "breadcrumbs": [
      {
        "slug": "api-reference/introduction/getting-started",
        "title": "Getting started",
      },
      {
        "slug": "api-reference/introduction/getting-started#welcome-%F0%9F%91%8B",
        "title": "Welcome 👋",
      },
    ],
    "content": "Welcome to Vellum's API documentation! Here you'll find information about the various endpoints available to you,
as well as the parameters and responses that they accept and return.

We will be exposing more and more of our APIs over time as they stabilize. If there is some action you can perform
via the UI that you wish you could perform via API, please let us know and we can expose it here in an unstable state.",
    "indexSegmentId": "constant",
    "slug": "api-reference/introduction/getting-started#welcome-%F0%9F%91%8B",
    "title": "Welcome 👋",
    "type": "markdown-section-v1",
  },
  {
    "breadcrumbs": [
      {
        "slug": "api-reference/introduction/getting-started",
        "title": "Getting started",
      },
      {
        "slug": "api-reference/introduction/getting-started#api-stability",
        "title": "API Stability",
      },
    ],
    "content": "Some of the APIs documented within are undergoing active development. Use the
Stable
and
Unstable
tags to differentiate between those that are stable and those that are not.",
    "indexSegmentId": "constant",
    "slug": "api-reference/introduction/getting-started#api-stability",
    "title": "API Stability",
    "type": "markdown-section-v1",
  },
  {
    "breadcrumbs": [
      {
        "slug": "api-reference/introduction/getting-started",
        "title": "Getting started",
      },
      {
        "slug": "api-reference/introduction/getting-started#base-urls",
        "title": "Base URLs",
      },
    ],
    "content": "Some endpoints are hosted separately from the main Vellum API and therefore have a different base url. If this is
the case, they will say so in their description.

Unless otherwise specified, all endpoints use \`https://api.vellum.ai\` as their base URL.",
    "indexSegmentId": "constant",
    "slug": "api-reference/introduction/getting-started#base-urls",
    "title": "Base URLs",
    "type": "markdown-section-v1",
  },
  {
    "breadcrumbs": [
      {
        "slug": "api-reference/introduction/getting-started",
        "title": "Getting started",
      },
      {
        "slug": "api-reference/introduction/getting-started#official-api-clients",
        "title": "Official API Clients:",
      },
    ],
    "content": "Vellum maintains official API clients for Python and Node/Typescript. We recommend using these clients to interact
with all stable endpoints. You can find them here:




",
    "indexSegmentId": "constant",
    "slug": "api-reference/introduction/getting-started#official-api-clients",
    "title": "Official API Clients:",
    "type": "markdown-section-v1",
  },
  {
    "breadcrumbs": [],
    "description": "",
    "indexSegmentId": "constant",
    "slug": "api-reference/introduction/getting-started",
    "title": "Getting started",
    "type": "page-v4",
  },
  {
    "content": "WELCOME 👋

Welcome to Vellum's API documentation! Here you'll find information about the various endpoints available to you, as well as the
parameters and responses that they accept and return.

We will be exposing more and more of our APIs over time as they stabilize. If there is some action you can perform via the UI that
you wish you could perform via API, please let us know and we can expose it here in an unstable state.


API STABILITY

Some of the APIs documented within are undergoing active development. Use the <strong style={{ backgroundColor: "#4caf50", color:
"white", padding: 4, borderRadius: 4 }}>Stable and <strong style={{ backgroundColor: "#ffc107", color: "white", padding: 4,
borderRadius: 4 }}>Unstable tags to differentiate between those that are stable and those that are not.


BASE URLS

Some endpoints are hosted separately from the main Vellum API and therefore have a different base url. If this is the case, they
will say so in their description.

Unless otherwise specified, all endpoints use https://api.vellum.ai as their base URL.


OFFICIAL API CLIENTS:

Vellum maintains official API clients for Python and Node/Typescript. We recommend using these clients to interact with all stable
endpoints. You can find them here:",
    "indexSegmentId": "constant",
    "path": {
      "parts": [
        {
          "name": "API Reference",
          "urlSlug": "api-reference",
        },
        {
          "name": "Introduction",
          "urlSlug": "introduction",
        },
        {
          "name": "Getting started",
          "urlSlug": "getting-started",
        },
      ],
    },
    "title": "Getting started",
    "type": "page-v2",
  },
  {
    "endpoint": {
      "description": "Stable

Executes a deployed Workflow and streams back its results.",
      "method": "POST",
      "name": "Execute Workflow Stream",
      "path": {
        "parts": [
          {
            "type": "literal",
            "value": "",
          },
          {
            "type": "literal",
            "value": "/v1/execute-workflow-stream",
          },
        ],
      },
    },
    "indexSegmentId": "constant",
    "path": {
      "parts": [
        {
          "name": "API Reference",
          "urlSlug": "api-reference",
        },
        {
          "name": "API Reference",
          "skipUrlSlug": true,
          "urlSlug": "api-reference",
        },
        {
          "name": "Execute Workflow Stream",
          "urlSlug": "execute-workflow-stream",
        },
      ],
    },
    "type": "endpoint-v2",
  },
  {
    "endpoint": {
      "description": "Stable

Generate a completion using a previously defined deployment.

Note: Uses a base url of https://predict.vellum.ai.",
      "method": "POST",
      "name": "Generate",
      "path": {
        "parts": [
          {
            "type": "literal",
            "value": "",
          },
          {
            "type": "literal",
            "value": "/v1/generate",
          },
        ],
      },
    },
    "indexSegmentId": "constant",
    "path": {
      "parts": [
        {
          "name": "API Reference",
          "urlSlug": "api-reference",
        },
        {
          "name": "API Reference",
          "skipUrlSlug": true,
          "urlSlug": "api-reference",
        },
        {
          "name": "Generate",
          "urlSlug": "generate",
        },
      ],
    },
    "type": "endpoint-v2",
  },
  {
    "endpoint": {
      "description": "Stable

Generate a stream of completions using a previously defined deployment.

Note: Uses a base url of https://predict.vellum.ai.",
      "method": "POST",
      "name": "Generate Stream",
      "path": {
        "parts": [
          {
            "type": "literal",
            "value": "",
          },
          {
            "type": "literal",
            "value": "/v1/generate-stream",
          },
        ],
      },
    },
    "indexSegmentId": "constant",
    "path": {
      "parts": [
        {
          "name": "API Reference",
          "urlSlug": "api-reference",
        },
        {
          "name": "API Reference",
          "skipUrlSlug": true,
          "urlSlug": "api-reference",
        },
        {
          "name": "Generate Stream",
          "urlSlug": "generate-stream",
        },
      ],
    },
    "type": "endpoint-v2",
  },
  {
    "endpoint": {
      "description": "Stable

Perform a search against a document index.

Note: Uses a base url of https://predict.vellum.ai.",
      "method": "POST",
      "name": "Search",
      "path": {
        "parts": [
          {
            "type": "literal",
            "value": "",
          },
          {
            "type": "literal",
            "value": "/v1/search",
          },
        ],
      },
    },
    "indexSegmentId": "constant",
    "path": {
      "parts": [
        {
          "name": "API Reference",
          "urlSlug": "api-reference",
        },
        {
          "name": "API Reference",
          "skipUrlSlug": true,
          "urlSlug": "api-reference",
        },
        {
          "name": "Search",
          "urlSlug": "search",
        },
      ],
    },
    "type": "endpoint-v2",
  },
  {
    "endpoint": {
      "description": "Stable

Used to submit feedback regarding the quality of previously generated completions.

Note: Uses a base url of https://predict.vellum.ai.",
      "method": "POST",
      "name": "Submit Completion Actuals",
      "path": {
        "parts": [
          {
            "type": "literal",
            "value": "",
          },
          {
            "type": "literal",
            "value": "/v1/submit-completion-actuals",
          },
        ],
      },
    },
    "indexSegmentId": "constant",
    "path": {
      "parts": [
        {
          "name": "API Reference",
          "urlSlug": "api-reference",
        },
        {
          "name": "API Reference",
          "skipUrlSlug": true,
          "urlSlug": "api-reference",
        },
        {
          "name": "Submit Completion Actuals",
          "urlSlug": "submit-completion-actuals",
        },
      ],
    },
    "type": "endpoint-v2",
  },
  {
    "endpoint": {
      "description": "Stable

Used to submit feedback regarding the quality of previous workflow execution and its outputs.

Note: Uses a base url of https://predict.vellum.ai.",
      "method": "POST",
      "name": "Submit Workflow Execution Actuals",
      "path": {
        "parts": [
          {
            "type": "literal",
            "value": "",
          },
          {
            "type": "literal",
            "value": "/v1/submit-workflow-execution-actuals",
          },
        ],
      },
    },
    "indexSegmentId": "constant",
    "path": {
      "parts": [
        {
          "name": "API Reference",
          "urlSlug": "api-reference",
        },
        {
          "name": "API Reference",
          "skipUrlSlug": true,
          "urlSlug": "api-reference",
        },
        {
          "name": "Submit Workflow Execution Actuals",
          "urlSlug": "submit-workflow-execution-actuals",
        },
      ],
    },
    "type": "endpoint-v2",
  },
  {
    "endpoint": {
      "description": "Unstable

Used to retrieve a deployment given its ID or name.",
      "method": "GET",
      "name": "Retrieve",
      "path": {
        "parts": [
          {
            "type": "literal",
            "value": "",
          },
          {
            "type": "literal",
            "value": "/v1/deployments/",
          },
          {
            "type": "pathParameter",
            "value": "id",
          },
          {
            "type": "literal",
            "value": "",
          },
        ],
      },
    },
    "indexSegmentId": "constant",
    "path": {
      "parts": [
        {
          "name": "API Reference",
          "urlSlug": "api-reference",
        },
        {
          "name": "API Reference",
          "skipUrlSlug": true,
          "urlSlug": "api-reference",
        },
        {
          "name": "deployments",
          "urlSlug": "deployments",
        },
        {
          "name": "Retrieve",
          "urlSlug": "retrieve",
        },
      ],
    },
    "type": "endpoint-v2",
  },
  {
    "endpoint": {
      "description": "Unstable

Creates a new document index.",
      "method": "POST",
      "name": "Create",
      "path": {
        "parts": [
          {
            "type": "literal",
            "value": "",
          },
          {
            "type": "literal",
            "value": "/v1/document-indexes",
          },
        ],
      },
    },
    "indexSegmentId": "constant",
    "path": {
      "parts": [
        {
          "name": "API Reference",
          "urlSlug": "api-reference",
        },
        {
          "name": "API Reference",
          "skipUrlSlug": true,
          "urlSlug": "api-reference",
        },
        {
          "name": "documentIndexes",
          "urlSlug": "document-indexes",
        },
        {
          "name": "Create",
          "urlSlug": "create",
        },
      ],
    },
    "type": "endpoint-v2",
  },
  {
    "endpoint": {
      "description": "Stable

Used to list documents. Optionally filter on supported fields.",
      "method": "GET",
      "name": "List",
      "path": {
        "parts": [
          {
            "type": "literal",
            "value": "",
          },
          {
            "type": "literal",
            "value": "/v1/documents",
          },
        ],
      },
    },
    "indexSegmentId": "constant",
    "path": {
      "parts": [
        {
          "name": "API Reference",
          "urlSlug": "api-reference",
        },
        {
          "name": "API Reference",
          "skipUrlSlug": true,
          "urlSlug": "api-reference",
        },
        {
          "name": "documents",
          "urlSlug": "documents",
        },
        {
          "name": "List",
          "urlSlug": "list",
        },
      ],
    },
    "type": "endpoint-v2",
  },
  {
    "endpoint": {
      "description": "Unstable

Update a Document, keying off of its Vellum-generated ID. Particularly useful for updating its metadata.",
      "method": "PATCH",
      "name": "Partial Update",
      "path": {
        "parts": [
          {
            "type": "literal",
            "value": "",
          },
          {
            "type": "literal",
            "value": "/v1/documents/",
          },
          {
            "type": "pathParameter",
            "value": "id",
          },
          {
            "type": "literal",
            "value": "",
          },
        ],
      },
    },
    "indexSegmentId": "constant",
    "path": {
      "parts": [
        {
          "name": "API Reference",
          "urlSlug": "api-reference",
        },
        {
          "name": "API Reference",
          "skipUrlSlug": true,
          "urlSlug": "api-reference",
        },
        {
          "name": "documents",
          "urlSlug": "documents",
        },
        {
          "name": "Partial Update",
          "urlSlug": "partial-update",
        },
      ],
    },
    "type": "endpoint-v2",
  },
  {
    "endpoint": {
      "method": "DELETE",
      "name": "Destroy",
      "path": {
        "parts": [
          {
            "type": "literal",
            "value": "",
          },
          {
            "type": "literal",
            "value": "/v1/documents/",
          },
          {
            "type": "pathParameter",
            "value": "id",
          },
          {
            "type": "literal",
            "value": "",
          },
        ],
      },
    },
    "indexSegmentId": "constant",
    "path": {
      "parts": [
        {
          "name": "API Reference",
          "urlSlug": "api-reference",
        },
        {
          "name": "API Reference",
          "skipUrlSlug": true,
          "urlSlug": "api-reference",
        },
        {
          "name": "documents",
          "urlSlug": "documents",
        },
        {
          "name": "Destroy",
          "urlSlug": "destroy",
        },
      ],
    },
    "type": "endpoint-v2",
  },
  {
    "endpoint": {
      "description": "Stable

Upload a document to be indexed and used for search.

Note: Uses a base url of https://documents.vellum.ai.",
      "method": "POST",
      "name": "Upload",
      "path": {
        "parts": [
          {
            "type": "literal",
            "value": "",
          },
          {
            "type": "literal",
            "value": "/v1/upload-document",
          },
        ],
      },
    },
    "indexSegmentId": "constant",
    "path": {
      "parts": [
        {
          "name": "API Reference",
          "urlSlug": "api-reference",
        },
        {
          "name": "API Reference",
          "skipUrlSlug": true,
          "urlSlug": "api-reference",
        },
        {
          "name": "documents",
          "urlSlug": "documents",
        },
        {
          "name": "Upload",
          "urlSlug": "upload",
        },
      ],
    },
    "type": "endpoint-v2",
  },
  {
    "endpoint": {
      "description": "Unstable

Used to retrieve a model version given its ID.",
      "method": "GET",
      "name": "Retrieve",
      "path": {
        "parts": [
          {
            "type": "literal",
            "value": "",
          },
          {
            "type": "literal",
            "value": "/v1/model-versions/",
          },
          {
            "type": "pathParameter",
            "value": "id",
          },
          {
            "type": "literal",
            "value": "",
          },
        ],
      },
    },
    "indexSegmentId": "constant",
    "path": {
      "parts": [
        {
          "name": "API Reference",
          "urlSlug": "api-reference",
        },
        {
          "name": "API Reference",
          "skipUrlSlug": true,
          "urlSlug": "api-reference",
        },
        {
          "name": "modelVersions",
          "urlSlug": "model-versions",
        },
        {
          "name": "Retrieve",
          "urlSlug": "retrieve",
        },
      ],
    },
    "type": "endpoint-v2",
  },
  {
    "endpoint": {
      "description": "Unstable

Compiles the prompt backing the model version using the provided input values.",
      "method": "POST",
      "name": "Model Version Compile Prompt",
      "path": {
        "parts": [
          {
            "type": "literal",
            "value": "",
          },
          {
            "type": "literal",
            "value": "/v1/model-versions/",
          },
          {
            "type": "pathParameter",
            "value": "id",
          },
          {
            "type": "literal",
            "value": "/compile-prompt",
          },
        ],
      },
    },
    "indexSegmentId": "constant",
    "path": {
      "parts": [
        {
          "name": "API Reference",
          "urlSlug": "api-reference",
        },
        {
          "name": "API Reference",
          "skipUrlSlug": true,
          "urlSlug": "api-reference",
        },
        {
          "name": "modelVersions",
          "urlSlug": "model-versions",
        },
        {
          "name": "Model Version Compile Prompt",
          "urlSlug": "model-version-compile-prompt",
        },
      ],
    },
    "type": "endpoint-v2",
  },
  {
    "endpoint": {
      "description": "Unstable

Registers a prompt within Vellum and creates associated Vellum entities. Intended to be used by integration partners, not directly
by Vellum users.

Under the hood, this endpoint creates a new sandbox, a new model version, and a new deployment.",
      "method": "POST",
      "name": "Register Prompt",
      "path": {
        "parts": [
          {
            "type": "literal",
            "value": "",
          },
          {
            "type": "literal",
            "value": "/v1/registered-prompts/register",
          },
        ],
      },
    },
    "indexSegmentId": "constant",
    "path": {
      "parts": [
        {
          "name": "API Reference",
          "urlSlug": "api-reference",
        },
        {
          "name": "API Reference",
          "skipUrlSlug": true,
          "urlSlug": "api-reference",
        },
        {
          "name": "registeredPrompts",
          "urlSlug": "registered-prompts",
        },
        {
          "name": "Register Prompt",
          "urlSlug": "register-prompt",
        },
      ],
    },
    "type": "endpoint-v2",
  },
  {
    "endpoint": {
      "description": "Unstable

Upserts a new scenario for a sandbox, keying off of the optionally provided scenario id.

If an id is provided and has a match, the scenario will be updated. If no id is provided or no match is found, a new scenario will
be appended to the end.

Note that a full replacement of the scenario is performed, so any fields not provided will be removed or overwritten with default
values.",
      "method": "POST",
      "name": "Upsert Sandbox Scenario",
      "path": {
        "parts": [
          {
            "type": "literal",
            "value": "",
          },
          {
            "type": "literal",
            "value": "/v1/sandboxes/",
          },
          {
            "type": "pathParameter",
            "value": "id",
          },
          {
            "type": "literal",
            "value": "/scenarios",
          },
        ],
      },
    },
    "indexSegmentId": "constant",
    "path": {
      "parts": [
        {
          "name": "API Reference",
          "urlSlug": "api-reference",
        },
        {
          "name": "API Reference",
          "skipUrlSlug": true,
          "urlSlug": "api-reference",
        },
        {
          "name": "sandboxes",
          "urlSlug": "sandboxes",
        },
        {
          "name": "Upsert Sandbox Scenario",
          "urlSlug": "upsert-sandbox-scenario",
        },
      ],
    },
    "type": "endpoint-v2",
  },
  {
    "endpoint": {
      "description": "Unstable

Deletes an existing scenario from a sandbox, keying off of the provided scenario id.",
      "method": "DELETE",
      "name": "Delete Sandbox Scenario",
      "path": {
        "parts": [
          {
            "type": "literal",
            "value": "",
          },
          {
            "type": "literal",
            "value": "/v1/sandboxes/",
          },
          {
            "type": "pathParameter",
            "value": "id",
          },
          {
            "type": "literal",
            "value": "/scenarios/",
          },
          {
            "type": "pathParameter",
            "value": "scenario_id",
          },
          {
            "type": "literal",
            "value": "",
          },
        ],
      },
    },
    "indexSegmentId": "constant",
    "path": {
      "parts": [
        {
          "name": "API Reference",
          "urlSlug": "api-reference",
        },
        {
          "name": "API Reference",
          "skipUrlSlug": true,
          "urlSlug": "api-reference",
        },
        {
          "name": "sandboxes",
          "urlSlug": "sandboxes",
        },
        {
          "name": "Delete Sandbox Scenario",
          "urlSlug": "delete-sandbox-scenario",
        },
      ],
    },
    "type": "endpoint-v2",
  },
  {
    "endpoint": {
      "description": "Unstable

Upserts a new test case for a test suite, keying off of the optionally provided test case id.

If an id is provided and has a match, the test case will be updated. If no id is provided or no match is found, a new test case
will be appended to the end.

Note that a full replacement of the test case is performed, so any fields not provided will be removed or overwritten with default
values.",
      "method": "POST",
      "name": "Upsert Test Suite Test Case",
      "path": {
        "parts": [
          {
            "type": "literal",
            "value": "",
          },
          {
            "type": "literal",
            "value": "/v1/test-suites/",
          },
          {
            "type": "pathParameter",
            "value": "id",
          },
          {
            "type": "literal",
            "value": "/test-cases",
          },
        ],
      },
    },
    "indexSegmentId": "constant",
    "path": {
      "parts": [
        {
          "name": "API Reference",
          "urlSlug": "api-reference",
        },
        {
          "name": "API Reference",
          "skipUrlSlug": true,
          "urlSlug": "api-reference",
        },
        {
          "name": "testSuites",
          "urlSlug": "test-suites",
        },
        {
          "name": "Upsert Test Suite Test Case",
          "urlSlug": "upsert-test-suite-test-case",
        },
      ],
    },
    "type": "endpoint-v2",
  },
  {
    "endpoint": {
      "description": "Unstable

Deletes an existing test case for a test suite, keying off of the test case id.",
      "method": "DELETE",
      "name": "Delete Test Suite Test Case",
      "path": {
        "parts": [
          {
            "type": "literal",
            "value": "",
          },
          {
            "type": "literal",
            "value": "/v1/test-suites/",
          },
          {
            "type": "pathParameter",
            "value": "id",
          },
          {
            "type": "literal",
            "value": "/test-cases/",
          },
          {
            "type": "pathParameter",
            "value": "test_case_id",
          },
          {
            "type": "literal",
            "value": "",
          },
        ],
      },
    },
    "indexSegmentId": "constant",
    "path": {
      "parts": [
        {
          "name": "API Reference",
          "urlSlug": "api-reference",
        },
        {
          "name": "API Reference",
          "skipUrlSlug": true,
          "urlSlug": "api-reference",
        },
        {
          "name": "testSuites",
          "urlSlug": "test-suites",
        },
        {
          "name": "Delete Test Suite Test Case",
          "urlSlug": "delete-test-suite-test-case",
        },
      ],
    },
    "type": "endpoint-v2",
  },
]
`;
