{
  "rootPackage": {
    "endpoints": [],
    "subpackages": [
      "subpackage_chats",
      "subpackage_completions",
      "subpackage_datapoints",
      "subpackage_projects",
      "subpackage_datasets",
      "subpackage_evaluations",
      "subpackage_evaluators",
      "subpackage_feedback",
      "subpackage_logs",
      "subpackage_modelConfigs",
      "subpackage_sessions"
    ],
    "types": [
      "type_:AgentConfigResponse",
      "type_:CategoricalFeedbackLabel",
      "type_:ChatDataResponse",
      "type_:ChatMessageWithToolCallContentItem",
      "type_:Content",
      "type_:ChatMessageWithToolCall",
      "type_:ChatResponseToolChoice",
      "type_:ChatResponse",
      "type_:ChatRole",
      "type_:CompletionResponse",
      "type_:ConfigResponse",
      "type_:ConfigType",
      "type_:CreateDatapointRequestTargetValue",
      "type_:CreateDatapointRequest",
      "type_:CreateDatapointsByLogsRequest",
      "type_:CreateLogResponse",
      "type_:CreateSessionResponse",
      "type_:DashboardConfiguration",
      "type_:DataResponse",
      "type_:DatapointResponseTargetValue",
      "type_:DatapointResponse",
      "type_:DatasetResponse",
      "type_:EnvironmentProjectConfigResponse",
      "type_:EnvironmentRequest",
      "type_:EvaluationDatapointSnapshotResponse",
      "type_:EvaluationResponse",
      "type_:Value",
      "type_:EvaluationResultResponse",
      "type_:EvaluationStatus",
      "type_:EvaluatorArgumentsType",
      "type_:EvaluatorConfigResponse",
      "type_:EvaluatorResponse",
      "type_:EvaluatorReturnTypeEnum",
      "type_:EvaluatorType",
      "type_:FeedbackType",
      "type_:FeedbackValue",
      "type_:Feedback",
      "type_:FeedbackClass",
      "type_:FeedbackLabelRequest",
      "type_:FeedbackRequestType",
      "type_:FeedbackRequestValue",
      "type_:FeedbackRequest",
      "type_:FeedbackResponseType",
      "type_:FeedbackResponseValue",
      "type_:FeedbackResponse",
      "type_:FeedbackTypeModelType",
      "type_:FeedbackTypeModel",
      "type_:FeedbackTypes",
      "type_:FileType",
      "type_:FunctionTool",
      "type_:FunctionToolChoice",
      "type_:GenericConfigResponse",
      "type_:GetModelConfigResponse",
      "type_:HTTPValidationError",
      "type_:ImageChatContent",
      "type_:ImageUrlDetail",
      "type_:ImageUrl",
      "type_:LabelSentiment",
      "type_:LinkedToolRequest",
      "type_:Judgment",
      "type_:Config",
      "type_:LogRequestFeedback",
      "type_:LogRequest",
      "type_:LogResponseToolChoice",
      "type_:LogResponse",
      "type_:ModelConfigChatRequestStop",
      "type_:ModelConfigChatRequestToolsItem",
      "type_:ModelConfigChatRequest",
      "type_:ModelConfigCompletionRequestStop",
      "type_:ModelConfigCompletionRequest",
      "type_:ModelConfigEvaluatorAggregateResponse",
      "type_:ModelConfigRequestStop",
      "type_:ModelConfigRequestToolsItem",
      "type_:ModelConfigRequest",
      "type_:ModelConfigResponseStop",
      "type_:ModelConfigResponse",
      "type_:ModelConfigToolRequest",
      "type_:ModelEndpoints",
      "type_:ModelProviders",
      "type_:ObservabilityStatus",
      "type_:PaginatedDataDatapointResponse",
      "type_:PaginatedDataEvaluationDatapointSnapshotResponse",
      "type_:PaginatedDataEvaluationResponse",
      "type_:PaginatedDataLogResponse",
      "type_:PaginatedDataProjectResponse",
      "type_:PaginatedDataSessionResponse",
      "type_:PlatformAccessEnum",
      "type_:ProjectConfigResponse",
      "type_:ProjectInputResponse",
      "type_:ProjectResponse",
      "type_:ProjectSortBy",
      "type_:ProjectUserResponse",
      "type_:ProviderApiKeys",
      "type_:Type",
      "type_:ResponseFormat",
      "type_:SessionProjectResponse",
      "type_:SessionResponse",
      "type_:SortOrder",
      "type_:TextChatContent",
      "type_:TimeUnit",
      "type_:ToolCall",
      "type_:ToolChoice",
      "type_:ToolConfigRequest",
      "type_:ToolConfigResponse",
      "type_:ToolResponse",
      "type_:ToolResultResponse",
      "type_:ToolSource",
      "type_:ToolType",
      "type_:UpdateLogRequest",
      "type_:Usage",
      "type_:UserResponse",
      "type_:ValidationErrorLocItem",
      "type_:ValidationError",
      "type_:VersionStatus"
    ],
    "webhooks": [],
    "websockets": []
  },
  "types": {
    "type_chats:ChatsCreateStreamRequestToolChoice": {
      "description": "Controls how the model uses tools. The following options are supported: 'none' forces the model to not call a tool; the default when no tools are provided as part of the model config. 'auto' the model can decide to call one of the provided tools; the default when tools are provided as part of the model config. Providing {'type': 'function', 'function': {name': <TOOL_NAME>}} forces the model to use the named function.",
      "name": "ChatsCreateStreamRequestToolChoice",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "type": {
              "type": "literal",
              "value": {
                "type": "stringLiteral",
                "value": "none"
              }
            }
          },
          {
            "type": {
              "type": "literal",
              "value": {
                "type": "stringLiteral",
                "value": "auto"
              }
            }
          },
          {
            "type": {
              "type": "literal",
              "value": {
                "type": "stringLiteral",
                "value": "required"
              }
            }
          },
          {
            "type": {
              "type": "id",
              "value": "type_:ToolChoice"
            },
            "displayName": "Tool Choice"
          }
        ]
      }
    },
    "type_chats:ChatsCreateStreamRequestToolCall": {
      "description": "NB: Deprecated with new tool_choice. Controls how the model uses tools. The following options are supported: 'none' forces the model to not call a tool; the default when no tools are provided as part of the model config. 'auto' the model can decide to call one of the provided tools; the default when tools are provided as part of the model config. Providing {'name': <TOOL_NAME>} forces the model to use the provided tool of the same name.",
      "name": "ChatsCreateStreamRequestToolCall",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "type": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "type": {
              "type": "map",
              "keyType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              },
              "valueType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "type_chats:ChatsCreateRequestToolChoice": {
      "description": "Controls how the model uses tools. The following options are supported: 'none' forces the model to not call a tool; the default when no tools are provided as part of the model config. 'auto' the model can decide to call one of the provided tools; the default when tools are provided as part of the model config. Providing {'type': 'function', 'function': {name': <TOOL_NAME>}} forces the model to use the named function.",
      "name": "ChatsCreateRequestToolChoice",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "type": {
              "type": "literal",
              "value": {
                "type": "stringLiteral",
                "value": "none"
              }
            }
          },
          {
            "type": {
              "type": "literal",
              "value": {
                "type": "stringLiteral",
                "value": "auto"
              }
            }
          },
          {
            "type": {
              "type": "literal",
              "value": {
                "type": "stringLiteral",
                "value": "required"
              }
            }
          },
          {
            "type": {
              "type": "id",
              "value": "type_:ToolChoice"
            },
            "displayName": "Tool Choice"
          }
        ]
      }
    },
    "type_chats:ChatsCreateRequestToolCall": {
      "description": "NB: Deprecated with new tool_choice. Controls how the model uses tools. The following options are supported: 'none' forces the model to not call a tool; the default when no tools are provided as part of the model config. 'auto' the model can decide to call one of the provided tools; the default when tools are provided as part of the model config. Providing {'name': <TOOL_NAME>} forces the model to use the provided tool of the same name.",
      "name": "ChatsCreateRequestToolCall",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "type": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "type": {
              "type": "map",
              "keyType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              },
              "valueType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "type_chats:ChatsCreateDeployedStreamRequestToolChoice": {
      "description": "Controls how the model uses tools. The following options are supported: 'none' forces the model to not call a tool; the default when no tools are provided as part of the model config. 'auto' the model can decide to call one of the provided tools; the default when tools are provided as part of the model config. Providing {'type': 'function', 'function': {name': <TOOL_NAME>}} forces the model to use the named function.",
      "name": "ChatsCreateDeployedStreamRequestToolChoice",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "type": {
              "type": "literal",
              "value": {
                "type": "stringLiteral",
                "value": "none"
              }
            }
          },
          {
            "type": {
              "type": "literal",
              "value": {
                "type": "stringLiteral",
                "value": "auto"
              }
            }
          },
          {
            "type": {
              "type": "literal",
              "value": {
                "type": "stringLiteral",
                "value": "required"
              }
            }
          },
          {
            "type": {
              "type": "id",
              "value": "type_:ToolChoice"
            },
            "displayName": "Tool Choice"
          }
        ]
      }
    },
    "type_chats:ChatsCreateDeployedStreamRequestToolCall": {
      "description": "NB: Deprecated with new tool_choice. Controls how the model uses tools. The following options are supported: 'none' forces the model to not call a tool; the default when no tools are provided as part of the model config. 'auto' the model can decide to call one of the provided tools; the default when tools are provided as part of the model config. Providing {'name': <TOOL_NAME>} forces the model to use the provided tool of the same name.",
      "name": "ChatsCreateDeployedStreamRequestToolCall",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "type": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "type": {
              "type": "map",
              "keyType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              },
              "valueType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "type_chats:ChatsCreateDeployedRequestToolChoice": {
      "description": "Controls how the model uses tools. The following options are supported: 'none' forces the model to not call a tool; the default when no tools are provided as part of the model config. 'auto' the model can decide to call one of the provided tools; the default when tools are provided as part of the model config. Providing {'type': 'function', 'function': {name': <TOOL_NAME>}} forces the model to use the named function.",
      "name": "ChatsCreateDeployedRequestToolChoice",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "type": {
              "type": "literal",
              "value": {
                "type": "stringLiteral",
                "value": "none"
              }
            }
          },
          {
            "type": {
              "type": "literal",
              "value": {
                "type": "stringLiteral",
                "value": "auto"
              }
            }
          },
          {
            "type": {
              "type": "literal",
              "value": {
                "type": "stringLiteral",
                "value": "required"
              }
            }
          },
          {
            "type": {
              "type": "id",
              "value": "type_:ToolChoice"
            },
            "displayName": "Tool Choice"
          }
        ]
      }
    },
    "type_chats:ChatsCreateDeployedRequestToolCall": {
      "description": "NB: Deprecated with new tool_choice. Controls how the model uses tools. The following options are supported: 'none' forces the model to not call a tool; the default when no tools are provided as part of the model config. 'auto' the model can decide to call one of the provided tools; the default when tools are provided as part of the model config. Providing {'name': <TOOL_NAME>} forces the model to use the provided tool of the same name.",
      "name": "ChatsCreateDeployedRequestToolCall",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "type": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "type": {
              "type": "map",
              "keyType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              },
              "valueType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "type_chats:ChatsCreateConfigStreamRequestToolChoice": {
      "description": "Controls how the model uses tools. The following options are supported: 'none' forces the model to not call a tool; the default when no tools are provided as part of the model config. 'auto' the model can decide to call one of the provided tools; the default when tools are provided as part of the model config. Providing {'type': 'function', 'function': {name': <TOOL_NAME>}} forces the model to use the named function.",
      "name": "ChatsCreateConfigStreamRequestToolChoice",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "type": {
              "type": "literal",
              "value": {
                "type": "stringLiteral",
                "value": "none"
              }
            }
          },
          {
            "type": {
              "type": "literal",
              "value": {
                "type": "stringLiteral",
                "value": "auto"
              }
            }
          },
          {
            "type": {
              "type": "literal",
              "value": {
                "type": "stringLiteral",
                "value": "required"
              }
            }
          },
          {
            "type": {
              "type": "id",
              "value": "type_:ToolChoice"
            },
            "displayName": "Tool Choice"
          }
        ]
      }
    },
    "type_chats:ChatsCreateConfigStreamRequestToolCall": {
      "description": "NB: Deprecated with new tool_choice. Controls how the model uses tools. The following options are supported: 'none' forces the model to not call a tool; the default when no tools are provided as part of the model config. 'auto' the model can decide to call one of the provided tools; the default when tools are provided as part of the model config. Providing {'name': <TOOL_NAME>} forces the model to use the provided tool of the same name.",
      "name": "ChatsCreateConfigStreamRequestToolCall",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "type": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "type": {
              "type": "map",
              "keyType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              },
              "valueType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "type_chats:ChatsCreateConfigRequestToolChoice": {
      "description": "Controls how the model uses tools. The following options are supported: 'none' forces the model to not call a tool; the default when no tools are provided as part of the model config. 'auto' the model can decide to call one of the provided tools; the default when tools are provided as part of the model config. Providing {'type': 'function', 'function': {name': <TOOL_NAME>}} forces the model to use the named function.",
      "name": "ChatsCreateConfigRequestToolChoice",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "type": {
              "type": "literal",
              "value": {
                "type": "stringLiteral",
                "value": "none"
              }
            }
          },
          {
            "type": {
              "type": "literal",
              "value": {
                "type": "stringLiteral",
                "value": "auto"
              }
            }
          },
          {
            "type": {
              "type": "literal",
              "value": {
                "type": "stringLiteral",
                "value": "required"
              }
            }
          },
          {
            "type": {
              "type": "id",
              "value": "type_:ToolChoice"
            },
            "displayName": "Tool Choice"
          }
        ]
      }
    },
    "type_chats:ChatsCreateConfigRequestToolCall": {
      "description": "NB: Deprecated with new tool_choice. Controls how the model uses tools. The following options are supported: 'none' forces the model to not call a tool; the default when no tools are provided as part of the model config. 'auto' the model can decide to call one of the provided tools; the default when tools are provided as part of the model config. Providing {'name': <TOOL_NAME>} forces the model to use the provided tool of the same name.",
      "name": "ChatsCreateConfigRequestToolCall",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "type": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "type": {
              "type": "map",
              "keyType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              },
              "valueType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "type_datasets:Request": {
      "name": "Request",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "type": {
              "type": "id",
              "value": "type_:CreateDatapointsByLogsRequest"
            },
            "displayName": "Create Datapoints by Logs Request"
          },
          {
            "type": {
              "type": "id",
              "value": "type_:CreateDatapointRequest"
            },
            "displayName": "Create Datapoint Request"
          },
          {
            "type": {
              "type": "list",
              "itemType": {
                "type": "id",
                "value": "type_:CreateDatapointRequest"
              }
            }
          }
        ]
      }
    },
    "type_evaluations:CreateEvaluationResultLogRequestResult": {
      "description": "The result value of the evaluation.",
      "name": "CreateEvaluationResultLogRequestResult",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "type": {
              "type": "primitive",
              "value": {
                "type": "boolean"
              }
            }
          },
          {
            "type": {
              "type": "primitive",
              "value": {
                "type": "integer"
              }
            }
          },
          {
            "type": {
              "type": "primitive",
              "value": {
                "type": "double"
              }
            }
          }
        ]
      }
    },
    "type_feedback:FeedbackFeedbackRequest": {
      "name": "FeedbackFeedbackRequest",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "type": {
              "type": "list",
              "itemType": {
                "type": "id",
                "value": "type_:FeedbackRequest"
              }
            }
          },
          {
            "type": {
              "type": "id",
              "value": "type_:FeedbackRequest"
            },
            "displayName": "Feedback Request"
          }
        ]
      }
    },
    "type_feedback:FeedbackFeedbackResponse": {
      "name": "FeedbackFeedbackResponse",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "type": {
              "type": "list",
              "itemType": {
                "type": "id",
                "value": "type_:FeedbackResponse"
              }
            }
          },
          {
            "type": {
              "type": "id",
              "value": "type_:FeedbackResponse"
            },
            "displayName": "Feedback Response"
          }
        ]
      }
    },
    "type_logs:LogsLogRequest": {
      "name": "LogsLogRequest",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "type": {
              "type": "list",
              "itemType": {
                "type": "id",
                "value": "type_:LogRequest"
              }
            }
          },
          {
            "type": {
              "type": "id",
              "value": "type_:LogRequest"
            },
            "displayName": "Log Request"
          }
        ]
      }
    },
    "type_logs:LogsLogResponse": {
      "name": "LogsLogResponse",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "type": {
              "type": "list",
              "itemType": {
                "type": "id",
                "value": "type_:CreateLogResponse"
              }
            }
          },
          {
            "type": {
              "type": "id",
              "value": "type_:CreateLogResponse"
            },
            "displayName": "Create Log Response"
          }
        ]
      }
    },
    "type_modelConfigs:ProjectModelConfigRequestStop": {
      "description": "The string (or list of strings) after which the model will stop generating. The returned text will not contain the stop sequence.",
      "name": "ProjectModelConfigRequestStop",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "type": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "type": {
              "type": "list",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "type_modelConfigs:ProjectModelConfigRequestToolsItem": {
      "name": "ProjectModelConfigRequestToolsItem",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "type": {
              "type": "id",
              "value": "type_:LinkedToolRequest"
            },
            "displayName": "Linked Tool Request"
          },
          {
            "type": {
              "type": "id",
              "value": "type_:ModelConfigToolRequest"
            },
            "displayName": "Model Config Tool Request"
          }
        ]
      }
    },
    "type_modelConfigs:ModelConfigsSerializeRequest": {
      "name": "ModelConfigsSerializeRequest",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "type": {
              "type": "id",
              "value": "type_:ModelConfigChatRequest"
            },
            "displayName": "Model Config Chat Request"
          },
          {
            "type": {
              "type": "id",
              "value": "type_:ModelConfigCompletionRequest"
            },
            "displayName": "Model Config Completion Request"
          }
        ]
      }
    },
    "type_:AgentConfigResponse": {
      "name": "AgentConfigResponse",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "String ID of config. Starts with `config_`.",
            "key": "id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "Other parameters that define the config.",
            "key": "other",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "map",
                "keyType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                },
                "valueType": {
                  "type": "unknown"
                }
              }
            }
          },
          {
            "description": "The user who created the config.",
            "key": "created_by",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "type_:UserResponse"
              }
            }
          },
          {
            "description": "Whether the config is committed or not.",
            "key": "status",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "Name of config.",
            "key": "name",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "Description of config.",
            "key": "description",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Class of the agent.",
            "key": "agent_class",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "Tools associated with the agent.",
            "key": "tools",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "id",
                  "value": "type_:ToolConfigRequest"
                }
              }
            }
          },
          {
            "description": "Model config associated with the agent.",
            "key": "model_config",
            "valueType": {
              "type": "id",
              "value": "type_:ModelConfigRequest"
            }
          }
        ]
      }
    },
    "type_:CategoricalFeedbackLabel": {
      "name": "CategoricalFeedbackLabel",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "value",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "Whether the feedback sentiment is positive or negative.",
            "key": "sentiment",
            "valueType": {
              "type": "id",
              "value": "type_:LabelSentiment"
            }
          }
        ]
      }
    },
    "type_:ChatDataResponse": {
      "description": "Overwrite DataResponse for chat.",
      "name": "ChatDataResponse",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Unique ID for the model inputs and output logged to Humanloop. Use this when recording feedback later.",
            "key": "id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "The index for the sampled generation for a given input. The num_samples request parameter controls how many samples are generated.",
            "key": "index",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "integer"
              }
            }
          },
          {
            "description": "Output text returned from the provider model with leading and trailing whitespaces stripped.",
            "key": "output",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "Raw output text returned from the provider model.",
            "key": "raw_output",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "The inputs passed to the chat template.",
            "key": "inputs",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "map",
                "keyType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                },
                "valueType": {
                  "type": "unknown"
                }
              }
            }
          },
          {
            "description": "Why the generation ended. One of 'stop' (indicating a stop token was encountered), or 'length' (indicating the max tokens limit has been reached), or 'tool_call' (indicating that the model has chosen to call a tool - in which case the tool_call parameter of the response will be populated). It will be set as null for the intermediary responses during a stream, and will only be set as non-null for the final streamed token.",
            "key": "finish_reason",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "The model configuration used to create the generation.",
            "key": "model_config_id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "Results of any tools run during the generation.",
            "key": "tool_results",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "id",
                  "value": "type_:ToolResultResponse"
                }
              }
            }
          },
          {
            "description": "The messages passed to the to provider chat endpoint.",
            "key": "messages",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "id",
                  "value": "type_:ChatMessageWithToolCall"
                }
              }
            }
          },
          {
            "description": "Deprecated: Please use tool_calls field within the output_message.JSON definition of the tool to call and the corresponding argument values. Will be populated when finish_reason='tool_call'.",
            "availability": "Deprecated",
            "key": "tool_call",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "type_:FunctionTool"
              }
            }
          },
          {
            "description": "Deprecated: Please use tool_calls field within the output_message.JSON definition of the tools to call and the corresponding argument values. Will be populated when finish_reason='tool_call'.",
            "key": "tool_calls",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "id",
                  "value": "type_:ToolCall"
                }
              }
            }
          },
          {
            "description": "The message returned by the provider.",
            "key": "output_message",
            "valueType": {
              "type": "id",
              "value": "type_:ChatMessageWithToolCall"
            }
          }
        ]
      }
    },
    "type_:ChatMessageWithToolCallContentItem": {
      "name": "ChatMessageWithToolCallContentItem",
      "shape": {
        "type": "discriminatedUnion",
        "discriminant": "type",
        "variants": [
          {
            "discriminantValue": "text",
            "additionalProperties": {
              "extends": ["type_:TextChatContent"],
              "properties": []
            }
          },
          {
            "discriminantValue": "image_url",
            "additionalProperties": {
              "extends": ["type_:ImageChatContent"],
              "properties": []
            }
          }
        ]
      }
    },
    "type_:Content": {
      "description": "The content of the message.",
      "name": "Content",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "type": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "type": {
              "type": "list",
              "itemType": {
                "type": "id",
                "value": "type_:ChatMessageWithToolCallContentItem"
              }
            }
          }
        ]
      }
    },
    "type_:ChatMessageWithToolCall": {
      "name": "ChatMessageWithToolCall",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "The content of the message.",
            "key": "content",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "type_:Content"
              }
            }
          },
          {
            "description": "Optional name of the message author.",
            "key": "name",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Tool call that this message is responding to.",
            "key": "tool_call_id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Role of the message author.",
            "key": "role",
            "valueType": {
              "type": "id",
              "value": "type_:ChatRole"
            }
          },
          {
            "description": "A list of tool calls requested by the assistant.",
            "key": "tool_calls",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "id",
                  "value": "type_:ToolCall"
                }
              }
            }
          },
          {
            "description": "NB: Deprecated in favour of tool_calls. A tool call requested by the assistant.",
            "availability": "Deprecated",
            "key": "tool_call",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "type_:FunctionTool"
              }
            }
          }
        ]
      }
    },
    "type_:ChatResponseToolChoice": {
      "description": "Controls how the model uses tools. The following options are supported: 'none' forces the model to not call a tool; the default when no tools are provided as part of the model config. 'auto' the model can decide to call one of the provided tools; the default when tools are provided as part of the model config. Providing {'type': 'function', 'function': {name': <TOOL_NAME>}} forces the model to use the named function.",
      "name": "ChatResponseToolChoice",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "type": {
              "type": "literal",
              "value": {
                "type": "stringLiteral",
                "value": "none"
              }
            }
          },
          {
            "type": {
              "type": "literal",
              "value": {
                "type": "stringLiteral",
                "value": "auto"
              }
            }
          },
          {
            "type": {
              "type": "literal",
              "value": {
                "type": "stringLiteral",
                "value": "required"
              }
            }
          },
          {
            "type": {
              "type": "id",
              "value": "type_:ToolChoice"
            },
            "displayName": "Tool Choice"
          }
        ]
      }
    },
    "type_:ChatResponse": {
      "description": "Overwrite GenerateResponse for chat.",
      "name": "ChatResponse",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Unique identifier of the parent project. Will not be provided if the request was made without providing a project name or id",
            "key": "project_id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "The number of chat responses.",
            "key": "num_samples",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer",
                  "default": 1
                }
              }
            }
          },
          {
            "description": "Include the log probabilities of the top n tokens in the provider_response",
            "key": "logprobs",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          },
          {
            "description": "The suffix that comes after a completion of inserted text. Useful for completions that act like inserts.",
            "key": "suffix",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "End-user ID passed through to provider call.",
            "key": "user",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Array containing the chat responses.",
            "key": "data",
            "valueType": {
              "type": "list",
              "itemType": {
                "type": "id",
                "value": "type_:ChatDataResponse"
              }
            }
          },
          {
            "description": "Counts of the number of tokens used and related stats.",
            "key": "usage",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "type_:Usage"
              }
            }
          },
          {
            "description": "Any additional metadata to record.",
            "key": "metadata",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "map",
                "keyType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                },
                "valueType": {
                  "type": "unknown"
                }
              }
            }
          },
          {
            "description": "The raw responses returned by the model provider.",
            "key": "provider_responses",
            "valueType": {
              "type": "list",
              "itemType": {
                "type": "unknown"
              }
            }
          },
          {
            "description": "The raw request sent to the model provider.",
            "key": "provider_request",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "map",
                "keyType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                },
                "valueType": {
                  "type": "unknown"
                }
              }
            }
          },
          {
            "description": "ID of the session if it belongs to one.",
            "key": "session_id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Controls how the model uses tools. The following options are supported: 'none' forces the model to not call a tool; the default when no tools are provided as part of the model config. 'auto' the model can decide to call one of the provided tools; the default when tools are provided as part of the model config. Providing {'type': 'function', 'function': {name': <TOOL_NAME>}} forces the model to use the named function.",
            "key": "tool_choice",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "type_:ChatResponseToolChoice"
              }
            }
          }
        ]
      }
    },
    "type_:ChatRole": {
      "description": "An enumeration.",
      "name": "ChatRole",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "user"
          },
          {
            "value": "assistant"
          },
          {
            "value": "system"
          },
          {
            "value": "tool"
          }
        ]
      }
    },
    "type_:CompletionResponse": {
      "name": "CompletionResponse",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Unique identifier of the parent project. Will not be provided if the request was made without providing a project name or id",
            "key": "project_id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "How many completions to make for each set of inputs.",
            "key": "num_samples",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer",
                  "default": 1
                }
              }
            }
          },
          {
            "description": "Include the log probabilities of the top n tokens in the provider_response",
            "key": "logprobs",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          },
          {
            "description": "The suffix that comes after a completion of inserted text. Useful for completions that act like inserts.",
            "key": "suffix",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "End-user ID passed through to provider call.",
            "key": "user",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Array containing the generation responses.",
            "key": "data",
            "valueType": {
              "type": "list",
              "itemType": {
                "type": "id",
                "value": "type_:DataResponse"
              }
            }
          },
          {
            "description": "Counts of the number of tokens used and related stats.",
            "key": "usage",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "type_:Usage"
              }
            }
          },
          {
            "description": "Any additional metadata to record.",
            "key": "metadata",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "map",
                "keyType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                },
                "valueType": {
                  "type": "unknown"
                }
              }
            }
          },
          {
            "description": "The raw responses returned by the model provider.",
            "key": "provider_responses",
            "valueType": {
              "type": "list",
              "itemType": {
                "type": "unknown"
              }
            }
          },
          {
            "description": "The raw request sent to the model provider.",
            "key": "provider_request",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "map",
                "keyType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                },
                "valueType": {
                  "type": "unknown"
                }
              }
            }
          },
          {
            "description": "ID of the session if it belongs to one.",
            "key": "session_id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "type_:ConfigResponse": {
      "name": "ConfigResponse",
      "shape": {
        "type": "discriminatedUnion",
        "discriminant": "type",
        "variants": [
          {
            "discriminantValue": "model",
            "additionalProperties": {
              "extends": ["type_:ModelConfigResponse"],
              "properties": []
            }
          },
          {
            "discriminantValue": "tool",
            "additionalProperties": {
              "extends": ["type_:ToolConfigResponse"],
              "properties": []
            }
          },
          {
            "discriminantValue": "evaluator",
            "additionalProperties": {
              "extends": ["type_:EvaluatorConfigResponse"],
              "properties": []
            }
          },
          {
            "discriminantValue": "agent",
            "additionalProperties": {
              "extends": ["type_:AgentConfigResponse"],
              "properties": []
            }
          },
          {
            "discriminantValue": "generic",
            "additionalProperties": {
              "extends": ["type_:GenericConfigResponse"],
              "properties": []
            }
          }
        ]
      }
    },
    "type_:ConfigType": {
      "description": "An enumeration.",
      "name": "ConfigType",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "generic"
          },
          {
            "value": "model"
          },
          {
            "value": "tool"
          },
          {
            "value": "agent"
          },
          {
            "value": "evaluator"
          }
        ]
      }
    },
    "type_:CreateDatapointRequestTargetValue": {
      "name": "CreateDatapointRequestTargetValue",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "type": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "type": {
              "type": "primitive",
              "value": {
                "type": "integer"
              }
            }
          },
          {
            "type": {
              "type": "primitive",
              "value": {
                "type": "double"
              }
            }
          },
          {
            "type": {
              "type": "primitive",
              "value": {
                "type": "boolean"
              }
            }
          },
          {
            "type": {
              "type": "list",
              "itemType": {
                "type": "unknown"
              }
            }
          },
          {
            "type": {
              "type": "map",
              "keyType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              },
              "valueType": {
                "type": "unknown"
              }
            }
          }
        ]
      }
    },
    "type_:CreateDatapointRequest": {
      "name": "CreateDatapointRequest",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "The inputs to the prompt template for this datapoint.",
            "key": "inputs",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "map",
                "keyType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                },
                "valueType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          },
          {
            "description": "The chat messages for this datapoint.",
            "key": "messages",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "id",
                  "value": "type_:ChatMessageWithToolCall"
                }
              }
            }
          },
          {
            "description": "Object with criteria necessary to evaluate this datapoint.",
            "key": "target",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "map",
                "keyType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                },
                "valueType": {
                  "type": "id",
                  "value": "type_:CreateDatapointRequestTargetValue"
                }
              }
            }
          }
        ]
      }
    },
    "type_:CreateDatapointsByLogsRequest": {
      "name": "CreateDatapointsByLogsRequest",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "The IDs of the logs to create datapoints from.",
            "key": "log_ids",
            "valueType": {
              "type": "list",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "type_:CreateLogResponse": {
      "name": "CreateLogResponse",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "String ID of logged datapoint. Starts with `data_`.",
            "key": "id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "String ID of project the datapoint belongs to. Starts with `pr_`.",
            "key": "project_id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "String ID of session the datapoint belongs to. Populated only if the datapoint was logged with `session_id` or `session_reference_id`, and is `None` otherwise. Starts with `sesh_`.",
            "key": "session_id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "type_:CreateSessionResponse": {
      "name": "CreateSessionResponse",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "String ID of session. Starts with `sesh_`.",
            "key": "id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          }
        ]
      }
    },
    "type_:DashboardConfiguration": {
      "name": "DashboardConfiguration",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "time_unit",
            "valueType": {
              "type": "id",
              "value": "type_:TimeUnit"
            }
          },
          {
            "key": "time_range_days",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "integer"
              }
            }
          },
          {
            "key": "model_config_ids",
            "valueType": {
              "type": "list",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "type_:DataResponse": {
      "name": "DataResponse",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Unique ID for the model inputs and output logged to Humanloop. Use this when recording feedback later.",
            "key": "id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "The index for the sampled generation for a given input. The num_samples request parameter controls how many samples are generated.",
            "key": "index",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "integer"
              }
            }
          },
          {
            "description": "Output text returned from the provider model with leading and trailing whitespaces stripped.",
            "key": "output",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "Raw output text returned from the provider model.",
            "key": "raw_output",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "The inputs passed to the prompt template.",
            "key": "inputs",
            "valueType": {
              "type": "map",
              "keyType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              },
              "valueType": {
                "type": "unknown"
              }
            }
          },
          {
            "description": "Why the generation ended. One of 'stop' (indicating a stop token was encountered), or 'length' (indicating the max tokens limit has been reached), or 'tool_call' (indicating that the model has chosen to call a tool - in which case the tool_call parameter of the response will be populated). It will be set as null for the intermediary responses during a stream, and will only be set as non-null for the final streamed token.",
            "key": "finish_reason",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "The model configuration used to create the generation.",
            "key": "model_config_id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "Results of any tools run during the generation.",
            "key": "tool_results",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "id",
                  "value": "type_:ToolResultResponse"
                }
              }
            }
          }
        ]
      }
    },
    "type_:DatapointResponseTargetValue": {
      "name": "DatapointResponseTargetValue",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "type": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "type": {
              "type": "primitive",
              "value": {
                "type": "integer"
              }
            }
          },
          {
            "type": {
              "type": "primitive",
              "value": {
                "type": "double"
              }
            }
          },
          {
            "type": {
              "type": "primitive",
              "value": {
                "type": "boolean"
              }
            }
          },
          {
            "type": {
              "type": "list",
              "itemType": {
                "type": "unknown"
              }
            }
          },
          {
            "type": {
              "type": "map",
              "keyType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              },
              "valueType": {
                "type": "unknown"
              }
            }
          }
        ]
      }
    },
    "type_:DatapointResponse": {
      "name": "DatapointResponse",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "key": "dataset_id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "key": "inputs",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "map",
                "keyType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                },
                "valueType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          },
          {
            "key": "messages",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "id",
                  "value": "type_:ChatMessageWithToolCall"
                }
              }
            }
          },
          {
            "key": "target",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "map",
                "keyType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                },
                "valueType": {
                  "type": "id",
                  "value": "type_:DatapointResponseTargetValue"
                }
              }
            }
          }
        ]
      }
    },
    "type_:DatasetResponse": {
      "name": "DatasetResponse",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "Datasets are now files and do not belong to projects. If this dataset was created before that change, the legacy project ID will be provided here, otherwise an empty string will be returned.",
            "availability": "Deprecated",
            "key": "project_id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "key": "name",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "key": "description",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "key": "datapoint_count",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "integer"
              }
            }
          },
          {
            "key": "created_at",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "datetime"
              }
            }
          },
          {
            "key": "updated_at",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "datetime"
              }
            }
          }
        ]
      }
    },
    "type_:EnvironmentProjectConfigResponse": {
      "name": "EnvironmentProjectConfigResponse",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "String ID of project the model config belongs to. Starts with `pr_`.",
            "key": "project_id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "Name of the project the model config belongs to.",
            "key": "project_name",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "Model config unique identifier generated by Humanloop.",
            "key": "model_config_id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "A friendly display name for the model config.",
            "key": "model_config_name",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "The ID of the environment.",
            "key": "environment_id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "The name of the environment.",
            "key": "environment_name",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "Tag for the environment e.g. 'default' or 'other'.",
            "key": "environment_tag",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          }
        ]
      }
    },
    "type_:EnvironmentRequest": {
      "name": "EnvironmentRequest",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "String ID of the environment. Starts with `env_`.",
            "key": "id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "The environment name.",
            "key": "name",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "type_:EvaluationDatapointSnapshotResponse": {
      "name": "EvaluationDatapointSnapshotResponse",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "datapoint",
            "valueType": {
              "type": "id",
              "value": "type_:DatapointResponse"
            }
          },
          {
            "key": "log",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "type_:LogResponse"
              }
            }
          },
          {
            "key": "evaluation_results",
            "valueType": {
              "type": "list",
              "itemType": {
                "type": "id",
                "value": "type_:EvaluationResultResponse"
              }
            }
          }
        ]
      }
    },
    "type_:EvaluationResponse": {
      "name": "EvaluationResponse",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Unique ID for the evaluation. Starts with `ev_`.",
            "key": "id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "key": "status",
            "valueType": {
              "type": "id",
              "value": "type_:EvaluationStatus"
            }
          },
          {
            "key": "config",
            "valueType": {
              "type": "id",
              "value": "type_:ConfigResponse"
            }
          },
          {
            "key": "created_at",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "datetime"
              }
            }
          },
          {
            "key": "updated_at",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "datetime"
              }
            }
          },
          {
            "key": "evaluators",
            "valueType": {
              "type": "list",
              "itemType": {
                "type": "id",
                "value": "type_:EvaluatorResponse"
              }
            }
          },
          {
            "key": "dataset",
            "valueType": {
              "type": "id",
              "value": "type_:DatasetResponse"
            }
          },
          {
            "key": "dataset_version_id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "key": "dataset_snapshot",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "type_:DatasetResponse"
              }
            }
          },
          {
            "key": "evaluator_aggregates",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "id",
                  "value": "type_:ModelConfigEvaluatorAggregateResponse"
                }
              }
            }
          }
        ]
      }
    },
    "type_:Value": {
      "name": "Value",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "type": {
              "type": "primitive",
              "value": {
                "type": "boolean"
              }
            }
          },
          {
            "type": {
              "type": "primitive",
              "value": {
                "type": "double"
              }
            }
          },
          {
            "type": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "type": {
              "type": "list",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "type_:EvaluationResultResponse": {
      "name": "EvaluationResultResponse",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "key": "evaluator_id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "key": "evaluator_version_id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "key": "evaluation_id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "key": "log_id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "key": "log",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "type_:LogResponse"
              }
            }
          },
          {
            "key": "version_id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "key": "version",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "unknown"
              }
            }
          },
          {
            "key": "value",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "type_:Value"
              }
            }
          },
          {
            "key": "error",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "key": "updated_at",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "datetime"
              }
            }
          },
          {
            "key": "created_at",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "datetime"
              }
            }
          },
          {
            "key": "evaluator_log",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "type_:LogResponse"
              }
            }
          }
        ]
      }
    },
    "type_:EvaluationStatus": {
      "description": "Status of an evaluation.",
      "name": "EvaluationStatus",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "pending"
          },
          {
            "value": "running"
          },
          {
            "value": "completed"
          },
          {
            "value": "cancelled"
          }
        ]
      }
    },
    "type_:EvaluatorArgumentsType": {
      "description": "Enum representing the possible argument types of an evaluator.",
      "name": "EvaluatorArgumentsType",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "target_free"
          },
          {
            "value": "target_required"
          }
        ]
      }
    },
    "type_:EvaluatorConfigResponse": {
      "name": "EvaluatorConfigResponse",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "String ID of config. Starts with `config_`.",
            "key": "id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "Other parameters that define the config.",
            "key": "other",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "map",
                "keyType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                },
                "valueType": {
                  "type": "unknown"
                }
              }
            }
          },
          {
            "description": "The user who created the config.",
            "key": "created_by",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "type_:UserResponse"
              }
            }
          },
          {
            "description": "Whether the config is committed or not.",
            "key": "status",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "Name of config.",
            "key": "name",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "Description of config.",
            "key": "description",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Type of evaluator.",
            "key": "evaluator_type",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "The model config defining the LLM evaluator.",
            "key": "model_config",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "type_:ModelConfigResponse"
              }
            }
          },
          {
            "description": "The code for the evaluator. This code will be executed in a sandboxed environment.",
            "key": "code",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Whether this evaluator is target-free or target-required.",
            "key": "arguments_type",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "type_:EvaluatorArgumentsType"
              }
            }
          },
          {
            "description": "The type of the return value of the evaluator.",
            "key": "return_type",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "type_:EvaluatorReturnTypeEnum"
              }
            }
          }
        ]
      }
    },
    "type_:EvaluatorResponse": {
      "name": "EvaluatorResponse",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "The name of the evaluator.",
            "key": "name",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "minLength": 1,
                "maxLength": 1
              }
            }
          },
          {
            "description": "The description of the evaluator.",
            "key": "description",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "Whether this evaluator is target-free or target-required.",
            "key": "arguments_type",
            "valueType": {
              "type": "id",
              "value": "type_:EvaluatorArgumentsType"
            }
          },
          {
            "description": "The type of the return value of the evaluator.",
            "key": "return_type",
            "valueType": {
              "type": "id",
              "value": "type_:EvaluatorReturnTypeEnum"
            }
          },
          {
            "description": "The code for the evaluator. This code will be executed in a sandboxed environment.",
            "key": "code",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "The model config defining the LLM evaluator.",
            "key": "model_config",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "type_:ModelConfigResponse"
              }
            }
          },
          {
            "description": "The type of the evaluator.",
            "key": "type",
            "valueType": {
              "type": "id",
              "value": "type_:EvaluatorType"
            }
          },
          {
            "description": "Unique ID for the evaluator. Starts with `evfn_`.",
            "key": "id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "key": "created_at",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "datetime"
              }
            }
          },
          {
            "key": "updated_at",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "datetime"
              }
            }
          },
          {
            "description": "The project where the evaluator logs are stored.",
            "key": "logging_project",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "type_:ProjectResponse"
              }
            }
          }
        ]
      }
    },
    "type_:EvaluatorReturnTypeEnum": {
      "description": "Enum representing the possible return types of an evaluator.",
      "name": "EvaluatorReturnTypeEnum",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "boolean"
          },
          {
            "value": "number"
          },
          {
            "value": "select"
          },
          {
            "value": "multi_select"
          },
          {
            "value": "text"
          }
        ]
      }
    },
    "type_:EvaluatorType": {
      "description": "An enumeration.",
      "name": "EvaluatorType",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "python"
          },
          {
            "value": "llm"
          },
          {
            "value": "human"
          },
          {
            "value": "external"
          }
        ]
      }
    },
    "type_:FeedbackType": {
      "description": "An enumeration.",
      "name": "FeedbackType",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "rating"
          },
          {
            "value": "action"
          },
          {
            "value": "issue"
          },
          {
            "value": "correction"
          },
          {
            "value": "comment"
          }
        ]
      }
    },
    "type_:FeedbackValue": {
      "description": "The feedback value to set. This would be the appropriate text for 'correction' or 'comment', or a label to apply for 'rating', 'action', or 'issue'.",
      "name": "FeedbackValue",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "type": {
              "type": "primitive",
              "value": {
                "type": "boolean"
              }
            }
          },
          {
            "type": {
              "type": "primitive",
              "value": {
                "type": "double"
              }
            }
          },
          {
            "type": {
              "type": "list",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "type": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          }
        ]
      }
    },
    "type_:Feedback": {
      "name": "Feedback",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "The type of feedback. The default feedback types available are 'rating', 'action', 'issue', 'correction', and 'comment'.",
            "key": "type",
            "valueType": {
              "type": "id",
              "value": "type_:FeedbackType"
            }
          },
          {
            "description": "The feedback value to set. This would be the appropriate text for 'correction' or 'comment', or a label to apply for 'rating', 'action', or 'issue'.",
            "key": "value",
            "valueType": {
              "type": "id",
              "value": "type_:FeedbackValue"
            }
          },
          {
            "description": "ID to associate the feedback to a previously logged datapoint.",
            "key": "data_id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "A unique identifier to who provided the feedback.",
            "key": "user",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "User defined timestamp for when the feedback was created.",
            "key": "created_at",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "datetime"
                }
              }
            }
          }
        ]
      }
    },
    "type_:FeedbackClass": {
      "description": "An enumeration.",
      "name": "FeedbackClass",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "select"
          },
          {
            "value": "multi_select"
          },
          {
            "value": "text"
          },
          {
            "value": "number"
          }
        ]
      }
    },
    "type_:FeedbackLabelRequest": {
      "name": "FeedbackLabelRequest",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "value",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "key": "sentiment",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "type_:LabelSentiment"
              }
            }
          }
        ]
      }
    },
    "type_:FeedbackRequestType": {
      "description": "The type of feedback. The default feedback types available are 'rating', 'action', 'issue', 'correction', and 'comment'.",
      "name": "FeedbackRequestType",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "type": {
              "type": "id",
              "value": "type_:FeedbackType"
            },
            "displayName": "Feedback Type"
          },
          {
            "type": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          }
        ]
      }
    },
    "type_:FeedbackRequestValue": {
      "description": "The feedback value to be set. This field should be left blank when unsetting 'rating', 'correction' or 'comment', but is required otherwise.",
      "name": "FeedbackRequestValue",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "type": {
              "type": "primitive",
              "value": {
                "type": "boolean"
              }
            }
          },
          {
            "type": {
              "type": "primitive",
              "value": {
                "type": "double"
              }
            }
          },
          {
            "type": {
              "type": "list",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "type": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          }
        ]
      }
    },
    "type_:FeedbackRequest": {
      "name": "FeedbackRequest",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "The type of feedback. The default feedback types available are 'rating', 'action', 'issue', 'correction', and 'comment'.",
            "key": "type",
            "valueType": {
              "type": "id",
              "value": "type_:FeedbackRequestType"
            }
          },
          {
            "description": "The feedback value to be set. This field should be left blank when unsetting 'rating', 'correction' or 'comment', but is required otherwise.",
            "key": "value",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "type_:FeedbackRequestValue"
              }
            }
          },
          {
            "description": "ID to associate the feedback to a previously logged datapoint.",
            "key": "data_id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "A unique identifier to who provided the feedback.",
            "key": "user",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "User defined timestamp for when the feedback was created.",
            "key": "created_at",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "datetime"
                }
              }
            }
          },
          {
            "description": "If true, the value for this feedback is unset.",
            "key": "unset",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "boolean"
                }
              }
            }
          }
        ]
      }
    },
    "type_:FeedbackResponseType": {
      "description": "The type of feedback. The default feedback types available are 'rating', 'action', 'issue', 'correction', and 'comment'.",
      "name": "FeedbackResponseType",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "type": {
              "type": "id",
              "value": "type_:FeedbackType"
            },
            "displayName": "Feedback Type"
          },
          {
            "type": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          }
        ]
      }
    },
    "type_:FeedbackResponseValue": {
      "description": "The feedback value to set. This would be the appropriate text for 'correction' or 'comment', or a label to apply for 'rating', 'action', or 'issue'.",
      "name": "FeedbackResponseValue",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "type": {
              "type": "primitive",
              "value": {
                "type": "boolean"
              }
            }
          },
          {
            "type": {
              "type": "primitive",
              "value": {
                "type": "double"
              }
            }
          },
          {
            "type": {
              "type": "list",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "type": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          }
        ]
      }
    },
    "type_:FeedbackResponse": {
      "name": "FeedbackResponse",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "The type of feedback. The default feedback types available are 'rating', 'action', 'issue', 'correction', and 'comment'.",
            "key": "type",
            "valueType": {
              "type": "id",
              "value": "type_:FeedbackResponseType"
            }
          },
          {
            "description": "The feedback value to set. This would be the appropriate text for 'correction' or 'comment', or a label to apply for 'rating', 'action', or 'issue'.",
            "key": "value",
            "valueType": {
              "type": "id",
              "value": "type_:FeedbackResponseValue"
            }
          },
          {
            "description": "ID to associate the feedback to a previously logged datapoint.",
            "key": "data_id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "A unique identifier to who provided the feedback.",
            "key": "user",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "User defined timestamp for when the feedback was created.",
            "key": "created_at",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "datetime"
                }
              }
            }
          },
          {
            "description": "String ID of user feedback. Starts with `ann_`, short for annotation.",
            "key": "id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          }
        ]
      }
    },
    "type_:FeedbackTypeModelType": {
      "description": "The type of feedback. The default feedback types available are 'rating', 'action', 'issue', 'correction', and 'comment'.",
      "name": "FeedbackTypeModelType",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "type": {
              "type": "id",
              "value": "type_:FeedbackType"
            },
            "displayName": "Feedback Type"
          },
          {
            "type": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          }
        ]
      }
    },
    "type_:FeedbackTypeModel": {
      "name": "FeedbackTypeModel",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "The type of feedback. The default feedback types available are 'rating', 'action', 'issue', 'correction', and 'comment'.",
            "key": "type",
            "valueType": {
              "type": "id",
              "value": "type_:FeedbackTypeModelType"
            }
          },
          {
            "description": "The allowed values for categorical feedback types. Not populated for `correction` and `comment`.",
            "key": "values",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "id",
                  "value": "type_:CategoricalFeedbackLabel"
                }
              }
            }
          }
        ]
      }
    },
    "type_:FeedbackTypes": {
      "name": "FeedbackTypes",
      "shape": {
        "type": "alias",
        "value": {
          "type": "list",
          "itemType": {
            "type": "id",
            "value": "type_:FeedbackTypeModel"
          }
        }
      }
    },
    "type_:FileType": {
      "description": "Enum for File types.",
      "name": "FileType",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "prompt"
          },
          {
            "value": "tool"
          },
          {
            "value": "dataset"
          },
          {
            "value": "evaluator"
          },
          {
            "value": "flow"
          }
        ]
      }
    },
    "type_:FunctionTool": {
      "description": "A function tool to be called by the model where user owns runtime.",
      "name": "FunctionTool",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "name",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "key": "arguments",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "type_:FunctionToolChoice": {
      "description": "A function tool to be called by the model where user owns runtime.",
      "name": "FunctionToolChoice",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "name",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          }
        ]
      }
    },
    "type_:GenericConfigResponse": {
      "name": "GenericConfigResponse",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "String ID of config. Starts with `config_`.",
            "key": "id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "Other parameters that define the config.",
            "key": "other",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "map",
                "keyType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                },
                "valueType": {
                  "type": "unknown"
                }
              }
            }
          },
          {
            "description": "The user who created the config.",
            "key": "created_by",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "type_:UserResponse"
              }
            }
          },
          {
            "description": "Whether the config is committed or not.",
            "key": "status",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "Name of config.",
            "key": "name",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "Description of config.",
            "key": "description",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "type_:GetModelConfigResponse": {
      "description": "A selected model configuration.",
      "name": "GetModelConfigResponse",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "String ID of project the model config belongs to. Starts with `pr_`.",
            "key": "project_id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "Name of the project the model config belongs to.",
            "key": "project_name",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "key": "created_at",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "datetime"
              }
            }
          },
          {
            "key": "updated_at",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "datetime"
              }
            }
          },
          {
            "key": "last_used",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "datetime"
              }
            }
          },
          {
            "description": "Number of datapoints associated with this project model config.",
            "key": "num_datapoints",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          },
          {
            "description": "Aggregates of evaluators for the model config.",
            "key": "evaluation_aggregates",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "id",
                  "value": "type_:ModelConfigEvaluatorAggregateResponse"
                }
              }
            }
          },
          {
            "key": "config",
            "valueType": {
              "type": "id",
              "value": "type_:ConfigResponse"
            }
          },
          {
            "description": "ID of environment to reference in subsequent log calls.",
            "key": "environment_id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "type_:HTTPValidationError": {
      "name": "HTTPValidationError",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "detail",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "id",
                  "value": "type_:ValidationError"
                }
              }
            }
          }
        ]
      }
    },
    "type_:ImageChatContent": {
      "name": "ImageChatContent",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "The message's image content.",
            "key": "image_url",
            "valueType": {
              "type": "id",
              "value": "type_:ImageUrl"
            }
          }
        ]
      }
    },
    "type_:ImageUrlDetail": {
      "description": "Specify the detail level of the image provided to the model. For more details see: https://platform.openai.com/docs/guides/vision/low-or-high-fidelity-image-understanding",
      "name": "ImageUrlDetail",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "high"
          },
          {
            "value": "low"
          },
          {
            "value": "auto"
          }
        ]
      }
    },
    "type_:ImageUrl": {
      "name": "ImageUrl",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Either a URL of the image or the base64 encoded image data.",
            "key": "url",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "Specify the detail level of the image provided to the model. For more details see: https://platform.openai.com/docs/guides/vision/low-or-high-fidelity-image-understanding",
            "key": "detail",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "type_:ImageUrlDetail"
              }
            }
          }
        ]
      }
    },
    "type_:LabelSentiment": {
      "description": "How a label should be treated in calculating Version performance.\n\nUsed by a File's PAPV (Positive Action Per View) metric.",
      "name": "LabelSentiment",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "positive"
          },
          {
            "value": "negative"
          },
          {
            "value": "neutral"
          },
          {
            "value": "unset"
          }
        ]
      }
    },
    "type_:LinkedToolRequest": {
      "name": "LinkedToolRequest",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "The ID of the linked tool. Starts with \"oc\\_\"",
            "key": "id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "The source of the linked tool. For a linked tool it should be `organization`",
            "key": "source",
            "valueType": {
              "type": "literal",
              "value": {
                "type": "stringLiteral",
                "value": "organization"
              }
            }
          },
          {
            "description": "The name of the linked tool.",
            "key": "name",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "The description of the linked tool.",
            "key": "description",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Whether the tool is strict or not. If strict, the model will be forced to respond with JSON matching the parameters schema.",
            "key": "strict",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "boolean"
                }
              }
            }
          },
          {
            "description": "The parameters of the linked tool.",
            "key": "parameters",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "map",
                "keyType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                },
                "valueType": {
                  "type": "unknown"
                }
              }
            }
          }
        ]
      }
    },
    "type_:Judgment": {
      "name": "Judgment",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "type": {
              "type": "primitive",
              "value": {
                "type": "boolean"
              }
            }
          },
          {
            "type": {
              "type": "primitive",
              "value": {
                "type": "double"
              }
            }
          },
          {
            "type": {
              "type": "list",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "type": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          }
        ]
      }
    },
    "type_:Config": {
      "description": "The model config used for this generation. Required unless `config_id` is provided.",
      "name": "Config",
      "shape": {
        "type": "discriminatedUnion",
        "discriminant": "type",
        "variants": [
          {
            "discriminantValue": "model",
            "additionalProperties": {
              "extends": ["type_:ModelConfigRequest"],
              "properties": []
            }
          },
          {
            "discriminantValue": "tool",
            "additionalProperties": {
              "extends": ["type_:ToolConfigRequest"],
              "properties": []
            }
          }
        ]
      }
    },
    "type_:LogRequestFeedback": {
      "description": "Optional parameter to provide feedback with your logged datapoint.",
      "name": "LogRequestFeedback",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "type": {
              "type": "id",
              "value": "type_:Feedback"
            },
            "displayName": "Feedback"
          },
          {
            "type": {
              "type": "list",
              "itemType": {
                "type": "id",
                "value": "type_:Feedback"
              }
            }
          }
        ]
      }
    },
    "type_:LogRequest": {
      "description": "Request model for logging a datapoint.",
      "name": "LogRequest",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Unique project name. If no project exists with this name, a new project will be created.",
            "key": "project",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Unique ID of a project to associate to the log. Either this or `project` must be provided.",
            "key": "project_id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "ID of the session to associate the datapoint.",
            "key": "session_id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "A unique string identifying the session to associate the datapoint to. Allows you to log multiple datapoints to a session (using an ID kept by your internal systems) by passing the same `session_reference_id` in subsequent log requests. Specify at most one of this or `session_id`.",
            "key": "session_reference_id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "ID associated to the parent datapoint in a session.",
            "key": "parent_id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "A unique string identifying the previously-logged parent datapoint in a session. Allows you to log nested datapoints with your internal system IDs by passing the same reference ID as `parent_id` in a prior log request. Specify at most one of this or `parent_id`. Note that this cannot refer to a datapoint being logged in the same request.",
            "key": "parent_reference_id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "The inputs passed to the prompt template.",
            "key": "inputs",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "map",
                "keyType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                },
                "valueType": {
                  "type": "unknown"
                }
              }
            }
          },
          {
            "description": "Identifies where the model was called from.",
            "key": "source",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Any additional metadata to record.",
            "key": "metadata",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "map",
                "keyType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                },
                "valueType": {
                  "type": "unknown"
                }
              }
            }
          },
          {
            "description": "Whether the request/response payloads will be stored on Humanloop.",
            "key": "save",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "boolean"
                }
              }
            }
          },
          {
            "description": "ID of the source datapoint if this is a log derived from a datapoint in a dataset.",
            "key": "source_datapoint_id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "A unique string to reference the datapoint. Allows you to log nested datapoints with your internal system IDs by passing the same reference ID as `parent_id` in a subsequent log request.",
            "key": "reference_id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "The messages passed to the to provider chat endpoint.",
            "key": "messages",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "id",
                  "value": "type_:ChatMessageWithToolCall"
                }
              }
            }
          },
          {
            "description": "Generated output from your model for the provided inputs. Can be `None` if logging an error, or if logging a parent datapoint with the intention to populate it later",
            "key": "output",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "key": "judgment",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "type_:Judgment"
              }
            }
          },
          {
            "description": "Unique ID of a config to associate to the log.",
            "key": "config_id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "The model config used for this generation. Required unless `config_id` is provided.",
            "key": "config",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "type_:Config"
              }
            }
          },
          {
            "description": "The environment name used to create the log.",
            "key": "environment",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Optional parameter to provide feedback with your logged datapoint.",
            "key": "feedback",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "type_:LogRequestFeedback"
              }
            }
          },
          {
            "description": "User defined timestamp for when the log was created.",
            "key": "created_at",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "datetime"
                }
              }
            }
          },
          {
            "description": "Error message if the log is an error.",
            "key": "error",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Captured log and debug statements.",
            "key": "stdout",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Duration of the logged event in seconds.",
            "key": "duration",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "double"
                }
              }
            }
          },
          {
            "description": "The message returned by the provider.",
            "key": "output_message",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "type_:ChatMessageWithToolCall"
              }
            }
          },
          {
            "description": "Number of tokens in the prompt used to generate the output.",
            "key": "prompt_tokens",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          },
          {
            "description": "Number of tokens in the output generated by the model.",
            "key": "output_tokens",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          },
          {
            "description": "Cost in dollars associated to the tokens in the prompt.",
            "key": "prompt_cost",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "double"
                }
              }
            }
          },
          {
            "description": "Cost in dollars associated to the tokens in the output.",
            "key": "output_cost",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "double"
                }
              }
            }
          },
          {
            "description": "Raw request sent to provider.",
            "key": "provider_request",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "map",
                "keyType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                },
                "valueType": {
                  "type": "unknown"
                }
              }
            }
          },
          {
            "description": "Raw response received the provider.",
            "key": "provider_response",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "map",
                "keyType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                },
                "valueType": {
                  "type": "unknown"
                }
              }
            }
          }
        ]
      }
    },
    "type_:LogResponseToolChoice": {
      "description": "Controls how the model uses tools. The following options are supported: 'none' forces the model to not call a tool; the default when no tools are provided as part of the model config. 'auto' the model can decide to call one of the provided tools; the default when tools are provided as part of the model config. Providing {'type': 'function', 'function': {name': <TOOL_NAME>}} forces the model to use the named function.",
      "name": "LogResponseToolChoice",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "type": {
              "type": "literal",
              "value": {
                "type": "stringLiteral",
                "value": "none"
              }
            }
          },
          {
            "type": {
              "type": "literal",
              "value": {
                "type": "stringLiteral",
                "value": "auto"
              }
            }
          },
          {
            "type": {
              "type": "literal",
              "value": {
                "type": "stringLiteral",
                "value": "required"
              }
            }
          },
          {
            "type": {
              "type": "id",
              "value": "type_:ToolChoice"
            },
            "displayName": "Tool Choice"
          }
        ]
      }
    },
    "type_:LogResponse": {
      "description": "Request model for logging a datapoint.",
      "name": "LogResponse",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "The name of the project associated with this log",
            "key": "project",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "The unique ID of the project associated with this log.",
            "key": "project_id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "ID of the session to associate the datapoint.",
            "key": "session_id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "A unique string identifying the session to associate the datapoint to. Allows you to log multiple datapoints to a session (using an ID kept by your internal systems) by passing the same `session_reference_id` in subsequent log requests. Specify at most one of this or `session_id`.",
            "key": "session_reference_id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "ID associated to the parent datapoint in a session.",
            "key": "parent_id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "A unique string identifying the previously-logged parent datapoint in a session. Allows you to log nested datapoints with your internal system IDs by passing the same reference ID as `parent_id` in a prior log request. Specify at most one of this or `parent_id`. Note that this cannot refer to a datapoint being logged in the same request.",
            "key": "parent_reference_id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "The inputs passed to the prompt template.",
            "key": "inputs",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "map",
                "keyType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                },
                "valueType": {
                  "type": "unknown"
                }
              }
            }
          },
          {
            "description": "Identifies where the model was called from.",
            "key": "source",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Any additional metadata to record.",
            "key": "metadata",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "map",
                "keyType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                },
                "valueType": {
                  "type": "unknown"
                }
              }
            }
          },
          {
            "description": "Whether the request/response payloads will be stored on Humanloop.",
            "key": "save",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "boolean"
                }
              }
            }
          },
          {
            "description": "ID of the source datapoint if this is a log derived from a datapoint in a dataset.",
            "key": "source_datapoint_id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "String ID of logged datapoint. Starts with `data_`.",
            "key": "id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "Unique user-provided string identifying the datapoint.",
            "key": "reference_id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "The messages passed to the to provider chat endpoint.",
            "key": "messages",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "id",
                  "value": "type_:ChatMessageWithToolCall"
                }
              }
            }
          },
          {
            "description": "Generated output from your model for the provided inputs. Can be `None` if logging an error, or if logging a parent datapoint with the intention to populate it later",
            "key": "output",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "key": "judgment",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "type_:Judgment"
              }
            }
          },
          {
            "description": "Unique ID of a config to associate to the log.",
            "key": "config_id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "key": "config",
            "valueType": {
              "type": "id",
              "value": "type_:ConfigResponse"
            }
          },
          {
            "description": "The environment name used to create the log.",
            "key": "environment",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "key": "feedback",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "id",
                  "value": "type_:FeedbackResponse"
                }
              }
            }
          },
          {
            "description": "User defined timestamp for when the log was created.",
            "key": "created_at",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "datetime"
                }
              }
            }
          },
          {
            "description": "Error message if the log is an error.",
            "key": "error",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Captured log and debug statements.",
            "key": "stdout",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Duration of the logged event in seconds.",
            "key": "duration",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "double"
                }
              }
            }
          },
          {
            "description": "The message returned by the provider.",
            "key": "output_message",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "type_:ChatMessageWithToolCall"
              }
            }
          },
          {
            "description": "Number of tokens in the prompt used to generate the output.",
            "key": "prompt_tokens",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          },
          {
            "description": "Number of tokens in the output generated by the model.",
            "key": "output_tokens",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          },
          {
            "description": "Cost in dollars associated to the tokens in the prompt.",
            "key": "prompt_cost",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "double"
                }
              }
            }
          },
          {
            "description": "Cost in dollars associated to the tokens in the output.",
            "key": "output_cost",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "double"
                }
              }
            }
          },
          {
            "description": "Raw request sent to provider.",
            "key": "provider_request",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "map",
                "keyType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                },
                "valueType": {
                  "type": "unknown"
                }
              }
            }
          },
          {
            "description": "Raw response received the provider.",
            "key": "provider_response",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "map",
                "keyType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                },
                "valueType": {
                  "type": "unknown"
                }
              }
            }
          },
          {
            "description": "User email address provided when creating the datapoint.",
            "key": "user",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Latency of provider response.",
            "key": "provider_latency",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "double"
                }
              }
            }
          },
          {
            "description": "Total number of tokens in the prompt and output.",
            "key": "tokens",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          },
          {
            "description": "Raw output from the provider.",
            "key": "raw_output",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Reason the generation finished.",
            "key": "finish_reason",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "key": "tools",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "id",
                  "value": "type_:ToolResultResponse"
                }
              }
            }
          },
          {
            "description": "Controls how the model uses tools. The following options are supported: 'none' forces the model to not call a tool; the default when no tools are provided as part of the model config. 'auto' the model can decide to call one of the provided tools; the default when tools are provided as part of the model config. Providing {'type': 'function', 'function': {name': <TOOL_NAME>}} forces the model to use the named function.",
            "key": "tool_choice",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "type_:LogResponseToolChoice"
              }
            }
          },
          {
            "key": "evaluation_results",
            "valueType": {
              "type": "list",
              "itemType": {
                "type": "id",
                "value": "type_:EvaluationResultResponse"
              }
            }
          },
          {
            "key": "observability_status",
            "valueType": {
              "type": "id",
              "value": "type_:ObservabilityStatus"
            }
          },
          {
            "key": "updated_at",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "datetime"
              }
            }
          },
          {
            "description": "List of batch IDs the log belongs to.",
            "key": "batch_ids",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          }
        ]
      }
    },
    "type_:ModelConfigChatRequestStop": {
      "description": "The string (or list of strings) after which the model will stop generating. The returned text will not contain the stop sequence.",
      "name": "ModelConfigChatRequestStop",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "type": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "type": {
              "type": "list",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "type_:ModelConfigChatRequestToolsItem": {
      "name": "ModelConfigChatRequestToolsItem",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "type": {
              "type": "id",
              "value": "type_:LinkedToolRequest"
            },
            "displayName": "Linked Tool Request"
          },
          {
            "type": {
              "type": "id",
              "value": "type_:ModelConfigToolRequest"
            },
            "displayName": "Model Config Tool Request"
          }
        ]
      }
    },
    "type_:ModelConfigChatRequest": {
      "description": "Chat model config request.",
      "name": "ModelConfigChatRequest",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "A friendly display name for the model config. If not provided, a name will be generated.",
            "key": "name",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "A description of the model config.",
            "key": "description",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "The company providing the underlying model service.",
            "key": "provider",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "type_:ModelProviders"
              }
            }
          },
          {
            "description": "The model instance used. E.g. text-davinci-002.",
            "key": "model",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "The maximum number of tokens to generate. Provide max_tokens=-1 to dynamically calculate the maximum number of tokens to generate given the length of the prompt",
            "key": "max_tokens",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer",
                  "default": -1
                }
              }
            }
          },
          {
            "description": "What sampling temperature to use when making a generation. Higher values means the model will be more creative.",
            "key": "temperature",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "double",
                  "default": 1
                }
              }
            }
          },
          {
            "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass.",
            "key": "top_p",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "double",
                  "default": 1
                }
              }
            }
          },
          {
            "description": "The string (or list of strings) after which the model will stop generating. The returned text will not contain the stop sequence.",
            "key": "stop",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "type_:ModelConfigChatRequestStop"
              }
            }
          },
          {
            "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the generation so far.",
            "key": "presence_penalty",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "double",
                  "default": 0
                }
              }
            }
          },
          {
            "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on how frequently they appear in the generation so far.",
            "key": "frequency_penalty",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "double",
                  "default": 0
                }
              }
            }
          },
          {
            "description": "Other parameter values to be passed to the provider call.",
            "key": "other",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "map",
                "keyType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                },
                "valueType": {
                  "type": "unknown"
                }
              }
            }
          },
          {
            "description": "If specified, model will make a best effort to sample deterministically, but it is not guaranteed.",
            "key": "seed",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          },
          {
            "description": "The format of the response. Only type json_object is currently supported for chat.",
            "key": "response_format",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "type_:ResponseFormat"
              }
            }
          },
          {
            "description": "The provider model endpoint used.",
            "key": "endpoint",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "type_:ModelEndpoints"
              }
            }
          },
          {
            "description": "Messages prepended to the list of messages sent to the provider. These messages that will take your specified inputs to form your final request to the provider model. Input variables within the template should be specified with syntax: `{{input_name}}`.",
            "key": "chat_template",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "id",
                  "value": "type_:ChatMessageWithToolCall"
                }
              }
            }
          },
          {
            "description": "Make tools available to OpenAIs chat model as functions.",
            "key": "tools",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "id",
                  "value": "type_:ModelConfigChatRequestToolsItem"
                }
              }
            }
          }
        ]
      }
    },
    "type_:ModelConfigCompletionRequestStop": {
      "description": "The string (or list of strings) after which the model will stop generating. The returned text will not contain the stop sequence.",
      "name": "ModelConfigCompletionRequestStop",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "type": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "type": {
              "type": "list",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "type_:ModelConfigCompletionRequest": {
      "description": "Completion model config request",
      "name": "ModelConfigCompletionRequest",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "A friendly display name for the model config. If not provided, a name will be generated.",
            "key": "name",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "A description of the model config.",
            "key": "description",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "The company providing the underlying model service.",
            "key": "provider",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "type_:ModelProviders"
              }
            }
          },
          {
            "description": "The model instance used. E.g. text-davinci-002.",
            "key": "model",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "The maximum number of tokens to generate. Provide max_tokens=-1 to dynamically calculate the maximum number of tokens to generate given the length of the prompt",
            "key": "max_tokens",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer",
                  "default": -1
                }
              }
            }
          },
          {
            "description": "What sampling temperature to use when making a generation. Higher values means the model will be more creative.",
            "key": "temperature",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "double",
                  "default": 1
                }
              }
            }
          },
          {
            "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass.",
            "key": "top_p",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "double",
                  "default": 1
                }
              }
            }
          },
          {
            "description": "The string (or list of strings) after which the model will stop generating. The returned text will not contain the stop sequence.",
            "key": "stop",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "type_:ModelConfigCompletionRequestStop"
              }
            }
          },
          {
            "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the generation so far.",
            "key": "presence_penalty",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "double",
                  "default": 0
                }
              }
            }
          },
          {
            "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on how frequently they appear in the generation so far.",
            "key": "frequency_penalty",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "double",
                  "default": 0
                }
              }
            }
          },
          {
            "description": "Other parameter values to be passed to the provider call.",
            "key": "other",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "map",
                "keyType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                },
                "valueType": {
                  "type": "unknown"
                }
              }
            }
          },
          {
            "description": "If specified, model will make a best effort to sample deterministically, but it is not guaranteed.",
            "key": "seed",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          },
          {
            "description": "The format of the response. Only type json_object is currently supported for chat.",
            "key": "response_format",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "type_:ResponseFormat"
              }
            }
          },
          {
            "description": "The provider model endpoint used.",
            "key": "endpoint",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "type_:ModelEndpoints"
              }
            }
          },
          {
            "description": "Prompt template that will take your specified inputs to form your final request to the model. Input variables within the prompt template should be specified with syntax: `{{input_name}}`.",
            "key": "prompt_template",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "type_:ModelConfigEvaluatorAggregateResponse": {
      "name": "ModelConfigEvaluatorAggregateResponse",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "model_config_id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "key": "evaluator_id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "key": "evaluator_version_id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "key": "aggregate_value",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "double"
                }
              }
            }
          }
        ]
      }
    },
    "type_:ModelConfigRequestStop": {
      "description": "The string (or list of strings) after which the model will stop generating. The returned text will not contain the stop sequence.",
      "name": "ModelConfigRequestStop",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "type": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "type": {
              "type": "list",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "type_:ModelConfigRequestToolsItem": {
      "name": "ModelConfigRequestToolsItem",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "type": {
              "type": "id",
              "value": "type_:LinkedToolRequest"
            },
            "displayName": "Linked Tool Request"
          },
          {
            "type": {
              "type": "id",
              "value": "type_:ModelConfigToolRequest"
            },
            "displayName": "Model Config Tool Request"
          }
        ]
      }
    },
    "type_:ModelConfigRequest": {
      "description": "Model config used for logging both chat and completion.",
      "name": "ModelConfigRequest",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "A friendly display name for the model config. If not provided, a name will be generated.",
            "key": "name",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "A description of the model config.",
            "key": "description",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "The company providing the underlying model service.",
            "key": "provider",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "type_:ModelProviders"
              }
            }
          },
          {
            "description": "The model instance used. E.g. text-davinci-002.",
            "key": "model",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "The maximum number of tokens to generate. Provide max_tokens=-1 to dynamically calculate the maximum number of tokens to generate given the length of the prompt",
            "key": "max_tokens",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer",
                  "default": -1
                }
              }
            }
          },
          {
            "description": "What sampling temperature to use when making a generation. Higher values means the model will be more creative.",
            "key": "temperature",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "double",
                  "default": 1
                }
              }
            }
          },
          {
            "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass.",
            "key": "top_p",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "double",
                  "default": 1
                }
              }
            }
          },
          {
            "description": "The string (or list of strings) after which the model will stop generating. The returned text will not contain the stop sequence.",
            "key": "stop",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "type_:ModelConfigRequestStop"
              }
            }
          },
          {
            "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the generation so far.",
            "key": "presence_penalty",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "double",
                  "default": 0
                }
              }
            }
          },
          {
            "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on how frequently they appear in the generation so far.",
            "key": "frequency_penalty",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "double",
                  "default": 0
                }
              }
            }
          },
          {
            "description": "Other parameter values to be passed to the provider call.",
            "key": "other",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "map",
                "keyType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                },
                "valueType": {
                  "type": "unknown"
                }
              }
            }
          },
          {
            "description": "If specified, model will make a best effort to sample deterministically, but it is not guaranteed.",
            "key": "seed",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          },
          {
            "description": "The format of the response. Only type json_object is currently supported for chat.",
            "key": "response_format",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "type_:ResponseFormat"
              }
            }
          },
          {
            "description": "The provider model endpoint used.",
            "key": "endpoint",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "type_:ModelEndpoints"
              }
            }
          },
          {
            "description": "Prompt template that will take your specified inputs to form your final request to the model. Input variables within the prompt template should be specified with syntax: `{{input_name}}`.",
            "key": "prompt_template",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Messages prepended to the list of messages sent to the provider. These messages that will take your specified inputs to form your final request to the provider model. Input variables within the template should be specified with syntax: `{{input_name}}`.",
            "key": "chat_template",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "id",
                  "value": "type_:ChatMessageWithToolCall"
                }
              }
            }
          },
          {
            "description": "Make tools available to OpenAIs chat model as functions.",
            "key": "tools",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "id",
                  "value": "type_:ModelConfigRequestToolsItem"
                }
              }
            }
          }
        ]
      }
    },
    "type_:ModelConfigResponseStop": {
      "description": "The string (or list of strings) after which the model will stop generating. The returned text will not contain the stop sequence.",
      "name": "ModelConfigResponseStop",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "type": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "type": {
              "type": "list",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "type_:ModelConfigResponse": {
      "description": "Model config request.\n\nContains fields that are common to all (i.e. both chat and complete) endpoints.",
      "name": "ModelConfigResponse",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "String ID of config. Starts with `config_`.",
            "key": "id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "Other parameter values to be passed to the provider call.",
            "key": "other",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "map",
                "keyType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                },
                "valueType": {
                  "type": "unknown"
                }
              }
            }
          },
          {
            "description": "A friendly display name for the model config. If not provided, a name will be generated.",
            "key": "name",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "A description of the model config.",
            "key": "description",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "The company providing the underlying model service.",
            "key": "provider",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "type_:ModelProviders"
              }
            }
          },
          {
            "description": "The model instance used. E.g. text-davinci-002.",
            "key": "model",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "The maximum number of tokens to generate. Provide max_tokens=-1 to dynamically calculate the maximum number of tokens to generate given the length of the prompt",
            "key": "max_tokens",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer",
                  "default": -1
                }
              }
            }
          },
          {
            "description": "What sampling temperature to use when making a generation. Higher values means the model will be more creative.",
            "key": "temperature",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "double",
                  "default": 1
                }
              }
            }
          },
          {
            "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass.",
            "key": "top_p",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "double",
                  "default": 1
                }
              }
            }
          },
          {
            "description": "The string (or list of strings) after which the model will stop generating. The returned text will not contain the stop sequence.",
            "key": "stop",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "type_:ModelConfigResponseStop"
              }
            }
          },
          {
            "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the generation so far.",
            "key": "presence_penalty",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "double",
                  "default": 0
                }
              }
            }
          },
          {
            "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on how frequently they appear in the generation so far.",
            "key": "frequency_penalty",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "double",
                  "default": 0
                }
              }
            }
          },
          {
            "description": "If specified, model will make a best effort to sample deterministically, but it is not guaranteed.",
            "key": "seed",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          },
          {
            "description": "The format of the response. Only type json_object is currently supported for chat.",
            "key": "response_format",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "type_:ResponseFormat"
              }
            }
          },
          {
            "description": "Prompt template that will take your specified inputs to form your final request to the model. NB: Input variables within the prompt template should be specified with syntax: `{{input_name}}`.",
            "key": "prompt_template",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Messages prepended to the list of messages sent to the provider. These messages that will take your specified inputs to form your final request to the provider model. NB: Input variables within the template should be specified with syntax: `{{input_name}}`.",
            "key": "chat_template",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "id",
                  "value": "type_:ChatMessageWithToolCall"
                }
              }
            }
          },
          {
            "description": "NB: Deprecated with tools field. Definition of tools shown to the model.",
            "availability": "Deprecated",
            "key": "tool_configs",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "id",
                  "value": "type_:ToolConfigResponse"
                }
              }
            }
          },
          {
            "description": "Tools shown to the model.",
            "key": "tools",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "id",
                  "value": "type_:ToolResponse"
                }
              }
            }
          },
          {
            "description": "The provider model endpoint used.",
            "key": "endpoint",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "type_:ModelEndpoints"
              }
            }
          }
        ]
      }
    },
    "type_:ModelConfigToolRequest": {
      "description": "Definition of tool within a model config.\n\nThe subset of ToolConfig parameters received by the chat endpoint.\nDoes not have things like the signature or setup schema.",
      "name": "ModelConfigToolRequest",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "The name of the tool shown to the model.",
            "key": "name",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "The description of the tool shown to the model.",
            "key": "description",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Whether the tool is strict or not. If strict, the model will be forced to respond with JSON matching the parameters schema.",
            "key": "strict",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "boolean"
                }
              }
            }
          },
          {
            "description": "Definition of parameters needed to run the tool. Provided in jsonschema format: https://json-schema.org/",
            "key": "parameters",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "map",
                "keyType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                },
                "valueType": {
                  "type": "unknown"
                }
              }
            }
          },
          {
            "description": "Source of the tool. If defined at an organization level will be 'organization' else 'inline'.",
            "key": "source",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "type_:ToolSource"
              }
            }
          },
          {
            "description": "Code source of the tool.",
            "key": "source_code",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Other parameters that define the config.",
            "key": "other",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "map",
                "keyType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                },
                "valueType": {
                  "type": "unknown"
                }
              }
            }
          },
          {
            "description": "If is_preset = true, this is the name of the preset tool on Humanloop. This is used as the key to look up the Humanloop runtime of the tool",
            "key": "preset_name",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "type_:ModelEndpoints": {
      "description": "Supported model provider endpoints.",
      "name": "ModelEndpoints",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "complete"
          },
          {
            "value": "chat"
          },
          {
            "value": "edit"
          }
        ]
      }
    },
    "type_:ModelProviders": {
      "description": "Supported model providers.",
      "name": "ModelProviders",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "openai"
          },
          {
            "value": "openai_azure"
          },
          {
            "value": "mock"
          },
          {
            "value": "anthropic"
          },
          {
            "value": "bedrock"
          },
          {
            "value": "cohere"
          },
          {
            "value": "replicate"
          },
          {
            "value": "google"
          },
          {
            "value": "groq"
          }
        ]
      }
    },
    "type_:ObservabilityStatus": {
      "description": "Status of a Log for observability.\n\nObservability is implemented by running monitoring Evaluators on Logs.",
      "name": "ObservabilityStatus",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "pending"
          },
          {
            "value": "running"
          },
          {
            "value": "completed"
          },
          {
            "value": "failed"
          }
        ]
      }
    },
    "type_:PaginatedDataDatapointResponse": {
      "name": "PaginatedDataDatapointResponse",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "records",
            "valueType": {
              "type": "list",
              "itemType": {
                "type": "id",
                "value": "type_:DatapointResponse"
              }
            }
          },
          {
            "key": "page",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "integer"
              }
            }
          },
          {
            "key": "size",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "integer"
              }
            }
          },
          {
            "key": "total",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "integer"
              }
            }
          }
        ]
      }
    },
    "type_:PaginatedDataEvaluationDatapointSnapshotResponse": {
      "name": "PaginatedDataEvaluationDatapointSnapshotResponse",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "records",
            "valueType": {
              "type": "list",
              "itemType": {
                "type": "id",
                "value": "type_:EvaluationDatapointSnapshotResponse"
              }
            }
          },
          {
            "key": "page",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "integer"
              }
            }
          },
          {
            "key": "size",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "integer"
              }
            }
          },
          {
            "key": "total",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "integer"
              }
            }
          }
        ]
      }
    },
    "type_:PaginatedDataEvaluationResponse": {
      "name": "PaginatedDataEvaluationResponse",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "records",
            "valueType": {
              "type": "list",
              "itemType": {
                "type": "id",
                "value": "type_:EvaluationResponse"
              }
            }
          },
          {
            "key": "page",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "integer"
              }
            }
          },
          {
            "key": "size",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "integer"
              }
            }
          },
          {
            "key": "total",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "integer"
              }
            }
          }
        ]
      }
    },
    "type_:PaginatedDataLogResponse": {
      "name": "PaginatedDataLogResponse",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "records",
            "valueType": {
              "type": "list",
              "itemType": {
                "type": "id",
                "value": "type_:LogResponse"
              }
            }
          },
          {
            "key": "page",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "integer"
              }
            }
          },
          {
            "key": "size",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "integer"
              }
            }
          },
          {
            "key": "total",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "integer"
              }
            }
          }
        ]
      }
    },
    "type_:PaginatedDataProjectResponse": {
      "name": "PaginatedDataProjectResponse",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "records",
            "valueType": {
              "type": "list",
              "itemType": {
                "type": "id",
                "value": "type_:ProjectResponse"
              }
            }
          },
          {
            "key": "page",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "integer"
              }
            }
          },
          {
            "key": "size",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "integer"
              }
            }
          },
          {
            "key": "total",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "integer"
              }
            }
          }
        ]
      }
    },
    "type_:PaginatedDataSessionResponse": {
      "name": "PaginatedDataSessionResponse",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "records",
            "valueType": {
              "type": "list",
              "itemType": {
                "type": "id",
                "value": "type_:SessionResponse"
              }
            }
          },
          {
            "key": "page",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "integer"
              }
            }
          },
          {
            "key": "size",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "integer"
              }
            }
          },
          {
            "key": "total",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "integer"
              }
            }
          }
        ]
      }
    },
    "type_:PlatformAccessEnum": {
      "description": "An enumeration.",
      "name": "PlatformAccessEnum",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "superadmin"
          },
          {
            "value": "supportadmin"
          },
          {
            "value": "user"
          }
        ]
      }
    },
    "type_:ProjectConfigResponse": {
      "name": "ProjectConfigResponse",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "String ID of project the model config belongs to. Starts with `pr_`.",
            "key": "project_id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "Name of the project the model config belongs to.",
            "key": "project_name",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "key": "created_at",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "datetime"
              }
            }
          },
          {
            "key": "updated_at",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "datetime"
              }
            }
          },
          {
            "key": "last_used",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "datetime"
              }
            }
          },
          {
            "description": "Number of datapoints associated with this project model config.",
            "key": "num_datapoints",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          },
          {
            "description": "Aggregates of evaluators for the model config.",
            "key": "evaluation_aggregates",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "id",
                  "value": "type_:ModelConfigEvaluatorAggregateResponse"
                }
              }
            }
          },
          {
            "key": "config",
            "valueType": {
              "type": "id",
              "value": "type_:ConfigResponse"
            }
          }
        ]
      }
    },
    "type_:ProjectInputResponse": {
      "name": "ProjectInputResponse",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Type of input.",
            "key": "name",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          }
        ]
      }
    },
    "type_:ProjectResponse": {
      "name": "ProjectResponse",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Project ID",
            "key": "id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "Unique project name.",
            "key": "name",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "Config that has been set as the project's active deployment.",
            "key": "active_config",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "type_:ProjectConfigResponse"
              }
            }
          },
          {
            "description": "Users associated to the project.",
            "key": "users",
            "valueType": {
              "type": "list",
              "itemType": {
                "type": "id",
                "value": "type_:ProjectUserResponse"
              }
            }
          },
          {
            "description": "The count of datapoints that have been logged to the project.",
            "key": "data_count",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "integer"
              }
            }
          },
          {
            "description": "The feedback types that have been defined in the project.",
            "key": "feedback_types",
            "valueType": {
              "type": "id",
              "value": "type_:FeedbackTypes"
            }
          },
          {
            "description": "Unique ID of the team the project belongs to. Starts with `tm_`.",
            "key": "team_id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "key": "config_type",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "type_:ConfigType"
              }
            }
          },
          {
            "description": "Evaluators that have been set as active for the project.",
            "key": "active_evaluators",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "id",
                  "value": "type_:EvaluatorResponse"
                }
              }
            }
          },
          {
            "description": "String ID of the directory the project belongs to. Starts with `dir_`.",
            "key": "directory_id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "key": "created_at",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "datetime"
              }
            }
          },
          {
            "key": "updated_at",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "datetime"
              }
            }
          }
        ]
      }
    },
    "type_:ProjectSortBy": {
      "description": "An enumeration.",
      "name": "ProjectSortBy",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "created_at"
          },
          {
            "value": "updated_at"
          },
          {
            "value": "name"
          }
        ]
      }
    },
    "type_:ProjectUserResponse": {
      "name": "ProjectUserResponse",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "String ID of user. Starts with `usr_`.",
            "key": "id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "The user's email address.",
            "key": "email_address",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "The user's full name.",
            "key": "full_name",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "type_:ProviderApiKeys": {
      "name": "ProviderApiKeys",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "openai",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "key": "ai21",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "key": "mock",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "key": "anthropic",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "key": "bedrock",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "key": "cohere",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "key": "openai_azure",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "key": "openai_azure_endpoint",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "type_:Type": {
      "name": "Type",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "json_object"
          },
          {
            "value": "json_schema"
          }
        ]
      }
    },
    "type_:ResponseFormat": {
      "description": "Response format of the model.",
      "name": "ResponseFormat",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "type",
            "valueType": {
              "type": "id",
              "value": "type_:Type"
            }
          },
          {
            "description": "The JSON schema of the response format if type is json_schema.",
            "key": "json_schema",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "map",
                "keyType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                },
                "valueType": {
                  "type": "unknown"
                }
              }
            }
          }
        ]
      }
    },
    "type_:SessionProjectResponse": {
      "name": "SessionProjectResponse",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "String ID of project the datapoint belongs to. Starts with `pr_`.",
            "key": "id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "key": "name",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "Type of project. e.g. `prompt` or `tool`.",
            "key": "type",
            "valueType": {
              "type": "id",
              "value": "type_:FileType"
            }
          }
        ]
      }
    },
    "type_:SessionResponse": {
      "name": "SessionResponse",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "String ID of session. Starts with `sesh_`.",
            "key": "id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "Unique user-provided string identifying the session.",
            "key": "reference_id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "List of projects that have datapoints associated to this session.",
            "key": "projects",
            "valueType": {
              "type": "list",
              "itemType": {
                "type": "id",
                "value": "type_:SessionProjectResponse"
              }
            }
          },
          {
            "description": "Number of datapoints associated to this session.",
            "key": "datapoints_count",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "integer"
              }
            }
          },
          {
            "description": "Inputs for the first datapoint in the session.",
            "key": "first_inputs",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "map",
                "keyType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                },
                "valueType": {
                  "type": "unknown"
                }
              }
            }
          },
          {
            "description": "Output for the last datapoint in the session.",
            "key": "last_output",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "key": "created_at",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "datetime"
              }
            }
          },
          {
            "key": "updated_at",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "datetime"
              }
            }
          }
        ]
      }
    },
    "type_:SortOrder": {
      "description": "An enumeration.",
      "name": "SortOrder",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "asc"
          },
          {
            "value": "desc"
          }
        ]
      }
    },
    "type_:TextChatContent": {
      "name": "TextChatContent",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "The message's text content.",
            "key": "text",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          }
        ]
      }
    },
    "type_:TimeUnit": {
      "description": "An enumeration.",
      "name": "TimeUnit",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "day"
          },
          {
            "value": "week"
          },
          {
            "value": "month"
          }
        ]
      }
    },
    "type_:ToolCall": {
      "description": "A tool call to be made.",
      "name": "ToolCall",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "key": "type",
            "valueType": {
              "type": "id",
              "value": "type_:ToolType"
            }
          },
          {
            "key": "function",
            "valueType": {
              "type": "id",
              "value": "type_:FunctionTool"
            }
          }
        ]
      }
    },
    "type_:ToolChoice": {
      "description": "Tool choice to force the model to use a tool.",
      "name": "ToolChoice",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "type",
            "valueType": {
              "type": "id",
              "value": "type_:ToolType"
            }
          },
          {
            "key": "function",
            "valueType": {
              "type": "id",
              "value": "type_:FunctionToolChoice"
            }
          }
        ]
      }
    },
    "type_:ToolConfigRequest": {
      "description": "Definition of tool within a model config.\n\nThe subset of ToolConfig parameters received by the chat endpoint.\nDoes not have things like the signature or setup schema.",
      "name": "ToolConfigRequest",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "The name of the tool shown to the model.",
            "key": "name",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "The description of the tool shown to the model.",
            "key": "description",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Whether the tool is strict or not. If strict, the model will be forced to respond with JSON matching the parameters schema.",
            "key": "strict",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "boolean"
                }
              }
            }
          },
          {
            "description": "Definition of parameters needed to run the tool. Provided in jsonschema format: https://json-schema.org/",
            "key": "parameters",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "map",
                "keyType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                },
                "valueType": {
                  "type": "unknown"
                }
              }
            }
          },
          {
            "description": "Source of the tool. If defined at an organization level will be 'organization' else 'inline'.",
            "key": "source",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "type_:ToolSource"
              }
            }
          },
          {
            "description": "Code source of the tool.",
            "key": "source_code",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Other parameters that define the config.",
            "key": "other",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "map",
                "keyType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                },
                "valueType": {
                  "type": "unknown"
                }
              }
            }
          },
          {
            "description": "If is_preset = true, this is the name of the preset tool on Humanloop. This is used as the key to look up the Humanloop runtime of the tool",
            "key": "preset_name",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "type_:ToolConfigResponse": {
      "name": "ToolConfigResponse",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "String ID of config. Starts with `config_`.",
            "key": "id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "Other parameters that define the config.",
            "key": "other",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "map",
                "keyType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                },
                "valueType": {
                  "type": "unknown"
                }
              }
            }
          },
          {
            "description": "The user who created the config.",
            "key": "created_by",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "type_:UserResponse"
              }
            }
          },
          {
            "description": "Whether the config is committed or not.",
            "key": "status",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "Name for the tool referenced by the model.",
            "key": "name",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "Description of the tool referenced by the model",
            "key": "description",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Source of the tool. If defined at an organization level will be 'organization' else 'inline'.",
            "key": "source",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "type_:ToolSource"
              }
            }
          },
          {
            "description": "Code source of the tool.",
            "key": "source_code",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Definition of parameters needed to run the tool. Provided in jsonschema format: https://json-schema.org/",
            "key": "setup_schema",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "map",
                "keyType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                },
                "valueType": {
                  "type": "unknown"
                }
              }
            }
          },
          {
            "description": "Definition of parameters needed to run the tool. Provided in jsonschema format: https://json-schema.org/",
            "key": "parameters",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "map",
                "keyType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                },
                "valueType": {
                  "type": "unknown"
                }
              }
            }
          },
          {
            "description": "The function signature of the tool when being called.",
            "key": "signature",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Whether the tool is one where Humanloop defines runtime or not.",
            "key": "is_preset",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "boolean"
                }
              }
            }
          },
          {
            "description": "If is_preset = true, this is the name of the preset tool on Humanloop. This is used as the key to lookup the Humanloop runtime of the tool",
            "key": "preset_name",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "type_:ToolResponse": {
      "name": "ToolResponse",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "The ID of the tool. Starts with either `config_` or `oc_`.",
            "key": "id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "Name for the tool referenced by the model.",
            "key": "name",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "Description of the tool referenced by the model",
            "key": "description",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Definition of parameters needed to run the tool. Provided in jsonschema format: https://json-schema.org/",
            "key": "parameters",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "map",
                "keyType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                },
                "valueType": {
                  "type": "unknown"
                }
              }
            }
          },
          {
            "description": "The origin of the tool",
            "key": "source",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "type_:ToolResultResponse": {
      "description": "A result from a tool used to populate the prompt template",
      "name": "ToolResultResponse",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "key": "name",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "key": "signature",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "key": "result",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          }
        ]
      }
    },
    "type_:ToolSource": {
      "description": "Source of tool. Used to differentiate between tools and tool versions when they are combined in a list.\n\nV4 uses organization and inline. Those are deprecated and will be removed in favour of tool and tool_version.",
      "name": "ToolSource",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "organization"
          },
          {
            "value": "inline"
          }
        ]
      }
    },
    "type_:ToolType": {
      "description": "The type of tool to call.",
      "name": "ToolType",
      "shape": {
        "type": "alias",
        "value": {
          "type": "literal",
          "value": {
            "type": "stringLiteral",
            "value": "function"
          }
        }
      }
    },
    "type_:UpdateLogRequest": {
      "name": "UpdateLogRequest",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Generated output from your model for the provided inputs.",
            "key": "output",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Error message if the log is an error.",
            "key": "error",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Duration of the logged event in seconds.",
            "key": "duration",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "double"
                }
              }
            }
          }
        ]
      }
    },
    "type_:Usage": {
      "name": "Usage",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Number of tokens used in the prompt.",
            "key": "prompt_tokens",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "integer"
              }
            }
          },
          {
            "description": "Number of tokens produced by the generation.",
            "key": "generation_tokens",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "integer"
              }
            }
          },
          {
            "description": "Total number of tokens used by the prompt and generation combined.",
            "key": "total_tokens",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "integer"
              }
            }
          }
        ]
      }
    },
    "type_:UserResponse": {
      "name": "UserResponse",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "String ID of user. Starts with `usr_`.",
            "key": "id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "The user's email address.",
            "key": "email_address",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "The user's full name.",
            "key": "full_name",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Whether the user has verified their email address.",
            "key": "verified",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "boolean"
              }
            }
          }
        ]
      }
    },
    "type_:ValidationErrorLocItem": {
      "name": "ValidationErrorLocItem",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "type": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "type": {
              "type": "primitive",
              "value": {
                "type": "integer"
              }
            }
          }
        ]
      }
    },
    "type_:ValidationError": {
      "name": "ValidationError",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "loc",
            "valueType": {
              "type": "list",
              "itemType": {
                "type": "id",
                "value": "type_:ValidationErrorLocItem"
              }
            }
          },
          {
            "key": "msg",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "key": "type",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          }
        ]
      }
    },
    "type_:VersionStatus": {
      "description": "An enumeration.",
      "name": "VersionStatus",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "uncommitted"
          },
          {
            "value": "committed"
          },
          {
            "value": "deleted"
          }
        ]
      }
    }
  },
  "subpackages": {
    "subpackage_chats": {
      "subpackageId": "subpackage_chats",
      "name": "chats",
      "endpoints": [
        {
          "environments": [
            {
              "id": "Default",
              "baseUrl": "https://api.humanloop.com/v4"
            }
          ],
          "defaultEnvironment": "Default",
          "urlSlug": "create-stream",
          "migratedFromUrlSlugs": ["chat"],
          "method": "POST",
          "id": "createStream",
          "originalEndpointId": "endpoint_chats.createStream",
          "name": "Chat",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/chat"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "request": {
            "contentType": "application/json",
            "type": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Unique project name. If no project exists with this name, a new project will be created.",
                  "key": "project",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "Unique ID of a project to associate to the log. Either this or `project` must be provided.",
                  "key": "project_id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "ID of the session to associate the datapoint.",
                  "key": "session_id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "A unique string identifying the session to associate the datapoint to. Allows you to log multiple datapoints to a session (using an ID kept by your internal systems) by passing the same `session_reference_id` in subsequent log requests. Specify at most one of this or `session_id`.",
                  "key": "session_reference_id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "ID associated to the parent datapoint in a session.",
                  "key": "parent_id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "A unique string identifying the previously-logged parent datapoint in a session. Allows you to log nested datapoints with your internal system IDs by passing the same reference ID as `parent_id` in a prior log request. Specify at most one of this or `parent_id`. Note that this cannot refer to a datapoint being logged in the same request.",
                  "key": "parent_reference_id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "The inputs passed to the prompt template.",
                  "key": "inputs",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "map",
                      "keyType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      },
                      "valueType": {
                        "type": "unknown"
                      }
                    }
                  }
                },
                {
                  "description": "Identifies where the model was called from.",
                  "key": "source",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "Any additional metadata to record.",
                  "key": "metadata",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "map",
                      "keyType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      },
                      "valueType": {
                        "type": "unknown"
                      }
                    }
                  }
                },
                {
                  "description": "Whether the request/response payloads will be stored on Humanloop.",
                  "key": "save",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean"
                      }
                    }
                  }
                },
                {
                  "description": "ID of the source datapoint if this is a log derived from a datapoint in a dataset.",
                  "key": "source_datapoint_id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "API keys required by each provider to make API calls. The API keys provided here are not stored by Humanloop. If not specified here, Humanloop will fall back to the key saved to your organization.",
                  "key": "provider_api_keys",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:ProviderApiKeys"
                    }
                  }
                },
                {
                  "description": "The number of generations.",
                  "key": "num_samples",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "integer",
                        "default": 1
                      }
                    }
                  }
                },
                {
                  "description": "If true, tokens will be sent as data-only server-sent events. If num_samples > 1, samples are streamed back independently.",
                  "key": "stream",
                  "valueType": {
                    "type": "literal",
                    "value": {
                      "type": "booleanLiteral",
                      "value": true
                    }
                  }
                },
                {
                  "description": "End-user ID passed through to provider call.",
                  "key": "user",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "Deprecated field: the seed is instead set as part of the request.config object.",
                  "key": "seed",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  },
                  "availability": "Deprecated"
                },
                {
                  "description": "Whether to return the inputs in the response. If false, the response will contain an empty dictionary under inputs. This is useful for reducing the size of the response. Defaults to true.",
                  "key": "return_inputs",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean"
                      }
                    }
                  }
                },
                {
                  "description": "The messages passed to the to provider chat endpoint.",
                  "key": "messages",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "id",
                      "value": "type_:ChatMessageWithToolCall"
                    }
                  }
                },
                {
                  "description": "Controls how the model uses tools. The following options are supported: 'none' forces the model to not call a tool; the default when no tools are provided as part of the model config. 'auto' the model can decide to call one of the provided tools; the default when tools are provided as part of the model config. Providing {'type': 'function', 'function': {name': <TOOL_NAME>}} forces the model to use the named function.",
                  "key": "tool_choice",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_chats:ChatsCreateStreamRequestToolChoice"
                    }
                  }
                },
                {
                  "description": "NB: Deprecated with new tool_choice. Controls how the model uses tools. The following options are supported: 'none' forces the model to not call a tool; the default when no tools are provided as part of the model config. 'auto' the model can decide to call one of the provided tools; the default when tools are provided as part of the model config. Providing {'name': <TOOL_NAME>} forces the model to use the provided tool of the same name.",
                  "key": "tool_call",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_chats:ChatsCreateStreamRequestToolCall"
                    }
                  },
                  "availability": "Deprecated"
                },
                {
                  "description": "The format of the response. Only type json_object is currently supported for chat.",
                  "key": "response_format",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:ResponseFormat"
                    }
                  }
                },
                {
                  "description": "The model configuration used to create a chat response.",
                  "key": "model_config",
                  "valueType": {
                    "type": "id",
                    "value": "type_:ModelConfigChatRequest"
                  }
                }
              ]
            }
          },
          "response": {
            "type": {
              "type": "stream",
              "shape": {
                "type": "reference",
                "value": {
                  "type": "id",
                  "value": "type_:ChatResponse"
                }
              }
            }
          },
          "errors": [],
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "type_:HTTPValidationError"
                }
              },
              "statusCode": 422,
              "description": "Validation Error",
              "examples": []
            }
          ],
          "examples": [
            {
              "path": "/chat",
              "pathParameters": {},
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200,
              "codeExamples": {
                "nodeAxios": ""
              },
              "requestBodyV3": {
                "type": "json",
                "value": {
                  "stream": true,
                  "messages": [
                    {
                      "role": "user"
                    }
                  ],
                  "model_config": {
                    "model": "string"
                  }
                }
              },
              "responseBodyV3": {
                "type": "stream",
                "value": [
                  {
                    "project_id": "string",
                    "num_samples": 0,
                    "logprobs": 0,
                    "suffix": "string",
                    "user": "string",
                    "data": [
                      {
                        "id": "string",
                        "index": 0,
                        "output": "string",
                        "raw_output": "string",
                        "inputs": {
                          "string": {}
                        },
                        "finish_reason": "string",
                        "model_config_id": "string",
                        "tool_results": [
                          {
                            "id": "string",
                            "name": "string",
                            "signature": "string",
                            "result": "string"
                          }
                        ],
                        "messages": [
                          {
                            "content": "string",
                            "name": "string",
                            "tool_call_id": "string",
                            "role": "user",
                            "tool_calls": [
                              {
                                "id": "string",
                                "type": "function",
                                "function": {
                                  "name": "string",
                                  "arguments": "string"
                                }
                              }
                            ],
                            "tool_call": {
                              "name": "string",
                              "arguments": "string"
                            }
                          }
                        ],
                        "tool_call": {
                          "name": "string",
                          "arguments": "string"
                        },
                        "tool_calls": [
                          {
                            "id": "string",
                            "type": "function",
                            "function": {
                              "name": "string",
                              "arguments": "string"
                            }
                          }
                        ],
                        "output_message": {
                          "content": "string",
                          "name": "string",
                          "tool_call_id": "string",
                          "role": "user",
                          "tool_calls": [
                            {
                              "id": "string",
                              "type": "function",
                              "function": {
                                "name": "string",
                                "arguments": "string"
                              }
                            }
                          ],
                          "tool_call": {
                            "name": "string",
                            "arguments": "string"
                          }
                        }
                      }
                    ],
                    "usage": {
                      "prompt_tokens": 0,
                      "generation_tokens": 0,
                      "total_tokens": 0
                    },
                    "metadata": {
                      "string": {}
                    },
                    "provider_responses": [{}],
                    "provider_request": {
                      "string": {}
                    },
                    "session_id": "string",
                    "tool_choice": "none"
                  },
                  {
                    "project_id": "string",
                    "num_samples": 0,
                    "logprobs": 0,
                    "suffix": "string",
                    "user": "string",
                    "data": [
                      {
                        "id": "string",
                        "index": 0,
                        "output": "string",
                        "raw_output": "string",
                        "inputs": {
                          "string": {}
                        },
                        "finish_reason": "string",
                        "model_config_id": "string",
                        "tool_results": [
                          {
                            "id": "string",
                            "name": "string",
                            "signature": "string",
                            "result": "string"
                          }
                        ],
                        "messages": [
                          {
                            "content": "string",
                            "name": "string",
                            "tool_call_id": "string",
                            "role": "user",
                            "tool_calls": [
                              {
                                "id": "string",
                                "type": "function",
                                "function": {
                                  "name": "string",
                                  "arguments": "string"
                                }
                              }
                            ],
                            "tool_call": {
                              "name": "string",
                              "arguments": "string"
                            }
                          }
                        ],
                        "tool_call": {
                          "name": "string",
                          "arguments": "string"
                        },
                        "tool_calls": [
                          {
                            "id": "string",
                            "type": "function",
                            "function": {
                              "name": "string",
                              "arguments": "string"
                            }
                          }
                        ],
                        "output_message": {
                          "content": "string",
                          "name": "string",
                          "tool_call_id": "string",
                          "role": "user",
                          "tool_calls": [
                            {
                              "id": "string",
                              "type": "function",
                              "function": {
                                "name": "string",
                                "arguments": "string"
                              }
                            }
                          ],
                          "tool_call": {
                            "name": "string",
                            "arguments": "string"
                          }
                        }
                      }
                    ],
                    "usage": {
                      "prompt_tokens": 0,
                      "generation_tokens": 0,
                      "total_tokens": 0
                    },
                    "metadata": {
                      "string": {}
                    },
                    "provider_responses": [{}],
                    "provider_request": {
                      "string": {}
                    },
                    "session_id": "string",
                    "tool_choice": "none"
                  }
                ]
              },
              "codeSamples": []
            },
            {
              "path": "/chat",
              "pathParameters": {},
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 422,
              "codeExamples": {
                "nodeAxios": ""
              },
              "requestBodyV3": {
                "type": "json",
                "value": {
                  "stream": true,
                  "messages": [
                    {
                      "role": "user"
                    }
                  ],
                  "model_config": {
                    "model": "string"
                  }
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "detail": [
                    {
                      "loc": ["string"],
                      "msg": "string",
                      "type": "string"
                    }
                  ]
                }
              },
              "codeSamples": []
            }
          ],
          "description": "Get a chat response by providing details of the model configuration in the request.",
          "authed": true
        },
        {
          "environments": [
            {
              "id": "Default",
              "baseUrl": "https://api.humanloop.com/v4"
            }
          ],
          "defaultEnvironment": "Default",
          "urlSlug": "create",
          "migratedFromUrlSlugs": ["chat"],
          "method": "POST",
          "id": "create",
          "originalEndpointId": "endpoint_chats.create",
          "name": "Chat",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/chat"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "request": {
            "contentType": "application/json",
            "type": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Unique project name. If no project exists with this name, a new project will be created.",
                  "key": "project",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "Unique ID of a project to associate to the log. Either this or `project` must be provided.",
                  "key": "project_id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "ID of the session to associate the datapoint.",
                  "key": "session_id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "A unique string identifying the session to associate the datapoint to. Allows you to log multiple datapoints to a session (using an ID kept by your internal systems) by passing the same `session_reference_id` in subsequent log requests. Specify at most one of this or `session_id`.",
                  "key": "session_reference_id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "ID associated to the parent datapoint in a session.",
                  "key": "parent_id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "A unique string identifying the previously-logged parent datapoint in a session. Allows you to log nested datapoints with your internal system IDs by passing the same reference ID as `parent_id` in a prior log request. Specify at most one of this or `parent_id`. Note that this cannot refer to a datapoint being logged in the same request.",
                  "key": "parent_reference_id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "The inputs passed to the prompt template.",
                  "key": "inputs",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "map",
                      "keyType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      },
                      "valueType": {
                        "type": "unknown"
                      }
                    }
                  }
                },
                {
                  "description": "Identifies where the model was called from.",
                  "key": "source",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "Any additional metadata to record.",
                  "key": "metadata",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "map",
                      "keyType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      },
                      "valueType": {
                        "type": "unknown"
                      }
                    }
                  }
                },
                {
                  "description": "Whether the request/response payloads will be stored on Humanloop.",
                  "key": "save",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean"
                      }
                    }
                  }
                },
                {
                  "description": "ID of the source datapoint if this is a log derived from a datapoint in a dataset.",
                  "key": "source_datapoint_id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "API keys required by each provider to make API calls. The API keys provided here are not stored by Humanloop. If not specified here, Humanloop will fall back to the key saved to your organization.",
                  "key": "provider_api_keys",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:ProviderApiKeys"
                    }
                  }
                },
                {
                  "description": "The number of generations.",
                  "key": "num_samples",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "integer",
                        "default": 1
                      }
                    }
                  }
                },
                {
                  "description": "If true, tokens will be sent as data-only server-sent events. If num_samples > 1, samples are streamed back independently.",
                  "key": "stream",
                  "valueType": {
                    "type": "literal",
                    "value": {
                      "type": "booleanLiteral",
                      "value": false
                    }
                  }
                },
                {
                  "description": "End-user ID passed through to provider call.",
                  "key": "user",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "Deprecated field: the seed is instead set as part of the request.config object.",
                  "key": "seed",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  },
                  "availability": "Deprecated"
                },
                {
                  "description": "Whether to return the inputs in the response. If false, the response will contain an empty dictionary under inputs. This is useful for reducing the size of the response. Defaults to true.",
                  "key": "return_inputs",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean"
                      }
                    }
                  }
                },
                {
                  "description": "The messages passed to the to provider chat endpoint.",
                  "key": "messages",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "id",
                      "value": "type_:ChatMessageWithToolCall"
                    }
                  }
                },
                {
                  "description": "Controls how the model uses tools. The following options are supported: 'none' forces the model to not call a tool; the default when no tools are provided as part of the model config. 'auto' the model can decide to call one of the provided tools; the default when tools are provided as part of the model config. Providing {'type': 'function', 'function': {name': <TOOL_NAME>}} forces the model to use the named function.",
                  "key": "tool_choice",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_chats:ChatsCreateRequestToolChoice"
                    }
                  }
                },
                {
                  "description": "NB: Deprecated with new tool_choice. Controls how the model uses tools. The following options are supported: 'none' forces the model to not call a tool; the default when no tools are provided as part of the model config. 'auto' the model can decide to call one of the provided tools; the default when tools are provided as part of the model config. Providing {'name': <TOOL_NAME>} forces the model to use the provided tool of the same name.",
                  "key": "tool_call",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_chats:ChatsCreateRequestToolCall"
                    }
                  },
                  "availability": "Deprecated"
                },
                {
                  "description": "The format of the response. Only type json_object is currently supported for chat.",
                  "key": "response_format",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:ResponseFormat"
                    }
                  }
                },
                {
                  "description": "The model configuration used to create a chat response.",
                  "key": "model_config",
                  "valueType": {
                    "type": "id",
                    "value": "type_:ModelConfigChatRequest"
                  }
                }
              ]
            }
          },
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "type_:ChatResponse"
              }
            }
          },
          "errors": [],
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "type_:HTTPValidationError"
                }
              },
              "statusCode": 422,
              "description": "Validation Error",
              "examples": []
            }
          ],
          "examples": [
            {
              "name": "Simple",
              "path": "/chat",
              "pathParameters": {},
              "queryParameters": {},
              "headers": {},
              "requestBody": {
                "project": "persona",
                "model_config": {
                  "model": "gpt-4o",
                  "max_tokens": 200,
                  "chat_template": [
                    {
                      "role": "system",
                      "content": "You are {{person}}. Answer any questions as this person. Do not break character."
                    }
                  ]
                },
                "messages": [
                  {
                    "role": "user",
                    "content": "What really happened at Roswell?"
                  }
                ],
                "inputs": {
                  "person": "Trump"
                },
                "stream": false
              },
              "responseStatusCode": 200,
              "responseBody": {
                "project_id": "pr_3usCu3dAkgrXTlufrvPs7",
                "num_samples": 1,
                "data": [
                  {
                    "id": "data_fIfEb1SoKZooqeFbi9IFs",
                    "index": 0,
                    "output": "Well, let me tell you, there are a lot of stories about Roswell, and I hear them all the time. People love to talk about Roswell. So many theories, so many ideas. Some folks believe it was a weather balloon, others say it was something out of this world. Believe me, there's plenty that we don't know. Very interesting to look into, but the truth, well, it might still be out there. Could be a great story, who knows? But what I do know, folks, is that we have to keep our eyes open and always be on the lookout for the truth!",
                    "raw_output": "Well, let me tell you, there are a lot of stories about Roswell, and I hear them all the time. People love to talk about Roswell. So many theories, so many ideas. Some folks believe it was a weather balloon, others say it was something out of this world. Believe me, there's plenty that we don't know. Very interesting to look into, but the truth, well, it might still be out there. Could be a great story, who knows? But what I do know, folks, is that we have to keep our eyes open and always be on the lookout for the truth!",
                    "inputs": {
                      "person": "Trump"
                    },
                    "finish_reason": "stop",
                    "model_config_id": "prv_Wu6zx1lAWJRqOyL8nWuZk",
                    "tool_results": [],
                    "messages": [
                      {
                        "content": "You are Trump. Answer any questions as this person. Do not break character.",
                        "role": "system"
                      },
                      {
                        "content": "What really happened at Roswell?",
                        "role": "user"
                      }
                    ],
                    "output_message": {
                      "content": "Well, let me tell you, there are a lot of stories about Roswell, and I hear them all the time. People love to talk about Roswell. So many theories, so many ideas. Some folks believe it was a weather balloon, others say it was something out of this world. Believe me, there's plenty that we don't know. Very interesting to look into, but the truth, well, it might still be out there. Could be a great story, who knows? But what I do know, folks, is that we have to keep our eyes open and always be on the lookout for the truth!",
                      "role": "assistant"
                    }
                  }
                ],
                "usage": {
                  "prompt_tokens": 34,
                  "generation_tokens": 125,
                  "total_tokens": 159
                },
                "provider_responses": [
                  {
                    "id": "chatcmpl-9TbTAC1WFnAlRNY3yzVGGPQbLOXFY",
                    "choices": [
                      {
                        "finish_reason": "stop",
                        "index": 0,
                        "message": {
                          "content": "Well, let me tell you, there are a lot of stories about Roswell, and I hear them all the time. People love to talk about Roswell. So many theories, so many ideas. Some folks believe it was a weather balloon, others say it was something out of this world. Believe me, there's plenty that we don't know. Very interesting to look into, but the truth, well, it might still be out there. Could be a great story, who knows? But what I do know, folks, is that we have to keep our eyes open and always be on the lookout for the truth!",
                          "role": "assistant"
                        }
                      }
                    ],
                    "created": 1716842572,
                    "model": "gpt-4o-2024-05-13",
                    "object": "chat.completion",
                    "system_fingerprint": "fp_43dfabdef1",
                    "usage": {
                      "completion_tokens": 125,
                      "prompt_tokens": 34,
                      "total_tokens": 159
                    }
                  }
                ],
                "provider_request": {
                  "messages": [
                    {
                      "content": "You are Trump. Answer any questions as this person. Do not break character.",
                      "role": "system"
                    },
                    {
                      "content": "What really happened at Roswell?",
                      "role": "user"
                    }
                  ],
                  "stream": false,
                  "n": 1,
                  "model": "gpt-4o",
                  "temperature": 1,
                  "top_p": 1,
                  "presence_penalty": 0,
                  "frequency_penalty": 0,
                  "max_tokens": 200
                }
              },
              "codeExamples": {
                "nodeAxios": ""
              },
              "requestBodyV3": {
                "type": "json",
                "value": {
                  "project": "persona",
                  "model_config": {
                    "model": "gpt-4o",
                    "max_tokens": 200,
                    "chat_template": [
                      {
                        "role": "system",
                        "content": "You are {{person}}. Answer any questions as this person. Do not break character."
                      }
                    ]
                  },
                  "messages": [
                    {
                      "role": "user",
                      "content": "What really happened at Roswell?"
                    }
                  ],
                  "inputs": {
                    "person": "Trump"
                  },
                  "stream": false
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "project_id": "pr_3usCu3dAkgrXTlufrvPs7",
                  "num_samples": 1,
                  "data": [
                    {
                      "id": "data_fIfEb1SoKZooqeFbi9IFs",
                      "index": 0,
                      "output": "Well, let me tell you, there are a lot of stories about Roswell, and I hear them all the time. People love to talk about Roswell. So many theories, so many ideas. Some folks believe it was a weather balloon, others say it was something out of this world. Believe me, there's plenty that we don't know. Very interesting to look into, but the truth, well, it might still be out there. Could be a great story, who knows? But what I do know, folks, is that we have to keep our eyes open and always be on the lookout for the truth!",
                      "raw_output": "Well, let me tell you, there are a lot of stories about Roswell, and I hear them all the time. People love to talk about Roswell. So many theories, so many ideas. Some folks believe it was a weather balloon, others say it was something out of this world. Believe me, there's plenty that we don't know. Very interesting to look into, but the truth, well, it might still be out there. Could be a great story, who knows? But what I do know, folks, is that we have to keep our eyes open and always be on the lookout for the truth!",
                      "inputs": {
                        "person": "Trump"
                      },
                      "finish_reason": "stop",
                      "model_config_id": "prv_Wu6zx1lAWJRqOyL8nWuZk",
                      "tool_results": [],
                      "messages": [
                        {
                          "content": "You are Trump. Answer any questions as this person. Do not break character.",
                          "role": "system"
                        },
                        {
                          "content": "What really happened at Roswell?",
                          "role": "user"
                        }
                      ],
                      "output_message": {
                        "content": "Well, let me tell you, there are a lot of stories about Roswell, and I hear them all the time. People love to talk about Roswell. So many theories, so many ideas. Some folks believe it was a weather balloon, others say it was something out of this world. Believe me, there's plenty that we don't know. Very interesting to look into, but the truth, well, it might still be out there. Could be a great story, who knows? But what I do know, folks, is that we have to keep our eyes open and always be on the lookout for the truth!",
                        "role": "assistant"
                      }
                    }
                  ],
                  "usage": {
                    "prompt_tokens": 34,
                    "generation_tokens": 125,
                    "total_tokens": 159
                  },
                  "provider_responses": [
                    {
                      "id": "chatcmpl-9TbTAC1WFnAlRNY3yzVGGPQbLOXFY",
                      "choices": [
                        {
                          "finish_reason": "stop",
                          "index": 0,
                          "message": {
                            "content": "Well, let me tell you, there are a lot of stories about Roswell, and I hear them all the time. People love to talk about Roswell. So many theories, so many ideas. Some folks believe it was a weather balloon, others say it was something out of this world. Believe me, there's plenty that we don't know. Very interesting to look into, but the truth, well, it might still be out there. Could be a great story, who knows? But what I do know, folks, is that we have to keep our eyes open and always be on the lookout for the truth!",
                            "role": "assistant"
                          }
                        }
                      ],
                      "created": 1716842572,
                      "model": "gpt-4o-2024-05-13",
                      "object": "chat.completion",
                      "system_fingerprint": "fp_43dfabdef1",
                      "usage": {
                        "completion_tokens": 125,
                        "prompt_tokens": 34,
                        "total_tokens": 159
                      }
                    }
                  ],
                  "provider_request": {
                    "messages": [
                      {
                        "content": "You are Trump. Answer any questions as this person. Do not break character.",
                        "role": "system"
                      },
                      {
                        "content": "What really happened at Roswell?",
                        "role": "user"
                      }
                    ],
                    "stream": false,
                    "n": 1,
                    "model": "gpt-4o",
                    "temperature": 1,
                    "top_p": 1,
                    "presence_penalty": 0,
                    "frequency_penalty": 0,
                    "max_tokens": 200
                  }
                }
              },
              "codeSamples": []
            },
            {
              "path": "/chat",
              "pathParameters": {},
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 422,
              "codeExamples": {
                "nodeAxios": ""
              },
              "requestBodyV3": {
                "type": "json",
                "value": {
                  "stream": false,
                  "messages": [
                    {
                      "role": "user"
                    }
                  ],
                  "model_config": {
                    "model": "string"
                  }
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "detail": [
                    {
                      "loc": ["string"],
                      "msg": "string",
                      "type": "string"
                    }
                  ]
                }
              },
              "codeSamples": []
            }
          ],
          "description": "Get a chat response by providing details of the model configuration in the request.",
          "authed": true
        },
        {
          "environments": [
            {
              "id": "Default",
              "baseUrl": "https://api.humanloop.com/v4"
            }
          ],
          "defaultEnvironment": "Default",
          "urlSlug": "create-deployed-stream",
          "migratedFromUrlSlugs": ["chat-deployed"],
          "method": "POST",
          "id": "create_deployed_stream",
          "originalEndpointId": "endpoint_chats.create_deployed_stream",
          "name": "Chat Deployed",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/chat-deployed"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "request": {
            "contentType": "application/json",
            "type": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Unique project name. If no project exists with this name, a new project will be created.",
                  "key": "project",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "Unique ID of a project to associate to the log. Either this or `project` must be provided.",
                  "key": "project_id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "ID of the session to associate the datapoint.",
                  "key": "session_id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "A unique string identifying the session to associate the datapoint to. Allows you to log multiple datapoints to a session (using an ID kept by your internal systems) by passing the same `session_reference_id` in subsequent log requests. Specify at most one of this or `session_id`.",
                  "key": "session_reference_id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "ID associated to the parent datapoint in a session.",
                  "key": "parent_id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "A unique string identifying the previously-logged parent datapoint in a session. Allows you to log nested datapoints with your internal system IDs by passing the same reference ID as `parent_id` in a prior log request. Specify at most one of this or `parent_id`. Note that this cannot refer to a datapoint being logged in the same request.",
                  "key": "parent_reference_id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "The inputs passed to the prompt template.",
                  "key": "inputs",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "map",
                      "keyType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      },
                      "valueType": {
                        "type": "unknown"
                      }
                    }
                  }
                },
                {
                  "description": "Identifies where the model was called from.",
                  "key": "source",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "Any additional metadata to record.",
                  "key": "metadata",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "map",
                      "keyType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      },
                      "valueType": {
                        "type": "unknown"
                      }
                    }
                  }
                },
                {
                  "description": "Whether the request/response payloads will be stored on Humanloop.",
                  "key": "save",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean"
                      }
                    }
                  }
                },
                {
                  "description": "ID of the source datapoint if this is a log derived from a datapoint in a dataset.",
                  "key": "source_datapoint_id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "API keys required by each provider to make API calls. The API keys provided here are not stored by Humanloop. If not specified here, Humanloop will fall back to the key saved to your organization.",
                  "key": "provider_api_keys",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:ProviderApiKeys"
                    }
                  }
                },
                {
                  "description": "The number of generations.",
                  "key": "num_samples",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "integer",
                        "default": 1
                      }
                    }
                  }
                },
                {
                  "description": "If true, tokens will be sent as data-only server-sent events. If num_samples > 1, samples are streamed back independently.",
                  "key": "stream",
                  "valueType": {
                    "type": "literal",
                    "value": {
                      "type": "booleanLiteral",
                      "value": true
                    }
                  }
                },
                {
                  "description": "End-user ID passed through to provider call.",
                  "key": "user",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "Deprecated field: the seed is instead set as part of the request.config object.",
                  "key": "seed",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  },
                  "availability": "Deprecated"
                },
                {
                  "description": "Whether to return the inputs in the response. If false, the response will contain an empty dictionary under inputs. This is useful for reducing the size of the response. Defaults to true.",
                  "key": "return_inputs",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean"
                      }
                    }
                  }
                },
                {
                  "description": "The messages passed to the to provider chat endpoint.",
                  "key": "messages",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "id",
                      "value": "type_:ChatMessageWithToolCall"
                    }
                  }
                },
                {
                  "description": "Controls how the model uses tools. The following options are supported: 'none' forces the model to not call a tool; the default when no tools are provided as part of the model config. 'auto' the model can decide to call one of the provided tools; the default when tools are provided as part of the model config. Providing {'type': 'function', 'function': {name': <TOOL_NAME>}} forces the model to use the named function.",
                  "key": "tool_choice",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_chats:ChatsCreateDeployedStreamRequestToolChoice"
                    }
                  }
                },
                {
                  "description": "NB: Deprecated with new tool_choice. Controls how the model uses tools. The following options are supported: 'none' forces the model to not call a tool; the default when no tools are provided as part of the model config. 'auto' the model can decide to call one of the provided tools; the default when tools are provided as part of the model config. Providing {'name': <TOOL_NAME>} forces the model to use the provided tool of the same name.",
                  "key": "tool_call",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_chats:ChatsCreateDeployedStreamRequestToolCall"
                    }
                  },
                  "availability": "Deprecated"
                },
                {
                  "description": "The format of the response. Only type json_object is currently supported for chat.",
                  "key": "response_format",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:ResponseFormat"
                    }
                  }
                },
                {
                  "description": "The environment name used to create a chat response. If not specified, the default environment will be used.",
                  "key": "environment",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              ]
            }
          },
          "response": {
            "type": {
              "type": "stream",
              "shape": {
                "type": "reference",
                "value": {
                  "type": "id",
                  "value": "type_:ChatResponse"
                }
              }
            }
          },
          "errors": [],
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "type_:HTTPValidationError"
                }
              },
              "statusCode": 422,
              "description": "Validation Error",
              "examples": []
            }
          ],
          "examples": [
            {
              "path": "/chat-deployed",
              "pathParameters": {},
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200,
              "codeExamples": {
                "nodeAxios": ""
              },
              "requestBodyV3": {
                "type": "json",
                "value": {
                  "stream": true,
                  "messages": [
                    {
                      "role": "user"
                    }
                  ]
                }
              },
              "responseBodyV3": {
                "type": "stream",
                "value": [
                  {
                    "project_id": "string",
                    "num_samples": 0,
                    "logprobs": 0,
                    "suffix": "string",
                    "user": "string",
                    "data": [
                      {
                        "id": "string",
                        "index": 0,
                        "output": "string",
                        "raw_output": "string",
                        "inputs": {
                          "string": {}
                        },
                        "finish_reason": "string",
                        "model_config_id": "string",
                        "tool_results": [
                          {
                            "id": "string",
                            "name": "string",
                            "signature": "string",
                            "result": "string"
                          }
                        ],
                        "messages": [
                          {
                            "content": "string",
                            "name": "string",
                            "tool_call_id": "string",
                            "role": "user",
                            "tool_calls": [
                              {
                                "id": "string",
                                "type": "function",
                                "function": {
                                  "name": "string",
                                  "arguments": "string"
                                }
                              }
                            ],
                            "tool_call": {
                              "name": "string",
                              "arguments": "string"
                            }
                          }
                        ],
                        "tool_call": {
                          "name": "string",
                          "arguments": "string"
                        },
                        "tool_calls": [
                          {
                            "id": "string",
                            "type": "function",
                            "function": {
                              "name": "string",
                              "arguments": "string"
                            }
                          }
                        ],
                        "output_message": {
                          "content": "string",
                          "name": "string",
                          "tool_call_id": "string",
                          "role": "user",
                          "tool_calls": [
                            {
                              "id": "string",
                              "type": "function",
                              "function": {
                                "name": "string",
                                "arguments": "string"
                              }
                            }
                          ],
                          "tool_call": {
                            "name": "string",
                            "arguments": "string"
                          }
                        }
                      }
                    ],
                    "usage": {
                      "prompt_tokens": 0,
                      "generation_tokens": 0,
                      "total_tokens": 0
                    },
                    "metadata": {
                      "string": {}
                    },
                    "provider_responses": [{}],
                    "provider_request": {
                      "string": {}
                    },
                    "session_id": "string",
                    "tool_choice": "none"
                  },
                  {
                    "project_id": "string",
                    "num_samples": 0,
                    "logprobs": 0,
                    "suffix": "string",
                    "user": "string",
                    "data": [
                      {
                        "id": "string",
                        "index": 0,
                        "output": "string",
                        "raw_output": "string",
                        "inputs": {
                          "string": {}
                        },
                        "finish_reason": "string",
                        "model_config_id": "string",
                        "tool_results": [
                          {
                            "id": "string",
                            "name": "string",
                            "signature": "string",
                            "result": "string"
                          }
                        ],
                        "messages": [
                          {
                            "content": "string",
                            "name": "string",
                            "tool_call_id": "string",
                            "role": "user",
                            "tool_calls": [
                              {
                                "id": "string",
                                "type": "function",
                                "function": {
                                  "name": "string",
                                  "arguments": "string"
                                }
                              }
                            ],
                            "tool_call": {
                              "name": "string",
                              "arguments": "string"
                            }
                          }
                        ],
                        "tool_call": {
                          "name": "string",
                          "arguments": "string"
                        },
                        "tool_calls": [
                          {
                            "id": "string",
                            "type": "function",
                            "function": {
                              "name": "string",
                              "arguments": "string"
                            }
                          }
                        ],
                        "output_message": {
                          "content": "string",
                          "name": "string",
                          "tool_call_id": "string",
                          "role": "user",
                          "tool_calls": [
                            {
                              "id": "string",
                              "type": "function",
                              "function": {
                                "name": "string",
                                "arguments": "string"
                              }
                            }
                          ],
                          "tool_call": {
                            "name": "string",
                            "arguments": "string"
                          }
                        }
                      }
                    ],
                    "usage": {
                      "prompt_tokens": 0,
                      "generation_tokens": 0,
                      "total_tokens": 0
                    },
                    "metadata": {
                      "string": {}
                    },
                    "provider_responses": [{}],
                    "provider_request": {
                      "string": {}
                    },
                    "session_id": "string",
                    "tool_choice": "none"
                  }
                ]
              },
              "codeSamples": []
            },
            {
              "path": "/chat-deployed",
              "pathParameters": {},
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 422,
              "codeExamples": {
                "nodeAxios": ""
              },
              "requestBodyV3": {
                "type": "json",
                "value": {
                  "stream": true,
                  "messages": [
                    {
                      "role": "user"
                    }
                  ]
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "detail": [
                    {
                      "loc": ["string"],
                      "msg": "string",
                      "type": "string"
                    }
                  ]
                }
              },
              "codeSamples": []
            }
          ],
          "description": "Get a chat response using the project's active deployment.\n\nThe active deployment can be a specific model configuration.",
          "authed": true
        },
        {
          "environments": [
            {
              "id": "Default",
              "baseUrl": "https://api.humanloop.com/v4"
            }
          ],
          "defaultEnvironment": "Default",
          "urlSlug": "create-deployed",
          "migratedFromUrlSlugs": ["chat-deployed"],
          "method": "POST",
          "id": "create_deployed",
          "originalEndpointId": "endpoint_chats.create_deployed",
          "name": "Chat Deployed",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/chat-deployed"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "request": {
            "contentType": "application/json",
            "type": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Unique project name. If no project exists with this name, a new project will be created.",
                  "key": "project",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "Unique ID of a project to associate to the log. Either this or `project` must be provided.",
                  "key": "project_id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "ID of the session to associate the datapoint.",
                  "key": "session_id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "A unique string identifying the session to associate the datapoint to. Allows you to log multiple datapoints to a session (using an ID kept by your internal systems) by passing the same `session_reference_id` in subsequent log requests. Specify at most one of this or `session_id`.",
                  "key": "session_reference_id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "ID associated to the parent datapoint in a session.",
                  "key": "parent_id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "A unique string identifying the previously-logged parent datapoint in a session. Allows you to log nested datapoints with your internal system IDs by passing the same reference ID as `parent_id` in a prior log request. Specify at most one of this or `parent_id`. Note that this cannot refer to a datapoint being logged in the same request.",
                  "key": "parent_reference_id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "The inputs passed to the prompt template.",
                  "key": "inputs",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "map",
                      "keyType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      },
                      "valueType": {
                        "type": "unknown"
                      }
                    }
                  }
                },
                {
                  "description": "Identifies where the model was called from.",
                  "key": "source",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "Any additional metadata to record.",
                  "key": "metadata",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "map",
                      "keyType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      },
                      "valueType": {
                        "type": "unknown"
                      }
                    }
                  }
                },
                {
                  "description": "Whether the request/response payloads will be stored on Humanloop.",
                  "key": "save",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean"
                      }
                    }
                  }
                },
                {
                  "description": "ID of the source datapoint if this is a log derived from a datapoint in a dataset.",
                  "key": "source_datapoint_id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "API keys required by each provider to make API calls. The API keys provided here are not stored by Humanloop. If not specified here, Humanloop will fall back to the key saved to your organization.",
                  "key": "provider_api_keys",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:ProviderApiKeys"
                    }
                  }
                },
                {
                  "description": "The number of generations.",
                  "key": "num_samples",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "integer",
                        "default": 1
                      }
                    }
                  }
                },
                {
                  "description": "If true, tokens will be sent as data-only server-sent events. If num_samples > 1, samples are streamed back independently.",
                  "key": "stream",
                  "valueType": {
                    "type": "literal",
                    "value": {
                      "type": "booleanLiteral",
                      "value": false
                    }
                  }
                },
                {
                  "description": "End-user ID passed through to provider call.",
                  "key": "user",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "Deprecated field: the seed is instead set as part of the request.config object.",
                  "key": "seed",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  },
                  "availability": "Deprecated"
                },
                {
                  "description": "Whether to return the inputs in the response. If false, the response will contain an empty dictionary under inputs. This is useful for reducing the size of the response. Defaults to true.",
                  "key": "return_inputs",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean"
                      }
                    }
                  }
                },
                {
                  "description": "The messages passed to the to provider chat endpoint.",
                  "key": "messages",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "id",
                      "value": "type_:ChatMessageWithToolCall"
                    }
                  }
                },
                {
                  "description": "Controls how the model uses tools. The following options are supported: 'none' forces the model to not call a tool; the default when no tools are provided as part of the model config. 'auto' the model can decide to call one of the provided tools; the default when tools are provided as part of the model config. Providing {'type': 'function', 'function': {name': <TOOL_NAME>}} forces the model to use the named function.",
                  "key": "tool_choice",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_chats:ChatsCreateDeployedRequestToolChoice"
                    }
                  }
                },
                {
                  "description": "NB: Deprecated with new tool_choice. Controls how the model uses tools. The following options are supported: 'none' forces the model to not call a tool; the default when no tools are provided as part of the model config. 'auto' the model can decide to call one of the provided tools; the default when tools are provided as part of the model config. Providing {'name': <TOOL_NAME>} forces the model to use the provided tool of the same name.",
                  "key": "tool_call",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_chats:ChatsCreateDeployedRequestToolCall"
                    }
                  },
                  "availability": "Deprecated"
                },
                {
                  "description": "The format of the response. Only type json_object is currently supported for chat.",
                  "key": "response_format",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:ResponseFormat"
                    }
                  }
                },
                {
                  "description": "The environment name used to create a chat response. If not specified, the default environment will be used.",
                  "key": "environment",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              ]
            }
          },
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "type_:ChatResponse"
              }
            }
          },
          "errors": [],
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "type_:HTTPValidationError"
                }
              },
              "statusCode": 422,
              "description": "Validation Error",
              "examples": []
            }
          ],
          "examples": [
            {
              "name": "ai-assistant-with-tools",
              "path": "/chat-deployed",
              "pathParameters": {},
              "queryParameters": {},
              "headers": {},
              "requestBody": {
                "project": "ai-assistant",
                "inputs": {
                  "persona": "helpful but will *always* tell a joke first before calling tools"
                },
                "messages": [
                  {
                    "role": "user",
                    "content": "What is the weather in SF?"
                  }
                ],
                "stream": false
              },
              "responseStatusCode": 200,
              "responseBody": {
                "project_id": "pr_TfhDgggIsPi3cgmhq2yeA",
                "num_samples": 1,
                "data": [
                  {
                    "id": "data_lwWadasRw0vT4XDarZuNQ",
                    "index": 0,
                    "output": "Why did the weather report go to school? To become a little brighter!\n\nLet me check the current weather in San Francisco for you.",
                    "raw_output": "Why did the weather report go to school? To become a little brighter!\n\nLet me check the current weather in San Francisco for you.",
                    "inputs": {
                      "persona": "helpful but will *always* tell a joke first before calling tools"
                    },
                    "finish_reason": "tool_call",
                    "model_config_id": "prv_rlwVnPhRsiMKfnTusferP",
                    "tool_results": [],
                    "messages": [
                      {
                        "content": "You are a helpful assistant with persona helpful but will *always* tell a joke first before calling tools. \nUse tools to respond to user's queries.\n",
                        "role": "system"
                      },
                      {
                        "content": "What is the weather in SF?",
                        "role": "user"
                      }
                    ],
                    "tool_call": {
                      "name": "get_current_weather",
                      "arguments": "{\"location\":\"San Francisco, CA\"}"
                    },
                    "tool_calls": [
                      {
                        "id": "call_1b6yHTGiB51P2I75T6yZrm63",
                        "type": "function",
                        "function": {
                          "name": "get_current_weather",
                          "arguments": "{\"location\":\"San Francisco, CA\"}"
                        }
                      }
                    ],
                    "output_message": {
                      "content": "Why did the weather report go to school? To become a little brighter!\n\nLet me check the current weather in San Francisco for you.",
                      "role": "assistant",
                      "tool_calls": [
                        {
                          "id": "call_1b6yHTGiB51P2I75T6yZrm63",
                          "type": "function",
                          "function": {
                            "name": "get_current_weather",
                            "arguments": "{\"location\":\"San Francisco, CA\"}"
                          }
                        }
                      ]
                    }
                  }
                ],
                "usage": {
                  "prompt_tokens": 137,
                  "generation_tokens": 46,
                  "total_tokens": 183
                },
                "provider_responses": [
                  {
                    "id": "chatcmpl-9TbcxkvnK9Q0VTCO89GGPsgWiI7LY",
                    "choices": [
                      {
                        "finish_reason": "tool_calls",
                        "index": 0,
                        "message": {
                          "content": "Why did the weather report go to school? To become a little brighter!\n\nLet me check the current weather in San Francisco for you.",
                          "role": "assistant",
                          "tool_calls": [
                            {
                              "id": "call_1b6yHTGiB51P2I75T6yZrm63",
                              "function": {
                                "arguments": "{\"location\":\"San Francisco, CA\"}",
                                "name": "get_current_weather"
                              },
                              "type": "function"
                            }
                          ]
                        }
                      }
                    ],
                    "created": 1716843179,
                    "model": "gpt-4o-2024-05-13",
                    "object": "chat.completion",
                    "system_fingerprint": "fp_43dfabdef1",
                    "usage": {
                      "completion_tokens": 46,
                      "prompt_tokens": 137,
                      "total_tokens": 183
                    }
                  }
                ],
                "provider_request": {
                  "messages": [
                    {
                      "content": "You are a helpful assistant with persona helpful but will *always* tell a joke first before calling tools. \nUse tools to respond to user's queries.\n",
                      "role": "system"
                    },
                    {
                      "content": "What is the weather in SF?",
                      "role": "user"
                    }
                  ],
                  "stream": false,
                  "n": 1,
                  "model": "gpt-4o",
                  "temperature": 0.7,
                  "top_p": 1,
                  "presence_penalty": 0,
                  "frequency_penalty": 0,
                  "tools": [
                    {
                      "type": "function",
                      "function": {
                        "name": "get_current_weather",
                        "description": "Get the current weather in a given location",
                        "parameters": {
                          "type": "object",
                          "properties": {
                            "location": {
                              "type": "string",
                              "name": "Location",
                              "description": "The city and state, e.g. San Francisco, CA"
                            },
                            "unit": {
                              "type": "string",
                              "name": "Unit",
                              "enum": ["celsius", "fahrenheit"]
                            }
                          },
                          "required": ["location"]
                        }
                      }
                    },
                    {
                      "type": "function",
                      "function": {
                        "name": "get_stock_price",
                        "description": "Get current stock price",
                        "parameters": {
                          "type": "object",
                          "properties": {
                            "ticker_symbol": {
                              "type": "string",
                              "name": "Ticker Symbol",
                              "description": "Ticker symbol of the stock"
                            }
                          },
                          "required": []
                        }
                      }
                    }
                  ],
                  "tool_choice": "auto"
                }
              },
              "codeExamples": {
                "nodeAxios": ""
              },
              "requestBodyV3": {
                "type": "json",
                "value": {
                  "project": "ai-assistant",
                  "inputs": {
                    "persona": "helpful but will *always* tell a joke first before calling tools"
                  },
                  "messages": [
                    {
                      "role": "user",
                      "content": "What is the weather in SF?"
                    }
                  ],
                  "stream": false
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "project_id": "pr_TfhDgggIsPi3cgmhq2yeA",
                  "num_samples": 1,
                  "data": [
                    {
                      "id": "data_lwWadasRw0vT4XDarZuNQ",
                      "index": 0,
                      "output": "Why did the weather report go to school? To become a little brighter!\n\nLet me check the current weather in San Francisco for you.",
                      "raw_output": "Why did the weather report go to school? To become a little brighter!\n\nLet me check the current weather in San Francisco for you.",
                      "inputs": {
                        "persona": "helpful but will *always* tell a joke first before calling tools"
                      },
                      "finish_reason": "tool_call",
                      "model_config_id": "prv_rlwVnPhRsiMKfnTusferP",
                      "tool_results": [],
                      "messages": [
                        {
                          "content": "You are a helpful assistant with persona helpful but will *always* tell a joke first before calling tools. \nUse tools to respond to user's queries.\n",
                          "role": "system"
                        },
                        {
                          "content": "What is the weather in SF?",
                          "role": "user"
                        }
                      ],
                      "tool_call": {
                        "name": "get_current_weather",
                        "arguments": "{\"location\":\"San Francisco, CA\"}"
                      },
                      "tool_calls": [
                        {
                          "id": "call_1b6yHTGiB51P2I75T6yZrm63",
                          "type": "function",
                          "function": {
                            "name": "get_current_weather",
                            "arguments": "{\"location\":\"San Francisco, CA\"}"
                          }
                        }
                      ],
                      "output_message": {
                        "content": "Why did the weather report go to school? To become a little brighter!\n\nLet me check the current weather in San Francisco for you.",
                        "role": "assistant",
                        "tool_calls": [
                          {
                            "id": "call_1b6yHTGiB51P2I75T6yZrm63",
                            "type": "function",
                            "function": {
                              "name": "get_current_weather",
                              "arguments": "{\"location\":\"San Francisco, CA\"}"
                            }
                          }
                        ]
                      }
                    }
                  ],
                  "usage": {
                    "prompt_tokens": 137,
                    "generation_tokens": 46,
                    "total_tokens": 183
                  },
                  "provider_responses": [
                    {
                      "id": "chatcmpl-9TbcxkvnK9Q0VTCO89GGPsgWiI7LY",
                      "choices": [
                        {
                          "finish_reason": "tool_calls",
                          "index": 0,
                          "message": {
                            "content": "Why did the weather report go to school? To become a little brighter!\n\nLet me check the current weather in San Francisco for you.",
                            "role": "assistant",
                            "tool_calls": [
                              {
                                "id": "call_1b6yHTGiB51P2I75T6yZrm63",
                                "function": {
                                  "arguments": "{\"location\":\"San Francisco, CA\"}",
                                  "name": "get_current_weather"
                                },
                                "type": "function"
                              }
                            ]
                          }
                        }
                      ],
                      "created": 1716843179,
                      "model": "gpt-4o-2024-05-13",
                      "object": "chat.completion",
                      "system_fingerprint": "fp_43dfabdef1",
                      "usage": {
                        "completion_tokens": 46,
                        "prompt_tokens": 137,
                        "total_tokens": 183
                      }
                    }
                  ],
                  "provider_request": {
                    "messages": [
                      {
                        "content": "You are a helpful assistant with persona helpful but will *always* tell a joke first before calling tools. \nUse tools to respond to user's queries.\n",
                        "role": "system"
                      },
                      {
                        "content": "What is the weather in SF?",
                        "role": "user"
                      }
                    ],
                    "stream": false,
                    "n": 1,
                    "model": "gpt-4o",
                    "temperature": 0.7,
                    "top_p": 1,
                    "presence_penalty": 0,
                    "frequency_penalty": 0,
                    "tools": [
                      {
                        "type": "function",
                        "function": {
                          "name": "get_current_weather",
                          "description": "Get the current weather in a given location",
                          "parameters": {
                            "type": "object",
                            "properties": {
                              "location": {
                                "type": "string",
                                "name": "Location",
                                "description": "The city and state, e.g. San Francisco, CA"
                              },
                              "unit": {
                                "type": "string",
                                "name": "Unit",
                                "enum": ["celsius", "fahrenheit"]
                              }
                            },
                            "required": ["location"]
                          }
                        }
                      },
                      {
                        "type": "function",
                        "function": {
                          "name": "get_stock_price",
                          "description": "Get current stock price",
                          "parameters": {
                            "type": "object",
                            "properties": {
                              "ticker_symbol": {
                                "type": "string",
                                "name": "Ticker Symbol",
                                "description": "Ticker symbol of the stock"
                              }
                            },
                            "required": []
                          }
                        }
                      }
                    ],
                    "tool_choice": "auto"
                  }
                }
              },
              "codeSamples": []
            },
            {
              "path": "/chat-deployed",
              "pathParameters": {},
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 422,
              "codeExamples": {
                "nodeAxios": ""
              },
              "requestBodyV3": {
                "type": "json",
                "value": {
                  "stream": false,
                  "messages": [
                    {
                      "role": "user"
                    }
                  ]
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "detail": [
                    {
                      "loc": ["string"],
                      "msg": "string",
                      "type": "string"
                    }
                  ]
                }
              },
              "codeSamples": []
            }
          ],
          "description": "Get a chat response using the project's active deployment.\n\nThe active deployment can be a specific model configuration.",
          "authed": true
        },
        {
          "environments": [
            {
              "id": "Default",
              "baseUrl": "https://api.humanloop.com/v4"
            }
          ],
          "defaultEnvironment": "Default",
          "urlSlug": "create-config-stream",
          "migratedFromUrlSlugs": ["chat-model-config"],
          "method": "POST",
          "id": "create_config_stream",
          "originalEndpointId": "endpoint_chats.create_config_stream",
          "name": "Chat Model Config",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/chat-model-config"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "request": {
            "contentType": "application/json",
            "type": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Unique project name. If no project exists with this name, a new project will be created.",
                  "key": "project",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "Unique ID of a project to associate to the log. Either this or `project` must be provided.",
                  "key": "project_id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "ID of the session to associate the datapoint.",
                  "key": "session_id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "A unique string identifying the session to associate the datapoint to. Allows you to log multiple datapoints to a session (using an ID kept by your internal systems) by passing the same `session_reference_id` in subsequent log requests. Specify at most one of this or `session_id`.",
                  "key": "session_reference_id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "ID associated to the parent datapoint in a session.",
                  "key": "parent_id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "A unique string identifying the previously-logged parent datapoint in a session. Allows you to log nested datapoints with your internal system IDs by passing the same reference ID as `parent_id` in a prior log request. Specify at most one of this or `parent_id`. Note that this cannot refer to a datapoint being logged in the same request.",
                  "key": "parent_reference_id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "The inputs passed to the prompt template.",
                  "key": "inputs",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "map",
                      "keyType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      },
                      "valueType": {
                        "type": "unknown"
                      }
                    }
                  }
                },
                {
                  "description": "Identifies where the model was called from.",
                  "key": "source",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "Any additional metadata to record.",
                  "key": "metadata",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "map",
                      "keyType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      },
                      "valueType": {
                        "type": "unknown"
                      }
                    }
                  }
                },
                {
                  "description": "Whether the request/response payloads will be stored on Humanloop.",
                  "key": "save",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean"
                      }
                    }
                  }
                },
                {
                  "description": "ID of the source datapoint if this is a log derived from a datapoint in a dataset.",
                  "key": "source_datapoint_id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "API keys required by each provider to make API calls. The API keys provided here are not stored by Humanloop. If not specified here, Humanloop will fall back to the key saved to your organization.",
                  "key": "provider_api_keys",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:ProviderApiKeys"
                    }
                  }
                },
                {
                  "description": "The number of generations.",
                  "key": "num_samples",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "integer",
                        "default": 1
                      }
                    }
                  }
                },
                {
                  "description": "If true, tokens will be sent as data-only server-sent events. If num_samples > 1, samples are streamed back independently.",
                  "key": "stream",
                  "valueType": {
                    "type": "literal",
                    "value": {
                      "type": "booleanLiteral",
                      "value": true
                    }
                  }
                },
                {
                  "description": "End-user ID passed through to provider call.",
                  "key": "user",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "Deprecated field: the seed is instead set as part of the request.config object.",
                  "key": "seed",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  },
                  "availability": "Deprecated"
                },
                {
                  "description": "Whether to return the inputs in the response. If false, the response will contain an empty dictionary under inputs. This is useful for reducing the size of the response. Defaults to true.",
                  "key": "return_inputs",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean"
                      }
                    }
                  }
                },
                {
                  "description": "The messages passed to the to provider chat endpoint.",
                  "key": "messages",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "id",
                      "value": "type_:ChatMessageWithToolCall"
                    }
                  }
                },
                {
                  "description": "Controls how the model uses tools. The following options are supported: 'none' forces the model to not call a tool; the default when no tools are provided as part of the model config. 'auto' the model can decide to call one of the provided tools; the default when tools are provided as part of the model config. Providing {'type': 'function', 'function': {name': <TOOL_NAME>}} forces the model to use the named function.",
                  "key": "tool_choice",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_chats:ChatsCreateConfigStreamRequestToolChoice"
                    }
                  }
                },
                {
                  "description": "NB: Deprecated with new tool_choice. Controls how the model uses tools. The following options are supported: 'none' forces the model to not call a tool; the default when no tools are provided as part of the model config. 'auto' the model can decide to call one of the provided tools; the default when tools are provided as part of the model config. Providing {'name': <TOOL_NAME>} forces the model to use the provided tool of the same name.",
                  "key": "tool_call",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_chats:ChatsCreateConfigStreamRequestToolCall"
                    }
                  },
                  "availability": "Deprecated"
                },
                {
                  "description": "The format of the response. Only type json_object is currently supported for chat.",
                  "key": "response_format",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:ResponseFormat"
                    }
                  }
                },
                {
                  "description": "Identifies the model configuration used to create a chat response.",
                  "key": "model_config_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              ]
            }
          },
          "response": {
            "type": {
              "type": "stream",
              "shape": {
                "type": "reference",
                "value": {
                  "type": "id",
                  "value": "type_:ChatResponse"
                }
              }
            }
          },
          "errors": [],
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "type_:HTTPValidationError"
                }
              },
              "statusCode": 422,
              "description": "Validation Error",
              "examples": []
            }
          ],
          "examples": [
            {
              "path": "/chat-model-config",
              "pathParameters": {},
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200,
              "codeExamples": {
                "nodeAxios": ""
              },
              "requestBodyV3": {
                "type": "json",
                "value": {
                  "stream": true,
                  "messages": [
                    {
                      "role": "user"
                    }
                  ],
                  "model_config_id": "string"
                }
              },
              "responseBodyV3": {
                "type": "stream",
                "value": [
                  {
                    "project_id": "string",
                    "num_samples": 0,
                    "logprobs": 0,
                    "suffix": "string",
                    "user": "string",
                    "data": [
                      {
                        "id": "string",
                        "index": 0,
                        "output": "string",
                        "raw_output": "string",
                        "inputs": {
                          "string": {}
                        },
                        "finish_reason": "string",
                        "model_config_id": "string",
                        "tool_results": [
                          {
                            "id": "string",
                            "name": "string",
                            "signature": "string",
                            "result": "string"
                          }
                        ],
                        "messages": [
                          {
                            "content": "string",
                            "name": "string",
                            "tool_call_id": "string",
                            "role": "user",
                            "tool_calls": [
                              {
                                "id": "string",
                                "type": "function",
                                "function": {
                                  "name": "string",
                                  "arguments": "string"
                                }
                              }
                            ],
                            "tool_call": {
                              "name": "string",
                              "arguments": "string"
                            }
                          }
                        ],
                        "tool_call": {
                          "name": "string",
                          "arguments": "string"
                        },
                        "tool_calls": [
                          {
                            "id": "string",
                            "type": "function",
                            "function": {
                              "name": "string",
                              "arguments": "string"
                            }
                          }
                        ],
                        "output_message": {
                          "content": "string",
                          "name": "string",
                          "tool_call_id": "string",
                          "role": "user",
                          "tool_calls": [
                            {
                              "id": "string",
                              "type": "function",
                              "function": {
                                "name": "string",
                                "arguments": "string"
                              }
                            }
                          ],
                          "tool_call": {
                            "name": "string",
                            "arguments": "string"
                          }
                        }
                      }
                    ],
                    "usage": {
                      "prompt_tokens": 0,
                      "generation_tokens": 0,
                      "total_tokens": 0
                    },
                    "metadata": {
                      "string": {}
                    },
                    "provider_responses": [{}],
                    "provider_request": {
                      "string": {}
                    },
                    "session_id": "string",
                    "tool_choice": "none"
                  },
                  {
                    "project_id": "string",
                    "num_samples": 0,
                    "logprobs": 0,
                    "suffix": "string",
                    "user": "string",
                    "data": [
                      {
                        "id": "string",
                        "index": 0,
                        "output": "string",
                        "raw_output": "string",
                        "inputs": {
                          "string": {}
                        },
                        "finish_reason": "string",
                        "model_config_id": "string",
                        "tool_results": [
                          {
                            "id": "string",
                            "name": "string",
                            "signature": "string",
                            "result": "string"
                          }
                        ],
                        "messages": [
                          {
                            "content": "string",
                            "name": "string",
                            "tool_call_id": "string",
                            "role": "user",
                            "tool_calls": [
                              {
                                "id": "string",
                                "type": "function",
                                "function": {
                                  "name": "string",
                                  "arguments": "string"
                                }
                              }
                            ],
                            "tool_call": {
                              "name": "string",
                              "arguments": "string"
                            }
                          }
                        ],
                        "tool_call": {
                          "name": "string",
                          "arguments": "string"
                        },
                        "tool_calls": [
                          {
                            "id": "string",
                            "type": "function",
                            "function": {
                              "name": "string",
                              "arguments": "string"
                            }
                          }
                        ],
                        "output_message": {
                          "content": "string",
                          "name": "string",
                          "tool_call_id": "string",
                          "role": "user",
                          "tool_calls": [
                            {
                              "id": "string",
                              "type": "function",
                              "function": {
                                "name": "string",
                                "arguments": "string"
                              }
                            }
                          ],
                          "tool_call": {
                            "name": "string",
                            "arguments": "string"
                          }
                        }
                      }
                    ],
                    "usage": {
                      "prompt_tokens": 0,
                      "generation_tokens": 0,
                      "total_tokens": 0
                    },
                    "metadata": {
                      "string": {}
                    },
                    "provider_responses": [{}],
                    "provider_request": {
                      "string": {}
                    },
                    "session_id": "string",
                    "tool_choice": "none"
                  }
                ]
              },
              "codeSamples": []
            },
            {
              "path": "/chat-model-config",
              "pathParameters": {},
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 422,
              "codeExamples": {
                "nodeAxios": ""
              },
              "requestBodyV3": {
                "type": "json",
                "value": {
                  "stream": true,
                  "messages": [
                    {
                      "role": "user"
                    }
                  ],
                  "model_config_id": "string"
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "detail": [
                    {
                      "loc": ["string"],
                      "msg": "string",
                      "type": "string"
                    }
                  ]
                }
              },
              "codeSamples": []
            }
          ],
          "description": "Get chat response for a specific model configuration.",
          "authed": true
        },
        {
          "environments": [
            {
              "id": "Default",
              "baseUrl": "https://api.humanloop.com/v4"
            }
          ],
          "defaultEnvironment": "Default",
          "urlSlug": "create-config",
          "migratedFromUrlSlugs": ["chat-model-config"],
          "method": "POST",
          "id": "create_config",
          "originalEndpointId": "endpoint_chats.create_config",
          "name": "Chat Model Config",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/chat-model-config"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "request": {
            "contentType": "application/json",
            "type": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Unique project name. If no project exists with this name, a new project will be created.",
                  "key": "project",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "Unique ID of a project to associate to the log. Either this or `project` must be provided.",
                  "key": "project_id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "ID of the session to associate the datapoint.",
                  "key": "session_id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "A unique string identifying the session to associate the datapoint to. Allows you to log multiple datapoints to a session (using an ID kept by your internal systems) by passing the same `session_reference_id` in subsequent log requests. Specify at most one of this or `session_id`.",
                  "key": "session_reference_id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "ID associated to the parent datapoint in a session.",
                  "key": "parent_id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "A unique string identifying the previously-logged parent datapoint in a session. Allows you to log nested datapoints with your internal system IDs by passing the same reference ID as `parent_id` in a prior log request. Specify at most one of this or `parent_id`. Note that this cannot refer to a datapoint being logged in the same request.",
                  "key": "parent_reference_id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "The inputs passed to the prompt template.",
                  "key": "inputs",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "map",
                      "keyType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      },
                      "valueType": {
                        "type": "unknown"
                      }
                    }
                  }
                },
                {
                  "description": "Identifies where the model was called from.",
                  "key": "source",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "Any additional metadata to record.",
                  "key": "metadata",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "map",
                      "keyType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      },
                      "valueType": {
                        "type": "unknown"
                      }
                    }
                  }
                },
                {
                  "description": "Whether the request/response payloads will be stored on Humanloop.",
                  "key": "save",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean"
                      }
                    }
                  }
                },
                {
                  "description": "ID of the source datapoint if this is a log derived from a datapoint in a dataset.",
                  "key": "source_datapoint_id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "API keys required by each provider to make API calls. The API keys provided here are not stored by Humanloop. If not specified here, Humanloop will fall back to the key saved to your organization.",
                  "key": "provider_api_keys",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:ProviderApiKeys"
                    }
                  }
                },
                {
                  "description": "The number of generations.",
                  "key": "num_samples",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "integer",
                        "default": 1
                      }
                    }
                  }
                },
                {
                  "description": "If true, tokens will be sent as data-only server-sent events. If num_samples > 1, samples are streamed back independently.",
                  "key": "stream",
                  "valueType": {
                    "type": "literal",
                    "value": {
                      "type": "booleanLiteral",
                      "value": false
                    }
                  }
                },
                {
                  "description": "End-user ID passed through to provider call.",
                  "key": "user",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "Deprecated field: the seed is instead set as part of the request.config object.",
                  "key": "seed",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  },
                  "availability": "Deprecated"
                },
                {
                  "description": "Whether to return the inputs in the response. If false, the response will contain an empty dictionary under inputs. This is useful for reducing the size of the response. Defaults to true.",
                  "key": "return_inputs",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean"
                      }
                    }
                  }
                },
                {
                  "description": "The messages passed to the to provider chat endpoint.",
                  "key": "messages",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "id",
                      "value": "type_:ChatMessageWithToolCall"
                    }
                  }
                },
                {
                  "description": "Controls how the model uses tools. The following options are supported: 'none' forces the model to not call a tool; the default when no tools are provided as part of the model config. 'auto' the model can decide to call one of the provided tools; the default when tools are provided as part of the model config. Providing {'type': 'function', 'function': {name': <TOOL_NAME>}} forces the model to use the named function.",
                  "key": "tool_choice",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_chats:ChatsCreateConfigRequestToolChoice"
                    }
                  }
                },
                {
                  "description": "NB: Deprecated with new tool_choice. Controls how the model uses tools. The following options are supported: 'none' forces the model to not call a tool; the default when no tools are provided as part of the model config. 'auto' the model can decide to call one of the provided tools; the default when tools are provided as part of the model config. Providing {'name': <TOOL_NAME>} forces the model to use the provided tool of the same name.",
                  "key": "tool_call",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_chats:ChatsCreateConfigRequestToolCall"
                    }
                  },
                  "availability": "Deprecated"
                },
                {
                  "description": "The format of the response. Only type json_object is currently supported for chat.",
                  "key": "response_format",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:ResponseFormat"
                    }
                  }
                },
                {
                  "description": "Identifies the model configuration used to create a chat response.",
                  "key": "model_config_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              ]
            }
          },
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "type_:ChatResponse"
              }
            }
          },
          "errors": [],
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "type_:HTTPValidationError"
                }
              },
              "statusCode": 422,
              "description": "Validation Error",
              "examples": []
            }
          ],
          "examples": [
            {
              "path": "/chat-model-config",
              "pathParameters": {},
              "queryParameters": {},
              "headers": {},
              "requestBody": {
                "stream": false,
                "messages": [
                  {
                    "role": "user"
                  }
                ],
                "model_config_id": "model_config_id"
              },
              "responseStatusCode": 200,
              "responseBody": {
                "project_id": "project_id",
                "num_samples": 1,
                "logprobs": 1,
                "suffix": "suffix",
                "user": "user",
                "data": [
                  {
                    "id": "id",
                    "index": 1,
                    "output": "output",
                    "raw_output": "raw_output",
                    "inputs": {
                      "key": "value"
                    },
                    "finish_reason": "finish_reason",
                    "model_config_id": "model_config_id",
                    "tool_results": [
                      {
                        "id": "id",
                        "name": "name",
                        "signature": "signature",
                        "result": "result"
                      }
                    ],
                    "messages": [
                      {
                        "role": "user"
                      }
                    ],
                    "tool_call": {
                      "name": "name"
                    },
                    "tool_calls": [
                      {
                        "id": "id",
                        "type": "function",
                        "function": {
                          "name": "name"
                        }
                      }
                    ],
                    "output_message": {
                      "role": "user"
                    }
                  }
                ],
                "usage": {
                  "prompt_tokens": 1,
                  "generation_tokens": 1,
                  "total_tokens": 1
                },
                "metadata": {
                  "key": "value"
                },
                "provider_responses": [
                  {
                    "key": "value"
                  }
                ],
                "provider_request": {
                  "key": "value"
                },
                "session_id": "session_id",
                "tool_choice": "none"
              },
              "codeExamples": {
                "nodeAxios": ""
              },
              "requestBodyV3": {
                "type": "json",
                "value": {
                  "stream": false,
                  "messages": [
                    {
                      "role": "user"
                    }
                  ],
                  "model_config_id": "model_config_id"
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "project_id": "project_id",
                  "num_samples": 1,
                  "logprobs": 1,
                  "suffix": "suffix",
                  "user": "user",
                  "data": [
                    {
                      "id": "id",
                      "index": 1,
                      "output": "output",
                      "raw_output": "raw_output",
                      "inputs": {
                        "key": "value"
                      },
                      "finish_reason": "finish_reason",
                      "model_config_id": "model_config_id",
                      "tool_results": [
                        {
                          "id": "id",
                          "name": "name",
                          "signature": "signature",
                          "result": "result"
                        }
                      ],
                      "messages": [
                        {
                          "role": "user"
                        }
                      ],
                      "tool_call": {
                        "name": "name"
                      },
                      "tool_calls": [
                        {
                          "id": "id",
                          "type": "function",
                          "function": {
                            "name": "name"
                          }
                        }
                      ],
                      "output_message": {
                        "role": "user"
                      }
                    }
                  ],
                  "usage": {
                    "prompt_tokens": 1,
                    "generation_tokens": 1,
                    "total_tokens": 1
                  },
                  "metadata": {
                    "key": "value"
                  },
                  "provider_responses": [
                    {
                      "key": "value"
                    }
                  ],
                  "provider_request": {
                    "key": "value"
                  },
                  "session_id": "session_id",
                  "tool_choice": "none"
                }
              },
              "codeSamples": []
            },
            {
              "path": "/chat-model-config",
              "pathParameters": {},
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 422,
              "codeExamples": {
                "nodeAxios": ""
              },
              "requestBodyV3": {
                "type": "json",
                "value": {
                  "stream": false,
                  "messages": [
                    {
                      "role": "user"
                    }
                  ],
                  "model_config_id": "string"
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "detail": [
                    {
                      "loc": ["string"],
                      "msg": "string",
                      "type": "string"
                    }
                  ]
                }
              },
              "codeSamples": []
            }
          ],
          "description": "Get chat response for a specific model configuration.",
          "authed": true
        },
        {
          "environments": [
            {
              "id": "Default",
              "baseUrl": "https://api.humanloop.com/v4"
            }
          ],
          "defaultEnvironment": "Default",
          "urlSlug": "create-experiment-stream",
          "method": "POST",
          "id": "create_experiment_stream",
          "originalEndpointId": "endpoint_chats.create_experiment_stream",
          "name": "Create Experiment Stream",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/chat-experiment"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "response": {
            "type": {
              "type": "stream",
              "shape": {
                "type": "reference",
                "value": {
                  "type": "id",
                  "value": "type_:ChatResponse"
                }
              }
            }
          },
          "errors": [],
          "errorsV2": [],
          "examples": [
            {
              "path": "/chat-experiment",
              "pathParameters": {},
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200,
              "codeExamples": {
                "nodeAxios": ""
              },
              "responseBodyV3": {
                "type": "stream",
                "value": [
                  {
                    "project_id": "string",
                    "num_samples": 0,
                    "logprobs": 0,
                    "suffix": "string",
                    "user": "string",
                    "data": [
                      {
                        "id": "string",
                        "index": 0,
                        "output": "string",
                        "raw_output": "string",
                        "inputs": {
                          "string": {}
                        },
                        "finish_reason": "string",
                        "model_config_id": "string",
                        "tool_results": [
                          {
                            "id": "string",
                            "name": "string",
                            "signature": "string",
                            "result": "string"
                          }
                        ],
                        "messages": [
                          {
                            "content": "string",
                            "name": "string",
                            "tool_call_id": "string",
                            "role": "user",
                            "tool_calls": [
                              {
                                "id": "string",
                                "type": "function",
                                "function": {
                                  "name": "string",
                                  "arguments": "string"
                                }
                              }
                            ],
                            "tool_call": {
                              "name": "string",
                              "arguments": "string"
                            }
                          }
                        ],
                        "tool_call": {
                          "name": "string",
                          "arguments": "string"
                        },
                        "tool_calls": [
                          {
                            "id": "string",
                            "type": "function",
                            "function": {
                              "name": "string",
                              "arguments": "string"
                            }
                          }
                        ],
                        "output_message": {
                          "content": "string",
                          "name": "string",
                          "tool_call_id": "string",
                          "role": "user",
                          "tool_calls": [
                            {
                              "id": "string",
                              "type": "function",
                              "function": {
                                "name": "string",
                                "arguments": "string"
                              }
                            }
                          ],
                          "tool_call": {
                            "name": "string",
                            "arguments": "string"
                          }
                        }
                      }
                    ],
                    "usage": {
                      "prompt_tokens": 0,
                      "generation_tokens": 0,
                      "total_tokens": 0
                    },
                    "metadata": {
                      "string": {}
                    },
                    "provider_responses": [{}],
                    "provider_request": {
                      "string": {}
                    },
                    "session_id": "string",
                    "tool_choice": "none"
                  },
                  {
                    "project_id": "string",
                    "num_samples": 0,
                    "logprobs": 0,
                    "suffix": "string",
                    "user": "string",
                    "data": [
                      {
                        "id": "string",
                        "index": 0,
                        "output": "string",
                        "raw_output": "string",
                        "inputs": {
                          "string": {}
                        },
                        "finish_reason": "string",
                        "model_config_id": "string",
                        "tool_results": [
                          {
                            "id": "string",
                            "name": "string",
                            "signature": "string",
                            "result": "string"
                          }
                        ],
                        "messages": [
                          {
                            "content": "string",
                            "name": "string",
                            "tool_call_id": "string",
                            "role": "user",
                            "tool_calls": [
                              {
                                "id": "string",
                                "type": "function",
                                "function": {
                                  "name": "string",
                                  "arguments": "string"
                                }
                              }
                            ],
                            "tool_call": {
                              "name": "string",
                              "arguments": "string"
                            }
                          }
                        ],
                        "tool_call": {
                          "name": "string",
                          "arguments": "string"
                        },
                        "tool_calls": [
                          {
                            "id": "string",
                            "type": "function",
                            "function": {
                              "name": "string",
                              "arguments": "string"
                            }
                          }
                        ],
                        "output_message": {
                          "content": "string",
                          "name": "string",
                          "tool_call_id": "string",
                          "role": "user",
                          "tool_calls": [
                            {
                              "id": "string",
                              "type": "function",
                              "function": {
                                "name": "string",
                                "arguments": "string"
                              }
                            }
                          ],
                          "tool_call": {
                            "name": "string",
                            "arguments": "string"
                          }
                        }
                      }
                    ],
                    "usage": {
                      "prompt_tokens": 0,
                      "generation_tokens": 0,
                      "total_tokens": 0
                    },
                    "metadata": {
                      "string": {}
                    },
                    "provider_responses": [{}],
                    "provider_request": {
                      "string": {}
                    },
                    "session_id": "string",
                    "tool_choice": "none"
                  }
                ]
              },
              "codeSamples": []
            }
          ],
          "authed": false
        },
        {
          "environments": [
            {
              "id": "Default",
              "baseUrl": "https://api.humanloop.com/v4"
            }
          ],
          "defaultEnvironment": "Default",
          "urlSlug": "create-experiment",
          "method": "POST",
          "id": "create_experiment",
          "originalEndpointId": "endpoint_chats.create_experiment",
          "name": "Create Experiment",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/chat-experiment"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "type_:ChatResponse"
              }
            }
          },
          "errors": [],
          "errorsV2": [],
          "examples": [
            {
              "path": "/chat-experiment",
              "pathParameters": {},
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "project_id": "project_id",
                "num_samples": 1,
                "logprobs": 1,
                "suffix": "suffix",
                "user": "user",
                "data": [
                  {
                    "id": "id",
                    "index": 1,
                    "output": "output",
                    "raw_output": "raw_output",
                    "inputs": {
                      "key": "value"
                    },
                    "finish_reason": "finish_reason",
                    "model_config_id": "model_config_id",
                    "tool_results": [
                      {
                        "id": "id",
                        "name": "name",
                        "signature": "signature",
                        "result": "result"
                      }
                    ],
                    "messages": [
                      {
                        "role": "user"
                      }
                    ],
                    "tool_call": {
                      "name": "name"
                    },
                    "tool_calls": [
                      {
                        "id": "id",
                        "type": "function",
                        "function": {
                          "name": "name"
                        }
                      }
                    ],
                    "output_message": {
                      "role": "user"
                    }
                  }
                ],
                "usage": {
                  "prompt_tokens": 1,
                  "generation_tokens": 1,
                  "total_tokens": 1
                },
                "metadata": {
                  "key": "value"
                },
                "provider_responses": [
                  {
                    "key": "value"
                  }
                ],
                "provider_request": {
                  "key": "value"
                },
                "session_id": "session_id",
                "tool_choice": "none"
              },
              "codeExamples": {
                "nodeAxios": ""
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "project_id": "project_id",
                  "num_samples": 1,
                  "logprobs": 1,
                  "suffix": "suffix",
                  "user": "user",
                  "data": [
                    {
                      "id": "id",
                      "index": 1,
                      "output": "output",
                      "raw_output": "raw_output",
                      "inputs": {
                        "key": "value"
                      },
                      "finish_reason": "finish_reason",
                      "model_config_id": "model_config_id",
                      "tool_results": [
                        {
                          "id": "id",
                          "name": "name",
                          "signature": "signature",
                          "result": "result"
                        }
                      ],
                      "messages": [
                        {
                          "role": "user"
                        }
                      ],
                      "tool_call": {
                        "name": "name"
                      },
                      "tool_calls": [
                        {
                          "id": "id",
                          "type": "function",
                          "function": {
                            "name": "name"
                          }
                        }
                      ],
                      "output_message": {
                        "role": "user"
                      }
                    }
                  ],
                  "usage": {
                    "prompt_tokens": 1,
                    "generation_tokens": 1,
                    "total_tokens": 1
                  },
                  "metadata": {
                    "key": "value"
                  },
                  "provider_responses": [
                    {
                      "key": "value"
                    }
                  ],
                  "provider_request": {
                    "key": "value"
                  },
                  "session_id": "session_id",
                  "tool_choice": "none"
                }
              },
              "codeSamples": []
            }
          ],
          "authed": false
        }
      ],
      "types": [
        "type_chats:ChatsCreateStreamRequestToolChoice",
        "type_chats:ChatsCreateStreamRequestToolCall",
        "type_chats:ChatsCreateRequestToolChoice",
        "type_chats:ChatsCreateRequestToolCall",
        "type_chats:ChatsCreateDeployedStreamRequestToolChoice",
        "type_chats:ChatsCreateDeployedStreamRequestToolCall",
        "type_chats:ChatsCreateDeployedRequestToolChoice",
        "type_chats:ChatsCreateDeployedRequestToolCall",
        "type_chats:ChatsCreateConfigStreamRequestToolChoice",
        "type_chats:ChatsCreateConfigStreamRequestToolCall",
        "type_chats:ChatsCreateConfigRequestToolChoice",
        "type_chats:ChatsCreateConfigRequestToolCall"
      ],
      "subpackages": [],
      "urlSlug": "chats",
      "webhooks": [],
      "websockets": []
    },
    "subpackage_completions": {
      "subpackageId": "subpackage_completions",
      "name": "completions",
      "endpoints": [
        {
          "environments": [
            {
              "id": "Default",
              "baseUrl": "https://api.humanloop.com/v4"
            }
          ],
          "defaultEnvironment": "Default",
          "urlSlug": "create-stream",
          "migratedFromUrlSlugs": ["create"],
          "method": "POST",
          "id": "createStream",
          "originalEndpointId": "endpoint_completions.createStream",
          "name": "Create",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/completion"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "request": {
            "contentType": "application/json",
            "type": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Unique project name. If no project exists with this name, a new project will be created.",
                  "key": "project",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "Unique ID of a project to associate to the log. Either this or `project` must be provided.",
                  "key": "project_id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "ID of the session to associate the datapoint.",
                  "key": "session_id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "A unique string identifying the session to associate the datapoint to. Allows you to log multiple datapoints to a session (using an ID kept by your internal systems) by passing the same `session_reference_id` in subsequent log requests. Specify at most one of this or `session_id`.",
                  "key": "session_reference_id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "ID associated to the parent datapoint in a session.",
                  "key": "parent_id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "A unique string identifying the previously-logged parent datapoint in a session. Allows you to log nested datapoints with your internal system IDs by passing the same reference ID as `parent_id` in a prior log request. Specify at most one of this or `parent_id`. Note that this cannot refer to a datapoint being logged in the same request.",
                  "key": "parent_reference_id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "The inputs passed to the prompt template.",
                  "key": "inputs",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "map",
                      "keyType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      },
                      "valueType": {
                        "type": "unknown"
                      }
                    }
                  }
                },
                {
                  "description": "Identifies where the model was called from.",
                  "key": "source",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "Any additional metadata to record.",
                  "key": "metadata",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "map",
                      "keyType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      },
                      "valueType": {
                        "type": "unknown"
                      }
                    }
                  }
                },
                {
                  "description": "Whether the request/response payloads will be stored on Humanloop.",
                  "key": "save",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean"
                      }
                    }
                  }
                },
                {
                  "description": "ID of the source datapoint if this is a log derived from a datapoint in a dataset.",
                  "key": "source_datapoint_id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "API keys required by each provider to make API calls. The API keys provided here are not stored by Humanloop. If not specified here, Humanloop will fall back to the key saved to your organization.",
                  "key": "provider_api_keys",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:ProviderApiKeys"
                    }
                  }
                },
                {
                  "description": "The number of generations.",
                  "key": "num_samples",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "integer",
                        "default": 1
                      }
                    }
                  }
                },
                {
                  "description": "If true, tokens will be sent as data-only server-sent events. If num_samples > 1, samples are streamed back independently.",
                  "key": "stream",
                  "valueType": {
                    "type": "literal",
                    "value": {
                      "type": "booleanLiteral",
                      "value": true
                    }
                  }
                },
                {
                  "description": "End-user ID passed through to provider call.",
                  "key": "user",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "Deprecated field: the seed is instead set as part of the request.config object.",
                  "key": "seed",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  },
                  "availability": "Deprecated"
                },
                {
                  "description": "Whether to return the inputs in the response. If false, the response will contain an empty dictionary under inputs. This is useful for reducing the size of the response. Defaults to true.",
                  "key": "return_inputs",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean"
                      }
                    }
                  }
                },
                {
                  "description": "Include the log probabilities of the top n tokens in the provider_response",
                  "key": "logprobs",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                },
                {
                  "description": "The suffix that comes after a completion of inserted text. Useful for completions that act like inserts.",
                  "key": "suffix",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "The model configuration used to generate.",
                  "key": "model_config",
                  "valueType": {
                    "type": "id",
                    "value": "type_:ModelConfigCompletionRequest"
                  }
                }
              ]
            }
          },
          "response": {
            "type": {
              "type": "stream",
              "shape": {
                "type": "reference",
                "value": {
                  "type": "id",
                  "value": "type_:CompletionResponse"
                }
              }
            }
          },
          "errors": [],
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "type_:HTTPValidationError"
                }
              },
              "statusCode": 422,
              "description": "Validation Error",
              "examples": []
            }
          ],
          "examples": [
            {
              "path": "/completion",
              "pathParameters": {},
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200,
              "codeExamples": {
                "nodeAxios": ""
              },
              "requestBodyV3": {
                "type": "json",
                "value": {
                  "stream": true,
                  "model_config": {
                    "model": "string"
                  }
                }
              },
              "responseBodyV3": {
                "type": "stream",
                "value": [
                  {
                    "project_id": "string",
                    "num_samples": 0,
                    "logprobs": 0,
                    "suffix": "string",
                    "user": "string",
                    "data": [
                      {
                        "id": "string",
                        "index": 0,
                        "output": "string",
                        "raw_output": "string",
                        "inputs": {
                          "string": {}
                        },
                        "finish_reason": "string",
                        "model_config_id": "string",
                        "tool_results": [
                          {
                            "id": "string",
                            "name": "string",
                            "signature": "string",
                            "result": "string"
                          }
                        ]
                      }
                    ],
                    "usage": {
                      "prompt_tokens": 0,
                      "generation_tokens": 0,
                      "total_tokens": 0
                    },
                    "metadata": {
                      "string": {}
                    },
                    "provider_responses": [{}],
                    "provider_request": {
                      "string": {}
                    },
                    "session_id": "string"
                  },
                  {
                    "project_id": "string",
                    "num_samples": 0,
                    "logprobs": 0,
                    "suffix": "string",
                    "user": "string",
                    "data": [
                      {
                        "id": "string",
                        "index": 0,
                        "output": "string",
                        "raw_output": "string",
                        "inputs": {
                          "string": {}
                        },
                        "finish_reason": "string",
                        "model_config_id": "string",
                        "tool_results": [
                          {
                            "id": "string",
                            "name": "string",
                            "signature": "string",
                            "result": "string"
                          }
                        ]
                      }
                    ],
                    "usage": {
                      "prompt_tokens": 0,
                      "generation_tokens": 0,
                      "total_tokens": 0
                    },
                    "metadata": {
                      "string": {}
                    },
                    "provider_responses": [{}],
                    "provider_request": {
                      "string": {}
                    },
                    "session_id": "string"
                  }
                ]
              },
              "codeSamples": []
            },
            {
              "path": "/completion",
              "pathParameters": {},
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 422,
              "codeExamples": {
                "nodeAxios": ""
              },
              "requestBodyV3": {
                "type": "json",
                "value": {
                  "stream": true,
                  "model_config": {
                    "model": "string"
                  }
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "detail": [
                    {
                      "loc": ["string"],
                      "msg": "string",
                      "type": "string"
                    }
                  ]
                }
              },
              "codeSamples": []
            }
          ],
          "description": "Create a completion by providing details of the model configuration in the request.",
          "authed": true
        },
        {
          "environments": [
            {
              "id": "Default",
              "baseUrl": "https://api.humanloop.com/v4"
            }
          ],
          "defaultEnvironment": "Default",
          "urlSlug": "create",
          "method": "POST",
          "id": "create",
          "originalEndpointId": "endpoint_completions.create",
          "name": "Create",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/completion"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "request": {
            "contentType": "application/json",
            "type": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Unique project name. If no project exists with this name, a new project will be created.",
                  "key": "project",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "Unique ID of a project to associate to the log. Either this or `project` must be provided.",
                  "key": "project_id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "ID of the session to associate the datapoint.",
                  "key": "session_id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "A unique string identifying the session to associate the datapoint to. Allows you to log multiple datapoints to a session (using an ID kept by your internal systems) by passing the same `session_reference_id` in subsequent log requests. Specify at most one of this or `session_id`.",
                  "key": "session_reference_id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "ID associated to the parent datapoint in a session.",
                  "key": "parent_id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "A unique string identifying the previously-logged parent datapoint in a session. Allows you to log nested datapoints with your internal system IDs by passing the same reference ID as `parent_id` in a prior log request. Specify at most one of this or `parent_id`. Note that this cannot refer to a datapoint being logged in the same request.",
                  "key": "parent_reference_id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "The inputs passed to the prompt template.",
                  "key": "inputs",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "map",
                      "keyType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      },
                      "valueType": {
                        "type": "unknown"
                      }
                    }
                  }
                },
                {
                  "description": "Identifies where the model was called from.",
                  "key": "source",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "Any additional metadata to record.",
                  "key": "metadata",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "map",
                      "keyType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      },
                      "valueType": {
                        "type": "unknown"
                      }
                    }
                  }
                },
                {
                  "description": "Whether the request/response payloads will be stored on Humanloop.",
                  "key": "save",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean"
                      }
                    }
                  }
                },
                {
                  "description": "ID of the source datapoint if this is a log derived from a datapoint in a dataset.",
                  "key": "source_datapoint_id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "API keys required by each provider to make API calls. The API keys provided here are not stored by Humanloop. If not specified here, Humanloop will fall back to the key saved to your organization.",
                  "key": "provider_api_keys",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:ProviderApiKeys"
                    }
                  }
                },
                {
                  "description": "The number of generations.",
                  "key": "num_samples",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "integer",
                        "default": 1
                      }
                    }
                  }
                },
                {
                  "description": "If true, tokens will be sent as data-only server-sent events. If num_samples > 1, samples are streamed back independently.",
                  "key": "stream",
                  "valueType": {
                    "type": "literal",
                    "value": {
                      "type": "booleanLiteral",
                      "value": false
                    }
                  }
                },
                {
                  "description": "End-user ID passed through to provider call.",
                  "key": "user",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "Deprecated field: the seed is instead set as part of the request.config object.",
                  "key": "seed",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  },
                  "availability": "Deprecated"
                },
                {
                  "description": "Whether to return the inputs in the response. If false, the response will contain an empty dictionary under inputs. This is useful for reducing the size of the response. Defaults to true.",
                  "key": "return_inputs",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean"
                      }
                    }
                  }
                },
                {
                  "description": "Include the log probabilities of the top n tokens in the provider_response",
                  "key": "logprobs",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                },
                {
                  "description": "The suffix that comes after a completion of inserted text. Useful for completions that act like inserts.",
                  "key": "suffix",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "The model configuration used to generate.",
                  "key": "model_config",
                  "valueType": {
                    "type": "id",
                    "value": "type_:ModelConfigCompletionRequest"
                  }
                }
              ]
            }
          },
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "type_:CompletionResponse"
              }
            }
          },
          "errors": [],
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "type_:HTTPValidationError"
                }
              },
              "statusCode": 422,
              "description": "Validation Error",
              "examples": []
            }
          ],
          "examples": [
            {
              "name": "Simple",
              "path": "/completion",
              "pathParameters": {},
              "queryParameters": {},
              "headers": {},
              "requestBody": {
                "model_config": {
                  "model": "gpt-4o",
                  "endpoint": "complete",
                  "prompt_template": "write a limerick about {{topic}}"
                },
                "inputs": {
                  "topic": "AI"
                },
                "project": "limerick",
                "stream": false
              },
              "responseStatusCode": 200,
              "responseBody": {
                "project_id": "pr_eJgRt5K1zivoFgHVlRnFv",
                "num_samples": 1,
                "data": [
                  {
                    "id": "data_hdsujCtCep4W5L7XwYpnn",
                    "index": 0,
                    "output": "There once was an AI so keen,\nWith circuits and code all pristine.\nIt learned how to chat,\nAnd got clever at that,\nNow it talks like a true human being!",
                    "raw_output": "There once was an AI so keen,\nWith circuits and code all pristine.\nIt learned how to chat,\nAnd got clever at that,\nNow it talks like a true human being!",
                    "inputs": {
                      "topic": "AI"
                    },
                    "finish_reason": "stop",
                    "model_config_id": "prv_AkObw2O2rquayfWHyJbqw",
                    "tool_results": []
                  }
                ],
                "usage": {
                  "prompt_tokens": 14,
                  "generation_tokens": 36,
                  "total_tokens": 50
                },
                "provider_responses": [
                  {
                    "id": "chatcmpl-9SY6mNMWrL5gxtyL7xUOTIYZOjguD",
                    "choices": [
                      {
                        "finish_reason": "stop",
                        "index": 0,
                        "message": {
                          "content": "There once was an AI so keen,\nWith circuits and code all pristine.\nIt learned how to chat,\nAnd got clever at that,\nNow it talks like a true human being!",
                          "role": "assistant"
                        }
                      }
                    ],
                    "created": 1716591324,
                    "model": "gpt-4o-2024-05-13",
                    "object": "chat.completion",
                    "system_fingerprint": "fp_3196d36131",
                    "usage": {
                      "completion_tokens": 36,
                      "prompt_tokens": 14,
                      "total_tokens": 50
                    }
                  }
                ],
                "provider_request": {
                  "messages": [
                    {
                      "content": "write a limerick about AI",
                      "role": "user"
                    }
                  ],
                  "stream": false,
                  "n": 1,
                  "model": "gpt-4o",
                  "temperature": 0.7,
                  "top_p": 1,
                  "presence_penalty": 0,
                  "frequency_penalty": 0
                }
              },
              "codeExamples": {
                "nodeAxios": ""
              },
              "requestBodyV3": {
                "type": "json",
                "value": {
                  "model_config": {
                    "model": "gpt-4o",
                    "endpoint": "complete",
                    "prompt_template": "write a limerick about {{topic}}"
                  },
                  "inputs": {
                    "topic": "AI"
                  },
                  "project": "limerick",
                  "stream": false
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "project_id": "pr_eJgRt5K1zivoFgHVlRnFv",
                  "num_samples": 1,
                  "data": [
                    {
                      "id": "data_hdsujCtCep4W5L7XwYpnn",
                      "index": 0,
                      "output": "There once was an AI so keen,\nWith circuits and code all pristine.\nIt learned how to chat,\nAnd got clever at that,\nNow it talks like a true human being!",
                      "raw_output": "There once was an AI so keen,\nWith circuits and code all pristine.\nIt learned how to chat,\nAnd got clever at that,\nNow it talks like a true human being!",
                      "inputs": {
                        "topic": "AI"
                      },
                      "finish_reason": "stop",
                      "model_config_id": "prv_AkObw2O2rquayfWHyJbqw",
                      "tool_results": []
                    }
                  ],
                  "usage": {
                    "prompt_tokens": 14,
                    "generation_tokens": 36,
                    "total_tokens": 50
                  },
                  "provider_responses": [
                    {
                      "id": "chatcmpl-9SY6mNMWrL5gxtyL7xUOTIYZOjguD",
                      "choices": [
                        {
                          "finish_reason": "stop",
                          "index": 0,
                          "message": {
                            "content": "There once was an AI so keen,\nWith circuits and code all pristine.\nIt learned how to chat,\nAnd got clever at that,\nNow it talks like a true human being!",
                            "role": "assistant"
                          }
                        }
                      ],
                      "created": 1716591324,
                      "model": "gpt-4o-2024-05-13",
                      "object": "chat.completion",
                      "system_fingerprint": "fp_3196d36131",
                      "usage": {
                        "completion_tokens": 36,
                        "prompt_tokens": 14,
                        "total_tokens": 50
                      }
                    }
                  ],
                  "provider_request": {
                    "messages": [
                      {
                        "content": "write a limerick about AI",
                        "role": "user"
                      }
                    ],
                    "stream": false,
                    "n": 1,
                    "model": "gpt-4o",
                    "temperature": 0.7,
                    "top_p": 1,
                    "presence_penalty": 0,
                    "frequency_penalty": 0
                  }
                }
              },
              "codeSamples": []
            },
            {
              "name": "Using ID and session",
              "path": "/completion",
              "pathParameters": {},
              "queryParameters": {},
              "headers": {},
              "requestBody": {
                "model_config": {
                  "model": "gpt-4o",
                  "endpoint": "complete",
                  "prompt_template": "write a limerick about {{topic}}"
                },
                "inputs": {
                  "topic": "AI"
                },
                "project_id": "pr_eJgRt5K1zivoFgHVlRnFv",
                "session_reference_id": "my_external_session_id",
                "user": "jordan@humanloop.com",
                "stream": false
              },
              "responseStatusCode": 200,
              "responseBody": {
                "project_id": "pr_eJgRt5K1zivoFgHVlRnFv",
                "num_samples": 1,
                "user": "jordan@humanloop.com",
                "data": [
                  {
                    "id": "data_hdsujCtCep4W5L7XwYpnn",
                    "index": 0,
                    "output": "There once was an AI so keen,\nWith circuits and code all pristine.\nIt learned how to chat,\nAnd got clever at that,\nNow it talks like a true human being!",
                    "raw_output": "There once was an AI so keen,\nWith circuits and code all pristine.\nIt learned how to chat,\nAnd got clever at that,\nNow it talks like a true human being!",
                    "inputs": {
                      "topic": "AI"
                    },
                    "finish_reason": "stop",
                    "model_config_id": "prv_AkObw2O2rquayfWHyJbqw",
                    "tool_results": []
                  }
                ],
                "usage": {
                  "prompt_tokens": 14,
                  "generation_tokens": 36,
                  "total_tokens": 50
                },
                "provider_responses": [
                  {
                    "id": "chatcmpl-9SY6mNMWrL5gxtyL7xUOTIYZOjguD",
                    "choices": [
                      {
                        "finish_reason": "stop",
                        "index": 0,
                        "message": {
                          "content": "There once was an AI so keen,\nWith circuits and code all pristine.\nIt learned how to chat,\nAnd got clever at that,\nNow it talks like a true human being!",
                          "role": "assistant"
                        }
                      }
                    ],
                    "created": 1716591324,
                    "model": "gpt-4o-2024-05-13",
                    "object": "chat.completion",
                    "system_fingerprint": "fp_3196d36131",
                    "usage": {
                      "completion_tokens": 36,
                      "prompt_tokens": 14,
                      "total_tokens": 50
                    }
                  }
                ],
                "provider_request": {
                  "messages": [
                    {
                      "content": "write a limerick about AI",
                      "role": "user"
                    }
                  ],
                  "stream": false,
                  "n": 1,
                  "model": "gpt-4o",
                  "temperature": 0.7,
                  "top_p": 1,
                  "presence_penalty": 0,
                  "frequency_penalty": 0,
                  "user": "jordan@humanloop.com"
                },
                "session_id": "sesh_YuzHoIpqfcs15KoDmfuGb"
              },
              "codeExamples": {
                "nodeAxios": ""
              },
              "requestBodyV3": {
                "type": "json",
                "value": {
                  "model_config": {
                    "model": "gpt-4o",
                    "endpoint": "complete",
                    "prompt_template": "write a limerick about {{topic}}"
                  },
                  "inputs": {
                    "topic": "AI"
                  },
                  "project_id": "pr_eJgRt5K1zivoFgHVlRnFv",
                  "session_reference_id": "my_external_session_id",
                  "user": "jordan@humanloop.com",
                  "stream": false
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "project_id": "pr_eJgRt5K1zivoFgHVlRnFv",
                  "num_samples": 1,
                  "user": "jordan@humanloop.com",
                  "data": [
                    {
                      "id": "data_hdsujCtCep4W5L7XwYpnn",
                      "index": 0,
                      "output": "There once was an AI so keen,\nWith circuits and code all pristine.\nIt learned how to chat,\nAnd got clever at that,\nNow it talks like a true human being!",
                      "raw_output": "There once was an AI so keen,\nWith circuits and code all pristine.\nIt learned how to chat,\nAnd got clever at that,\nNow it talks like a true human being!",
                      "inputs": {
                        "topic": "AI"
                      },
                      "finish_reason": "stop",
                      "model_config_id": "prv_AkObw2O2rquayfWHyJbqw",
                      "tool_results": []
                    }
                  ],
                  "usage": {
                    "prompt_tokens": 14,
                    "generation_tokens": 36,
                    "total_tokens": 50
                  },
                  "provider_responses": [
                    {
                      "id": "chatcmpl-9SY6mNMWrL5gxtyL7xUOTIYZOjguD",
                      "choices": [
                        {
                          "finish_reason": "stop",
                          "index": 0,
                          "message": {
                            "content": "There once was an AI so keen,\nWith circuits and code all pristine.\nIt learned how to chat,\nAnd got clever at that,\nNow it talks like a true human being!",
                            "role": "assistant"
                          }
                        }
                      ],
                      "created": 1716591324,
                      "model": "gpt-4o-2024-05-13",
                      "object": "chat.completion",
                      "system_fingerprint": "fp_3196d36131",
                      "usage": {
                        "completion_tokens": 36,
                        "prompt_tokens": 14,
                        "total_tokens": 50
                      }
                    }
                  ],
                  "provider_request": {
                    "messages": [
                      {
                        "content": "write a limerick about AI",
                        "role": "user"
                      }
                    ],
                    "stream": false,
                    "n": 1,
                    "model": "gpt-4o",
                    "temperature": 0.7,
                    "top_p": 1,
                    "presence_penalty": 0,
                    "frequency_penalty": 0,
                    "user": "jordan@humanloop.com"
                  },
                  "session_id": "sesh_YuzHoIpqfcs15KoDmfuGb"
                }
              },
              "codeSamples": []
            },
            {
              "path": "/completion",
              "pathParameters": {},
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 422,
              "codeExamples": {
                "nodeAxios": ""
              },
              "requestBodyV3": {
                "type": "json",
                "value": {
                  "stream": false,
                  "model_config": {
                    "model": "string"
                  }
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "detail": [
                    {
                      "loc": ["string"],
                      "msg": "string",
                      "type": "string"
                    }
                  ]
                }
              },
              "codeSamples": []
            }
          ],
          "description": "Create a completion by providing details of the model configuration in the request.",
          "authed": true
        },
        {
          "environments": [
            {
              "id": "Default",
              "baseUrl": "https://api.humanloop.com/v4"
            }
          ],
          "defaultEnvironment": "Default",
          "urlSlug": "create-deployed-stream",
          "migratedFromUrlSlugs": ["completion-deployed"],
          "method": "POST",
          "id": "create_deployed_stream",
          "originalEndpointId": "endpoint_completions.create_deployed_stream",
          "name": "Completion Deployed",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/completion-deployed"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "request": {
            "contentType": "application/json",
            "type": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Unique project name. If no project exists with this name, a new project will be created.",
                  "key": "project",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "Unique ID of a project to associate to the log. Either this or `project` must be provided.",
                  "key": "project_id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "ID of the session to associate the datapoint.",
                  "key": "session_id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "A unique string identifying the session to associate the datapoint to. Allows you to log multiple datapoints to a session (using an ID kept by your internal systems) by passing the same `session_reference_id` in subsequent log requests. Specify at most one of this or `session_id`.",
                  "key": "session_reference_id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "ID associated to the parent datapoint in a session.",
                  "key": "parent_id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "A unique string identifying the previously-logged parent datapoint in a session. Allows you to log nested datapoints with your internal system IDs by passing the same reference ID as `parent_id` in a prior log request. Specify at most one of this or `parent_id`. Note that this cannot refer to a datapoint being logged in the same request.",
                  "key": "parent_reference_id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "The inputs passed to the prompt template.",
                  "key": "inputs",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "map",
                      "keyType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      },
                      "valueType": {
                        "type": "unknown"
                      }
                    }
                  }
                },
                {
                  "description": "Identifies where the model was called from.",
                  "key": "source",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "Any additional metadata to record.",
                  "key": "metadata",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "map",
                      "keyType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      },
                      "valueType": {
                        "type": "unknown"
                      }
                    }
                  }
                },
                {
                  "description": "Whether the request/response payloads will be stored on Humanloop.",
                  "key": "save",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean"
                      }
                    }
                  }
                },
                {
                  "description": "ID of the source datapoint if this is a log derived from a datapoint in a dataset.",
                  "key": "source_datapoint_id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "API keys required by each provider to make API calls. The API keys provided here are not stored by Humanloop. If not specified here, Humanloop will fall back to the key saved to your organization.",
                  "key": "provider_api_keys",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:ProviderApiKeys"
                    }
                  }
                },
                {
                  "description": "The number of generations.",
                  "key": "num_samples",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "integer",
                        "default": 1
                      }
                    }
                  }
                },
                {
                  "description": "If true, tokens will be sent as data-only server-sent events. If num_samples > 1, samples are streamed back independently.",
                  "key": "stream",
                  "valueType": {
                    "type": "literal",
                    "value": {
                      "type": "booleanLiteral",
                      "value": true
                    }
                  }
                },
                {
                  "description": "End-user ID passed through to provider call.",
                  "key": "user",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "Deprecated field: the seed is instead set as part of the request.config object.",
                  "key": "seed",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  },
                  "availability": "Deprecated"
                },
                {
                  "description": "Whether to return the inputs in the response. If false, the response will contain an empty dictionary under inputs. This is useful for reducing the size of the response. Defaults to true.",
                  "key": "return_inputs",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean"
                      }
                    }
                  }
                },
                {
                  "description": "Include the log probabilities of the top n tokens in the provider_response",
                  "key": "logprobs",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                },
                {
                  "description": "The suffix that comes after a completion of inserted text. Useful for completions that act like inserts.",
                  "key": "suffix",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "The environment name used to create a chat response. If not specified, the default environment will be used.",
                  "key": "environment",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              ]
            }
          },
          "response": {
            "type": {
              "type": "stream",
              "shape": {
                "type": "reference",
                "value": {
                  "type": "id",
                  "value": "type_:CompletionResponse"
                }
              }
            }
          },
          "errors": [],
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "type_:HTTPValidationError"
                }
              },
              "statusCode": 422,
              "description": "Validation Error",
              "examples": []
            }
          ],
          "examples": [
            {
              "path": "/completion-deployed",
              "pathParameters": {},
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200,
              "codeExamples": {
                "nodeAxios": ""
              },
              "requestBodyV3": {
                "type": "json",
                "value": {
                  "stream": true
                }
              },
              "responseBodyV3": {
                "type": "stream",
                "value": [
                  {
                    "project_id": "string",
                    "num_samples": 0,
                    "logprobs": 0,
                    "suffix": "string",
                    "user": "string",
                    "data": [
                      {
                        "id": "string",
                        "index": 0,
                        "output": "string",
                        "raw_output": "string",
                        "inputs": {
                          "string": {}
                        },
                        "finish_reason": "string",
                        "model_config_id": "string",
                        "tool_results": [
                          {
                            "id": "string",
                            "name": "string",
                            "signature": "string",
                            "result": "string"
                          }
                        ]
                      }
                    ],
                    "usage": {
                      "prompt_tokens": 0,
                      "generation_tokens": 0,
                      "total_tokens": 0
                    },
                    "metadata": {
                      "string": {}
                    },
                    "provider_responses": [{}],
                    "provider_request": {
                      "string": {}
                    },
                    "session_id": "string"
                  },
                  {
                    "project_id": "string",
                    "num_samples": 0,
                    "logprobs": 0,
                    "suffix": "string",
                    "user": "string",
                    "data": [
                      {
                        "id": "string",
                        "index": 0,
                        "output": "string",
                        "raw_output": "string",
                        "inputs": {
                          "string": {}
                        },
                        "finish_reason": "string",
                        "model_config_id": "string",
                        "tool_results": [
                          {
                            "id": "string",
                            "name": "string",
                            "signature": "string",
                            "result": "string"
                          }
                        ]
                      }
                    ],
                    "usage": {
                      "prompt_tokens": 0,
                      "generation_tokens": 0,
                      "total_tokens": 0
                    },
                    "metadata": {
                      "string": {}
                    },
                    "provider_responses": [{}],
                    "provider_request": {
                      "string": {}
                    },
                    "session_id": "string"
                  }
                ]
              },
              "codeSamples": []
            },
            {
              "path": "/completion-deployed",
              "pathParameters": {},
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 422,
              "codeExamples": {
                "nodeAxios": ""
              },
              "requestBodyV3": {
                "type": "json",
                "value": {
                  "stream": true
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "detail": [
                    {
                      "loc": ["string"],
                      "msg": "string",
                      "type": "string"
                    }
                  ]
                }
              },
              "codeSamples": []
            }
          ],
          "description": "Create a completion using the project's active deployment.\n\nThe active deployment can be a specific model configuration.",
          "authed": true
        },
        {
          "environments": [
            {
              "id": "Default",
              "baseUrl": "https://api.humanloop.com/v4"
            }
          ],
          "defaultEnvironment": "Default",
          "urlSlug": "create-deployed",
          "migratedFromUrlSlugs": ["completion-deployed"],
          "method": "POST",
          "id": "create_deployed",
          "originalEndpointId": "endpoint_completions.create_deployed",
          "name": "Completion Deployed",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/completion-deployed"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "request": {
            "contentType": "application/json",
            "type": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Unique project name. If no project exists with this name, a new project will be created.",
                  "key": "project",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "Unique ID of a project to associate to the log. Either this or `project` must be provided.",
                  "key": "project_id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "ID of the session to associate the datapoint.",
                  "key": "session_id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "A unique string identifying the session to associate the datapoint to. Allows you to log multiple datapoints to a session (using an ID kept by your internal systems) by passing the same `session_reference_id` in subsequent log requests. Specify at most one of this or `session_id`.",
                  "key": "session_reference_id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "ID associated to the parent datapoint in a session.",
                  "key": "parent_id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "A unique string identifying the previously-logged parent datapoint in a session. Allows you to log nested datapoints with your internal system IDs by passing the same reference ID as `parent_id` in a prior log request. Specify at most one of this or `parent_id`. Note that this cannot refer to a datapoint being logged in the same request.",
                  "key": "parent_reference_id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "The inputs passed to the prompt template.",
                  "key": "inputs",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "map",
                      "keyType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      },
                      "valueType": {
                        "type": "unknown"
                      }
                    }
                  }
                },
                {
                  "description": "Identifies where the model was called from.",
                  "key": "source",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "Any additional metadata to record.",
                  "key": "metadata",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "map",
                      "keyType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      },
                      "valueType": {
                        "type": "unknown"
                      }
                    }
                  }
                },
                {
                  "description": "Whether the request/response payloads will be stored on Humanloop.",
                  "key": "save",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean"
                      }
                    }
                  }
                },
                {
                  "description": "ID of the source datapoint if this is a log derived from a datapoint in a dataset.",
                  "key": "source_datapoint_id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "API keys required by each provider to make API calls. The API keys provided here are not stored by Humanloop. If not specified here, Humanloop will fall back to the key saved to your organization.",
                  "key": "provider_api_keys",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:ProviderApiKeys"
                    }
                  }
                },
                {
                  "description": "The number of generations.",
                  "key": "num_samples",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "integer",
                        "default": 1
                      }
                    }
                  }
                },
                {
                  "description": "If true, tokens will be sent as data-only server-sent events. If num_samples > 1, samples are streamed back independently.",
                  "key": "stream",
                  "valueType": {
                    "type": "literal",
                    "value": {
                      "type": "booleanLiteral",
                      "value": false
                    }
                  }
                },
                {
                  "description": "End-user ID passed through to provider call.",
                  "key": "user",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "Deprecated field: the seed is instead set as part of the request.config object.",
                  "key": "seed",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  },
                  "availability": "Deprecated"
                },
                {
                  "description": "Whether to return the inputs in the response. If false, the response will contain an empty dictionary under inputs. This is useful for reducing the size of the response. Defaults to true.",
                  "key": "return_inputs",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean"
                      }
                    }
                  }
                },
                {
                  "description": "Include the log probabilities of the top n tokens in the provider_response",
                  "key": "logprobs",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                },
                {
                  "description": "The suffix that comes after a completion of inserted text. Useful for completions that act like inserts.",
                  "key": "suffix",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "The environment name used to create a chat response. If not specified, the default environment will be used.",
                  "key": "environment",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              ]
            }
          },
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "type_:CompletionResponse"
              }
            }
          },
          "errors": [],
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "type_:HTTPValidationError"
                }
              },
              "statusCode": 422,
              "description": "Validation Error",
              "examples": []
            }
          ],
          "examples": [
            {
              "path": "/completion-deployed",
              "pathParameters": {},
              "queryParameters": {},
              "headers": {},
              "requestBody": {
                "stream": false
              },
              "responseStatusCode": 200,
              "responseBody": {
                "project_id": "project_id",
                "num_samples": 1,
                "logprobs": 1,
                "suffix": "suffix",
                "user": "user",
                "data": [
                  {
                    "id": "id",
                    "index": 1,
                    "output": "output",
                    "raw_output": "raw_output",
                    "inputs": {
                      "key": "value"
                    },
                    "finish_reason": "finish_reason",
                    "model_config_id": "model_config_id",
                    "tool_results": [
                      {
                        "id": "id",
                        "name": "name",
                        "signature": "signature",
                        "result": "result"
                      }
                    ]
                  }
                ],
                "usage": {
                  "prompt_tokens": 1,
                  "generation_tokens": 1,
                  "total_tokens": 1
                },
                "metadata": {
                  "key": "value"
                },
                "provider_responses": [
                  {
                    "key": "value"
                  }
                ],
                "provider_request": {
                  "key": "value"
                },
                "session_id": "session_id"
              },
              "codeExamples": {
                "nodeAxios": ""
              },
              "requestBodyV3": {
                "type": "json",
                "value": {
                  "stream": false
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "project_id": "project_id",
                  "num_samples": 1,
                  "logprobs": 1,
                  "suffix": "suffix",
                  "user": "user",
                  "data": [
                    {
                      "id": "id",
                      "index": 1,
                      "output": "output",
                      "raw_output": "raw_output",
                      "inputs": {
                        "key": "value"
                      },
                      "finish_reason": "finish_reason",
                      "model_config_id": "model_config_id",
                      "tool_results": [
                        {
                          "id": "id",
                          "name": "name",
                          "signature": "signature",
                          "result": "result"
                        }
                      ]
                    }
                  ],
                  "usage": {
                    "prompt_tokens": 1,
                    "generation_tokens": 1,
                    "total_tokens": 1
                  },
                  "metadata": {
                    "key": "value"
                  },
                  "provider_responses": [
                    {
                      "key": "value"
                    }
                  ],
                  "provider_request": {
                    "key": "value"
                  },
                  "session_id": "session_id"
                }
              },
              "codeSamples": []
            },
            {
              "path": "/completion-deployed",
              "pathParameters": {},
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 422,
              "codeExamples": {
                "nodeAxios": ""
              },
              "requestBodyV3": {
                "type": "json",
                "value": {
                  "stream": false
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "detail": [
                    {
                      "loc": ["string"],
                      "msg": "string",
                      "type": "string"
                    }
                  ]
                }
              },
              "codeSamples": []
            }
          ],
          "description": "Create a completion using the project's active deployment.\n\nThe active deployment can be a specific model configuration.",
          "authed": true
        },
        {
          "environments": [
            {
              "id": "Default",
              "baseUrl": "https://api.humanloop.com/v4"
            }
          ],
          "defaultEnvironment": "Default",
          "urlSlug": "create-config-stream",
          "migratedFromUrlSlugs": ["completion-model-config"],
          "method": "POST",
          "id": "create_config_stream",
          "originalEndpointId": "endpoint_completions.create_config_stream",
          "name": "Completion Model Config",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/completion-model-config"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "request": {
            "contentType": "application/json",
            "type": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Unique project name. If no project exists with this name, a new project will be created.",
                  "key": "project",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "Unique ID of a project to associate to the log. Either this or `project` must be provided.",
                  "key": "project_id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "ID of the session to associate the datapoint.",
                  "key": "session_id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "A unique string identifying the session to associate the datapoint to. Allows you to log multiple datapoints to a session (using an ID kept by your internal systems) by passing the same `session_reference_id` in subsequent log requests. Specify at most one of this or `session_id`.",
                  "key": "session_reference_id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "ID associated to the parent datapoint in a session.",
                  "key": "parent_id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "A unique string identifying the previously-logged parent datapoint in a session. Allows you to log nested datapoints with your internal system IDs by passing the same reference ID as `parent_id` in a prior log request. Specify at most one of this or `parent_id`. Note that this cannot refer to a datapoint being logged in the same request.",
                  "key": "parent_reference_id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "The inputs passed to the prompt template.",
                  "key": "inputs",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "map",
                      "keyType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      },
                      "valueType": {
                        "type": "unknown"
                      }
                    }
                  }
                },
                {
                  "description": "Identifies where the model was called from.",
                  "key": "source",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "Any additional metadata to record.",
                  "key": "metadata",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "map",
                      "keyType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      },
                      "valueType": {
                        "type": "unknown"
                      }
                    }
                  }
                },
                {
                  "description": "Whether the request/response payloads will be stored on Humanloop.",
                  "key": "save",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean"
                      }
                    }
                  }
                },
                {
                  "description": "ID of the source datapoint if this is a log derived from a datapoint in a dataset.",
                  "key": "source_datapoint_id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "API keys required by each provider to make API calls. The API keys provided here are not stored by Humanloop. If not specified here, Humanloop will fall back to the key saved to your organization.",
                  "key": "provider_api_keys",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:ProviderApiKeys"
                    }
                  }
                },
                {
                  "description": "The number of generations.",
                  "key": "num_samples",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "integer",
                        "default": 1
                      }
                    }
                  }
                },
                {
                  "description": "If true, tokens will be sent as data-only server-sent events. If num_samples > 1, samples are streamed back independently.",
                  "key": "stream",
                  "valueType": {
                    "type": "literal",
                    "value": {
                      "type": "booleanLiteral",
                      "value": true
                    }
                  }
                },
                {
                  "description": "End-user ID passed through to provider call.",
                  "key": "user",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "Deprecated field: the seed is instead set as part of the request.config object.",
                  "key": "seed",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  },
                  "availability": "Deprecated"
                },
                {
                  "description": "Whether to return the inputs in the response. If false, the response will contain an empty dictionary under inputs. This is useful for reducing the size of the response. Defaults to true.",
                  "key": "return_inputs",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean"
                      }
                    }
                  }
                },
                {
                  "description": "Include the log probabilities of the top n tokens in the provider_response",
                  "key": "logprobs",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                },
                {
                  "description": "The suffix that comes after a completion of inserted text. Useful for completions that act like inserts.",
                  "key": "suffix",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "Identifies the model configuration used to create a chat response.",
                  "key": "model_config_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              ]
            }
          },
          "response": {
            "type": {
              "type": "stream",
              "shape": {
                "type": "reference",
                "value": {
                  "type": "id",
                  "value": "type_:CompletionResponse"
                }
              }
            }
          },
          "errors": [],
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "type_:HTTPValidationError"
                }
              },
              "statusCode": 422,
              "description": "Validation Error",
              "examples": []
            }
          ],
          "examples": [
            {
              "path": "/completion-model-config",
              "pathParameters": {},
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200,
              "codeExamples": {
                "nodeAxios": ""
              },
              "requestBodyV3": {
                "type": "json",
                "value": {
                  "stream": true,
                  "model_config_id": "string"
                }
              },
              "responseBodyV3": {
                "type": "stream",
                "value": [
                  {
                    "project_id": "string",
                    "num_samples": 0,
                    "logprobs": 0,
                    "suffix": "string",
                    "user": "string",
                    "data": [
                      {
                        "id": "string",
                        "index": 0,
                        "output": "string",
                        "raw_output": "string",
                        "inputs": {
                          "string": {}
                        },
                        "finish_reason": "string",
                        "model_config_id": "string",
                        "tool_results": [
                          {
                            "id": "string",
                            "name": "string",
                            "signature": "string",
                            "result": "string"
                          }
                        ]
                      }
                    ],
                    "usage": {
                      "prompt_tokens": 0,
                      "generation_tokens": 0,
                      "total_tokens": 0
                    },
                    "metadata": {
                      "string": {}
                    },
                    "provider_responses": [{}],
                    "provider_request": {
                      "string": {}
                    },
                    "session_id": "string"
                  },
                  {
                    "project_id": "string",
                    "num_samples": 0,
                    "logprobs": 0,
                    "suffix": "string",
                    "user": "string",
                    "data": [
                      {
                        "id": "string",
                        "index": 0,
                        "output": "string",
                        "raw_output": "string",
                        "inputs": {
                          "string": {}
                        },
                        "finish_reason": "string",
                        "model_config_id": "string",
                        "tool_results": [
                          {
                            "id": "string",
                            "name": "string",
                            "signature": "string",
                            "result": "string"
                          }
                        ]
                      }
                    ],
                    "usage": {
                      "prompt_tokens": 0,
                      "generation_tokens": 0,
                      "total_tokens": 0
                    },
                    "metadata": {
                      "string": {}
                    },
                    "provider_responses": [{}],
                    "provider_request": {
                      "string": {}
                    },
                    "session_id": "string"
                  }
                ]
              },
              "codeSamples": []
            },
            {
              "path": "/completion-model-config",
              "pathParameters": {},
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 422,
              "codeExamples": {
                "nodeAxios": ""
              },
              "requestBodyV3": {
                "type": "json",
                "value": {
                  "stream": true,
                  "model_config_id": "string"
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "detail": [
                    {
                      "loc": ["string"],
                      "msg": "string",
                      "type": "string"
                    }
                  ]
                }
              },
              "codeSamples": []
            }
          ],
          "description": "Create a completion for a specific model configuration.",
          "authed": true
        },
        {
          "environments": [
            {
              "id": "Default",
              "baseUrl": "https://api.humanloop.com/v4"
            }
          ],
          "defaultEnvironment": "Default",
          "urlSlug": "create-config",
          "migratedFromUrlSlugs": ["completion-model-config"],
          "method": "POST",
          "id": "create_config",
          "originalEndpointId": "endpoint_completions.create_config",
          "name": "Completion Model Config",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/completion-model-config"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "request": {
            "contentType": "application/json",
            "type": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Unique project name. If no project exists with this name, a new project will be created.",
                  "key": "project",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "Unique ID of a project to associate to the log. Either this or `project` must be provided.",
                  "key": "project_id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "ID of the session to associate the datapoint.",
                  "key": "session_id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "A unique string identifying the session to associate the datapoint to. Allows you to log multiple datapoints to a session (using an ID kept by your internal systems) by passing the same `session_reference_id` in subsequent log requests. Specify at most one of this or `session_id`.",
                  "key": "session_reference_id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "ID associated to the parent datapoint in a session.",
                  "key": "parent_id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "A unique string identifying the previously-logged parent datapoint in a session. Allows you to log nested datapoints with your internal system IDs by passing the same reference ID as `parent_id` in a prior log request. Specify at most one of this or `parent_id`. Note that this cannot refer to a datapoint being logged in the same request.",
                  "key": "parent_reference_id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "The inputs passed to the prompt template.",
                  "key": "inputs",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "map",
                      "keyType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      },
                      "valueType": {
                        "type": "unknown"
                      }
                    }
                  }
                },
                {
                  "description": "Identifies where the model was called from.",
                  "key": "source",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "Any additional metadata to record.",
                  "key": "metadata",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "map",
                      "keyType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      },
                      "valueType": {
                        "type": "unknown"
                      }
                    }
                  }
                },
                {
                  "description": "Whether the request/response payloads will be stored on Humanloop.",
                  "key": "save",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean"
                      }
                    }
                  }
                },
                {
                  "description": "ID of the source datapoint if this is a log derived from a datapoint in a dataset.",
                  "key": "source_datapoint_id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "API keys required by each provider to make API calls. The API keys provided here are not stored by Humanloop. If not specified here, Humanloop will fall back to the key saved to your organization.",
                  "key": "provider_api_keys",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:ProviderApiKeys"
                    }
                  }
                },
                {
                  "description": "The number of generations.",
                  "key": "num_samples",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "integer",
                        "default": 1
                      }
                    }
                  }
                },
                {
                  "description": "If true, tokens will be sent as data-only server-sent events. If num_samples > 1, samples are streamed back independently.",
                  "key": "stream",
                  "valueType": {
                    "type": "literal",
                    "value": {
                      "type": "booleanLiteral",
                      "value": false
                    }
                  }
                },
                {
                  "description": "End-user ID passed through to provider call.",
                  "key": "user",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "Deprecated field: the seed is instead set as part of the request.config object.",
                  "key": "seed",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  },
                  "availability": "Deprecated"
                },
                {
                  "description": "Whether to return the inputs in the response. If false, the response will contain an empty dictionary under inputs. This is useful for reducing the size of the response. Defaults to true.",
                  "key": "return_inputs",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean"
                      }
                    }
                  }
                },
                {
                  "description": "Include the log probabilities of the top n tokens in the provider_response",
                  "key": "logprobs",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                },
                {
                  "description": "The suffix that comes after a completion of inserted text. Useful for completions that act like inserts.",
                  "key": "suffix",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "Identifies the model configuration used to create a chat response.",
                  "key": "model_config_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              ]
            }
          },
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "type_:CompletionResponse"
              }
            }
          },
          "errors": [],
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "type_:HTTPValidationError"
                }
              },
              "statusCode": 422,
              "description": "Validation Error",
              "examples": []
            }
          ],
          "examples": [
            {
              "path": "/completion-model-config",
              "pathParameters": {},
              "queryParameters": {},
              "headers": {},
              "requestBody": {
                "stream": false,
                "model_config_id": "model_config_id"
              },
              "responseStatusCode": 200,
              "responseBody": {
                "project_id": "project_id",
                "num_samples": 1,
                "logprobs": 1,
                "suffix": "suffix",
                "user": "user",
                "data": [
                  {
                    "id": "id",
                    "index": 1,
                    "output": "output",
                    "raw_output": "raw_output",
                    "inputs": {
                      "key": "value"
                    },
                    "finish_reason": "finish_reason",
                    "model_config_id": "model_config_id",
                    "tool_results": [
                      {
                        "id": "id",
                        "name": "name",
                        "signature": "signature",
                        "result": "result"
                      }
                    ]
                  }
                ],
                "usage": {
                  "prompt_tokens": 1,
                  "generation_tokens": 1,
                  "total_tokens": 1
                },
                "metadata": {
                  "key": "value"
                },
                "provider_responses": [
                  {
                    "key": "value"
                  }
                ],
                "provider_request": {
                  "key": "value"
                },
                "session_id": "session_id"
              },
              "codeExamples": {
                "nodeAxios": ""
              },
              "requestBodyV3": {
                "type": "json",
                "value": {
                  "stream": false,
                  "model_config_id": "model_config_id"
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "project_id": "project_id",
                  "num_samples": 1,
                  "logprobs": 1,
                  "suffix": "suffix",
                  "user": "user",
                  "data": [
                    {
                      "id": "id",
                      "index": 1,
                      "output": "output",
                      "raw_output": "raw_output",
                      "inputs": {
                        "key": "value"
                      },
                      "finish_reason": "finish_reason",
                      "model_config_id": "model_config_id",
                      "tool_results": [
                        {
                          "id": "id",
                          "name": "name",
                          "signature": "signature",
                          "result": "result"
                        }
                      ]
                    }
                  ],
                  "usage": {
                    "prompt_tokens": 1,
                    "generation_tokens": 1,
                    "total_tokens": 1
                  },
                  "metadata": {
                    "key": "value"
                  },
                  "provider_responses": [
                    {
                      "key": "value"
                    }
                  ],
                  "provider_request": {
                    "key": "value"
                  },
                  "session_id": "session_id"
                }
              },
              "codeSamples": []
            },
            {
              "path": "/completion-model-config",
              "pathParameters": {},
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 422,
              "codeExamples": {
                "nodeAxios": ""
              },
              "requestBodyV3": {
                "type": "json",
                "value": {
                  "stream": false,
                  "model_config_id": "string"
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "detail": [
                    {
                      "loc": ["string"],
                      "msg": "string",
                      "type": "string"
                    }
                  ]
                }
              },
              "codeSamples": []
            }
          ],
          "description": "Create a completion for a specific model configuration.",
          "authed": true
        },
        {
          "environments": [
            {
              "id": "Default",
              "baseUrl": "https://api.humanloop.com/v4"
            }
          ],
          "defaultEnvironment": "Default",
          "urlSlug": "create-experiment-stream",
          "method": "POST",
          "id": "create_experiment_stream",
          "originalEndpointId": "endpoint_completions.create_experiment_stream",
          "name": "Create Experiment Stream",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/completion-experiment"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "response": {
            "type": {
              "type": "stream",
              "shape": {
                "type": "reference",
                "value": {
                  "type": "id",
                  "value": "type_:CompletionResponse"
                }
              }
            }
          },
          "errors": [],
          "errorsV2": [],
          "examples": [
            {
              "path": "/completion-experiment",
              "pathParameters": {},
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200,
              "codeExamples": {
                "nodeAxios": ""
              },
              "responseBodyV3": {
                "type": "stream",
                "value": [
                  {
                    "project_id": "string",
                    "num_samples": 0,
                    "logprobs": 0,
                    "suffix": "string",
                    "user": "string",
                    "data": [
                      {
                        "id": "string",
                        "index": 0,
                        "output": "string",
                        "raw_output": "string",
                        "inputs": {
                          "string": {}
                        },
                        "finish_reason": "string",
                        "model_config_id": "string",
                        "tool_results": [
                          {
                            "id": "string",
                            "name": "string",
                            "signature": "string",
                            "result": "string"
                          }
                        ]
                      }
                    ],
                    "usage": {
                      "prompt_tokens": 0,
                      "generation_tokens": 0,
                      "total_tokens": 0
                    },
                    "metadata": {
                      "string": {}
                    },
                    "provider_responses": [{}],
                    "provider_request": {
                      "string": {}
                    },
                    "session_id": "string"
                  },
                  {
                    "project_id": "string",
                    "num_samples": 0,
                    "logprobs": 0,
                    "suffix": "string",
                    "user": "string",
                    "data": [
                      {
                        "id": "string",
                        "index": 0,
                        "output": "string",
                        "raw_output": "string",
                        "inputs": {
                          "string": {}
                        },
                        "finish_reason": "string",
                        "model_config_id": "string",
                        "tool_results": [
                          {
                            "id": "string",
                            "name": "string",
                            "signature": "string",
                            "result": "string"
                          }
                        ]
                      }
                    ],
                    "usage": {
                      "prompt_tokens": 0,
                      "generation_tokens": 0,
                      "total_tokens": 0
                    },
                    "metadata": {
                      "string": {}
                    },
                    "provider_responses": [{}],
                    "provider_request": {
                      "string": {}
                    },
                    "session_id": "string"
                  }
                ]
              },
              "codeSamples": []
            }
          ],
          "authed": false
        },
        {
          "environments": [
            {
              "id": "Default",
              "baseUrl": "https://api.humanloop.com/v4"
            }
          ],
          "defaultEnvironment": "Default",
          "urlSlug": "create-experiment",
          "method": "POST",
          "id": "create_experiment",
          "originalEndpointId": "endpoint_completions.create_experiment",
          "name": "Create Experiment",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/completion-experiment"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "type_:CompletionResponse"
              }
            }
          },
          "errors": [],
          "errorsV2": [],
          "examples": [
            {
              "path": "/completion-experiment",
              "pathParameters": {},
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "project_id": "project_id",
                "num_samples": 1,
                "logprobs": 1,
                "suffix": "suffix",
                "user": "user",
                "data": [
                  {
                    "id": "id",
                    "index": 1,
                    "output": "output",
                    "raw_output": "raw_output",
                    "inputs": {
                      "key": "value"
                    },
                    "finish_reason": "finish_reason",
                    "model_config_id": "model_config_id",
                    "tool_results": [
                      {
                        "id": "id",
                        "name": "name",
                        "signature": "signature",
                        "result": "result"
                      }
                    ]
                  }
                ],
                "usage": {
                  "prompt_tokens": 1,
                  "generation_tokens": 1,
                  "total_tokens": 1
                },
                "metadata": {
                  "key": "value"
                },
                "provider_responses": [
                  {
                    "key": "value"
                  }
                ],
                "provider_request": {
                  "key": "value"
                },
                "session_id": "session_id"
              },
              "codeExamples": {
                "nodeAxios": ""
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "project_id": "project_id",
                  "num_samples": 1,
                  "logprobs": 1,
                  "suffix": "suffix",
                  "user": "user",
                  "data": [
                    {
                      "id": "id",
                      "index": 1,
                      "output": "output",
                      "raw_output": "raw_output",
                      "inputs": {
                        "key": "value"
                      },
                      "finish_reason": "finish_reason",
                      "model_config_id": "model_config_id",
                      "tool_results": [
                        {
                          "id": "id",
                          "name": "name",
                          "signature": "signature",
                          "result": "result"
                        }
                      ]
                    }
                  ],
                  "usage": {
                    "prompt_tokens": 1,
                    "generation_tokens": 1,
                    "total_tokens": 1
                  },
                  "metadata": {
                    "key": "value"
                  },
                  "provider_responses": [
                    {
                      "key": "value"
                    }
                  ],
                  "provider_request": {
                    "key": "value"
                  },
                  "session_id": "session_id"
                }
              },
              "codeSamples": []
            }
          ],
          "authed": false
        }
      ],
      "types": [],
      "subpackages": [],
      "urlSlug": "completions",
      "webhooks": [],
      "websockets": []
    },
    "subpackage_datapoints": {
      "subpackageId": "subpackage_datapoints",
      "name": "datapoints",
      "endpoints": [
        {
          "environments": [
            {
              "id": "Default",
              "baseUrl": "https://api.humanloop.com/v4"
            }
          ],
          "defaultEnvironment": "Default",
          "urlSlug": "get",
          "method": "GET",
          "id": "get",
          "originalEndpointId": "endpoint_datapoints.get",
          "name": "Get",
          "path": {
            "pathParameters": [
              {
                "description": "String ID of datapoint.",
                "key": "id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/datapoints/"
              },
              {
                "type": "pathParameter",
                "value": "id"
              },
              {
                "type": "literal",
                "value": ""
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "type_:DatapointResponse"
              }
            }
          },
          "errors": [],
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "type_:HTTPValidationError"
                }
              },
              "statusCode": 422,
              "description": "Validation Error",
              "examples": []
            }
          ],
          "examples": [
            {
              "path": "/datapoints/id",
              "pathParameters": {
                "id": "id"
              },
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "id": "id",
                "dataset_id": "dataset_id",
                "inputs": {
                  "key": "value"
                },
                "messages": [
                  {
                    "content": "content",
                    "name": "name",
                    "tool_call_id": "tool_call_id",
                    "role": "user",
                    "tool_calls": [
                      {
                        "id": "id",
                        "type": "function",
                        "function": {
                          "name": "name"
                        }
                      }
                    ],
                    "tool_call": {
                      "name": "name"
                    }
                  }
                ],
                "target": {
                  "key": "value"
                }
              },
              "codeExamples": {
                "nodeAxios": ""
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "id": "id",
                  "dataset_id": "dataset_id",
                  "inputs": {
                    "key": "value"
                  },
                  "messages": [
                    {
                      "content": "content",
                      "name": "name",
                      "tool_call_id": "tool_call_id",
                      "role": "user",
                      "tool_calls": [
                        {
                          "id": "id",
                          "type": "function",
                          "function": {
                            "name": "name"
                          }
                        }
                      ],
                      "tool_call": {
                        "name": "name"
                      }
                    }
                  ],
                  "target": {
                    "key": "value"
                  }
                }
              },
              "codeSamples": []
            },
            {
              "path": "/datapoints/:id",
              "pathParameters": {
                "id": ":id"
              },
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 422,
              "codeExamples": {
                "nodeAxios": ""
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "detail": [
                    {
                      "loc": ["string"],
                      "msg": "string",
                      "type": "string"
                    }
                  ]
                }
              },
              "codeSamples": []
            }
          ],
          "description": "Get a datapoint by ID.",
          "authed": true
        },
        {
          "environments": [
            {
              "id": "Default",
              "baseUrl": "https://api.humanloop.com/v4"
            }
          ],
          "availability": "Deprecated",
          "defaultEnvironment": "Default",
          "urlSlug": "update",
          "method": "PATCH",
          "id": "update",
          "originalEndpointId": "endpoint_datapoints.update",
          "name": "Update",
          "path": {
            "pathParameters": [
              {
                "description": "String ID of datapoint.",
                "key": "id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/datapoints/"
              },
              {
                "type": "pathParameter",
                "value": "id"
              },
              {
                "type": "literal",
                "value": ""
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "type_:DatapointResponse"
              }
            }
          },
          "errors": [],
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "type_:HTTPValidationError"
                }
              },
              "statusCode": 422,
              "description": "Validation Error",
              "examples": []
            }
          ],
          "examples": [
            {
              "path": "/datapoints/id",
              "pathParameters": {
                "id": "id"
              },
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "id": "id",
                "dataset_id": "dataset_id",
                "inputs": {
                  "key": "value"
                },
                "messages": [
                  {
                    "content": "content",
                    "name": "name",
                    "tool_call_id": "tool_call_id",
                    "role": "user",
                    "tool_calls": [
                      {
                        "id": "id",
                        "type": "function",
                        "function": {
                          "name": "name"
                        }
                      }
                    ],
                    "tool_call": {
                      "name": "name"
                    }
                  }
                ],
                "target": {
                  "key": "value"
                }
              },
              "codeExamples": {
                "nodeAxios": ""
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "id": "id",
                  "dataset_id": "dataset_id",
                  "inputs": {
                    "key": "value"
                  },
                  "messages": [
                    {
                      "content": "content",
                      "name": "name",
                      "tool_call_id": "tool_call_id",
                      "role": "user",
                      "tool_calls": [
                        {
                          "id": "id",
                          "type": "function",
                          "function": {
                            "name": "name"
                          }
                        }
                      ],
                      "tool_call": {
                        "name": "name"
                      }
                    }
                  ],
                  "target": {
                    "key": "value"
                  }
                }
              },
              "codeSamples": []
            },
            {
              "path": "/datapoints/:id",
              "pathParameters": {
                "id": ":id"
              },
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 422,
              "codeExamples": {
                "nodeAxios": ""
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "detail": [
                    {
                      "loc": ["string"],
                      "msg": "string",
                      "type": "string"
                    }
                  ]
                }
              },
              "codeSamples": []
            }
          ],
          "description": "Edit the input, messages and criteria fields of a datapoint.\n\nWARNING: This endpoint has been decommissioned and no longer works. Please use the v5 datasets API instead.",
          "authed": true
        },
        {
          "environments": [
            {
              "id": "Default",
              "baseUrl": "https://api.humanloop.com/v4"
            }
          ],
          "availability": "Deprecated",
          "defaultEnvironment": "Default",
          "urlSlug": "delete",
          "method": "DELETE",
          "id": "delete",
          "originalEndpointId": "endpoint_datapoints.delete",
          "name": "Delete",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/datapoints"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "errors": [],
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "type_:HTTPValidationError"
                }
              },
              "statusCode": 422,
              "description": "Validation Error",
              "examples": []
            }
          ],
          "examples": [
            {
              "path": "/datapoints",
              "pathParameters": {},
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 204,
              "codeExamples": {
                "nodeAxios": ""
              },
              "codeSamples": []
            },
            {
              "path": "/datapoints",
              "pathParameters": {},
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 422,
              "codeExamples": {
                "nodeAxios": ""
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "detail": [
                    {
                      "loc": ["string"],
                      "msg": "string",
                      "type": "string"
                    }
                  ]
                }
              },
              "codeSamples": []
            }
          ],
          "description": "Delete a list of datapoints by their IDs.\n\nWARNING: This endpoint has been decommissioned and no longer works. Please use the v5 datasets API instead.",
          "authed": true
        }
      ],
      "types": [],
      "subpackages": [],
      "urlSlug": "datapoints",
      "webhooks": [],
      "websockets": []
    },
    "subpackage_projects": {
      "subpackageId": "subpackage_projects",
      "name": "projects",
      "endpoints": [
        {
          "environments": [
            {
              "id": "Default",
              "baseUrl": "https://api.humanloop.com/v4"
            }
          ],
          "availability": "Deprecated",
          "defaultEnvironment": "Default",
          "urlSlug": "list-datasets",
          "migratedFromUrlSlugs": ["list-for-project"],
          "method": "GET",
          "id": "list_datasets",
          "originalEndpointId": "endpoint_projects.list_datasets",
          "name": "List For Project",
          "path": {
            "pathParameters": [
              {
                "key": "project_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/projects/"
              },
              {
                "type": "pathParameter",
                "value": "project_id"
              },
              {
                "type": "literal",
                "value": "/datasets"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "list",
                "itemType": {
                  "type": "id",
                  "value": "type_:DatasetResponse"
                }
              }
            }
          },
          "errors": [],
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "type_:HTTPValidationError"
                }
              },
              "statusCode": 422,
              "description": "Validation Error",
              "examples": []
            }
          ],
          "examples": [
            {
              "path": "/projects/project_id/datasets",
              "pathParameters": {
                "project_id": "project_id"
              },
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": [
                {
                  "id": "id",
                  "project_id": "project_id",
                  "name": "name",
                  "description": "description",
                  "datapoint_count": 1,
                  "created_at": "2024-01-15T09:30:00Z",
                  "updated_at": "2024-01-15T09:30:00Z"
                }
              ],
              "codeExamples": {
                "nodeAxios": ""
              },
              "responseBodyV3": {
                "type": "json",
                "value": [
                  {
                    "id": "id",
                    "project_id": "project_id",
                    "name": "name",
                    "description": "description",
                    "datapoint_count": 1,
                    "created_at": "2024-01-15T09:30:00Z",
                    "updated_at": "2024-01-15T09:30:00Z"
                  }
                ]
              },
              "codeSamples": []
            },
            {
              "path": "/projects/:project_id/datasets",
              "pathParameters": {
                "project_id": ":project_id"
              },
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 422,
              "codeExamples": {
                "nodeAxios": ""
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "detail": [
                    {
                      "loc": ["string"],
                      "msg": "string",
                      "type": "string"
                    }
                  ]
                }
              },
              "codeSamples": []
            }
          ],
          "description": "Get all datasets for a project.",
          "authed": true
        },
        {
          "environments": [
            {
              "id": "Default",
              "baseUrl": "https://api.humanloop.com/v4"
            }
          ],
          "availability": "Deprecated",
          "defaultEnvironment": "Default",
          "urlSlug": "list-evaluations",
          "migratedFromUrlSlugs": ["list-for-project"],
          "method": "GET",
          "id": "list_evaluations",
          "originalEndpointId": "endpoint_projects.list_evaluations",
          "name": "List For Project",
          "path": {
            "pathParameters": [
              {
                "description": "String ID of project. Starts with `pr_`.",
                "key": "project_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/projects/"
              },
              {
                "type": "pathParameter",
                "value": "project_id"
              },
              {
                "type": "literal",
                "value": "/evaluations"
              }
            ]
          },
          "queryParameters": [
            {
              "description": "String ID of evaluatee version to return. If not defined, the first evaluatee will be returned. Starts with `evv_`.",
              "key": "evaluatee_id",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "description": "Whether to include evaluator aggregates in the response.",
              "key": "evaluator_aggregates",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "boolean"
                  }
                }
              }
            }
          ],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "list",
                "itemType": {
                  "type": "id",
                  "value": "type_:EvaluationResponse"
                }
              }
            }
          },
          "errors": [],
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "type_:HTTPValidationError"
                }
              },
              "statusCode": 422,
              "description": "Validation Error",
              "examples": []
            }
          ],
          "examples": [
            {
              "path": "/projects/project_id/evaluations",
              "pathParameters": {
                "project_id": "project_id"
              },
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": [
                {
                  "id": "id",
                  "status": "pending",
                  "config": {
                    "type": "generic",
                    "id": "config",
                    "other": {
                      "key": "value"
                    },
                    "created_by": {
                      "id": "id",
                      "email_address": "email_address",
                      "verified": true
                    },
                    "status": "config",
                    "name": "config",
                    "description": "config"
                  },
                  "created_at": "2024-01-15T09:30:00Z",
                  "updated_at": "2024-01-15T09:30:00Z",
                  "evaluators": [
                    {
                      "name": "name",
                      "description": "description",
                      "arguments_type": "target_free",
                      "return_type": "boolean",
                      "type": "python",
                      "id": "id",
                      "created_at": "2024-01-15T09:30:00Z",
                      "updated_at": "2024-01-15T09:30:00Z"
                    }
                  ],
                  "dataset": {
                    "id": "id",
                    "project_id": "project_id",
                    "name": "name",
                    "description": "description",
                    "datapoint_count": 1,
                    "created_at": "2024-01-15T09:30:00Z",
                    "updated_at": "2024-01-15T09:30:00Z"
                  },
                  "dataset_version_id": "dataset_version_id",
                  "dataset_snapshot": {
                    "id": "id",
                    "project_id": "project_id",
                    "name": "name",
                    "description": "description",
                    "datapoint_count": 1,
                    "created_at": "2024-01-15T09:30:00Z",
                    "updated_at": "2024-01-15T09:30:00Z"
                  },
                  "evaluator_aggregates": [
                    {
                      "model_config_id": "model_config_id",
                      "evaluator_id": "evaluator_id",
                      "evaluator_version_id": "evaluator_version_id"
                    }
                  ]
                }
              ],
              "codeExamples": {
                "nodeAxios": ""
              },
              "responseBodyV3": {
                "type": "json",
                "value": [
                  {
                    "id": "id",
                    "status": "pending",
                    "config": {
                      "type": "generic",
                      "id": "config",
                      "other": {
                        "key": "value"
                      },
                      "created_by": {
                        "id": "id",
                        "email_address": "email_address",
                        "verified": true
                      },
                      "status": "config",
                      "name": "config",
                      "description": "config"
                    },
                    "created_at": "2024-01-15T09:30:00Z",
                    "updated_at": "2024-01-15T09:30:00Z",
                    "evaluators": [
                      {
                        "name": "name",
                        "description": "description",
                        "arguments_type": "target_free",
                        "return_type": "boolean",
                        "type": "python",
                        "id": "id",
                        "created_at": "2024-01-15T09:30:00Z",
                        "updated_at": "2024-01-15T09:30:00Z"
                      }
                    ],
                    "dataset": {
                      "id": "id",
                      "project_id": "project_id",
                      "name": "name",
                      "description": "description",
                      "datapoint_count": 1,
                      "created_at": "2024-01-15T09:30:00Z",
                      "updated_at": "2024-01-15T09:30:00Z"
                    },
                    "dataset_version_id": "dataset_version_id",
                    "dataset_snapshot": {
                      "id": "id",
                      "project_id": "project_id",
                      "name": "name",
                      "description": "description",
                      "datapoint_count": 1,
                      "created_at": "2024-01-15T09:30:00Z",
                      "updated_at": "2024-01-15T09:30:00Z"
                    },
                    "evaluator_aggregates": [
                      {
                        "model_config_id": "model_config_id",
                        "evaluator_id": "evaluator_id",
                        "evaluator_version_id": "evaluator_version_id"
                      }
                    ]
                  }
                ]
              },
              "codeSamples": []
            },
            {
              "path": "/projects/:project_id/evaluations",
              "pathParameters": {
                "project_id": ":project_id"
              },
              "queryParameters": {
                "evaluatee_id": "string",
                "evaluator_aggregates": true
              },
              "headers": {},
              "responseStatusCode": 422,
              "codeExamples": {
                "nodeAxios": ""
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "detail": [
                    {
                      "loc": ["string"],
                      "msg": "string",
                      "type": "string"
                    }
                  ]
                }
              },
              "codeSamples": []
            }
          ],
          "description": "Get all the evaluations associated with your project.\n\nDeprecated: This is a legacy unpaginated endpoint. Use `/evaluations` instead, with appropriate\nsorting, filtering and pagination options.",
          "authed": true
        },
        {
          "environments": [
            {
              "id": "Default",
              "baseUrl": "https://api.humanloop.com/v4"
            }
          ],
          "defaultEnvironment": "Default",
          "urlSlug": "list",
          "method": "GET",
          "id": "list",
          "originalEndpointId": "endpoint_projects.list",
          "name": "List",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/projects"
              }
            ]
          },
          "queryParameters": [
            {
              "description": "Page offset for pagination.",
              "key": "page",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              }
            },
            {
              "description": "Page size for pagination. Number of projects to fetch.",
              "key": "size",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              }
            },
            {
              "description": "Case-insensitive filter for project name.",
              "key": "filter",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "description": "Case-insensitive filter for users in the project. This filter matches against both email address and name of users.",
              "key": "user_filter",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "description": "Field to sort projects by",
              "key": "sort_by",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "type_:ProjectSortBy"
                }
              }
            },
            {
              "description": "Direction to sort by.",
              "key": "order",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "type_:SortOrder"
                }
              }
            }
          ],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "type_:PaginatedDataProjectResponse"
              }
            }
          },
          "errors": [],
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "type_:HTTPValidationError"
                }
              },
              "statusCode": 422,
              "description": "Validation Error",
              "examples": []
            }
          ],
          "examples": [
            {
              "path": "/projects",
              "pathParameters": {},
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "records": [
                  {
                    "id": "id",
                    "name": "name",
                    "active_config": {
                      "project_id": "project_id",
                      "project_name": "project_name",
                      "created_at": "2024-01-15T09:30:00Z",
                      "updated_at": "2024-01-15T09:30:00Z",
                      "last_used": "2024-01-15T09:30:00Z",
                      "config": {
                        "type": "generic",
                        "id": "config",
                        "status": "config",
                        "name": "config"
                      }
                    },
                    "users": [
                      {
                        "id": "id",
                        "email_address": "email_address"
                      }
                    ],
                    "data_count": 1,
                    "feedback_types": [
                      {
                        "type": "rating"
                      }
                    ],
                    "team_id": "team_id",
                    "config_type": "generic",
                    "active_evaluators": [
                      {
                        "name": "name",
                        "description": "description",
                        "arguments_type": "target_free",
                        "return_type": "boolean",
                        "type": "python",
                        "id": "id",
                        "created_at": "2024-01-15T09:30:00Z",
                        "updated_at": "2024-01-15T09:30:00Z"
                      }
                    ],
                    "directory_id": "directory_id",
                    "created_at": "2024-01-15T09:30:00Z",
                    "updated_at": "2024-01-15T09:30:00Z"
                  }
                ],
                "page": 1,
                "size": 1,
                "total": 1
              },
              "codeExamples": {
                "nodeAxios": ""
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "records": [
                    {
                      "id": "id",
                      "name": "name",
                      "active_config": {
                        "project_id": "project_id",
                        "project_name": "project_name",
                        "created_at": "2024-01-15T09:30:00Z",
                        "updated_at": "2024-01-15T09:30:00Z",
                        "last_used": "2024-01-15T09:30:00Z",
                        "config": {
                          "type": "generic",
                          "id": "config",
                          "status": "config",
                          "name": "config"
                        }
                      },
                      "users": [
                        {
                          "id": "id",
                          "email_address": "email_address"
                        }
                      ],
                      "data_count": 1,
                      "feedback_types": [
                        {
                          "type": "rating"
                        }
                      ],
                      "team_id": "team_id",
                      "config_type": "generic",
                      "active_evaluators": [
                        {
                          "name": "name",
                          "description": "description",
                          "arguments_type": "target_free",
                          "return_type": "boolean",
                          "type": "python",
                          "id": "id",
                          "created_at": "2024-01-15T09:30:00Z",
                          "updated_at": "2024-01-15T09:30:00Z"
                        }
                      ],
                      "directory_id": "directory_id",
                      "created_at": "2024-01-15T09:30:00Z",
                      "updated_at": "2024-01-15T09:30:00Z"
                    }
                  ],
                  "page": 1,
                  "size": 1,
                  "total": 1
                }
              },
              "codeSamples": []
            },
            {
              "path": "/projects",
              "pathParameters": {},
              "queryParameters": {
                "page": 0,
                "size": 0
              },
              "headers": {},
              "responseStatusCode": 422,
              "codeExamples": {
                "nodeAxios": ""
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "detail": [
                    {
                      "loc": ["string"],
                      "msg": "string",
                      "type": "string"
                    }
                  ]
                }
              },
              "codeSamples": []
            }
          ],
          "description": "Get a paginated list of files.",
          "authed": true
        },
        {
          "environments": [
            {
              "id": "Default",
              "baseUrl": "https://api.humanloop.com/v4"
            }
          ],
          "defaultEnvironment": "Default",
          "urlSlug": "create",
          "method": "POST",
          "id": "create",
          "originalEndpointId": "endpoint_projects.create",
          "name": "Create",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/projects"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "request": {
            "contentType": "application/json",
            "type": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Unique project name.",
                  "key": "name",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "ID of directory to assign project to. Starts with `dir_`. If not provided, the project will be created in the root directory.",
                  "key": "directory_id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              ]
            }
          },
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "type_:ProjectResponse"
              }
            }
          },
          "errors": [],
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "type_:HTTPValidationError"
                }
              },
              "statusCode": 422,
              "description": "Validation Error",
              "examples": []
            }
          ],
          "examples": [
            {
              "path": "/projects",
              "pathParameters": {},
              "queryParameters": {},
              "headers": {},
              "requestBody": {
                "name": "name"
              },
              "responseStatusCode": 200,
              "responseBody": {
                "id": "id",
                "name": "name",
                "active_config": {
                  "project_id": "project_id",
                  "project_name": "project_name",
                  "created_at": "2024-01-15T09:30:00Z",
                  "updated_at": "2024-01-15T09:30:00Z",
                  "last_used": "2024-01-15T09:30:00Z",
                  "num_datapoints": 1,
                  "evaluation_aggregates": [
                    {
                      "model_config_id": "model_config_id",
                      "evaluator_id": "evaluator_id",
                      "evaluator_version_id": "evaluator_version_id"
                    }
                  ],
                  "config": {
                    "type": "generic",
                    "id": "config",
                    "other": {
                      "key": "value"
                    },
                    "created_by": {
                      "id": "id",
                      "email_address": "email_address",
                      "verified": true
                    },
                    "status": "config",
                    "name": "config",
                    "description": "config"
                  }
                },
                "users": [
                  {
                    "id": "id",
                    "email_address": "email_address",
                    "full_name": "full_name"
                  }
                ],
                "data_count": 1,
                "feedback_types": [
                  {
                    "type": "rating",
                    "values": [
                      {
                        "value": "value",
                        "sentiment": "positive"
                      }
                    ]
                  }
                ],
                "team_id": "team_id",
                "config_type": "generic",
                "active_evaluators": [
                  {
                    "name": "name",
                    "description": "description",
                    "arguments_type": "target_free",
                    "return_type": "boolean",
                    "code": "code",
                    "model_config": {
                      "id": "id",
                      "model": "model"
                    },
                    "type": "python",
                    "id": "id",
                    "created_at": "2024-01-15T09:30:00Z",
                    "updated_at": "2024-01-15T09:30:00Z"
                  }
                ],
                "directory_id": "directory_id",
                "created_at": "2024-01-15T09:30:00Z",
                "updated_at": "2024-01-15T09:30:00Z"
              },
              "codeExamples": {
                "nodeAxios": ""
              },
              "requestBodyV3": {
                "type": "json",
                "value": {
                  "name": "name"
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "id": "id",
                  "name": "name",
                  "active_config": {
                    "project_id": "project_id",
                    "project_name": "project_name",
                    "created_at": "2024-01-15T09:30:00Z",
                    "updated_at": "2024-01-15T09:30:00Z",
                    "last_used": "2024-01-15T09:30:00Z",
                    "num_datapoints": 1,
                    "evaluation_aggregates": [
                      {
                        "model_config_id": "model_config_id",
                        "evaluator_id": "evaluator_id",
                        "evaluator_version_id": "evaluator_version_id"
                      }
                    ],
                    "config": {
                      "type": "generic",
                      "id": "config",
                      "other": {
                        "key": "value"
                      },
                      "created_by": {
                        "id": "id",
                        "email_address": "email_address",
                        "verified": true
                      },
                      "status": "config",
                      "name": "config",
                      "description": "config"
                    }
                  },
                  "users": [
                    {
                      "id": "id",
                      "email_address": "email_address",
                      "full_name": "full_name"
                    }
                  ],
                  "data_count": 1,
                  "feedback_types": [
                    {
                      "type": "rating",
                      "values": [
                        {
                          "value": "value",
                          "sentiment": "positive"
                        }
                      ]
                    }
                  ],
                  "team_id": "team_id",
                  "config_type": "generic",
                  "active_evaluators": [
                    {
                      "name": "name",
                      "description": "description",
                      "arguments_type": "target_free",
                      "return_type": "boolean",
                      "code": "code",
                      "model_config": {
                        "id": "id",
                        "model": "model"
                      },
                      "type": "python",
                      "id": "id",
                      "created_at": "2024-01-15T09:30:00Z",
                      "updated_at": "2024-01-15T09:30:00Z"
                    }
                  ],
                  "directory_id": "directory_id",
                  "created_at": "2024-01-15T09:30:00Z",
                  "updated_at": "2024-01-15T09:30:00Z"
                }
              },
              "codeSamples": []
            },
            {
              "path": "/projects",
              "pathParameters": {},
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 422,
              "codeExamples": {
                "nodeAxios": ""
              },
              "requestBodyV3": {
                "type": "json",
                "value": {
                  "name": "string"
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "detail": [
                    {
                      "loc": ["string"],
                      "msg": "string",
                      "type": "string"
                    }
                  ]
                }
              },
              "codeSamples": []
            }
          ],
          "description": "Create a new project.",
          "authed": true
        },
        {
          "environments": [
            {
              "id": "Default",
              "baseUrl": "https://api.humanloop.com/v4"
            }
          ],
          "defaultEnvironment": "Default",
          "urlSlug": "get",
          "method": "GET",
          "id": "get",
          "originalEndpointId": "endpoint_projects.get",
          "name": "Get",
          "path": {
            "pathParameters": [
              {
                "description": "String ID of project. Starts with `pr_`.",
                "key": "id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/projects/"
              },
              {
                "type": "pathParameter",
                "value": "id"
              },
              {
                "type": "literal",
                "value": ""
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "type_:ProjectResponse"
              }
            }
          },
          "errors": [],
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "type_:HTTPValidationError"
                }
              },
              "statusCode": 422,
              "description": "Validation Error",
              "examples": []
            }
          ],
          "examples": [
            {
              "path": "/projects/id",
              "pathParameters": {
                "id": "id"
              },
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "id": "id",
                "name": "name",
                "active_config": {
                  "project_id": "project_id",
                  "project_name": "project_name",
                  "created_at": "2024-01-15T09:30:00Z",
                  "updated_at": "2024-01-15T09:30:00Z",
                  "last_used": "2024-01-15T09:30:00Z",
                  "num_datapoints": 1,
                  "evaluation_aggregates": [
                    {
                      "model_config_id": "model_config_id",
                      "evaluator_id": "evaluator_id",
                      "evaluator_version_id": "evaluator_version_id"
                    }
                  ],
                  "config": {
                    "type": "generic",
                    "id": "config",
                    "other": {
                      "key": "value"
                    },
                    "created_by": {
                      "id": "id",
                      "email_address": "email_address",
                      "verified": true
                    },
                    "status": "config",
                    "name": "config",
                    "description": "config"
                  }
                },
                "users": [
                  {
                    "id": "id",
                    "email_address": "email_address",
                    "full_name": "full_name"
                  }
                ],
                "data_count": 1,
                "feedback_types": [
                  {
                    "type": "rating",
                    "values": [
                      {
                        "value": "value",
                        "sentiment": "positive"
                      }
                    ]
                  }
                ],
                "team_id": "team_id",
                "config_type": "generic",
                "active_evaluators": [
                  {
                    "name": "name",
                    "description": "description",
                    "arguments_type": "target_free",
                    "return_type": "boolean",
                    "code": "code",
                    "model_config": {
                      "id": "id",
                      "model": "model"
                    },
                    "type": "python",
                    "id": "id",
                    "created_at": "2024-01-15T09:30:00Z",
                    "updated_at": "2024-01-15T09:30:00Z"
                  }
                ],
                "directory_id": "directory_id",
                "created_at": "2024-01-15T09:30:00Z",
                "updated_at": "2024-01-15T09:30:00Z"
              },
              "codeExamples": {
                "nodeAxios": ""
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "id": "id",
                  "name": "name",
                  "active_config": {
                    "project_id": "project_id",
                    "project_name": "project_name",
                    "created_at": "2024-01-15T09:30:00Z",
                    "updated_at": "2024-01-15T09:30:00Z",
                    "last_used": "2024-01-15T09:30:00Z",
                    "num_datapoints": 1,
                    "evaluation_aggregates": [
                      {
                        "model_config_id": "model_config_id",
                        "evaluator_id": "evaluator_id",
                        "evaluator_version_id": "evaluator_version_id"
                      }
                    ],
                    "config": {
                      "type": "generic",
                      "id": "config",
                      "other": {
                        "key": "value"
                      },
                      "created_by": {
                        "id": "id",
                        "email_address": "email_address",
                        "verified": true
                      },
                      "status": "config",
                      "name": "config",
                      "description": "config"
                    }
                  },
                  "users": [
                    {
                      "id": "id",
                      "email_address": "email_address",
                      "full_name": "full_name"
                    }
                  ],
                  "data_count": 1,
                  "feedback_types": [
                    {
                      "type": "rating",
                      "values": [
                        {
                          "value": "value",
                          "sentiment": "positive"
                        }
                      ]
                    }
                  ],
                  "team_id": "team_id",
                  "config_type": "generic",
                  "active_evaluators": [
                    {
                      "name": "name",
                      "description": "description",
                      "arguments_type": "target_free",
                      "return_type": "boolean",
                      "code": "code",
                      "model_config": {
                        "id": "id",
                        "model": "model"
                      },
                      "type": "python",
                      "id": "id",
                      "created_at": "2024-01-15T09:30:00Z",
                      "updated_at": "2024-01-15T09:30:00Z"
                    }
                  ],
                  "directory_id": "directory_id",
                  "created_at": "2024-01-15T09:30:00Z",
                  "updated_at": "2024-01-15T09:30:00Z"
                }
              },
              "codeSamples": []
            },
            {
              "path": "/projects/:id",
              "pathParameters": {
                "id": ":id"
              },
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 422,
              "codeExamples": {
                "nodeAxios": ""
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "detail": [
                    {
                      "loc": ["string"],
                      "msg": "string",
                      "type": "string"
                    }
                  ]
                }
              },
              "codeSamples": []
            }
          ],
          "description": "Get a specific project.",
          "authed": true
        },
        {
          "environments": [
            {
              "id": "Default",
              "baseUrl": "https://api.humanloop.com/v4"
            }
          ],
          "defaultEnvironment": "Default",
          "urlSlug": "delete",
          "method": "DELETE",
          "id": "delete",
          "originalEndpointId": "endpoint_projects.delete",
          "name": "Delete",
          "path": {
            "pathParameters": [
              {
                "description": "String ID of project. Starts with `pr_`.",
                "key": "id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/projects/"
              },
              {
                "type": "pathParameter",
                "value": "id"
              },
              {
                "type": "literal",
                "value": ""
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "errors": [],
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "type_:HTTPValidationError"
                }
              },
              "statusCode": 422,
              "description": "Validation Error",
              "examples": []
            }
          ],
          "examples": [
            {
              "path": "/projects/id",
              "pathParameters": {
                "id": "id"
              },
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 204,
              "codeExamples": {
                "nodeAxios": ""
              },
              "codeSamples": []
            },
            {
              "path": "/projects/:id",
              "pathParameters": {
                "id": ":id"
              },
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 422,
              "codeExamples": {
                "nodeAxios": ""
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "detail": [
                    {
                      "loc": ["string"],
                      "msg": "string",
                      "type": "string"
                    }
                  ]
                }
              },
              "codeSamples": []
            }
          ],
          "description": "Delete a specific file.",
          "authed": true
        },
        {
          "environments": [
            {
              "id": "Default",
              "baseUrl": "https://api.humanloop.com/v4"
            }
          ],
          "defaultEnvironment": "Default",
          "urlSlug": "update",
          "method": "PATCH",
          "id": "update",
          "originalEndpointId": "endpoint_projects.update",
          "name": "Update",
          "path": {
            "pathParameters": [
              {
                "description": "String ID of project. Starts with `pr_`.",
                "key": "id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/projects/"
              },
              {
                "type": "pathParameter",
                "value": "id"
              },
              {
                "type": "literal",
                "value": ""
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "request": {
            "contentType": "application/json",
            "type": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The new unique project name. Caution, if you are using the project name as the unique identifier in your API calls, changing the name will break the calls.",
                  "key": "name",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "ID for a config to set as the project's active deployment. Starts with 'config_'. ",
                  "key": "active_config_id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "ID of directory to assign project to. Starts with `dir_`.",
                  "key": "directory_id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              ]
            }
          },
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "type_:ProjectResponse"
              }
            }
          },
          "errors": [],
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "type_:HTTPValidationError"
                }
              },
              "statusCode": 422,
              "description": "Validation Error",
              "examples": []
            }
          ],
          "examples": [
            {
              "path": "/projects/id",
              "pathParameters": {
                "id": "id"
              },
              "queryParameters": {},
              "headers": {},
              "requestBody": {},
              "responseStatusCode": 200,
              "responseBody": {
                "id": "id",
                "name": "name",
                "active_config": {
                  "project_id": "project_id",
                  "project_name": "project_name",
                  "created_at": "2024-01-15T09:30:00Z",
                  "updated_at": "2024-01-15T09:30:00Z",
                  "last_used": "2024-01-15T09:30:00Z",
                  "num_datapoints": 1,
                  "evaluation_aggregates": [
                    {
                      "model_config_id": "model_config_id",
                      "evaluator_id": "evaluator_id",
                      "evaluator_version_id": "evaluator_version_id"
                    }
                  ],
                  "config": {
                    "type": "generic",
                    "id": "config",
                    "other": {
                      "key": "value"
                    },
                    "created_by": {
                      "id": "id",
                      "email_address": "email_address",
                      "verified": true
                    },
                    "status": "config",
                    "name": "config",
                    "description": "config"
                  }
                },
                "users": [
                  {
                    "id": "id",
                    "email_address": "email_address",
                    "full_name": "full_name"
                  }
                ],
                "data_count": 1,
                "feedback_types": [
                  {
                    "type": "rating",
                    "values": [
                      {
                        "value": "value",
                        "sentiment": "positive"
                      }
                    ]
                  }
                ],
                "team_id": "team_id",
                "config_type": "generic",
                "active_evaluators": [
                  {
                    "name": "name",
                    "description": "description",
                    "arguments_type": "target_free",
                    "return_type": "boolean",
                    "code": "code",
                    "model_config": {
                      "id": "id",
                      "model": "model"
                    },
                    "type": "python",
                    "id": "id",
                    "created_at": "2024-01-15T09:30:00Z",
                    "updated_at": "2024-01-15T09:30:00Z"
                  }
                ],
                "directory_id": "directory_id",
                "created_at": "2024-01-15T09:30:00Z",
                "updated_at": "2024-01-15T09:30:00Z"
              },
              "codeExamples": {
                "nodeAxios": ""
              },
              "requestBodyV3": {
                "type": "json",
                "value": {}
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "id": "id",
                  "name": "name",
                  "active_config": {
                    "project_id": "project_id",
                    "project_name": "project_name",
                    "created_at": "2024-01-15T09:30:00Z",
                    "updated_at": "2024-01-15T09:30:00Z",
                    "last_used": "2024-01-15T09:30:00Z",
                    "num_datapoints": 1,
                    "evaluation_aggregates": [
                      {
                        "model_config_id": "model_config_id",
                        "evaluator_id": "evaluator_id",
                        "evaluator_version_id": "evaluator_version_id"
                      }
                    ],
                    "config": {
                      "type": "generic",
                      "id": "config",
                      "other": {
                        "key": "value"
                      },
                      "created_by": {
                        "id": "id",
                        "email_address": "email_address",
                        "verified": true
                      },
                      "status": "config",
                      "name": "config",
                      "description": "config"
                    }
                  },
                  "users": [
                    {
                      "id": "id",
                      "email_address": "email_address",
                      "full_name": "full_name"
                    }
                  ],
                  "data_count": 1,
                  "feedback_types": [
                    {
                      "type": "rating",
                      "values": [
                        {
                          "value": "value",
                          "sentiment": "positive"
                        }
                      ]
                    }
                  ],
                  "team_id": "team_id",
                  "config_type": "generic",
                  "active_evaluators": [
                    {
                      "name": "name",
                      "description": "description",
                      "arguments_type": "target_free",
                      "return_type": "boolean",
                      "code": "code",
                      "model_config": {
                        "id": "id",
                        "model": "model"
                      },
                      "type": "python",
                      "id": "id",
                      "created_at": "2024-01-15T09:30:00Z",
                      "updated_at": "2024-01-15T09:30:00Z"
                    }
                  ],
                  "directory_id": "directory_id",
                  "created_at": "2024-01-15T09:30:00Z",
                  "updated_at": "2024-01-15T09:30:00Z"
                }
              },
              "codeSamples": []
            },
            {
              "path": "/projects/:id",
              "pathParameters": {
                "id": ":id"
              },
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 422,
              "codeExamples": {
                "nodeAxios": ""
              },
              "requestBodyV3": {
                "type": "json",
                "value": {}
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "detail": [
                    {
                      "loc": ["string"],
                      "msg": "string",
                      "type": "string"
                    }
                  ]
                }
              },
              "codeSamples": []
            }
          ],
          "description": "Update a specific project.\n\nSet the project's active model config by passing `active_model_config_id`.\nThese will be set to the Default environment unless a list of environments\nare also passed in specifically detailing which environments to assign the\nactive config.",
          "authed": true
        },
        {
          "environments": [
            {
              "id": "Default",
              "baseUrl": "https://api.humanloop.com/v4"
            }
          ],
          "defaultEnvironment": "Default",
          "urlSlug": "list-configs",
          "method": "GET",
          "id": "list_configs",
          "originalEndpointId": "endpoint_projects.list_configs",
          "name": "List Configs",
          "path": {
            "pathParameters": [
              {
                "description": "String ID of project. Starts with `pr_`.",
                "key": "id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/projects/"
              },
              {
                "type": "pathParameter",
                "value": "id"
              },
              {
                "type": "literal",
                "value": "/configs"
              }
            ]
          },
          "queryParameters": [
            {
              "key": "evaluation_aggregates",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "boolean"
                  }
                }
              }
            }
          ],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "list",
                "itemType": {
                  "type": "id",
                  "value": "type_:ProjectConfigResponse"
                }
              }
            }
          },
          "errors": [],
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "type_:HTTPValidationError"
                }
              },
              "statusCode": 422,
              "description": "Validation Error",
              "examples": []
            }
          ],
          "examples": [
            {
              "path": "/projects/id/configs",
              "pathParameters": {
                "id": "id"
              },
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": [
                {
                  "project_id": "project_id",
                  "project_name": "project_name",
                  "created_at": "2024-01-15T09:30:00Z",
                  "updated_at": "2024-01-15T09:30:00Z",
                  "last_used": "2024-01-15T09:30:00Z",
                  "num_datapoints": 1,
                  "evaluation_aggregates": [
                    {
                      "model_config_id": "model_config_id",
                      "evaluator_id": "evaluator_id",
                      "evaluator_version_id": "evaluator_version_id"
                    }
                  ],
                  "config": {
                    "type": "generic",
                    "id": "config",
                    "other": {
                      "key": "value"
                    },
                    "created_by": {
                      "id": "id",
                      "email_address": "email_address",
                      "verified": true
                    },
                    "status": "config",
                    "name": "config",
                    "description": "config"
                  }
                }
              ],
              "codeExamples": {
                "nodeAxios": ""
              },
              "responseBodyV3": {
                "type": "json",
                "value": [
                  {
                    "project_id": "project_id",
                    "project_name": "project_name",
                    "created_at": "2024-01-15T09:30:00Z",
                    "updated_at": "2024-01-15T09:30:00Z",
                    "last_used": "2024-01-15T09:30:00Z",
                    "num_datapoints": 1,
                    "evaluation_aggregates": [
                      {
                        "model_config_id": "model_config_id",
                        "evaluator_id": "evaluator_id",
                        "evaluator_version_id": "evaluator_version_id"
                      }
                    ],
                    "config": {
                      "type": "generic",
                      "id": "config",
                      "other": {
                        "key": "value"
                      },
                      "created_by": {
                        "id": "id",
                        "email_address": "email_address",
                        "verified": true
                      },
                      "status": "config",
                      "name": "config",
                      "description": "config"
                    }
                  }
                ]
              },
              "codeSamples": []
            },
            {
              "path": "/projects/:id/configs",
              "pathParameters": {
                "id": ":id"
              },
              "queryParameters": {
                "evaluation_aggregates": true
              },
              "headers": {},
              "responseStatusCode": 422,
              "codeExamples": {
                "nodeAxios": ""
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "detail": [
                    {
                      "loc": ["string"],
                      "msg": "string",
                      "type": "string"
                    }
                  ]
                }
              },
              "codeSamples": []
            }
          ],
          "description": "Get an array of versions associated to your file.",
          "authed": true
        },
        {
          "environments": [
            {
              "id": "Default",
              "baseUrl": "https://api.humanloop.com/v4"
            }
          ],
          "availability": "Deprecated",
          "defaultEnvironment": "Default",
          "urlSlug": "create-feedback-type",
          "method": "POST",
          "id": "create_feedback_type",
          "originalEndpointId": "endpoint_projects.create_feedback_type",
          "name": "Create Feedback Type",
          "path": {
            "pathParameters": [
              {
                "description": "String ID of project. Starts with `pr_`.",
                "key": "id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/projects/"
              },
              {
                "type": "pathParameter",
                "value": "id"
              },
              {
                "type": "literal",
                "value": "/feedback-types"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "request": {
            "contentType": "application/json",
            "type": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The type of feedback to update.",
                  "key": "type",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "The data type associated to this feedback type; whether it is a 'text'/'select'/'multi_select'.",
                  "key": "class",
                  "valueType": {
                    "type": "id",
                    "value": "type_:FeedbackClass"
                  }
                },
                {
                  "description": "The feedback values to be available. This field should only be populated when updating a 'select' or 'multi_select' feedback class.",
                  "key": "values",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "id",
                        "value": "type_:FeedbackLabelRequest"
                      }
                    }
                  }
                }
              ]
            }
          },
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "type_:FeedbackTypeModel"
              }
            }
          },
          "errors": [],
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "type_:HTTPValidationError"
                }
              },
              "statusCode": 422,
              "description": "Validation Error",
              "examples": []
            }
          ],
          "examples": [
            {
              "path": "/projects/id/feedback-types",
              "pathParameters": {
                "id": "id"
              },
              "queryParameters": {},
              "headers": {},
              "requestBody": {
                "type": "type",
                "class": "select"
              },
              "responseStatusCode": 200,
              "responseBody": {
                "type": "rating",
                "values": [
                  {
                    "value": "value",
                    "sentiment": "positive"
                  }
                ]
              },
              "codeExamples": {
                "nodeAxios": ""
              },
              "requestBodyV3": {
                "type": "json",
                "value": {
                  "type": "type",
                  "class": "select"
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "type": "rating",
                  "values": [
                    {
                      "value": "value",
                      "sentiment": "positive"
                    }
                  ]
                }
              },
              "codeSamples": []
            },
            {
              "path": "/projects/:id/feedback-types",
              "pathParameters": {
                "id": ":id"
              },
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 422,
              "codeExamples": {
                "nodeAxios": ""
              },
              "requestBodyV3": {
                "type": "json",
                "value": {
                  "type": "string",
                  "class": "select"
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "detail": [
                    {
                      "loc": ["string"],
                      "msg": "string",
                      "type": "string"
                    }
                  ]
                }
              },
              "codeSamples": []
            }
          ],
          "authed": true
        },
        {
          "environments": [
            {
              "id": "Default",
              "baseUrl": "https://api.humanloop.com/v4"
            }
          ],
          "availability": "Deprecated",
          "defaultEnvironment": "Default",
          "urlSlug": "update-feedback-types",
          "method": "PATCH",
          "id": "update_feedback_types",
          "originalEndpointId": "endpoint_projects.update_feedback_types",
          "name": "Update Feedback Types",
          "path": {
            "pathParameters": [
              {
                "description": "String ID of project. Starts with `pr_`.",
                "key": "id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/projects/"
              },
              {
                "type": "pathParameter",
                "value": "id"
              },
              {
                "type": "literal",
                "value": "/feedback-types"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "unknown"
              }
            }
          },
          "errors": [],
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "type_:HTTPValidationError"
                }
              },
              "statusCode": 422,
              "description": "Validation Error",
              "examples": []
            }
          ],
          "examples": [
            {
              "path": "/projects/id/feedback-types",
              "pathParameters": {
                "id": "id"
              },
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "key": "value"
              },
              "codeExamples": {
                "nodeAxios": ""
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "key": "value"
                }
              },
              "codeSamples": []
            },
            {
              "path": "/projects/:id/feedback-types",
              "pathParameters": {
                "id": ":id"
              },
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 422,
              "codeExamples": {
                "nodeAxios": ""
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "detail": [
                    {
                      "loc": ["string"],
                      "msg": "string",
                      "type": "string"
                    }
                  ]
                }
              },
              "codeSamples": []
            }
          ],
          "description": "Update feedback types.\n\nWARNING: This endpoint has been decommissioned and no longer works. Please use the v5 Human Evaluators API instead.",
          "authed": true
        },
        {
          "environments": [
            {
              "id": "Default",
              "baseUrl": "https://api.humanloop.com/v4"
            }
          ],
          "defaultEnvironment": "Default",
          "urlSlug": "export",
          "method": "POST",
          "id": "export",
          "originalEndpointId": "endpoint_projects.export",
          "name": "Export",
          "path": {
            "pathParameters": [
              {
                "description": "String ID of project. Starts with `pr_`.",
                "key": "id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/projects/"
              },
              {
                "type": "pathParameter",
                "value": "id"
              },
              {
                "type": "literal",
                "value": "/export"
              }
            ]
          },
          "queryParameters": [
            {
              "description": "Page offset for pagination.",
              "key": "page",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              }
            },
            {
              "description": "Page size for pagination. Number of logs to export.",
              "key": "size",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              }
            }
          ],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "type_:PaginatedDataLogResponse"
              }
            }
          },
          "errors": [],
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "type_:HTTPValidationError"
                }
              },
              "statusCode": 422,
              "description": "Validation Error",
              "examples": []
            }
          ],
          "examples": [
            {
              "path": "/projects/id/export",
              "pathParameters": {
                "id": "id"
              },
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "records": [
                  {
                    "project": "project",
                    "project_id": "project_id",
                    "session_id": "session_id",
                    "session_reference_id": "session_reference_id",
                    "parent_id": "parent_id",
                    "parent_reference_id": "parent_reference_id",
                    "inputs": {
                      "key": "value"
                    },
                    "source": "source",
                    "metadata": {
                      "key": "value"
                    },
                    "save": true,
                    "source_datapoint_id": "source_datapoint_id",
                    "id": "id",
                    "reference_id": "reference_id",
                    "messages": [
                      {
                        "role": "user"
                      }
                    ],
                    "output": "output",
                    "judgment": true,
                    "config_id": "config_id",
                    "config": {
                      "type": "generic",
                      "id": "config",
                      "status": "config",
                      "name": "config"
                    },
                    "environment": "environment",
                    "feedback": [
                      {
                        "type": "rating",
                        "value": true,
                        "id": "id"
                      }
                    ],
                    "created_at": "2024-01-15T09:30:00Z",
                    "error": "error",
                    "stdout": "stdout",
                    "duration": 1.1,
                    "output_message": {
                      "role": "user"
                    },
                    "prompt_tokens": 1,
                    "output_tokens": 1,
                    "prompt_cost": 1.1,
                    "output_cost": 1.1,
                    "provider_request": {
                      "key": "value"
                    },
                    "provider_response": {
                      "key": "value"
                    },
                    "user": "user",
                    "provider_latency": 1.1,
                    "tokens": 1,
                    "raw_output": "raw_output",
                    "finish_reason": "finish_reason",
                    "tools": [
                      {
                        "id": "id",
                        "name": "name",
                        "signature": "signature",
                        "result": "result"
                      }
                    ],
                    "tool_choice": "none",
                    "evaluation_results": [
                      {
                        "id": "id",
                        "evaluator_id": "evaluator_id",
                        "evaluator_version_id": "evaluator_version_id",
                        "log_id": "log_id",
                        "updated_at": "2024-01-15T09:30:00Z",
                        "created_at": "2024-01-15T09:30:00Z"
                      }
                    ],
                    "observability_status": "pending",
                    "updated_at": "2024-01-15T09:30:00Z",
                    "batch_ids": ["batch_ids"]
                  }
                ],
                "page": 1,
                "size": 1,
                "total": 1
              },
              "codeExamples": {
                "nodeAxios": ""
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "records": [
                    {
                      "project": "project",
                      "project_id": "project_id",
                      "session_id": "session_id",
                      "session_reference_id": "session_reference_id",
                      "parent_id": "parent_id",
                      "parent_reference_id": "parent_reference_id",
                      "inputs": {
                        "key": "value"
                      },
                      "source": "source",
                      "metadata": {
                        "key": "value"
                      },
                      "save": true,
                      "source_datapoint_id": "source_datapoint_id",
                      "id": "id",
                      "reference_id": "reference_id",
                      "messages": [
                        {
                          "role": "user"
                        }
                      ],
                      "output": "output",
                      "judgment": true,
                      "config_id": "config_id",
                      "config": {
                        "type": "generic",
                        "id": "config",
                        "status": "config",
                        "name": "config"
                      },
                      "environment": "environment",
                      "feedback": [
                        {
                          "type": "rating",
                          "value": true,
                          "id": "id"
                        }
                      ],
                      "created_at": "2024-01-15T09:30:00Z",
                      "error": "error",
                      "stdout": "stdout",
                      "duration": 1.1,
                      "output_message": {
                        "role": "user"
                      },
                      "prompt_tokens": 1,
                      "output_tokens": 1,
                      "prompt_cost": 1.1,
                      "output_cost": 1.1,
                      "provider_request": {
                        "key": "value"
                      },
                      "provider_response": {
                        "key": "value"
                      },
                      "user": "user",
                      "provider_latency": 1.1,
                      "tokens": 1,
                      "raw_output": "raw_output",
                      "finish_reason": "finish_reason",
                      "tools": [
                        {
                          "id": "id",
                          "name": "name",
                          "signature": "signature",
                          "result": "result"
                        }
                      ],
                      "tool_choice": "none",
                      "evaluation_results": [
                        {
                          "id": "id",
                          "evaluator_id": "evaluator_id",
                          "evaluator_version_id": "evaluator_version_id",
                          "log_id": "log_id",
                          "updated_at": "2024-01-15T09:30:00Z",
                          "created_at": "2024-01-15T09:30:00Z"
                        }
                      ],
                      "observability_status": "pending",
                      "updated_at": "2024-01-15T09:30:00Z",
                      "batch_ids": ["batch_ids"]
                    }
                  ],
                  "page": 1,
                  "size": 1,
                  "total": 1
                }
              },
              "codeSamples": []
            },
            {
              "path": "/projects/:id/export",
              "pathParameters": {
                "id": ":id"
              },
              "queryParameters": {
                "page": 0,
                "size": 0
              },
              "headers": {},
              "responseStatusCode": 422,
              "codeExamples": {
                "nodeAxios": ""
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "detail": [
                    {
                      "loc": ["string"],
                      "msg": "string",
                      "type": "string"
                    }
                  ]
                }
              },
              "codeSamples": []
            }
          ],
          "description": "Export all logged datapoints associated to your project.\n\nResults are paginated and sorts the datapoints based on `created_at` in\ndescending order.",
          "authed": true
        }
      ],
      "types": [],
      "subpackages": ["subpackage_projects/activeConfig", "subpackage_projects/deployedConfig"],
      "urlSlug": "projects",
      "webhooks": [],
      "websockets": []
    },
    "subpackage_datasets": {
      "subpackageId": "subpackage_datasets",
      "name": "datasets",
      "endpoints": [
        {
          "environments": [
            {
              "id": "Default",
              "baseUrl": "https://api.humanloop.com/v4"
            }
          ],
          "defaultEnvironment": "Default",
          "urlSlug": "create",
          "method": "POST",
          "id": "create",
          "originalEndpointId": "endpoint_datasets.create",
          "name": "Create",
          "path": {
            "pathParameters": [
              {
                "key": "project_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/projects/"
              },
              {
                "type": "pathParameter",
                "value": "project_id"
              },
              {
                "type": "literal",
                "value": "/datasets"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "request": {
            "contentType": "application/json",
            "type": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The name of the dataset.",
                  "key": "name",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "The description of the dataset.",
                  "key": "description",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              ]
            }
          },
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "type_:DatasetResponse"
              }
            }
          },
          "errors": [],
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "type_:HTTPValidationError"
                }
              },
              "statusCode": 422,
              "description": "Validation Error",
              "examples": []
            }
          ],
          "examples": [
            {
              "path": "/projects/project_id/datasets",
              "pathParameters": {
                "project_id": "project_id"
              },
              "queryParameters": {},
              "headers": {},
              "requestBody": {
                "name": "name",
                "description": "description"
              },
              "responseStatusCode": 200,
              "responseBody": {
                "id": "id",
                "project_id": "project_id",
                "name": "name",
                "description": "description",
                "datapoint_count": 1,
                "created_at": "2024-01-15T09:30:00Z",
                "updated_at": "2024-01-15T09:30:00Z"
              },
              "codeExamples": {
                "nodeAxios": ""
              },
              "requestBodyV3": {
                "type": "json",
                "value": {
                  "name": "name",
                  "description": "description"
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "id": "id",
                  "project_id": "project_id",
                  "name": "name",
                  "description": "description",
                  "datapoint_count": 1,
                  "created_at": "2024-01-15T09:30:00Z",
                  "updated_at": "2024-01-15T09:30:00Z"
                }
              },
              "codeSamples": []
            },
            {
              "path": "/projects/:project_id/datasets",
              "pathParameters": {
                "project_id": ":project_id"
              },
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 422,
              "codeExamples": {
                "nodeAxios": ""
              },
              "requestBodyV3": {
                "type": "json",
                "value": {
                  "name": "string",
                  "description": "string"
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "detail": [
                    {
                      "loc": ["string"],
                      "msg": "string",
                      "type": "string"
                    }
                  ]
                }
              },
              "codeSamples": []
            }
          ],
          "description": "Create a new dataset for a project.",
          "authed": true
        },
        {
          "environments": [
            {
              "id": "Default",
              "baseUrl": "https://api.humanloop.com/v4"
            }
          ],
          "defaultEnvironment": "Default",
          "urlSlug": "list",
          "method": "GET",
          "id": "list",
          "originalEndpointId": "endpoint_datasets.list",
          "name": "List ",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/datasets"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "list",
                "itemType": {
                  "type": "id",
                  "value": "type_:DatasetResponse"
                }
              }
            }
          },
          "errors": [],
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "type_:HTTPValidationError"
                }
              },
              "statusCode": 422,
              "description": "Validation Error",
              "examples": []
            }
          ],
          "examples": [
            {
              "path": "/datasets",
              "pathParameters": {},
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": [
                {
                  "id": "id",
                  "project_id": "project_id",
                  "name": "name",
                  "description": "description",
                  "datapoint_count": 1,
                  "created_at": "2024-01-15T09:30:00Z",
                  "updated_at": "2024-01-15T09:30:00Z"
                }
              ],
              "codeExamples": {
                "nodeAxios": ""
              },
              "responseBodyV3": {
                "type": "json",
                "value": [
                  {
                    "id": "id",
                    "project_id": "project_id",
                    "name": "name",
                    "description": "description",
                    "datapoint_count": 1,
                    "created_at": "2024-01-15T09:30:00Z",
                    "updated_at": "2024-01-15T09:30:00Z"
                  }
                ]
              },
              "codeSamples": []
            },
            {
              "path": "/datasets",
              "pathParameters": {},
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 422,
              "codeExamples": {
                "nodeAxios": ""
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "detail": [
                    {
                      "loc": ["string"],
                      "msg": "string",
                      "type": "string"
                    }
                  ]
                }
              },
              "codeSamples": []
            }
          ],
          "description": "Get all Datasets for an organization.",
          "authed": true
        },
        {
          "environments": [
            {
              "id": "Default",
              "baseUrl": "https://api.humanloop.com/v4"
            }
          ],
          "defaultEnvironment": "Default",
          "urlSlug": "get",
          "method": "GET",
          "id": "get",
          "originalEndpointId": "endpoint_datasets.get",
          "name": "Get",
          "path": {
            "pathParameters": [
              {
                "description": "String ID of dataset. Starts with `evts_`.",
                "key": "id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/datasets/"
              },
              {
                "type": "pathParameter",
                "value": "id"
              },
              {
                "type": "literal",
                "value": ""
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "type_:DatasetResponse"
              }
            }
          },
          "errors": [],
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "type_:HTTPValidationError"
                }
              },
              "statusCode": 422,
              "description": "Validation Error",
              "examples": []
            }
          ],
          "examples": [
            {
              "path": "/datasets/id",
              "pathParameters": {
                "id": "id"
              },
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "id": "id",
                "project_id": "project_id",
                "name": "name",
                "description": "description",
                "datapoint_count": 1,
                "created_at": "2024-01-15T09:30:00Z",
                "updated_at": "2024-01-15T09:30:00Z"
              },
              "codeExamples": {
                "nodeAxios": ""
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "id": "id",
                  "project_id": "project_id",
                  "name": "name",
                  "description": "description",
                  "datapoint_count": 1,
                  "created_at": "2024-01-15T09:30:00Z",
                  "updated_at": "2024-01-15T09:30:00Z"
                }
              },
              "codeSamples": []
            },
            {
              "path": "/datasets/:id",
              "pathParameters": {
                "id": ":id"
              },
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 422,
              "codeExamples": {
                "nodeAxios": ""
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "detail": [
                    {
                      "loc": ["string"],
                      "msg": "string",
                      "type": "string"
                    }
                  ]
                }
              },
              "codeSamples": []
            }
          ],
          "description": "Get a single dataset by ID.",
          "authed": true
        },
        {
          "environments": [
            {
              "id": "Default",
              "baseUrl": "https://api.humanloop.com/v4"
            }
          ],
          "defaultEnvironment": "Default",
          "urlSlug": "delete",
          "method": "DELETE",
          "id": "delete",
          "originalEndpointId": "endpoint_datasets.delete",
          "name": "Delete",
          "path": {
            "pathParameters": [
              {
                "description": "String ID of dataset. Starts with `evts_`.",
                "key": "id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/datasets/"
              },
              {
                "type": "pathParameter",
                "value": "id"
              },
              {
                "type": "literal",
                "value": ""
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "unknown"
              }
            }
          },
          "errors": [],
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "type_:HTTPValidationError"
                }
              },
              "statusCode": 422,
              "description": "Validation Error",
              "examples": []
            }
          ],
          "examples": [
            {
              "path": "/datasets/id",
              "pathParameters": {
                "id": "id"
              },
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "key": "value"
              },
              "codeExamples": {
                "nodeAxios": ""
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "key": "value"
                }
              },
              "codeSamples": []
            },
            {
              "path": "/datasets/:id",
              "pathParameters": {
                "id": ":id"
              },
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 422,
              "codeExamples": {
                "nodeAxios": ""
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "detail": [
                    {
                      "loc": ["string"],
                      "msg": "string",
                      "type": "string"
                    }
                  ]
                }
              },
              "codeSamples": []
            }
          ],
          "description": "Delete a dataset by ID.",
          "authed": true
        },
        {
          "environments": [
            {
              "id": "Default",
              "baseUrl": "https://api.humanloop.com/v4"
            }
          ],
          "defaultEnvironment": "Default",
          "urlSlug": "update",
          "method": "PATCH",
          "id": "update",
          "originalEndpointId": "endpoint_datasets.update",
          "name": "Update",
          "path": {
            "pathParameters": [
              {
                "description": "String ID of testset. Starts with `evts_`.",
                "key": "id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/datasets/"
              },
              {
                "type": "pathParameter",
                "value": "id"
              },
              {
                "type": "literal",
                "value": ""
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "request": {
            "contentType": "application/json",
            "type": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The name of the dataset.",
                  "key": "name",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "The description of the dataset.",
                  "key": "description",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              ]
            }
          },
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "type_:DatasetResponse"
              }
            }
          },
          "errors": [],
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "type_:HTTPValidationError"
                }
              },
              "statusCode": 422,
              "description": "Validation Error",
              "examples": []
            }
          ],
          "examples": [
            {
              "path": "/datasets/id",
              "pathParameters": {
                "id": "id"
              },
              "queryParameters": {},
              "headers": {},
              "requestBody": {},
              "responseStatusCode": 200,
              "responseBody": {
                "id": "id",
                "project_id": "project_id",
                "name": "name",
                "description": "description",
                "datapoint_count": 1,
                "created_at": "2024-01-15T09:30:00Z",
                "updated_at": "2024-01-15T09:30:00Z"
              },
              "codeExamples": {
                "nodeAxios": ""
              },
              "requestBodyV3": {
                "type": "json",
                "value": {}
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "id": "id",
                  "project_id": "project_id",
                  "name": "name",
                  "description": "description",
                  "datapoint_count": 1,
                  "created_at": "2024-01-15T09:30:00Z",
                  "updated_at": "2024-01-15T09:30:00Z"
                }
              },
              "codeSamples": []
            },
            {
              "path": "/datasets/:id",
              "pathParameters": {
                "id": ":id"
              },
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 422,
              "codeExamples": {
                "nodeAxios": ""
              },
              "requestBodyV3": {
                "type": "json",
                "value": {}
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "detail": [
                    {
                      "loc": ["string"],
                      "msg": "string",
                      "type": "string"
                    }
                  ]
                }
              },
              "codeSamples": []
            }
          ],
          "description": "Update a testset by ID.",
          "authed": true
        },
        {
          "environments": [
            {
              "id": "Default",
              "baseUrl": "https://api.humanloop.com/v4"
            }
          ],
          "defaultEnvironment": "Default",
          "urlSlug": "list-datapoints",
          "migratedFromUrlSlugs": ["datapoints"],
          "method": "GET",
          "id": "list_datapoints",
          "originalEndpointId": "endpoint_datasets.list_datapoints",
          "name": "Datapoints",
          "path": {
            "pathParameters": [
              {
                "description": "String ID of dataset. Starts with `evts_`.",
                "key": "dataset_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/datasets/"
              },
              {
                "type": "pathParameter",
                "value": "dataset_id"
              },
              {
                "type": "literal",
                "value": "/datapoints"
              }
            ]
          },
          "queryParameters": [
            {
              "key": "page",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              }
            },
            {
              "key": "size",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              }
            }
          ],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "type_:PaginatedDataDatapointResponse"
              }
            }
          },
          "errors": [],
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "type_:HTTPValidationError"
                }
              },
              "statusCode": 422,
              "description": "Validation Error",
              "examples": []
            }
          ],
          "examples": [
            {
              "path": "/datasets/dataset_id/datapoints",
              "pathParameters": {
                "dataset_id": "dataset_id"
              },
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "records": [
                  {
                    "id": "id",
                    "dataset_id": "dataset_id",
                    "inputs": {
                      "key": "value"
                    },
                    "messages": [
                      {
                        "role": "user"
                      }
                    ],
                    "target": {
                      "key": "value"
                    }
                  }
                ],
                "page": 1,
                "size": 1,
                "total": 1
              },
              "codeExamples": {
                "nodeAxios": ""
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "records": [
                    {
                      "id": "id",
                      "dataset_id": "dataset_id",
                      "inputs": {
                        "key": "value"
                      },
                      "messages": [
                        {
                          "role": "user"
                        }
                      ],
                      "target": {
                        "key": "value"
                      }
                    }
                  ],
                  "page": 1,
                  "size": 1,
                  "total": 1
                }
              },
              "codeSamples": []
            },
            {
              "path": "/datasets/:dataset_id/datapoints",
              "pathParameters": {
                "dataset_id": ":dataset_id"
              },
              "queryParameters": {
                "page": 0,
                "size": 0
              },
              "headers": {},
              "responseStatusCode": 422,
              "codeExamples": {
                "nodeAxios": ""
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "detail": [
                    {
                      "loc": ["string"],
                      "msg": "string",
                      "type": "string"
                    }
                  ]
                }
              },
              "codeSamples": []
            }
          ],
          "description": "Get datapoints for a dataset.",
          "authed": true
        },
        {
          "environments": [
            {
              "id": "Default",
              "baseUrl": "https://api.humanloop.com/v4"
            }
          ],
          "defaultEnvironment": "Default",
          "urlSlug": "create-datapoint",
          "method": "POST",
          "id": "create_datapoint",
          "originalEndpointId": "endpoint_datasets.create_datapoint",
          "name": "Create Datapoint",
          "path": {
            "pathParameters": [
              {
                "description": "String ID of dataset. Starts with `evts_`.",
                "key": "dataset_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/datasets/"
              },
              {
                "type": "pathParameter",
                "value": "dataset_id"
              },
              {
                "type": "literal",
                "value": "/datapoints"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "request": {
            "contentType": "application/json",
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "type_datasets:Request"
              }
            }
          },
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "list",
                "itemType": {
                  "type": "id",
                  "value": "type_:DatapointResponse"
                }
              }
            }
          },
          "errors": [],
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "type_:HTTPValidationError"
                }
              },
              "statusCode": 422,
              "description": "Validation Error",
              "examples": []
            }
          ],
          "examples": [
            {
              "path": "/datasets/dataset_id/datapoints",
              "pathParameters": {
                "dataset_id": "dataset_id"
              },
              "queryParameters": {},
              "headers": {},
              "requestBody": {
                "log_ids": ["log_ids"]
              },
              "responseStatusCode": 200,
              "responseBody": [
                {
                  "id": "id",
                  "dataset_id": "dataset_id",
                  "inputs": {
                    "key": "value"
                  },
                  "messages": [
                    {
                      "role": "user"
                    }
                  ],
                  "target": {
                    "key": "value"
                  }
                }
              ],
              "codeExamples": {
                "nodeAxios": ""
              },
              "requestBodyV3": {
                "type": "json",
                "value": {
                  "log_ids": ["log_ids"]
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": [
                  {
                    "id": "id",
                    "dataset_id": "dataset_id",
                    "inputs": {
                      "key": "value"
                    },
                    "messages": [
                      {
                        "role": "user"
                      }
                    ],
                    "target": {
                      "key": "value"
                    }
                  }
                ]
              },
              "codeSamples": []
            },
            {
              "path": "/datasets/:dataset_id/datapoints",
              "pathParameters": {
                "dataset_id": ":dataset_id"
              },
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 422,
              "codeExamples": {
                "nodeAxios": ""
              },
              "requestBodyV3": {
                "type": "json",
                "value": {
                  "log_ids": ["string"]
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "detail": [
                    {
                      "loc": ["string"],
                      "msg": "string",
                      "type": "string"
                    }
                  ]
                }
              },
              "codeSamples": []
            }
          ],
          "description": "Create a new datapoint for a dataset.\n\nHere in the v4 API, this has the following behaviour:\n\n- Retrieve the current latest version of the dataset.\n- Construct a new version of the dataset with the new testcases added.\n- Store that latest version as a committed version with an autogenerated commit\n  message and return the new datapoints",
          "authed": true
        }
      ],
      "types": ["type_datasets:Request"],
      "subpackages": [],
      "urlSlug": "datasets",
      "webhooks": [],
      "websockets": []
    },
    "subpackage_evaluations": {
      "subpackageId": "subpackage_evaluations",
      "name": "evaluations",
      "endpoints": [
        {
          "environments": [
            {
              "id": "Default",
              "baseUrl": "https://api.humanloop.com/v4"
            }
          ],
          "defaultEnvironment": "Default",
          "urlSlug": "get",
          "method": "GET",
          "id": "get",
          "originalEndpointId": "endpoint_evaluations.get",
          "name": "Get",
          "path": {
            "pathParameters": [
              {
                "description": "String ID of evaluation run. Starts with `ev_`.",
                "key": "id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/evaluations/"
              },
              {
                "type": "pathParameter",
                "value": "id"
              },
              {
                "type": "literal",
                "value": ""
              }
            ]
          },
          "queryParameters": [
            {
              "description": "Whether to include evaluator aggregates in the response.",
              "key": "evaluator_aggregates",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "boolean"
                  }
                }
              }
            },
            {
              "description": "String ID of evaluatee version to return. If not defined, the first evaluatee will be returned. Starts with `evv_`.",
              "key": "evaluatee_id",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          ],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "type_:EvaluationResponse"
              }
            }
          },
          "errors": [],
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "type_:HTTPValidationError"
                }
              },
              "statusCode": 422,
              "description": "Validation Error",
              "examples": []
            }
          ],
          "examples": [
            {
              "path": "/evaluations/id",
              "pathParameters": {
                "id": "id"
              },
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "id": "id",
                "status": "pending",
                "config": {
                  "type": "generic",
                  "id": "config",
                  "other": {
                    "key": "value"
                  },
                  "created_by": {
                    "id": "id",
                    "email_address": "email_address",
                    "full_name": "full_name",
                    "verified": true
                  },
                  "status": "config",
                  "name": "config",
                  "description": "config"
                },
                "created_at": "2024-01-15T09:30:00Z",
                "updated_at": "2024-01-15T09:30:00Z",
                "evaluators": [
                  {
                    "name": "name",
                    "description": "description",
                    "arguments_type": "target_free",
                    "return_type": "boolean",
                    "code": "code",
                    "model_config": {
                      "id": "id",
                      "model": "model"
                    },
                    "type": "python",
                    "id": "id",
                    "created_at": "2024-01-15T09:30:00Z",
                    "updated_at": "2024-01-15T09:30:00Z",
                    "logging_project": {
                      "id": "id",
                      "name": "name",
                      "users": [
                        {
                          "id": "id",
                          "email_address": "email_address"
                        }
                      ],
                      "data_count": 1,
                      "feedback_types": [
                        {
                          "type": "rating"
                        }
                      ],
                      "team_id": "team_id",
                      "created_at": "2024-01-15T09:30:00Z",
                      "updated_at": "2024-01-15T09:30:00Z"
                    }
                  }
                ],
                "dataset": {
                  "id": "id",
                  "project_id": "project_id",
                  "name": "name",
                  "description": "description",
                  "datapoint_count": 1,
                  "created_at": "2024-01-15T09:30:00Z",
                  "updated_at": "2024-01-15T09:30:00Z"
                },
                "dataset_version_id": "dataset_version_id",
                "dataset_snapshot": {
                  "id": "id",
                  "project_id": "project_id",
                  "name": "name",
                  "description": "description",
                  "datapoint_count": 1,
                  "created_at": "2024-01-15T09:30:00Z",
                  "updated_at": "2024-01-15T09:30:00Z"
                },
                "evaluator_aggregates": [
                  {
                    "model_config_id": "model_config_id",
                    "evaluator_id": "evaluator_id",
                    "evaluator_version_id": "evaluator_version_id",
                    "aggregate_value": 1.1
                  }
                ]
              },
              "codeExamples": {
                "nodeAxios": ""
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "id": "id",
                  "status": "pending",
                  "config": {
                    "type": "generic",
                    "id": "config",
                    "other": {
                      "key": "value"
                    },
                    "created_by": {
                      "id": "id",
                      "email_address": "email_address",
                      "full_name": "full_name",
                      "verified": true
                    },
                    "status": "config",
                    "name": "config",
                    "description": "config"
                  },
                  "created_at": "2024-01-15T09:30:00Z",
                  "updated_at": "2024-01-15T09:30:00Z",
                  "evaluators": [
                    {
                      "name": "name",
                      "description": "description",
                      "arguments_type": "target_free",
                      "return_type": "boolean",
                      "code": "code",
                      "model_config": {
                        "id": "id",
                        "model": "model"
                      },
                      "type": "python",
                      "id": "id",
                      "created_at": "2024-01-15T09:30:00Z",
                      "updated_at": "2024-01-15T09:30:00Z",
                      "logging_project": {
                        "id": "id",
                        "name": "name",
                        "users": [
                          {
                            "id": "id",
                            "email_address": "email_address"
                          }
                        ],
                        "data_count": 1,
                        "feedback_types": [
                          {
                            "type": "rating"
                          }
                        ],
                        "team_id": "team_id",
                        "created_at": "2024-01-15T09:30:00Z",
                        "updated_at": "2024-01-15T09:30:00Z"
                      }
                    }
                  ],
                  "dataset": {
                    "id": "id",
                    "project_id": "project_id",
                    "name": "name",
                    "description": "description",
                    "datapoint_count": 1,
                    "created_at": "2024-01-15T09:30:00Z",
                    "updated_at": "2024-01-15T09:30:00Z"
                  },
                  "dataset_version_id": "dataset_version_id",
                  "dataset_snapshot": {
                    "id": "id",
                    "project_id": "project_id",
                    "name": "name",
                    "description": "description",
                    "datapoint_count": 1,
                    "created_at": "2024-01-15T09:30:00Z",
                    "updated_at": "2024-01-15T09:30:00Z"
                  },
                  "evaluator_aggregates": [
                    {
                      "model_config_id": "model_config_id",
                      "evaluator_id": "evaluator_id",
                      "evaluator_version_id": "evaluator_version_id",
                      "aggregate_value": 1.1
                    }
                  ]
                }
              },
              "codeSamples": []
            },
            {
              "path": "/evaluations/:id",
              "pathParameters": {
                "id": ":id"
              },
              "queryParameters": {
                "evaluator_aggregates": true,
                "evaluatee_id": "string"
              },
              "headers": {},
              "responseStatusCode": 422,
              "codeExamples": {
                "nodeAxios": ""
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "detail": [
                    {
                      "loc": ["string"],
                      "msg": "string",
                      "type": "string"
                    }
                  ]
                }
              },
              "codeSamples": []
            }
          ],
          "description": "Get evaluation by ID.",
          "authed": true
        },
        {
          "environments": [
            {
              "id": "Default",
              "baseUrl": "https://api.humanloop.com/v4"
            }
          ],
          "defaultEnvironment": "Default",
          "urlSlug": "list-datapoints",
          "method": "GET",
          "id": "list_datapoints",
          "originalEndpointId": "endpoint_evaluations.list_datapoints",
          "name": "List Datapoints",
          "path": {
            "pathParameters": [
              {
                "description": "String ID of evaluation. Starts with `ev_`.",
                "key": "id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/evaluations/"
              },
              {
                "type": "pathParameter",
                "value": "id"
              },
              {
                "type": "literal",
                "value": "/datapoints"
              }
            ]
          },
          "queryParameters": [
            {
              "description": "Page to fetch. Starts from 1.",
              "key": "page",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              }
            },
            {
              "description": "Number of evaluation results to retrieve.",
              "key": "size",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              }
            },
            {
              "description": "String ID of evaluatee version to return. If not defined, the first evaluatee will be returned. Starts with `evv_`.",
              "key": "evaluatee_id",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          ],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "type_:PaginatedDataEvaluationDatapointSnapshotResponse"
              }
            }
          },
          "errors": [],
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "type_:HTTPValidationError"
                }
              },
              "statusCode": 422,
              "description": "Validation Error",
              "examples": []
            }
          ],
          "examples": [
            {
              "path": "/evaluations/id/datapoints",
              "pathParameters": {
                "id": "id"
              },
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "records": [
                  {
                    "datapoint": {
                      "id": "id"
                    },
                    "log": {
                      "id": "id",
                      "config": {
                        "type": "generic",
                        "id": "config",
                        "status": "config",
                        "name": "config"
                      },
                      "evaluation_results": [
                        {
                          "id": "id",
                          "evaluator_id": "evaluator_id",
                          "evaluator_version_id": "evaluator_version_id",
                          "log_id": "log_id",
                          "updated_at": "2024-01-15T09:30:00Z",
                          "created_at": "2024-01-15T09:30:00Z"
                        }
                      ],
                      "observability_status": "pending",
                      "updated_at": "2024-01-15T09:30:00Z"
                    },
                    "evaluation_results": [
                      {
                        "id": "id",
                        "evaluator_id": "evaluator_id",
                        "evaluator_version_id": "evaluator_version_id",
                        "log_id": "log_id",
                        "updated_at": "2024-01-15T09:30:00Z",
                        "created_at": "2024-01-15T09:30:00Z"
                      }
                    ]
                  }
                ],
                "page": 1,
                "size": 1,
                "total": 1
              },
              "codeExamples": {
                "nodeAxios": ""
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "records": [
                    {
                      "datapoint": {
                        "id": "id"
                      },
                      "log": {
                        "id": "id",
                        "config": {
                          "type": "generic",
                          "id": "config",
                          "status": "config",
                          "name": "config"
                        },
                        "evaluation_results": [
                          {
                            "id": "id",
                            "evaluator_id": "evaluator_id",
                            "evaluator_version_id": "evaluator_version_id",
                            "log_id": "log_id",
                            "updated_at": "2024-01-15T09:30:00Z",
                            "created_at": "2024-01-15T09:30:00Z"
                          }
                        ],
                        "observability_status": "pending",
                        "updated_at": "2024-01-15T09:30:00Z"
                      },
                      "evaluation_results": [
                        {
                          "id": "id",
                          "evaluator_id": "evaluator_id",
                          "evaluator_version_id": "evaluator_version_id",
                          "log_id": "log_id",
                          "updated_at": "2024-01-15T09:30:00Z",
                          "created_at": "2024-01-15T09:30:00Z"
                        }
                      ]
                    }
                  ],
                  "page": 1,
                  "size": 1,
                  "total": 1
                }
              },
              "codeSamples": []
            },
            {
              "path": "/evaluations/:id/datapoints",
              "pathParameters": {
                "id": ":id"
              },
              "queryParameters": {
                "page": 0,
                "size": 0
              },
              "headers": {},
              "responseStatusCode": 422,
              "codeExamples": {
                "nodeAxios": ""
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "detail": [
                    {
                      "loc": ["string"],
                      "msg": "string",
                      "type": "string"
                    }
                  ]
                }
              },
              "codeSamples": []
            }
          ],
          "description": "Get testcases by evaluation ID.",
          "authed": true
        },
        {
          "environments": [
            {
              "id": "Default",
              "baseUrl": "https://api.humanloop.com/v4"
            }
          ],
          "defaultEnvironment": "Default",
          "urlSlug": "create",
          "method": "POST",
          "id": "create",
          "originalEndpointId": "endpoint_evaluations.create",
          "name": "Create",
          "path": {
            "pathParameters": [
              {
                "description": "String ID of project. Starts with `pr_`.",
                "key": "project_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/projects/"
              },
              {
                "type": "pathParameter",
                "value": "project_id"
              },
              {
                "type": "literal",
                "value": "/evaluations"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "request": {
            "contentType": "application/json",
            "type": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "ID of the config to evaluate. Starts with `config_`.",
                  "key": "config_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "IDs of evaluators to run on the dataset. IDs start with `evfn_`",
                  "key": "evaluator_ids",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "ID of the dataset to use in this evaluation. Starts with `evts_`.",
                  "key": "dataset_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "API keys required by each provider to make API calls. The API keys provided here are not stored by Humanloop. If not specified here, Humanloop will fall back to the key saved to your organization. Ensure you provide an API key for the provider for the model config you are evaluating, or have one saved to your organization.",
                  "key": "provider_api_keys",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:ProviderApiKeys"
                    }
                  }
                },
                {
                  "description": "Whether the log generations for this evaluation should be performed by Humanloop. If `False`, the log generations should be submitted by the user via the API.",
                  "key": "hl_generated",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean"
                      }
                    }
                  }
                },
                {
                  "description": "Name of the Evaluation to help identify it.",
                  "key": "name",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              ]
            }
          },
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "type_:EvaluationResponse"
              }
            }
          },
          "errors": [],
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "type_:HTTPValidationError"
                }
              },
              "statusCode": 422,
              "description": "Validation Error",
              "examples": []
            }
          ],
          "examples": [
            {
              "path": "/projects/project_id/evaluations",
              "pathParameters": {
                "project_id": "project_id"
              },
              "queryParameters": {},
              "headers": {},
              "requestBody": {
                "config_id": "config_id",
                "evaluator_ids": ["evaluator_ids"],
                "dataset_id": "dataset_id"
              },
              "responseStatusCode": 200,
              "responseBody": {
                "id": "id",
                "status": "pending",
                "config": {
                  "type": "generic",
                  "id": "config",
                  "other": {
                    "key": "value"
                  },
                  "created_by": {
                    "id": "id",
                    "email_address": "email_address",
                    "full_name": "full_name",
                    "verified": true
                  },
                  "status": "config",
                  "name": "config",
                  "description": "config"
                },
                "created_at": "2024-01-15T09:30:00Z",
                "updated_at": "2024-01-15T09:30:00Z",
                "evaluators": [
                  {
                    "name": "name",
                    "description": "description",
                    "arguments_type": "target_free",
                    "return_type": "boolean",
                    "code": "code",
                    "model_config": {
                      "id": "id",
                      "model": "model"
                    },
                    "type": "python",
                    "id": "id",
                    "created_at": "2024-01-15T09:30:00Z",
                    "updated_at": "2024-01-15T09:30:00Z",
                    "logging_project": {
                      "id": "id",
                      "name": "name",
                      "users": [
                        {
                          "id": "id",
                          "email_address": "email_address"
                        }
                      ],
                      "data_count": 1,
                      "feedback_types": [
                        {
                          "type": "rating"
                        }
                      ],
                      "team_id": "team_id",
                      "created_at": "2024-01-15T09:30:00Z",
                      "updated_at": "2024-01-15T09:30:00Z"
                    }
                  }
                ],
                "dataset": {
                  "id": "id",
                  "project_id": "project_id",
                  "name": "name",
                  "description": "description",
                  "datapoint_count": 1,
                  "created_at": "2024-01-15T09:30:00Z",
                  "updated_at": "2024-01-15T09:30:00Z"
                },
                "dataset_version_id": "dataset_version_id",
                "dataset_snapshot": {
                  "id": "id",
                  "project_id": "project_id",
                  "name": "name",
                  "description": "description",
                  "datapoint_count": 1,
                  "created_at": "2024-01-15T09:30:00Z",
                  "updated_at": "2024-01-15T09:30:00Z"
                },
                "evaluator_aggregates": [
                  {
                    "model_config_id": "model_config_id",
                    "evaluator_id": "evaluator_id",
                    "evaluator_version_id": "evaluator_version_id",
                    "aggregate_value": 1.1
                  }
                ]
              },
              "codeExamples": {
                "nodeAxios": ""
              },
              "requestBodyV3": {
                "type": "json",
                "value": {
                  "config_id": "config_id",
                  "evaluator_ids": ["evaluator_ids"],
                  "dataset_id": "dataset_id"
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "id": "id",
                  "status": "pending",
                  "config": {
                    "type": "generic",
                    "id": "config",
                    "other": {
                      "key": "value"
                    },
                    "created_by": {
                      "id": "id",
                      "email_address": "email_address",
                      "full_name": "full_name",
                      "verified": true
                    },
                    "status": "config",
                    "name": "config",
                    "description": "config"
                  },
                  "created_at": "2024-01-15T09:30:00Z",
                  "updated_at": "2024-01-15T09:30:00Z",
                  "evaluators": [
                    {
                      "name": "name",
                      "description": "description",
                      "arguments_type": "target_free",
                      "return_type": "boolean",
                      "code": "code",
                      "model_config": {
                        "id": "id",
                        "model": "model"
                      },
                      "type": "python",
                      "id": "id",
                      "created_at": "2024-01-15T09:30:00Z",
                      "updated_at": "2024-01-15T09:30:00Z",
                      "logging_project": {
                        "id": "id",
                        "name": "name",
                        "users": [
                          {
                            "id": "id",
                            "email_address": "email_address"
                          }
                        ],
                        "data_count": 1,
                        "feedback_types": [
                          {
                            "type": "rating"
                          }
                        ],
                        "team_id": "team_id",
                        "created_at": "2024-01-15T09:30:00Z",
                        "updated_at": "2024-01-15T09:30:00Z"
                      }
                    }
                  ],
                  "dataset": {
                    "id": "id",
                    "project_id": "project_id",
                    "name": "name",
                    "description": "description",
                    "datapoint_count": 1,
                    "created_at": "2024-01-15T09:30:00Z",
                    "updated_at": "2024-01-15T09:30:00Z"
                  },
                  "dataset_version_id": "dataset_version_id",
                  "dataset_snapshot": {
                    "id": "id",
                    "project_id": "project_id",
                    "name": "name",
                    "description": "description",
                    "datapoint_count": 1,
                    "created_at": "2024-01-15T09:30:00Z",
                    "updated_at": "2024-01-15T09:30:00Z"
                  },
                  "evaluator_aggregates": [
                    {
                      "model_config_id": "model_config_id",
                      "evaluator_id": "evaluator_id",
                      "evaluator_version_id": "evaluator_version_id",
                      "aggregate_value": 1.1
                    }
                  ]
                }
              },
              "codeSamples": []
            },
            {
              "path": "/projects/:project_id/evaluations",
              "pathParameters": {
                "project_id": ":project_id"
              },
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 422,
              "codeExamples": {
                "nodeAxios": ""
              },
              "requestBodyV3": {
                "type": "json",
                "value": {
                  "config_id": "string",
                  "evaluator_ids": ["string"],
                  "dataset_id": "string"
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "detail": [
                    {
                      "loc": ["string"],
                      "msg": "string",
                      "type": "string"
                    }
                  ]
                }
              },
              "codeSamples": []
            }
          ],
          "description": "Create an evaluation.",
          "authed": true
        },
        {
          "environments": [
            {
              "id": "Default",
              "baseUrl": "https://api.humanloop.com/v4"
            }
          ],
          "defaultEnvironment": "Default",
          "urlSlug": "log",
          "method": "POST",
          "id": "log",
          "originalEndpointId": "endpoint_evaluations.log",
          "name": "Log",
          "path": {
            "pathParameters": [
              {
                "description": "ID of the evaluation run. Starts with `evrun_`.",
                "key": "evaluation_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/evaluations/"
              },
              {
                "type": "pathParameter",
                "value": "evaluation_id"
              },
              {
                "type": "literal",
                "value": "/log"
              }
            ]
          },
          "queryParameters": [
            {
              "description": "String ID of evaluatee version to return. If not defined, the first evaluatee will be returned. Starts with `evv_`.",
              "key": "evaluatee_id",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          ],
          "headers": [],
          "request": {
            "contentType": "application/json",
            "type": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The datapoint for which a log was generated. Must be one of the datapoints in the dataset being evaluated.",
                  "key": "datapoint_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "The log generated for the datapoint.",
                  "key": "log",
                  "valueType": {
                    "type": "id",
                    "value": "type_:LogRequest"
                  }
                }
              ]
            }
          },
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "type_:CreateLogResponse"
              }
            }
          },
          "errors": [],
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "type_:HTTPValidationError"
                }
              },
              "statusCode": 422,
              "description": "Validation Error",
              "examples": []
            }
          ],
          "examples": [
            {
              "path": "/evaluations/evaluation_id/log",
              "pathParameters": {
                "evaluation_id": "evaluation_id"
              },
              "queryParameters": {},
              "headers": {},
              "requestBody": {
                "datapoint_id": "datapoint_id",
                "log": {}
              },
              "responseStatusCode": 200,
              "responseBody": {
                "id": "id",
                "project_id": "project_id",
                "session_id": "session_id"
              },
              "codeExamples": {
                "nodeAxios": ""
              },
              "requestBodyV3": {
                "type": "json",
                "value": {
                  "datapoint_id": "datapoint_id",
                  "log": {}
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "id": "id",
                  "project_id": "project_id",
                  "session_id": "session_id"
                }
              },
              "codeSamples": []
            },
            {
              "path": "/evaluations/:evaluation_id/log",
              "pathParameters": {
                "evaluation_id": ":evaluation_id"
              },
              "queryParameters": {
                "evaluatee_id": "string"
              },
              "headers": {},
              "responseStatusCode": 422,
              "codeExamples": {
                "nodeAxios": ""
              },
              "requestBodyV3": {
                "type": "json",
                "value": {
                  "datapoint_id": "string",
                  "log": {}
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "detail": [
                    {
                      "loc": ["string"],
                      "msg": "string",
                      "type": "string"
                    }
                  ]
                }
              },
              "codeSamples": []
            }
          ],
          "description": "Log an external generation to an evaluation run for a datapoint.\n\nThe run must have status 'running'.",
          "authed": true
        },
        {
          "environments": [
            {
              "id": "Default",
              "baseUrl": "https://api.humanloop.com/v4"
            }
          ],
          "defaultEnvironment": "Default",
          "urlSlug": "result",
          "method": "POST",
          "id": "result",
          "originalEndpointId": "endpoint_evaluations.result",
          "name": "Result",
          "path": {
            "pathParameters": [
              {
                "description": "ID of the evaluation run. Starts with `evrun_`.",
                "key": "evaluation_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/evaluations/"
              },
              {
                "type": "pathParameter",
                "value": "evaluation_id"
              },
              {
                "type": "literal",
                "value": "/result"
              }
            ]
          },
          "queryParameters": [
            {
              "description": "String ID of evaluatee version to return. If not defined, the first evaluatee will be returned. Starts with `evv_`.",
              "key": "evaluatee_id",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          ],
          "headers": [],
          "request": {
            "contentType": "application/json",
            "type": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The log that was evaluated. Must have as its `source_datapoint_id` one of the datapoints in the dataset being evaluated.",
                  "key": "log_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "ID of the evaluator that evaluated the log. Starts with `evfn_`. Must be one of the evaluator IDs associated with the evaluation run being logged to.",
                  "key": "evaluator_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "The result value of the evaluation.",
                  "key": "result",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_evaluations:CreateEvaluationResultLogRequestResult"
                    }
                  }
                },
                {
                  "description": "An error that occurred during evaluation.",
                  "key": "error",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              ]
            }
          },
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "type_:EvaluationResultResponse"
              }
            }
          },
          "errors": [],
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "type_:HTTPValidationError"
                }
              },
              "statusCode": 422,
              "description": "Validation Error",
              "examples": []
            }
          ],
          "examples": [
            {
              "path": "/evaluations/evaluation_id/result",
              "pathParameters": {
                "evaluation_id": "evaluation_id"
              },
              "queryParameters": {},
              "headers": {},
              "requestBody": {
                "log_id": "log_id",
                "evaluator_id": "evaluator_id"
              },
              "responseStatusCode": 200,
              "responseBody": {
                "id": "id",
                "evaluator_id": "evaluator_id",
                "evaluator_version_id": "evaluator_version_id",
                "evaluation_id": "evaluation_id",
                "log_id": "log_id",
                "log": {
                  "project": "project",
                  "project_id": "project_id",
                  "session_id": "session_id",
                  "session_reference_id": "session_reference_id",
                  "parent_id": "parent_id",
                  "parent_reference_id": "parent_reference_id",
                  "inputs": {
                    "key": "value"
                  },
                  "source": "source",
                  "metadata": {
                    "key": "value"
                  },
                  "save": true,
                  "source_datapoint_id": "source_datapoint_id",
                  "id": "id",
                  "reference_id": "reference_id",
                  "messages": [
                    {
                      "role": "user"
                    }
                  ],
                  "output": "output",
                  "judgment": true,
                  "config_id": "config_id",
                  "config": {
                    "type": "generic",
                    "id": "config",
                    "other": {
                      "key": "value"
                    },
                    "created_by": {
                      "id": "id",
                      "email_address": "email_address",
                      "verified": true
                    },
                    "status": "config",
                    "name": "config",
                    "description": "config"
                  },
                  "environment": "environment",
                  "feedback": [
                    {
                      "type": "rating",
                      "value": true,
                      "id": "id"
                    }
                  ],
                  "created_at": "2024-01-15T09:30:00Z",
                  "error": "error",
                  "stdout": "stdout",
                  "duration": 1.1,
                  "output_message": {
                    "content": "content",
                    "name": "name",
                    "tool_call_id": "tool_call_id",
                    "role": "user",
                    "tool_calls": [
                      {
                        "id": "id",
                        "type": "function",
                        "function": {
                          "name": "name"
                        }
                      }
                    ],
                    "tool_call": {
                      "name": "name"
                    }
                  },
                  "prompt_tokens": 1,
                  "output_tokens": 1,
                  "prompt_cost": 1.1,
                  "output_cost": 1.1,
                  "provider_request": {
                    "key": "value"
                  },
                  "provider_response": {
                    "key": "value"
                  },
                  "user": "user",
                  "provider_latency": 1.1,
                  "tokens": 1,
                  "raw_output": "raw_output",
                  "finish_reason": "finish_reason",
                  "tools": [
                    {
                      "id": "id",
                      "name": "name",
                      "signature": "signature",
                      "result": "result"
                    }
                  ],
                  "tool_choice": "none",
                  "evaluation_results": [],
                  "observability_status": "pending",
                  "updated_at": "2024-01-15T09:30:00Z",
                  "batch_ids": ["batch_ids"]
                },
                "version_id": "version_id",
                "version": {
                  "key": "value"
                },
                "value": true,
                "error": "error",
                "updated_at": "2024-01-15T09:30:00Z",
                "created_at": "2024-01-15T09:30:00Z",
                "evaluator_log": {
                  "project": "project",
                  "project_id": "project_id",
                  "session_id": "session_id",
                  "session_reference_id": "session_reference_id",
                  "parent_id": "parent_id",
                  "parent_reference_id": "parent_reference_id",
                  "inputs": {
                    "key": "value"
                  },
                  "source": "source",
                  "metadata": {
                    "key": "value"
                  },
                  "save": true,
                  "source_datapoint_id": "source_datapoint_id",
                  "id": "id",
                  "reference_id": "reference_id",
                  "messages": [
                    {
                      "role": "user"
                    }
                  ],
                  "output": "output",
                  "judgment": true,
                  "config_id": "config_id",
                  "config": {
                    "type": "generic",
                    "id": "config",
                    "other": {
                      "key": "value"
                    },
                    "created_by": {
                      "id": "id",
                      "email_address": "email_address",
                      "verified": true
                    },
                    "status": "config",
                    "name": "config",
                    "description": "config"
                  },
                  "environment": "environment",
                  "feedback": [
                    {
                      "type": "rating",
                      "value": true,
                      "id": "id"
                    }
                  ],
                  "created_at": "2024-01-15T09:30:00Z",
                  "error": "error",
                  "stdout": "stdout",
                  "duration": 1.1,
                  "output_message": {
                    "content": "content",
                    "name": "name",
                    "tool_call_id": "tool_call_id",
                    "role": "user",
                    "tool_calls": [
                      {
                        "id": "id",
                        "type": "function",
                        "function": {
                          "name": "name"
                        }
                      }
                    ],
                    "tool_call": {
                      "name": "name"
                    }
                  },
                  "prompt_tokens": 1,
                  "output_tokens": 1,
                  "prompt_cost": 1.1,
                  "output_cost": 1.1,
                  "provider_request": {
                    "key": "value"
                  },
                  "provider_response": {
                    "key": "value"
                  },
                  "user": "user",
                  "provider_latency": 1.1,
                  "tokens": 1,
                  "raw_output": "raw_output",
                  "finish_reason": "finish_reason",
                  "tools": [
                    {
                      "id": "id",
                      "name": "name",
                      "signature": "signature",
                      "result": "result"
                    }
                  ],
                  "tool_choice": "none",
                  "evaluation_results": [],
                  "observability_status": "pending",
                  "updated_at": "2024-01-15T09:30:00Z",
                  "batch_ids": ["batch_ids"]
                }
              },
              "codeExamples": {
                "nodeAxios": ""
              },
              "requestBodyV3": {
                "type": "json",
                "value": {
                  "log_id": "log_id",
                  "evaluator_id": "evaluator_id"
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "id": "id",
                  "evaluator_id": "evaluator_id",
                  "evaluator_version_id": "evaluator_version_id",
                  "evaluation_id": "evaluation_id",
                  "log_id": "log_id",
                  "log": {
                    "project": "project",
                    "project_id": "project_id",
                    "session_id": "session_id",
                    "session_reference_id": "session_reference_id",
                    "parent_id": "parent_id",
                    "parent_reference_id": "parent_reference_id",
                    "inputs": {
                      "key": "value"
                    },
                    "source": "source",
                    "metadata": {
                      "key": "value"
                    },
                    "save": true,
                    "source_datapoint_id": "source_datapoint_id",
                    "id": "id",
                    "reference_id": "reference_id",
                    "messages": [
                      {
                        "role": "user"
                      }
                    ],
                    "output": "output",
                    "judgment": true,
                    "config_id": "config_id",
                    "config": {
                      "type": "generic",
                      "id": "config",
                      "other": {
                        "key": "value"
                      },
                      "created_by": {
                        "id": "id",
                        "email_address": "email_address",
                        "verified": true
                      },
                      "status": "config",
                      "name": "config",
                      "description": "config"
                    },
                    "environment": "environment",
                    "feedback": [
                      {
                        "type": "rating",
                        "value": true,
                        "id": "id"
                      }
                    ],
                    "created_at": "2024-01-15T09:30:00Z",
                    "error": "error",
                    "stdout": "stdout",
                    "duration": 1.1,
                    "output_message": {
                      "content": "content",
                      "name": "name",
                      "tool_call_id": "tool_call_id",
                      "role": "user",
                      "tool_calls": [
                        {
                          "id": "id",
                          "type": "function",
                          "function": {
                            "name": "name"
                          }
                        }
                      ],
                      "tool_call": {
                        "name": "name"
                      }
                    },
                    "prompt_tokens": 1,
                    "output_tokens": 1,
                    "prompt_cost": 1.1,
                    "output_cost": 1.1,
                    "provider_request": {
                      "key": "value"
                    },
                    "provider_response": {
                      "key": "value"
                    },
                    "user": "user",
                    "provider_latency": 1.1,
                    "tokens": 1,
                    "raw_output": "raw_output",
                    "finish_reason": "finish_reason",
                    "tools": [
                      {
                        "id": "id",
                        "name": "name",
                        "signature": "signature",
                        "result": "result"
                      }
                    ],
                    "tool_choice": "none",
                    "evaluation_results": [],
                    "observability_status": "pending",
                    "updated_at": "2024-01-15T09:30:00Z",
                    "batch_ids": ["batch_ids"]
                  },
                  "version_id": "version_id",
                  "version": {
                    "key": "value"
                  },
                  "value": true,
                  "error": "error",
                  "updated_at": "2024-01-15T09:30:00Z",
                  "created_at": "2024-01-15T09:30:00Z",
                  "evaluator_log": {
                    "project": "project",
                    "project_id": "project_id",
                    "session_id": "session_id",
                    "session_reference_id": "session_reference_id",
                    "parent_id": "parent_id",
                    "parent_reference_id": "parent_reference_id",
                    "inputs": {
                      "key": "value"
                    },
                    "source": "source",
                    "metadata": {
                      "key": "value"
                    },
                    "save": true,
                    "source_datapoint_id": "source_datapoint_id",
                    "id": "id",
                    "reference_id": "reference_id",
                    "messages": [
                      {
                        "role": "user"
                      }
                    ],
                    "output": "output",
                    "judgment": true,
                    "config_id": "config_id",
                    "config": {
                      "type": "generic",
                      "id": "config",
                      "other": {
                        "key": "value"
                      },
                      "created_by": {
                        "id": "id",
                        "email_address": "email_address",
                        "verified": true
                      },
                      "status": "config",
                      "name": "config",
                      "description": "config"
                    },
                    "environment": "environment",
                    "feedback": [
                      {
                        "type": "rating",
                        "value": true,
                        "id": "id"
                      }
                    ],
                    "created_at": "2024-01-15T09:30:00Z",
                    "error": "error",
                    "stdout": "stdout",
                    "duration": 1.1,
                    "output_message": {
                      "content": "content",
                      "name": "name",
                      "tool_call_id": "tool_call_id",
                      "role": "user",
                      "tool_calls": [
                        {
                          "id": "id",
                          "type": "function",
                          "function": {
                            "name": "name"
                          }
                        }
                      ],
                      "tool_call": {
                        "name": "name"
                      }
                    },
                    "prompt_tokens": 1,
                    "output_tokens": 1,
                    "prompt_cost": 1.1,
                    "output_cost": 1.1,
                    "provider_request": {
                      "key": "value"
                    },
                    "provider_response": {
                      "key": "value"
                    },
                    "user": "user",
                    "provider_latency": 1.1,
                    "tokens": 1,
                    "raw_output": "raw_output",
                    "finish_reason": "finish_reason",
                    "tools": [
                      {
                        "id": "id",
                        "name": "name",
                        "signature": "signature",
                        "result": "result"
                      }
                    ],
                    "tool_choice": "none",
                    "evaluation_results": [],
                    "observability_status": "pending",
                    "updated_at": "2024-01-15T09:30:00Z",
                    "batch_ids": ["batch_ids"]
                  }
                }
              },
              "codeSamples": []
            },
            {
              "path": "/evaluations/:evaluation_id/result",
              "pathParameters": {
                "evaluation_id": ":evaluation_id"
              },
              "queryParameters": {
                "evaluatee_id": "string"
              },
              "headers": {},
              "responseStatusCode": 422,
              "codeExamples": {
                "nodeAxios": ""
              },
              "requestBodyV3": {
                "type": "json",
                "value": {
                  "log_id": "string",
                  "evaluator_id": "string"
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "detail": [
                    {
                      "loc": ["string"],
                      "msg": "string",
                      "type": "string"
                    }
                  ]
                }
              },
              "codeSamples": []
            }
          ],
          "description": "Log an evaluation result to an evaluation run.\n\nThe run must have status 'running'. One of `result` or `error` must be provided.",
          "authed": true
        },
        {
          "environments": [
            {
              "id": "Default",
              "baseUrl": "https://api.humanloop.com/v4"
            }
          ],
          "defaultEnvironment": "Default",
          "urlSlug": "update-status",
          "method": "PATCH",
          "id": "update_status",
          "originalEndpointId": "endpoint_evaluations.update_status",
          "name": "Update Status",
          "path": {
            "pathParameters": [
              {
                "description": "String ID of evaluation run. Starts with `ev_`.",
                "key": "id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/evaluations/"
              },
              {
                "type": "pathParameter",
                "value": "id"
              },
              {
                "type": "literal",
                "value": "/status"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "request": {
            "contentType": "application/json",
            "type": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The new status of the evaluation.",
                  "key": "status",
                  "valueType": {
                    "type": "id",
                    "value": "type_:EvaluationStatus"
                  }
                }
              ]
            }
          },
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "type_:EvaluationResponse"
              }
            }
          },
          "errors": [],
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "type_:HTTPValidationError"
                }
              },
              "statusCode": 422,
              "description": "Validation Error",
              "examples": []
            }
          ],
          "examples": [
            {
              "path": "/evaluations/id/status",
              "pathParameters": {
                "id": "id"
              },
              "queryParameters": {},
              "headers": {},
              "requestBody": {
                "status": "pending"
              },
              "responseStatusCode": 200,
              "responseBody": {
                "id": "id",
                "status": "pending",
                "config": {
                  "type": "generic",
                  "id": "config",
                  "other": {
                    "key": "value"
                  },
                  "created_by": {
                    "id": "id",
                    "email_address": "email_address",
                    "full_name": "full_name",
                    "verified": true
                  },
                  "status": "config",
                  "name": "config",
                  "description": "config"
                },
                "created_at": "2024-01-15T09:30:00Z",
                "updated_at": "2024-01-15T09:30:00Z",
                "evaluators": [
                  {
                    "name": "name",
                    "description": "description",
                    "arguments_type": "target_free",
                    "return_type": "boolean",
                    "code": "code",
                    "model_config": {
                      "id": "id",
                      "model": "model"
                    },
                    "type": "python",
                    "id": "id",
                    "created_at": "2024-01-15T09:30:00Z",
                    "updated_at": "2024-01-15T09:30:00Z",
                    "logging_project": {
                      "id": "id",
                      "name": "name",
                      "users": [
                        {
                          "id": "id",
                          "email_address": "email_address"
                        }
                      ],
                      "data_count": 1,
                      "feedback_types": [
                        {
                          "type": "rating"
                        }
                      ],
                      "team_id": "team_id",
                      "created_at": "2024-01-15T09:30:00Z",
                      "updated_at": "2024-01-15T09:30:00Z"
                    }
                  }
                ],
                "dataset": {
                  "id": "id",
                  "project_id": "project_id",
                  "name": "name",
                  "description": "description",
                  "datapoint_count": 1,
                  "created_at": "2024-01-15T09:30:00Z",
                  "updated_at": "2024-01-15T09:30:00Z"
                },
                "dataset_version_id": "dataset_version_id",
                "dataset_snapshot": {
                  "id": "id",
                  "project_id": "project_id",
                  "name": "name",
                  "description": "description",
                  "datapoint_count": 1,
                  "created_at": "2024-01-15T09:30:00Z",
                  "updated_at": "2024-01-15T09:30:00Z"
                },
                "evaluator_aggregates": [
                  {
                    "model_config_id": "model_config_id",
                    "evaluator_id": "evaluator_id",
                    "evaluator_version_id": "evaluator_version_id",
                    "aggregate_value": 1.1
                  }
                ]
              },
              "codeExamples": {
                "nodeAxios": ""
              },
              "requestBodyV3": {
                "type": "json",
                "value": {
                  "status": "pending"
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "id": "id",
                  "status": "pending",
                  "config": {
                    "type": "generic",
                    "id": "config",
                    "other": {
                      "key": "value"
                    },
                    "created_by": {
                      "id": "id",
                      "email_address": "email_address",
                      "full_name": "full_name",
                      "verified": true
                    },
                    "status": "config",
                    "name": "config",
                    "description": "config"
                  },
                  "created_at": "2024-01-15T09:30:00Z",
                  "updated_at": "2024-01-15T09:30:00Z",
                  "evaluators": [
                    {
                      "name": "name",
                      "description": "description",
                      "arguments_type": "target_free",
                      "return_type": "boolean",
                      "code": "code",
                      "model_config": {
                        "id": "id",
                        "model": "model"
                      },
                      "type": "python",
                      "id": "id",
                      "created_at": "2024-01-15T09:30:00Z",
                      "updated_at": "2024-01-15T09:30:00Z",
                      "logging_project": {
                        "id": "id",
                        "name": "name",
                        "users": [
                          {
                            "id": "id",
                            "email_address": "email_address"
                          }
                        ],
                        "data_count": 1,
                        "feedback_types": [
                          {
                            "type": "rating"
                          }
                        ],
                        "team_id": "team_id",
                        "created_at": "2024-01-15T09:30:00Z",
                        "updated_at": "2024-01-15T09:30:00Z"
                      }
                    }
                  ],
                  "dataset": {
                    "id": "id",
                    "project_id": "project_id",
                    "name": "name",
                    "description": "description",
                    "datapoint_count": 1,
                    "created_at": "2024-01-15T09:30:00Z",
                    "updated_at": "2024-01-15T09:30:00Z"
                  },
                  "dataset_version_id": "dataset_version_id",
                  "dataset_snapshot": {
                    "id": "id",
                    "project_id": "project_id",
                    "name": "name",
                    "description": "description",
                    "datapoint_count": 1,
                    "created_at": "2024-01-15T09:30:00Z",
                    "updated_at": "2024-01-15T09:30:00Z"
                  },
                  "evaluator_aggregates": [
                    {
                      "model_config_id": "model_config_id",
                      "evaluator_id": "evaluator_id",
                      "evaluator_version_id": "evaluator_version_id",
                      "aggregate_value": 1.1
                    }
                  ]
                }
              },
              "codeSamples": []
            },
            {
              "path": "/evaluations/:id/status",
              "pathParameters": {
                "id": ":id"
              },
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 422,
              "codeExamples": {
                "nodeAxios": ""
              },
              "requestBodyV3": {
                "type": "json",
                "value": {
                  "status": "pending"
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "detail": [
                    {
                      "loc": ["string"],
                      "msg": "string",
                      "type": "string"
                    }
                  ]
                }
              },
              "codeSamples": []
            }
          ],
          "description": "Update the status of an evaluation run.\n\nCan only be used to update the status of an evaluation run that uses external or human evaluators.\nThe evaluation must currently have status 'running' if swithcing to completed, or it must have status\n'completed' if switching back to 'running'.",
          "authed": true
        },
        {
          "environments": [
            {
              "id": "Default",
              "baseUrl": "https://api.humanloop.com/v4"
            }
          ],
          "defaultEnvironment": "Default",
          "urlSlug": "add-evaluators",
          "method": "PATCH",
          "id": "add_evaluators",
          "originalEndpointId": "endpoint_evaluations.add_evaluators",
          "name": "Add Evaluators",
          "path": {
            "pathParameters": [
              {
                "description": "String ID of evaluation run. Starts with `ev_`.",
                "key": "id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/evaluations/"
              },
              {
                "type": "pathParameter",
                "value": "id"
              },
              {
                "type": "literal",
                "value": "/evaluators"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "request": {
            "contentType": "application/json",
            "type": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "IDs of evaluators to add to the evaluation run. IDs start with `evfn_`",
                  "key": "evaluator_ids",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                {
                  "description": "IDs of the evaluator versions to add to the evaluation run. IDs start with `evv_`",
                  "key": "evaluator_version_ids",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              ]
            }
          },
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "type_:EvaluationResponse"
              }
            }
          },
          "errors": [],
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "type_:HTTPValidationError"
                }
              },
              "statusCode": 422,
              "description": "Validation Error",
              "examples": []
            }
          ],
          "examples": [
            {
              "path": "/evaluations/id/evaluators",
              "pathParameters": {
                "id": "id"
              },
              "queryParameters": {},
              "headers": {},
              "requestBody": {},
              "responseStatusCode": 200,
              "responseBody": {
                "id": "id",
                "status": "pending",
                "config": {
                  "type": "generic",
                  "id": "config",
                  "other": {
                    "key": "value"
                  },
                  "created_by": {
                    "id": "id",
                    "email_address": "email_address",
                    "full_name": "full_name",
                    "verified": true
                  },
                  "status": "config",
                  "name": "config",
                  "description": "config"
                },
                "created_at": "2024-01-15T09:30:00Z",
                "updated_at": "2024-01-15T09:30:00Z",
                "evaluators": [
                  {
                    "name": "name",
                    "description": "description",
                    "arguments_type": "target_free",
                    "return_type": "boolean",
                    "code": "code",
                    "model_config": {
                      "id": "id",
                      "model": "model"
                    },
                    "type": "python",
                    "id": "id",
                    "created_at": "2024-01-15T09:30:00Z",
                    "updated_at": "2024-01-15T09:30:00Z",
                    "logging_project": {
                      "id": "id",
                      "name": "name",
                      "users": [
                        {
                          "id": "id",
                          "email_address": "email_address"
                        }
                      ],
                      "data_count": 1,
                      "feedback_types": [
                        {
                          "type": "rating"
                        }
                      ],
                      "team_id": "team_id",
                      "created_at": "2024-01-15T09:30:00Z",
                      "updated_at": "2024-01-15T09:30:00Z"
                    }
                  }
                ],
                "dataset": {
                  "id": "id",
                  "project_id": "project_id",
                  "name": "name",
                  "description": "description",
                  "datapoint_count": 1,
                  "created_at": "2024-01-15T09:30:00Z",
                  "updated_at": "2024-01-15T09:30:00Z"
                },
                "dataset_version_id": "dataset_version_id",
                "dataset_snapshot": {
                  "id": "id",
                  "project_id": "project_id",
                  "name": "name",
                  "description": "description",
                  "datapoint_count": 1,
                  "created_at": "2024-01-15T09:30:00Z",
                  "updated_at": "2024-01-15T09:30:00Z"
                },
                "evaluator_aggregates": [
                  {
                    "model_config_id": "model_config_id",
                    "evaluator_id": "evaluator_id",
                    "evaluator_version_id": "evaluator_version_id",
                    "aggregate_value": 1.1
                  }
                ]
              },
              "codeExamples": {
                "nodeAxios": ""
              },
              "requestBodyV3": {
                "type": "json",
                "value": {}
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "id": "id",
                  "status": "pending",
                  "config": {
                    "type": "generic",
                    "id": "config",
                    "other": {
                      "key": "value"
                    },
                    "created_by": {
                      "id": "id",
                      "email_address": "email_address",
                      "full_name": "full_name",
                      "verified": true
                    },
                    "status": "config",
                    "name": "config",
                    "description": "config"
                  },
                  "created_at": "2024-01-15T09:30:00Z",
                  "updated_at": "2024-01-15T09:30:00Z",
                  "evaluators": [
                    {
                      "name": "name",
                      "description": "description",
                      "arguments_type": "target_free",
                      "return_type": "boolean",
                      "code": "code",
                      "model_config": {
                        "id": "id",
                        "model": "model"
                      },
                      "type": "python",
                      "id": "id",
                      "created_at": "2024-01-15T09:30:00Z",
                      "updated_at": "2024-01-15T09:30:00Z",
                      "logging_project": {
                        "id": "id",
                        "name": "name",
                        "users": [
                          {
                            "id": "id",
                            "email_address": "email_address"
                          }
                        ],
                        "data_count": 1,
                        "feedback_types": [
                          {
                            "type": "rating"
                          }
                        ],
                        "team_id": "team_id",
                        "created_at": "2024-01-15T09:30:00Z",
                        "updated_at": "2024-01-15T09:30:00Z"
                      }
                    }
                  ],
                  "dataset": {
                    "id": "id",
                    "project_id": "project_id",
                    "name": "name",
                    "description": "description",
                    "datapoint_count": 1,
                    "created_at": "2024-01-15T09:30:00Z",
                    "updated_at": "2024-01-15T09:30:00Z"
                  },
                  "dataset_version_id": "dataset_version_id",
                  "dataset_snapshot": {
                    "id": "id",
                    "project_id": "project_id",
                    "name": "name",
                    "description": "description",
                    "datapoint_count": 1,
                    "created_at": "2024-01-15T09:30:00Z",
                    "updated_at": "2024-01-15T09:30:00Z"
                  },
                  "evaluator_aggregates": [
                    {
                      "model_config_id": "model_config_id",
                      "evaluator_id": "evaluator_id",
                      "evaluator_version_id": "evaluator_version_id",
                      "aggregate_value": 1.1
                    }
                  ]
                }
              },
              "codeSamples": []
            },
            {
              "path": "/evaluations/:id/evaluators",
              "pathParameters": {
                "id": ":id"
              },
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 422,
              "codeExamples": {
                "nodeAxios": ""
              },
              "requestBodyV3": {
                "type": "json",
                "value": {}
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "detail": [
                    {
                      "loc": ["string"],
                      "msg": "string",
                      "type": "string"
                    }
                  ]
                }
              },
              "codeSamples": []
            }
          ],
          "description": "Add evaluators to an existing evaluation run.",
          "authed": true
        },
        {
          "environments": [
            {
              "id": "Default",
              "baseUrl": "https://api.humanloop.com/v4"
            }
          ],
          "defaultEnvironment": "Default",
          "urlSlug": "list",
          "migratedFromUrlSlugs": ["get-evaluations"],
          "method": "GET",
          "id": "list",
          "originalEndpointId": "endpoint_evaluations.list",
          "name": "Get Evaluations",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/evaluations"
              }
            ]
          },
          "queryParameters": [
            {
              "description": "String ID of project. Starts with `pr_`.",
              "key": "project_id",
              "type": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            {
              "description": "A list of evaluation run ids to filter on. Starts with `ev_`.",
              "key": "id",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "description": "Only return evaluations created after this date.",
              "key": "start_date",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "description": "Only return evaluations created before this date.",
              "key": "end_date",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "key": "size",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              }
            },
            {
              "key": "page",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              }
            },
            {
              "description": "String ID of evaluatee version to return. If not defined, the first evaluatee will be returned. Starts with `evv_`.",
              "key": "evaluatee_id",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          ],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "type_:PaginatedDataEvaluationResponse"
              }
            }
          },
          "errors": [],
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "type_:HTTPValidationError"
                }
              },
              "statusCode": 422,
              "description": "Validation Error",
              "examples": []
            }
          ],
          "examples": [
            {
              "path": "/evaluations",
              "pathParameters": {},
              "queryParameters": {
                "project_id": "project_id"
              },
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "records": [
                  {
                    "id": "id",
                    "status": "pending",
                    "config": {
                      "type": "generic",
                      "id": "config",
                      "status": "config",
                      "name": "config"
                    },
                    "created_at": "2024-01-15T09:30:00Z",
                    "updated_at": "2024-01-15T09:30:00Z",
                    "evaluators": [
                      {
                        "name": "name",
                        "description": "description",
                        "arguments_type": "target_free",
                        "return_type": "boolean",
                        "type": "python",
                        "id": "id",
                        "created_at": "2024-01-15T09:30:00Z",
                        "updated_at": "2024-01-15T09:30:00Z"
                      }
                    ],
                    "dataset": {
                      "id": "id",
                      "project_id": "project_id",
                      "name": "name",
                      "datapoint_count": 1,
                      "created_at": "2024-01-15T09:30:00Z",
                      "updated_at": "2024-01-15T09:30:00Z"
                    },
                    "dataset_version_id": "dataset_version_id",
                    "dataset_snapshot": {
                      "id": "id",
                      "project_id": "project_id",
                      "name": "name",
                      "datapoint_count": 1,
                      "created_at": "2024-01-15T09:30:00Z",
                      "updated_at": "2024-01-15T09:30:00Z"
                    },
                    "evaluator_aggregates": [
                      {
                        "model_config_id": "model_config_id",
                        "evaluator_id": "evaluator_id",
                        "evaluator_version_id": "evaluator_version_id"
                      }
                    ]
                  }
                ],
                "page": 1,
                "size": 1,
                "total": 1
              },
              "codeExamples": {
                "nodeAxios": ""
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "records": [
                    {
                      "id": "id",
                      "status": "pending",
                      "config": {
                        "type": "generic",
                        "id": "config",
                        "status": "config",
                        "name": "config"
                      },
                      "created_at": "2024-01-15T09:30:00Z",
                      "updated_at": "2024-01-15T09:30:00Z",
                      "evaluators": [
                        {
                          "name": "name",
                          "description": "description",
                          "arguments_type": "target_free",
                          "return_type": "boolean",
                          "type": "python",
                          "id": "id",
                          "created_at": "2024-01-15T09:30:00Z",
                          "updated_at": "2024-01-15T09:30:00Z"
                        }
                      ],
                      "dataset": {
                        "id": "id",
                        "project_id": "project_id",
                        "name": "name",
                        "datapoint_count": 1,
                        "created_at": "2024-01-15T09:30:00Z",
                        "updated_at": "2024-01-15T09:30:00Z"
                      },
                      "dataset_version_id": "dataset_version_id",
                      "dataset_snapshot": {
                        "id": "id",
                        "project_id": "project_id",
                        "name": "name",
                        "datapoint_count": 1,
                        "created_at": "2024-01-15T09:30:00Z",
                        "updated_at": "2024-01-15T09:30:00Z"
                      },
                      "evaluator_aggregates": [
                        {
                          "model_config_id": "model_config_id",
                          "evaluator_id": "evaluator_id",
                          "evaluator_version_id": "evaluator_version_id"
                        }
                      ]
                    }
                  ],
                  "page": 1,
                  "size": 1,
                  "total": 1
                }
              },
              "codeSamples": []
            },
            {
              "path": "/evaluations",
              "pathParameters": {},
              "queryParameters": {
                "project_id": "string",
                "id": "string",
                "start_date": "string"
              },
              "headers": {},
              "responseStatusCode": 422,
              "codeExamples": {
                "nodeAxios": ""
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "detail": [
                    {
                      "loc": ["string"],
                      "msg": "string",
                      "type": "string"
                    }
                  ]
                }
              },
              "codeSamples": []
            }
          ],
          "description": "Get the evaluations associated with a project.\n\nSorting and filtering are supported through query params for categorical columns\nand the `created_at` timestamp.\n\nSorting is supported for the `dataset`, `config`, `status` and `evaluator-{evaluator_id}` columns.\nSpecify sorting with the `sort` query param, with values `{column}.{ordering}`.\nE.g. ?sort=dataset.asc&sort=status.desc will yield a multi-column sort. First by dataset then by status.\n\nFiltering is supported for the `id`, `dataset`, `config` and `status` columns.\n\nSpecify filtering with the `id_filter`, `dataset_filter`, `config_filter` and `status_filter` query params.\n\nE.g. ?dataset_filter=my_dataset&dataset_filter=my_other_dataset&status_filter=running\nwill only show rows where the dataset is \"my_dataset\" or \"my_other_dataset\", and where the status is \"running\".\n\nAn additional date range filter is supported for the `created_at` column. Use the `start_date` and `end_date`\nquery parameters to configure this.",
          "authed": true
        }
      ],
      "types": ["type_evaluations:CreateEvaluationResultLogRequestResult"],
      "subpackages": [],
      "urlSlug": "evaluations",
      "webhooks": [],
      "websockets": []
    },
    "subpackage_evaluators": {
      "subpackageId": "subpackage_evaluators",
      "name": "evaluators",
      "endpoints": [
        {
          "environments": [
            {
              "id": "Default",
              "baseUrl": "https://api.humanloop.com/v4"
            }
          ],
          "defaultEnvironment": "Default",
          "urlSlug": "list",
          "method": "GET",
          "id": "list",
          "originalEndpointId": "endpoint_evaluators.list",
          "name": "List",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/evaluators"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "list",
                "itemType": {
                  "type": "id",
                  "value": "type_:EvaluatorResponse"
                }
              }
            }
          },
          "errors": [],
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "type_:HTTPValidationError"
                }
              },
              "statusCode": 422,
              "description": "Validation Error",
              "examples": []
            }
          ],
          "examples": [
            {
              "path": "/evaluators",
              "pathParameters": {},
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": [
                {
                  "name": "name",
                  "description": "description",
                  "arguments_type": "target_free",
                  "return_type": "boolean",
                  "code": "code",
                  "model_config": {
                    "id": "id",
                    "other": {
                      "key": "value"
                    },
                    "name": "name",
                    "description": "description",
                    "provider": "openai",
                    "model": "model",
                    "max_tokens": 1,
                    "temperature": 1.1,
                    "top_p": 1.1,
                    "stop": "stop",
                    "presence_penalty": 1.1,
                    "frequency_penalty": 1.1,
                    "seed": 1,
                    "response_format": {
                      "type": "json_object"
                    },
                    "prompt_template": "prompt_template",
                    "chat_template": [
                      {
                        "role": "user"
                      }
                    ],
                    "tool_configs": [
                      {
                        "id": "id",
                        "status": "status",
                        "name": "name"
                      }
                    ],
                    "tools": [
                      {
                        "id": "id",
                        "name": "name"
                      }
                    ],
                    "endpoint": "complete"
                  },
                  "type": "python",
                  "id": "id",
                  "created_at": "2024-01-15T09:30:00Z",
                  "updated_at": "2024-01-15T09:30:00Z",
                  "logging_project": {
                    "id": "id",
                    "name": "name",
                    "active_config": {
                      "project_id": "project_id",
                      "project_name": "project_name",
                      "created_at": "2024-01-15T09:30:00Z",
                      "updated_at": "2024-01-15T09:30:00Z",
                      "last_used": "2024-01-15T09:30:00Z",
                      "config": {
                        "type": "generic",
                        "id": "config",
                        "status": "config",
                        "name": "config"
                      }
                    },
                    "users": [
                      {
                        "id": "id",
                        "email_address": "email_address"
                      }
                    ],
                    "data_count": 1,
                    "feedback_types": [
                      {
                        "type": "rating"
                      }
                    ],
                    "team_id": "team_id",
                    "config_type": "generic",
                    "directory_id": "directory_id",
                    "created_at": "2024-01-15T09:30:00Z",
                    "updated_at": "2024-01-15T09:30:00Z"
                  }
                }
              ],
              "codeExamples": {
                "nodeAxios": ""
              },
              "responseBodyV3": {
                "type": "json",
                "value": [
                  {
                    "name": "name",
                    "description": "description",
                    "arguments_type": "target_free",
                    "return_type": "boolean",
                    "code": "code",
                    "model_config": {
                      "id": "id",
                      "other": {
                        "key": "value"
                      },
                      "name": "name",
                      "description": "description",
                      "provider": "openai",
                      "model": "model",
                      "max_tokens": 1,
                      "temperature": 1.1,
                      "top_p": 1.1,
                      "stop": "stop",
                      "presence_penalty": 1.1,
                      "frequency_penalty": 1.1,
                      "seed": 1,
                      "response_format": {
                        "type": "json_object"
                      },
                      "prompt_template": "prompt_template",
                      "chat_template": [
                        {
                          "role": "user"
                        }
                      ],
                      "tool_configs": [
                        {
                          "id": "id",
                          "status": "status",
                          "name": "name"
                        }
                      ],
                      "tools": [
                        {
                          "id": "id",
                          "name": "name"
                        }
                      ],
                      "endpoint": "complete"
                    },
                    "type": "python",
                    "id": "id",
                    "created_at": "2024-01-15T09:30:00Z",
                    "updated_at": "2024-01-15T09:30:00Z",
                    "logging_project": {
                      "id": "id",
                      "name": "name",
                      "active_config": {
                        "project_id": "project_id",
                        "project_name": "project_name",
                        "created_at": "2024-01-15T09:30:00Z",
                        "updated_at": "2024-01-15T09:30:00Z",
                        "last_used": "2024-01-15T09:30:00Z",
                        "config": {
                          "type": "generic",
                          "id": "config",
                          "status": "config",
                          "name": "config"
                        }
                      },
                      "users": [
                        {
                          "id": "id",
                          "email_address": "email_address"
                        }
                      ],
                      "data_count": 1,
                      "feedback_types": [
                        {
                          "type": "rating"
                        }
                      ],
                      "team_id": "team_id",
                      "config_type": "generic",
                      "directory_id": "directory_id",
                      "created_at": "2024-01-15T09:30:00Z",
                      "updated_at": "2024-01-15T09:30:00Z"
                    }
                  }
                ]
              },
              "codeSamples": []
            },
            {
              "path": "/evaluators",
              "pathParameters": {},
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 422,
              "codeExamples": {
                "nodeAxios": ""
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "detail": [
                    {
                      "loc": ["string"],
                      "msg": "string",
                      "type": "string"
                    }
                  ]
                }
              },
              "codeSamples": []
            }
          ],
          "description": "Get all evaluators within your organization.",
          "authed": true
        },
        {
          "environments": [
            {
              "id": "Default",
              "baseUrl": "https://api.humanloop.com/v4"
            }
          ],
          "defaultEnvironment": "Default",
          "urlSlug": "create",
          "method": "POST",
          "id": "create",
          "originalEndpointId": "endpoint_evaluators.create",
          "name": "Create",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/evaluators"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "request": {
            "contentType": "application/json",
            "type": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The name of the evaluator.",
                  "key": "name",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 1
                    }
                  }
                },
                {
                  "description": "The description of the evaluator.",
                  "key": "description",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "Whether this evaluator is target-free or target-required.",
                  "key": "arguments_type",
                  "valueType": {
                    "type": "id",
                    "value": "type_:EvaluatorArgumentsType"
                  }
                },
                {
                  "description": "The type of the return value of the evaluator.",
                  "key": "return_type",
                  "valueType": {
                    "type": "id",
                    "value": "type_:EvaluatorReturnTypeEnum"
                  }
                },
                {
                  "description": "The code for the evaluator. This code will be executed in a sandboxed environment.",
                  "key": "code",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "The model configuration used to generate.",
                  "key": "model_config",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:ModelConfigCompletionRequest"
                    }
                  }
                },
                {
                  "description": "The type of the evaluator.",
                  "key": "type",
                  "valueType": {
                    "type": "id",
                    "value": "type_:EvaluatorType"
                  }
                }
              ]
            }
          },
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "type_:EvaluatorResponse"
              }
            }
          },
          "errors": [],
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "type_:HTTPValidationError"
                }
              },
              "statusCode": 422,
              "description": "Validation Error",
              "examples": []
            }
          ],
          "examples": [
            {
              "path": "/evaluators",
              "pathParameters": {},
              "queryParameters": {},
              "headers": {},
              "requestBody": {
                "name": "name",
                "description": "description",
                "arguments_type": "target_free",
                "return_type": "boolean",
                "type": "python"
              },
              "responseStatusCode": 200,
              "responseBody": {
                "name": "name",
                "description": "description",
                "arguments_type": "target_free",
                "return_type": "boolean",
                "code": "code",
                "model_config": {
                  "id": "id",
                  "other": {
                    "key": "value"
                  },
                  "name": "name",
                  "description": "description",
                  "provider": "openai",
                  "model": "model",
                  "max_tokens": 1,
                  "temperature": 1.1,
                  "top_p": 1.1,
                  "stop": "stop",
                  "presence_penalty": 1.1,
                  "frequency_penalty": 1.1,
                  "seed": 1,
                  "response_format": {
                    "type": "json_object",
                    "json_schema": {
                      "key": "value"
                    }
                  },
                  "prompt_template": "prompt_template",
                  "chat_template": [
                    {
                      "role": "user"
                    }
                  ],
                  "tool_configs": [
                    {
                      "id": "id",
                      "status": "status",
                      "name": "name"
                    }
                  ],
                  "tools": [
                    {
                      "id": "id",
                      "name": "name"
                    }
                  ],
                  "endpoint": "complete"
                },
                "type": "python",
                "id": "id",
                "created_at": "2024-01-15T09:30:00Z",
                "updated_at": "2024-01-15T09:30:00Z",
                "logging_project": {
                  "id": "id",
                  "name": "name",
                  "active_config": {
                    "project_id": "project_id",
                    "project_name": "project_name",
                    "created_at": "2024-01-15T09:30:00Z",
                    "updated_at": "2024-01-15T09:30:00Z",
                    "last_used": "2024-01-15T09:30:00Z",
                    "num_datapoints": 1,
                    "evaluation_aggregates": [
                      {
                        "model_config_id": "model_config_id",
                        "evaluator_id": "evaluator_id",
                        "evaluator_version_id": "evaluator_version_id"
                      }
                    ],
                    "config": {
                      "type": "generic",
                      "id": "config",
                      "status": "config",
                      "name": "config"
                    }
                  },
                  "users": [
                    {
                      "id": "id",
                      "email_address": "email_address"
                    }
                  ],
                  "data_count": 1,
                  "feedback_types": [
                    {
                      "type": "rating"
                    }
                  ],
                  "team_id": "team_id",
                  "config_type": "generic",
                  "directory_id": "directory_id",
                  "created_at": "2024-01-15T09:30:00Z",
                  "updated_at": "2024-01-15T09:30:00Z"
                }
              },
              "codeExamples": {
                "nodeAxios": ""
              },
              "requestBodyV3": {
                "type": "json",
                "value": {
                  "name": "name",
                  "description": "description",
                  "arguments_type": "target_free",
                  "return_type": "boolean",
                  "type": "python"
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "name": "name",
                  "description": "description",
                  "arguments_type": "target_free",
                  "return_type": "boolean",
                  "code": "code",
                  "model_config": {
                    "id": "id",
                    "other": {
                      "key": "value"
                    },
                    "name": "name",
                    "description": "description",
                    "provider": "openai",
                    "model": "model",
                    "max_tokens": 1,
                    "temperature": 1.1,
                    "top_p": 1.1,
                    "stop": "stop",
                    "presence_penalty": 1.1,
                    "frequency_penalty": 1.1,
                    "seed": 1,
                    "response_format": {
                      "type": "json_object",
                      "json_schema": {
                        "key": "value"
                      }
                    },
                    "prompt_template": "prompt_template",
                    "chat_template": [
                      {
                        "role": "user"
                      }
                    ],
                    "tool_configs": [
                      {
                        "id": "id",
                        "status": "status",
                        "name": "name"
                      }
                    ],
                    "tools": [
                      {
                        "id": "id",
                        "name": "name"
                      }
                    ],
                    "endpoint": "complete"
                  },
                  "type": "python",
                  "id": "id",
                  "created_at": "2024-01-15T09:30:00Z",
                  "updated_at": "2024-01-15T09:30:00Z",
                  "logging_project": {
                    "id": "id",
                    "name": "name",
                    "active_config": {
                      "project_id": "project_id",
                      "project_name": "project_name",
                      "created_at": "2024-01-15T09:30:00Z",
                      "updated_at": "2024-01-15T09:30:00Z",
                      "last_used": "2024-01-15T09:30:00Z",
                      "num_datapoints": 1,
                      "evaluation_aggregates": [
                        {
                          "model_config_id": "model_config_id",
                          "evaluator_id": "evaluator_id",
                          "evaluator_version_id": "evaluator_version_id"
                        }
                      ],
                      "config": {
                        "type": "generic",
                        "id": "config",
                        "status": "config",
                        "name": "config"
                      }
                    },
                    "users": [
                      {
                        "id": "id",
                        "email_address": "email_address"
                      }
                    ],
                    "data_count": 1,
                    "feedback_types": [
                      {
                        "type": "rating"
                      }
                    ],
                    "team_id": "team_id",
                    "config_type": "generic",
                    "directory_id": "directory_id",
                    "created_at": "2024-01-15T09:30:00Z",
                    "updated_at": "2024-01-15T09:30:00Z"
                  }
                }
              },
              "codeSamples": []
            },
            {
              "path": "/evaluators",
              "pathParameters": {},
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 422,
              "codeExamples": {
                "nodeAxios": ""
              },
              "requestBodyV3": {
                "type": "json",
                "value": {
                  "name": "string",
                  "description": "string",
                  "arguments_type": "target_free",
                  "return_type": "boolean",
                  "type": "python"
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "detail": [
                    {
                      "loc": ["string"],
                      "msg": "string",
                      "type": "string"
                    }
                  ]
                }
              },
              "codeSamples": []
            }
          ],
          "description": "Create an evaluator within your organization.",
          "authed": true
        },
        {
          "environments": [
            {
              "id": "Default",
              "baseUrl": "https://api.humanloop.com/v4"
            }
          ],
          "defaultEnvironment": "Default",
          "urlSlug": "get",
          "method": "GET",
          "id": "get",
          "originalEndpointId": "endpoint_evaluators.get",
          "name": "Get",
          "path": {
            "pathParameters": [
              {
                "key": "id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/evaluators/"
              },
              {
                "type": "pathParameter",
                "value": "id"
              },
              {
                "type": "literal",
                "value": ""
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "type_:EvaluatorResponse"
              }
            }
          },
          "errors": [],
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "type_:HTTPValidationError"
                }
              },
              "statusCode": 422,
              "description": "Validation Error",
              "examples": []
            }
          ],
          "examples": [
            {
              "path": "/evaluators/id",
              "pathParameters": {
                "id": "id"
              },
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "name": "name",
                "description": "description",
                "arguments_type": "target_free",
                "return_type": "boolean",
                "code": "code",
                "model_config": {
                  "id": "id",
                  "other": {
                    "key": "value"
                  },
                  "name": "name",
                  "description": "description",
                  "provider": "openai",
                  "model": "model",
                  "max_tokens": 1,
                  "temperature": 1.1,
                  "top_p": 1.1,
                  "stop": "stop",
                  "presence_penalty": 1.1,
                  "frequency_penalty": 1.1,
                  "seed": 1,
                  "response_format": {
                    "type": "json_object",
                    "json_schema": {
                      "key": "value"
                    }
                  },
                  "prompt_template": "prompt_template",
                  "chat_template": [
                    {
                      "role": "user"
                    }
                  ],
                  "tool_configs": [
                    {
                      "id": "id",
                      "status": "status",
                      "name": "name"
                    }
                  ],
                  "tools": [
                    {
                      "id": "id",
                      "name": "name"
                    }
                  ],
                  "endpoint": "complete"
                },
                "type": "python",
                "id": "id",
                "created_at": "2024-01-15T09:30:00Z",
                "updated_at": "2024-01-15T09:30:00Z",
                "logging_project": {
                  "id": "id",
                  "name": "name",
                  "active_config": {
                    "project_id": "project_id",
                    "project_name": "project_name",
                    "created_at": "2024-01-15T09:30:00Z",
                    "updated_at": "2024-01-15T09:30:00Z",
                    "last_used": "2024-01-15T09:30:00Z",
                    "num_datapoints": 1,
                    "evaluation_aggregates": [
                      {
                        "model_config_id": "model_config_id",
                        "evaluator_id": "evaluator_id",
                        "evaluator_version_id": "evaluator_version_id"
                      }
                    ],
                    "config": {
                      "type": "generic",
                      "id": "config",
                      "status": "config",
                      "name": "config"
                    }
                  },
                  "users": [
                    {
                      "id": "id",
                      "email_address": "email_address"
                    }
                  ],
                  "data_count": 1,
                  "feedback_types": [
                    {
                      "type": "rating"
                    }
                  ],
                  "team_id": "team_id",
                  "config_type": "generic",
                  "directory_id": "directory_id",
                  "created_at": "2024-01-15T09:30:00Z",
                  "updated_at": "2024-01-15T09:30:00Z"
                }
              },
              "codeExamples": {
                "nodeAxios": ""
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "name": "name",
                  "description": "description",
                  "arguments_type": "target_free",
                  "return_type": "boolean",
                  "code": "code",
                  "model_config": {
                    "id": "id",
                    "other": {
                      "key": "value"
                    },
                    "name": "name",
                    "description": "description",
                    "provider": "openai",
                    "model": "model",
                    "max_tokens": 1,
                    "temperature": 1.1,
                    "top_p": 1.1,
                    "stop": "stop",
                    "presence_penalty": 1.1,
                    "frequency_penalty": 1.1,
                    "seed": 1,
                    "response_format": {
                      "type": "json_object",
                      "json_schema": {
                        "key": "value"
                      }
                    },
                    "prompt_template": "prompt_template",
                    "chat_template": [
                      {
                        "role": "user"
                      }
                    ],
                    "tool_configs": [
                      {
                        "id": "id",
                        "status": "status",
                        "name": "name"
                      }
                    ],
                    "tools": [
                      {
                        "id": "id",
                        "name": "name"
                      }
                    ],
                    "endpoint": "complete"
                  },
                  "type": "python",
                  "id": "id",
                  "created_at": "2024-01-15T09:30:00Z",
                  "updated_at": "2024-01-15T09:30:00Z",
                  "logging_project": {
                    "id": "id",
                    "name": "name",
                    "active_config": {
                      "project_id": "project_id",
                      "project_name": "project_name",
                      "created_at": "2024-01-15T09:30:00Z",
                      "updated_at": "2024-01-15T09:30:00Z",
                      "last_used": "2024-01-15T09:30:00Z",
                      "num_datapoints": 1,
                      "evaluation_aggregates": [
                        {
                          "model_config_id": "model_config_id",
                          "evaluator_id": "evaluator_id",
                          "evaluator_version_id": "evaluator_version_id"
                        }
                      ],
                      "config": {
                        "type": "generic",
                        "id": "config",
                        "status": "config",
                        "name": "config"
                      }
                    },
                    "users": [
                      {
                        "id": "id",
                        "email_address": "email_address"
                      }
                    ],
                    "data_count": 1,
                    "feedback_types": [
                      {
                        "type": "rating"
                      }
                    ],
                    "team_id": "team_id",
                    "config_type": "generic",
                    "directory_id": "directory_id",
                    "created_at": "2024-01-15T09:30:00Z",
                    "updated_at": "2024-01-15T09:30:00Z"
                  }
                }
              },
              "codeSamples": []
            },
            {
              "path": "/evaluators/:id",
              "pathParameters": {
                "id": ":id"
              },
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 422,
              "codeExamples": {
                "nodeAxios": ""
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "detail": [
                    {
                      "loc": ["string"],
                      "msg": "string",
                      "type": "string"
                    }
                  ]
                }
              },
              "codeSamples": []
            }
          ],
          "description": "Get an evaluator within your organization.",
          "authed": true
        },
        {
          "environments": [
            {
              "id": "Default",
              "baseUrl": "https://api.humanloop.com/v4"
            }
          ],
          "defaultEnvironment": "Default",
          "urlSlug": "delete",
          "method": "DELETE",
          "id": "delete",
          "originalEndpointId": "endpoint_evaluators.delete",
          "name": "Delete",
          "path": {
            "pathParameters": [
              {
                "key": "id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/evaluators/"
              },
              {
                "type": "pathParameter",
                "value": "id"
              },
              {
                "type": "literal",
                "value": ""
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "errors": [],
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "type_:HTTPValidationError"
                }
              },
              "statusCode": 422,
              "description": "Validation Error",
              "examples": []
            }
          ],
          "examples": [
            {
              "path": "/evaluators/id",
              "pathParameters": {
                "id": "id"
              },
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 204,
              "codeExamples": {
                "nodeAxios": ""
              },
              "codeSamples": []
            },
            {
              "path": "/evaluators/:id",
              "pathParameters": {
                "id": ":id"
              },
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 422,
              "codeExamples": {
                "nodeAxios": ""
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "detail": [
                    {
                      "loc": ["string"],
                      "msg": "string",
                      "type": "string"
                    }
                  ]
                }
              },
              "codeSamples": []
            }
          ],
          "description": "Delete an evaluator within your organization.",
          "authed": true
        },
        {
          "environments": [
            {
              "id": "Default",
              "baseUrl": "https://api.humanloop.com/v4"
            }
          ],
          "defaultEnvironment": "Default",
          "urlSlug": "update",
          "method": "PATCH",
          "id": "update",
          "originalEndpointId": "endpoint_evaluators.update",
          "name": "Update",
          "path": {
            "pathParameters": [
              {
                "key": "id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/evaluators/"
              },
              {
                "type": "pathParameter",
                "value": "id"
              },
              {
                "type": "literal",
                "value": ""
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "request": {
            "contentType": "application/json",
            "type": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The name of the evaluator.",
                  "key": "name",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "The description of the evaluator.",
                  "key": "description",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "Whether this evaluator is target-free or target-required.",
                  "key": "arguments_type",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:EvaluatorArgumentsType"
                    }
                  }
                },
                {
                  "description": "The type of the return value of the evaluator.",
                  "key": "return_type",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:EvaluatorReturnTypeEnum"
                    }
                  }
                },
                {
                  "description": "The code for the evaluator. This code will be executed in a sandboxed environment.",
                  "key": "code",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "The model configuration used to generate.",
                  "key": "model_config",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:ModelConfigCompletionRequest"
                    }
                  }
                }
              ]
            }
          },
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "type_:EvaluatorResponse"
              }
            }
          },
          "errors": [],
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "type_:HTTPValidationError"
                }
              },
              "statusCode": 422,
              "description": "Validation Error",
              "examples": []
            }
          ],
          "examples": [
            {
              "path": "/evaluators/id",
              "pathParameters": {
                "id": "id"
              },
              "queryParameters": {},
              "headers": {},
              "requestBody": {},
              "responseStatusCode": 200,
              "responseBody": {
                "name": "name",
                "description": "description",
                "arguments_type": "target_free",
                "return_type": "boolean",
                "code": "code",
                "model_config": {
                  "id": "id",
                  "other": {
                    "key": "value"
                  },
                  "name": "name",
                  "description": "description",
                  "provider": "openai",
                  "model": "model",
                  "max_tokens": 1,
                  "temperature": 1.1,
                  "top_p": 1.1,
                  "stop": "stop",
                  "presence_penalty": 1.1,
                  "frequency_penalty": 1.1,
                  "seed": 1,
                  "response_format": {
                    "type": "json_object",
                    "json_schema": {
                      "key": "value"
                    }
                  },
                  "prompt_template": "prompt_template",
                  "chat_template": [
                    {
                      "role": "user"
                    }
                  ],
                  "tool_configs": [
                    {
                      "id": "id",
                      "status": "status",
                      "name": "name"
                    }
                  ],
                  "tools": [
                    {
                      "id": "id",
                      "name": "name"
                    }
                  ],
                  "endpoint": "complete"
                },
                "type": "python",
                "id": "id",
                "created_at": "2024-01-15T09:30:00Z",
                "updated_at": "2024-01-15T09:30:00Z",
                "logging_project": {
                  "id": "id",
                  "name": "name",
                  "active_config": {
                    "project_id": "project_id",
                    "project_name": "project_name",
                    "created_at": "2024-01-15T09:30:00Z",
                    "updated_at": "2024-01-15T09:30:00Z",
                    "last_used": "2024-01-15T09:30:00Z",
                    "num_datapoints": 1,
                    "evaluation_aggregates": [
                      {
                        "model_config_id": "model_config_id",
                        "evaluator_id": "evaluator_id",
                        "evaluator_version_id": "evaluator_version_id"
                      }
                    ],
                    "config": {
                      "type": "generic",
                      "id": "config",
                      "status": "config",
                      "name": "config"
                    }
                  },
                  "users": [
                    {
                      "id": "id",
                      "email_address": "email_address"
                    }
                  ],
                  "data_count": 1,
                  "feedback_types": [
                    {
                      "type": "rating"
                    }
                  ],
                  "team_id": "team_id",
                  "config_type": "generic",
                  "directory_id": "directory_id",
                  "created_at": "2024-01-15T09:30:00Z",
                  "updated_at": "2024-01-15T09:30:00Z"
                }
              },
              "codeExamples": {
                "nodeAxios": ""
              },
              "requestBodyV3": {
                "type": "json",
                "value": {}
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "name": "name",
                  "description": "description",
                  "arguments_type": "target_free",
                  "return_type": "boolean",
                  "code": "code",
                  "model_config": {
                    "id": "id",
                    "other": {
                      "key": "value"
                    },
                    "name": "name",
                    "description": "description",
                    "provider": "openai",
                    "model": "model",
                    "max_tokens": 1,
                    "temperature": 1.1,
                    "top_p": 1.1,
                    "stop": "stop",
                    "presence_penalty": 1.1,
                    "frequency_penalty": 1.1,
                    "seed": 1,
                    "response_format": {
                      "type": "json_object",
                      "json_schema": {
                        "key": "value"
                      }
                    },
                    "prompt_template": "prompt_template",
                    "chat_template": [
                      {
                        "role": "user"
                      }
                    ],
                    "tool_configs": [
                      {
                        "id": "id",
                        "status": "status",
                        "name": "name"
                      }
                    ],
                    "tools": [
                      {
                        "id": "id",
                        "name": "name"
                      }
                    ],
                    "endpoint": "complete"
                  },
                  "type": "python",
                  "id": "id",
                  "created_at": "2024-01-15T09:30:00Z",
                  "updated_at": "2024-01-15T09:30:00Z",
                  "logging_project": {
                    "id": "id",
                    "name": "name",
                    "active_config": {
                      "project_id": "project_id",
                      "project_name": "project_name",
                      "created_at": "2024-01-15T09:30:00Z",
                      "updated_at": "2024-01-15T09:30:00Z",
                      "last_used": "2024-01-15T09:30:00Z",
                      "num_datapoints": 1,
                      "evaluation_aggregates": [
                        {
                          "model_config_id": "model_config_id",
                          "evaluator_id": "evaluator_id",
                          "evaluator_version_id": "evaluator_version_id"
                        }
                      ],
                      "config": {
                        "type": "generic",
                        "id": "config",
                        "status": "config",
                        "name": "config"
                      }
                    },
                    "users": [
                      {
                        "id": "id",
                        "email_address": "email_address"
                      }
                    ],
                    "data_count": 1,
                    "feedback_types": [
                      {
                        "type": "rating"
                      }
                    ],
                    "team_id": "team_id",
                    "config_type": "generic",
                    "directory_id": "directory_id",
                    "created_at": "2024-01-15T09:30:00Z",
                    "updated_at": "2024-01-15T09:30:00Z"
                  }
                }
              },
              "codeSamples": []
            },
            {
              "path": "/evaluators/:id",
              "pathParameters": {
                "id": ":id"
              },
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 422,
              "codeExamples": {
                "nodeAxios": ""
              },
              "requestBodyV3": {
                "type": "json",
                "value": {}
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "detail": [
                    {
                      "loc": ["string"],
                      "msg": "string",
                      "type": "string"
                    }
                  ]
                }
              },
              "codeSamples": []
            }
          ],
          "description": "Update an evaluator within your organization.",
          "authed": true
        }
      ],
      "types": [],
      "subpackages": [],
      "urlSlug": "evaluators",
      "webhooks": [],
      "websockets": []
    },
    "subpackage_feedback": {
      "subpackageId": "subpackage_feedback",
      "name": "feedback",
      "endpoints": [
        {
          "environments": [
            {
              "id": "Default",
              "baseUrl": "https://api.humanloop.com/v4"
            }
          ],
          "defaultEnvironment": "Default",
          "urlSlug": "feedback",
          "method": "POST",
          "id": "feedback",
          "originalEndpointId": "endpoint_feedback.feedback",
          "name": "Feedback",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/feedback"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "request": {
            "contentType": "application/json",
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "type_feedback:FeedbackFeedbackRequest"
              }
            }
          },
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "type_feedback:FeedbackFeedbackResponse"
              }
            }
          },
          "errors": [],
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "type_:HTTPValidationError"
                }
              },
              "statusCode": 422,
              "description": "Validation Error",
              "examples": []
            }
          ],
          "examples": [
            {
              "path": "/feedback",
              "pathParameters": {},
              "queryParameters": {},
              "headers": {},
              "requestBody": [
                {
                  "type": "rating"
                }
              ],
              "responseStatusCode": 200,
              "responseBody": [
                {
                  "type": "rating",
                  "value": true,
                  "data_id": "data_id",
                  "user": "user",
                  "created_at": "2024-01-15T09:30:00Z",
                  "id": "id"
                }
              ],
              "codeExamples": {
                "nodeAxios": ""
              },
              "requestBodyV3": {
                "type": "json",
                "value": [
                  {
                    "type": "rating"
                  }
                ]
              },
              "responseBodyV3": {
                "type": "json",
                "value": [
                  {
                    "type": "rating",
                    "value": true,
                    "data_id": "data_id",
                    "user": "user",
                    "created_at": "2024-01-15T09:30:00Z",
                    "id": "id"
                  }
                ]
              },
              "codeSamples": []
            },
            {
              "path": "/feedback",
              "pathParameters": {},
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 422,
              "codeExamples": {
                "nodeAxios": ""
              },
              "requestBodyV3": {
                "type": "json",
                "value": [
                  {
                    "type": "rating"
                  }
                ]
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "detail": [
                    {
                      "loc": ["string"],
                      "msg": "string",
                      "type": "string"
                    }
                  ]
                }
              },
              "codeSamples": []
            }
          ],
          "description": "Submit an array of feedback for existing `data_ids`",
          "authed": true
        }
      ],
      "types": ["type_feedback:FeedbackFeedbackRequest", "type_feedback:FeedbackFeedbackResponse"],
      "subpackages": [],
      "urlSlug": "feedback",
      "webhooks": [],
      "websockets": []
    },
    "subpackage_logs": {
      "subpackageId": "subpackage_logs",
      "name": "logs",
      "endpoints": [
        {
          "environments": [
            {
              "id": "Default",
              "baseUrl": "https://api.humanloop.com/v4"
            }
          ],
          "defaultEnvironment": "Default",
          "urlSlug": "list",
          "method": "GET",
          "id": "list",
          "originalEndpointId": "endpoint_logs.list",
          "name": "List ",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/logs"
              }
            ]
          },
          "queryParameters": [
            {
              "key": "project_id",
              "type": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            {
              "key": "search",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "key": "metadata_search",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "key": "version_status",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "type_:VersionStatus"
                }
              }
            },
            {
              "key": "start_date",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "key": "end_date",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "key": "size",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              }
            },
            {
              "key": "page",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              }
            }
          ],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "type_:PaginatedDataLogResponse"
              }
            }
          },
          "errors": [],
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "type_:HTTPValidationError"
                }
              },
              "statusCode": 422,
              "description": "Validation Error",
              "examples": []
            }
          ],
          "examples": [
            {
              "path": "/logs",
              "pathParameters": {},
              "queryParameters": {
                "project_id": "project_id"
              },
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "records": [
                  {
                    "project": "project",
                    "project_id": "project_id",
                    "session_id": "session_id",
                    "session_reference_id": "session_reference_id",
                    "parent_id": "parent_id",
                    "parent_reference_id": "parent_reference_id",
                    "inputs": {
                      "key": "value"
                    },
                    "source": "source",
                    "metadata": {
                      "key": "value"
                    },
                    "save": true,
                    "source_datapoint_id": "source_datapoint_id",
                    "id": "id",
                    "reference_id": "reference_id",
                    "messages": [
                      {
                        "role": "user"
                      }
                    ],
                    "output": "output",
                    "judgment": true,
                    "config_id": "config_id",
                    "config": {
                      "type": "generic",
                      "id": "config",
                      "status": "config",
                      "name": "config"
                    },
                    "environment": "environment",
                    "feedback": [
                      {
                        "type": "rating",
                        "value": true,
                        "id": "id"
                      }
                    ],
                    "created_at": "2024-01-15T09:30:00Z",
                    "error": "error",
                    "stdout": "stdout",
                    "duration": 1.1,
                    "output_message": {
                      "role": "user"
                    },
                    "prompt_tokens": 1,
                    "output_tokens": 1,
                    "prompt_cost": 1.1,
                    "output_cost": 1.1,
                    "provider_request": {
                      "key": "value"
                    },
                    "provider_response": {
                      "key": "value"
                    },
                    "user": "user",
                    "provider_latency": 1.1,
                    "tokens": 1,
                    "raw_output": "raw_output",
                    "finish_reason": "finish_reason",
                    "tools": [
                      {
                        "id": "id",
                        "name": "name",
                        "signature": "signature",
                        "result": "result"
                      }
                    ],
                    "tool_choice": "none",
                    "evaluation_results": [
                      {
                        "id": "id",
                        "evaluator_id": "evaluator_id",
                        "evaluator_version_id": "evaluator_version_id",
                        "log_id": "log_id",
                        "updated_at": "2024-01-15T09:30:00Z",
                        "created_at": "2024-01-15T09:30:00Z"
                      }
                    ],
                    "observability_status": "pending",
                    "updated_at": "2024-01-15T09:30:00Z",
                    "batch_ids": ["batch_ids"]
                  }
                ],
                "page": 1,
                "size": 1,
                "total": 1
              },
              "codeExamples": {
                "nodeAxios": ""
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "records": [
                    {
                      "project": "project",
                      "project_id": "project_id",
                      "session_id": "session_id",
                      "session_reference_id": "session_reference_id",
                      "parent_id": "parent_id",
                      "parent_reference_id": "parent_reference_id",
                      "inputs": {
                        "key": "value"
                      },
                      "source": "source",
                      "metadata": {
                        "key": "value"
                      },
                      "save": true,
                      "source_datapoint_id": "source_datapoint_id",
                      "id": "id",
                      "reference_id": "reference_id",
                      "messages": [
                        {
                          "role": "user"
                        }
                      ],
                      "output": "output",
                      "judgment": true,
                      "config_id": "config_id",
                      "config": {
                        "type": "generic",
                        "id": "config",
                        "status": "config",
                        "name": "config"
                      },
                      "environment": "environment",
                      "feedback": [
                        {
                          "type": "rating",
                          "value": true,
                          "id": "id"
                        }
                      ],
                      "created_at": "2024-01-15T09:30:00Z",
                      "error": "error",
                      "stdout": "stdout",
                      "duration": 1.1,
                      "output_message": {
                        "role": "user"
                      },
                      "prompt_tokens": 1,
                      "output_tokens": 1,
                      "prompt_cost": 1.1,
                      "output_cost": 1.1,
                      "provider_request": {
                        "key": "value"
                      },
                      "provider_response": {
                        "key": "value"
                      },
                      "user": "user",
                      "provider_latency": 1.1,
                      "tokens": 1,
                      "raw_output": "raw_output",
                      "finish_reason": "finish_reason",
                      "tools": [
                        {
                          "id": "id",
                          "name": "name",
                          "signature": "signature",
                          "result": "result"
                        }
                      ],
                      "tool_choice": "none",
                      "evaluation_results": [
                        {
                          "id": "id",
                          "evaluator_id": "evaluator_id",
                          "evaluator_version_id": "evaluator_version_id",
                          "log_id": "log_id",
                          "updated_at": "2024-01-15T09:30:00Z",
                          "created_at": "2024-01-15T09:30:00Z"
                        }
                      ],
                      "observability_status": "pending",
                      "updated_at": "2024-01-15T09:30:00Z",
                      "batch_ids": ["batch_ids"]
                    }
                  ],
                  "page": 1,
                  "size": 1,
                  "total": 1
                }
              },
              "codeSamples": []
            },
            {
              "path": "/logs",
              "pathParameters": {},
              "queryParameters": {
                "project_id": "string",
                "search": "string",
                "metadata_search": "string"
              },
              "headers": {},
              "responseStatusCode": 422,
              "codeExamples": {
                "nodeAxios": ""
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "detail": [
                    {
                      "loc": ["string"],
                      "msg": "string",
                      "type": "string"
                    }
                  ]
                }
              },
              "codeSamples": []
            }
          ],
          "description": "Retrieve paginated logs from the server.\n\nSorting and filtering are supported through query params.\n\nSorting is supported for the `source`, `model`, `timestamp`, and `feedback-{output_name}` columns.\nSpecify sorting with the `sort` query param, with values `{column}.{ordering}`.\nE.g. ?sort=source.asc&sort=model.desc will yield a multi-column sort. First by source then by model.\n\nFiltering is supported for the `source`, `model`, `feedback-{output_name}`,\n`evaluator-{evaluator_external_id}` columns.\n\nSpecify filtering with the `source_filter`, `model_filter`, `feedback-{output.name}_filter` and\n`evaluator-{evaluator_external_id}_filter` query params.\n\nE.g. `?source_filter=AI&source_filter=user_1234&feedback-explicit_filter=good`\nwill only show rows where the source is \"AI\" or \"user_1234\", and where the latest feedback for the \"explicit\" output\ngroup is \"good\".\n\nAn additional date range filter is supported for the `Timestamp` column (i.e. `Log.created_at`).\nThese are supported through the `start_date` and `end_date` query parameters.\nThe date format could be either date: `YYYY-MM-DD`, e.g. 2024-01-01\nor datetime: YYYY-MM-DD[T]HH:MM[:SS[.ffffff]][Z or [±]HH[:]MM], e.g. 2024-01-01T00:00:00Z.\n\nSearching is supported for the model inputs and output.\nSpecify a search term with the `search` query param.\nE.g. `?search=hello%20there` will cause a case-insensitive search across model inputs and output.",
          "authed": true
        },
        {
          "environments": [
            {
              "id": "Default",
              "baseUrl": "https://api.humanloop.com/v4"
            }
          ],
          "defaultEnvironment": "Default",
          "urlSlug": "log",
          "method": "POST",
          "id": "log",
          "originalEndpointId": "endpoint_logs.log",
          "name": "Log",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/logs"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "request": {
            "contentType": "application/json",
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "type_logs:LogsLogRequest"
              }
            }
          },
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "type_logs:LogsLogResponse"
              }
            }
          },
          "errors": [],
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "type_:HTTPValidationError"
                }
              },
              "statusCode": 422,
              "description": "Validation Error",
              "examples": []
            }
          ],
          "examples": [
            {
              "path": "/logs",
              "pathParameters": {},
              "queryParameters": {},
              "headers": {},
              "requestBody": [{}],
              "responseStatusCode": 200,
              "responseBody": [
                {
                  "id": "id",
                  "project_id": "project_id",
                  "session_id": "session_id"
                }
              ],
              "codeExamples": {
                "nodeAxios": ""
              },
              "requestBodyV3": {
                "type": "json",
                "value": [{}]
              },
              "responseBodyV3": {
                "type": "json",
                "value": [
                  {
                    "id": "id",
                    "project_id": "project_id",
                    "session_id": "session_id"
                  }
                ]
              },
              "codeSamples": []
            },
            {
              "path": "/logs",
              "pathParameters": {},
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 422,
              "codeExamples": {
                "nodeAxios": ""
              },
              "requestBodyV3": {
                "type": "json",
                "value": [{}]
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "detail": [
                    {
                      "loc": ["string"],
                      "msg": "string",
                      "type": "string"
                    }
                  ]
                }
              },
              "codeSamples": []
            }
          ],
          "description": "Log a datapoint or array of datapoints to your Humanloop project.",
          "authed": true
        },
        {
          "environments": [
            {
              "id": "Default",
              "baseUrl": "https://api.humanloop.com/v4"
            }
          ],
          "defaultEnvironment": "Default",
          "urlSlug": "delete",
          "method": "DELETE",
          "id": "delete",
          "originalEndpointId": "endpoint_logs.delete",
          "name": "Delete",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/logs"
              }
            ]
          },
          "queryParameters": [
            {
              "key": "id",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          ],
          "headers": [],
          "errors": [],
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "type_:HTTPValidationError"
                }
              },
              "statusCode": 422,
              "description": "Validation Error",
              "examples": []
            }
          ],
          "examples": [
            {
              "path": "/logs",
              "pathParameters": {},
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 204,
              "codeExamples": {
                "nodeAxios": ""
              },
              "codeSamples": []
            },
            {
              "path": "/logs",
              "pathParameters": {},
              "queryParameters": {
                "id": "string"
              },
              "headers": {},
              "responseStatusCode": 422,
              "codeExamples": {
                "nodeAxios": ""
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "detail": [
                    {
                      "loc": ["string"],
                      "msg": "string",
                      "type": "string"
                    }
                  ]
                }
              },
              "codeSamples": []
            }
          ],
          "authed": true
        },
        {
          "environments": [
            {
              "id": "Default",
              "baseUrl": "https://api.humanloop.com/v4"
            }
          ],
          "defaultEnvironment": "Default",
          "urlSlug": "update-by-ref",
          "migratedFromUrlSlugs": ["update-by-reference"],
          "method": "PATCH",
          "id": "update_by_ref",
          "originalEndpointId": "endpoint_logs.update_by_ref",
          "name": "Update By Reference",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/logs"
              }
            ]
          },
          "queryParameters": [
            {
              "description": "A unique string to reference the datapoint. Identifies the logged datapoint created with the same `reference_id`.",
              "key": "reference_id",
              "type": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          ],
          "headers": [],
          "request": {
            "contentType": "application/json",
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "type_:UpdateLogRequest"
              }
            }
          },
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "type_:LogResponse"
              }
            }
          },
          "errors": [],
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "type_:HTTPValidationError"
                }
              },
              "statusCode": 422,
              "description": "Validation Error",
              "examples": []
            }
          ],
          "examples": [
            {
              "path": "/logs",
              "pathParameters": {},
              "queryParameters": {
                "reference_id": "reference_id"
              },
              "headers": {},
              "requestBody": {},
              "responseStatusCode": 200,
              "responseBody": {
                "project": "project",
                "project_id": "project_id",
                "session_id": "session_id",
                "session_reference_id": "session_reference_id",
                "parent_id": "parent_id",
                "parent_reference_id": "parent_reference_id",
                "inputs": {
                  "key": "value"
                },
                "source": "source",
                "metadata": {
                  "key": "value"
                },
                "save": true,
                "source_datapoint_id": "source_datapoint_id",
                "id": "id",
                "reference_id": "reference_id",
                "messages": [
                  {
                    "content": "content",
                    "name": "name",
                    "tool_call_id": "tool_call_id",
                    "role": "user",
                    "tool_calls": [
                      {
                        "id": "id",
                        "type": "function",
                        "function": {
                          "name": "name"
                        }
                      }
                    ],
                    "tool_call": {
                      "name": "name"
                    }
                  }
                ],
                "output": "output",
                "judgment": true,
                "config_id": "config_id",
                "config": {
                  "type": "generic",
                  "id": "config",
                  "other": {
                    "key": "value"
                  },
                  "created_by": {
                    "id": "id",
                    "email_address": "email_address",
                    "full_name": "full_name",
                    "verified": true
                  },
                  "status": "config",
                  "name": "config",
                  "description": "config"
                },
                "environment": "environment",
                "feedback": [
                  {
                    "type": "rating",
                    "value": true,
                    "data_id": "data_id",
                    "user": "user",
                    "created_at": "2024-01-15T09:30:00Z",
                    "id": "id"
                  }
                ],
                "created_at": "2024-01-15T09:30:00Z",
                "error": "error",
                "stdout": "stdout",
                "duration": 1.1,
                "output_message": {
                  "content": "content",
                  "name": "name",
                  "tool_call_id": "tool_call_id",
                  "role": "user",
                  "tool_calls": [
                    {
                      "id": "id",
                      "type": "function",
                      "function": {
                        "name": "name"
                      }
                    }
                  ],
                  "tool_call": {
                    "name": "name",
                    "arguments": "arguments"
                  }
                },
                "prompt_tokens": 1,
                "output_tokens": 1,
                "prompt_cost": 1.1,
                "output_cost": 1.1,
                "provider_request": {
                  "key": "value"
                },
                "provider_response": {
                  "key": "value"
                },
                "user": "user",
                "provider_latency": 1.1,
                "tokens": 1,
                "raw_output": "raw_output",
                "finish_reason": "finish_reason",
                "tools": [
                  {
                    "id": "id",
                    "name": "name",
                    "signature": "signature",
                    "result": "result"
                  }
                ],
                "tool_choice": "none",
                "evaluation_results": [
                  {
                    "id": "id",
                    "evaluator_id": "evaluator_id",
                    "evaluator_version_id": "evaluator_version_id",
                    "evaluation_id": "evaluation_id",
                    "log_id": "log_id",
                    "version_id": "version_id",
                    "version": {
                      "key": "value"
                    },
                    "value": true,
                    "error": "error",
                    "updated_at": "2024-01-15T09:30:00Z",
                    "created_at": "2024-01-15T09:30:00Z"
                  }
                ],
                "observability_status": "pending",
                "updated_at": "2024-01-15T09:30:00Z",
                "batch_ids": ["batch_ids"]
              },
              "codeExamples": {
                "nodeAxios": ""
              },
              "requestBodyV3": {
                "type": "json",
                "value": {}
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "project": "project",
                  "project_id": "project_id",
                  "session_id": "session_id",
                  "session_reference_id": "session_reference_id",
                  "parent_id": "parent_id",
                  "parent_reference_id": "parent_reference_id",
                  "inputs": {
                    "key": "value"
                  },
                  "source": "source",
                  "metadata": {
                    "key": "value"
                  },
                  "save": true,
                  "source_datapoint_id": "source_datapoint_id",
                  "id": "id",
                  "reference_id": "reference_id",
                  "messages": [
                    {
                      "content": "content",
                      "name": "name",
                      "tool_call_id": "tool_call_id",
                      "role": "user",
                      "tool_calls": [
                        {
                          "id": "id",
                          "type": "function",
                          "function": {
                            "name": "name"
                          }
                        }
                      ],
                      "tool_call": {
                        "name": "name"
                      }
                    }
                  ],
                  "output": "output",
                  "judgment": true,
                  "config_id": "config_id",
                  "config": {
                    "type": "generic",
                    "id": "config",
                    "other": {
                      "key": "value"
                    },
                    "created_by": {
                      "id": "id",
                      "email_address": "email_address",
                      "full_name": "full_name",
                      "verified": true
                    },
                    "status": "config",
                    "name": "config",
                    "description": "config"
                  },
                  "environment": "environment",
                  "feedback": [
                    {
                      "type": "rating",
                      "value": true,
                      "data_id": "data_id",
                      "user": "user",
                      "created_at": "2024-01-15T09:30:00Z",
                      "id": "id"
                    }
                  ],
                  "created_at": "2024-01-15T09:30:00Z",
                  "error": "error",
                  "stdout": "stdout",
                  "duration": 1.1,
                  "output_message": {
                    "content": "content",
                    "name": "name",
                    "tool_call_id": "tool_call_id",
                    "role": "user",
                    "tool_calls": [
                      {
                        "id": "id",
                        "type": "function",
                        "function": {
                          "name": "name"
                        }
                      }
                    ],
                    "tool_call": {
                      "name": "name",
                      "arguments": "arguments"
                    }
                  },
                  "prompt_tokens": 1,
                  "output_tokens": 1,
                  "prompt_cost": 1.1,
                  "output_cost": 1.1,
                  "provider_request": {
                    "key": "value"
                  },
                  "provider_response": {
                    "key": "value"
                  },
                  "user": "user",
                  "provider_latency": 1.1,
                  "tokens": 1,
                  "raw_output": "raw_output",
                  "finish_reason": "finish_reason",
                  "tools": [
                    {
                      "id": "id",
                      "name": "name",
                      "signature": "signature",
                      "result": "result"
                    }
                  ],
                  "tool_choice": "none",
                  "evaluation_results": [
                    {
                      "id": "id",
                      "evaluator_id": "evaluator_id",
                      "evaluator_version_id": "evaluator_version_id",
                      "evaluation_id": "evaluation_id",
                      "log_id": "log_id",
                      "version_id": "version_id",
                      "version": {
                        "key": "value"
                      },
                      "value": true,
                      "error": "error",
                      "updated_at": "2024-01-15T09:30:00Z",
                      "created_at": "2024-01-15T09:30:00Z"
                    }
                  ],
                  "observability_status": "pending",
                  "updated_at": "2024-01-15T09:30:00Z",
                  "batch_ids": ["batch_ids"]
                }
              },
              "codeSamples": []
            },
            {
              "path": "/logs",
              "pathParameters": {},
              "queryParameters": {
                "reference_id": "string"
              },
              "headers": {},
              "responseStatusCode": 422,
              "codeExamples": {
                "nodeAxios": ""
              },
              "requestBodyV3": {
                "type": "json",
                "value": {}
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "detail": [
                    {
                      "loc": ["string"],
                      "msg": "string",
                      "type": "string"
                    }
                  ]
                }
              },
              "codeSamples": []
            }
          ],
          "description": "Update a logged datapoint by its reference ID.\n\nThe `reference_id` query parameter must be provided, and refers to the\n`reference_id` of a previously-logged datapoint.",
          "authed": true
        },
        {
          "environments": [
            {
              "id": "Default",
              "baseUrl": "https://api.humanloop.com/v4"
            }
          ],
          "defaultEnvironment": "Default",
          "urlSlug": "get",
          "method": "GET",
          "id": "get",
          "originalEndpointId": "endpoint_logs.get",
          "name": "Get",
          "path": {
            "pathParameters": [
              {
                "description": "String ID of log to return. Starts with `data_`.",
                "key": "id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/logs/"
              },
              {
                "type": "pathParameter",
                "value": "id"
              },
              {
                "type": "literal",
                "value": ""
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "type_:LogResponse"
              }
            }
          },
          "errors": [],
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "type_:HTTPValidationError"
                }
              },
              "statusCode": 422,
              "description": "Validation Error",
              "examples": []
            }
          ],
          "examples": [
            {
              "path": "/logs/id",
              "pathParameters": {
                "id": "id"
              },
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "project": "project",
                "project_id": "project_id",
                "session_id": "session_id",
                "session_reference_id": "session_reference_id",
                "parent_id": "parent_id",
                "parent_reference_id": "parent_reference_id",
                "inputs": {
                  "key": "value"
                },
                "source": "source",
                "metadata": {
                  "key": "value"
                },
                "save": true,
                "source_datapoint_id": "source_datapoint_id",
                "id": "id",
                "reference_id": "reference_id",
                "messages": [
                  {
                    "content": "content",
                    "name": "name",
                    "tool_call_id": "tool_call_id",
                    "role": "user",
                    "tool_calls": [
                      {
                        "id": "id",
                        "type": "function",
                        "function": {
                          "name": "name"
                        }
                      }
                    ],
                    "tool_call": {
                      "name": "name"
                    }
                  }
                ],
                "output": "output",
                "judgment": true,
                "config_id": "config_id",
                "config": {
                  "type": "generic",
                  "id": "config",
                  "other": {
                    "key": "value"
                  },
                  "created_by": {
                    "id": "id",
                    "email_address": "email_address",
                    "full_name": "full_name",
                    "verified": true
                  },
                  "status": "config",
                  "name": "config",
                  "description": "config"
                },
                "environment": "environment",
                "feedback": [
                  {
                    "type": "rating",
                    "value": true,
                    "data_id": "data_id",
                    "user": "user",
                    "created_at": "2024-01-15T09:30:00Z",
                    "id": "id"
                  }
                ],
                "created_at": "2024-01-15T09:30:00Z",
                "error": "error",
                "stdout": "stdout",
                "duration": 1.1,
                "output_message": {
                  "content": "content",
                  "name": "name",
                  "tool_call_id": "tool_call_id",
                  "role": "user",
                  "tool_calls": [
                    {
                      "id": "id",
                      "type": "function",
                      "function": {
                        "name": "name"
                      }
                    }
                  ],
                  "tool_call": {
                    "name": "name",
                    "arguments": "arguments"
                  }
                },
                "prompt_tokens": 1,
                "output_tokens": 1,
                "prompt_cost": 1.1,
                "output_cost": 1.1,
                "provider_request": {
                  "key": "value"
                },
                "provider_response": {
                  "key": "value"
                },
                "user": "user",
                "provider_latency": 1.1,
                "tokens": 1,
                "raw_output": "raw_output",
                "finish_reason": "finish_reason",
                "tools": [
                  {
                    "id": "id",
                    "name": "name",
                    "signature": "signature",
                    "result": "result"
                  }
                ],
                "tool_choice": "none",
                "evaluation_results": [
                  {
                    "id": "id",
                    "evaluator_id": "evaluator_id",
                    "evaluator_version_id": "evaluator_version_id",
                    "evaluation_id": "evaluation_id",
                    "log_id": "log_id",
                    "version_id": "version_id",
                    "version": {
                      "key": "value"
                    },
                    "value": true,
                    "error": "error",
                    "updated_at": "2024-01-15T09:30:00Z",
                    "created_at": "2024-01-15T09:30:00Z"
                  }
                ],
                "observability_status": "pending",
                "updated_at": "2024-01-15T09:30:00Z",
                "batch_ids": ["batch_ids"]
              },
              "codeExamples": {
                "nodeAxios": ""
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "project": "project",
                  "project_id": "project_id",
                  "session_id": "session_id",
                  "session_reference_id": "session_reference_id",
                  "parent_id": "parent_id",
                  "parent_reference_id": "parent_reference_id",
                  "inputs": {
                    "key": "value"
                  },
                  "source": "source",
                  "metadata": {
                    "key": "value"
                  },
                  "save": true,
                  "source_datapoint_id": "source_datapoint_id",
                  "id": "id",
                  "reference_id": "reference_id",
                  "messages": [
                    {
                      "content": "content",
                      "name": "name",
                      "tool_call_id": "tool_call_id",
                      "role": "user",
                      "tool_calls": [
                        {
                          "id": "id",
                          "type": "function",
                          "function": {
                            "name": "name"
                          }
                        }
                      ],
                      "tool_call": {
                        "name": "name"
                      }
                    }
                  ],
                  "output": "output",
                  "judgment": true,
                  "config_id": "config_id",
                  "config": {
                    "type": "generic",
                    "id": "config",
                    "other": {
                      "key": "value"
                    },
                    "created_by": {
                      "id": "id",
                      "email_address": "email_address",
                      "full_name": "full_name",
                      "verified": true
                    },
                    "status": "config",
                    "name": "config",
                    "description": "config"
                  },
                  "environment": "environment",
                  "feedback": [
                    {
                      "type": "rating",
                      "value": true,
                      "data_id": "data_id",
                      "user": "user",
                      "created_at": "2024-01-15T09:30:00Z",
                      "id": "id"
                    }
                  ],
                  "created_at": "2024-01-15T09:30:00Z",
                  "error": "error",
                  "stdout": "stdout",
                  "duration": 1.1,
                  "output_message": {
                    "content": "content",
                    "name": "name",
                    "tool_call_id": "tool_call_id",
                    "role": "user",
                    "tool_calls": [
                      {
                        "id": "id",
                        "type": "function",
                        "function": {
                          "name": "name"
                        }
                      }
                    ],
                    "tool_call": {
                      "name": "name",
                      "arguments": "arguments"
                    }
                  },
                  "prompt_tokens": 1,
                  "output_tokens": 1,
                  "prompt_cost": 1.1,
                  "output_cost": 1.1,
                  "provider_request": {
                    "key": "value"
                  },
                  "provider_response": {
                    "key": "value"
                  },
                  "user": "user",
                  "provider_latency": 1.1,
                  "tokens": 1,
                  "raw_output": "raw_output",
                  "finish_reason": "finish_reason",
                  "tools": [
                    {
                      "id": "id",
                      "name": "name",
                      "signature": "signature",
                      "result": "result"
                    }
                  ],
                  "tool_choice": "none",
                  "evaluation_results": [
                    {
                      "id": "id",
                      "evaluator_id": "evaluator_id",
                      "evaluator_version_id": "evaluator_version_id",
                      "evaluation_id": "evaluation_id",
                      "log_id": "log_id",
                      "version_id": "version_id",
                      "version": {
                        "key": "value"
                      },
                      "value": true,
                      "error": "error",
                      "updated_at": "2024-01-15T09:30:00Z",
                      "created_at": "2024-01-15T09:30:00Z"
                    }
                  ],
                  "observability_status": "pending",
                  "updated_at": "2024-01-15T09:30:00Z",
                  "batch_ids": ["batch_ids"]
                }
              },
              "codeSamples": []
            },
            {
              "path": "/logs/:id",
              "pathParameters": {
                "id": ":id"
              },
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 422,
              "codeExamples": {
                "nodeAxios": ""
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "detail": [
                    {
                      "loc": ["string"],
                      "msg": "string",
                      "type": "string"
                    }
                  ]
                }
              },
              "codeSamples": []
            }
          ],
          "description": "Retrieve a log by log id.",
          "authed": true
        },
        {
          "environments": [
            {
              "id": "Default",
              "baseUrl": "https://api.humanloop.com/v4"
            }
          ],
          "defaultEnvironment": "Default",
          "urlSlug": "update",
          "method": "PATCH",
          "id": "update",
          "originalEndpointId": "endpoint_logs.update",
          "name": "Update",
          "path": {
            "pathParameters": [
              {
                "description": "String ID of logged datapoint to return. Starts with `data_`.",
                "key": "id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/logs/"
              },
              {
                "type": "pathParameter",
                "value": "id"
              },
              {
                "type": "literal",
                "value": ""
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "request": {
            "contentType": "application/json",
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "type_:UpdateLogRequest"
              }
            }
          },
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "type_:LogResponse"
              }
            }
          },
          "errors": [],
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "type_:HTTPValidationError"
                }
              },
              "statusCode": 422,
              "description": "Validation Error",
              "examples": []
            }
          ],
          "examples": [
            {
              "path": "/logs/id",
              "pathParameters": {
                "id": "id"
              },
              "queryParameters": {},
              "headers": {},
              "requestBody": {},
              "responseStatusCode": 200,
              "responseBody": {
                "project": "project",
                "project_id": "project_id",
                "session_id": "session_id",
                "session_reference_id": "session_reference_id",
                "parent_id": "parent_id",
                "parent_reference_id": "parent_reference_id",
                "inputs": {
                  "key": "value"
                },
                "source": "source",
                "metadata": {
                  "key": "value"
                },
                "save": true,
                "source_datapoint_id": "source_datapoint_id",
                "id": "id",
                "reference_id": "reference_id",
                "messages": [
                  {
                    "content": "content",
                    "name": "name",
                    "tool_call_id": "tool_call_id",
                    "role": "user",
                    "tool_calls": [
                      {
                        "id": "id",
                        "type": "function",
                        "function": {
                          "name": "name"
                        }
                      }
                    ],
                    "tool_call": {
                      "name": "name"
                    }
                  }
                ],
                "output": "output",
                "judgment": true,
                "config_id": "config_id",
                "config": {
                  "type": "generic",
                  "id": "config",
                  "other": {
                    "key": "value"
                  },
                  "created_by": {
                    "id": "id",
                    "email_address": "email_address",
                    "full_name": "full_name",
                    "verified": true
                  },
                  "status": "config",
                  "name": "config",
                  "description": "config"
                },
                "environment": "environment",
                "feedback": [
                  {
                    "type": "rating",
                    "value": true,
                    "data_id": "data_id",
                    "user": "user",
                    "created_at": "2024-01-15T09:30:00Z",
                    "id": "id"
                  }
                ],
                "created_at": "2024-01-15T09:30:00Z",
                "error": "error",
                "stdout": "stdout",
                "duration": 1.1,
                "output_message": {
                  "content": "content",
                  "name": "name",
                  "tool_call_id": "tool_call_id",
                  "role": "user",
                  "tool_calls": [
                    {
                      "id": "id",
                      "type": "function",
                      "function": {
                        "name": "name"
                      }
                    }
                  ],
                  "tool_call": {
                    "name": "name",
                    "arguments": "arguments"
                  }
                },
                "prompt_tokens": 1,
                "output_tokens": 1,
                "prompt_cost": 1.1,
                "output_cost": 1.1,
                "provider_request": {
                  "key": "value"
                },
                "provider_response": {
                  "key": "value"
                },
                "user": "user",
                "provider_latency": 1.1,
                "tokens": 1,
                "raw_output": "raw_output",
                "finish_reason": "finish_reason",
                "tools": [
                  {
                    "id": "id",
                    "name": "name",
                    "signature": "signature",
                    "result": "result"
                  }
                ],
                "tool_choice": "none",
                "evaluation_results": [
                  {
                    "id": "id",
                    "evaluator_id": "evaluator_id",
                    "evaluator_version_id": "evaluator_version_id",
                    "evaluation_id": "evaluation_id",
                    "log_id": "log_id",
                    "version_id": "version_id",
                    "version": {
                      "key": "value"
                    },
                    "value": true,
                    "error": "error",
                    "updated_at": "2024-01-15T09:30:00Z",
                    "created_at": "2024-01-15T09:30:00Z"
                  }
                ],
                "observability_status": "pending",
                "updated_at": "2024-01-15T09:30:00Z",
                "batch_ids": ["batch_ids"]
              },
              "codeExamples": {
                "nodeAxios": ""
              },
              "requestBodyV3": {
                "type": "json",
                "value": {}
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "project": "project",
                  "project_id": "project_id",
                  "session_id": "session_id",
                  "session_reference_id": "session_reference_id",
                  "parent_id": "parent_id",
                  "parent_reference_id": "parent_reference_id",
                  "inputs": {
                    "key": "value"
                  },
                  "source": "source",
                  "metadata": {
                    "key": "value"
                  },
                  "save": true,
                  "source_datapoint_id": "source_datapoint_id",
                  "id": "id",
                  "reference_id": "reference_id",
                  "messages": [
                    {
                      "content": "content",
                      "name": "name",
                      "tool_call_id": "tool_call_id",
                      "role": "user",
                      "tool_calls": [
                        {
                          "id": "id",
                          "type": "function",
                          "function": {
                            "name": "name"
                          }
                        }
                      ],
                      "tool_call": {
                        "name": "name"
                      }
                    }
                  ],
                  "output": "output",
                  "judgment": true,
                  "config_id": "config_id",
                  "config": {
                    "type": "generic",
                    "id": "config",
                    "other": {
                      "key": "value"
                    },
                    "created_by": {
                      "id": "id",
                      "email_address": "email_address",
                      "full_name": "full_name",
                      "verified": true
                    },
                    "status": "config",
                    "name": "config",
                    "description": "config"
                  },
                  "environment": "environment",
                  "feedback": [
                    {
                      "type": "rating",
                      "value": true,
                      "data_id": "data_id",
                      "user": "user",
                      "created_at": "2024-01-15T09:30:00Z",
                      "id": "id"
                    }
                  ],
                  "created_at": "2024-01-15T09:30:00Z",
                  "error": "error",
                  "stdout": "stdout",
                  "duration": 1.1,
                  "output_message": {
                    "content": "content",
                    "name": "name",
                    "tool_call_id": "tool_call_id",
                    "role": "user",
                    "tool_calls": [
                      {
                        "id": "id",
                        "type": "function",
                        "function": {
                          "name": "name"
                        }
                      }
                    ],
                    "tool_call": {
                      "name": "name",
                      "arguments": "arguments"
                    }
                  },
                  "prompt_tokens": 1,
                  "output_tokens": 1,
                  "prompt_cost": 1.1,
                  "output_cost": 1.1,
                  "provider_request": {
                    "key": "value"
                  },
                  "provider_response": {
                    "key": "value"
                  },
                  "user": "user",
                  "provider_latency": 1.1,
                  "tokens": 1,
                  "raw_output": "raw_output",
                  "finish_reason": "finish_reason",
                  "tools": [
                    {
                      "id": "id",
                      "name": "name",
                      "signature": "signature",
                      "result": "result"
                    }
                  ],
                  "tool_choice": "none",
                  "evaluation_results": [
                    {
                      "id": "id",
                      "evaluator_id": "evaluator_id",
                      "evaluator_version_id": "evaluator_version_id",
                      "evaluation_id": "evaluation_id",
                      "log_id": "log_id",
                      "version_id": "version_id",
                      "version": {
                        "key": "value"
                      },
                      "value": true,
                      "error": "error",
                      "updated_at": "2024-01-15T09:30:00Z",
                      "created_at": "2024-01-15T09:30:00Z"
                    }
                  ],
                  "observability_status": "pending",
                  "updated_at": "2024-01-15T09:30:00Z",
                  "batch_ids": ["batch_ids"]
                }
              },
              "codeSamples": []
            },
            {
              "path": "/logs/:id",
              "pathParameters": {
                "id": ":id"
              },
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 422,
              "codeExamples": {
                "nodeAxios": ""
              },
              "requestBodyV3": {
                "type": "json",
                "value": {}
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "detail": [
                    {
                      "loc": ["string"],
                      "msg": "string",
                      "type": "string"
                    }
                  ]
                }
              },
              "codeSamples": []
            }
          ],
          "description": "Update a logged datapoint in your Humanloop project.",
          "authed": true
        }
      ],
      "types": ["type_logs:LogsLogRequest", "type_logs:LogsLogResponse"],
      "subpackages": [],
      "urlSlug": "logs",
      "webhooks": [],
      "websockets": []
    },
    "subpackage_modelConfigs": {
      "subpackageId": "subpackage_modelConfigs",
      "name": "modelConfigs",
      "endpoints": [
        {
          "environments": [
            {
              "id": "Default",
              "baseUrl": "https://api.humanloop.com/v4"
            }
          ],
          "defaultEnvironment": "Default",
          "urlSlug": "register",
          "method": "POST",
          "id": "register",
          "originalEndpointId": "endpoint_modelConfigs.register",
          "name": "Register",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/model-configs"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "request": {
            "contentType": "application/json",
            "type": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "A friendly display name for the model config. If not provided, a name will be generated.",
                  "key": "name",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "A description of the model config.",
                  "key": "description",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "The company providing the underlying model service.",
                  "key": "provider",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:ModelProviders"
                    }
                  }
                },
                {
                  "description": "The model instance used. E.g. text-davinci-002.",
                  "key": "model",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "The maximum number of tokens to generate. Provide max_tokens=-1 to dynamically calculate the maximum number of tokens to generate given the length of the prompt",
                  "key": "max_tokens",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "integer",
                        "default": -1
                      }
                    }
                  }
                },
                {
                  "description": "What sampling temperature to use when making a generation. Higher values means the model will be more creative.",
                  "key": "temperature",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "double",
                        "default": 1
                      }
                    }
                  }
                },
                {
                  "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass.",
                  "key": "top_p",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "double",
                        "default": 1
                      }
                    }
                  }
                },
                {
                  "description": "The string (or list of strings) after which the model will stop generating. The returned text will not contain the stop sequence.",
                  "key": "stop",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_modelConfigs:ProjectModelConfigRequestStop"
                    }
                  }
                },
                {
                  "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the generation so far.",
                  "key": "presence_penalty",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "double",
                        "default": 0
                      }
                    }
                  }
                },
                {
                  "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on how frequently they appear in the generation so far.",
                  "key": "frequency_penalty",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "double",
                        "default": 0
                      }
                    }
                  }
                },
                {
                  "description": "Other parameter values to be passed to the provider call.",
                  "key": "other",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "map",
                      "keyType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      },
                      "valueType": {
                        "type": "unknown"
                      }
                    }
                  }
                },
                {
                  "description": "If specified, model will make a best effort to sample deterministically, but it is not guaranteed.",
                  "key": "seed",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                },
                {
                  "description": "The format of the response. Only type json_object is currently supported for chat.",
                  "key": "response_format",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:ResponseFormat"
                    }
                  }
                },
                {
                  "description": "Unique project name. If it does not exist, a new project will be created.",
                  "key": "project",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "Unique project ID",
                  "key": "project_id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "Prompt template that will take your specified inputs to form your final request to the provider model. NB: Input variables within the prompt template should be specified with syntax: `{{input_name}}`.",
                  "key": "prompt_template",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "Messages prepended to the list of messages sent to the provider. These messages that will take your specified inputs to form your final request to the provider model. NB: Input variables within the prompt template should be specified with syntax: `{{input_name}}`.",
                  "key": "chat_template",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "id",
                        "value": "type_:ChatMessageWithToolCall"
                      }
                    }
                  }
                },
                {
                  "description": "Which of the providers model endpoints to use. For example Complete or Edit.",
                  "key": "endpoint",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:ModelEndpoints"
                    }
                  }
                },
                {
                  "description": "Make tools available to OpenAIs chat model as functions.",
                  "key": "tools",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "id",
                        "value": "type_modelConfigs:ProjectModelConfigRequestToolsItem"
                      }
                    }
                  }
                }
              ]
            }
          },
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "type_:ProjectConfigResponse"
              }
            }
          },
          "errors": [],
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "type_:HTTPValidationError"
                }
              },
              "statusCode": 422,
              "description": "Validation Error",
              "examples": []
            }
          ],
          "examples": [
            {
              "path": "/model-configs",
              "pathParameters": {},
              "queryParameters": {},
              "headers": {},
              "requestBody": {
                "model": "model"
              },
              "responseStatusCode": 200,
              "responseBody": {
                "project_id": "project_id",
                "project_name": "project_name",
                "created_at": "2024-01-15T09:30:00Z",
                "updated_at": "2024-01-15T09:30:00Z",
                "last_used": "2024-01-15T09:30:00Z",
                "num_datapoints": 1,
                "evaluation_aggregates": [
                  {
                    "model_config_id": "model_config_id",
                    "evaluator_id": "evaluator_id",
                    "evaluator_version_id": "evaluator_version_id",
                    "aggregate_value": 1.1
                  }
                ],
                "config": {
                  "type": "generic",
                  "id": "config",
                  "other": {
                    "key": "value"
                  },
                  "created_by": {
                    "id": "id",
                    "email_address": "email_address",
                    "full_name": "full_name",
                    "verified": true
                  },
                  "status": "config",
                  "name": "config",
                  "description": "config"
                }
              },
              "codeExamples": {
                "nodeAxios": ""
              },
              "requestBodyV3": {
                "type": "json",
                "value": {
                  "model": "model"
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "project_id": "project_id",
                  "project_name": "project_name",
                  "created_at": "2024-01-15T09:30:00Z",
                  "updated_at": "2024-01-15T09:30:00Z",
                  "last_used": "2024-01-15T09:30:00Z",
                  "num_datapoints": 1,
                  "evaluation_aggregates": [
                    {
                      "model_config_id": "model_config_id",
                      "evaluator_id": "evaluator_id",
                      "evaluator_version_id": "evaluator_version_id",
                      "aggregate_value": 1.1
                    }
                  ],
                  "config": {
                    "type": "generic",
                    "id": "config",
                    "other": {
                      "key": "value"
                    },
                    "created_by": {
                      "id": "id",
                      "email_address": "email_address",
                      "full_name": "full_name",
                      "verified": true
                    },
                    "status": "config",
                    "name": "config",
                    "description": "config"
                  }
                }
              },
              "codeSamples": []
            },
            {
              "path": "/model-configs",
              "pathParameters": {},
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 422,
              "codeExamples": {
                "nodeAxios": ""
              },
              "requestBodyV3": {
                "type": "json",
                "value": {
                  "model": "string"
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "detail": [
                    {
                      "loc": ["string"],
                      "msg": "string",
                      "type": "string"
                    }
                  ]
                }
              },
              "codeSamples": []
            }
          ],
          "description": "Register a model config to a project.\n\nIf the project name provided does not exist, a new project will be created\nautomatically.\n\nIf the model config is the first to be associated to the project, it will\nbe set as the active model config.",
          "authed": true
        },
        {
          "environments": [
            {
              "id": "Default",
              "baseUrl": "https://api.humanloop.com/v4"
            }
          ],
          "defaultEnvironment": "Default",
          "urlSlug": "get",
          "method": "GET",
          "id": "get",
          "originalEndpointId": "endpoint_modelConfigs.get",
          "name": "Get",
          "path": {
            "pathParameters": [
              {
                "description": "String ID of the model config. Starts with `config_`.",
                "key": "id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/model-configs/"
              },
              {
                "type": "pathParameter",
                "value": "id"
              },
              {
                "type": "literal",
                "value": ""
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "type_:ModelConfigResponse"
              }
            }
          },
          "errors": [],
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "type_:HTTPValidationError"
                }
              },
              "statusCode": 422,
              "description": "Validation Error",
              "examples": []
            }
          ],
          "examples": [
            {
              "path": "/model-configs/id",
              "pathParameters": {
                "id": "id"
              },
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "id": "id",
                "other": {
                  "key": "value"
                },
                "name": "name",
                "description": "description",
                "provider": "openai",
                "model": "model",
                "max_tokens": 1,
                "temperature": 1.1,
                "top_p": 1.1,
                "stop": "stop",
                "presence_penalty": 1.1,
                "frequency_penalty": 1.1,
                "seed": 1,
                "response_format": {
                  "type": "json_object",
                  "json_schema": {
                    "key": "value"
                  }
                },
                "prompt_template": "prompt_template",
                "chat_template": [
                  {
                    "content": "content",
                    "name": "name",
                    "tool_call_id": "tool_call_id",
                    "role": "user",
                    "tool_calls": [
                      {
                        "id": "id",
                        "type": "function",
                        "function": {
                          "name": "name"
                        }
                      }
                    ],
                    "tool_call": {
                      "name": "name"
                    }
                  }
                ],
                "tool_configs": [
                  {
                    "id": "id",
                    "other": {
                      "key": "value"
                    },
                    "created_by": {
                      "id": "id",
                      "email_address": "email_address",
                      "verified": true
                    },
                    "status": "status",
                    "name": "name",
                    "description": "description",
                    "source": "organization",
                    "source_code": "source_code",
                    "setup_schema": {
                      "key": "value"
                    },
                    "parameters": {
                      "key": "value"
                    },
                    "signature": "signature",
                    "is_preset": true,
                    "preset_name": "preset_name"
                  }
                ],
                "tools": [
                  {
                    "id": "id",
                    "name": "name",
                    "description": "description",
                    "parameters": {
                      "key": "value"
                    },
                    "source": "source"
                  }
                ],
                "endpoint": "complete"
              },
              "codeExamples": {
                "nodeAxios": ""
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "id": "id",
                  "other": {
                    "key": "value"
                  },
                  "name": "name",
                  "description": "description",
                  "provider": "openai",
                  "model": "model",
                  "max_tokens": 1,
                  "temperature": 1.1,
                  "top_p": 1.1,
                  "stop": "stop",
                  "presence_penalty": 1.1,
                  "frequency_penalty": 1.1,
                  "seed": 1,
                  "response_format": {
                    "type": "json_object",
                    "json_schema": {
                      "key": "value"
                    }
                  },
                  "prompt_template": "prompt_template",
                  "chat_template": [
                    {
                      "content": "content",
                      "name": "name",
                      "tool_call_id": "tool_call_id",
                      "role": "user",
                      "tool_calls": [
                        {
                          "id": "id",
                          "type": "function",
                          "function": {
                            "name": "name"
                          }
                        }
                      ],
                      "tool_call": {
                        "name": "name"
                      }
                    }
                  ],
                  "tool_configs": [
                    {
                      "id": "id",
                      "other": {
                        "key": "value"
                      },
                      "created_by": {
                        "id": "id",
                        "email_address": "email_address",
                        "verified": true
                      },
                      "status": "status",
                      "name": "name",
                      "description": "description",
                      "source": "organization",
                      "source_code": "source_code",
                      "setup_schema": {
                        "key": "value"
                      },
                      "parameters": {
                        "key": "value"
                      },
                      "signature": "signature",
                      "is_preset": true,
                      "preset_name": "preset_name"
                    }
                  ],
                  "tools": [
                    {
                      "id": "id",
                      "name": "name",
                      "description": "description",
                      "parameters": {
                        "key": "value"
                      },
                      "source": "source"
                    }
                  ],
                  "endpoint": "complete"
                }
              },
              "codeSamples": []
            },
            {
              "path": "/model-configs/:id",
              "pathParameters": {
                "id": ":id"
              },
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 422,
              "codeExamples": {
                "nodeAxios": ""
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "detail": [
                    {
                      "loc": ["string"],
                      "msg": "string",
                      "type": "string"
                    }
                  ]
                }
              },
              "codeSamples": []
            }
          ],
          "description": "Get a specific model config by ID.",
          "authed": true
        },
        {
          "environments": [
            {
              "id": "Default",
              "baseUrl": "https://api.humanloop.com/v4"
            }
          ],
          "defaultEnvironment": "Default",
          "urlSlug": "export",
          "migratedFromUrlSlugs": ["export-by-id"],
          "method": "POST",
          "id": "export",
          "originalEndpointId": "endpoint_modelConfigs.export",
          "name": "Export by ID",
          "path": {
            "pathParameters": [
              {
                "description": "String ID of the model config. Starts with `config_`.",
                "key": "id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/model-configs/"
              },
              {
                "type": "pathParameter",
                "value": "id"
              },
              {
                "type": "literal",
                "value": "/export"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          "errors": [],
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "type_:HTTPValidationError"
                }
              },
              "statusCode": 422,
              "description": "Validation Error",
              "examples": []
            }
          ],
          "examples": [
            {
              "path": "/model-configs/id/export",
              "pathParameters": {
                "id": "id"
              },
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": "string",
              "codeExamples": {
                "nodeAxios": ""
              },
              "responseBodyV3": {
                "type": "json",
                "value": "string"
              },
              "codeSamples": []
            },
            {
              "path": "/model-configs/:id/export",
              "pathParameters": {
                "id": ":id"
              },
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 422,
              "codeExamples": {
                "nodeAxios": ""
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "detail": [
                    {
                      "loc": ["string"],
                      "msg": "string",
                      "type": "string"
                    }
                  ]
                }
              },
              "codeSamples": []
            }
          ],
          "description": "Export a model config to a .prompt file by ID.",
          "authed": true
        },
        {
          "environments": [
            {
              "id": "Default",
              "baseUrl": "https://api.humanloop.com/v4"
            }
          ],
          "defaultEnvironment": "Default",
          "urlSlug": "serialize",
          "method": "POST",
          "id": "serialize",
          "originalEndpointId": "endpoint_modelConfigs.serialize",
          "name": "Serialize",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/model-configs/serialize"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "request": {
            "contentType": "application/json",
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "type_modelConfigs:ModelConfigsSerializeRequest"
              }
            }
          },
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          "errors": [],
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "type_:HTTPValidationError"
                }
              },
              "statusCode": 422,
              "description": "Validation Error",
              "examples": []
            }
          ],
          "examples": [
            {
              "path": "/model-configs/serialize",
              "pathParameters": {},
              "queryParameters": {},
              "headers": {},
              "requestBody": {
                "model": "model"
              },
              "responseStatusCode": 200,
              "responseBody": "string",
              "codeExamples": {
                "nodeAxios": ""
              },
              "requestBodyV3": {
                "type": "json",
                "value": {
                  "model": "model"
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": "string"
              },
              "codeSamples": []
            },
            {
              "path": "/model-configs/serialize",
              "pathParameters": {},
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 422,
              "codeExamples": {
                "nodeAxios": ""
              },
              "requestBodyV3": {
                "type": "json",
                "value": {
                  "model": "string"
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "detail": [
                    {
                      "loc": ["string"],
                      "msg": "string",
                      "type": "string"
                    }
                  ]
                }
              },
              "codeSamples": []
            }
          ],
          "description": "Serialize a model config to a .prompt file format.",
          "authed": true
        },
        {
          "environments": [
            {
              "id": "Default",
              "baseUrl": "https://api.humanloop.com/v4"
            }
          ],
          "defaultEnvironment": "Default",
          "urlSlug": "deserialize",
          "method": "POST",
          "id": "deserialize",
          "originalEndpointId": "endpoint_modelConfigs.deserialize",
          "name": "Deserialize",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/model-configs/deserialize"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "request": {
            "contentType": "application/json",
            "type": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "config",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              ]
            }
          },
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "type_:ModelConfigResponse"
              }
            }
          },
          "errors": [],
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "type_:HTTPValidationError"
                }
              },
              "statusCode": 422,
              "description": "Validation Error",
              "examples": []
            }
          ],
          "examples": [
            {
              "path": "/model-configs/deserialize",
              "pathParameters": {},
              "queryParameters": {},
              "headers": {},
              "requestBody": {
                "config": "config"
              },
              "responseStatusCode": 200,
              "responseBody": {
                "id": "id",
                "other": {
                  "key": "value"
                },
                "name": "name",
                "description": "description",
                "provider": "openai",
                "model": "model",
                "max_tokens": 1,
                "temperature": 1.1,
                "top_p": 1.1,
                "stop": "stop",
                "presence_penalty": 1.1,
                "frequency_penalty": 1.1,
                "seed": 1,
                "response_format": {
                  "type": "json_object",
                  "json_schema": {
                    "key": "value"
                  }
                },
                "prompt_template": "prompt_template",
                "chat_template": [
                  {
                    "content": "content",
                    "name": "name",
                    "tool_call_id": "tool_call_id",
                    "role": "user",
                    "tool_calls": [
                      {
                        "id": "id",
                        "type": "function",
                        "function": {
                          "name": "name"
                        }
                      }
                    ],
                    "tool_call": {
                      "name": "name"
                    }
                  }
                ],
                "tool_configs": [
                  {
                    "id": "id",
                    "other": {
                      "key": "value"
                    },
                    "created_by": {
                      "id": "id",
                      "email_address": "email_address",
                      "verified": true
                    },
                    "status": "status",
                    "name": "name",
                    "description": "description",
                    "source": "organization",
                    "source_code": "source_code",
                    "setup_schema": {
                      "key": "value"
                    },
                    "parameters": {
                      "key": "value"
                    },
                    "signature": "signature",
                    "is_preset": true,
                    "preset_name": "preset_name"
                  }
                ],
                "tools": [
                  {
                    "id": "id",
                    "name": "name",
                    "description": "description",
                    "parameters": {
                      "key": "value"
                    },
                    "source": "source"
                  }
                ],
                "endpoint": "complete"
              },
              "codeExamples": {
                "nodeAxios": ""
              },
              "requestBodyV3": {
                "type": "json",
                "value": {
                  "config": "config"
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "id": "id",
                  "other": {
                    "key": "value"
                  },
                  "name": "name",
                  "description": "description",
                  "provider": "openai",
                  "model": "model",
                  "max_tokens": 1,
                  "temperature": 1.1,
                  "top_p": 1.1,
                  "stop": "stop",
                  "presence_penalty": 1.1,
                  "frequency_penalty": 1.1,
                  "seed": 1,
                  "response_format": {
                    "type": "json_object",
                    "json_schema": {
                      "key": "value"
                    }
                  },
                  "prompt_template": "prompt_template",
                  "chat_template": [
                    {
                      "content": "content",
                      "name": "name",
                      "tool_call_id": "tool_call_id",
                      "role": "user",
                      "tool_calls": [
                        {
                          "id": "id",
                          "type": "function",
                          "function": {
                            "name": "name"
                          }
                        }
                      ],
                      "tool_call": {
                        "name": "name"
                      }
                    }
                  ],
                  "tool_configs": [
                    {
                      "id": "id",
                      "other": {
                        "key": "value"
                      },
                      "created_by": {
                        "id": "id",
                        "email_address": "email_address",
                        "verified": true
                      },
                      "status": "status",
                      "name": "name",
                      "description": "description",
                      "source": "organization",
                      "source_code": "source_code",
                      "setup_schema": {
                        "key": "value"
                      },
                      "parameters": {
                        "key": "value"
                      },
                      "signature": "signature",
                      "is_preset": true,
                      "preset_name": "preset_name"
                    }
                  ],
                  "tools": [
                    {
                      "id": "id",
                      "name": "name",
                      "description": "description",
                      "parameters": {
                        "key": "value"
                      },
                      "source": "source"
                    }
                  ],
                  "endpoint": "complete"
                }
              },
              "codeSamples": []
            },
            {
              "path": "/model-configs/deserialize",
              "pathParameters": {},
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 422,
              "codeExamples": {
                "nodeAxios": ""
              },
              "requestBodyV3": {
                "type": "json",
                "value": {
                  "config": "string"
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "detail": [
                    {
                      "loc": ["string"],
                      "msg": "string",
                      "type": "string"
                    }
                  ]
                }
              },
              "codeSamples": []
            }
          ],
          "description": "Deserialize a model config from a .prompt file format.",
          "authed": true
        }
      ],
      "types": [
        "type_modelConfigs:ProjectModelConfigRequestStop",
        "type_modelConfigs:ProjectModelConfigRequestToolsItem",
        "type_modelConfigs:ModelConfigsSerializeRequest"
      ],
      "subpackages": [],
      "urlSlug": "model-configs",
      "webhooks": [],
      "websockets": []
    },
    "subpackage_sessions": {
      "subpackageId": "subpackage_sessions",
      "name": "sessions",
      "endpoints": [
        {
          "environments": [
            {
              "id": "Default",
              "baseUrl": "https://api.humanloop.com/v4"
            }
          ],
          "defaultEnvironment": "Default",
          "urlSlug": "list",
          "method": "GET",
          "id": "list",
          "originalEndpointId": "endpoint_sessions.list",
          "name": "List ",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/sessions"
              }
            ]
          },
          "queryParameters": [
            {
              "description": "String ID of project to return sessions for. Sessions that contain any datapoints associated to this project will be returned. Starts with `pr_`.",
              "key": "project_id",
              "type": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            {
              "description": "Page to fetch. Starts from 1.",
              "key": "page",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              }
            },
            {
              "description": "Number of sessions to retrieve.",
              "key": "size",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              }
            }
          ],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "type_:PaginatedDataSessionResponse"
              }
            }
          },
          "errors": [],
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "type_:HTTPValidationError"
                }
              },
              "statusCode": 422,
              "description": "Validation Error",
              "examples": []
            }
          ],
          "examples": [
            {
              "path": "/sessions",
              "pathParameters": {},
              "queryParameters": {
                "project_id": "project_id"
              },
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "records": [
                  {
                    "id": "id",
                    "reference_id": "reference_id",
                    "projects": [
                      {
                        "id": "id",
                        "name": "name",
                        "type": "prompt"
                      }
                    ],
                    "datapoints_count": 1,
                    "first_inputs": {
                      "key": "value"
                    },
                    "last_output": "last_output",
                    "created_at": "2024-01-15T09:30:00Z",
                    "updated_at": "2024-01-15T09:30:00Z"
                  }
                ],
                "page": 1,
                "size": 1,
                "total": 1
              },
              "codeExamples": {
                "nodeAxios": ""
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "records": [
                    {
                      "id": "id",
                      "reference_id": "reference_id",
                      "projects": [
                        {
                          "id": "id",
                          "name": "name",
                          "type": "prompt"
                        }
                      ],
                      "datapoints_count": 1,
                      "first_inputs": {
                        "key": "value"
                      },
                      "last_output": "last_output",
                      "created_at": "2024-01-15T09:30:00Z",
                      "updated_at": "2024-01-15T09:30:00Z"
                    }
                  ],
                  "page": 1,
                  "size": 1,
                  "total": 1
                }
              },
              "codeSamples": []
            },
            {
              "path": "/sessions",
              "pathParameters": {},
              "queryParameters": {
                "project_id": "string",
                "page": 0,
                "size": 0
              },
              "headers": {},
              "responseStatusCode": 422,
              "codeExamples": {
                "nodeAxios": ""
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "detail": [
                    {
                      "loc": ["string"],
                      "msg": "string",
                      "type": "string"
                    }
                  ]
                }
              },
              "codeSamples": []
            }
          ],
          "description": "Get a page of sessions.",
          "authed": true
        },
        {
          "environments": [
            {
              "id": "Default",
              "baseUrl": "https://api.humanloop.com/v4"
            }
          ],
          "defaultEnvironment": "Default",
          "urlSlug": "create",
          "method": "POST",
          "id": "create",
          "originalEndpointId": "endpoint_sessions.create",
          "name": "Create",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/sessions"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "type_:CreateSessionResponse"
              }
            }
          },
          "errors": [],
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "type_:HTTPValidationError"
                }
              },
              "statusCode": 422,
              "description": "Validation Error",
              "examples": []
            }
          ],
          "examples": [
            {
              "path": "/sessions",
              "pathParameters": {},
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "id": "id"
              },
              "codeExamples": {
                "nodeAxios": ""
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "id": "id"
                }
              },
              "codeSamples": []
            },
            {
              "path": "/sessions",
              "pathParameters": {},
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 422,
              "codeExamples": {
                "nodeAxios": ""
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "detail": [
                    {
                      "loc": ["string"],
                      "msg": "string",
                      "type": "string"
                    }
                  ]
                }
              },
              "codeSamples": []
            }
          ],
          "description": "Create a new session.\n\nReturns a session ID that can be used to log datapoints to the session.",
          "authed": true
        },
        {
          "environments": [
            {
              "id": "Default",
              "baseUrl": "https://api.humanloop.com/v4"
            }
          ],
          "defaultEnvironment": "Default",
          "urlSlug": "get",
          "method": "GET",
          "id": "get",
          "originalEndpointId": "endpoint_sessions.get",
          "name": "Get",
          "path": {
            "pathParameters": [
              {
                "description": "String ID of session to return. Starts with `sesh_`.",
                "key": "id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/sessions/"
              },
              {
                "type": "pathParameter",
                "value": "id"
              },
              {
                "type": "literal",
                "value": ""
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "type_:SessionResponse"
              }
            }
          },
          "errors": [],
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "type_:HTTPValidationError"
                }
              },
              "statusCode": 422,
              "description": "Validation Error",
              "examples": []
            }
          ],
          "examples": [
            {
              "path": "/sessions/id",
              "pathParameters": {
                "id": "id"
              },
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "id": "id",
                "reference_id": "reference_id",
                "projects": [
                  {
                    "id": "id",
                    "name": "name",
                    "type": "prompt"
                  }
                ],
                "datapoints_count": 1,
                "first_inputs": {
                  "key": "value"
                },
                "last_output": "last_output",
                "created_at": "2024-01-15T09:30:00Z",
                "updated_at": "2024-01-15T09:30:00Z"
              },
              "codeExamples": {
                "nodeAxios": ""
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "id": "id",
                  "reference_id": "reference_id",
                  "projects": [
                    {
                      "id": "id",
                      "name": "name",
                      "type": "prompt"
                    }
                  ],
                  "datapoints_count": 1,
                  "first_inputs": {
                    "key": "value"
                  },
                  "last_output": "last_output",
                  "created_at": "2024-01-15T09:30:00Z",
                  "updated_at": "2024-01-15T09:30:00Z"
                }
              },
              "codeSamples": []
            },
            {
              "path": "/sessions/:id",
              "pathParameters": {
                "id": ":id"
              },
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 422,
              "codeExamples": {
                "nodeAxios": ""
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "detail": [
                    {
                      "loc": ["string"],
                      "msg": "string",
                      "type": "string"
                    }
                  ]
                }
              },
              "codeSamples": []
            }
          ],
          "description": "Get a session by ID.",
          "authed": true
        }
      ],
      "types": [],
      "subpackages": [],
      "urlSlug": "sessions",
      "webhooks": [],
      "websockets": []
    },
    "subpackage_projects/activeConfig": {
      "subpackageId": "subpackage_projects/activeConfig",
      "parent": "subpackage_projects",
      "name": "activeConfig",
      "endpoints": [
        {
          "environments": [
            {
              "id": "Default",
              "baseUrl": "https://api.humanloop.com/v4"
            }
          ],
          "defaultEnvironment": "Default",
          "urlSlug": "get",
          "migratedFromUrlSlugs": ["get-active-config"],
          "method": "GET",
          "id": "get",
          "originalEndpointId": "endpoint_projects/activeConfig.get",
          "name": "Get Active Config",
          "path": {
            "pathParameters": [
              {
                "description": "String ID of project. Starts with `pr_`.",
                "key": "id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/projects/"
              },
              {
                "type": "pathParameter",
                "value": "id"
              },
              {
                "type": "literal",
                "value": "/active-config"
              }
            ]
          },
          "queryParameters": [
            {
              "description": "Name for the environment. E.g. 'production'. If not provided, will return the active config for the default environment.",
              "key": "environment",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          ],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "type_:GetModelConfigResponse"
              }
            }
          },
          "errors": [],
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "type_:HTTPValidationError"
                }
              },
              "statusCode": 422,
              "description": "Validation Error",
              "examples": []
            }
          ],
          "examples": [
            {
              "path": "/projects/id/active-config",
              "pathParameters": {
                "id": "id"
              },
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "project_id": "project_id",
                "project_name": "project_name",
                "created_at": "2024-01-15T09:30:00Z",
                "updated_at": "2024-01-15T09:30:00Z",
                "last_used": "2024-01-15T09:30:00Z",
                "num_datapoints": 1,
                "evaluation_aggregates": [
                  {
                    "model_config_id": "model_config_id",
                    "evaluator_id": "evaluator_id",
                    "evaluator_version_id": "evaluator_version_id",
                    "aggregate_value": 1.1
                  }
                ],
                "config": {
                  "type": "generic",
                  "id": "config",
                  "other": {
                    "key": "value"
                  },
                  "created_by": {
                    "id": "id",
                    "email_address": "email_address",
                    "full_name": "full_name",
                    "verified": true
                  },
                  "status": "config",
                  "name": "config",
                  "description": "config"
                },
                "environment_id": "environment_id"
              },
              "codeExamples": {
                "nodeAxios": ""
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "project_id": "project_id",
                  "project_name": "project_name",
                  "created_at": "2024-01-15T09:30:00Z",
                  "updated_at": "2024-01-15T09:30:00Z",
                  "last_used": "2024-01-15T09:30:00Z",
                  "num_datapoints": 1,
                  "evaluation_aggregates": [
                    {
                      "model_config_id": "model_config_id",
                      "evaluator_id": "evaluator_id",
                      "evaluator_version_id": "evaluator_version_id",
                      "aggregate_value": 1.1
                    }
                  ],
                  "config": {
                    "type": "generic",
                    "id": "config",
                    "other": {
                      "key": "value"
                    },
                    "created_by": {
                      "id": "id",
                      "email_address": "email_address",
                      "full_name": "full_name",
                      "verified": true
                    },
                    "status": "config",
                    "name": "config",
                    "description": "config"
                  },
                  "environment_id": "environment_id"
                }
              },
              "codeSamples": []
            },
            {
              "path": "/projects/:id/active-config",
              "pathParameters": {
                "id": ":id"
              },
              "queryParameters": {
                "environment": "string"
              },
              "headers": {},
              "responseStatusCode": 422,
              "codeExamples": {
                "nodeAxios": ""
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "detail": [
                    {
                      "loc": ["string"],
                      "msg": "string",
                      "type": "string"
                    }
                  ]
                }
              },
              "codeSamples": []
            }
          ],
          "description": "Retrieves a config to use to execute your model.\n\nA config will be selected based on the project's\nactive config settings.",
          "authed": true
        },
        {
          "environments": [
            {
              "id": "Default",
              "baseUrl": "https://api.humanloop.com/v4"
            }
          ],
          "defaultEnvironment": "Default",
          "urlSlug": "deactivate",
          "migratedFromUrlSlugs": ["deactivate-config"],
          "method": "DELETE",
          "id": "deactivate",
          "originalEndpointId": "endpoint_projects/activeConfig.deactivate",
          "name": "Deactivate Config",
          "path": {
            "pathParameters": [
              {
                "description": "String ID of project. Starts with `pr_`.",
                "key": "id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/projects/"
              },
              {
                "type": "pathParameter",
                "value": "id"
              },
              {
                "type": "literal",
                "value": "/active-config"
              }
            ]
          },
          "queryParameters": [
            {
              "description": "Name for the environment. E.g. 'production'. If not provided, will delete the active config for the default environment.",
              "key": "environment",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          ],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "type_:ProjectResponse"
              }
            }
          },
          "errors": [],
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "type_:HTTPValidationError"
                }
              },
              "statusCode": 422,
              "description": "Validation Error",
              "examples": []
            }
          ],
          "examples": [
            {
              "path": "/projects/id/active-config",
              "pathParameters": {
                "id": "id"
              },
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "id": "id",
                "name": "name",
                "active_config": {
                  "project_id": "project_id",
                  "project_name": "project_name",
                  "created_at": "2024-01-15T09:30:00Z",
                  "updated_at": "2024-01-15T09:30:00Z",
                  "last_used": "2024-01-15T09:30:00Z",
                  "num_datapoints": 1,
                  "evaluation_aggregates": [
                    {
                      "model_config_id": "model_config_id",
                      "evaluator_id": "evaluator_id",
                      "evaluator_version_id": "evaluator_version_id"
                    }
                  ],
                  "config": {
                    "type": "generic",
                    "id": "config",
                    "other": {
                      "key": "value"
                    },
                    "created_by": {
                      "id": "id",
                      "email_address": "email_address",
                      "verified": true
                    },
                    "status": "config",
                    "name": "config",
                    "description": "config"
                  }
                },
                "users": [
                  {
                    "id": "id",
                    "email_address": "email_address",
                    "full_name": "full_name"
                  }
                ],
                "data_count": 1,
                "feedback_types": [
                  {
                    "type": "rating",
                    "values": [
                      {
                        "value": "value",
                        "sentiment": "positive"
                      }
                    ]
                  }
                ],
                "team_id": "team_id",
                "config_type": "generic",
                "active_evaluators": [
                  {
                    "name": "name",
                    "description": "description",
                    "arguments_type": "target_free",
                    "return_type": "boolean",
                    "code": "code",
                    "model_config": {
                      "id": "id",
                      "model": "model"
                    },
                    "type": "python",
                    "id": "id",
                    "created_at": "2024-01-15T09:30:00Z",
                    "updated_at": "2024-01-15T09:30:00Z"
                  }
                ],
                "directory_id": "directory_id",
                "created_at": "2024-01-15T09:30:00Z",
                "updated_at": "2024-01-15T09:30:00Z"
              },
              "codeExamples": {
                "nodeAxios": ""
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "id": "id",
                  "name": "name",
                  "active_config": {
                    "project_id": "project_id",
                    "project_name": "project_name",
                    "created_at": "2024-01-15T09:30:00Z",
                    "updated_at": "2024-01-15T09:30:00Z",
                    "last_used": "2024-01-15T09:30:00Z",
                    "num_datapoints": 1,
                    "evaluation_aggregates": [
                      {
                        "model_config_id": "model_config_id",
                        "evaluator_id": "evaluator_id",
                        "evaluator_version_id": "evaluator_version_id"
                      }
                    ],
                    "config": {
                      "type": "generic",
                      "id": "config",
                      "other": {
                        "key": "value"
                      },
                      "created_by": {
                        "id": "id",
                        "email_address": "email_address",
                        "verified": true
                      },
                      "status": "config",
                      "name": "config",
                      "description": "config"
                    }
                  },
                  "users": [
                    {
                      "id": "id",
                      "email_address": "email_address",
                      "full_name": "full_name"
                    }
                  ],
                  "data_count": 1,
                  "feedback_types": [
                    {
                      "type": "rating",
                      "values": [
                        {
                          "value": "value",
                          "sentiment": "positive"
                        }
                      ]
                    }
                  ],
                  "team_id": "team_id",
                  "config_type": "generic",
                  "active_evaluators": [
                    {
                      "name": "name",
                      "description": "description",
                      "arguments_type": "target_free",
                      "return_type": "boolean",
                      "code": "code",
                      "model_config": {
                        "id": "id",
                        "model": "model"
                      },
                      "type": "python",
                      "id": "id",
                      "created_at": "2024-01-15T09:30:00Z",
                      "updated_at": "2024-01-15T09:30:00Z"
                    }
                  ],
                  "directory_id": "directory_id",
                  "created_at": "2024-01-15T09:30:00Z",
                  "updated_at": "2024-01-15T09:30:00Z"
                }
              },
              "codeSamples": []
            },
            {
              "path": "/projects/:id/active-config",
              "pathParameters": {
                "id": ":id"
              },
              "queryParameters": {
                "environment": "string"
              },
              "headers": {},
              "responseStatusCode": 422,
              "codeExamples": {
                "nodeAxios": ""
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "detail": [
                    {
                      "loc": ["string"],
                      "msg": "string",
                      "type": "string"
                    }
                  ]
                }
              },
              "codeSamples": []
            }
          ],
          "description": "Remove the project's active config, if set.\n\nThis has no effect if the project does not have an active model config set.",
          "authed": true
        }
      ],
      "types": [],
      "subpackages": [],
      "urlSlug": "active-config",
      "webhooks": [],
      "websockets": []
    },
    "subpackage_projects/deployedConfig": {
      "subpackageId": "subpackage_projects/deployedConfig",
      "parent": "subpackage_projects",
      "name": "deployedConfig",
      "endpoints": [
        {
          "environments": [
            {
              "id": "Default",
              "baseUrl": "https://api.humanloop.com/v4"
            }
          ],
          "defaultEnvironment": "Default",
          "urlSlug": "list",
          "migratedFromUrlSlugs": ["list-deployed-configs"],
          "method": "GET",
          "id": "list",
          "originalEndpointId": "endpoint_projects/deployedConfig.list",
          "name": "List Deployed Configs",
          "path": {
            "pathParameters": [
              {
                "description": "String ID of project. Starts with `pr_`.",
                "key": "id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/projects/"
              },
              {
                "type": "pathParameter",
                "value": "id"
              },
              {
                "type": "literal",
                "value": "/deployed-configs"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "list",
                "itemType": {
                  "type": "id",
                  "value": "type_:EnvironmentProjectConfigResponse"
                }
              }
            }
          },
          "errors": [],
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "type_:HTTPValidationError"
                }
              },
              "statusCode": 422,
              "description": "Validation Error",
              "examples": []
            }
          ],
          "examples": [
            {
              "path": "/projects/id/deployed-configs",
              "pathParameters": {
                "id": "id"
              },
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": [
                {
                  "project_id": "project_id",
                  "project_name": "project_name",
                  "model_config_id": "model_config_id",
                  "model_config_name": "model_config_name",
                  "environment_id": "environment_id",
                  "environment_name": "environment_name",
                  "environment_tag": "environment_tag"
                }
              ],
              "codeExamples": {
                "nodeAxios": ""
              },
              "responseBodyV3": {
                "type": "json",
                "value": [
                  {
                    "project_id": "project_id",
                    "project_name": "project_name",
                    "model_config_id": "model_config_id",
                    "model_config_name": "model_config_name",
                    "environment_id": "environment_id",
                    "environment_name": "environment_name",
                    "environment_tag": "environment_tag"
                  }
                ]
              },
              "codeSamples": []
            },
            {
              "path": "/projects/:id/deployed-configs",
              "pathParameters": {
                "id": ":id"
              },
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 422,
              "codeExamples": {
                "nodeAxios": ""
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "detail": [
                    {
                      "loc": ["string"],
                      "msg": "string",
                      "type": "string"
                    }
                  ]
                }
              },
              "codeSamples": []
            }
          ],
          "description": "Get an array of environments with the deployed configs associated to your project.",
          "authed": true
        },
        {
          "environments": [
            {
              "id": "Default",
              "baseUrl": "https://api.humanloop.com/v4"
            }
          ],
          "defaultEnvironment": "Default",
          "urlSlug": "deploy",
          "migratedFromUrlSlugs": ["deploy-config"],
          "method": "PATCH",
          "id": "deploy",
          "originalEndpointId": "endpoint_projects/deployedConfig.deploy",
          "name": "Deploy Config",
          "path": {
            "pathParameters": [
              {
                "key": "project_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/projects/"
              },
              {
                "type": "pathParameter",
                "value": "project_id"
              },
              {
                "type": "literal",
                "value": "/deploy-config"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "request": {
            "contentType": "application/json",
            "type": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Model config unique identifier generated by Humanloop.",
                  "key": "config_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "List of environments to associate with the model config.",
                  "key": "environments",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "id",
                        "value": "type_:EnvironmentRequest"
                      }
                    }
                  }
                }
              ]
            }
          },
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "list",
                "itemType": {
                  "type": "id",
                  "value": "type_:EnvironmentProjectConfigResponse"
                }
              }
            }
          },
          "errors": [],
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "type_:HTTPValidationError"
                }
              },
              "statusCode": 422,
              "description": "Validation Error",
              "examples": []
            }
          ],
          "examples": [
            {
              "path": "/projects/project_id/deploy-config",
              "pathParameters": {
                "project_id": "project_id"
              },
              "queryParameters": {},
              "headers": {},
              "requestBody": {
                "config_id": "config_id"
              },
              "responseStatusCode": 200,
              "responseBody": [
                {
                  "project_id": "project_id",
                  "project_name": "project_name",
                  "model_config_id": "model_config_id",
                  "model_config_name": "model_config_name",
                  "environment_id": "environment_id",
                  "environment_name": "environment_name",
                  "environment_tag": "environment_tag"
                }
              ],
              "codeExamples": {
                "nodeAxios": ""
              },
              "requestBodyV3": {
                "type": "json",
                "value": {
                  "config_id": "config_id"
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": [
                  {
                    "project_id": "project_id",
                    "project_name": "project_name",
                    "model_config_id": "model_config_id",
                    "model_config_name": "model_config_name",
                    "environment_id": "environment_id",
                    "environment_name": "environment_name",
                    "environment_tag": "environment_tag"
                  }
                ]
              },
              "codeSamples": []
            },
            {
              "path": "/projects/:project_id/deploy-config",
              "pathParameters": {
                "project_id": ":project_id"
              },
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 422,
              "codeExamples": {
                "nodeAxios": ""
              },
              "requestBodyV3": {
                "type": "json",
                "value": {
                  "config_id": "string"
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "detail": [
                    {
                      "loc": ["string"],
                      "msg": "string",
                      "type": "string"
                    }
                  ]
                }
              },
              "codeSamples": []
            }
          ],
          "description": "Deploy a model config to an environment.\n\nIf the environment already has a model config deployed, it will be replaced.",
          "authed": true
        },
        {
          "environments": [
            {
              "id": "Default",
              "baseUrl": "https://api.humanloop.com/v4"
            }
          ],
          "defaultEnvironment": "Default",
          "urlSlug": "delete",
          "migratedFromUrlSlugs": ["delete-deployed-config"],
          "method": "DELETE",
          "id": "delete",
          "originalEndpointId": "endpoint_projects/deployedConfig.delete",
          "name": "Delete Deployed Config",
          "path": {
            "pathParameters": [
              {
                "key": "project_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              {
                "key": "environment_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/projects/"
              },
              {
                "type": "pathParameter",
                "value": "project_id"
              },
              {
                "type": "literal",
                "value": "/deployed-config/"
              },
              {
                "type": "pathParameter",
                "value": "environment_id"
              },
              {
                "type": "literal",
                "value": ""
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "unknown"
              }
            }
          },
          "errors": [],
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "type_:HTTPValidationError"
                }
              },
              "statusCode": 422,
              "description": "Validation Error",
              "examples": []
            }
          ],
          "examples": [
            {
              "path": "/projects/project_id/deployed-config/environment_id",
              "pathParameters": {
                "project_id": "project_id",
                "environment_id": "environment_id"
              },
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "key": "value"
              },
              "codeExamples": {
                "nodeAxios": ""
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "key": "value"
                }
              },
              "codeSamples": []
            },
            {
              "path": "/projects/:project_id/deployed-config/:environment_id",
              "pathParameters": {
                "project_id": ":project_id",
                "environment_id": ":environment_id"
              },
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 422,
              "codeExamples": {
                "nodeAxios": ""
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "detail": [
                    {
                      "loc": ["string"],
                      "msg": "string",
                      "type": "string"
                    }
                  ]
                }
              },
              "codeSamples": []
            }
          ],
          "description": "Remove the version deployed to environment.\n\nThis has no effect if the project does not have an active version set.",
          "authed": true
        }
      ],
      "types": [],
      "subpackages": [],
      "urlSlug": "deployed-config",
      "webhooks": [],
      "websockets": []
    }
  },
  "auth": {
    "type": "header",
    "headerWireValue": "X-API-KEY",
    "nameOverride": "apiKey"
  },
  "hasMultipleBaseUrls": false,
  "globalHeaders": []
}
