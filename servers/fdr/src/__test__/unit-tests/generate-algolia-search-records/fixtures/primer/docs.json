{
  "pages": {
    "changelog/api-v2.md": {
      "markdown": "Version 2 includes improvements to the Client Session API and the Payments API.\n\n## Client Session API\n\n- `X-API-Version` -> `2021-09-27`\n- Creating a payment using *only* a payment method token is now possible. The `order`, `customer` and `metadata` passed on the Client Session request is then used for the payment.\n- The create Client Session endpoint request was extended to include `order`, `customer`, etc.\n- All references to `paymentInstrument` from the previous Payments API version have been refactored to `paymentMethod` to be more consistent throughout\n- The customer `billingAddress` and `shippingAddress` fields are now all optional\n\n## Payments API\n\n- `X-API-Version` -> `2021-09-27`\n- Creating a payment using *only* a payment method token is now possible. The `order`, `customer` and `metadata` passed on the Client Session request is then used for the payment.\n- The create payment endpoint request was extended to include `order`, `customer`, etc. It now more closely resembles the `/client-session` endpoint\n- The response of all the Payments API endpoints was refactored to match the create payment request structure\n- All references to `paymentInstrument` from the previous Payments API version have been refactored to `paymentMethod` to be more consistent throughout\n- All the payments API endpoints (create, capture, cancel, refund, etc.) are now versioned\n- `paymentMethodData` in `PaymentMethod` responses (for card payment method types) all now contain a `first6digits` field in addition to the `last4digits` returned. This is an opt-in field, so it is `null` by default.\n- The customer `billingAddress` and `shippingAddress` fields are now all optional\n"
    },
    "changelog/api-v21.md": {
      "markdown": "Version 2.1 includes improvements to the Client Session API, Payments API and the Payment Methods API.\n\nStarting API v2.1, the API Version X-Api-Version is a semantic version without a patch (e.g. 2.1) rather than a date ðŸŽ‰\nSet the `X-Api-Version` header to `2.1` to use v2.1 of the API.\n\n## Client Session API\n\n- Added `paymentMethod.paymentType` and `paymentMethod.descriptor` on the request and response of the client session\n- Added `order.lineItems[].productType` on the request and response of the client session\n- Added `GET /client-session` to get the content of a client session\n- Added `PATCH /client-session` to update the content of a client session\n- Additional validation has been put in place to ensure that a `currencyCode` is always passed if any `amount` value is passed\n\n## Payments API\n\n- Added `paymentMethod.isVaulted` boolean field to indicate whether the `paymentMethod.paymentMethodToken` in the response is a vaulted token (and can therefore be used for future payments) or not. This replaces `vaultedPaymentMethodToken`.\n- Added `order.lineItems[].productType` on the request and response\n- `amount`, `currencyCode`, `customerId` and `orderId` are now required fields when making a payment with a vaulted token (i.e. a recurring payment).\n- When paying with a vaulted token, additional validation has been put in place to ensure the `customerId` matches the `customerId` associated with the vaulted token.\n\n## Payment Methods API\n\n- Added verify in `POST /payment-instruments/{paymentMethodToken}/vault` to set whether or not the payment method token should be verified before vaulting\n- Added `isVerified` to the payment method response\n"
    },
    "changelog/api-v22.md": {
      "markdown": "This version includes improvements to the Client Session API, Payments API and the Payment Methods API.\nYou must set the `X-Api-Version` header to `2.2` to use v2.2 of the API.\n\n## Client Session API\n\n- Added `order.lineItems.productData` on the request and response\n\n## Payments API\n\n- Added `order.lineItems.productData` on the request and response\n"
    },
    "changelog/migration-guide.md": {
      "markdown": "We are continually introducing new functionality to the Primer Ecosystem, some of which requires additional inputs on our APIs. To make sure these changes donâ€™t break any existing integrations, we roll them out safely using API Versions.\n\n## Migrating to v2.1\n\nThe latest version of our APIs focus on capturing more details to enable a richer checkout experience. Some of these details are required to allow configuration of the checkout via the Primer Dashboard. Also some of these details are needed to work with advanced Payment Processors or Payment Methods.\n\nThe examples below only illustrate how to transition between the two versions of the endpoints, however you should read the latest API Reference linked above for details on the usage of the endpoints. Also read how to introduce API Versioning into your requests in the latest API Reference linked above.\n\n## Client Session\n\nThis is an example of a request in v1: `POST /auth/client-token`.\n\n```json\n{\n  \"customerCountryCode\": \"GB\",\n  \"customerId\": \"customer-123\",\n  \"checkout\": {\n    \"paymentFlow\": \"DEFAULT\"\n  }\n}\n```\n\nThis is an example of a equivalent request in v2: `POST /client-session` with `X-Api-Version=\"2021-09-27\"`.\n\n```json\n{\n  \"customerId\": \"customer-123\",\n  \"customer\": {\n    \"emailAddress\": \"customer@primer.io\",\n    \"mobileNumber\": \"+44841234567\",\n    \"firstName\": \"John\",\n    \"lastName\": \"Doe\",\n    \"billingAddress\": {\n      \"addressLine1\": \"42A\",\n      \"postalCode\": \"abcde\",\n      \"city\": \"Cambridge\",\n      \"state\": \"Cambridgeshire\",\n      \"countryCode\": \"GB\"\n    },\n    \"shippingAddress\": {\n      \"addressLine1\": \"42A\",\n      \"postalCode\": \"abcde\",\n      \"city\": \"Cambridge\",\n      \"state\": \"Cambridgeshire\",\n      \"countryCode\": \"GB\"\n    }\n  },\n  \"order\": {\n    \"lineItems\": [\n      {\n        \"itemId\": \"item-1\",\n        \"description\": \"My item\",\n        \"amount\": 1337,\n        \"quantity\": 1\n      }\n    ],\n    \"countryCode\": \"GB\"\n  },\n  \"currencyCode\": \"GBP\",\n  \"orderId\": \"order-123\",\n  \"metadata\": {\n    \"productType\": \"Merchandise\"\n  },\n  \"paymentMethod\": {\n    \"vaultOnSuccess\": true\n  }\n}\n```\n\n### v2.1\n\nThis is an example of a equivalent request in v2.1: `POST /client-session` with `X-Api-Version=\"2.1\"`.\n\n```json\n{\n  \"customerId\": \"customer-123\",\n  \"customer\": {\n    \"emailAddress\": \"customer@primer.io\",\n    \"mobileNumber\": \"+44841234567\",\n    \"firstName\": \"John\",\n    \"lastName\": \"Doe\",\n    \"billingAddress\": {\n      \"addressLine1\": \"42A\",\n      \"postalCode\": \"abcde\",\n      \"city\": \"Cambridge\",\n      \"state\": \"Cambridgeshire\",\n      \"countryCode\": \"GB\"\n    },\n    \"shippingAddress\": {\n      \"addressLine1\": \"42A\",\n      \"postalCode\": \"abcde\",\n      \"city\": \"Cambridge\",\n      \"state\": \"Cambridgeshire\",\n      \"countryCode\": \"GB\"\n    }\n  },\n  \"lineItems\": [\n    {\n      \"itemId\": \"item-1\",\n      \"description\": \"My item\",\n      \"amount\": 1337,\n      \"quantity\": 1\n    }\n  ],\n  \"orderDetails\": {\n    \"countryCode\": \"GB\"\n  },\n  \"currencyCode\": \"GBP\",\n  \"orderId\": \"order-123\",\n  \"metadata\": {\n    \"productType\": \"Merchandise\"\n  },\n  \"paymentMethod\": {\n    \"vaultOnSuccess\": true\n  }\n}\n```\n\n## Summary of the v2.1 changes\n\n- `order` is now called `orderDetails`\n- `lineItems` is now a top-level element\n- `amount` has been removed. You should always specify `lineItems` and we would dynamically calculate the amount. See our [API Reference](https://apiref.primer.io/reference) for how we calculate the amount.\n\n## Create a Payment\n\nThis is an example of an equivalent request: `POST /payments` with `X-Api-Version=\"2021-09-27\"`.\n\n`POST /payments`\n\n```json\n{\n  \"orderId\": \"order-123\",\n  \"currencyCode\": \"GBP\",\n  \"amount\": 1337,\n  \"paymentInstrument\": {\n    \"token\": \"{{payment_method_token}}\" // As received from the SDK\n  },\n  \"statementDescriptor\": \"Test payment\",\n  \"customer\": {\n    \"email\": \"customer@primer.io\",\n    \"billingAddress\": {\n      \"addressLine1\": \"42A\",\n      \"postalCode\": \"abcde\",\n      \"city\": \"Cambridge\",\n      \"state\": \"Cambridgeshire\",\n      \"countryCode\": \"GB\"\n    }\n  }\n}\n```\n\nThis is an example of an equivalent request in v2: `POST /payments` with `X-Api-Version=\"2021-09-27\"`.\n\n```json\n{\n  \"orderId\": \"order-123\",\n  \"amount\": 1000,\n  \"currencyCode\": \"GBP\",\n  \"customer\": {\n    \"email\": \"customer@primer.io\",\n    \"billingAddress\": {\n      \"addressLine1\": \"42A\",\n      \"postalCode\": \"abcde\",\n      \"city\": \"Cambridge\",\n      \"state\": \"Cambridgeshire\",\n      \"countryCode\": \"GB\"\n    }\n  },\n  \"metadata\": {\n    \"productType\": \"Merchandise\"\n  },\n  \"paymentMethodToken\": \"{{payment_method_token}}\", // As received from the SDK\n  \"paymentMethod\": {\n    \"descriptor\": \"Test payment\",\n    \"paymentType\": \"FIRST_PAYMENT\"\n  }\n}\n```\n\nThis is an example of an equivalent request in v2.1: `POST /payments` with `X-Api-Version=\"2.1\"`\n\n```json\n{\n  \"paymentMethodToken\": \"{{payment_method_token}}\" // As received from the SDK\n}\n```\n\nOR\n\n```json\n{\n  \"orderId\": \"order-123\",\n  \"amount\": 1337,\n  \"currencyCode\": \"GBP\",\n  \"customer\": {\n    \"email\": \"customer@primer.io\",\n    \"billingAddress\": {\n      \"addressLine1\": \"42A\",\n      \"postalCode\": \"abcde\",\n      \"city\": \"Cambridge\",\n      \"state\": \"Cambridgeshire\",\n      \"countryCode\": \"GB\"\n    }\n  },\n  \"lineItems\": [\n    {\n      \"itemId\": \"item-1\",\n      \"description\": \"My item\",\n      \"amount\": 1337,\n      \"quantity\": 1\n    }\n  ],\n  \"orderDetails\": {\n    \"countryCode\": \"GB\"\n  },\n  \"metadata\": {\n    \"productType\": \"Merchandise\"\n  },\n  \"paymentMethodToken\": \"{{payment_method_token}}\", // As received from the SDK\n  \"paymentMethod\": {\n    \"descriptor\": \"Test payment\",\n    \"paymentType\": \"FIRST_PAYMENT\"\n  }\n}\n```\n\n## Summary of the v2.1 changes\n\n- `order` is now called `orderDetails`\n- `lineItems` is now a top-level element\n"
    },
    "changelog/v2.1/api-v21.md": {
      "markdown": "Version 2.1 includes improvements to the Client Session API, Payments API and the Payment Methods API.\n\nStarting API v2.1, the API Version X-Api-Version is a semantic version without a patch (e.g. 2.1) rather than a date ðŸŽ‰\nSet the `X-Api-Version` header to `2.1` to use v2.1 of the API.\n\n## Client Session API\n\n- Added `paymentMethod.paymentType` and `paymentMethod.descriptor` on the request and response of the client session\n- Added `order.lineItems[].productType` on the request and response of the client session\n- Added `GET /client-session` to get the content of a client session\n- Added `PATCH /client-session` to update the content of a client session\n- Additional validation has been put in place to ensure that a `currencyCode` is always passed if any `amount` value is passed\n\n## Payments API\n\n- Added `paymentMethod.isVaulted` boolean field to indicate whether the `paymentMethod.paymentMethodToken` in the response is a vaulted token (and can therefore be used for future payments) or not. This replaces `vaultedPaymentMethodToken`.\n- Added `order.lineItems[].productType` on the request and response\n- `amount`, `currencyCode`, `customerId` and `orderId` are now required fields when making a payment with a vaulted token (i.e. a recurring payment).\n- When paying with a vaulted token, additional validation has been put in place to ensure the `customerId` matches the `customerId` associated with the vaulted token.\n\n## Payment Methods API\n\n- Added verify in `POST /payment-instruments/{paymentMethodToken}/vault` to set whether or not the payment method token should be verified before vaulting\n- Added `isVerified` to the payment method response\n"
    },
    "changelog/v2.2/api-v22.md": {
      "markdown": "This version includes improvements to the Client Session API, Payments API and the Payment Methods API.\nYou must set the `X-Api-Version` header to `2.2` to use v2.2 of the API.\n\n## Client Session API\n\n- Added `order.lineItems.productData` on the request and response\n\n## Payments API\n\n- Added `order.lineItems.productData` on the request and response\n"
    },
    "changelog/v2/api-v2.md": {
      "markdown": "Version 2 includes improvements to the Client Session API and the Payments API.\n\n## Client Session API\n\n- `X-API-Version` -> `2021-09-27`\n- Creating a payment using *only* a payment method token is now possible. The `order`, `customer` and `metadata` passed on the Client Session request is then used for the payment.\n- The create Client Session endpoint request was extended to include `order`, `customer`, etc.\n- All references to `paymentInstrument` from the previous Payments API version have been refactored to `paymentMethod` to be more consistent throughout\n- The customer `billingAddress` and `shippingAddress` fields are now all optional\n\n## Payments API\n\n- `X-API-Version` -> `2021-09-27`\n- Creating a payment using *only* a payment method token is now possible. The `order`, `customer` and `metadata` passed on the Client Session request is then used for the payment.\n- The create payment endpoint request was extended to include `order`, `customer`, etc. It now more closely resembles the `/client-session` endpoint\n- The response of all the Payments API endpoints was refactored to match the create payment request structure\n- All references to `paymentInstrument` from the previous Payments API version have been refactored to `paymentMethod` to be more consistent throughout\n- All the payments API endpoints (create, capture, cancel, refund, etc.) are now versioned\n- `paymentMethodData` in `PaymentMethod` responses (for card payment method types) all now contain a `first6digits` field in addition to the `last4digits` returned. This is an opt-in field, so it is `null` by default.\n- The customer `billingAddress` and `shippingAddress` fields are now all optional\n"
    },
    "introduction/authentication.md": {
      "markdown": "Primer uses API keys to authenticate requests. You can manage API keys in the [Developers](https://sandbox-dashboard.primer.io/developers) area of the dashboard.\n\nAs API keys carry many privileges such as _authorizing_ payments, it is important to keep them **private** and **secure**. Do not hardcode or share API keys (particularly in your source version control system), and they should only be used in your backend.\n\nAuthentication is handled via HTTP headers, specifically the `X-Api-Key` header.\n\n```bash\ncurl -X POST 'https://api.primer.io/<ENDPOINT>' \\\n  --header 'X-Api-Key: <YOUR_API_KEY>'\n```\n\n## Managing API Keys\n\nHead up to the [Developers area](https://sandbox-dashboard.primer.io/developers) on the dashboard to manage your API keys.\n\nYou will be able to generate or revoke API keys and edit their respective scopes. Be aware that any changes to existing API keys will be reflected immediately and could cause unwanted side effects.\n\n## Available scopes\n\n| Scope                         | Description                                                                                                                                                                           |\n| ----------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `client_tokens:write`         | Create client tokens for use with the client SDK.                                                                                                                                     |\n| `third_party:webhook_trigger` | Allows you to post to our webhooks endpoint. API keys with this scope can be used to enable communication between your processor and Primer about important payment lifecycle events. |\n| `transactions:authorize`      | Authorize a payment                                                                                                                                                                   |\n| `transactions:cancel`         | Cancel a payment.                                                                                                                                                                     |\n| `transactions:capture`        | Submit a payment for settlement.                                                                                                                                                      |\n| `transactions:retrieve`       | Retrieve one or more payments.                                                                                                                                                        |\n| `transactions:refund`         | Refund a payment.                                                                                                                                                                     |\n| `payment_instrument:read`     | Read stored payment methods.                                                                                                                                                          |\n| `payment_instrument:write`    | Write stored payment methods.                                                                                                                                                         |\n"
    },
    "introduction/getting-started.md": {
      "markdown": "The Primer API is used to manage Client Sessions, Payments and saved payment methods.\nAll other actions are either managed in the Universal Checkout implementation or in the Dashboard.\n\nCheck out:\n\n- [Client Sessions](https://primer.io/docs/payments/universal-checkout/manage-client-sessions)\n- [Universal Checkout](https://primer.io/docs/accept-payments/setup-universal-checkout/installation/web)\n- [Managing Payments](https://primer.io/docs/accept-payments/manage-payments)\n\nTest the APIs yourself in our API Reference. Don't hesitate to reach out with any questions or feedback. You can email Primer directly at [support@primer.io](support@primer.io), or contact your Primer account manager.\n\n## API Endpoint Deployments\n\n- Sandbox: [https://api.sandbox.primer.io](https://api.sandbox.primer.io)\n- Production: [https://api.primer.io](https://api.primer.io)\n\n## API Versions\n\nPrimer makes updates to the APIs on a regular basis, as we release new features. To allow you to update your integration as you are ready, we allow for a `X-Api-Version` header to be passed on all API requests.\n\nIf you omit the version header, your request will default to the earliest supported version of the API.\n\n```bash\ncurl -X POST 'https://api.primer.io/<ENDPOINT>' \\\n  --header 'X-Api-Version: 2.2'\n```\n\n### Available Versions\n\nRead about the available versions of the APIs below on our [Changelog](https://apiref.primer.io/changelog).\n"
    },
    "introduction/idempotency-key.md": {
      "markdown": "Primer supports a request idempotency mechanism for our Payments API. This optional feature enables you to safely retry a request without risking the user being charged or refunded multiple times.\n\nThis is particularly useful when an API call fails due to the request being invalid, due to a network issue, or if Primer is momentarily unavailable.\n\nIf this is the case, make another request with the same idempotency key:\n\n- If a request with the same idempotency key has already been successfully processed by Primer, the new request will be ignored. A `400` error will be returned with an `errorId` set to `TransactionRequestIdempotencyKeyAlreadyExists`.\n- Otherwise, Primer will attempt to process the new request.\n\nTo make an idempotent request, generate an idempotency key and pass it to the header `X-Idempotency-Key`.\n\n```bash\ncurl -X POST 'https://api.primer.io/<ENDPOINT>' \\\n  --header 'X-Idempotency-Key: <idempotency-key>'\n```\n\nThe way you generate the key is totally up to you, as long as it is unique per request attempt.\n\nKeep in mind that a payment request resulting in a declined or failed payment is still considered _Successfully processed_ for the API. Therefore, if you want to allow the user to retry an unsuccessful payment, make sure to not use the same idempotency key.\n\nAs a such, don't use anything too restrictive like an `orderId` for the idempotency key as multiple payment attempts and refunds can be made for a single order.\n"
    },
    "introduction/loyalty-transactions.md": {
      "markdown": "Primer's Loyalty API provides an interface to interact with 3rd party loyalty point and service providers.\n\nAll of the endpoints below reference a `connectionId`. This is the unique Primer identifier for your loyalty provider connection. Primer will provide this once the loyalty provider connection is created.\n\nTo identify the customer in the context of the loyalty provider, a `customerId` is also necessary.\n\n## Get the customer balance\n\nCall the [Loyalty Customers](https://apiref.primer.io/reference/get_loyalty_customer) endpoint, which includes the customer's balance. In future this object could contain further details.\n\n## Redeem points\n\nCall the [Loyalty Transactions](https://apiref.primer.io/reference/post_loyalty_transaction) endpoint to create a `REDEMPTION` transaction.\n\nProvide an `orderId` to link multiple transactions together.\n\n## Refund points\n\nCall the [Loyalty Transactions](https://apiref.primer.io/reference/post_loyalty_transaction) endpoint to create a `REFUND` transaction. This transaction is completely independent from a redeem transaction.\n\nProvide an `orderId` to link multiple transactions together.\n\n## Get a list of transactions\n\nCall the [Loyalty Transactions](https://apiref.primer.io/reference/get_loyalty_transaction) endpoint to retrieve a list of all your transactions. In most cases it makes sense to filter by `connectionId`. You can also filter by `customerId` or `orderId`."
    },
    "introduction/responses.md": {
      "markdown": "## Status Codes\n\nThe following table summarizes the HTTP response codes you may receive from\nthe Primer REST API.\n\n| Status Code | Description             |\n| ----------- | ----------------------- |\n| `200`       | Success                 |\n| `400`       | Bad Request             |\n| `401`       | Unauthorized            |\n| `403`       | Forbidden               |\n| `404`       | Entity Not Found        |\n| `409`       | Entity Already Exists   |\n| `422`       | Input Validation Failed |\n\n## Error Responses\n\nPrimer uses conventional HTTP response codes to indicate the success or failure of an API request. HTTP codes in the `2XX` range indicate a successful request, whereas codes in the `4XX` range indicate a failed request usually due to invalid inputs or operations.\n\nThe format of the payload for all errors is common. When an unsuccessful request occurs, you will receive a payload in the following format:\n\n```json\n{\n  \"error\": {\n    \"errorId\": \"AnErrorId\",\n    \"description\": \"A human description of the error.\",\n    \"diagnosticsId\": \"1234567890\",\n    \"validationErrors\": []\n  }\n}\n```\n\nAll error payloads will be comprised of a unique `errorId` which you can use to identify the error, a human description `description`, and a `diagnosticsId` that you can quote when contacting the support team ([support@primer.io](mailto:support@primer.io)). In case of a badly formed request, Primer will also return additional `validationErrors`.\n\n## Payment Status\n\nAs the payments are created, processed, and finalised, they go through a number of states that you will get as an API response, through webhook notifications, and in the Dashboard. These states are used across all processors, as processor specific states are mapped to these. An additional message, in the field `processorMessage`, from the processor may also be included that details the reason for the state, primarily on failure states.\n\n| Status              | Description                                                                                                                                         |\n| ------------------- | --------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `PENDING`           | The payment has been created by Primer but not yet authorized.                                                                                      |\n| `FAILED`            | The processor failed to process this payment.                                                                                                       |\n| `AUTHORIZED`        | The payment is authorized and awaiting capture.                                                                                                     |\n| `SETTLING`          | The payment has been submitted for settlement and funds will be settled later.                                                                      |\n| `PARTIALLY_SETTLED` | The payment has been partially settled.                                                                                                             |\n| `SETTLED`           | Funds have been settled into your account.                                                                                                          |\n| `DECLINED`          | This payment was declined by the processor, either at a gateway or acquirer level. See the reason object in your response payload for more details. |\n| `CANCELLED`         | The payment was cancelled prior to it being settled.                                                                                                |\n\nDon't hesitate to reach out with any questions or feedback. You can email Primer directly at [support@primer.io](mailto:support@primer.io), or contact your Primer account manager.\n"
    }
  },
  "config": {
    "title": "Primer | API Reference",
    "logoV2": { "dark": "dbe61217-62ba-436b-9d18-c8ab90216ad3", "light": "a8046bd5-c09f-4481-bc20-50091881850a" },
    "logoHeight": 24,
    "logoHref": "https://primer.io",
    "favicon": "832d4946-b757-4e67-9d31-b43bc77984c3",
    "navigation": {
      "versions": [
        {
          "config": {
            "items": [
              {
                "title": "Introduction",
                "items": [
                  { "title": "Getting Started", "id": "introduction/getting-started.md", "type": "page" },
                  { "title": "Authentication", "id": "introduction/authentication.md", "type": "page" },
                  { "title": "API Responses", "id": "introduction/responses.md", "type": "page" },
                  { "title": "Idempotency Key", "id": "introduction/idempotency-key.md", "type": "page" },
                  { "title": "Loyalty Transactions", "id": "introduction/loyalty-transactions.md", "type": "page" }
                ],
                "collapsed": false,
                "type": "section"
              },
              {
                "title": "Changelog",
                "items": [
                  { "title": "API Migration Guide", "id": "changelog/migration-guide.md", "type": "page" },
                  { "title": "API v2.2", "id": "changelog/api-v22.md", "type": "page" },
                  { "title": "API v2.1", "id": "changelog/api-v21.md", "type": "page" },
                  { "title": "API v2", "id": "changelog/api-v2.md", "type": "page" }
                ],
                "collapsed": true,
                "type": "section"
              },
              { "title": "Primer API", "api": "56e8ea17-681a-4804-a7dd-c22b7ed84638", "type": "api" },
              { "title": "Primer Webhooks", "api": "5a827b81-ef49-44fa-bdc7-427d68b87701", "type": "api" }
            ]
          },
          "version": "v2.2"
        },
        {
          "config": {
            "items": [
              {
                "title": "Introduction",
                "items": [
                  { "title": "Getting Started", "id": "introduction/getting-started.md", "type": "page" },
                  { "title": "Authentication", "id": "introduction/authentication.md", "type": "page" },
                  { "title": "API Responses", "id": "introduction/responses.md", "type": "page" },
                  { "title": "Idempotency Key", "id": "introduction/idempotency-key.md", "type": "page" },
                  { "title": "Loyalty Transactions", "id": "introduction/loyalty-transactions.md", "type": "page" }
                ],
                "type": "section"
              },
              { "title": "Primer API", "api": "0b088e87-003f-4382-939a-3adde137c7d7", "type": "api" }
            ]
          },
          "version": "v2.1"
        },
        {
          "config": {
            "items": [
              {
                "title": "Introduction",
                "items": [
                  { "title": "Getting Started", "id": "introduction/getting-started.md", "type": "page" },
                  { "title": "Authentication", "id": "introduction/authentication.md", "type": "page" },
                  { "title": "API Responses", "id": "introduction/responses.md", "type": "page" },
                  { "title": "Idempotency Key", "id": "introduction/idempotency-key.md", "type": "page" },
                  { "title": "Loyalty Transactions", "id": "introduction/loyalty-transactions.md", "type": "page" }
                ],
                "type": "section"
              },
              { "title": "Primer API", "api": "b5c3afec-fd94-4936-9b2e-c8c55cd1b325", "type": "api" }
            ]
          },
          "version": "v2"
        }
      ]
    },
    "colorsV2": {
      "accentPrimary": {
        "dark": { "r": 255, "g": 140, "b": 120 },
        "light": { "r": 224, "g": 99, "b": 76 },
        "type": "themed"
      }
    },
    "navbarLinks": [
      { "text": "Postman", "url": "https://www.postman.com/fern-api/workspace/fern-primer", "type": "secondary" },
      { "text": "Blog", "url": "https://primer.io/blog", "type": "secondary" },
      { "text": "Community", "url": "https://bit.ly/3f5vvJ2", "type": "secondary" },
      { "text": "Log In", "url": "https://dash.readme.com/to/primerapi", "type": "primary" }
    ]
  }
}
