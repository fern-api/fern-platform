/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as core from "../../../../core";
import * as FernNursery from "../../../index";
import urlJoin from "url-join";

export declare namespace Token {
    interface Options {
        environment: core.Supplier<string>;
    }

    interface RequestOptions {
        timeoutInSeconds?: number;
        maxRetries?: number;
        abortSignal?: AbortSignal;
    }
}

export class Token {
    constructor(protected readonly _options: Token.Options) {}

    /**
     * @param {FernNursery.CreateTokenRequest} request
     * @param {Token.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await fernNursery.token.create({
     *         ownerId: "string",
     *         prefix: "string",
     *         description: "string"
     *     })
     */
    public async create(
        request: FernNursery.CreateTokenRequest,
        requestOptions?: Token.RequestOptions
    ): Promise<core.APIResponse<FernNursery.CreateTokenResponse, FernNursery.token.create.Error>> {
        const _response = await core.fetcher({
            url: urlJoin(await core.Supplier.get(this._options.environment), "/tokens/create"),
            method: "POST",
            headers: {
                "X-Fern-Language": "JavaScript",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
            },
            contentType: "application/json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : undefined,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                ok: true,
                body: _response.body as FernNursery.CreateTokenResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch ((_response.error.body as FernNursery.token.create.Error)?.errorName) {
                case "OwnerNotFoundError":
                    return {
                        ok: false,
                        error: _response.error.body as FernNursery.token.create.Error,
                    };
            }
        }

        return {
            ok: false,
            error: FernNursery.token.create.Error._unknown(_response.error),
        };
    }

    /**
     * @param {FernNursery.GetTokenMetadataRequest} request
     * @param {Token.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await fernNursery.token.getTokenMetadata({
     *         token: "string"
     *     })
     */
    public async getTokenMetadata(
        request: FernNursery.GetTokenMetadataRequest,
        requestOptions?: Token.RequestOptions
    ): Promise<core.APIResponse<FernNursery.TokenMetadata, FernNursery.token.getTokenMetadata.Error>> {
        const _response = await core.fetcher({
            url: urlJoin(await core.Supplier.get(this._options.environment), "/tokens/metadata"),
            method: "POST",
            headers: {
                "X-Fern-Language": "JavaScript",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
            },
            contentType: "application/json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : undefined,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                ok: true,
                body: _response.body as FernNursery.TokenMetadata,
            };
        }

        if (_response.error.reason === "status-code") {
            switch ((_response.error.body as FernNursery.token.getTokenMetadata.Error)?.errorName) {
                case "TokenNotFoundError":
                    return {
                        ok: false,
                        error: _response.error.body as FernNursery.token.getTokenMetadata.Error,
                    };
            }
        }

        return {
            ok: false,
            error: FernNursery.token.getTokenMetadata.Error._unknown(_response.error),
        };
    }

    /**
     * @param {FernNursery.OwnerId} ownerId
     * @param {Token.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await fernNursery.token.getTokensForOwner("string")
     */
    public async getTokensForOwner(
        ownerId: FernNursery.OwnerId,
        requestOptions?: Token.RequestOptions
    ): Promise<core.APIResponse<FernNursery.TokenMetadata[], FernNursery.token.getTokensForOwner.Error>> {
        const _response = await core.fetcher({
            url: urlJoin(
                await core.Supplier.get(this._options.environment),
                `/tokens/owner/${encodeURIComponent(ownerId)}`
            ),
            method: "GET",
            headers: {
                "X-Fern-Language": "JavaScript",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
            },
            contentType: "application/json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : undefined,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                ok: true,
                body: _response.body as FernNursery.TokenMetadata[],
            };
        }

        if (_response.error.reason === "status-code") {
            switch ((_response.error.body as FernNursery.token.getTokensForOwner.Error)?.errorName) {
                case "OwnerNotFoundError":
                    return {
                        ok: false,
                        error: _response.error.body as FernNursery.token.getTokensForOwner.Error,
                    };
            }
        }

        return {
            ok: false,
            error: FernNursery.token.getTokensForOwner.Error._unknown(_response.error),
        };
    }

    /**
     * @param {FernNursery.TokenId} tokenId
     * @param {Token.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await fernNursery.token.revokeTokenById("string")
     */
    public async revokeTokenById(
        tokenId: FernNursery.TokenId,
        requestOptions?: Token.RequestOptions
    ): Promise<core.APIResponse<void, FernNursery.token.revokeTokenById.Error>> {
        const _response = await core.fetcher({
            url: urlJoin(
                await core.Supplier.get(this._options.environment),
                `/tokens/revoke/${encodeURIComponent(tokenId)}`
            ),
            method: "POST",
            headers: {
                "X-Fern-Language": "JavaScript",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
            },
            contentType: "application/json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : undefined,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                ok: true,
                body: undefined,
            };
        }

        if (_response.error.reason === "status-code") {
            switch ((_response.error.body as FernNursery.token.revokeTokenById.Error)?.errorName) {
                case "TokenNotFoundError":
                    return {
                        ok: false,
                        error: _response.error.body as FernNursery.token.revokeTokenById.Error,
                    };
            }
        }

        return {
            ok: false,
            error: FernNursery.token.revokeTokenById.Error._unknown(_response.error),
        };
    }

    /**
     * @param {FernNursery.RevokeTokenRequest} request
     * @param {Token.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await fernNursery.token.revokeToken({
     *         token: "string"
     *     })
     */
    public async revokeToken(
        request: FernNursery.RevokeTokenRequest,
        requestOptions?: Token.RequestOptions
    ): Promise<core.APIResponse<void, FernNursery.token.revokeToken.Error>> {
        const _response = await core.fetcher({
            url: urlJoin(await core.Supplier.get(this._options.environment), "/tokens/revoke"),
            method: "POST",
            headers: {
                "X-Fern-Language": "JavaScript",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
            },
            contentType: "application/json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : undefined,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                ok: true,
                body: undefined,
            };
        }

        if (_response.error.reason === "status-code") {
            switch ((_response.error.body as FernNursery.token.revokeToken.Error)?.errorName) {
                case "TokenNotFoundError":
                    return {
                        ok: false,
                        error: _response.error.body as FernNursery.token.revokeToken.Error,
                    };
            }
        }

        return {
            ok: false,
            error: FernNursery.token.revokeToken.Error._unknown(_response.error),
        };
    }
}
