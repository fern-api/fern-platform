/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as FernNursery from "../../../index";
import * as core from "../../../../core";

export type Error =
    | FernNursery.token.revokeTokenById.Error.TokenNotFoundError
    | FernNursery.token.revokeTokenById.Error._Unknown;

export declare namespace Error {
    interface TokenNotFoundError {
        errorName: "TokenNotFoundError";
    }

    interface _Unknown {
        errorName: void;
        content: core.Fetcher.Error;
    }

    interface _Visitor<_Result> {
        tokenNotFoundError: () => _Result;
        _other: (value: core.Fetcher.Error) => _Result;
    }
}

export const Error = {
    tokenNotFoundError: (): FernNursery.token.revokeTokenById.Error.TokenNotFoundError => {
        return {
            errorName: "TokenNotFoundError",
        };
    },

    _unknown: (fetcherError: core.Fetcher.Error): FernNursery.token.revokeTokenById.Error._Unknown => {
        return {
            errorName: undefined,
            content: fetcherError,
        };
    },

    _visit: <_Result>(
        value: FernNursery.token.revokeTokenById.Error,
        visitor: FernNursery.token.revokeTokenById.Error._Visitor<_Result>
    ): _Result => {
        switch (value.errorName) {
            case "TokenNotFoundError":
                return visitor.tokenNotFoundError();
            default:
                return visitor._other(value as any);
        }
    },
} as const;
