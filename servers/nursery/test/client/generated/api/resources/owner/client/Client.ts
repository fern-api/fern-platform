/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as core from "../../../../core";
import * as FernNursery from "../../../index";
import urlJoin from "url-join";

export declare namespace Owner {
    interface Options {
        environment: core.Supplier<string>;
    }

    interface RequestOptions {
        timeoutInSeconds?: number;
        maxRetries?: number;
        abortSignal?: AbortSignal;
    }
}

export class Owner {
    constructor(protected readonly _options: Owner.Options) {}

    /**
     * @param {FernNursery.CreateOwnerRequest} request
     * @param {Owner.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await fernNursery.owner.create({
     *         ownerId: "string",
     *         data: {
     *             "key": "value"
     *         }
     *     })
     */
    public async create(
        request: FernNursery.CreateOwnerRequest,
        requestOptions?: Owner.RequestOptions
    ): Promise<core.APIResponse<void, FernNursery.owner.create.Error>> {
        const _response = await core.fetcher({
            url: urlJoin(await core.Supplier.get(this._options.environment), "/owner"),
            method: "POST",
            headers: {
                "X-Fern-Language": "JavaScript",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
            },
            contentType: "application/json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : undefined,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                ok: true,
                body: undefined,
            };
        }

        if (_response.error.reason === "status-code") {
            switch ((_response.error.body as FernNursery.owner.create.Error)?.errorName) {
                case "OwnerAlreadyExistsError":
                    return {
                        ok: false,
                        error: _response.error.body as FernNursery.owner.create.Error,
                    };
            }
        }

        return {
            ok: false,
            error: FernNursery.owner.create.Error._unknown(_response.error),
        };
    }

    /**
     * @param {FernNursery.OwnerId} ownerId
     * @param {Owner.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await fernNursery.owner.get("string")
     */
    public async get(
        ownerId: FernNursery.OwnerId,
        requestOptions?: Owner.RequestOptions
    ): Promise<core.APIResponse<FernNursery.Owner, FernNursery.owner.get.Error>> {
        const _response = await core.fetcher({
            url: urlJoin(await core.Supplier.get(this._options.environment), `/owner/${encodeURIComponent(ownerId)}`),
            method: "GET",
            headers: {
                "X-Fern-Language": "JavaScript",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
            },
            contentType: "application/json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : undefined,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                ok: true,
                body: _response.body as FernNursery.Owner,
            };
        }

        if (_response.error.reason === "status-code") {
            switch ((_response.error.body as FernNursery.owner.get.Error)?.errorName) {
                case "OwnerNotFoundError":
                    return {
                        ok: false,
                        error: _response.error.body as FernNursery.owner.get.Error,
                    };
            }
        }

        return {
            ok: false,
            error: FernNursery.owner.get.Error._unknown(_response.error),
        };
    }

    /**
     * @param {FernNursery.OwnerId} ownerId
     * @param {FernNursery.UpdateOwnerRequest} request
     * @param {Owner.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await fernNursery.owner.update("string", {
     *         data: {
     *             "key": "value"
     *         }
     *     })
     */
    public async update(
        ownerId: FernNursery.OwnerId,
        request: FernNursery.UpdateOwnerRequest,
        requestOptions?: Owner.RequestOptions
    ): Promise<core.APIResponse<FernNursery.Owner, FernNursery.owner.update.Error>> {
        const _response = await core.fetcher({
            url: urlJoin(await core.Supplier.get(this._options.environment), `/owner/${encodeURIComponent(ownerId)}`),
            method: "PUT",
            headers: {
                "X-Fern-Language": "JavaScript",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
            },
            contentType: "application/json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : undefined,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                ok: true,
                body: _response.body as FernNursery.Owner,
            };
        }

        if (_response.error.reason === "status-code") {
            switch ((_response.error.body as FernNursery.owner.update.Error)?.errorName) {
                case "OwnerNotFoundError":
                    return {
                        ok: false,
                        error: _response.error.body as FernNursery.owner.update.Error,
                    };
            }
        }

        return {
            ok: false,
            error: FernNursery.owner.update.Error._unknown(_response.error),
        };
    }
}
