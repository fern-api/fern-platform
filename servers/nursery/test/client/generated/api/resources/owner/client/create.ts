/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as FernNursery from "../../../index";
import * as core from "../../../../core";

export type Error = FernNursery.owner.create.Error.OwnerAlreadyExistsError | FernNursery.owner.create.Error._Unknown;

export declare namespace Error {
    interface OwnerAlreadyExistsError {
        errorName: "OwnerAlreadyExistsError";
    }

    interface _Unknown {
        errorName: void;
        content: core.Fetcher.Error;
    }

    interface _Visitor<_Result> {
        ownerAlreadyExistsError: () => _Result;
        _other: (value: core.Fetcher.Error) => _Result;
    }
}

export const Error = {
    ownerAlreadyExistsError: (): FernNursery.owner.create.Error.OwnerAlreadyExistsError => {
        return {
            errorName: "OwnerAlreadyExistsError",
        };
    },

    _unknown: (fetcherError: core.Fetcher.Error): FernNursery.owner.create.Error._Unknown => {
        return {
            errorName: undefined,
            content: fetcherError,
        };
    },

    _visit: <_Result>(
        value: FernNursery.owner.create.Error,
        visitor: FernNursery.owner.create.Error._Visitor<_Result>
    ): _Result => {
        switch (value.errorName) {
            case "OwnerAlreadyExistsError":
                return visitor.ownerAlreadyExistsError();
            default:
                return visitor._other(value as any);
        }
    },
} as const;
