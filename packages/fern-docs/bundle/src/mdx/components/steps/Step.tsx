"use client";

import { usePathname } from "next/navigation";
import React, {
  ComponentProps,
  ReactElement,
  useContext,
  useState,
} from "react";

import { Check, Link2 } from "lucide-react";
import { AnimatePresence, LazyMotion, domAnimation } from "motion/react";
import * as m from "motion/react-m";

import { cn } from "@fern-docs/components";
import { addLeadingSlash } from "@fern-docs/utils";
import { useCopyToClipboard } from "@fern-ui/react-commons";

import { useIsFernAnchorDisabled } from "@/components/FernAnchor";
import { FernLink } from "@/components/FernLink";

interface StepProps extends ComponentProps<"div"> {
  id: string; // id can be overridden, but a default is generated by rehypeSteps
}

export const StepCtx = React.createContext<number>(0);

export function Step({
  children,
  className,
  title,
  id,
  ...props
}: StepProps): ReactElement<any> {
  const index = useContext(StepCtx);
  const currentPath = usePathname();
  const href = addLeadingSlash(`${currentPath}#${id}`);
  const { copyToClipboard, wasJustCopied } = useCopyToClipboard(() =>
    new URL(href, window.location.href).toString()
  );
  const [hover, setHover] = useState(false);
  const isFernAnchorDisabled = useIsFernAnchorDisabled();

  return (
    <div className={cn("fern-step", className)} id={id} {...props}>
      {!isFernAnchorDisabled && (
        <FernLink
          className="fern-anchor"
          href={href}
          shallow={true}
          scroll={false}
          replace={true}
          onClick={copyToClipboard}
          onPointerEnter={() => setHover(true)}
          onPointerLeave={() => setHover(false)}
          tabIndex={-1}
        >
          <span className="fern-anchor-icon">
            {hover ? <Link2 /> : <span>{index}</span>}
          </span>
          <LazyMotion features={domAnimation}>
            <AnimatePresence>
              {wasJustCopied && (
                <m.div
                  className="fern-anchor-icon copied"
                  exit={{ opacity: 0 }}
                >
                  <Check />
                </m.div>
              )}
            </AnimatePresence>
          </LazyMotion>
        </FernLink>
      )}
      {title != null && (
        <h3
          onPointerEnter={() => setHover(true)}
          onPointerLeave={() => setHover(false)}
        >
          {title}
        </h3>
      )}
      {children}
    </div>
  );
}
