import { cn } from "@fern-docs/components";
import { useCopyToClipboard } from "@fern-ui/react-commons";
import { AnimatePresence, motion } from "framer-motion";
import { Check, Link } from "lucide-react";
import React, { ComponentPropsWithoutRef } from "react";
import { FernLink } from "../../../components/FernLink";

const HasStepGroupContext = React.createContext(false);

export const StepGroup = React.forwardRef<
  HTMLDivElement,
  ComponentPropsWithoutRef<"div">
>(({ children, className, ...props }, ref) => {
  return (
    <div ref={ref} className={cn("fern-steps", className)} {...props}>
      <HasStepGroupContext.Provider value={true}>
        {children}
      </HasStepGroupContext.Provider>
    </div>
  );
});

StepGroup.displayName = "StepGroup";

interface StepProps extends ComponentPropsWithoutRef<"div"> {
  id: string; // id can be overridden, but a default is generated by rehypeFernSteps
  index: string; // index is always set by rehypeFernSteps and cannot be overridden
}

export const Step = React.forwardRef<HTMLDivElement, StepProps>(
  ({ children, className, title, id, index, ...props }, ref) => {
    const hasStepGroupContext = React.useContext(HasStepGroupContext);

    const href = `#${id}`;
    const { copyToClipboard, wasJustCopied } = useCopyToClipboard(() =>
      new URL(href, window.location.href).toString()
    );
    const [hover, setHover] = React.useState(false);

    if (!hasStepGroupContext) {
      return (
        <StepGroup>
          <Step
            {...props}
            ref={ref}
            id={id}
            index={index}
            className={className}
          >
            {children}
          </Step>
        </StepGroup>
      );
    }

    return (
      <div
        ref={ref}
        className={cn("fern-step scroll-mt-content-padded", className)}
        id={id}
        {...props}
      >
        <FernLink
          className="fern-anchor"
          href={href}
          shallow={true}
          scroll={false}
          replace={true}
          onClick={copyToClipboard}
          onMouseOver={() => setHover(true)}
          onMouseOut={() => setHover(false)}
          tabIndex={-1}
        >
          <span className="fern-anchor-icon">
            {hover ? <Link /> : <span>{index}</span>}
          </span>
          <AnimatePresence>
            {wasJustCopied && (
              <motion.div
                className="fern-anchor-icon copied"
                exit={{ opacity: 0 }}
              >
                <Check />
              </motion.div>
            )}
          </AnimatePresence>
        </FernLink>
        {title != null && (
          <h3
            onMouseOver={() => setHover(true)}
            onMouseOut={() => setHover(false)}
          >
            {title}
          </h3>
        )}
        <HasStepGroupContext.Provider value={false}>
          {children}
        </HasStepGroupContext.Provider>
      </div>
    );
  }
);

Step.displayName = "Step";
