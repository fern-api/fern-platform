[
  {
    "objectID": "test:test.com:root.uv.getting-started.welcome-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/getting-started/welcome",
    "pathname": "/getting-started/welcome",
    "title": "Welcome",
    "breadcrumb": [
      {
        "title": "Getting started",
        "pathname": "/getting-started"
      }
    ],
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "page_position": 0,
    "type": "markdown",
    "content": "Intrinsic is now SOC-2 Compliant"
  },
  {
    "objectID": "test:test.com:root.uv.getting-started.welcome-overview-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/getting-started/welcome",
    "pathname": "/getting-started/welcome",
    "title": "Overview",
    "breadcrumb": [
      {
        "title": "Getting started",
        "pathname": "/getting-started"
      }
    ],
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "page_position": 1,
    "type": "markdown",
    "hash": "#overview",
    "content": "Welcome to our documentation! Here you'll find information to get started as well as our API Reference.",
    "hierarchy": {
      "h0": {
        "title": "Welcome"
      },
      "h2": {
        "id": "overview",
        "title": "Overview"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.getting-started.welcome-about-intrinsic-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/getting-started/welcome",
    "pathname": "/getting-started/welcome",
    "title": "About Intrinsic",
    "breadcrumb": [
      {
        "title": "Getting started",
        "pathname": "/getting-started"
      }
    ],
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "page_position": 1,
    "type": "markdown",
    "hash": "#about-intrinsic",
    "content": "Intrinsic is a unified and modern platform for Trust & Safety. Here you'll find information for how to get started as well as our API reference.",
    "hierarchy": {
      "h0": {
        "title": "Welcome"
      },
      "h2": {
        "id": "about-intrinsic",
        "title": "About Intrinsic"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.getting-started.welcome-getting-started-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/getting-started/welcome",
    "pathname": "/getting-started/welcome",
    "title": "Getting Started",
    "breadcrumb": [
      {
        "title": "Getting started",
        "pathname": "/getting-started"
      }
    ],
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "page_position": 1,
    "type": "markdown",
    "hash": "#getting-started",
    "content": "To access to the platform, you need access to the Intrinsic API Key. You can obtain this on the Dashboard. This API is used to authenticate your access via the Intrinsic API.",
    "hierarchy": {
      "h0": {
        "title": "Welcome"
      },
      "h2": {
        "id": "getting-started",
        "title": "Getting Started"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.getting-started.welcome-why-intrinsic-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/getting-started/welcome",
    "pathname": "/getting-started/welcome",
    "title": "Why Intrinsic",
    "breadcrumb": [
      {
        "title": "Getting started",
        "pathname": "/getting-started"
      }
    ],
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "page_position": 1,
    "type": "markdown",
    "hash": "#why-intrinsic",
    "content": "Speed: Integrate new policy types in minutes rather than months. We provide more coverage so you can focus on shipping features, not anti-abuse logic.\n\nLow maintenance: Eliminate policy drift and drifting policy categories. Our policy-aligned AI automatically adjusts itself to match abuse on your platform.\n\nOne integration: A single integration for all Trust & Safety resources, from review tooling to detection. And we're constantly adding new integrations to our platform.",
    "hierarchy": {
      "h0": {
        "title": "Welcome"
      },
      "h2": {
        "id": "why-intrinsic",
        "title": "Why Intrinsic"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.getting-started.welcome-need-help-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/getting-started/welcome",
    "pathname": "/getting-started/welcome",
    "title": "Need help?",
    "breadcrumb": [
      {
        "title": "Getting started",
        "pathname": "/getting-started"
      }
    ],
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "page_position": 1,
    "type": "markdown",
    "hash": "#need-help",
    "content": "We have two channels to help assist!\nReach out to us on Slack where you can get help directly from Intrinsic.\n\nEmail us at support@withintrinsic.com.",
    "hierarchy": {
      "h0": {
        "title": "Welcome"
      },
      "h2": {
        "id": "need-help",
        "title": "Need help?"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.getting-started.quickstart-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/getting-started/quickstart",
    "pathname": "/getting-started/quickstart",
    "title": "Quickstart",
    "breadcrumb": [
      {
        "title": "Getting started",
        "pathname": "/getting-started"
      }
    ],
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "page_position": 0,
    "type": "markdown",
    "content": "The following provides the steps needed to configure Intrinsic and start processing data through the Intrinsic platform."
  },
  {
    "objectID": "test:test.com:root.uv.getting-started.quickstart-step-1-configure-event-types-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/getting-started/quickstart",
    "pathname": "/getting-started/quickstart",
    "title": "Step 1: Configure Event Types",
    "breadcrumb": [
      {
        "title": "Getting started",
        "pathname": "/getting-started"
      }
    ],
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "page_position": 1,
    "type": "markdown",
    "hash": "#step-1-configure-event-types",
    "content": "Events on Intrinsic are categorized into \"event types.\" For a marketplace app, you may have an event type like new_listing indicating a user has posted an item for sale. These events have metadata, known as \"event fields.\" Create a new_listing event type using the following example:\n\n\nIntrinsic will use that field to trigger a policy-aligned detection. These detection outputs could be used for whether or not a new listing should be permitted.\nAfter sending your request, you will receive the following response.",
    "code_snippets": [
      {
        "lang": "bash",
        "code": "curl -X POST \\\n     --url \"https://intrinsicapi.com/api/v2/event-types\" \\\n     --header \"Content-Type: application/json\" \\\n     --header \"X-API-Key: <apiKey>\" \\\n     --header \"Accept: application/json\" \\\n     --data '\n{\n  \"name\": \"new_listing\",\n  \"fields\": [\n    {\n      \"field_name\": \"listing_video\",\n      \"type\": \"video_url\",\n      \"optional\": true\n    },\n    {\n      \"field_name\": \"listing_image\",\n      \"type\": \"image_url\",\n      \"optional\": true\n    },\n    {\n      \"field_name\": \"caption\",\n      \"type\": \"text_content\"\n      optional: \"false\"\n    }\n  ]\n}\n'"
      },
      {
        "code": "{\n  \"object\": \"event_type\",\n  \"fields\": [\n    {\n      \"field_name\": \"listing_video\",\n      \"type\": \"video_url\",\n      \"optional\": true\n    },\n    {\n      \"field_name\": \"listing_image\",\n      \"type\": \"image_url\",\n      \"optional\": true\n    },\n    {\n      \"field_name\": \"caption\",\n      \"type\": \"text_content\",\n      \"optional\": false\n    }\n  ],\n  \"id\": \"<your-event-type-id>\",\n  \"name\": \"new_listing\"\n}"
      }
    ],
    "hierarchy": {
      "h0": {
        "title": "Quickstart"
      },
      "h1": {
        "id": "step-1-configure-event-types",
        "title": "Step 1: Configure Event Types"
      }
    },
    "level": "h1"
  },
  {
    "objectID": "test:test.com:root.uv.getting-started.quickstart-step-2-configure-policies-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/getting-started/quickstart",
    "pathname": "/getting-started/quickstart",
    "title": "Step 2: Configure Policies",
    "breadcrumb": [
      {
        "title": "Getting started",
        "pathname": "/getting-started"
      }
    ],
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "page_position": 1,
    "type": "markdown",
    "hash": "#step-2-configure-policies",
    "content": "The Intrinsic platform automatically acts on events based on \"policies\" that you configure. These policies give you control over\nwhich events to block or allow. For this example, suppose you want to block any new_listing with pink houses. To do this, navigate to the \"Policies\"\npage in your Intrinsic Dashboard.\nNext, click \"Create New Policy.\"\nYou will now be prompted to configure a new policy.\nSelect new_listing in the event type dropdown\n\nCreate a policy titled \"no videos of pink houses\" with the description \"block anything that includes videos of pink houses\"\n\nClick \"Save\" to view the newly created policy",
    "hierarchy": {
      "h0": {
        "title": "Quickstart"
      },
      "h1": {
        "id": "step-2-configure-policies",
        "title": "Step 2: Configure Policies"
      }
    },
    "level": "h1"
  },
  {
    "objectID": "test:test.com:root.uv.getting-started.quickstart-step-3-sending-events-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/getting-started/quickstart",
    "pathname": "/getting-started/quickstart",
    "title": "Step 3: Sending Events",
    "breadcrumb": [
      {
        "title": "Getting started",
        "pathname": "/getting-started"
      }
    ],
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "page_position": 1,
    "type": "markdown",
    "hash": "#step-3-sending-events",
    "content": "Enforce the policy on new_listing events by sending them using the following example:\n\n\nWhen sending events with image or video fields, the url must point to a valid file. Currently, image\ndetection only supports .jpeg. Video detection only supports .mp4. More will be added in the future.\nUpon sending your request, you will receive a response of the following form.\nNote that the exact explanation that you receive may vary.\nTo send events whenever a new listing is created, you would add this POST request to your current marketplace application code.\nThe above 3 steps detail how to configure event types, set up policies, and send events. These steps can be used to enforce policies\nfor any event.",
    "code_snippets": [
      {
        "lang": "bash",
        "code": "curl -X POST \\\n     --url \"https://intrinsicapi.com/api/v2/events/sync/new_listing\" \\\n     --header \"Content-Type: application/json\" \\\n     --header \"X-API-Key: <apiKey>\" \\\n     --header \"Accept: application/json\" \\\n     --data '\n{\n  \"listing_video\": \"https://storage.googleapis.com/intrinsic-docs/pink_houses.mp4\",\n  \"listing_image\": \"https://storage.googleapis.com/intrinsic-docs/pink_house.jpeg\",\n  \"caption\": \"New pink house for sale\"\n}\n'"
      },
      {
        "lang": "bash",
        "code": "{\n  \"object\": \"event\",\n  \"id\": \"<your-event-id>\",\n  \"event_type_id\": \"<new-listing-event-id>\",\n  \"content\": {\n    \"listing_video\": \"https://storage.googleapis.com/intrinsic-docs/pink_houses.mp4\",\n    \"listing_image\": \"https://storage.googleapis.com/intrinsic-docs/pink_house.jpeg\",\n    \"caption\": \"New pink house for sale\"\n    },\n  \"created_at\": \"<just-now>\",\n  \"detections\": [\n    {\n      \"object\": \"detection\",\n      \"detection_id\": \"<your-detection-id>\",\n      \"event_id\": \"<your-event-id>\",\n      \"status\": \"COMPLETED\",\n      \"violates_policy\": \"true\"\n      \"violated_policies\": [\n        {\n          \"object\": \"violated_policy\",\n          \"id\": \"<your-policy-id>\",\n          \"version_id\": \"<your-policy-version-id>\"\n          \"name\":\"No Pink Houses\"\n          \"explanation\":\"The video shows a house that resembles a pink house, thus violating the policy against pink houses.\"\n        }\n      ],\n      \"explanation\": \"\"\n    }\n  ],\n  \"fired_rules\": []\n}"
      }
    ],
    "hierarchy": {
      "h0": {
        "title": "Quickstart"
      },
      "h1": {
        "id": "step-3-sending-events",
        "title": "Step 3: Sending Events"
      }
    },
    "level": "h1"
  },
  {
    "objectID": "test:test.com:root.uv.sd-ks.ruby-sdk-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/sd-ks/ruby-sdk",
    "pathname": "/sd-ks/ruby-sdk",
    "title": "Ruby SDK",
    "breadcrumb": [
      {
        "title": "SDKs",
        "pathname": "/sd-ks"
      }
    ],
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "page_position": 0,
    "type": "markdown",
    "content": "The Intrinsic Ruby SDK provides access to Intrinsic API events, event types, and detections.\nSee the API reference for more information on each of these endpoints."
  },
  {
    "objectID": "test:test.com:root.uv.sd-ks.ruby-sdk-installation-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/sd-ks/ruby-sdk",
    "pathname": "/sd-ks/ruby-sdk",
    "title": "Installation",
    "breadcrumb": [
      {
        "title": "SDKs",
        "pathname": "/sd-ks"
      }
    ],
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "page_position": 1,
    "type": "markdown",
    "hash": "#installation",
    "content": "Intrinsic can be installed and added to an application's Gemfile by running:",
    "code_snippets": [
      {
        "lang": "sh",
        "code": "gem install intrinsic-sdk"
      }
    ],
    "hierarchy": {
      "h0": {
        "title": "Ruby SDK"
      },
      "h2": {
        "id": "installation",
        "title": "Installation"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.sd-ks.ruby-sdk-instantiating-the-intrinsic-client-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/sd-ks/ruby-sdk",
    "pathname": "/sd-ks/ruby-sdk",
    "title": "Instantiating the Intrinsic Client",
    "breadcrumb": [
      {
        "title": "SDKs",
        "pathname": "/sd-ks"
      }
    ],
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "page_position": 1,
    "type": "markdown",
    "hash": "#instantiating-the-intrinsic-client",
    "content": "The Intrinsic client requires an API key to authenticate requests.\nThe API key is passed to the client as an option when instantiating the client.\n\n\nYou can find your API key in the Intrinsic dashboard. Please contact support@withintrinsic.com if you are having trouble finding your API key.\nWhen importing the Intrinsic client, make sure to use the intrinsic package name.\nAt this point, the client SDK is ready to connect to the Intrinsic API.",
    "code_snippets": [
      {
        "lang": "ruby",
        "code": "require \"intrinsic\"\n\nintrinsic = Intrinsic::Client.new(\n  api_key: 'YOUR_API_KEY',\n)"
      }
    ],
    "hierarchy": {
      "h0": {
        "title": "Ruby SDK"
      },
      "h2": {
        "id": "instantiating-the-intrinsic-client",
        "title": "Instantiating the Intrinsic Client"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.sd-ks.ruby-sdk-events-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/sd-ks/ruby-sdk",
    "pathname": "/sd-ks/ruby-sdk",
    "title": "Events",
    "breadcrumb": [
      {
        "title": "SDKs",
        "pathname": "/sd-ks"
      }
    ],
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "page_position": 1,
    "type": "markdown",
    "hash": "#events",
    "content": "With the client instantiated, you can send events to our API. Events can be used to trigger policy-aligned detections and rules.\nFor synchronous detection, use the create_event_sync method. The create_event_sync method will block\nuntil a decision is made by Intrinsic.\n\n\nNote, this example assumes you have an event type called new_comment configured in Intrinsic with a field called comment. Please check your Intrinsic dashboard for configured events.",
    "hierarchy": {
      "h0": {
        "title": "Ruby SDK"
      },
      "h2": {
        "id": "events",
        "title": "Events"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.sd-ks.ruby-sdk-create-an-event-synchronously-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/sd-ks/ruby-sdk",
    "pathname": "/sd-ks/ruby-sdk",
    "title": "Create an Event Synchronously",
    "breadcrumb": [
      {
        "title": "SDKs",
        "pathname": "/sd-ks"
      }
    ],
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "page_position": 1,
    "type": "markdown",
    "hash": "#create-an-event-synchronously",
    "content": "The following example creates an event of type new_comment with the fields comment and user_id.",
    "code_snippets": [
      {
        "lang": "ruby",
        "code": "comment = intrinsic.events.create_event_sync(\n  event_type_name: \"new_comment\",\n  request: {\n    \"comment\": \"hello\",\n    \"user_id\": \"bob\"\n})\nputs comment.id"
      },
      {
        "lang": "bash",
        "code": "9b645c9d-59af-4f68-b12c-41220a663034"
      }
    ],
    "hierarchy": {
      "h0": {
        "title": "Ruby SDK"
      },
      "h2": {
        "id": "events",
        "title": "Events"
      },
      "h3": {
        "id": "create-an-event-synchronously",
        "title": "Create an Event Synchronously"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.sd-ks.ruby-sdk-enforcing-rules-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/sd-ks/ruby-sdk",
    "pathname": "/sd-ks/ruby-sdk",
    "title": "Enforcing Rules",
    "breadcrumb": [
      {
        "title": "SDKs",
        "pathname": "/sd-ks"
      }
    ],
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "page_position": 1,
    "type": "markdown",
    "hash": "#enforcing-rules",
    "content": "The Intrinsic Rules Engine supports enforcing custom rules on events. Suppose you want to prevent spam comments\nfrom being posted on your platform.\nOne way to identify spam is by\nlooking for users posting a high volume of comments with a specific keyword (like \"crypto\").",
    "hierarchy": {
      "h0": {
        "title": "Ruby SDK"
      },
      "h2": {
        "id": "enforcing-rules",
        "title": "Enforcing Rules"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.sd-ks.ruby-sdk-creating-a-rule-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/sd-ks/ruby-sdk",
    "pathname": "/sd-ks/ruby-sdk",
    "title": "Creating a Rule",
    "breadcrumb": [
      {
        "title": "SDKs",
        "pathname": "/sd-ks"
      }
    ],
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "page_position": 1,
    "type": "markdown",
    "hash": "#creating-a-rule",
    "content": "Refer to the rule writing guide for more information on how to write rules, or contact the Intrinsic team at support@withintrinsic.com.\nTo set up a rule for blocking spam users in Intrinsic, follow the below steps.\nNavigate to https://dashboard.intrinsicapi.com/events.\n\nSelect the new_comment event type.\n\nNavigate to the Logic tab. This shows the logic used to enforce rules on new events.\n\nClick Create New Rule.\n\nClick on the Add Item dropdown.\n\nSelect Counter.\n\nDefine a rule that will block text containing the word crypto, posted by a user that has posted more than 2 times in the past hour.\n\nClick \"Save Changes\" and then \"Enable Rule.\"",
    "hierarchy": {
      "h0": {
        "title": "Ruby SDK"
      },
      "h2": {
        "id": "enforcing-rules",
        "title": "Enforcing Rules"
      },
      "h3": {
        "id": "creating-a-rule",
        "title": "Creating a Rule"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.sd-ks.ruby-sdk-test-a-rule-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/sd-ks/ruby-sdk",
    "pathname": "/sd-ks/ruby-sdk",
    "title": "Test a rule",
    "breadcrumb": [
      {
        "title": "SDKs",
        "pathname": "/sd-ks"
      }
    ],
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "page_position": 1,
    "type": "markdown",
    "hash": "#test-a-rule",
    "content": "To test the above rule logic, we will create three comments that contain the word crypto and post them within an hour.\nThe output should be\n\n\nIf the output you see differs from the above, make sure you enabled your rule in the Intrinsic console.",
    "code_snippets": [
      {
        "lang": "ruby",
        "code": "require 'json'\nfor i in 1..3\n  intrinsicResponse = intrinsic.events.create_event_sync(\n  event_type_name: \"new_comment\",\n  request: {\n    \"comment\": \"Make $1M/month by joining my crypto community here:...\",\n    \"user_id\": \"bob\"\n  })\n  puts \"fired rules for new_comment #{i}: #{JSON.parse(intrinsicResponse.fired_rules.to_json)}\" \nend"
      },
      {
        "code": "fired rules for new_comment 1: []\nfired rules for new_comment 2: []\nfired rules for new_comment 3: [{\"object\"=>\"fired_rule\", \"rule_id\"=>\"_rule_xx\", \"rule_name\"=>\"Rule Name\"}]"
      }
    ],
    "hierarchy": {
      "h0": {
        "title": "Ruby SDK"
      },
      "h2": {
        "id": "enforcing-rules",
        "title": "Enforcing Rules"
      },
      "h3": {
        "id": "test-a-rule",
        "title": "Test a rule"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.sd-ks.ruby-sdk-policy-aligned-detections-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/sd-ks/ruby-sdk",
    "pathname": "/sd-ks/ruby-sdk",
    "title": "Policy-Aligned Detections",
    "breadcrumb": [
      {
        "title": "SDKs",
        "pathname": "/sd-ks"
      }
    ],
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "page_position": 1,
    "type": "markdown",
    "hash": "#policy-aligned-detections",
    "content": "In addition to enforcing logic-based rules like the above, Intrinsic\nsupports content detection using policies. For example, you could write\nthe policy \"profanity is prohibited\" in new comments.\nTo use this, navigate to the Policies page.\nThen, select \"Create New Policy\" and describe the policy that you want to enforce.\n\n\nPolicy-aligned detections only run on one field per event.\nThis field is specified when you create an event type.\nSet the type of the field that you want evaluated to text_content if is text.\nUse video_url for videos or image_url for images.\nFor new_comment, the comment field should be text_content.\nNext, use the create_event_sync method to check if an event violates the policy.\nSince detections can take a while to finish, the create_event_async method is\nalso available. With this, you can pull a detection result later.\nYou can also get additional information about a detection using the get_detection method.",
    "code_snippets": [
      {
        "lang": "ruby",
        "code": "intrinsicResponse = intrinsic.events.create_event_sync(\n  event_type_name: \"new_comment\",\n  request: {\n    \"comment\": \"hi\",\n    \"user_id\": \"bob\"  \n})\n\ndetections = intrinsicResponse.detections\n\nif detections.any? { |detection| detection.violates_policy }\n  puts \"blocking this event\"\nelse\n  puts \"not blocking this event because no profanity was detected\"\nend"
      },
      {
        "code": "not blocking this event because no profanity was detected"
      },
      {
        "lang": "ruby",
        "code": "detection = intrinsic.detections.get_detection(id: \"xxx\")\nputs detection.explanation"
      },
      {
        "code": "The text contains explicit language which is explicitly prohibited according to the stated policy."
      }
    ],
    "hierarchy": {
      "h0": {
        "title": "Ruby SDK"
      },
      "h2": {
        "id": "policy-aligned-detections",
        "title": "Policy-Aligned Detections"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.sd-ks.ruby-sdk-event-types-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/sd-ks/ruby-sdk",
    "pathname": "/sd-ks/ruby-sdk",
    "title": "Event Types",
    "breadcrumb": [
      {
        "title": "SDKs",
        "pathname": "/sd-ks"
      }
    ],
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "page_position": 1,
    "type": "markdown",
    "hash": "#event-types",
    "content": "The get_event_types method returns all the event types that you have configured in Intrinsic.",
    "code_snippets": [
      {
        "lang": "ruby",
        "code": "event_types = intrinsic.event_types.get_event_types()\nevent_types.data.each do |event_type|\n  puts event_type.name\nend"
      },
      {
        "lang": "bash",
        "code": "new_comment\nnew_post"
      }
    ],
    "hierarchy": {
      "h0": {
        "title": "Ruby SDK"
      },
      "h2": {
        "id": "event-types",
        "title": "Event Types"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.sd-ks.ruby-sdk-async-client-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/sd-ks/ruby-sdk",
    "pathname": "/sd-ks/ruby-sdk",
    "title": "Async Client",
    "breadcrumb": [
      {
        "title": "SDKs",
        "pathname": "/sd-ks"
      }
    ],
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "page_position": 1,
    "type": "markdown",
    "hash": "#async-client",
    "content": "The SDK exports an async client that you can use for non-blocking requests.\nIf you are not relying on Intrinsic to make a decision on whether an event will be allowed, the async client is recommended. The async events API can also be used to return a response immediately.\nWhich should output the new event's ID.",
    "code_snippets": [
      {
        "lang": "ruby",
        "code": "require \"intrinsic\"\n\nintrinsic = Intrinsic::AsyncClient.new(api_key: 'YOUR_API_KEY')\n\nevent = intrinsic.events.create_event_async(event_type_name: \"new_text\", request: {\"caption\": \"test\"})\n\nputs event.wait.id"
      },
      {
        "lang": "bash",
        "code": "49af7589-ab6e-4928-b94d-2ac0a196909d"
      }
    ],
    "hierarchy": {
      "h0": {
        "title": "Ruby SDK"
      },
      "h2": {
        "id": "async-client",
        "title": "Async Client"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.sd-ks.ruby-sdk-timeouts-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/sd-ks/ruby-sdk",
    "pathname": "/sd-ks/ruby-sdk",
    "title": "Timeouts",
    "breadcrumb": [
      {
        "title": "SDKs",
        "pathname": "/sd-ks"
      }
    ],
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "page_position": 1,
    "type": "markdown",
    "hash": "#timeouts",
    "content": "The SDK defaults to a 60 second timeout. Use the timeout_in_seconds option to\nconfigure this behavior.",
    "code_snippets": [
      {
        "lang": "ruby",
        "code": "detection = intrinsic.detections.get_detection(\n  id: \"xxx\",\n  request_options: Intrinsic::RequestOptions.new(timeout_in_seconds: 30)\n)\nputs JSON.detection.to_json"
      },
      {
        "code": "{\"object\":\"detection\",\"id\":\"xxx\",\"event_id\":\"xxx\",\"status\":\"COMPLETED\",\"violates_policy\":true,\"violated_policies\":[{\"object\":\"violated_policy\",\"id\":\"xxx\",\"version_id\":\"xxx\",\"name\":\"no profanity allowed in comments\",\"explanation\":\"xxx\"}],\"explanation\":\"A violation of this policy was detected\"}"
      }
    ],
    "hierarchy": {
      "h0": {
        "title": "Ruby SDK"
      },
      "h2": {
        "id": "timeouts",
        "title": "Timeouts"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.sd-ks.ruby-sdk-retries-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/sd-ks/ruby-sdk",
    "pathname": "/sd-ks/ruby-sdk",
    "title": "Retries",
    "breadcrumb": [
      {
        "title": "SDKs",
        "pathname": "/sd-ks"
      }
    ],
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "page_position": 1,
    "type": "markdown",
    "hash": "#retries",
    "content": "The SDK is instrumented with automatic retries with exponential backoff. A request will be\nretried as long as the request is deemed retriable and the number of retry attempts has not grown larger\nthan the configured retry limit (default: 2).\nA request is deemed retriable when any of the following HTTP status codes is returned:\n408 (Timeout)\n\n409 (Conflict)\n\n429 (Too Many Requests)\n\n5XX (Internal Server Errors)",
    "hierarchy": {
      "h0": {
        "title": "Ruby SDK"
      },
      "h2": {
        "id": "retries",
        "title": "Retries"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.sd-ks.go-sdk-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/sd-ks/go-sdk",
    "pathname": "/sd-ks/go-sdk",
    "title": "Go SDK",
    "breadcrumb": [
      {
        "title": "SDKs",
        "pathname": "/sd-ks"
      }
    ],
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "page_position": 0,
    "type": "markdown",
    "content": "The Intrinsic Go library provides convenient access to the Intrinsic API from Go."
  },
  {
    "objectID": "test:test.com:root.uv.sd-ks.go-sdk-installation-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/sd-ks/go-sdk",
    "pathname": "/sd-ks/go-sdk",
    "title": "Installation",
    "breadcrumb": [
      {
        "title": "SDKs",
        "pathname": "/sd-ks"
      }
    ],
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "page_position": 1,
    "type": "markdown",
    "hash": "#installation",
    "content": "Run the following command to use the Intrinsic Go library in your module:",
    "code_snippets": [
      {
        "lang": "sh",
        "code": "go get github.com/intrinsic-org/intrinsic-go"
      }
    ],
    "hierarchy": {
      "h0": {
        "title": "Go SDK"
      },
      "h2": {
        "id": "installation",
        "title": "Installation"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.sd-ks.go-sdk-instantiating-the-intrinsic-client-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/sd-ks/go-sdk",
    "pathname": "/sd-ks/go-sdk",
    "title": "Instantiating the Intrinsic Client",
    "breadcrumb": [
      {
        "title": "SDKs",
        "pathname": "/sd-ks"
      }
    ],
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "page_position": 1,
    "type": "markdown",
    "hash": "#instantiating-the-intrinsic-client",
    "content": "The Intrinsic client requires an API key to authenticate requests.\nThe API key is passed to the client as an option when instantiating the client.\n\n\nYou can find your API key in the Intrinsic dashboard. Please contact support@withintrinsic.com if you are having trouble finding your API key.\nAt this point, the client SDK is ready to connect to the Intrinsic API.",
    "code_snippets": [
      {
        "lang": "go",
        "code": "import (\n\tintrinsicgoclient \"github.com/intrinsic-org/intrinsic-go/client\"\n)\n\nclient := intrinsicgoclient.NewClient(\n  option.WithAPIKey(\"<YOUR_API_KEY>\"),\n)"
      }
    ],
    "hierarchy": {
      "h0": {
        "title": "Go SDK"
      },
      "h2": {
        "id": "instantiating-the-intrinsic-client",
        "title": "Instantiating the Intrinsic Client"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.sd-ks.go-sdk-events-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/sd-ks/go-sdk",
    "pathname": "/sd-ks/go-sdk",
    "title": "Events",
    "breadcrumb": [
      {
        "title": "SDKs",
        "pathname": "/sd-ks"
      }
    ],
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "page_position": 1,
    "type": "markdown",
    "hash": "#events",
    "content": "With the client instantiated, you can send events to our API. Events can be used to trigger policy-aligned detections and rules.\nFor synchronous detection, use the create_event_sync method. The create_event_sync method will block\nuntil a decision is made by Intrinsic.\n\n\nNote, this example assumes you have an event type called new_comment configured in Intrinsic with a field called comment. Please check your Intrinsic dashboard for configured events.",
    "hierarchy": {
      "h0": {
        "title": "Go SDK"
      },
      "h2": {
        "id": "events",
        "title": "Events"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.sd-ks.go-sdk-create-an-event-synchronously-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/sd-ks/go-sdk",
    "pathname": "/sd-ks/go-sdk",
    "title": "Create an Event Synchronously",
    "breadcrumb": [
      {
        "title": "SDKs",
        "pathname": "/sd-ks"
      }
    ],
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "page_position": 1,
    "type": "markdown",
    "hash": "#create-an-event-synchronously",
    "content": "The following example creates an event of type new_comment with the fields comment and user_id.",
    "code_snippets": [
      {
        "lang": "go",
        "code": "response, err := client.Events.CreateEventSync(\n  context.TODO(),\n  \"new_comment\",\n  map[string]interface{}{\n    \"comment\": \"hello\",\n    \"user_id\": \"bob\",\n  },\n)\n\nif err != nil {\n  log.Fatalf(\"Error creating event: %v\", err)\n}\n\nlog.Printf(\"Created event : %+v\", response)"
      },
      {
        "lang": "bash",
        "code": "2024/03/11 20:21:29 Created event : {\n  \"object\": \"event\",\n  \"id\": \"7b39863a-fbfa-428a-90e9-bb5be7f53d89\",\n  \"event_type_id\": \"8b0f5593-0840-49ba-a0e4-424ff618a4a7\",\n  \"content\": {\n    \"comment\": \"hello\",\n    \"user_id\": \"bob\"\n  },\n  \"created_at\": \"2024-03-12T03:21:29.382418Z\",\n  \"detections\": [],\n  \"fired_rules\": []\n}"
      }
    ],
    "hierarchy": {
      "h0": {
        "title": "Go SDK"
      },
      "h2": {
        "id": "events",
        "title": "Events"
      },
      "h3": {
        "id": "create-an-event-synchronously",
        "title": "Create an Event Synchronously"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.sd-ks.go-sdk-enforcing-rules-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/sd-ks/go-sdk",
    "pathname": "/sd-ks/go-sdk",
    "title": "Enforcing Rules",
    "breadcrumb": [
      {
        "title": "SDKs",
        "pathname": "/sd-ks"
      }
    ],
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "page_position": 1,
    "type": "markdown",
    "hash": "#enforcing-rules",
    "content": "The Intrinsic Rules Engine supports enforcing custom rules on events. Suppose you want to prevent spam comments\nfrom being posted on your platform.\nOne way to identify spam is by\nlooking for users posting a high volume of comments with a specific keyword (like \"crypto\").",
    "hierarchy": {
      "h0": {
        "title": "Go SDK"
      },
      "h2": {
        "id": "enforcing-rules",
        "title": "Enforcing Rules"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.sd-ks.go-sdk-creating-a-rule-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/sd-ks/go-sdk",
    "pathname": "/sd-ks/go-sdk",
    "title": "Creating a Rule",
    "breadcrumb": [
      {
        "title": "SDKs",
        "pathname": "/sd-ks"
      }
    ],
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "page_position": 1,
    "type": "markdown",
    "hash": "#creating-a-rule",
    "content": "Refer to the rule writing guide for more information on how to write rules, or contact the Intrinsic team at support@withintrinsic.com.\nTo set up a rule for blocking spam users in Intrinsic, follow the below steps.\nNavigate to https://dashboard.intrinsicapi.com/events.\n\nSelect the new_comment event type.\n\nNavigate to the Logic tab. This shows the logic used to enforce rules on new events.\n\nClick Create New Rule.\n\nClick on the Add Item dropdown.\n\nSelect Counter.\n\nDefine a rule that will block text containing the word crypto, posted by a user that has posted more than 2 times in the past hour.\n\nClick \"Save Changes\" and then \"Enable Rule.\"",
    "hierarchy": {
      "h0": {
        "title": "Go SDK"
      },
      "h2": {
        "id": "enforcing-rules",
        "title": "Enforcing Rules"
      },
      "h3": {
        "id": "creating-a-rule",
        "title": "Creating a Rule"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.sd-ks.go-sdk-test-a-rule-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/sd-ks/go-sdk",
    "pathname": "/sd-ks/go-sdk",
    "title": "Test a rule",
    "breadcrumb": [
      {
        "title": "SDKs",
        "pathname": "/sd-ks"
      }
    ],
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "page_position": 1,
    "type": "markdown",
    "hash": "#test-a-rule",
    "content": "To test the above rule logic, we will create three comments that contain the word crypto and post them within an hour.\nThe output should be\n\n\nIf the output you see differs from the above, make sure you enabled your rule in the Intrinsic console, and you are entering the right field types since some fields could be optional",
    "code_snippets": [
      {
        "lang": "go",
        "code": "for i := 1; i <= 3; i++ {\n  response, err := client.Events.CreateEventSync(\n    context.TODO(),\n    \"new_comment\",\n    map[string]interface{}{\n      \"comment\": \"Make $1M/month by joining my crypto community here:...\",\n      \"user_id\": \"bob\",\n    },\n  )\n  if err != nil {\n    log.Fatalf(\"Error creating event: %v\", err)\n  }\n\n  firedRulesJSON, _ := json.Marshal(response.FiredRules)\n  log.Printf(\"fired rules for new_comment %d: %s\", i, string(firedRulesJSON))\n}"
      },
      {
        "code": "fired rules for new_comment 1: []\nfired rules for new_comment 2: []\nfired rules for new_comment 3: [{\"rule_id\":\"<rule_id>\",\"rule_name\":\"<rule_name>\",\"object\":\"fired_rule\"}]"
      }
    ],
    "hierarchy": {
      "h0": {
        "title": "Go SDK"
      },
      "h2": {
        "id": "enforcing-rules",
        "title": "Enforcing Rules"
      },
      "h3": {
        "id": "test-a-rule",
        "title": "Test a rule"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.sd-ks.go-sdk-policy-aligned-detections-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/sd-ks/go-sdk",
    "pathname": "/sd-ks/go-sdk",
    "title": "Policy-Aligned Detections",
    "breadcrumb": [
      {
        "title": "SDKs",
        "pathname": "/sd-ks"
      }
    ],
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "page_position": 1,
    "type": "markdown",
    "hash": "#policy-aligned-detections",
    "content": "In addition to enforcing logic-based rules like the above, Intrinsic\nsupports content detection using policies. For example, you could write\nthe policy \"profanity is prohibited\" in new comments.\nTo use this, navigate to the Policies page.\nThen, select \"Create New Policy\" and describe the policy that you want to enforce.\n\n\nPolicy-aligned detections only run on one field per event.\nThis field is specified when you create an event type.\nSet the type of the field that you want evaluated to text_content if is text.\nUse video_url for videos or image_url for images.\nFor new_comment, the comment field should be text_content.\nNext, use the create_event_sync method to check if an event violates the policy.\nSince detections can take a while to finish, the create_event_async method is\nalso available. With this, you can pull a detection result later.",
    "code_snippets": [
      {
        "lang": "go",
        "code": "response, err := client.Events.CreateEventSync(\n  context.TODO(),\n  \"new_comment\",\n  map[string]interface{}{\n    \"text\": \"This is a comment with explicit language\",\n    \"user_id\": \"bob\",\n  },\n)\nif err != nil {\n  log.Fatalf(\"Error creating event: %v\", err)\n}\n\ndetections := response.Detections\n\nif len(detections) > 0 {\n  for _, detection := range detections {\n    if *detection.ViolatesPolicy {\n      log.Printf(\"Event violates policy: %+v\", detection)\n    }\n  }\n} else {\n  log.Printf(\"Event does not violate any policies\")\n}\n\nlog.Printf(\"Created event : %+v\", response)"
      },
      {
        "lang": "go",
        "code": "detection = intrinsic.detections.get_detection(id: \"6161ec82-43f3-4867-abda-569ba3365889\")\nif err != nil {\n  log.Fatalf(\"Error getting detection: %v\", err)\n}\n\nlog.Printf(\"Got detection: %+v\", *detection.Explanation)"
      },
      {
        "code": "Got detection: The text contains explicit language which is explicitly prohibited according to the stated policy."
      }
    ],
    "hierarchy": {
      "h0": {
        "title": "Go SDK"
      },
      "h2": {
        "id": "policy-aligned-detections",
        "title": "Policy-Aligned Detections"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.sd-ks.go-sdk-event-types-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/sd-ks/go-sdk",
    "pathname": "/sd-ks/go-sdk",
    "title": "Event Types",
    "breadcrumb": [
      {
        "title": "SDKs",
        "pathname": "/sd-ks"
      }
    ],
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "page_position": 1,
    "type": "markdown",
    "hash": "#event-types",
    "content": "The get_event_types method returns all the event types that you have configured in Intrinsic.",
    "code_snippets": [
      {
        "lang": "go",
        "code": "eventTypes, err := client.EventTypes.GetEventTypes(context.TODO())\n\nif err != nil {\n  log.Fatalf(\"Error getting event types: %v\", err)\n}\n\nfor _, eventType := range eventTypes.Data {\n  log.Printf(\"Got event type: %+v\", eventType.Name)\n}"
      },
      {
        "lang": "bash",
        "code": "2024/03/11 20:51:50 Got event type: event_type_1\n2024/03/11 20:51:50 Got event type: event_type_2\n2024/03/11 20:51:50 Got event type: event_type_3"
      }
    ],
    "hierarchy": {
      "h0": {
        "title": "Go SDK"
      },
      "h2": {
        "id": "event-types",
        "title": "Event Types"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.sd-ks.go-sdk-timeouts-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/sd-ks/go-sdk",
    "pathname": "/sd-ks/go-sdk",
    "title": "Timeouts",
    "breadcrumb": [
      {
        "title": "SDKs",
        "pathname": "/sd-ks"
      }
    ],
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "page_position": 1,
    "type": "markdown",
    "hash": "#timeouts",
    "content": "Setting a timeout for each individual request is as simple as using the standard\ncontext library. Setting a one second timeout for an individual API call looks\nlike the following:",
    "code_snippets": [
      {
        "lang": "go",
        "code": "ctx, cancel := context.WithTimeout(context.TODO(), time.Second)\ndefer cancel()\n\nresponse, err := client.EventTypes.CreateEventType(\n  ctx,\n  &intrinsic.CreateEventTypeRequest{\n    Name: \"example\",\n    Fields: []*intrinsic.EventTypeField{\n      {\n        FieldName: \"field\",\n        Type:      intrinsic.EventTypeFieldTypeString,\n      },\n    },\n  },\n)"
      }
    ],
    "hierarchy": {
      "h0": {
        "title": "Go SDK"
      },
      "h2": {
        "id": "timeouts",
        "title": "Timeouts"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.sd-ks.go-sdk-request-options-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/sd-ks/go-sdk",
    "pathname": "/sd-ks/go-sdk",
    "title": "Request Options",
    "breadcrumb": [
      {
        "title": "SDKs",
        "pathname": "/sd-ks"
      }
    ],
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "page_position": 1,
    "type": "markdown",
    "hash": "#request-options",
    "content": "A variety of request options are included to adapt the behavior of the library, which includes\nconfiguring authorization tokens, or providing your own instrumented *http.Client. Both of\nthese options are shown below:\nThese request options can either be specified on the client so that they're applied on every\nrequest (shown above), or for an individual request like so:\nProviding your own *http.Client is recommended. Otherwise, the http.DefaultClient will be used,\nand your client will wait indefinitely for a response (unless the per-request, context-based timeout\nis used).",
    "code_snippets": [
      {
        "lang": "go",
        "code": "client := intrinsicgoclient.NewClient(\n  option.WithAPIKey(\"<YOUR_API_KEY>\"),\n  option.WithHTTPClient(\n    &http.Client{\n      Timeout: 5 * time.Second,\n    },\n  ),\n)"
      },
      {
        "lang": "go",
        "code": "response, err := client.Events.CreateEventSync(\n\t\tcontext.TODO(),\n\t\t\"new_text\",\n\t\tmap[string]interface{}{\n\t\t\t\"caption\": \"text_content\",\n\t\t},\n  option.WithAPIKey(\"<YOUR_API_KEY>\"),\n)"
      }
    ],
    "hierarchy": {
      "h0": {
        "title": "Go SDK"
      },
      "h2": {
        "id": "request-options",
        "title": "Request Options"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.sd-ks.go-sdk-automatic-retries-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/sd-ks/go-sdk",
    "pathname": "/sd-ks/go-sdk",
    "title": "Automatic Retries",
    "breadcrumb": [
      {
        "title": "SDKs",
        "pathname": "/sd-ks"
      }
    ],
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "page_position": 1,
    "type": "markdown",
    "hash": "#automatic-retries",
    "content": "The Intrinsic Go client is instrumented with automatic retries with exponential backoff. A request will be\nretried as long as the request is deemed retriable and the number of retry attempts has not grown larger\nthan the configured retry limit (default: 2).\nA request is deemed retriable when any of the following HTTP status codes is returned:\n408 (Timeout)\n\n409 (Conflict)\n\n429 (Too Many Requests)\n\n5XX (Internal Server Errors)\n\n\nYou can use the option.WithMaxAttempts option to configure the maximum retry limit to\nyour liking. For example, if you want to disable retries for the client entirely, you can\nset this value to 1 like so:\nThis can be done for an individual request, too:",
    "code_snippets": [
      {
        "lang": "go",
        "code": "client := intrinsicgoclient.NewClient(\n  option.WithMaxAttempts(1),\n)"
      },
      {
        "lang": "go",
        "code": "\tresponse, err := client.Events.CreateEventSync(\n\t\tcontext.TODO(),\n\t\t\"new_text\",\n\t\tmap[string]interface{}{\n\t\t\t\"caption\": \"text_content\",\n\t\t},\n  option.WithMaxAttempts(1),\n)"
      }
    ],
    "hierarchy": {
      "h0": {
        "title": "Go SDK"
      },
      "h2": {
        "id": "automatic-retries",
        "title": "Automatic Retries"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.sd-ks.go-sdk-errors-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/sd-ks/go-sdk",
    "pathname": "/sd-ks/go-sdk",
    "title": "Errors",
    "breadcrumb": [
      {
        "title": "SDKs",
        "pathname": "/sd-ks"
      }
    ],
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "page_position": 1,
    "type": "markdown",
    "hash": "#errors",
    "content": "Structured error types are returned from API calls that return non-success status codes. For example,\nyou can check if the error was due to a bad request (i.e. status code 400) with the following:\nThese errors are also compatible with the errors.Is and errors.As APIs, so you can access the error\nlike so:",
    "code_snippets": [
      {
        "lang": "go",
        "code": "response, err := client.Events.CreateEventSync(\n  context.TODO(),\n  \"not_a_real_event_type\",\n  map[string]interface{}{\n    \"caption\": \"text_content\",\n  },\n)\n\nif err != nil {\n  if notFoundError, ok := err.(*intrinsic.NotFoundError); ok {\n    // Do something with the bad request ...\n    log.Printf(\"Not Found : %+v\", notFoundError)\n  }\n  log.Fatalf(\"Error creating event : %+v\", err)\n}"
      },
      {
        "lang": "go",
        "code": "\nresponse, err := client.Events.CreateEventSync(\n  context.TODO(),\n  \"not_a_real_event_type\",\n  map[string]interface{}{\n    \"caption\": \"text_content\",\n  },\n)\nif err != nil {\n  var notFoundError *intrinsic.NotFoundError\n  if errors.As(err, &notFoundError) {\n    log.Printf(\"Not Found Error : %+v\", notFoundError)\n  }\n  log.Fatalf(\"Failed to create event : %s\", err)\n}"
      }
    ],
    "hierarchy": {
      "h0": {
        "title": "Go SDK"
      },
      "h2": {
        "id": "errors",
        "title": "Errors"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.okta-sso-integration.setup-okta-sso-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/okta-sso-integration/setup-okta-sso",
    "pathname": "/okta-sso-integration/setup-okta-sso",
    "title": "Setup Okta SSO",
    "breadcrumb": [
      {
        "title": "Okta SSO Integration",
        "pathname": "/okta-sso-integration"
      }
    ],
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "page_position": 0,
    "type": "markdown",
    "content": "Intrinsic's Okta Integration provides a seamless Single Sign-On (SSO) experience for users accessing Intrinsic via Okta. This guide outlines the steps to configure the Intrinsic application in Okta and enable SSO for your users.\n\n\nTo setup Okta SSO, follow the steps below. If you encounter any issues, please contact Intrinsic Support, and we'll be happy to walk thorugh the setup with you over a call. Be sure to invite your Okta Admin."
  },
  {
    "objectID": "test:test.com:root.uv.okta-sso-integration.setup-okta-sso-requirements-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/okta-sso-integration/setup-okta-sso",
    "pathname": "/okta-sso-integration/setup-okta-sso",
    "title": "Requirements",
    "breadcrumb": [
      {
        "title": "Okta SSO Integration",
        "pathname": "/okta-sso-integration"
      }
    ],
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "page_position": 1,
    "type": "markdown",
    "hash": "#requirements",
    "content": "Administrator access to an Okta organization.",
    "hierarchy": {
      "h0": {
        "title": "Setup Okta SSO"
      },
      "h2": {
        "id": "requirements",
        "title": "Requirements"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.okta-sso-integration.setup-okta-sso-supported-features-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/okta-sso-integration/setup-okta-sso",
    "pathname": "/okta-sso-integration/setup-okta-sso",
    "title": "Supported Features",
    "breadcrumb": [
      {
        "title": "Okta SSO Integration",
        "pathname": "/okta-sso-integration"
      }
    ],
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "page_position": 1,
    "type": "markdown",
    "hash": "#supported-features",
    "content": "Service Provider (SP)-Initiated Authentication (Single Sign-On Flow): This authentication process is triggered when a user attempts to sign in to the application via Intrinsic.",
    "hierarchy": {
      "h0": {
        "title": "Setup Okta SSO"
      },
      "h2": {
        "id": "supported-features",
        "title": "Supported Features"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.okta-sso-integration.setup-okta-sso-configuration-steps-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/okta-sso-integration/setup-okta-sso",
    "pathname": "/okta-sso-integration/setup-okta-sso",
    "title": "Configuration Steps",
    "breadcrumb": [
      {
        "title": "Okta SSO Integration",
        "pathname": "/okta-sso-integration"
      }
    ],
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "page_position": 1,
    "type": "markdown",
    "hash": "#configuration-steps",
    "content": "Navigate to Applications in your Okta dashboard, select Browse App Catalog, then search for and add Intrinsic.\n\nAssign the appropriate users or groups that require access to Intrinsic.\n\nIn the Intrinsic App, navigate to the Sign On tab and record the Client ID and Client Secret.\n\nEmail the required details to support@withintrinsic.com:\nOkta Domain (e.g., acme.okta.com)\n\nClient ID\n\nClient Secret\n\n\n\nUpon receiving your Intrinsic Account ID, input this information in the Okta Intrinsic App under Sign On tab > Edit > Advanced Sign-On Settings > Account ID field.",
    "hierarchy": {
      "h0": {
        "title": "Setup Okta SSO"
      },
      "h2": {
        "id": "configuration-steps",
        "title": "Configuration Steps"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.okta-sso-integration.setup-okta-sso-logging-into-intrinsic-using-okta-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/okta-sso-integration/setup-okta-sso",
    "pathname": "/okta-sso-integration/setup-okta-sso",
    "title": "Logging into Intrinsic Using Okta",
    "breadcrumb": [
      {
        "title": "Okta SSO Integration",
        "pathname": "/okta-sso-integration"
      }
    ],
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "page_position": 1,
    "type": "markdown",
    "hash": "#logging-into-intrinsic-using-okta",
    "content": "Users affiliated with the Intrinsic account can log in via Okta by following these steps:\nVisit https://intrinsicapi.com.\n\nSelect Login with Okta.",
    "hierarchy": {
      "h0": {
        "title": "Setup Okta SSO"
      },
      "h2": {
        "id": "logging-into-intrinsic-using-okta",
        "title": "Logging into Intrinsic Using Okta"
      }
    },
    "level": "h2"
  },
  {
    "objectID": "test:test.com:root.uv.api-reference.subpackage_detections.subpackage_detections.getDetection",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/api-reference/detections/get-detection",
    "pathname": "/api-reference/detections/get-detection",
    "title": "Get a detection by ID",
    "breadcrumb": [
      {
        "title": "API Reference",
        "pathname": "/api-reference"
      },
      {
        "title": "Detections",
        "pathname": "/api-reference/detections"
      }
    ],
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "page_position": 0,
    "api_type": "http",
    "api_definition_id": "cb72b86f-a3ee-47b4-a201-5aa358a6713b",
    "api_endpoint_id": "subpackage_detections.getDetection",
    "method": "GET",
    "endpoint_path": "/api/v2/detections/:id",
    "endpoint_path_alternates": [
      "/api/v2/detections/{id}",
      "https://intrinsicapi.com/api/v2/detections/:id",
      "https://intrinsicapi.com/api/v2/detections/%7Bid%7D"
    ],
    "response_type": "json",
    "environments": [
      {
        "id": "Default",
        "url": "https://intrinsicapi.com"
      }
    ],
    "default_environment_id": "Default",
    "keywords": [
      "endpoint",
      "api",
      "http",
      "rest",
      "openapi",
      "json",
      "ErrorSchema",
      "ErrorSchema",
      "ErrorSchema"
    ],
    "type": "api-reference"
  },
  {
    "objectID": "test:test.com:root.uv.api-reference.subpackage_events.subpackage_events.createEventSync",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/api-reference/events/create-event-sync",
    "pathname": "/api-reference/events/create-event-sync",
    "title": "Create an Event synchronously",
    "breadcrumb": [
      {
        "title": "API Reference",
        "pathname": "/api-reference"
      },
      {
        "title": "Events",
        "pathname": "/api-reference/events"
      }
    ],
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "page_position": 0,
    "api_type": "http",
    "api_definition_id": "cb72b86f-a3ee-47b4-a201-5aa358a6713b",
    "api_endpoint_id": "subpackage_events.createEventSync",
    "method": "POST",
    "endpoint_path": "/api/v2/events/sync/:event_type_name",
    "endpoint_path_alternates": [
      "/api/v2/events/sync/{event_type_name}",
      "https://intrinsicapi.com/api/v2/events/sync/:event_type_name",
      "https://intrinsicapi.com/api/v2/events/sync/%7Bevent_type_name%7D"
    ],
    "response_type": "json",
    "description": "Creates an event in a synchronous, blocking matter. Note for long-running tasks, the Asynchronous API is recommended instead. Returns an ID for the event created as well as the set of detections that were run.",
    "environments": [
      {
        "id": "Default",
        "url": "https://intrinsicapi.com"
      }
    ],
    "default_environment_id": "Default",
    "keywords": [
      "endpoint",
      "api",
      "http",
      "rest",
      "openapi",
      "json",
      "ErrorSchema",
      "ErrorSchema",
      "ErrorSchema",
      "ErrorSchema"
    ],
    "type": "api-reference"
  },
  {
    "objectID": "test:test.com:root.uv.api-reference.subpackage_events.subpackage_events.createEventAsync",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/api-reference/events/create-event-async",
    "pathname": "/api-reference/events/create-event-async",
    "title": "Create an Event asynchronously",
    "breadcrumb": [
      {
        "title": "API Reference",
        "pathname": "/api-reference"
      },
      {
        "title": "Events",
        "pathname": "/api-reference/events"
      }
    ],
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "page_position": 0,
    "api_type": "http",
    "api_definition_id": "cb72b86f-a3ee-47b4-a201-5aa358a6713b",
    "api_endpoint_id": "subpackage_events.createEventAsync",
    "method": "POST",
    "endpoint_path": "/api/v2/events/async/:event_type_name",
    "endpoint_path_alternates": [
      "/api/v2/events/async/{event_type_name}",
      "https://intrinsicapi.com/api/v2/events/async/:event_type_name",
      "https://intrinsicapi.com/api/v2/events/async/%7Bevent_type_name%7D"
    ],
    "response_type": "json",
    "description": "Creates an event in an asynchronous manner. Returns an ID for the event created as well as the set of detection ids associated with the event.",
    "environments": [
      {
        "id": "Default",
        "url": "https://intrinsicapi.com"
      }
    ],
    "default_environment_id": "Default",
    "keywords": [
      "endpoint",
      "api",
      "http",
      "rest",
      "openapi",
      "json",
      "ErrorSchema",
      "ErrorSchema",
      "ErrorSchema",
      "ErrorSchema"
    ],
    "type": "api-reference"
  },
  {
    "objectID": "test:test.com:root.uv.api-reference.subpackage_eventTypes.subpackage_eventTypes.getEventTypes",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/api-reference/event-types/get-event-types",
    "pathname": "/api-reference/event-types/get-event-types",
    "title": "List all event types",
    "breadcrumb": [
      {
        "title": "API Reference",
        "pathname": "/api-reference"
      },
      {
        "title": "Event Types",
        "pathname": "/api-reference/event-types"
      }
    ],
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "page_position": 0,
    "api_type": "http",
    "api_definition_id": "cb72b86f-a3ee-47b4-a201-5aa358a6713b",
    "api_endpoint_id": "subpackage_eventTypes.getEventTypes",
    "method": "GET",
    "endpoint_path": "/api/v2/event-types",
    "endpoint_path_alternates": [
      "/api/v2/event-types",
      "https://intrinsicapi.com/api/v2/event-types",
      "https://intrinsicapi.com/api/v2/event-types"
    ],
    "response_type": "json",
    "description": "Get all event types",
    "environments": [
      {
        "id": "Default",
        "url": "https://intrinsicapi.com"
      }
    ],
    "default_environment_id": "Default",
    "keywords": [
      "endpoint",
      "api",
      "http",
      "rest",
      "openapi",
      "json",
      "ErrorSchema",
      "ErrorSchema"
    ],
    "type": "api-reference"
  },
  {
    "objectID": "test:test.com:root.uv.api-reference.subpackage_eventTypes.subpackage_eventTypes.createEventType",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/api-reference/event-types/create-event-type",
    "pathname": "/api-reference/event-types/create-event-type",
    "title": "Create an event type",
    "breadcrumb": [
      {
        "title": "API Reference",
        "pathname": "/api-reference"
      },
      {
        "title": "Event Types",
        "pathname": "/api-reference/event-types"
      }
    ],
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "page_position": 0,
    "api_type": "http",
    "api_definition_id": "cb72b86f-a3ee-47b4-a201-5aa358a6713b",
    "api_endpoint_id": "subpackage_eventTypes.createEventType",
    "method": "POST",
    "endpoint_path": "/api/v2/event-types",
    "endpoint_path_alternates": [
      "/api/v2/event-types",
      "https://intrinsicapi.com/api/v2/event-types",
      "https://intrinsicapi.com/api/v2/event-types"
    ],
    "response_type": "json",
    "description": "Create a new event type",
    "environments": [
      {
        "id": "Default",
        "url": "https://intrinsicapi.com"
      }
    ],
    "default_environment_id": "Default",
    "keywords": [
      "endpoint",
      "api",
      "http",
      "rest",
      "openapi",
      "json",
      "EventTypeField",
      "ErrorSchema",
      "ErrorSchema"
    ],
    "type": "api-reference"
  },
  {
    "objectID": "test:test.com:root.uv.api-reference.subpackage_eventTypes.subpackage_eventTypes.patchEventType",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/api-reference/event-types/patch-event-type",
    "pathname": "/api-reference/event-types/patch-event-type",
    "title": "Add fields to an event type",
    "breadcrumb": [
      {
        "title": "API Reference",
        "pathname": "/api-reference"
      },
      {
        "title": "Event Types",
        "pathname": "/api-reference/event-types"
      }
    ],
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "page_position": 0,
    "api_type": "http",
    "api_definition_id": "cb72b86f-a3ee-47b4-a201-5aa358a6713b",
    "api_endpoint_id": "subpackage_eventTypes.patchEventType",
    "method": "PATCH",
    "endpoint_path": "/api/v2/event-types/:id",
    "endpoint_path_alternates": [
      "/api/v2/event-types/:id",
      "https://intrinsicapi.com/api/v2/event-types/:id",
      "https://intrinsicapi.com/api/v2/event-types/:id"
    ],
    "response_type": "json",
    "description": "Add fields to an existing event type. All added fields will be optional. Existing fields cannot be updated or deleted.",
    "environments": [
      {
        "id": "Default",
        "url": "https://intrinsicapi.com"
      }
    ],
    "default_environment_id": "Default",
    "keywords": [
      "endpoint",
      "api",
      "http",
      "rest",
      "openapi",
      "json",
      "PatchEventTypeField",
      "ErrorSchema",
      "ErrorSchema"
    ],
    "type": "api-reference"
  }
]