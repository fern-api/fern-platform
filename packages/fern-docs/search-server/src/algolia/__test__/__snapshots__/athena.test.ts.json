[
  {
    "objectID": "test:test.com:root.uv.getting-started.athena-sdk-quickstart-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/getting-started/athena-sdk-quickstart",
    "pathname": "/getting-started/athena-sdk-quickstart",
    "title": "Quickstart",
    "breadcrumb": [
      {
        "title": "Getting Started",
        "pathname": "/getting-started"
      }
    ],
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "page_position": 0,
    "type": "markdown",
    "description": "Learn how to get started with Athena Python SDK.",
    "code_snippets": [
      {
        "lang": "python",
        "code": "!pip install -U athena-intelligence"
      },
      {
        "lang": "python",
        "code": "import os\n\nATHENA_API_KEY = os.environ[\"ATHENA_API_KEY\"]\n\nfrom athena import Model, Tools\nfrom athena.client import Athena\n\nathena = Athena(\n    api_key=ATHENA_API_KEY,\n)"
      },
      {
        "lang": "python",
        "code": "!pip install -U athena-intelligence"
      },
      {
        "lang": "python",
        "code": "import os\n\nATHENA_API_KEY = os.environ[\"ATHENA_API_KEY\"]\n\nfrom athena import Model, Tools\nfrom athena.client import Athena\n\nathena = Athena(\n    api_key=ATHENA_API_KEY,\n)"
      }
    ],
    "content": "We recommend using the SDK in Athena Notebooks.\n\n\nInstall Athena Python SDK\nInitialize Athena client\nTo get API early access, reach out to team@athenaintelligence.ai\nContinue\nExplore examples and sample notebooks of end-to-end workflows with Athena SDK.\nClick Athena Notebooks -> File Viewer -> Sample Notebooks."
  },
  {
    "objectID": "test:test.com:root.uv.guides.online-research-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/guides/online-research",
    "pathname": "/guides/online-research",
    "title": "Online Research",
    "breadcrumb": [
      {
        "title": "Guides",
        "pathname": "/guides"
      }
    ],
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "page_position": 0,
    "type": "markdown",
    "code_snippets": [
      {
        "lang": "python",
        "code": "tools=[\n  Tools.SEARCH, \n  Tools.BROWSE, \n  Tools.WIKIPEDIA, \n  Tools.ENRICH_PERSON, \n  Tools.ENRICH_COMPANY\n  ]"
      },
      {
        "lang": "python",
        "code": "!pip install -U athena-intelligence"
      },
      {
        "lang": "python",
        "code": "import json\nimport pandas as pd\nimport os\n\nATHENA_API_KEY = os.environ[\"ATHENA_API_KEY\"]\n\nfrom athena import Model, Tools\nfrom athena.client import AsyncAthena\n\nathena = AsyncAthena(\n    api_key=ATHENA_API_KEY,\n)\n"
      },
      {
        "lang": "python",
        "code": "team = \"KC Chiefs\"\nUSER_MESSAGE_INPUT = f\"\"\"\nWho plays quarterback in {team}?\n\"\"\"\n\nmessage = await athena.message.submit_and_poll(\n    content=USER_MESSAGE_INPUT,\n    model=Model.GPT_4_TURBO_PREVIEW,\n    tools=[Tools.SEARCH, Tools.BROWSE, Tools.WIKIPEDIA],\n)\n\nprint(message.content)"
      },
      {
        "lang": "python",
        "code": "person = \"Patrick Mahomes\"\nUSER_MESSAGE_INPUT = f\"\"\"\nAnswer the question below using available tools. \n\nWho is {person}?\n\"\"\"\n\nmessage = await athena.message.submit_and_poll(\n    content=USER_MESSAGE_INPUT,\n    model=Model.GPT_4_TURBO_PREVIEW,\n    tools=[ Tools.ENRICH_PERSON, Tools. ENRICH_COMPANY, Tools.SEARCH, Tools.BROWSE],\n)\n\nprint(message.content)"
      },
      {
        "lang": "python",
        "code": "!pip install -U athena-intelligence"
      },
      {
        "lang": "python",
        "code": "import json\nimport pandas as pd\nimport os\n\nATHENA_API_KEY = os.environ[\"ATHENA_API_KEY\"]\n\nfrom athena import Model, Tools\nfrom athena.client import AsyncAthena\n\nathena = AsyncAthena(\n    api_key=ATHENA_API_KEY,\n)\n"
      },
      {
        "lang": "python",
        "code": "team = \"KC Chiefs\"\nUSER_MESSAGE_INPUT = f\"\"\"\nWho plays quarterback in {team}?\n\"\"\"\n\nmessage = await athena.message.submit_and_poll(\n    content=USER_MESSAGE_INPUT,\n    model=Model.GPT_4_TURBO_PREVIEW,\n    tools=[Tools.SEARCH, Tools.BROWSE, Tools.WIKIPEDIA],\n)\n\nprint(message.content)"
      },
      {
        "lang": "python",
        "code": "person = \"Patrick Mahomes\"\nUSER_MESSAGE_INPUT = f\"\"\"\nAnswer the question below using available tools. \n\nWho is {person}?\n\"\"\"\n\nmessage = await athena.message.submit_and_poll(\n    content=USER_MESSAGE_INPUT,\n    model=Model.GPT_4_TURBO_PREVIEW,\n    tools=[ Tools.ENRICH_PERSON, Tools. ENRICH_COMPANY, Tools.SEARCH, Tools.BROWSE],\n)\n\nprint(message.content)"
      }
    ],
    "content": "Athena has the following tools to help you research information online:\n\n\nSet up environment\nResearch general topics with search & browse and wikipedia tools.\nWrite a reasearch request and add tools you want Athena to use.\nResearch specific person or company with enrich_person and enrich_company tools.\nAthena data providers APIs to gather information about individuals and companies. However, these tools might not always provide detailed information for some queries. For more consistent results, consider adding the search and browse tools as fallback options."
  },
  {
    "objectID": "test:test.com:root.uv.guides.online-research-specifying-tool-order-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/guides/online-research",
    "pathname": "/guides/online-research",
    "title": "Specifying tool order",
    "breadcrumb": [
      {
        "title": "Guides",
        "pathname": "/guides"
      }
    ],
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "page_position": 1,
    "type": "markdown",
    "hash": "#specifying-tool-order",
    "content": "You can tell Athena which tools to use first by simply passing the request in the input message:",
    "code_snippets": [
      {
        "lang": "python",
        "code": "team = \"KC Chiefs\"\nUSER_MESSAGE_INPUT = f\"\"\"\nAnswer the question below using available tools. \nUse the tools in the following order: \n1. Wikipedia\n2. Enrich tools\n3. Search and Browse - only use if Wikipedia didn't return results. \n\nWho plays quarterback in {team}?\n\"\"\"\n\nmessage = await athena.message.submit_and_poll(\n    content=USER_MESSAGE_INPUT,\n    model=Model.GPT_4_TURBO_PREVIEW,\n    tools=[Tools.SEARCH, Tools.BROWSE, Tools.WIKIPEDIA, Tools.ENRICH_PERSON, Tools. ENRICH_COMPANY],\n)\n\nprint(message.content)"
      }
    ],
    "hierarchy": {
      "h0": {
        "title": "Online Research"
      },
      "h3": {
        "id": "specifying-tool-order",
        "title": "Specifying tool order"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.guides.online-research-with-open-source-models-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/guides/online-research-with-open-source-models",
    "pathname": "/guides/online-research-with-open-source-models",
    "title": "Online Research with Open Source Models",
    "breadcrumb": [
      {
        "title": "Guides",
        "pathname": "/guides"
      }
    ],
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "page_position": 0,
    "type": "markdown",
    "code_snippets": [
      {
        "lang": "python",
        "code": "!pip install -U athena-intelligence"
      },
      {
        "lang": "python",
        "code": "import json\nimport pandas as pd\nimport os\n\nATHENA_API_KEY = os.environ[\"ATHENA_API_KEY\"]\n\nfrom athena import Model, Tools\nfrom athena.client import AsyncAthena\n\nathena = AsyncAthena(\n    api_key=ATHENA_API_KEY,\n)\n"
      },
      {
        "lang": "python",
        "code": "message = await async_athena.tools.tool_first_workflow(\n\n    model=ToolModels.MISTRAL_LARGE_0224,\n    tool_name=\"tavily_search\",\n    content=\"Summarize information on the topic\",\n    tool_kwargs={\"query\": \"AI advances in April 2024\"},\n\n)\ndisplay(Markdown(message.output_message))"
      },
      {
        "lang": "markdown",
        "code": "Based on the search results, it appears that Generative AI (Gen AI) is a significant technological advancement that has the potential to add up to $4.4 trillion in economic value to the global economy. However, companies are finding it challenging to capture this value. Gen AI is particularly exciting in the business world and is being used in various sectors such as manufacturing and the entertainment industry.\n\nStanford University's 2024 AI Index has charted the meteoric rise of AI tools, and AI is now outperforming humans at basic tasks, necessitating new benchmarks. The power of Gen AI, combined with traditional AI, is expected to provide even more help in the future.\n\nHowever, the use of Gen AI in the workplace is not without its challenges. Organizations must have a clear policy around Gen AI and be wary of 'shadow AI' - the unofficial use of AI in the workplace by employees without IT approval or oversight.\n\nThe Gartner Hype Cycle positions Gen AI at the 'Peak of Inflated Expectations,' on the cusp of a slide into the 'Trough of Disillusionment,' indicating a relatively underwhelming transition period. Despite this, many leaders expect substantial transformative impacts in the short term.\n\nIn terms of regulations, policymakers have been drawing up tough new regulations, with Biden’s executive order coming out in October and the European Union’s AI Act being finally agreed in December.\n\nIn conclusion, while Gen AI holds immense potential, it also presents challenges in terms of value capture, unofficial use, and regulations."
      },
      {
        "lang": "python",
        "code": "!pip install -U athena-intelligence"
      },
      {
        "lang": "python",
        "code": "import json\nimport pandas as pd\nimport os\n\nATHENA_API_KEY = os.environ[\"ATHENA_API_KEY\"]\n\nfrom athena import Model, Tools\nfrom athena.client import AsyncAthena\n\nathena = AsyncAthena(\n    api_key=ATHENA_API_KEY,\n)\n"
      },
      {
        "lang": "python",
        "code": "message = await async_athena.tools.tool_first_workflow(\n\n    model=ToolModels.MISTRAL_LARGE_0224,\n    tool_name=\"tavily_search\",\n    content=\"Summarize information on the topic\",\n    tool_kwargs={\"query\": \"AI advances in April 2024\"},\n\n)\ndisplay(Markdown(message.output_message))"
      },
      {
        "lang": "markdown",
        "code": "Based on the search results, it appears that Generative AI (Gen AI) is a significant technological advancement that has the potential to add up to $4.4 trillion in economic value to the global economy. However, companies are finding it challenging to capture this value. Gen AI is particularly exciting in the business world and is being used in various sectors such as manufacturing and the entertainment industry.\n\nStanford University's 2024 AI Index has charted the meteoric rise of AI tools, and AI is now outperforming humans at basic tasks, necessitating new benchmarks. The power of Gen AI, combined with traditional AI, is expected to provide even more help in the future.\n\nHowever, the use of Gen AI in the workplace is not without its challenges. Organizations must have a clear policy around Gen AI and be wary of 'shadow AI' - the unofficial use of AI in the workplace by employees without IT approval or oversight.\n\nThe Gartner Hype Cycle positions Gen AI at the 'Peak of Inflated Expectations,' on the cusp of a slide into the 'Trough of Disillusionment,' indicating a relatively underwhelming transition period. Despite this, many leaders expect substantial transformative impacts in the short term.\n\nIn terms of regulations, policymakers have been drawing up tough new regulations, with Biden’s executive order coming out in October and the European Union’s AI Act being finally agreed in December.\n\nIn conclusion, while Gen AI holds immense potential, it also presents challenges in terms of value capture, unofficial use, and regulations."
      }
    ],
    "content": "Athena can leverage open-source models to research web and analyse results using open source models with tools.tool_first_workflow()\n\n\nSet up environment\nSet up search query and instructions for analysing results\nWrite a search request and what you want Athena to do with search results."
  },
  {
    "objectID": "test:test.com:root.uv.guides.structured-output-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/guides/structured-output",
    "pathname": "/guides/structured-output",
    "title": "Structured Output",
    "breadcrumb": [
      {
        "title": "Guides",
        "pathname": "/guides"
      }
    ],
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "page_position": 0,
    "type": "markdown",
    "code_snippets": [
      {
        "lang": "python",
        "code": "!pip install -U athena-intelligence"
      },
      {
        "lang": "python",
        "code": "import json\nimport pandas as pd\nimport os\n\nATHENA_API_KEY = os.environ[\"ATHENA_API_KEY\"]\n\nfrom athena import Model, Tools\nfrom athena.client import AsyncAthena\n\nathena = AsyncAthena(\n    api_key=ATHENA_API_KEY,\n)\n"
      },
      {
        "lang": "python",
        "code": "message = await async_athena.tools.tool_first_workflow(\n\n    model=ToolModels.MISTRAL_LARGE_0224,\n    tool_name=\"tavily_search\",\n    content=\"Summarize information on the topic\",\n    tool_kwargs={\"query\": \"AI advances in April 2024\"},\n\n)\ndisplay(Markdown(message.output_message))"
      },
      {
        "lang": "markdown",
        "code": "Based on the search results, it appears that Generative AI (Gen AI) is a significant technological advancement that has the potential to add up to $4.4 trillion in economic value to the global economy. However, companies are finding it challenging to capture this value. Gen AI is particularly exciting in the business world and is being used in various sectors such as manufacturing and the entertainment industry.\n\nStanford University's 2024 AI Index has charted the meteoric rise of AI tools, and AI is now outperforming humans at basic tasks, necessitating new benchmarks. The power of Gen AI, combined with traditional AI, is expected to provide even more help in the future.\n\nHowever, the use of Gen AI in the workplace is not without its challenges. Organizations must have a clear policy around Gen AI and be wary of 'shadow AI' - the unofficial use of AI in the workplace by employees without IT approval or oversight.\n\nThe Gartner Hype Cycle positions Gen AI at the 'Peak of Inflated Expectations,' on the cusp of a slide into the 'Trough of Disillusionment,' indicating a relatively underwhelming transition period. Despite this, many leaders expect substantial transformative impacts in the short term.\n\nIn terms of regulations, policymakers have been drawing up tough new regulations, with Biden’s executive order coming out in October and the European Union’s AI Act being finally agreed in December.\n\nIn conclusion, while Gen AI holds immense potential, it also presents challenges in terms of value capture, unofficial use, and regulations."
      },
      {
        "lang": "python",
        "code": "from athena import StructuredParseInParsingModel\nstructured_output = athena.chain.structured_parse(\n    text_input=message.output_message, \n    custom_type_dict={\"news\": {\"news_item_1\": \"news_content_1\", \"news_item_2\": \"news_content_2\"}},\n    parsing_model=StructuredParseInParsingModel.MISTRAL_LARGE_0224,\n)\nstructured_output.result"
      },
      {
        "lang": "json",
        "code": "{'news': {'news_item_1': 'Generative AI (Gen AI) is a significant technological advancement that has the potential to add up to $4.4 trillion in economic value to the global economy. However, companies are finding it challenging to capture this value. Gen AI is particularly exciting in the business world and is being used in various sectors such as manufacturing and the entertainment industry.',\n  'news_item_2': \"Stanford University's 2024 AI Index has charted the meteoric rise of AI tools, and AI is now outperforming humans at basic tasks, necessitating new benchmarks. The power of Gen AI, combined with traditional AI, is expected to provide even more help in the future.\",\n  'news_item_3': \"However, the use of Gen AI in the workplace is not without its challenges. Organizations must have a clear policy around Gen AI and be wary of 'shadow AI' - the unofficial use of AI in the workplace by employees without IT approval or oversight.\",\n  'news_item_4': \"The Gartner Hype Cycle positions Gen AI at the 'Peak of Inflated Expectations,' on the cusp of a slide into the 'Trough of Disillusionment,' indicating a relatively underwhelming transition period. Despite this, many leaders expect substantial transformative impacts in the short term.\",\n  'news_item_5': 'In terms of regulations, policymakers have been drawing up tough new regulations, with Biden’s executive order coming out in October and the European Union’s AI Act being finally agreed in December.',\n  'news_item_6': 'In conclusion, while Gen AI holds immense potential, it also presents challenges in terms of value capture, unofficial use, and regulations.'}}"
      },
      {
        "lang": "python",
        "code": "!pip install -U athena-intelligence"
      },
      {
        "lang": "python",
        "code": "import json\nimport pandas as pd\nimport os\n\nATHENA_API_KEY = os.environ[\"ATHENA_API_KEY\"]\n\nfrom athena import Model, Tools\nfrom athena.client import AsyncAthena\n\nathena = AsyncAthena(\n    api_key=ATHENA_API_KEY,\n)\n"
      },
      {
        "lang": "python",
        "code": "message = await async_athena.tools.tool_first_workflow(\n\n    model=ToolModels.MISTRAL_LARGE_0224,\n    tool_name=\"tavily_search\",\n    content=\"Summarize information on the topic\",\n    tool_kwargs={\"query\": \"AI advances in April 2024\"},\n\n)\ndisplay(Markdown(message.output_message))"
      },
      {
        "lang": "markdown",
        "code": "Based on the search results, it appears that Generative AI (Gen AI) is a significant technological advancement that has the potential to add up to $4.4 trillion in economic value to the global economy. However, companies are finding it challenging to capture this value. Gen AI is particularly exciting in the business world and is being used in various sectors such as manufacturing and the entertainment industry.\n\nStanford University's 2024 AI Index has charted the meteoric rise of AI tools, and AI is now outperforming humans at basic tasks, necessitating new benchmarks. The power of Gen AI, combined with traditional AI, is expected to provide even more help in the future.\n\nHowever, the use of Gen AI in the workplace is not without its challenges. Organizations must have a clear policy around Gen AI and be wary of 'shadow AI' - the unofficial use of AI in the workplace by employees without IT approval or oversight.\n\nThe Gartner Hype Cycle positions Gen AI at the 'Peak of Inflated Expectations,' on the cusp of a slide into the 'Trough of Disillusionment,' indicating a relatively underwhelming transition period. Despite this, many leaders expect substantial transformative impacts in the short term.\n\nIn terms of regulations, policymakers have been drawing up tough new regulations, with Biden’s executive order coming out in October and the European Union’s AI Act being finally agreed in December.\n\nIn conclusion, while Gen AI holds immense potential, it also presents challenges in terms of value capture, unofficial use, and regulations."
      },
      {
        "lang": "python",
        "code": "from athena import StructuredParseInParsingModel\nstructured_output = athena.chain.structured_parse(\n    text_input=message.output_message, \n    custom_type_dict={\"news\": {\"news_item_1\": \"news_content_1\", \"news_item_2\": \"news_content_2\"}},\n    parsing_model=StructuredParseInParsingModel.MISTRAL_LARGE_0224,\n)\nstructured_output.result"
      },
      {
        "lang": "json",
        "code": "{'news': {'news_item_1': 'Generative AI (Gen AI) is a significant technological advancement that has the potential to add up to $4.4 trillion in economic value to the global economy. However, companies are finding it challenging to capture this value. Gen AI is particularly exciting in the business world and is being used in various sectors such as manufacturing and the entertainment industry.',\n  'news_item_2': \"Stanford University's 2024 AI Index has charted the meteoric rise of AI tools, and AI is now outperforming humans at basic tasks, necessitating new benchmarks. The power of Gen AI, combined with traditional AI, is expected to provide even more help in the future.\",\n  'news_item_3': \"However, the use of Gen AI in the workplace is not without its challenges. Organizations must have a clear policy around Gen AI and be wary of 'shadow AI' - the unofficial use of AI in the workplace by employees without IT approval or oversight.\",\n  'news_item_4': \"The Gartner Hype Cycle positions Gen AI at the 'Peak of Inflated Expectations,' on the cusp of a slide into the 'Trough of Disillusionment,' indicating a relatively underwhelming transition period. Despite this, many leaders expect substantial transformative impacts in the short term.\",\n  'news_item_5': 'In terms of regulations, policymakers have been drawing up tough new regulations, with Biden’s executive order coming out in October and the European Union’s AI Act being finally agreed in December.',\n  'news_item_6': 'In conclusion, while Gen AI holds immense potential, it also presents challenges in terms of value capture, unofficial use, and regulations.'}}"
      }
    ],
    "content": "Athena can return structured output if you pass it the desired schema using chain.structured_parse():\n\n\nSet up environment\nSet up a sample search query:\nWrite a search request and what you want Athena to do with search results.\nUse structured_parse() to return structured output"
  },
  {
    "objectID": "test:test.com:root.uv.guides.query-and-visualize-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/guides/query-and-visualize",
    "pathname": "/guides/query-and-visualize",
    "title": "Query and Visualize",
    "breadcrumb": [
      {
        "title": "Guides",
        "pathname": "/guides"
      }
    ],
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "page_position": 0,
    "type": "markdown",
    "code_snippets": [
      {
        "lang": "python",
        "code": "!pip install -U athena-intelligence"
      },
      {
        "lang": "python",
        "code": "import json\nimport pandas as pd\nimport os\n\nATHENA_API_KEY = os.environ[\"ATHENA_API_KEY\"]\n\nfrom athena import Model, Tools\nfrom athena.client import Athena\n\nathena = Athena(\n    api_key=ATHENA_API_KEY,\n)"
      },
      {
        "lang": "python",
        "code": "# default database id = 9\ndefault_database_id = 9"
      },
      {
        "lang": "python",
        "code": "query = \"\"\"\nWITH RankedCustomers AS (\n  SELECT\n    r.route_id,\n    r.src AS route_source,\n    r.dst AS route_destination,\n    ts.passenger_id,\n    c.name AS customer_name,\n    SUM(ts.num_tickets) AS total_tickets,\n    RANK() OVER (PARTITION BY r.route_id ORDER BY SUM(ts.num_tickets) DESC) AS rank\n  FROM\n    sample_schema.train_routes r\n  JOIN sample_schema.train_trips t ON r.route_id = t.route_id\n  JOIN sample_schema.train_ticketsales ts ON t.trip_id = ts.trip_id\n  JOIN sample_schema.train_customers c ON ts.passenger_id = c.passenger_id\n  GROUP BY\n    r.route_id,\n    r.src,\n    r.dst,\n    ts.passenger_id,\n    c.name\n)\nSELECT\n  route_id,\n  route_source,\n  route_destination,\n  passenger_id,\n  customer_name,\n  total_tickets\nFROM\n  RankedCustomers\nWHERE\n  rank <= 3\nORDER BY\n  route_id,\n  rank;\n\"\"\""
      },
      {
        "lang": "python",
        "code": "query_result = athena.query.execute(\n    sql_command = query,\n    database_id = default_database_id\n    )\n\nformatted_query_result = json.loads(query_result.json())\ndata_output = formatted_query_result['result']['data']\n\n# Convert the list of dictionaries to a DataFrame\ndf = pd.DataFrame(data_output)\n\n# Display the DataFrame to verify the contents\ndf\n"
      },
      {
        "lang": "python",
        "code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Assuming 'df' is your DataFrame\n# Ensure your DataFrame is named 'df' or adjust the variable name accordingly\n\n# Visualization 1: Total Tickets Sold by Route\nroute_tickets_sum = df.groupby('route_id')['total_tickets'].sum().reset_index()\nplt.figure(figsize=(10, 6))\nplt.bar(route_tickets_sum['route_id'], route_tickets_sum['total_tickets'], color='deepskyblue')  # Changed color to 'deepskyblue'\nplt.title('Total Tickets Sold by Route')\nplt.xlabel('Route ID')\nplt.ylabel('Total Tickets Sold')\nplt.xticks(rotation=45)\nplt.tight_layout()\nplt.show()"
      },
      {
        "lang": "python",
        "code": "!pip install -U athena-intelligence"
      },
      {
        "lang": "python",
        "code": "import json\nimport pandas as pd\nimport os\n\nATHENA_API_KEY = os.environ[\"ATHENA_API_KEY\"]\n\nfrom athena import Model, Tools\nfrom athena.client import Athena\n\nathena = Athena(\n    api_key=ATHENA_API_KEY,\n)"
      },
      {
        "lang": "python",
        "code": "# default database id = 9\ndefault_database_id = 9"
      },
      {
        "lang": "python",
        "code": "query = \"\"\"\nWITH RankedCustomers AS (\n  SELECT\n    r.route_id,\n    r.src AS route_source,\n    r.dst AS route_destination,\n    ts.passenger_id,\n    c.name AS customer_name,\n    SUM(ts.num_tickets) AS total_tickets,\n    RANK() OVER (PARTITION BY r.route_id ORDER BY SUM(ts.num_tickets) DESC) AS rank\n  FROM\n    sample_schema.train_routes r\n  JOIN sample_schema.train_trips t ON r.route_id = t.route_id\n  JOIN sample_schema.train_ticketsales ts ON t.trip_id = ts.trip_id\n  JOIN sample_schema.train_customers c ON ts.passenger_id = c.passenger_id\n  GROUP BY\n    r.route_id,\n    r.src,\n    r.dst,\n    ts.passenger_id,\n    c.name\n)\nSELECT\n  route_id,\n  route_source,\n  route_destination,\n  passenger_id,\n  customer_name,\n  total_tickets\nFROM\n  RankedCustomers\nWHERE\n  rank <= 3\nORDER BY\n  route_id,\n  rank;\n\"\"\""
      },
      {
        "lang": "python",
        "code": "query_result = athena.query.execute(\n    sql_command = query,\n    database_id = default_database_id\n    )\n\nformatted_query_result = json.loads(query_result.json())\ndata_output = formatted_query_result['result']['data']\n\n# Convert the list of dictionaries to a DataFrame\ndf = pd.DataFrame(data_output)\n\n# Display the DataFrame to verify the contents\ndf\n"
      },
      {
        "lang": "python",
        "code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Assuming 'df' is your DataFrame\n# Ensure your DataFrame is named 'df' or adjust the variable name accordingly\n\n# Visualization 1: Total Tickets Sold by Route\nroute_tickets_sum = df.groupby('route_id')['total_tickets'].sum().reset_index()\nplt.figure(figsize=(10, 6))\nplt.bar(route_tickets_sum['route_id'], route_tickets_sum['total_tickets'], color='deepskyblue')  # Changed color to 'deepskyblue'\nplt.title('Total Tickets Sold by Route')\nplt.xlabel('Route ID')\nplt.ylabel('Total Tickets Sold')\nplt.xticks(rotation=45)\nplt.tight_layout()\nplt.show()"
      }
    ],
    "content": "Set up environment\nQuery SQL with athena.query.execute()\nInitialize default database or specify id of another connected database. Ask Athena team if unclear.\nPut your query here\nRun the query and convert to Pandas dataframe for subsequent analysis\nVisualize data using Athena Notebooks Sidebar\nOnce you have an SQL output, you can harness the power and flexibility of visualisations or further analysis using Python. In Athena Notebooks, you can click \"Chat\" in the top right corner to ask Athena for help writing code for visualizations you need. Copy and paste a dataframe headers and 2-3 rows to give Athena all needed context.\nWrite code to visualize this table:\nroute_id \troute_source \troute_destination \tpassenger_id \tcustomer_name \ttotal_tickets\n0 \t1 \tWest Sylvia \tWilliamsshire \t816 \tJaruwan Rogers \t13\n1 \t1 \tWest Sylvia \tWilliamsshire \t679 \tKaren Tapp \t9\n\nSure, here's the code:\n...\n\n\nCopy & run the code in the notebook."
  },
  {
    "objectID": "test:test.com:root.uv.guides.generate-documentation-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/guides/generate-documentation",
    "pathname": "/guides/generate-documentation",
    "title": "Generate Data Documentation",
    "breadcrumb": [
      {
        "title": "Guides",
        "pathname": "/guides"
      }
    ],
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "page_position": 0,
    "type": "markdown",
    "code_snippets": [
      {
        "lang": "python",
        "code": "!pip install -U athena-intelligence"
      },
      {
        "lang": "python",
        "code": "import json\nimport os\nimport pandas as pd\nfrom IPython.display import Markdown\n\nATHENA_API_KEY = os.environ[\"ATHENA_API_KEY\"]\n\nfrom athena import Model, Tools\nfrom athena.client import Athena\n\nathena = Athena(\n    api_key=ATHENA_API_KEY,\n)"
      },
      {
        "lang": "python",
        "code": "datasets = athena.dataset.get(page=1, page_size=5)\ndatasets"
      },
      {
        "lang": "python",
        "code": "data = json.loads(datasets.json())\ndatasets_list = data['datasets']\nimport pandas as pd\npd.set_option('display.max_colwidth', None)\ndf_datasets = pd.DataFrame(datasets_list)\ndf_datasets"
      },
      {
        "lang": "python",
        "code": "# Iterate over each row in the DataFrame\nfor index, row in df_datasets.iterrows():\n    dataset_name = row['name']\n    dataset_schema_details = row['schema_details']\n    \n    # Generate documentation for the current dataset\n    generate_documentation_for_dataset(dataset_name, dataset_schema_details)"
      },
      {
        "lang": "python",
        "code": "def json_to_markdown_document(json_list):\n    markdown_document = \"\"\n    if not json_list:\n        return \"No data available\"\n    \n    for item in json_list:\n        for key, value in item.items():\n            markdown_document += f\"**{key}:** {value}\\n\\n\"\n        markdown_document += \"---\\n\\n\"  # Separator line between items\n    \n    return markdown_document\n\n# Convert the list of dictionaries to Markdown\nmarkdown_document = json_to_markdown_document(documentation_responses)\n\n# Display the Markdown in the notebook\ndisplay(Markdown(markdown_document))"
      },
      {
        "lang": "python",
        "code": "high_level_documentation = generate_high_level_documentation(markdown_document)\ndisplay(Markdown(high_level_documentation))"
      },
      {
        "lang": "python",
        "code": "!pip install -U athena-intelligence"
      },
      {
        "lang": "python",
        "code": "import json\nimport os\nimport pandas as pd\nfrom IPython.display import Markdown\n\nATHENA_API_KEY = os.environ[\"ATHENA_API_KEY\"]\n\nfrom athena import Model, Tools\nfrom athena.client import Athena\n\nathena = Athena(\n    api_key=ATHENA_API_KEY,\n)"
      },
      {
        "lang": "python",
        "code": "datasets = athena.dataset.get(page=1, page_size=5)\ndatasets"
      },
      {
        "lang": "python",
        "code": "data = json.loads(datasets.json())\ndatasets_list = data['datasets']\nimport pandas as pd\npd.set_option('display.max_colwidth', None)\ndf_datasets = pd.DataFrame(datasets_list)\ndf_datasets"
      },
      {
        "lang": "python",
        "code": "# Iterate over each row in the DataFrame\nfor index, row in df_datasets.iterrows():\n    dataset_name = row['name']\n    dataset_schema_details = row['schema_details']\n    \n    # Generate documentation for the current dataset\n    generate_documentation_for_dataset(dataset_name, dataset_schema_details)"
      },
      {
        "lang": "python",
        "code": "def json_to_markdown_document(json_list):\n    markdown_document = \"\"\n    if not json_list:\n        return \"No data available\"\n    \n    for item in json_list:\n        for key, value in item.items():\n            markdown_document += f\"**{key}:** {value}\\n\\n\"\n        markdown_document += \"---\\n\\n\"  # Separator line between items\n    \n    return markdown_document\n\n# Convert the list of dictionaries to Markdown\nmarkdown_document = json_to_markdown_document(documentation_responses)\n\n# Display the Markdown in the notebook\ndisplay(Markdown(markdown_document))"
      },
      {
        "lang": "python",
        "code": "high_level_documentation = generate_high_level_documentation(markdown_document)\ndisplay(Markdown(high_level_documentation))"
      }
    ],
    "content": "Set up environment\nGet datasets\nCall dataset.get method to get datasets. Use optional pagination parameters to run bulk workflows with datasets.\nAthena returns a json object with a list of datasets with the following fields: dataset id, name, database id, schema details (dialect, CREATE statement and first 3 rows), as well as pagination info.\nTo access raw json, use .json():\nDocument individual datasets with athena.submit_and_poll\nWith datasets loaded, we can proceed with the documentation workflow. We'll start by defining a function that takes a list of datasets and send them one by one to Athena with a documentation prompt.\nNow we can kick off the workflow.\nConvert results to markdown to read and copy generated documentation.\nGenerate documentation and ERD diagrams for multiple datasets\nNow that we documented all individual tables, we can ask Athena to process proccess created documentation and generate a higher-level description of the whole body of data, together with joins and other notable relationships between tables."
  },
  {
    "objectID": "test:test.com:root.uv.guides.load-data-frames",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/guides/load-data-frames",
    "pathname": "/guides/load-data-frames",
    "title": "Load Data Frames",
    "breadcrumb": [
      {
        "title": "Guides",
        "pathname": "/guides"
      }
    ],
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "page_position": 0,
    "type": "markdown"
  },
  {
    "objectID": "test:test.com:root.uv.guides.load-data-frames-load-a-json-serialisable-data-frame-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/guides/load-data-frames",
    "pathname": "/guides/load-data-frames",
    "title": "Load a JSON-serialisable data frame",
    "breadcrumb": [
      {
        "title": "Guides",
        "pathname": "/guides"
      }
    ],
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "page_position": 1,
    "type": "markdown",
    "hash": "#load-a-json-serialisable-data-frame",
    "content": "Call tools.data_frame() to load a data frame from a CSV/excel file:\nAthena returns a simple pandas DataFrame representation with the default parsing options. You can adjust the following options:\nrow_limit: int number of rows to load,\n\nindex_column: int column to use as an index,\n\ncolumns: list[str | int] indices or names of columns to include,\n\nsheet_name: str | int name of the sheet to load, only applicable to Excel files\n\nseparator: str separator to use when parsing, only applicable to CSV files\n\n\nFor example, when working with large datasets, it might be beneficial to first examine at the initial five rows:",
    "code_snippets": [
      {
        "lang": "python",
        "code": "df = athena.tools.data_frame(\n    document_id='doc_9249292-d118-42d3-95b4-00eccfe0754f'\n)\ndf"
      },
      {
        "lang": "python",
        "code": "df_head = athena.tools.data_frame(\n    document_id='doc_9249292-d118-42d3-95b4-00eccfe0754f',\n    row_limit=5\n)\ndf_head"
      }
    ],
    "hierarchy": {
      "h0": {
        "title": "Load Data Frames"
      },
      "h3": {
        "id": "load-a-json-serialisable-data-frame",
        "title": "Load a JSON-serialisable data frame"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.guides.load-data-frames-load-a-large-or-complex-data-frame-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/guides/load-data-frames",
    "pathname": "/guides/load-data-frames",
    "title": "Load a large or complex data frame",
    "breadcrumb": [
      {
        "title": "Guides",
        "pathname": "/guides"
      }
    ],
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "page_position": 1,
    "type": "markdown",
    "hash": "#load-a-large-or-complex-data-frame",
    "content": "The tools.data_frame() method is sufficient for handling well-formatted,\nmedium-sized data frames and provides interface that is agnostic to the SDK version\n(a sister method is available in the TypeScript SDK).\nHowever, if your Excel files include values that cannot be JSON-serialized,\nare serializable with a loss of precision, or contain additional metadata,\nyou may prefer to use tools.read_data_frame() method.\nThis method skips the JSON serialization step and provides a raw byte stream\nto the pandas read_csv or read_excel methods, as appropriate.\nThe keyword arguments provided to read_data_frame will be passed to\nthe underlying read_csv/read_excel, depending on the file type.",
    "code_snippets": [
      {
        "lang": "python",
        "code": "df_head = athena.tools.read_data_frame(\n    document_id='doc_9249292-d118-42d3-95b4-00eccfe0754f',\n    dtype={\"a\": np.float64, \"b\": np.int32}\n)\ndf_head"
      }
    ],
    "hierarchy": {
      "h0": {
        "title": "Load Data Frames"
      },
      "h3": {
        "id": "load-a-large-or-complex-data-frame",
        "title": "Load a large or complex data frame"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.guides.load-data-frames-load-a-data-frame-with-another-package-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/guides/load-data-frames",
    "pathname": "/guides/load-data-frames",
    "title": "Load a data frame with another package",
    "breadcrumb": [
      {
        "title": "Guides",
        "pathname": "/guides"
      }
    ],
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "page_position": 1,
    "type": "markdown",
    "hash": "#load-a-data-frame-with-another-package",
    "content": "If you prefer to use another data frame implementation, you can access the\nraw bytes stream object using the tools.get_file() method, which accepts\na single argument - the document identifier. The resulting object complies\nwith the io.BytesIO interface and can be used with most data frame libraries,\nfor example:",
    "code_snippets": [
      {
        "lang": "python",
        "code": "import polars as pl\n\nbytes_io = athena.tools.get_file(\n    document_id='doc_9249292-d118-42d3-95b4-00eccfe0754f',\n)\ndf = pl.read_csv(bytes_io)"
      }
    ],
    "hierarchy": {
      "h0": {
        "title": "Load Data Frames"
      },
      "h3": {
        "id": "load-a-data-frame-with-another-package",
        "title": "Load a data frame with another package"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.guides.upload-files",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/guides/upload-files",
    "pathname": "/guides/upload-files",
    "title": "Upload Files",
    "breadcrumb": [
      {
        "title": "Guides",
        "pathname": "/guides"
      }
    ],
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "page_position": 0,
    "type": "markdown"
  },
  {
    "objectID": "test:test.com:root.uv.guides.upload-files-upload-a-file-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/guides/upload-files",
    "pathname": "/guides/upload-files",
    "title": "Upload a file",
    "breadcrumb": [
      {
        "title": "Guides",
        "pathname": "/guides"
      }
    ],
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "page_position": 1,
    "type": "markdown",
    "hash": "#upload-a-file",
    "content": "To upload a file using the Athena SDK, you can use the upload.upload_documents() method. This method accepts a list of file tuples, where each tuple contains the filename, file content as a BytesIO object, and the MIME type.\nHere's an example of how to upload an Excel file:\nIn this example:\nWe open the file and read its contents into a BytesIO object.\n\nWe create a tuple containing the filename, the BytesIO object, and the MIME type.\n\nWe call athena.upload.upload_documents() with a list containing our file tuple.\n\nThe function returns the result of the upload operation.",
    "code_snippets": [
      {
        "lang": "python",
        "code": "async def upload_file():\n    # Prepare the file for upload\n    file_bytes = io.BytesIO()\n    with open(\"your_file.xlsx\", \"rb\") as f:\n        file_bytes.write(f.read())\n        file_bytes.seek(0)  # Reset the cursor of the BytesIO object\n\n    # Create the file tuple\n    file_tuple = (\n        \"your_file.xlsx\",\n        file_bytes,\n        \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\"\n    )\n\n    # Upload the file\n    result = await athena.upload.upload_documents(files=[file_tuple])\n    print(result)\n\n# Run the async function\nawait upload_file()"
      }
    ],
    "hierarchy": {
      "h0": {
        "title": "Upload Files"
      },
      "h3": {
        "id": "upload-a-file",
        "title": "Upload a file"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.guides.upload-files-upload-multiple-files-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/guides/upload-files",
    "pathname": "/guides/upload-files",
    "title": "Upload multiple files",
    "breadcrumb": [
      {
        "title": "Guides",
        "pathname": "/guides"
      }
    ],
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "page_position": 1,
    "type": "markdown",
    "hash": "#upload-multiple-files",
    "content": "You can upload multiple files in a single request by adding more file tuples to the list:",
    "code_snippets": [
      {
        "lang": "python",
        "code": "async def upload_multiple_files():\n    files = [\n        (\"file1.xlsx\", file1_bytes, \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\"),\n        (\"file2.csv\", file2_bytes, \"text/csv\"),\n        (\"file3.pdf\", file3_bytes, \"application/pdf\")\n    ]\n\n    result = await athena.upload.upload_documents(files=files)\n    print(result)\n\nawait upload_multiple_files()"
      }
    ],
    "hierarchy": {
      "h0": {
        "title": "Upload Files"
      },
      "h3": {
        "id": "upload-multiple-files",
        "title": "Upload multiple files"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:root.uv.guides.upload-files-using-with-fastapi-chunk:0",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/guides/upload-files",
    "pathname": "/guides/upload-files",
    "title": "Using with FastAPI",
    "breadcrumb": [
      {
        "title": "Guides",
        "pathname": "/guides"
      }
    ],
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "page_position": 1,
    "type": "markdown",
    "hash": "#using-with-fastapi",
    "content": "If you're using FastAPI and want to upload files received from a client, you can use the UploadFile object:\nThis endpoint will accept file uploads and forward them to the Athena API using the SDK.\nRemember to handle exceptions and implement proper error checking in your production code.",
    "code_snippets": [
      {
        "lang": "python",
        "code": "from fastapi import FastAPI, UploadFile\n\napp = FastAPI()\n\n@app.post(\"/upload/\")\nasync def upload_file(file: UploadFile):\n    file_tuple = (file.filename, file.file, file.content_type)\n    result = await athena.upload.upload_documents(files=[file_tuple])\n    return {\"message\": \"File uploaded successfully\", \"result\": result}"
      }
    ],
    "hierarchy": {
      "h0": {
        "title": "Upload Files"
      },
      "h3": {
        "id": "using-with-fastapi",
        "title": "Using with FastAPI"
      }
    },
    "level": "h3"
  },
  {
    "objectID": "test:test.com:c173bee9-1794-4364-93d9-780ed8d82ec7:endpoint_tools._data_frame",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/api-reference/tools/data-frame",
    "pathname": "/api-reference/tools/data-frame",
    "title": "Get Tabular Data from Object",
    "breadcrumb": [
      {
        "title": "API Reference",
        "pathname": "/api-reference"
      },
      {
        "title": "Tools",
        "pathname": "/api-reference/tools"
      }
    ],
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "page_position": 0,
    "api_type": "http",
    "api_definition_id": "c173bee9-1794-4364-93d9-780ed8d82ec7",
    "api_endpoint_id": "endpoint_tools._data_frame",
    "method": "GET",
    "endpoint_path": "/api/v0/tools/file/data-frame",
    "endpoint_path_alternates": [
      "/api/v0/tools/file/data-frame",
      "https://api.athenaintel.com/api/v0/tools/file/data-frame",
      "https://api.athenaintel.com/api/v0/tools/file/data-frame"
    ],
    "response_type": "json",
    "availability": "Beta",
    "environments": [
      {
        "id": "Production",
        "url": "https://api.athenaintel.com"
      }
    ],
    "default_environment_id": "Production",
    "keywords": [
      "endpoint",
      "api",
      "http",
      "rest",
      "openapi",
      "json",
      "ToolsDataFrameRequestColumnsItem",
      "FileFetchError",
      "DataFrameUnknownFormatError",
      "HTTPValidationError",
      "DataFrameParsingError"
    ],
    "type": "api-reference"
  },
  {
    "objectID": "test:test.com:c173bee9-1794-4364-93d9-780ed8d82ec7:endpoint_tools._raw_data",
    "org_id": "test",
    "domain": "test.com",
    "canonicalPathname": "/api-reference/tools/raw-data",
    "pathname": "/api-reference/tools/raw-data",
    "title": "Get Raw File Data from Object",
    "breadcrumb": [
      {
        "title": "API Reference",
        "pathname": "/api-reference"
      },
      {
        "title": "Tools",
        "pathname": "/api-reference/tools"
      }
    ],
    "visible_by": [
      "role/everyone"
    ],
    "authed": false,
    "page_position": 0,
    "api_type": "http",
    "api_definition_id": "c173bee9-1794-4364-93d9-780ed8d82ec7",
    "api_endpoint_id": "endpoint_tools._raw_data",
    "method": "GET",
    "endpoint_path": "/api/v0/tools/file/raw-data",
    "endpoint_path_alternates": [
      "/api/v0/tools/file/raw-data",
      "https://api.athenaintel.com/api/v0/tools/file/raw-data",
      "https://api.athenaintel.com/api/v0/tools/file/raw-data"
    ],
    "response_type": "file",
    "description": "Get the raw file data for given asset.",
    "availability": "Beta",
    "environments": [
      {
        "id": "Production",
        "url": "https://api.athenaintel.com"
      }
    ],
    "default_environment_id": "Production",
    "keywords": [
      "endpoint",
      "api",
      "http",
      "rest",
      "openapi",
      "file",
      "FileFetchError",
      "HTTPValidationError"
    ],
    "type": "api-reference"
  }
]