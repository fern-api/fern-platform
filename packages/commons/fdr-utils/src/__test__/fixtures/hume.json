{
  "baseUrl": {
    "domain": "dev.hume.ai"
  },
  "definition": {
    "config": {
      "navigation": {
        "tabs": [
          {
            "title": "Documentation",
            "icon": "fa-solid fa-home",
            "items": [
              {
                "type": "section",
                "title": "Introduction",
                "urlSlug": "introduction",
                "collapsed": false,
                "items": [
                  {
                    "type": "page",
                    "id": "docs/pages/documentation/introduction/welcome.mdx",
                    "title": "Welcome to Hume AI",
                    "urlSlug": "welcome-to-hume-ai",
                    "fullSlug": ["intro"]
                  },
                  {
                    "type": "page",
                    "id": "docs/pages/documentation/introduction/getting-your-api-key.mdx",
                    "title": "Getting your API key",
                    "urlSlug": "api-key"
                  },
                  {
                    "type": "page",
                    "id": "docs/pages/documentation/introduction/support.mdx",
                    "title": "Support",
                    "urlSlug": "support",
                    "fullSlug": ["support"]
                  }
                ],
                "skipUrlSlug": false
              },
              {
                "type": "section",
                "title": "Expression Measurement API",
                "urlSlug": "expression-measurement-api",
                "collapsed": false,
                "items": [
                  {
                    "type": "page",
                    "id": "docs/pages/documentation/expression-measurement-api/overview.mdx",
                    "title": "Overview",
                    "urlSlug": "overview"
                  },
                  {
                    "type": "page",
                    "id": "docs/pages/documentation/expression-measurement-api/rest.mdx",
                    "title": "Processing batches of media files",
                    "urlSlug": "rest"
                  },
                  {
                    "type": "page",
                    "id": "docs/pages/documentation/expression-measurement-api/websocket.mdx",
                    "title": "Real-time measurement streaming",
                    "urlSlug": "websocket"
                  },
                  {
                    "type": "page",
                    "id": "docs/pages/documentation/expression-measurement-api/faqs.mdx",
                    "title": "FAQs",
                    "urlSlug": "faqs"
                  }
                ],
                "skipUrlSlug": false
              },
              {
                "type": "section",
                "title": "Custom Models API",
                "urlSlug": "custom-models-api",
                "collapsed": false,
                "items": [
                  {
                    "type": "page",
                    "id": "docs/pages/documentation/custom-models-api/overview.mdx",
                    "title": "Overview",
                    "urlSlug": "overview"
                  },
                  {
                    "type": "page",
                    "id": "docs/pages/documentation/custom-models-api/creating-your-dataset.mdx",
                    "title": "Creating your dataset",
                    "urlSlug": "creating-your-dataset"
                  },
                  {
                    "type": "page",
                    "id": "docs/pages/documentation/custom-models-api/training-your-model.mdx",
                    "title": "Training a custom model",
                    "urlSlug": "training-a-custom-model"
                  },
                  {
                    "type": "page",
                    "id": "docs/pages/documentation/custom-models-api/evaluating-your-model.mdx",
                    "title": "Evaluating your custom model",
                    "urlSlug": "evaluating-a-custom-model"
                  },
                  {
                    "type": "page",
                    "id": "docs/pages/documentation/custom-models-api/faqs.mdx",
                    "title": "FAQs",
                    "urlSlug": "faqs"
                  }
                ],
                "skipUrlSlug": false
              },
              {
                "type": "section",
                "title": "Resources",
                "urlSlug": "resources",
                "collapsed": false,
                "items": [
                  {
                    "type": "link",
                    "title": "Pricing",
                    "url": "https://beta.hume.ai/pricing"
                  },
                  {
                    "type": "page",
                    "id": "docs/pages/documentation/resources/billing.mdx",
                    "title": "Billing",
                    "urlSlug": "billing"
                  },
                  {
                    "type": "page",
                    "id": "docs/pages/documentation/resources/errors.mdx",
                    "title": "Errors",
                    "urlSlug": "errors"
                  },
                  {
                    "type": "page",
                    "id": "docs/pages/documentation/resources/science-hume-ai.mdx",
                    "title": "About the science",
                    "urlSlug": "science"
                  },
                  {
                    "type": "page",
                    "id": "docs/pages/documentation/resources/use-case-guidelines.mdx",
                    "title": "Use case guidelines",
                    "urlSlug": "use-case-guidelines"
                  },
                  {
                    "type": "page",
                    "id": "docs/pages/documentation/resources/privacy.mdx",
                    "title": "Privacy",
                    "urlSlug": "privacy"
                  }
                ],
                "skipUrlSlug": false
              }
            ],
            "urlSlugOverride": "docs",
            "urlSlug": "docs"
          },
          {
            "title": "API Reference",
            "icon": "fa-solid fa-file-contract",
            "items": [
              {
                "type": "api",
                "title": "Expression Measurement API",
                "api": "f61ddd10-6b31-4dc9-898a-ad9d26a658c2",
                "showErrors": false,
                "urlSlug": "expression-measurement-api",
                "skipUrlSlug": false
              },
              {
                "type": "api",
                "title": "Custom Models API",
                "api": "70f6cdb5-e778-49dc-bd8a-db69632abffa",
                "showErrors": false,
                "urlSlug": "custom-models-api",
                "skipUrlSlug": false
              }
            ],
            "urlSlugOverride": "reference",
            "urlSlug": "reference"
          }
        ]
      },
      "logoHeight": 30,
      "logoHref": "./docs/pages/documentation/introduction/welcome.mdx",
      "colorsV3": {
        "type": "darkAndLight",
        "light": {
          "accentPrimary": {
            "r": 153,
            "g": 144,
            "b": 135,
            "a": 1
          },
          "logo": "fa4aa03c-c518-4afb-ae28-c75e41b43928",
          "background": {
            "type": "solid",
            "r": 255,
            "g": 244,
            "b": 232,
            "a": 1
          },
          "border": {
            "r": 229,
            "g": 218,
            "b": 206,
            "a": 1
          },
          "cardBackground": {
            "r": 255,
            "g": 249,
            "b": 242,
            "a": 1
          },
          "sidebarBackground": {
            "r": 255,
            "g": 249,
            "b": 242,
            "a": 1
          },
          "headerBackground": {
            "r": 255,
            "g": 249,
            "b": 242,
            "a": 1
          }
        },
        "dark": {
          "accentPrimary": {
            "r": 255,
            "g": 244,
            "b": 232,
            "a": 1
          },
          "logo": "0055843f-1ebf-4960-8607-57d8de0596ac",
          "background": {
            "type": "solid",
            "r": 53,
            "g": 53,
            "b": 53,
            "a": 1
          },
          "cardBackground": {
            "r": 35,
            "g": 35,
            "b": 35,
            "a": 1
          },
          "sidebarBackground": {
            "r": 35,
            "g": 35,
            "b": 35,
            "a": 1
          },
          "headerBackground": {
            "r": 35,
            "g": 35,
            "b": 35,
            "a": 1
          }
        }
      },
      "navbarLinks": [
        {
          "type": "secondary",
          "text": "Get support",
          "url": "/support"
        },
        {
          "type": "primary",
          "text": "Login",
          "url": "https://beta.hume.ai/log-in"
        }
      ],
      "title": "Hume API",
      "favicon": "81128cf8-ab76-4de4-8e4c-f97733f690ee",
      "typography": {
        "headingsFont": {
          "name": "Fellix",
          "fontFile": "ea3abb52-d863-4355-9bc7-59164ced123a"
        },
        "bodyFont": {
          "name": "Fellix",
          "fontFile": "c1065b9f-56c6-4881-a4a7-cf2945256bde"
        },
        "codeFont": {
          "name": "Fraktion",
          "fontFile": "d03f8d3b-3a53-4fd7-97ce-30d33aa0afbe"
        }
      },
      "typographyV2": {
        "headingsFont": {
          "type": "custom",
          "name": "Fellix",
          "variants": [
            {
              "fontFile": "ea3abb52-d863-4355-9bc7-59164ced123a",
              "weight": ["500"],
              "style": ["normal"]
            }
          ]
        },
        "bodyFont": {
          "type": "custom",
          "name": "Fellix",
          "variants": [
            {
              "fontFile": "c1065b9f-56c6-4881-a4a7-cf2945256bde",
              "weight": ["400"]
            },
            {
              "fontFile": "ea3abb52-d863-4355-9bc7-59164ced123a",
              "weight": ["500"]
            },
            {
              "fontFile": "2732d006-002e-4551-9f1e-4f7037fa50df",
              "weight": ["600"]
            }
          ]
        },
        "codeFont": {
          "type": "custom",
          "name": "Fraktion",
          "variants": [
            {
              "fontFile": "d03f8d3b-3a53-4fd7-97ce-30d33aa0afbe",
              "weight": ["400"],
              "style": ["normal"]
            },
            {
              "fontFile": "d43858b5-bcac-4605-88c4-51a54af5be9b",
              "weight": ["500", "600"],
              "style": ["normal"]
            }
          ]
        }
      },
      "layout": {
        "pageWidth": {
          "type": "full"
        },
        "contentWidth": {
          "type": "rem",
          "value": 40
        },
        "searchbarPlacement": "SIDEBAR",
        "tabsPlacement": "SIDEBAR",
        "contentAlignment": "CENTER",
        "headerPosition": "FIXED",
        "disableHeader": true
      },
      "js": {
        "files": []
      }
    },
    "apis": {
      "f61ddd10-6b31-4dc9-898a-ad9d26a658c2": {
        "id": "f61ddd10-6b31-4dc9-898a-ad9d26a658c2",
        "rootPackage": {
          "endpoints": [],
          "subpackages": ["subpackage_batch", "subpackage_stream"],
          "types": [
            "type_:Alternative",
            "type_:Bcp47Tag",
            "type_:BoundingBox",
            "type_:BurstPrediction",
            "type_:Classification",
            "type_:CompletedEmbeddingGeneration",
            "type_:CompletedInference",
            "type_:CompletedTlInference",
            "type_:CompletedTraining",
            "type_:CustomModelPrediction",
            "type_:CustomModelRequest",
            "type_:Dataset",
            "type_:DatasetId",
            "type_:DatasetVersionId",
            "type_:DescriptionsScore",
            "type_:Direction",
            "type_:EmbeddingGenerationBaseRequest",
            "type_:EmotionScore",
            "type_:Error",
            "type_:EvaluationArgs",
            "type_:Face",
            "type_:FacePrediction",
            "type_:FacemeshPrediction",
            "type_:FacsScore",
            "type_:Failed",
            "type_:File",
            "type_:Granularity",
            "type_:GroupedPredictionsBurstPrediction",
            "type_:GroupedPredictionsFacePrediction",
            "type_:GroupedPredictionsFacemeshPrediction",
            "type_:GroupedPredictionsLanguagePrediction",
            "type_:GroupedPredictionsNerPrediction",
            "type_:GroupedPredictionsProsodyPrediction",
            "type_:InProgress",
            "type_:InferenceBaseRequest",
            "type_:InferencePrediction",
            "type_:InferenceRequest",
            "type_:InferenceResults",
            "type_:InferenceSourcePredictResult",
            "type_:JobEmbeddingGeneration",
            "type_:JobInference",
            "type_:JobTlInference",
            "type_:JobTraining",
            "type_:JobId",
            "type_:Language",
            "type_:LanguagePrediction",
            "type_:Models",
            "type_:ModelsPredictions",
            "type_:Ner",
            "type_:NerPrediction",
            "type_:Null",
            "type_:PositionInterval",
            "type_:PredictionsOptionalNullBurstPrediction",
            "type_:PredictionsOptionalNullFacePrediction",
            "type_:PredictionsOptionalNullFacemeshPrediction",
            "type_:PredictionsOptionalTranscriptionMetadataLanguagePrediction",
            "type_:PredictionsOptionalTranscriptionMetadataNerPrediction",
            "type_:PredictionsOptionalTranscriptionMetadataProsodyPrediction",
            "type_:Prosody",
            "type_:ProsodyPrediction",
            "type_:Queued",
            "type_:RegistryFileDetail",
            "type_:Regression",
            "type_:SentimentScore",
            "type_:SortBy",
            "type_:Source",
            "type_:SourceFile",
            "type_:SourceTextSource",
            "type_:SourceUrl",
            "type_:Url",
            "type_:StateEmbeddingGeneration",
            "type_:StateEmbeddingGenerationCompletedEmbeddingGeneration",
            "type_:StateEmbeddingGenerationFailed",
            "type_:StateEmbeddingGenerationInProgress",
            "type_:StateEmbeddingGenerationQueued",
            "type_:StateInference",
            "type_:StateInferenceCompletedInference",
            "type_:StateInferenceFailed",
            "type_:StateInferenceInProgress",
            "type_:StateInferenceQueued",
            "type_:StateTlInference",
            "type_:StateTlInferenceCompletedTlInference",
            "type_:StateTlInferenceFailed",
            "type_:StateTlInferenceInProgress",
            "type_:StateTlInferenceQueued",
            "type_:StateTraining",
            "type_:StateTrainingCompletedTraining",
            "type_:StateTrainingFailed",
            "type_:StateTrainingInProgress",
            "type_:StateTrainingQueued",
            "type_:Status",
            "type_:TlInferencePrediction",
            "type_:TlInferenceResults",
            "type_:TlInferenceSourcePredictResult",
            "type_:Tag",
            "type_:Target",
            "type_:Task",
            "type_:TaskClassification",
            "type_:TaskRegression",
            "type_:TextSource",
            "type_:TimeInterval",
            "type_:TlInferenceBaseRequest",
            "type_:TlInferenceCustomModel",
            "type_:TlInferenceCustomModelId",
            "type_:TlInferenceCustomModelVersionId",
            "type_:ToxicityScore",
            "type_:TrainingBaseRequest",
            "type_:TrainingCustomModel",
            "type_:Transcription",
            "type_:TranscriptionMetadata",
            "type_:Type",
            "type_:Unconfigurable",
            "type_:UnionJob",
            "type_:UnionJobJobEmbeddingGeneration",
            "type_:UnionJobJobInference",
            "type_:UnionJobJobTlInference",
            "type_:UnionJobJobTraining",
            "type_:UnionPredictResult",
            "type_:ValidationArgs",
            "type_:When",
            "type_:Window",
            "type_:EmotionEmbeddingItem",
            "type_:EmotionEmbedding",
            "type_:TimeRange",
            "type_:TextPosition",
            "type_:SentimentItem",
            "type_:Sentiment",
            "type_:ToxicityItem",
            "type_:Toxicity"
          ],
          "webhooks": [],
          "websockets": []
        },
        "types": {
          "type_stream:StreamBurstJobDetails": {
            "description": "If the job_details flag was set in the request, details about the current streaming job will be returned in the response body.",
            "name": "StreamBurstJobDetails",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "ID of the current streaming job.",
                  "key": "job_id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_stream:StreamBurstBurstPredictionsItem": {
            "name": "StreamBurstBurstPredictionsItem",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "time",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:TimeRange"
                    }
                  }
                },
                {
                  "key": "emotions",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:EmotionEmbedding"
                    }
                  }
                }
              ]
            }
          },
          "type_stream:StreamBurstBurst": {
            "description": "Response for the vocal burst emotion model.",
            "name": "StreamBurstBurst",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "predictions",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "id",
                        "value": "type_stream:StreamBurstBurstPredictionsItem"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_stream:StreamBurstFacePredictionsItem": {
            "name": "StreamBurstFacePredictionsItem",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Frame number",
                  "key": "frame",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  }
                },
                {
                  "description": "Time in seconds when face detection occurred.",
                  "key": "time",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  }
                },
                {
                  "key": "bbox",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:BoundingBox"
                    }
                  }
                },
                {
                  "description": "The predicted probability that a detected face was actually a face.",
                  "key": "prob",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  }
                },
                {
                  "description": "Identifier for a face. Not that this defaults to `unknown` unless face identification is enabled in the face model configuration.",
                  "key": "face_id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "key": "emotions",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:EmotionEmbedding"
                    }
                  }
                },
                {
                  "key": "facs",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:EmotionEmbedding"
                    }
                  }
                },
                {
                  "key": "descriptions",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:EmotionEmbedding"
                    }
                  }
                }
              ]
            }
          },
          "type_stream:StreamBurstFace": {
            "description": "Response for the facial expression emotion model.",
            "name": "StreamBurstFace",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "predictions",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "id",
                        "value": "type_stream:StreamBurstFacePredictionsItem"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_stream:StreamBurstFacemeshPredictionsItem": {
            "name": "StreamBurstFacemeshPredictionsItem",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "emotions",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:EmotionEmbedding"
                    }
                  }
                }
              ]
            }
          },
          "type_stream:StreamBurstFacemesh": {
            "description": "Response for the facemesh emotion model.",
            "name": "StreamBurstFacemesh",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "predictions",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "id",
                        "value": "type_stream:StreamBurstFacemeshPredictionsItem"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_stream:StreamBurstLanguagePredictionsItem": {
            "name": "StreamBurstLanguagePredictionsItem",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "A segment of text (like a word or a sentence).",
                  "key": "text",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "key": "position",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:TextPosition"
                    }
                  }
                },
                {
                  "key": "emotions",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:EmotionEmbedding"
                    }
                  }
                },
                {
                  "key": "sentiment",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:Sentiment"
                    }
                  }
                },
                {
                  "key": "toxicity",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:Toxicity"
                    }
                  }
                }
              ]
            }
          },
          "type_stream:StreamBurstLanguage": {
            "description": "Response for the language emotion model.",
            "name": "StreamBurstLanguage",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "predictions",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "id",
                        "value": "type_stream:StreamBurstLanguagePredictionsItem"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_stream:StreamBurstProsodyPredictionsItem": {
            "name": "StreamBurstProsodyPredictionsItem",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "time",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:TimeRange"
                    }
                  }
                },
                {
                  "key": "emotions",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:EmotionEmbedding"
                    }
                  }
                }
              ]
            }
          },
          "type_stream:StreamBurstProsody": {
            "description": "Response for the speech prosody emotion model.",
            "name": "StreamBurstProsody",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "predictions",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "id",
                        "value": "type_stream:StreamBurstProsodyPredictionsItem"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_stream:StreamBurst": {
            "name": "StreamBurst",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "If a payload ID was passed in the request, the same payload ID will be sent back in the response body.",
                  "key": "payload_id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "If the job_details flag was set in the request, details about the current streaming job will be returned in the response body.",
                  "key": "job_details",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_stream:StreamBurstJobDetails"
                    }
                  }
                },
                {
                  "description": "Response for the vocal burst emotion model.",
                  "key": "burst",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_stream:StreamBurstBurst"
                    }
                  }
                },
                {
                  "description": "Response for the facial expression emotion model.",
                  "key": "face",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_stream:StreamBurstFace"
                    }
                  }
                },
                {
                  "description": "Response for the facemesh emotion model.",
                  "key": "facemesh",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_stream:StreamBurstFacemesh"
                    }
                  }
                },
                {
                  "description": "Response for the language emotion model.",
                  "key": "language",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_stream:StreamBurstLanguage"
                    }
                  }
                },
                {
                  "description": "Response for the speech prosody emotion model.",
                  "key": "prosody",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_stream:StreamBurstProsody"
                    }
                  }
                }
              ]
            }
          },
          "type_stream:StreamErrorJobDetails": {
            "description": "If the job_details flag was set in the request, details about the current streaming job will be returned in the response body.",
            "name": "StreamErrorJobDetails",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "ID of the current streaming job.",
                  "key": "job_id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_stream:StreamError": {
            "name": "StreamError",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Error message text.",
                  "key": "error",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "Unique identifier for the error.",
                  "key": "code",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "If a payload ID was passed in the request, the same payload ID will be sent back in the response body.",
                  "key": "payload_id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "If the job_details flag was set in the request, details about the current streaming job will be returned in the response body.",
                  "key": "job_details",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_stream:StreamErrorJobDetails"
                    }
                  }
                }
              ]
            }
          },
          "type_stream:StreamJobDetailsJobDetails": {
            "description": "If the job_details flag was set in the request, details about the current streaming job will be returned in the response body.",
            "name": "StreamJobDetailsJobDetails",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "ID of the current streaming job.",
                  "key": "job_id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_stream:StreamJobDetails": {
            "name": "StreamJobDetails",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Warning message text.",
                  "key": "warning",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "Unique identifier for the error.",
                  "key": "code",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "If a payload ID was passed in the request, the same payload ID will be sent back in the response body.",
                  "key": "payload_id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "If the job_details flag was set in the request, details about the current streaming job will be returned in the response body.",
                  "key": "job_details",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_stream:StreamJobDetailsJobDetails"
                    }
                  }
                }
              ]
            }
          },
          "type_stream:SubscribeEvent": {
            "name": "SubscribeEvent",
            "shape": {
              "type": "undiscriminatedUnion",
              "variants": [
                {
                  "type": {
                    "type": "id",
                    "value": "type_stream:StreamBurst"
                  },
                  "displayName": "Stream Burst"
                },
                {
                  "type": {
                    "type": "id",
                    "value": "type_stream:StreamError"
                  },
                  "displayName": "Stream Error"
                },
                {
                  "type": {
                    "type": "id",
                    "value": "type_stream:StreamJobDetails"
                  },
                  "displayName": "Stream Job Details"
                }
              ]
            }
          },
          "type_stream:StreamDataModelsFace": {
            "description": "Configuration for the facial expression emotion model.\n\nNote: Using the `reset_stream` parameter does not have any effect on face identification. A single face identifier cache is maintained over a full session whether `reset_stream` is used or not.",
            "name": "StreamDataModelsFace",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Configuration for FACS predictions. If missing or null, no FACS predictions will be generated.",
                  "key": "facs",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "map",
                      "keyType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      },
                      "valueType": {
                        "type": "unknown"
                      }
                    }
                  }
                },
                {
                  "description": "Configuration for Descriptions predictions. If missing or null, no Descriptions predictions will be generated.",
                  "key": "descriptions",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "map",
                      "keyType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      },
                      "valueType": {
                        "type": "unknown"
                      }
                    }
                  }
                },
                {
                  "description": "Whether to return identifiers for faces across frames. If true, unique identifiers will be assigned to face bounding boxes to differentiate different faces. If false, all faces will be tagged with an \"unknown\" ID.",
                  "key": "identify_faces",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean"
                      }
                    }
                  }
                },
                {
                  "description": "Number of frames per second to process. Other frames will be omitted from the response.",
                  "key": "fps_pred",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  }
                },
                {
                  "description": "Face detection probability threshold. Faces detected with a probability less than this threshold will be omitted from the response.",
                  "key": "prob_threshold",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  }
                },
                {
                  "description": "Minimum bounding box side length in pixels to treat as a face. Faces detected with a bounding box side length in pixels less than this threshold will be omitted from the response.",
                  "key": "min_face_size",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_stream:StreamDataModelsLanguage": {
            "description": "Configuration for the language emotion model.",
            "name": "StreamDataModelsLanguage",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Configuration for sentiment predictions. If missing or null, no sentiment predictions will be generated.",
                  "key": "sentiment",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "map",
                      "keyType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      },
                      "valueType": {
                        "type": "unknown"
                      }
                    }
                  }
                },
                {
                  "description": "Configuration for toxicity predictions. If missing or null, no toxicity predictions will be generated.",
                  "key": "toxicity",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "map",
                      "keyType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      },
                      "valueType": {
                        "type": "unknown"
                      }
                    }
                  }
                },
                {
                  "description": "The granularity at which to generate predictions. Values are `word`, `sentence`, `utterance`, or `passage`. To get a single prediction for the entire text of your streaming payload use `passage`. Default value is `word`.",
                  "key": "granularity",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_stream:StreamDataModels": {
            "description": "Configuration used to specify which models should be used and with what settings.",
            "name": "StreamDataModels",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Configuration for the vocal burst emotion model.\n\nNote: Model configuration is not currently available in streaming.\n\nPlease use the default configuration by passing an empty object `{}`.",
                  "key": "burst",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "map",
                      "keyType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      },
                      "valueType": {
                        "type": "unknown"
                      }
                    }
                  }
                },
                {
                  "description": "Configuration for the facial expression emotion model.\n\nNote: Using the `reset_stream` parameter does not have any effect on face identification. A single face identifier cache is maintained over a full session whether `reset_stream` is used or not.",
                  "key": "face",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_stream:StreamDataModelsFace"
                    }
                  }
                },
                {
                  "description": "Configuration for the facemesh emotion model.\n\nNote: Model configuration is not currently available in streaming.\n\nPlease use the default configuration by passing an empty object `{}`.",
                  "key": "facemesh",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "map",
                      "keyType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      },
                      "valueType": {
                        "type": "unknown"
                      }
                    }
                  }
                },
                {
                  "description": "Configuration for the language emotion model.",
                  "key": "language",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_stream:StreamDataModelsLanguage"
                    }
                  }
                },
                {
                  "description": "Configuration for the speech prosody emotion model.\n\nNote: Model configuration is not currently available in streaming.\n\nPlease use the default configuration by passing an empty object `{}`.",
                  "key": "prosody",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "map",
                      "keyType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      },
                      "valueType": {
                        "type": "unknown"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_stream:StreamData": {
            "name": "StreamData",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "data",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "Configuration used to specify which models should be used and with what settings.",
                  "key": "models",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_stream:StreamDataModels"
                    }
                  }
                },
                {
                  "description": "Length in milliseconds of streaming sliding window.\n\nExtending the length of this window will prepend media context from past payloads into the current payload.\n\nFor example, if on the first payload you send 500ms of data and on the second payload you send an additional 500ms of data, a window of at least 1000ms will allow the model to process all 1000ms of stream data.\n\nA window of 600ms would append the full 500ms of the second payload to the last 100ms of the first payload.\n\nNote: This feature is currently only supported for audio data and audio models. For other file types and models this parameter will be ignored.",
                  "key": "stream_window_ms",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  }
                },
                {
                  "description": "Whether to reset the streaming sliding window before processing the current payload.\n\nIf this parameter is set to `true` then past context will be deleted before processing the current payload.\n\nUse reset_stream when one audio file is done being processed and you do not want context to leak across files.",
                  "key": "reset_stream",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean"
                      }
                    }
                  }
                },
                {
                  "description": "Set to `true` to enable the data parameter to be parsed as raw text rather than base64 encoded bytes.\nThis parameter is useful if you want to send text to be processed by the language model, but it cannot be used with other file types like audio, image, or video.",
                  "key": "raw_text",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean"
                      }
                    }
                  }
                },
                {
                  "description": "Set to `true` to get details about the job.\n\nThis parameter can be set in the same payload as data or it can be set without data and models configuration to get the job details between payloads.\n\nThis parameter is useful to get the unique job ID.",
                  "key": "job_details",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean"
                      }
                    }
                  }
                },
                {
                  "description": "Pass an arbitrary string as the payload ID and get it back at the top level of the socket response.\n\nThis can be useful if you have multiple requests running asynchronously and want to disambiguate responses as they are received.",
                  "key": "payload_id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:Alternative": {
            "name": "Alternative",
            "shape": {
              "type": "alias",
              "value": {
                "type": "literal",
                "value": {
                  "type": "stringLiteral",
                  "value": "language_only"
                }
              }
            }
          },
          "type_:Bcp47Tag": {
            "name": "Bcp47Tag",
            "shape": {
              "type": "enum",
              "values": [
                {
                  "value": "zh"
                },
                {
                  "value": "da"
                },
                {
                  "value": "nl"
                },
                {
                  "value": "en"
                },
                {
                  "value": "en-AU"
                },
                {
                  "value": "en-IN"
                },
                {
                  "value": "en-NZ"
                },
                {
                  "value": "en-GB"
                },
                {
                  "value": "fr"
                },
                {
                  "value": "fr-CA"
                },
                {
                  "value": "de"
                },
                {
                  "value": "hi"
                },
                {
                  "value": "hi-Latn"
                },
                {
                  "value": "id"
                },
                {
                  "value": "it"
                },
                {
                  "value": "ja"
                },
                {
                  "value": "ko"
                },
                {
                  "value": "no"
                },
                {
                  "value": "pl"
                },
                {
                  "value": "pt"
                },
                {
                  "value": "pt-BR"
                },
                {
                  "value": "pt-PT"
                },
                {
                  "value": "ru"
                },
                {
                  "value": "es"
                },
                {
                  "value": "es-419"
                },
                {
                  "value": "sv"
                },
                {
                  "value": "ta"
                },
                {
                  "value": "tr"
                },
                {
                  "value": "uk"
                }
              ]
            }
          },
          "type_:BoundingBox": {
            "description": "A bounding box around a face.",
            "name": "BoundingBox",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "x-coordinate of bounding box top left corner.",
                  "key": "x",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  }
                },
                {
                  "description": "y-coordinate of bounding box top left corner.",
                  "key": "y",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  }
                },
                {
                  "description": "Bounding box width.",
                  "key": "w",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  }
                },
                {
                  "description": "Bounding box height.",
                  "key": "h",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:BurstPrediction": {
            "name": "BurstPrediction",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "time",
                  "valueType": {
                    "type": "id",
                    "value": "type_:TimeInterval"
                  }
                },
                {
                  "description": "A high-dimensional embedding in emotion space.",
                  "key": "emotions",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "id",
                      "value": "type_:EmotionScore"
                    }
                  }
                },
                {
                  "description": "Modality-specific descriptive features and their scores.",
                  "key": "descriptions",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "id",
                      "value": "type_:DescriptionsScore"
                    }
                  }
                }
              ]
            }
          },
          "type_:Classification": {
            "name": "Classification",
            "shape": {
              "type": "alias",
              "value": {
                "type": "map",
                "keyType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                },
                "valueType": {
                  "type": "unknown"
                }
              }
            }
          },
          "type_:CompletedEmbeddingGeneration": {
            "name": "CompletedEmbeddingGeneration",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "When this job was created (Unix timestamp in milliseconds).",
                  "key": "created_timestamp_ms",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                {
                  "description": "When this job started (Unix timestamp in milliseconds).",
                  "key": "started_timestamp_ms",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                {
                  "description": "When this job ended (Unix timestamp in milliseconds).",
                  "key": "ended_timestamp_ms",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                }
              ]
            }
          },
          "type_:CompletedInference": {
            "name": "CompletedInference",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "When this job was created (Unix timestamp in milliseconds).",
                  "key": "created_timestamp_ms",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                {
                  "description": "When this job started (Unix timestamp in milliseconds).",
                  "key": "started_timestamp_ms",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                {
                  "description": "When this job ended (Unix timestamp in milliseconds).",
                  "key": "ended_timestamp_ms",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                {
                  "description": "The number of predictions that were generated by this job.",
                  "key": "num_predictions",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                {
                  "description": "The number of errors that occurred while running this job.",
                  "key": "num_errors",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                }
              ]
            }
          },
          "type_:CompletedTlInference": {
            "name": "CompletedTlInference",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "When this job was created (Unix timestamp in milliseconds).",
                  "key": "created_timestamp_ms",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                {
                  "description": "When this job started (Unix timestamp in milliseconds).",
                  "key": "started_timestamp_ms",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                {
                  "description": "When this job ended (Unix timestamp in milliseconds).",
                  "key": "ended_timestamp_ms",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                {
                  "description": "The number of predictions that were generated by this job.",
                  "key": "num_predictions",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                {
                  "description": "The number of errors that occurred while running this job.",
                  "key": "num_errors",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                }
              ]
            }
          },
          "type_:CompletedTraining": {
            "name": "CompletedTraining",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "When this job was created (Unix timestamp in milliseconds).",
                  "key": "created_timestamp_ms",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                {
                  "description": "When this job started (Unix timestamp in milliseconds).",
                  "key": "started_timestamp_ms",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                {
                  "description": "When this job ended (Unix timestamp in milliseconds).",
                  "key": "ended_timestamp_ms",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                {
                  "key": "custom_model",
                  "valueType": {
                    "type": "id",
                    "value": "type_:TrainingCustomModel"
                  }
                },
                {
                  "key": "alternatives",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "map",
                      "keyType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      },
                      "valueType": {
                        "type": "id",
                        "value": "type_:TrainingCustomModel"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:CustomModelPrediction": {
            "name": "CustomModelPrediction",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "output",
                  "valueType": {
                    "type": "map",
                    "keyType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    },
                    "valueType": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  }
                },
                {
                  "key": "error",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "task_type",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              ]
            }
          },
          "type_:CustomModelRequest": {
            "name": "CustomModelRequest",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "name",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "description",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "key": "tags",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "id",
                        "value": "type_:Tag"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:Dataset": {
            "name": "Dataset",
            "shape": {
              "type": "undiscriminatedUnion",
              "variants": [
                {
                  "type": {
                    "type": "id",
                    "value": "type_:DatasetId"
                  },
                  "displayName": "Dataset Id"
                },
                {
                  "type": {
                    "type": "id",
                    "value": "type_:DatasetVersionId"
                  },
                  "displayName": "Dataset Version Id"
                }
              ]
            }
          },
          "type_:DatasetId": {
            "name": "DatasetId",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              ]
            }
          },
          "type_:DatasetVersionId": {
            "name": "DatasetVersionId",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "version_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              ]
            }
          },
          "type_:DescriptionsScore": {
            "name": "DescriptionsScore",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Name of the descriptive feature being expressed.",
                  "key": "name",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "Embedding value for the descriptive feature being expressed.",
                  "key": "score",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              ]
            }
          },
          "type_:Direction": {
            "name": "Direction",
            "shape": {
              "type": "enum",
              "values": [
                {
                  "value": "asc"
                },
                {
                  "value": "desc"
                }
              ]
            }
          },
          "type_:EmbeddingGenerationBaseRequest": {
            "name": "EmbeddingGenerationBaseRequest",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "File ID and File URL pairs for an asset registry file",
                  "key": "registry_file_details",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "id",
                        "value": "type_:RegistryFileDetail"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:EmotionScore": {
            "name": "EmotionScore",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Name of the emotion being expressed.",
                  "key": "name",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "Embedding value for the emotion being expressed.",
                  "key": "score",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "double"
                    }
                  }
                }
              ]
            }
          },
          "type_:Error": {
            "name": "Error",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "An error message.",
                  "key": "message",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "A file path relative to the top level source URL or file.",
                  "key": "file",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              ]
            }
          },
          "type_:EvaluationArgs": {
            "name": "EvaluationArgs",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "validation",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:ValidationArgs"
                    }
                  }
                }
              ]
            }
          },
          "type_:Face": {
            "name": "Face",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Number of frames per second to process. Other frames will be omitted from the response. Set to `0` to process every frame.",
                  "key": "fps_pred",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  }
                },
                {
                  "description": "Face detection probability threshold. Faces detected with a probability less than this threshold will be omitted from the response.",
                  "key": "prob_threshold",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  }
                },
                {
                  "description": "Whether to return identifiers for faces across frames. If `true`, unique identifiers will be assigned to face bounding boxes to differentiate different faces. If `false`, all faces will be tagged with an `unknown` ID.",
                  "key": "identify_faces",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean"
                      }
                    }
                  }
                },
                {
                  "description": "Minimum bounding box side length in pixels to treat as a face. Faces detected with a bounding box side length in pixels less than this threshold will be omitted from the response.",
                  "key": "min_face_size",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                },
                {
                  "key": "facs",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:Unconfigurable"
                    }
                  }
                },
                {
                  "key": "descriptions",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:Unconfigurable"
                    }
                  }
                },
                {
                  "description": "Whether to extract and save the detected faces in the artifacts zip created by each job.",
                  "key": "save_faces",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:FacePrediction": {
            "name": "FacePrediction",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Frame number",
                  "key": "frame",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                {
                  "description": "Time in seconds when face detection occurred.",
                  "key": "time",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "double"
                    }
                  }
                },
                {
                  "description": "The predicted probability that a detected face was actually a face.",
                  "key": "prob",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "double"
                    }
                  }
                },
                {
                  "key": "box",
                  "valueType": {
                    "type": "id",
                    "value": "type_:BoundingBox"
                  }
                },
                {
                  "description": "A high-dimensional embedding in emotion space.",
                  "key": "emotions",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "id",
                      "value": "type_:EmotionScore"
                    }
                  }
                },
                {
                  "description": "FACS 2.0 features and their scores.",
                  "key": "facs",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "id",
                        "value": "type_:FacsScore"
                      }
                    }
                  }
                },
                {
                  "description": "Modality-specific descriptive features and their scores.",
                  "key": "descriptions",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "id",
                        "value": "type_:DescriptionsScore"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:FacemeshPrediction": {
            "name": "FacemeshPrediction",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "A high-dimensional embedding in emotion space.",
                  "key": "emotions",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "id",
                      "value": "type_:EmotionScore"
                    }
                  }
                }
              ]
            }
          },
          "type_:FacsScore": {
            "name": "FacsScore",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Name of the FACS 2.0 feature being expressed.",
                  "key": "name",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "Embedding value for the FACS 2.0 feature being expressed.",
                  "key": "score",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              ]
            }
          },
          "type_:Failed": {
            "name": "Failed",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "When this job was created (Unix timestamp in milliseconds).",
                  "key": "created_timestamp_ms",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                {
                  "description": "When this job started (Unix timestamp in milliseconds).",
                  "key": "started_timestamp_ms",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                {
                  "description": "When this job ended (Unix timestamp in milliseconds).",
                  "key": "ended_timestamp_ms",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                {
                  "description": "An error message.",
                  "key": "message",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              ]
            }
          },
          "type_:File": {
            "name": "File",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The name of the file.",
                  "key": "filename",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "The content type of the file.",
                  "key": "content_type",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "The MD5 checksum of the file.",
                  "key": "md5sum",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              ]
            }
          },
          "type_:Granularity": {
            "description": "The granularity at which to generate predictions. `utterance` corresponds to a natural pause or break in conversation, while `conversational_turn` corresponds to a change in speaker.",
            "name": "Granularity",
            "shape": {
              "type": "enum",
              "values": [
                {
                  "value": "word"
                },
                {
                  "value": "sentence"
                },
                {
                  "value": "utterance"
                },
                {
                  "value": "conversational_turn"
                }
              ]
            }
          },
          "type_:GroupedPredictionsBurstPrediction": {
            "name": "GroupedPredictionsBurstPrediction",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "An automatically generated label to identify individuals in your media file. Will be `unknown` if you have chosen to disable identification, or if the model is unable to distinguish between individuals.",
                  "key": "id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "predictions",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "id",
                      "value": "type_:BurstPrediction"
                    }
                  }
                }
              ]
            }
          },
          "type_:GroupedPredictionsFacePrediction": {
            "name": "GroupedPredictionsFacePrediction",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "An automatically generated label to identify individuals in your media file. Will be `unknown` if you have chosen to disable identification, or if the model is unable to distinguish between individuals.",
                  "key": "id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "predictions",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "id",
                      "value": "type_:FacePrediction"
                    }
                  }
                }
              ]
            }
          },
          "type_:GroupedPredictionsFacemeshPrediction": {
            "name": "GroupedPredictionsFacemeshPrediction",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "An automatically generated label to identify individuals in your media file. Will be `unknown` if you have chosen to disable identification, or if the model is unable to distinguish between individuals.",
                  "key": "id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "predictions",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "id",
                      "value": "type_:FacemeshPrediction"
                    }
                  }
                }
              ]
            }
          },
          "type_:GroupedPredictionsLanguagePrediction": {
            "name": "GroupedPredictionsLanguagePrediction",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "An automatically generated label to identify individuals in your media file. Will be `unknown` if you have chosen to disable identification, or if the model is unable to distinguish between individuals.",
                  "key": "id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "predictions",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "id",
                      "value": "type_:LanguagePrediction"
                    }
                  }
                }
              ]
            }
          },
          "type_:GroupedPredictionsNerPrediction": {
            "name": "GroupedPredictionsNerPrediction",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "An automatically generated label to identify individuals in your media file. Will be `unknown` if you have chosen to disable identification, or if the model is unable to distinguish between individuals.",
                  "key": "id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "predictions",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "id",
                      "value": "type_:NerPrediction"
                    }
                  }
                }
              ]
            }
          },
          "type_:GroupedPredictionsProsodyPrediction": {
            "name": "GroupedPredictionsProsodyPrediction",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "An automatically generated label to identify individuals in your media file. Will be `unknown` if you have chosen to disable identification, or if the model is unable to distinguish between individuals.",
                  "key": "id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "predictions",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "id",
                      "value": "type_:ProsodyPrediction"
                    }
                  }
                }
              ]
            }
          },
          "type_:InProgress": {
            "name": "InProgress",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "When this job was created (Unix timestamp in milliseconds).",
                  "key": "created_timestamp_ms",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                {
                  "description": "When this job started (Unix timestamp in milliseconds).",
                  "key": "started_timestamp_ms",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                }
              ]
            }
          },
          "type_:InferenceBaseRequest": {
            "name": "InferenceBaseRequest",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "models",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:Models"
                    }
                  }
                },
                {
                  "key": "transcription",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:Transcription"
                    }
                  }
                },
                {
                  "description": "URLs to the media files to be processed. Each must be a valid public URL to a media file (see recommended input filetypes) or an archive (`.zip`, `.tar.gz`, `.tar.bz2`, `.tar.xz`) of media files.\n\nIf you wish to supply more than 100 URLs, consider providing them as an archive (`.zip`, `.tar.gz`, `.tar.bz2`, `.tar.xz`).",
                  "key": "urls",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                {
                  "description": "List of File IDs corresponding to the files in the asset registry.",
                  "key": "registry_files",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                {
                  "description": "Text to supply directly to our language and NER models.",
                  "key": "text",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                {
                  "description": "If provided, a `POST` request will be made to the URL with the generated predictions on completion or the error message on failure.",
                  "key": "callback_url",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "Whether to send an email notification to the user upon job completion/failure.",
                  "key": "notify",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:InferencePrediction": {
            "name": "InferencePrediction",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "A file path relative to the top level source URL or file.",
                  "key": "file",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "models",
                  "valueType": {
                    "type": "id",
                    "value": "type_:ModelsPredictions"
                  }
                }
              ]
            }
          },
          "type_:InferenceRequest": {
            "name": "InferenceRequest",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "models",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:Models"
                    }
                  }
                },
                {
                  "key": "transcription",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:Transcription"
                    }
                  }
                },
                {
                  "description": "URLs to the media files to be processed. Each must be a valid public URL to a media file (see recommended input filetypes) or an archive (`.zip`, `.tar.gz`, `.tar.bz2`, `.tar.xz`) of media files.\n\nIf you wish to supply more than 100 URLs, consider providing them as an archive (`.zip`, `.tar.gz`, `.tar.bz2`, `.tar.xz`).",
                  "key": "urls",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                {
                  "description": "List of File IDs corresponding to the files in the asset registry.",
                  "key": "registry_files",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                {
                  "description": "Text to supply directly to our language and NER models.",
                  "key": "text",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                {
                  "description": "If provided, a `POST` request will be made to the URL with the generated predictions on completion or the error message on failure.",
                  "key": "callback_url",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "Whether to send an email notification to the user upon job completion/failure.",
                  "key": "notify",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean"
                      }
                    }
                  }
                },
                {
                  "key": "files",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "id",
                      "value": "type_:File"
                    }
                  }
                }
              ]
            }
          },
          "type_:InferenceResults": {
            "name": "InferenceResults",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "predictions",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "id",
                      "value": "type_:InferencePrediction"
                    }
                  }
                },
                {
                  "key": "errors",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "id",
                      "value": "type_:Error"
                    }
                  }
                }
              ]
            }
          },
          "type_:InferenceSourcePredictResult": {
            "name": "InferenceSourcePredictResult",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "source",
                  "valueType": {
                    "type": "id",
                    "value": "type_:Source"
                  }
                },
                {
                  "key": "results",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:InferenceResults"
                    }
                  }
                },
                {
                  "description": "An error message.",
                  "key": "error",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:JobEmbeddingGeneration": {
            "name": "JobEmbeddingGeneration",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The ID associated with this job.",
                  "key": "job_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "user_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "request",
                  "valueType": {
                    "type": "id",
                    "value": "type_:EmbeddingGenerationBaseRequest"
                  }
                },
                {
                  "key": "state",
                  "valueType": {
                    "type": "id",
                    "value": "type_:StateEmbeddingGeneration"
                  }
                }
              ]
            }
          },
          "type_:JobInference": {
            "name": "JobInference",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The ID associated with this job.",
                  "key": "job_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "user_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "request",
                  "valueType": {
                    "type": "id",
                    "value": "type_:InferenceRequest"
                  }
                },
                {
                  "key": "state",
                  "valueType": {
                    "type": "id",
                    "value": "type_:StateInference"
                  }
                }
              ]
            }
          },
          "type_:JobTlInference": {
            "name": "JobTlInference",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The ID associated with this job.",
                  "key": "job_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "user_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "request",
                  "valueType": {
                    "type": "id",
                    "value": "type_:TlInferenceBaseRequest"
                  }
                },
                {
                  "key": "state",
                  "valueType": {
                    "type": "id",
                    "value": "type_:StateTlInference"
                  }
                }
              ]
            }
          },
          "type_:JobTraining": {
            "name": "JobTraining",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The ID associated with this job.",
                  "key": "job_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "user_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "request",
                  "valueType": {
                    "type": "id",
                    "value": "type_:TrainingBaseRequest"
                  }
                },
                {
                  "key": "state",
                  "valueType": {
                    "type": "id",
                    "value": "type_:StateTraining"
                  }
                }
              ]
            }
          },
          "type_:JobId": {
            "name": "JobId",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The ID of the started job.",
                  "key": "job_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              ]
            }
          },
          "type_:Language": {
            "name": "Language",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "granularity",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:Granularity"
                    }
                  }
                },
                {
                  "key": "sentiment",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:Unconfigurable"
                    }
                  }
                },
                {
                  "key": "toxicity",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:Unconfigurable"
                    }
                  }
                },
                {
                  "description": "Whether to return identifiers for speakers over time. If `true`, unique identifiers will be assigned to spoken words to differentiate different speakers. If `false`, all speakers will be tagged with an `unknown` ID.",
                  "key": "identify_speakers",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:LanguagePrediction": {
            "name": "LanguagePrediction",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "A segment of text (like a word or a sentence).",
                  "key": "text",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "position",
                  "valueType": {
                    "type": "id",
                    "value": "type_:PositionInterval"
                  }
                },
                {
                  "key": "time",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:TimeInterval"
                    }
                  }
                },
                {
                  "description": "Value between `0.0` and `1.0` that indicates our transcription model's relative confidence in this text.",
                  "key": "confidence",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  }
                },
                {
                  "description": "Value between `0.0` and `1.0` that indicates our transcription model's relative confidence that this text was spoken by this speaker.",
                  "key": "speaker_confidence",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  }
                },
                {
                  "description": "A high-dimensional embedding in emotion space.",
                  "key": "emotions",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "id",
                      "value": "type_:EmotionScore"
                    }
                  }
                },
                {
                  "description": "Sentiment predictions returned as a distribution. This model predicts the probability that a given text could be interpreted as having each sentiment level from `1` (negative) to `9` (positive).\n\nCompared to returning one estimate of sentiment, this enables a more nuanced analysis of a text's meaning. For example, a text with very neutral sentiment would have an average rating of `5`. But also a text that could be interpreted as having very positive sentiment or very negative sentiment would also have an average rating of `5`. The average sentiment is less informative than the distribution over sentiment, so this API returns a value for each sentiment level.",
                  "key": "sentiment",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "id",
                        "value": "type_:SentimentScore"
                      }
                    }
                  }
                },
                {
                  "description": "Toxicity predictions returned as probabilities that the text can be classified into the following categories: `toxic`, `severe_toxic`, `obscene`, `threat`, `insult`, and `identity_hate`.",
                  "key": "toxicity",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "id",
                        "value": "type_:ToxicityScore"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:Models": {
            "name": "Models",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "face",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:Face"
                    }
                  }
                },
                {
                  "key": "burst",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:Unconfigurable"
                    }
                  }
                },
                {
                  "key": "prosody",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:Prosody"
                    }
                  }
                },
                {
                  "key": "language",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:Language"
                    }
                  }
                },
                {
                  "key": "ner",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:Ner"
                    }
                  }
                },
                {
                  "key": "facemesh",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:Unconfigurable"
                    }
                  }
                }
              ]
            }
          },
          "type_:ModelsPredictions": {
            "name": "ModelsPredictions",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "face",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:PredictionsOptionalNullFacePrediction"
                    }
                  }
                },
                {
                  "key": "burst",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:PredictionsOptionalNullBurstPrediction"
                    }
                  }
                },
                {
                  "key": "prosody",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:PredictionsOptionalTranscriptionMetadataProsodyPrediction"
                    }
                  }
                },
                {
                  "key": "language",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:PredictionsOptionalTranscriptionMetadataLanguagePrediction"
                    }
                  }
                },
                {
                  "key": "ner",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:PredictionsOptionalTranscriptionMetadataNerPrediction"
                    }
                  }
                },
                {
                  "key": "facemesh",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:PredictionsOptionalNullFacemeshPrediction"
                    }
                  }
                }
              ]
            }
          },
          "type_:Ner": {
            "name": "Ner",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Whether to return identifiers for speakers over time. If `true`, unique identifiers will be assigned to spoken words to differentiate different speakers. If `false`, all speakers will be tagged with an `unknown` ID.",
                  "key": "identify_speakers",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:NerPrediction": {
            "name": "NerPrediction",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The recognized topic or entity.",
                  "key": "entity",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "position",
                  "valueType": {
                    "type": "id",
                    "value": "type_:PositionInterval"
                  }
                },
                {
                  "description": "Our NER model's relative confidence in the recognized topic or entity.",
                  "key": "entity_confidence",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "double"
                    }
                  }
                },
                {
                  "description": "A measure of how often the entity is linked to by other entities.",
                  "key": "support",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "double"
                    }
                  }
                },
                {
                  "description": "A URL which provides more information about the recognized topic or entity.",
                  "key": "uri",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "The specific word to which the emotion predictions are linked.",
                  "key": "link_word",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "time",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:TimeInterval"
                    }
                  }
                },
                {
                  "description": "Value between `0.0` and `1.0` that indicates our transcription model's relative confidence in this text.",
                  "key": "confidence",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  }
                },
                {
                  "description": "Value between `0.0` and `1.0` that indicates our transcription model's relative confidence that this text was spoken by this speaker.",
                  "key": "speaker_confidence",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  }
                },
                {
                  "description": "A high-dimensional embedding in emotion space.",
                  "key": "emotions",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "id",
                      "value": "type_:EmotionScore"
                    }
                  }
                }
              ]
            }
          },
          "type_:Null": {
            "description": "No associated metadata for this model. Value will be `null`.",
            "name": "Null",
            "shape": {
              "type": "alias",
              "value": {
                "type": "map",
                "keyType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                },
                "valueType": {
                  "type": "unknown"
                }
              }
            }
          },
          "type_:PositionInterval": {
            "description": "Position of a segment of text within a larger document, measured in characters. Uses zero-based indexing. The beginning index is inclusive and the end index is exclusive.",
            "name": "PositionInterval",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The index of the first character in the text segment, inclusive.",
                  "key": "begin",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                {
                  "description": "The index of the last character in the text segment, exclusive.",
                  "key": "end",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                }
              ]
            }
          },
          "type_:PredictionsOptionalNullBurstPrediction": {
            "name": "PredictionsOptionalNullBurstPrediction",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "metadata",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:Null"
                    }
                  }
                },
                {
                  "key": "grouped_predictions",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "id",
                      "value": "type_:GroupedPredictionsBurstPrediction"
                    }
                  }
                }
              ]
            }
          },
          "type_:PredictionsOptionalNullFacePrediction": {
            "name": "PredictionsOptionalNullFacePrediction",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "metadata",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:Null"
                    }
                  }
                },
                {
                  "key": "grouped_predictions",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "id",
                      "value": "type_:GroupedPredictionsFacePrediction"
                    }
                  }
                }
              ]
            }
          },
          "type_:PredictionsOptionalNullFacemeshPrediction": {
            "name": "PredictionsOptionalNullFacemeshPrediction",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "metadata",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:Null"
                    }
                  }
                },
                {
                  "key": "grouped_predictions",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "id",
                      "value": "type_:GroupedPredictionsFacemeshPrediction"
                    }
                  }
                }
              ]
            }
          },
          "type_:PredictionsOptionalTranscriptionMetadataLanguagePrediction": {
            "name": "PredictionsOptionalTranscriptionMetadataLanguagePrediction",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "metadata",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:TranscriptionMetadata"
                    }
                  }
                },
                {
                  "key": "grouped_predictions",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "id",
                      "value": "type_:GroupedPredictionsLanguagePrediction"
                    }
                  }
                }
              ]
            }
          },
          "type_:PredictionsOptionalTranscriptionMetadataNerPrediction": {
            "name": "PredictionsOptionalTranscriptionMetadataNerPrediction",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "metadata",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:TranscriptionMetadata"
                    }
                  }
                },
                {
                  "key": "grouped_predictions",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "id",
                      "value": "type_:GroupedPredictionsNerPrediction"
                    }
                  }
                }
              ]
            }
          },
          "type_:PredictionsOptionalTranscriptionMetadataProsodyPrediction": {
            "name": "PredictionsOptionalTranscriptionMetadataProsodyPrediction",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "metadata",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:TranscriptionMetadata"
                    }
                  }
                },
                {
                  "key": "grouped_predictions",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "id",
                      "value": "type_:GroupedPredictionsProsodyPrediction"
                    }
                  }
                }
              ]
            }
          },
          "type_:Prosody": {
            "name": "Prosody",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "granularity",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:Granularity"
                    }
                  }
                },
                {
                  "key": "window",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:Window"
                    }
                  }
                },
                {
                  "description": "Whether to return identifiers for speakers over time. If `true`, unique identifiers will be assigned to spoken words to differentiate different speakers. If `false`, all speakers will be tagged with an `unknown` ID.",
                  "key": "identify_speakers",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:ProsodyPrediction": {
            "name": "ProsodyPrediction",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "A segment of text (like a word or a sentence).",
                  "key": "text",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "key": "time",
                  "valueType": {
                    "type": "id",
                    "value": "type_:TimeInterval"
                  }
                },
                {
                  "description": "Value between `0.0` and `1.0` that indicates our transcription model's relative confidence in this text.",
                  "key": "confidence",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  }
                },
                {
                  "description": "Value between `0.0` and `1.0` that indicates our transcription model's relative confidence that this text was spoken by this speaker.",
                  "key": "speaker_confidence",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  }
                },
                {
                  "description": "A high-dimensional embedding in emotion space.",
                  "key": "emotions",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "id",
                      "value": "type_:EmotionScore"
                    }
                  }
                }
              ]
            }
          },
          "type_:Queued": {
            "name": "Queued",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "When this job was created (Unix timestamp in milliseconds).",
                  "key": "created_timestamp_ms",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                }
              ]
            }
          },
          "type_:RegistryFileDetail": {
            "name": "RegistryFileDetail",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "File ID in the Asset Registry",
                  "key": "file_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "URL to the file in the Asset Registry",
                  "key": "file_url",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              ]
            }
          },
          "type_:Regression": {
            "name": "Regression",
            "shape": {
              "type": "alias",
              "value": {
                "type": "map",
                "keyType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                },
                "valueType": {
                  "type": "unknown"
                }
              }
            }
          },
          "type_:SentimentScore": {
            "name": "SentimentScore",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Level of sentiment, ranging from `1` (negative) to `9` (positive)",
                  "key": "name",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "Prediction for this level of sentiment",
                  "key": "score",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              ]
            }
          },
          "type_:SortBy": {
            "name": "SortBy",
            "shape": {
              "type": "enum",
              "values": [
                {
                  "value": "created"
                },
                {
                  "value": "started"
                },
                {
                  "value": "ended"
                }
              ]
            }
          },
          "type_:Source": {
            "name": "Source",
            "shape": {
              "type": "discriminatedUnion",
              "discriminant": "type",
              "variants": [
                {
                  "discriminantValue": "url",
                  "additionalProperties": {
                    "extends": ["type_:SourceUrl"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "file",
                  "additionalProperties": {
                    "extends": ["type_:SourceFile"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "text",
                  "additionalProperties": {
                    "extends": ["type_:SourceTextSource"],
                    "properties": []
                  }
                }
              ]
            }
          },
          "type_:SourceFile": {
            "name": "SourceFile",
            "shape": {
              "type": "object",
              "extends": ["type_:File"],
              "properties": []
            }
          },
          "type_:SourceTextSource": {
            "name": "SourceTextSource",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": []
            }
          },
          "type_:SourceUrl": {
            "name": "SourceUrl",
            "shape": {
              "type": "object",
              "extends": ["type_:Url"],
              "properties": []
            }
          },
          "type_:Url": {
            "name": "Url",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The URL of the source media file.",
                  "key": "url",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              ]
            }
          },
          "type_:StateEmbeddingGeneration": {
            "name": "StateEmbeddingGeneration",
            "shape": {
              "type": "discriminatedUnion",
              "discriminant": "status",
              "variants": [
                {
                  "discriminantValue": "QUEUED",
                  "additionalProperties": {
                    "extends": ["type_:StateEmbeddingGenerationQueued"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "IN_PROGRESS",
                  "additionalProperties": {
                    "extends": ["type_:StateEmbeddingGenerationInProgress"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "COMPLETED",
                  "additionalProperties": {
                    "extends": ["type_:StateEmbeddingGenerationCompletedEmbeddingGeneration"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "FAILED",
                  "additionalProperties": {
                    "extends": ["type_:StateEmbeddingGenerationFailed"],
                    "properties": []
                  }
                }
              ]
            }
          },
          "type_:StateEmbeddingGenerationCompletedEmbeddingGeneration": {
            "name": "StateEmbeddingGenerationCompletedEmbeddingGeneration",
            "shape": {
              "type": "object",
              "extends": ["type_:CompletedEmbeddingGeneration"],
              "properties": []
            }
          },
          "type_:StateEmbeddingGenerationFailed": {
            "name": "StateEmbeddingGenerationFailed",
            "shape": {
              "type": "object",
              "extends": ["type_:Failed"],
              "properties": []
            }
          },
          "type_:StateEmbeddingGenerationInProgress": {
            "name": "StateEmbeddingGenerationInProgress",
            "shape": {
              "type": "object",
              "extends": ["type_:InProgress"],
              "properties": []
            }
          },
          "type_:StateEmbeddingGenerationQueued": {
            "name": "StateEmbeddingGenerationQueued",
            "shape": {
              "type": "object",
              "extends": ["type_:Queued"],
              "properties": []
            }
          },
          "type_:StateInference": {
            "name": "StateInference",
            "shape": {
              "type": "discriminatedUnion",
              "discriminant": "status",
              "variants": [
                {
                  "discriminantValue": "QUEUED",
                  "additionalProperties": {
                    "extends": ["type_:StateInferenceQueued"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "IN_PROGRESS",
                  "additionalProperties": {
                    "extends": ["type_:StateInferenceInProgress"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "COMPLETED",
                  "additionalProperties": {
                    "extends": ["type_:StateInferenceCompletedInference"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "FAILED",
                  "additionalProperties": {
                    "extends": ["type_:StateInferenceFailed"],
                    "properties": []
                  }
                }
              ]
            }
          },
          "type_:StateInferenceCompletedInference": {
            "name": "StateInferenceCompletedInference",
            "shape": {
              "type": "object",
              "extends": ["type_:CompletedInference"],
              "properties": []
            }
          },
          "type_:StateInferenceFailed": {
            "name": "StateInferenceFailed",
            "shape": {
              "type": "object",
              "extends": ["type_:Failed"],
              "properties": []
            }
          },
          "type_:StateInferenceInProgress": {
            "name": "StateInferenceInProgress",
            "shape": {
              "type": "object",
              "extends": ["type_:InProgress"],
              "properties": []
            }
          },
          "type_:StateInferenceQueued": {
            "name": "StateInferenceQueued",
            "shape": {
              "type": "object",
              "extends": ["type_:Queued"],
              "properties": []
            }
          },
          "type_:StateTlInference": {
            "name": "StateTlInference",
            "shape": {
              "type": "discriminatedUnion",
              "discriminant": "status",
              "variants": [
                {
                  "discriminantValue": "QUEUED",
                  "additionalProperties": {
                    "extends": ["type_:StateTlInferenceQueued"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "IN_PROGRESS",
                  "additionalProperties": {
                    "extends": ["type_:StateTlInferenceInProgress"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "COMPLETED",
                  "additionalProperties": {
                    "extends": ["type_:StateTlInferenceCompletedTlInference"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "FAILED",
                  "additionalProperties": {
                    "extends": ["type_:StateTlInferenceFailed"],
                    "properties": []
                  }
                }
              ]
            }
          },
          "type_:StateTlInferenceCompletedTlInference": {
            "name": "StateTlInferenceCompletedTlInference",
            "shape": {
              "type": "object",
              "extends": ["type_:CompletedTlInference"],
              "properties": []
            }
          },
          "type_:StateTlInferenceFailed": {
            "name": "StateTlInferenceFailed",
            "shape": {
              "type": "object",
              "extends": ["type_:Failed"],
              "properties": []
            }
          },
          "type_:StateTlInferenceInProgress": {
            "name": "StateTlInferenceInProgress",
            "shape": {
              "type": "object",
              "extends": ["type_:InProgress"],
              "properties": []
            }
          },
          "type_:StateTlInferenceQueued": {
            "name": "StateTlInferenceQueued",
            "shape": {
              "type": "object",
              "extends": ["type_:Queued"],
              "properties": []
            }
          },
          "type_:StateTraining": {
            "name": "StateTraining",
            "shape": {
              "type": "discriminatedUnion",
              "discriminant": "status",
              "variants": [
                {
                  "discriminantValue": "QUEUED",
                  "additionalProperties": {
                    "extends": ["type_:StateTrainingQueued"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "IN_PROGRESS",
                  "additionalProperties": {
                    "extends": ["type_:StateTrainingInProgress"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "COMPLETED",
                  "additionalProperties": {
                    "extends": ["type_:StateTrainingCompletedTraining"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "FAILED",
                  "additionalProperties": {
                    "extends": ["type_:StateTrainingFailed"],
                    "properties": []
                  }
                }
              ]
            }
          },
          "type_:StateTrainingCompletedTraining": {
            "name": "StateTrainingCompletedTraining",
            "shape": {
              "type": "object",
              "extends": ["type_:CompletedTraining"],
              "properties": []
            }
          },
          "type_:StateTrainingFailed": {
            "name": "StateTrainingFailed",
            "shape": {
              "type": "object",
              "extends": ["type_:Failed"],
              "properties": []
            }
          },
          "type_:StateTrainingInProgress": {
            "name": "StateTrainingInProgress",
            "shape": {
              "type": "object",
              "extends": ["type_:InProgress"],
              "properties": []
            }
          },
          "type_:StateTrainingQueued": {
            "name": "StateTrainingQueued",
            "shape": {
              "type": "object",
              "extends": ["type_:Queued"],
              "properties": []
            }
          },
          "type_:Status": {
            "name": "Status",
            "shape": {
              "type": "enum",
              "values": [
                {
                  "value": "QUEUED"
                },
                {
                  "value": "IN_PROGRESS"
                },
                {
                  "value": "COMPLETED"
                },
                {
                  "value": "FAILED"
                }
              ]
            }
          },
          "type_:TlInferencePrediction": {
            "name": "TlInferencePrediction",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "A file path relative to the top level source URL or file.",
                  "key": "file",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "file_type",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "custom_models",
                  "valueType": {
                    "type": "map",
                    "keyType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    },
                    "valueType": {
                      "type": "id",
                      "value": "type_:CustomModelPrediction"
                    }
                  }
                }
              ]
            }
          },
          "type_:TlInferenceResults": {
            "name": "TlInferenceResults",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "predictions",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "id",
                      "value": "type_:TlInferencePrediction"
                    }
                  }
                },
                {
                  "key": "errors",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "id",
                      "value": "type_:Error"
                    }
                  }
                }
              ]
            }
          },
          "type_:TlInferenceSourcePredictResult": {
            "name": "TlInferenceSourcePredictResult",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "source",
                  "valueType": {
                    "type": "id",
                    "value": "type_:Source"
                  }
                },
                {
                  "key": "results",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:TlInferenceResults"
                    }
                  }
                },
                {
                  "description": "An error message.",
                  "key": "error",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:Tag": {
            "name": "Tag",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "key",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "value",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              ]
            }
          },
          "type_:Target": {
            "name": "Target",
            "shape": {
              "type": "undiscriminatedUnion",
              "variants": [
                {
                  "type": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                {
                  "type": {
                    "type": "primitive",
                    "value": {
                      "type": "double"
                    }
                  }
                },
                {
                  "type": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              ]
            }
          },
          "type_:Task": {
            "name": "Task",
            "shape": {
              "type": "discriminatedUnion",
              "discriminant": "type",
              "variants": [
                {
                  "discriminantValue": "classification",
                  "additionalProperties": {
                    "extends": ["type_:TaskClassification"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "regression",
                  "additionalProperties": {
                    "extends": ["type_:TaskRegression"],
                    "properties": []
                  }
                }
              ]
            }
          },
          "type_:TaskClassification": {
            "name": "TaskClassification",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": []
            }
          },
          "type_:TaskRegression": {
            "name": "TaskRegression",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": []
            }
          },
          "type_:TextSource": {
            "name": "TextSource",
            "shape": {
              "type": "alias",
              "value": {
                "type": "map",
                "keyType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                },
                "valueType": {
                  "type": "unknown"
                }
              }
            }
          },
          "type_:TimeInterval": {
            "description": "A time range with a beginning and end, measured in seconds.",
            "name": "TimeInterval",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Beginning of time range in seconds.",
                  "key": "begin",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "double"
                    }
                  }
                },
                {
                  "description": "End of time range in seconds.",
                  "key": "end",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "double"
                    }
                  }
                }
              ]
            }
          },
          "type_:TlInferenceBaseRequest": {
            "name": "TlInferenceBaseRequest",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "custom_model",
                  "valueType": {
                    "type": "id",
                    "value": "type_:TlInferenceCustomModel"
                  }
                },
                {
                  "description": "URLs to the media files to be processed. Each must be a valid public URL to a media file (see recommended input filetypes) or an archive (`.zip`, `.tar.gz`, `.tar.bz2`, `.tar.xz`) of media files.\n\nIf you wish to supply more than 100 URLs, consider providing them as an archive (`.zip`, `.tar.gz`, `.tar.bz2`, `.tar.xz`).",
                  "key": "urls",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                {
                  "description": "List of File IDs corresponding to the files in the asset registry.",
                  "key": "registry_files",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                {
                  "description": "If provided, a `POST` request will be made to the URL with the generated predictions on completion or the error message on failure.",
                  "key": "callback_url",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "Whether to send an email notification to the user upon job completion/failure.",
                  "key": "notify",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:TlInferenceCustomModel": {
            "name": "TlInferenceCustomModel",
            "shape": {
              "type": "undiscriminatedUnion",
              "variants": [
                {
                  "type": {
                    "type": "id",
                    "value": "type_:TlInferenceCustomModelId"
                  },
                  "displayName": "Tl Inference Custom Model Id"
                },
                {
                  "type": {
                    "type": "id",
                    "value": "type_:TlInferenceCustomModelVersionId"
                  },
                  "displayName": "Tl Inference Custom Model Version Id"
                }
              ]
            }
          },
          "type_:TlInferenceCustomModelId": {
            "name": "TlInferenceCustomModelId",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              ]
            }
          },
          "type_:TlInferenceCustomModelVersionId": {
            "name": "TlInferenceCustomModelVersionId",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "version_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              ]
            }
          },
          "type_:ToxicityScore": {
            "name": "ToxicityScore",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Category of toxicity.",
                  "key": "name",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "Prediction for this category of toxicity",
                  "key": "score",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              ]
            }
          },
          "type_:TrainingBaseRequest": {
            "name": "TrainingBaseRequest",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "custom_model",
                  "valueType": {
                    "type": "id",
                    "value": "type_:CustomModelRequest"
                  }
                },
                {
                  "key": "dataset",
                  "valueType": {
                    "type": "id",
                    "value": "type_:Dataset"
                  }
                },
                {
                  "key": "target_feature",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "key": "task",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:Task"
                    }
                  }
                },
                {
                  "key": "evaluation",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:EvaluationArgs"
                    }
                  }
                },
                {
                  "key": "alternatives",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "id",
                        "value": "type_:Alternative"
                      }
                    }
                  }
                },
                {
                  "key": "callback_url",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "key": "notify",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:TrainingCustomModel": {
            "name": "TrainingCustomModel",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "version_id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:Transcription": {
            "name": "Transcription",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "language",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:Bcp47Tag"
                    }
                  }
                },
                {
                  "description": "Whether to return identifiers for speakers over time. If `true`, unique identifiers will be assigned to spoken words to differentiate different speakers. If `false`, all speakers will be tagged with an `unknown` ID.",
                  "key": "identify_speakers",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean"
                      }
                    }
                  }
                },
                {
                  "description": "Transcript confidence threshold. Transcripts generated with a confidence less than this threshold will be considered invalid and not used as an input for model inference.",
                  "key": "confidence_threshold",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:TranscriptionMetadata": {
            "description": "Transcription metadata for your media file.",
            "name": "TranscriptionMetadata",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Value between `0.0` and `1.0` indicating our transcription model's relative confidence in the transcription of your media file.",
                  "key": "confidence",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "double"
                    }
                  }
                },
                {
                  "key": "detected_language",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:Bcp47Tag"
                    }
                  }
                }
              ]
            }
          },
          "type_:Type": {
            "name": "Type",
            "shape": {
              "type": "enum",
              "values": [
                {
                  "value": "EMBEDDING_GENERATION"
                },
                {
                  "value": "INFERENCE"
                },
                {
                  "value": "TL_INFERENCE"
                },
                {
                  "value": "TRAINING"
                }
              ]
            }
          },
          "type_:Unconfigurable": {
            "description": "To include predictions for this model type, set this field to `{}`. It is currently not configurable further.",
            "name": "Unconfigurable",
            "shape": {
              "type": "alias",
              "value": {
                "type": "map",
                "keyType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                },
                "valueType": {
                  "type": "unknown"
                }
              }
            }
          },
          "type_:UnionJob": {
            "name": "UnionJob",
            "shape": {
              "type": "discriminatedUnion",
              "discriminant": "type",
              "variants": [
                {
                  "discriminantValue": "EMBEDDING_GENERATION",
                  "additionalProperties": {
                    "extends": ["type_:UnionJobJobEmbeddingGeneration"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "INFERENCE",
                  "additionalProperties": {
                    "extends": ["type_:UnionJobJobInference"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "TL_INFERENCE",
                  "additionalProperties": {
                    "extends": ["type_:UnionJobJobTlInference"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "TRAINING",
                  "additionalProperties": {
                    "extends": ["type_:UnionJobJobTraining"],
                    "properties": []
                  }
                }
              ]
            }
          },
          "type_:UnionJobJobEmbeddingGeneration": {
            "name": "UnionJobJobEmbeddingGeneration",
            "shape": {
              "type": "object",
              "extends": ["type_:JobEmbeddingGeneration"],
              "properties": []
            }
          },
          "type_:UnionJobJobInference": {
            "name": "UnionJobJobInference",
            "shape": {
              "type": "object",
              "extends": ["type_:JobInference"],
              "properties": []
            }
          },
          "type_:UnionJobJobTlInference": {
            "name": "UnionJobJobTlInference",
            "shape": {
              "type": "object",
              "extends": ["type_:JobTlInference"],
              "properties": []
            }
          },
          "type_:UnionJobJobTraining": {
            "name": "UnionJobJobTraining",
            "shape": {
              "type": "object",
              "extends": ["type_:JobTraining"],
              "properties": []
            }
          },
          "type_:UnionPredictResult": {
            "name": "UnionPredictResult",
            "shape": {
              "type": "undiscriminatedUnion",
              "variants": [
                {
                  "type": {
                    "type": "id",
                    "value": "type_:InferenceSourcePredictResult"
                  },
                  "displayName": "Inference Source Predict Result"
                },
                {
                  "type": {
                    "type": "id",
                    "value": "type_:TlInferenceSourcePredictResult"
                  },
                  "displayName": "Tl Inference Source Predict Result"
                }
              ]
            }
          },
          "type_:ValidationArgs": {
            "name": "ValidationArgs",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "positive_label",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:Target"
                    }
                  }
                }
              ]
            }
          },
          "type_:When": {
            "name": "When",
            "shape": {
              "type": "enum",
              "values": [
                {
                  "value": "created_before"
                },
                {
                  "value": "created_after"
                }
              ]
            }
          },
          "type_:Window": {
            "name": "Window",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The length of the sliding window.",
                  "key": "length",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  }
                },
                {
                  "description": "The step size of the sliding window.",
                  "key": "step",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:EmotionEmbeddingItem": {
            "name": "EmotionEmbeddingItem",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Name of the emotion being expressed.",
                  "key": "name",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "Embedding value for the emotion being expressed.",
                  "key": "score",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:EmotionEmbedding": {
            "description": "A high-dimensional embedding in emotion space.",
            "name": "EmotionEmbedding",
            "shape": {
              "type": "alias",
              "value": {
                "type": "list",
                "itemType": {
                  "type": "id",
                  "value": "type_:EmotionEmbeddingItem"
                }
              }
            }
          },
          "type_:TimeRange": {
            "description": "A time range with a beginning and end, measured in seconds.",
            "name": "TimeRange",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Beginning of time range in seconds.",
                  "key": "begin",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  }
                },
                {
                  "description": "End of time range in seconds.",
                  "key": "end",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:TextPosition": {
            "description": "Position of a segment of text within a larger document, measured in characters. Uses zero-based indexing. The beginning index is inclusive and the end index is exclusive.",
            "name": "TextPosition",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The index of the first character in the text segment, inclusive.",
                  "key": "begin",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  }
                },
                {
                  "description": "The index of the last character in the text segment, exclusive.",
                  "key": "end",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:SentimentItem": {
            "name": "SentimentItem",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Level of sentiment, ranging from 1 (negative) to 9 (positive)",
                  "key": "name",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "Prediction for this level of sentiment",
                  "key": "score",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:Sentiment": {
            "description": "Sentiment predictions returned as a distribution. This model predicts the probability that a given text could be interpreted as having each sentiment level from 1 (negative) to 9 (positive).\n\nCompared to returning one estimate of sentiment, this enables a more nuanced analysis of a text's meaning. For example, a text with very neutral sentiment would have an average rating of 5. But also a text that could be interpreted as having very positive sentiment or very negative sentiment would also have an average rating of 5. The average sentiment is less informative than the distribution over sentiment, so this API returns a value for each sentiment level.",
            "name": "Sentiment",
            "shape": {
              "type": "alias",
              "value": {
                "type": "list",
                "itemType": {
                  "type": "id",
                  "value": "type_:SentimentItem"
                }
              }
            }
          },
          "type_:ToxicityItem": {
            "name": "ToxicityItem",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Category of toxicity.",
                  "key": "name",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "Prediction for this category of toxicity",
                  "key": "score",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:Toxicity": {
            "description": "Toxicity predictions returned as probabilities that the text can be classified into the following categories: toxic, severe_toxic, obscene, threat, insult, and identity_hate.",
            "name": "Toxicity",
            "shape": {
              "type": "alias",
              "value": {
                "type": "list",
                "itemType": {
                  "type": "id",
                  "value": "type_:ToxicityItem"
                }
              }
            }
          }
        },
        "subpackages": {
          "subpackage_batch": {
            "subpackageId": "subpackage_batch",
            "name": "batch",
            "endpoints": [
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.hume.ai"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "list-jobs",
                "method": "GET",
                "id": "listJobs",
                "name": "List jobs",
                "path": {
                  "pathParameters": [],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/v0/batch/jobs"
                    }
                  ]
                },
                "queryParameters": [
                  {
                    "description": "The maximum number of jobs to include in the response.",
                    "key": "limit",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "integer"
                        }
                      }
                    }
                  },
                  {
                    "description": "Include only jobs with these statuses.",
                    "key": "status",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "id",
                        "value": "type_:Status"
                      }
                    }
                  },
                  {
                    "description": "Include only jobs that were created before or after `timestamp_ms`.",
                    "key": "when",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "id",
                        "value": "type_:When"
                      }
                    }
                  },
                  {
                    "description": "Defaults to the current date and time. See `when`.",
                    "key": "timestamp_ms",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "integer"
                        }
                      }
                    }
                  },
                  {
                    "description": "The job timestamp to sort by.",
                    "key": "sort_by",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "id",
                        "value": "type_:SortBy"
                      }
                    }
                  },
                  {
                    "description": "The sort direction.",
                    "key": "direction",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "id",
                        "value": "type_:Direction"
                      }
                    }
                  },
                  {
                    "description": "Include only jobs of these types.",
                    "key": "type",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "id",
                        "value": "type_:Type"
                      }
                    }
                  }
                ],
                "headers": [],
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "list",
                      "itemType": {
                        "type": "id",
                        "value": "type_:UnionJob"
                      }
                    }
                  }
                },
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "path": "/v0/batch/jobs",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 200,
                    "responseBody": [],
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": []
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Sort and filter jobs.",
                "authed": true
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.hume.ai"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "start-inference-job",
                "method": "POST",
                "id": "startInferenceJob",
                "name": "Start inference job",
                "path": {
                  "pathParameters": [],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/v0/batch/jobs"
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "request": {
                  "contentType": "application/json",
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_:InferenceBaseRequest"
                    }
                  }
                },
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_:JobId"
                    }
                  }
                },
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "path": "/v0/batch/jobs",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {},
                    "requestBody": {},
                    "responseStatusCode": 200,
                    "responseBody": {
                      "job_id": "job_id"
                    },
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {}
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "job_id": "job_id"
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Start a new measurement inference job.",
                "authed": true
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.hume.ai"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "get-job-details",
                "method": "GET",
                "id": "getJobDetails",
                "name": "Get job details",
                "path": {
                  "pathParameters": [
                    {
                      "key": "id",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/v0/batch/jobs/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "id"
                    },
                    {
                      "type": "literal",
                      "value": ""
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_:UnionJob"
                    }
                  }
                },
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "path": "/v0/batch/jobs/:id",
                    "pathParameters": {
                      "id": ":id"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 200,
                    "responseBody": {
                      "type": "EMBEDDING_GENERATION",
                      "job_id": "string",
                      "user_id": "string",
                      "request": {
                        "registry_file_details": [
                          {
                            "file_id": "string",
                            "file_url": "string"
                          }
                        ]
                      },
                      "state": {
                        "status": "QUEUED",
                        "created_timestamp_ms": 0
                      }
                    },
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "type": "EMBEDDING_GENERATION",
                        "job_id": "string",
                        "user_id": "string",
                        "request": {
                          "registry_file_details": [
                            {
                              "file_id": "string",
                              "file_url": "string"
                            }
                          ]
                        },
                        "state": {
                          "status": "QUEUED",
                          "created_timestamp_ms": 0
                        }
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Get the request details and state of a given job.",
                "authed": true
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.hume.ai"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "get-job-predictions",
                "method": "GET",
                "id": "getJobPredictions",
                "name": "Get job predictions",
                "path": {
                  "pathParameters": [
                    {
                      "key": "id",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/v0/batch/jobs/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "id"
                    },
                    {
                      "type": "literal",
                      "value": "/predictions"
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "list",
                      "itemType": {
                        "type": "id",
                        "value": "type_:UnionPredictResult"
                      }
                    }
                  }
                },
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "path": "/v0/batch/jobs/id/predictions",
                    "pathParameters": {
                      "id": "id"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 200,
                    "responseBody": [],
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": []
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Get the JSON predictions of a completed measurement or custom models inference job.",
                "authed": true
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.hume.ai"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "get-artifacts",
                "migratedFromUrlSlugs": ["get-job-artifacts"],
                "method": "GET",
                "id": "getArtifacts",
                "name": "Get job artifacts",
                "path": {
                  "pathParameters": [
                    {
                      "key": "id",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/v0/batch/jobs/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "id"
                    },
                    {
                      "type": "literal",
                      "value": "/artifacts"
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "response": {
                  "type": {
                    "type": "fileDownload"
                  }
                },
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "path": "/v0/batch/jobs/:id/artifacts",
                    "pathParameters": {
                      "id": ":id"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 200,
                    "responseBody": "",
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": ""
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Get the artifacts ZIP of a completed measurement or custom models inference job.",
                "authed": true
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.hume.ai"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "start-inference-job-with-file",
                "migratedFromUrlSlugs": ["start-inference-job-from-local-file"],
                "method": "POST",
                "id": "startInferenceJobWithFile",
                "name": "Start inference job from local file",
                "path": {
                  "pathParameters": [],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/v0/batch/jobs"
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "request": {
                  "contentType": "multipart/form-data",
                  "type": {
                    "type": "fileUpload",
                    "value": {
                      "name": "BatchStartInferenceJobWithFileRequest",
                      "properties": [
                        {
                          "type": "bodyProperty",
                          "key": "json",
                          "valueType": {
                            "type": "id",
                            "value": "type_:InferenceBaseRequest"
                          }
                        },
                        {
                          "type": "file",
                          "value": {
                            "type": "file",
                            "key": "file",
                            "isOptional": false
                          }
                        }
                      ]
                    }
                  }
                },
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_:JobId"
                    }
                  }
                },
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "path": "/v0/batch/jobs",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {},
                    "requestBody": {
                      "json": {},
                      "file": "<filename1>"
                    },
                    "responseStatusCode": 200,
                    "responseBody": {
                      "job_id": "string"
                    },
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "json": {},
                        "file": "<filename1>"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "job_id": "string"
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Start a new batch inference job.",
                "authed": true
              }
            ],
            "types": [],
            "subpackages": [],
            "urlSlug": "batch",
            "webhooks": [],
            "websockets": []
          },
          "subpackage_stream": {
            "subpackageId": "subpackage_stream",
            "name": "stream",
            "endpoints": [],
            "types": [
              "type_stream:StreamBurstJobDetails",
              "type_stream:StreamBurstBurstPredictionsItem",
              "type_stream:StreamBurstBurst",
              "type_stream:StreamBurstFacePredictionsItem",
              "type_stream:StreamBurstFace",
              "type_stream:StreamBurstFacemeshPredictionsItem",
              "type_stream:StreamBurstFacemesh",
              "type_stream:StreamBurstLanguagePredictionsItem",
              "type_stream:StreamBurstLanguage",
              "type_stream:StreamBurstProsodyPredictionsItem",
              "type_stream:StreamBurstProsody",
              "type_stream:StreamBurst",
              "type_stream:StreamErrorJobDetails",
              "type_stream:StreamError",
              "type_stream:StreamJobDetailsJobDetails",
              "type_stream:StreamJobDetails",
              "type_stream:SubscribeEvent",
              "type_stream:StreamDataModelsFace",
              "type_stream:StreamDataModelsLanguage",
              "type_stream:StreamDataModels",
              "type_stream:StreamData"
            ],
            "subpackages": [],
            "urlSlug": "stream",
            "webhooks": [],
            "websockets": [
              {
                "urlSlug": "stream",
                "auth": false,
                "headers": [
                  {
                    "key": "X-Hume-Api-Key",
                    "type": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                ],
                "messages": [
                  {
                    "type": "subscribe",
                    "origin": "server",
                    "body": {
                      "type": "reference",
                      "value": {
                        "type": "id",
                        "value": "type_stream:SubscribeEvent"
                      }
                    }
                  },
                  {
                    "type": "publish",
                    "origin": "client",
                    "body": {
                      "type": "reference",
                      "value": {
                        "type": "id",
                        "value": "type_stream:StreamData"
                      }
                    }
                  }
                ],
                "defaultEnvironment": "Default",
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "wss://api.hume.ai"
                  }
                ],
                "id": "stream",
                "name": "Stream",
                "path": {
                  "pathParameters": [],
                  "parts": [
                    {
                      "type": "literal",
                      "value": "/v0/stream/models"
                    }
                  ]
                },
                "queryParameters": [],
                "examples": [
                  {
                    "path": "/v0/stream/models",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {},
                    "messages": [
                      {
                        "type": "publish",
                        "body": {}
                      },
                      {
                        "type": "subscribe",
                        "body": {}
                      }
                    ]
                  }
                ]
              }
            ]
          }
        },
        "auth": {
          "type": "header",
          "headerWireValue": "X-Hume-Api-Key",
          "nameOverride": "apiKey"
        },
        "hasMultipleBaseUrls": false
      },
      "70f6cdb5-e778-49dc-bd8a-db69632abffa": {
        "id": "70f6cdb5-e778-49dc-bd8a-db69632abffa",
        "rootPackage": {
          "endpoints": [],
          "subpackages": ["subpackage_files", "subpackage_datasets", "subpackage_models", "subpackage_jobs"],
          "types": [
            "type_:AttributeFilter",
            "type_:FileInput",
            "type_:FileWithAttributesInput",
            "type_:AuthorizedFile",
            "type_:FileWithAttributes",
            "type_:Unit",
            "type_:DatasetVersionFeatureTypesValue",
            "type_:DatasetVersion",
            "type_:ReturnDataset",
            "type_:DatasetLabelsFileUriInputFeatureTypesValue",
            "type_:DatasetLabelsFileUriInput",
            "type_:ExternalModel",
            "type_:ExternalModelVersionFileType",
            "type_:ExternalModelVersion",
            "type_:ExternalModelVersionTag",
            "type_:ModelPage",
            "type_:PageableObject",
            "type_:SortObject",
            "type_:JsonObject",
            "type_:FilePage",
            "type_:DatasetPage",
            "type_:DatasetVersionPage",
            "type_:DatasetLabels",
            "type_:Alternative",
            "type_:Bcp47Tag",
            "type_:BoundingBox",
            "type_:BurstPrediction",
            "type_:Classification",
            "type_:CompletedEmbeddingGeneration",
            "type_:CompletedInference",
            "type_:CompletedTlInference",
            "type_:CompletedTraining",
            "type_:CustomModelPrediction",
            "type_:CustomModelRequest",
            "type_:Dataset",
            "type_:DatasetId",
            "type_:DatasetVersionId",
            "type_:DescriptionsScore",
            "type_:Direction",
            "type_:EmbeddingGenerationBaseRequest",
            "type_:EmotionScore",
            "type_:Error",
            "type_:EvaluationArgs",
            "type_:Face",
            "type_:FacePrediction",
            "type_:FacemeshPrediction",
            "type_:FacsScore",
            "type_:Failed",
            "type_:File",
            "type_:Granularity",
            "type_:GroupedPredictionsBurstPrediction",
            "type_:GroupedPredictionsFacePrediction",
            "type_:GroupedPredictionsFacemeshPrediction",
            "type_:GroupedPredictionsLanguagePrediction",
            "type_:GroupedPredictionsNerPrediction",
            "type_:GroupedPredictionsProsodyPrediction",
            "type_:InProgress",
            "type_:InferenceBaseRequest",
            "type_:InferencePrediction",
            "type_:InferenceRequest",
            "type_:InferenceResults",
            "type_:InferenceSourcePredictResult",
            "type_:JobEmbeddingGeneration",
            "type_:JobInference",
            "type_:JobTlInference",
            "type_:JobTraining",
            "type_:JobId",
            "type_:Language",
            "type_:LanguagePrediction",
            "type_:Models",
            "type_:ModelsPredictions",
            "type_:Ner",
            "type_:NerPrediction",
            "type_:Null",
            "type_:PositionInterval",
            "type_:PredictionsOptionalNullBurstPrediction",
            "type_:PredictionsOptionalNullFacePrediction",
            "type_:PredictionsOptionalNullFacemeshPrediction",
            "type_:PredictionsOptionalTranscriptionMetadataLanguagePrediction",
            "type_:PredictionsOptionalTranscriptionMetadataNerPrediction",
            "type_:PredictionsOptionalTranscriptionMetadataProsodyPrediction",
            "type_:Prosody",
            "type_:ProsodyPrediction",
            "type_:Queued",
            "type_:RegistryFileDetail",
            "type_:Regression",
            "type_:SentimentScore",
            "type_:SortBy",
            "type_:Source",
            "type_:SourceFile",
            "type_:SourceTextSource",
            "type_:SourceUrl",
            "type_:Url",
            "type_:StateEmbeddingGeneration",
            "type_:StateEmbeddingGenerationCompletedEmbeddingGeneration",
            "type_:StateEmbeddingGenerationFailed",
            "type_:StateEmbeddingGenerationInProgress",
            "type_:StateEmbeddingGenerationQueued",
            "type_:StateInference",
            "type_:StateInferenceCompletedInference",
            "type_:StateInferenceFailed",
            "type_:StateInferenceInProgress",
            "type_:StateInferenceQueued",
            "type_:StateTlInference",
            "type_:StateTlInferenceCompletedTlInference",
            "type_:StateTlInferenceFailed",
            "type_:StateTlInferenceInProgress",
            "type_:StateTlInferenceQueued",
            "type_:StateTraining",
            "type_:StateTrainingCompletedTraining",
            "type_:StateTrainingFailed",
            "type_:StateTrainingInProgress",
            "type_:StateTrainingQueued",
            "type_:Status",
            "type_:TlInferencePrediction",
            "type_:TlInferenceResults",
            "type_:TlInferenceSourcePredictResult",
            "type_:Tag",
            "type_:Target",
            "type_:Task",
            "type_:TaskClassification",
            "type_:TaskRegression",
            "type_:TextSource",
            "type_:TimeInterval",
            "type_:TlInferenceBaseRequest",
            "type_:TlInferenceCustomModel",
            "type_:TlInferenceCustomModelId",
            "type_:TlInferenceCustomModelVersionId",
            "type_:ToxicityScore",
            "type_:TrainingBaseRequest",
            "type_:TrainingCustomModel",
            "type_:Transcription",
            "type_:TranscriptionMetadata",
            "type_:Type",
            "type_:Unconfigurable",
            "type_:UnionJob",
            "type_:UnionJobJobEmbeddingGeneration",
            "type_:UnionJobJobInference",
            "type_:UnionJobJobTlInference",
            "type_:UnionJobJobTraining",
            "type_:UnionPredictResult",
            "type_:ValidationArgs",
            "type_:When",
            "type_:Window"
          ],
          "webhooks": [],
          "websockets": []
        },
        "types": {
          "type_:AttributeFilter": {
            "description": "List of Attributes",
            "name": "AttributeFilter",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Attribute name (key)",
                  "key": "name",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "Attribute description (value)",
                  "key": "value",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              ]
            }
          },
          "type_:FileInput": {
            "description": "File details",
            "name": "FileInput",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "File name",
                  "key": "name",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "File URI",
                  "key": "uri",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "Flag which denotes whether the file is stored with Hume",
                  "key": "hume_storage",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "boolean"
                    }
                  }
                },
                {
                  "description": "File type: video, audio, video_no_audio, image, text, or mediapipe_facemesh",
                  "key": "data_type",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              ]
            }
          },
          "type_:FileWithAttributesInput": {
            "name": "FileWithAttributesInput",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "file",
                  "valueType": {
                    "type": "id",
                    "value": "type_:FileInput"
                  }
                },
                {
                  "description": "List of Attributes",
                  "key": "attributes",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "id",
                        "value": "type_:AttributeFilter"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:AuthorizedFile": {
            "description": "File details",
            "name": "AuthorizedFile",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Hume-generated File ID",
                  "key": "id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "File name",
                  "key": "name",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "File URI",
                  "key": "uri",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "File upload URI",
                  "key": "upload_uri",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "File thumbnail URI",
                  "key": "thumbnail_uri",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "Hume-generated User ID",
                  "key": "user_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "File type: video, audio, video_no_audio, image, text, or mediapipe_facemesh",
                  "key": "data_type",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "Created date and time",
                  "key": "created_on",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                },
                {
                  "description": "Updated date and time",
                  "key": "modified_on",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                },
                {
                  "description": "Additional details as key, value pairs",
                  "key": "metadata",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "map",
                      "keyType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      },
                      "valueType": {
                        "type": "map",
                        "keyType": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        },
                        "valueType": {
                          "type": "unknown"
                        }
                      }
                    }
                  }
                },
                {
                  "description": "Flag which denotes whether the file is stored with Hume",
                  "key": "hume_storage",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean"
                      }
                    }
                  }
                },
                {
                  "description": "Timestamp denoting when the file was uploaded to Hume",
                  "key": "hume_storage_upload_timestamp",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                },
                {
                  "description": "Indicates whether this file has been sanitized for sharing",
                  "key": "is_sanitized",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "boolean"
                    }
                  }
                },
                {
                  "description": "Indicates whether this file is owned by the current file reader",
                  "key": "is_owned_by_reader",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "boolean"
                    }
                  }
                },
                {
                  "description": "Indicates whether this file is linked to a model that is publicly shared",
                  "key": "is_linked_to_publicly_shared",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean"
                      }
                    }
                  }
                },
                {
                  "description": "Indicates whether this file is linked to a Hume-owned model that is publicly shared",
                  "key": "is_linked_to_hume_model",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:FileWithAttributes": {
            "name": "FileWithAttributes",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "file",
                  "valueType": {
                    "type": "id",
                    "value": "type_:AuthorizedFile"
                  }
                },
                {
                  "description": "List of Attributes",
                  "key": "attributes",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "id",
                        "value": "type_:AttributeFilter"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:Unit": {
            "name": "Unit",
            "shape": {
              "type": "alias",
              "value": {
                "type": "map",
                "keyType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                },
                "valueType": {
                  "type": "unknown"
                }
              }
            }
          },
          "type_:DatasetVersionFeatureTypesValue": {
            "description": "Feature types of label mapped to feature type",
            "name": "DatasetVersionFeatureTypesValue",
            "shape": {
              "type": "enum",
              "values": [
                {
                  "value": "CATEGORICAL"
                },
                {
                  "value": "NUMERIC"
                },
                {
                  "value": "TEXT"
                },
                {
                  "value": "DATETIME"
                },
                {
                  "value": "UNDEFINED"
                }
              ]
            }
          },
          "type_:DatasetVersion": {
            "name": "DatasetVersion",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Hume-generated Dataset version ID",
                  "key": "id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "Hume-generated User ID",
                  "key": "user_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "Dataset Labels file URI",
                  "key": "labels_file_uri",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "Feature types of label mapped to feature type",
                  "key": "feature_types",
                  "valueType": {
                    "type": "map",
                    "keyType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    },
                    "valueType": {
                      "type": "id",
                      "value": "type_:DatasetVersionFeatureTypesValue"
                    }
                  }
                },
                {
                  "description": "Hume-generated Dataset ID of the parent Dataset",
                  "key": "dataset_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "Dataset version number",
                  "key": "dataset_version",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                {
                  "description": "Created date and time",
                  "key": "created_on",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                }
              ]
            }
          },
          "type_:ReturnDataset": {
            "name": "ReturnDataset",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Hume-generated Dataset ID",
                  "key": "id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "Dataset name",
                  "key": "name",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "latest_version",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:DatasetVersion"
                    }
                  }
                },
                {
                  "description": "Updated date and time",
                  "key": "modified_on",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                },
                {
                  "description": "Additional details as key, value pairs",
                  "key": "metadata",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "map",
                      "keyType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      },
                      "valueType": {
                        "type": "map",
                        "keyType": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        },
                        "valueType": {
                          "type": "unknown"
                        }
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:DatasetLabelsFileUriInputFeatureTypesValue": {
            "description": "Feature types as key, value pairs",
            "name": "DatasetLabelsFileUriInputFeatureTypesValue",
            "shape": {
              "type": "enum",
              "values": [
                {
                  "value": "CATEGORICAL"
                },
                {
                  "value": "NUMERIC"
                },
                {
                  "value": "TEXT"
                },
                {
                  "value": "DATETIME"
                },
                {
                  "value": "UNDEFINED"
                }
              ]
            }
          },
          "type_:DatasetLabelsFileUriInput": {
            "name": "DatasetLabelsFileUriInput",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Dataset name",
                  "key": "name",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "URI of a Labels File",
                  "key": "labels_file_uri",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "Feature types as key, value pairs",
                  "key": "feature_types",
                  "valueType": {
                    "type": "map",
                    "keyType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    },
                    "valueType": {
                      "type": "id",
                      "value": "type_:DatasetLabelsFileUriInputFeatureTypesValue"
                    }
                  }
                }
              ]
            }
          },
          "type_:ExternalModel": {
            "name": "ExternalModel",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Hume-generated Model ID",
                  "key": "id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "Model name",
                  "key": "name",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "Created date and time",
                  "key": "created_on",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                {
                  "description": "Updated date and time",
                  "key": "modified_on",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                {
                  "description": "Total stars on this model",
                  "key": "total_stars",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                {
                  "description": "Model is starred by this user",
                  "key": "model_is_starred_by_user",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "boolean"
                    }
                  }
                },
                {
                  "description": "Model is archived.",
                  "key": "archived",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "boolean"
                    }
                  }
                },
                {
                  "key": "latest_version",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:ExternalModelVersion"
                    }
                  }
                },
                {
                  "description": "Model is shared publicly",
                  "key": "is_publicly_shared",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "boolean"
                    }
                  }
                }
              ]
            }
          },
          "type_:ExternalModelVersionFileType": {
            "description": "File type: video, audio, video_no_audio, image, text, or mediapipe_facemesh",
            "name": "ExternalModelVersionFileType",
            "shape": {
              "type": "enum",
              "values": [
                {
                  "value": "video"
                },
                {
                  "value": "audio"
                },
                {
                  "value": "video_no_audio"
                },
                {
                  "value": "image"
                },
                {
                  "value": "text"
                },
                {
                  "value": "mediapipe_facemesh"
                }
              ]
            }
          },
          "type_:ExternalModelVersion": {
            "description": "Latest Model version number",
            "name": "ExternalModelVersion",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Hume-generated Model version ID",
                  "key": "id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "Hume-generated Model ID of the parent Model",
                  "key": "model_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "Hume-generated User ID",
                  "key": "user_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "Model version number",
                  "key": "version",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "Model version's source file URI",
                  "key": "source_uri",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "Hume-generated Dataset version ID for the Dataset version the Model version was trained on",
                  "key": "dataset_version_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "Created date and time",
                  "key": "created_on",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                {
                  "description": "Additional details as key, value pairs",
                  "key": "metadata",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "map",
                      "keyType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      },
                      "valueType": {
                        "type": "map",
                        "keyType": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        },
                        "valueType": {
                          "type": "unknown"
                        }
                      }
                    }
                  }
                },
                {
                  "description": "Model version description",
                  "key": "description",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "List of Tags associated with the Model version",
                  "key": "tags",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "id",
                        "value": "type_:ExternalModelVersionTag"
                      }
                    }
                  }
                },
                {
                  "description": "File type: video, audio, video_no_audio, image, text, or mediapipe_facemesh",
                  "key": "file_type",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:ExternalModelVersionFileType"
                    }
                  }
                },
                {
                  "description": "Target feature, the feature the model was trained against",
                  "key": "target_feature",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "Type of the task used to train",
                  "key": "task_type",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "ID of the batch training job",
                  "key": "training_job_id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:ExternalModelVersionTag": {
            "description": "List of Tags associated with the Model version",
            "name": "ExternalModelVersionTag",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Tag name (key)",
                  "key": "key",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "Tag description (value)",
                  "key": "value",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              ]
            }
          },
          "type_:ModelPage": {
            "name": "ModelPage",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "content",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "id",
                        "value": "type_:ExternalModel"
                      }
                    }
                  }
                },
                {
                  "key": "pageable",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:PageableObject"
                    }
                  }
                },
                {
                  "key": "total",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                },
                {
                  "key": "last",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean"
                      }
                    }
                  }
                },
                {
                  "key": "total_elements",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                },
                {
                  "key": "total_pages",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                },
                {
                  "key": "size",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                },
                {
                  "key": "number",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                },
                {
                  "key": "sort",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:SortObject"
                    }
                  }
                },
                {
                  "key": "first",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean"
                      }
                    }
                  }
                },
                {
                  "key": "number_of_elements",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                },
                {
                  "key": "empty",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:PageableObject": {
            "name": "PageableObject",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "offset",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                },
                {
                  "key": "sort",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:SortObject"
                    }
                  }
                },
                {
                  "key": "paged",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean"
                      }
                    }
                  }
                },
                {
                  "key": "unpaged",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean"
                      }
                    }
                  }
                },
                {
                  "key": "page_number",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                },
                {
                  "key": "page_size",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:SortObject": {
            "name": "SortObject",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "empty",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean"
                      }
                    }
                  }
                },
                {
                  "key": "sorted",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean"
                      }
                    }
                  }
                },
                {
                  "key": "unsorted",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:JsonObject": {
            "name": "JsonObject",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "empty",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:FilePage": {
            "name": "FilePage",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "content",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "id",
                        "value": "type_:FileWithAttributes"
                      }
                    }
                  }
                },
                {
                  "key": "pageable",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:PageableObject"
                    }
                  }
                },
                {
                  "key": "total",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                },
                {
                  "key": "last",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean"
                      }
                    }
                  }
                },
                {
                  "key": "total_elements",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                },
                {
                  "key": "total_pages",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                },
                {
                  "key": "size",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                },
                {
                  "key": "number",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                },
                {
                  "key": "sort",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:SortObject"
                    }
                  }
                },
                {
                  "key": "first",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean"
                      }
                    }
                  }
                },
                {
                  "key": "number_of_elements",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                },
                {
                  "key": "empty",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:DatasetPage": {
            "name": "DatasetPage",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "content",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "id",
                        "value": "type_:ReturnDataset"
                      }
                    }
                  }
                },
                {
                  "key": "pageable",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:PageableObject"
                    }
                  }
                },
                {
                  "key": "total",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                },
                {
                  "key": "last",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean"
                      }
                    }
                  }
                },
                {
                  "key": "total_elements",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                },
                {
                  "key": "total_pages",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                },
                {
                  "key": "size",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                },
                {
                  "key": "number",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                },
                {
                  "key": "sort",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:SortObject"
                    }
                  }
                },
                {
                  "key": "first",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean"
                      }
                    }
                  }
                },
                {
                  "key": "number_of_elements",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                },
                {
                  "key": "empty",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:DatasetVersionPage": {
            "name": "DatasetVersionPage",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "content",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "id",
                        "value": "type_:DatasetVersion"
                      }
                    }
                  }
                },
                {
                  "key": "pageable",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:PageableObject"
                    }
                  }
                },
                {
                  "key": "total",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                },
                {
                  "key": "last",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean"
                      }
                    }
                  }
                },
                {
                  "key": "total_elements",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                },
                {
                  "key": "total_pages",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                },
                {
                  "key": "size",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                },
                {
                  "key": "number",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                },
                {
                  "key": "sort",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:SortObject"
                    }
                  }
                },
                {
                  "key": "first",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean"
                      }
                    }
                  }
                },
                {
                  "key": "number_of_elements",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                },
                {
                  "key": "empty",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:DatasetLabels": {
            "name": "DatasetLabels",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Hume-generated Dataset version ID",
                  "key": "id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "Hume-generated User ID",
                  "key": "user_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "Dataset Labels file URI",
                  "key": "labels_file_uri",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "Feature types json file URI",
                  "key": "feature_type_json_uri",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "Hume-generated Dataset ID",
                  "key": "dataset_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "Dataset version number",
                  "key": "dataset_version",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                {
                  "description": "Created date and time",
                  "key": "created_on",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                {
                  "description": "Boolean indicating that this is the most recent version",
                  "key": "is_most_recent_version",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "boolean"
                    }
                  }
                }
              ]
            }
          },
          "type_:Alternative": {
            "name": "Alternative",
            "shape": {
              "type": "alias",
              "value": {
                "type": "literal",
                "value": {
                  "type": "stringLiteral",
                  "value": "language_only"
                }
              }
            }
          },
          "type_:Bcp47Tag": {
            "name": "Bcp47Tag",
            "shape": {
              "type": "enum",
              "values": [
                {
                  "value": "zh"
                },
                {
                  "value": "da"
                },
                {
                  "value": "nl"
                },
                {
                  "value": "en"
                },
                {
                  "value": "en-AU"
                },
                {
                  "value": "en-IN"
                },
                {
                  "value": "en-NZ"
                },
                {
                  "value": "en-GB"
                },
                {
                  "value": "fr"
                },
                {
                  "value": "fr-CA"
                },
                {
                  "value": "de"
                },
                {
                  "value": "hi"
                },
                {
                  "value": "hi-Latn"
                },
                {
                  "value": "id"
                },
                {
                  "value": "it"
                },
                {
                  "value": "ja"
                },
                {
                  "value": "ko"
                },
                {
                  "value": "no"
                },
                {
                  "value": "pl"
                },
                {
                  "value": "pt"
                },
                {
                  "value": "pt-BR"
                },
                {
                  "value": "pt-PT"
                },
                {
                  "value": "ru"
                },
                {
                  "value": "es"
                },
                {
                  "value": "es-419"
                },
                {
                  "value": "sv"
                },
                {
                  "value": "ta"
                },
                {
                  "value": "tr"
                },
                {
                  "value": "uk"
                }
              ]
            }
          },
          "type_:BoundingBox": {
            "description": "A bounding box around a face.",
            "name": "BoundingBox",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "x-coordinate of bounding box top left corner.",
                  "key": "x",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "double"
                    }
                  }
                },
                {
                  "description": "y-coordinate of bounding box top left corner.",
                  "key": "y",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "double"
                    }
                  }
                },
                {
                  "description": "Bounding box width.",
                  "key": "w",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "double"
                    }
                  }
                },
                {
                  "description": "Bounding box height.",
                  "key": "h",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "double"
                    }
                  }
                }
              ]
            }
          },
          "type_:BurstPrediction": {
            "name": "BurstPrediction",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "time",
                  "valueType": {
                    "type": "id",
                    "value": "type_:TimeInterval"
                  }
                },
                {
                  "description": "A high-dimensional embedding in emotion space.",
                  "key": "emotions",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "id",
                      "value": "type_:EmotionScore"
                    }
                  }
                },
                {
                  "description": "Modality-specific descriptive features and their scores.",
                  "key": "descriptions",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "id",
                      "value": "type_:DescriptionsScore"
                    }
                  }
                }
              ]
            }
          },
          "type_:Classification": {
            "name": "Classification",
            "shape": {
              "type": "alias",
              "value": {
                "type": "map",
                "keyType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                },
                "valueType": {
                  "type": "unknown"
                }
              }
            }
          },
          "type_:CompletedEmbeddingGeneration": {
            "name": "CompletedEmbeddingGeneration",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "When this job was created (Unix timestamp in milliseconds).",
                  "key": "created_timestamp_ms",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                {
                  "description": "When this job started (Unix timestamp in milliseconds).",
                  "key": "started_timestamp_ms",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                {
                  "description": "When this job ended (Unix timestamp in milliseconds).",
                  "key": "ended_timestamp_ms",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                }
              ]
            }
          },
          "type_:CompletedInference": {
            "name": "CompletedInference",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "When this job was created (Unix timestamp in milliseconds).",
                  "key": "created_timestamp_ms",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                {
                  "description": "When this job started (Unix timestamp in milliseconds).",
                  "key": "started_timestamp_ms",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                {
                  "description": "When this job ended (Unix timestamp in milliseconds).",
                  "key": "ended_timestamp_ms",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                {
                  "description": "The number of predictions that were generated by this job.",
                  "key": "num_predictions",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                {
                  "description": "The number of errors that occurred while running this job.",
                  "key": "num_errors",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                }
              ]
            }
          },
          "type_:CompletedTlInference": {
            "name": "CompletedTlInference",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "When this job was created (Unix timestamp in milliseconds).",
                  "key": "created_timestamp_ms",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                {
                  "description": "When this job started (Unix timestamp in milliseconds).",
                  "key": "started_timestamp_ms",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                {
                  "description": "When this job ended (Unix timestamp in milliseconds).",
                  "key": "ended_timestamp_ms",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                {
                  "description": "The number of predictions that were generated by this job.",
                  "key": "num_predictions",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                {
                  "description": "The number of errors that occurred while running this job.",
                  "key": "num_errors",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                }
              ]
            }
          },
          "type_:CompletedTraining": {
            "name": "CompletedTraining",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "When this job was created (Unix timestamp in milliseconds).",
                  "key": "created_timestamp_ms",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                {
                  "description": "When this job started (Unix timestamp in milliseconds).",
                  "key": "started_timestamp_ms",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                {
                  "description": "When this job ended (Unix timestamp in milliseconds).",
                  "key": "ended_timestamp_ms",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                {
                  "key": "custom_model",
                  "valueType": {
                    "type": "id",
                    "value": "type_:TrainingCustomModel"
                  }
                },
                {
                  "key": "alternatives",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "map",
                      "keyType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      },
                      "valueType": {
                        "type": "id",
                        "value": "type_:TrainingCustomModel"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:CustomModelPrediction": {
            "name": "CustomModelPrediction",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "output",
                  "valueType": {
                    "type": "map",
                    "keyType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    },
                    "valueType": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  }
                },
                {
                  "key": "error",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "task_type",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              ]
            }
          },
          "type_:CustomModelRequest": {
            "name": "CustomModelRequest",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "name",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "description",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "key": "tags",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "id",
                        "value": "type_:Tag"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:Dataset": {
            "name": "Dataset",
            "shape": {
              "type": "undiscriminatedUnion",
              "variants": [
                {
                  "type": {
                    "type": "id",
                    "value": "type_:DatasetId"
                  },
                  "displayName": "Dataset Id"
                },
                {
                  "type": {
                    "type": "id",
                    "value": "type_:DatasetVersionId"
                  },
                  "displayName": "Dataset Version Id"
                }
              ]
            }
          },
          "type_:DatasetId": {
            "name": "DatasetId",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              ]
            }
          },
          "type_:DatasetVersionId": {
            "name": "DatasetVersionId",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "version_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              ]
            }
          },
          "type_:DescriptionsScore": {
            "name": "DescriptionsScore",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Name of the descriptive feature being expressed.",
                  "key": "name",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "Embedding value for the descriptive feature being expressed.",
                  "key": "score",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              ]
            }
          },
          "type_:Direction": {
            "name": "Direction",
            "shape": {
              "type": "enum",
              "values": [
                {
                  "value": "asc"
                },
                {
                  "value": "desc"
                }
              ]
            }
          },
          "type_:EmbeddingGenerationBaseRequest": {
            "name": "EmbeddingGenerationBaseRequest",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "File ID and File URL pairs for an asset registry file",
                  "key": "registry_file_details",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "id",
                        "value": "type_:RegistryFileDetail"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:EmotionScore": {
            "name": "EmotionScore",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Name of the emotion being expressed.",
                  "key": "name",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "Embedding value for the emotion being expressed.",
                  "key": "score",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "double"
                    }
                  }
                }
              ]
            }
          },
          "type_:Error": {
            "name": "Error",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "An error message.",
                  "key": "message",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "A file path relative to the top level source URL or file.",
                  "key": "file",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              ]
            }
          },
          "type_:EvaluationArgs": {
            "name": "EvaluationArgs",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "validation",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:ValidationArgs"
                    }
                  }
                }
              ]
            }
          },
          "type_:Face": {
            "name": "Face",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Number of frames per second to process. Other frames will be omitted from the response. Set to `0` to process every frame.",
                  "key": "fps_pred",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  }
                },
                {
                  "description": "Face detection probability threshold. Faces detected with a probability less than this threshold will be omitted from the response.",
                  "key": "prob_threshold",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  }
                },
                {
                  "description": "Whether to return identifiers for faces across frames. If `true`, unique identifiers will be assigned to face bounding boxes to differentiate different faces. If `false`, all faces will be tagged with an `unknown` ID.",
                  "key": "identify_faces",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean"
                      }
                    }
                  }
                },
                {
                  "description": "Minimum bounding box side length in pixels to treat as a face. Faces detected with a bounding box side length in pixels less than this threshold will be omitted from the response.",
                  "key": "min_face_size",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                },
                {
                  "key": "facs",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:Unconfigurable"
                    }
                  }
                },
                {
                  "key": "descriptions",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:Unconfigurable"
                    }
                  }
                },
                {
                  "description": "Whether to extract and save the detected faces in the artifacts zip created by each job.",
                  "key": "save_faces",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:FacePrediction": {
            "name": "FacePrediction",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Frame number",
                  "key": "frame",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                {
                  "description": "Time in seconds when face detection occurred.",
                  "key": "time",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "double"
                    }
                  }
                },
                {
                  "description": "The predicted probability that a detected face was actually a face.",
                  "key": "prob",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "double"
                    }
                  }
                },
                {
                  "key": "box",
                  "valueType": {
                    "type": "id",
                    "value": "type_:BoundingBox"
                  }
                },
                {
                  "description": "A high-dimensional embedding in emotion space.",
                  "key": "emotions",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "id",
                      "value": "type_:EmotionScore"
                    }
                  }
                },
                {
                  "description": "FACS 2.0 features and their scores.",
                  "key": "facs",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "id",
                        "value": "type_:FacsScore"
                      }
                    }
                  }
                },
                {
                  "description": "Modality-specific descriptive features and their scores.",
                  "key": "descriptions",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "id",
                        "value": "type_:DescriptionsScore"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:FacemeshPrediction": {
            "name": "FacemeshPrediction",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "A high-dimensional embedding in emotion space.",
                  "key": "emotions",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "id",
                      "value": "type_:EmotionScore"
                    }
                  }
                }
              ]
            }
          },
          "type_:FacsScore": {
            "name": "FacsScore",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Name of the FACS 2.0 feature being expressed.",
                  "key": "name",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "Embedding value for the FACS 2.0 feature being expressed.",
                  "key": "score",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              ]
            }
          },
          "type_:Failed": {
            "name": "Failed",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "When this job was created (Unix timestamp in milliseconds).",
                  "key": "created_timestamp_ms",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                {
                  "description": "When this job started (Unix timestamp in milliseconds).",
                  "key": "started_timestamp_ms",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                {
                  "description": "When this job ended (Unix timestamp in milliseconds).",
                  "key": "ended_timestamp_ms",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                {
                  "description": "An error message.",
                  "key": "message",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              ]
            }
          },
          "type_:File": {
            "name": "File",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The name of the file.",
                  "key": "filename",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "The content type of the file.",
                  "key": "content_type",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "The MD5 checksum of the file.",
                  "key": "md5sum",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              ]
            }
          },
          "type_:Granularity": {
            "description": "The granularity at which to generate predictions. `utterance` corresponds to a natural pause or break in conversation, while `conversational_turn` corresponds to a change in speaker.",
            "name": "Granularity",
            "shape": {
              "type": "enum",
              "values": [
                {
                  "value": "word"
                },
                {
                  "value": "sentence"
                },
                {
                  "value": "utterance"
                },
                {
                  "value": "conversational_turn"
                }
              ]
            }
          },
          "type_:GroupedPredictionsBurstPrediction": {
            "name": "GroupedPredictionsBurstPrediction",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "An automatically generated label to identify individuals in your media file. Will be `unknown` if you have chosen to disable identification, or if the model is unable to distinguish between individuals.",
                  "key": "id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "predictions",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "id",
                      "value": "type_:BurstPrediction"
                    }
                  }
                }
              ]
            }
          },
          "type_:GroupedPredictionsFacePrediction": {
            "name": "GroupedPredictionsFacePrediction",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "An automatically generated label to identify individuals in your media file. Will be `unknown` if you have chosen to disable identification, or if the model is unable to distinguish between individuals.",
                  "key": "id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "predictions",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "id",
                      "value": "type_:FacePrediction"
                    }
                  }
                }
              ]
            }
          },
          "type_:GroupedPredictionsFacemeshPrediction": {
            "name": "GroupedPredictionsFacemeshPrediction",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "An automatically generated label to identify individuals in your media file. Will be `unknown` if you have chosen to disable identification, or if the model is unable to distinguish between individuals.",
                  "key": "id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "predictions",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "id",
                      "value": "type_:FacemeshPrediction"
                    }
                  }
                }
              ]
            }
          },
          "type_:GroupedPredictionsLanguagePrediction": {
            "name": "GroupedPredictionsLanguagePrediction",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "An automatically generated label to identify individuals in your media file. Will be `unknown` if you have chosen to disable identification, or if the model is unable to distinguish between individuals.",
                  "key": "id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "predictions",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "id",
                      "value": "type_:LanguagePrediction"
                    }
                  }
                }
              ]
            }
          },
          "type_:GroupedPredictionsNerPrediction": {
            "name": "GroupedPredictionsNerPrediction",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "An automatically generated label to identify individuals in your media file. Will be `unknown` if you have chosen to disable identification, or if the model is unable to distinguish between individuals.",
                  "key": "id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "predictions",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "id",
                      "value": "type_:NerPrediction"
                    }
                  }
                }
              ]
            }
          },
          "type_:GroupedPredictionsProsodyPrediction": {
            "name": "GroupedPredictionsProsodyPrediction",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "An automatically generated label to identify individuals in your media file. Will be `unknown` if you have chosen to disable identification, or if the model is unable to distinguish between individuals.",
                  "key": "id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "predictions",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "id",
                      "value": "type_:ProsodyPrediction"
                    }
                  }
                }
              ]
            }
          },
          "type_:InProgress": {
            "name": "InProgress",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "When this job was created (Unix timestamp in milliseconds).",
                  "key": "created_timestamp_ms",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                {
                  "description": "When this job started (Unix timestamp in milliseconds).",
                  "key": "started_timestamp_ms",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                }
              ]
            }
          },
          "type_:InferenceBaseRequest": {
            "name": "InferenceBaseRequest",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "models",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:Models"
                    }
                  }
                },
                {
                  "key": "transcription",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:Transcription"
                    }
                  }
                },
                {
                  "description": "URLs to the media files to be processed. Each must be a valid public URL to a media file (see recommended input filetypes) or an archive (`.zip`, `.tar.gz`, `.tar.bz2`, `.tar.xz`) of media files.\n\nIf you wish to supply more than 100 URLs, consider providing them as an archive (`.zip`, `.tar.gz`, `.tar.bz2`, `.tar.xz`).",
                  "key": "urls",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                {
                  "description": "List of File IDs corresponding to the files in the asset registry.",
                  "key": "registry_files",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                {
                  "description": "Text to supply directly to our language and NER models.",
                  "key": "text",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                {
                  "description": "If provided, a `POST` request will be made to the URL with the generated predictions on completion or the error message on failure.",
                  "key": "callback_url",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "Whether to send an email notification to the user upon job completion/failure.",
                  "key": "notify",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:InferencePrediction": {
            "name": "InferencePrediction",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "A file path relative to the top level source URL or file.",
                  "key": "file",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "models",
                  "valueType": {
                    "type": "id",
                    "value": "type_:ModelsPredictions"
                  }
                }
              ]
            }
          },
          "type_:InferenceRequest": {
            "name": "InferenceRequest",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "models",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:Models"
                    }
                  }
                },
                {
                  "key": "transcription",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:Transcription"
                    }
                  }
                },
                {
                  "description": "URLs to the media files to be processed. Each must be a valid public URL to a media file (see recommended input filetypes) or an archive (`.zip`, `.tar.gz`, `.tar.bz2`, `.tar.xz`) of media files.\n\nIf you wish to supply more than 100 URLs, consider providing them as an archive (`.zip`, `.tar.gz`, `.tar.bz2`, `.tar.xz`).",
                  "key": "urls",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                {
                  "description": "List of File IDs corresponding to the files in the asset registry.",
                  "key": "registry_files",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                {
                  "description": "Text to supply directly to our language and NER models.",
                  "key": "text",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                {
                  "description": "If provided, a `POST` request will be made to the URL with the generated predictions on completion or the error message on failure.",
                  "key": "callback_url",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "Whether to send an email notification to the user upon job completion/failure.",
                  "key": "notify",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean"
                      }
                    }
                  }
                },
                {
                  "key": "files",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "id",
                      "value": "type_:File"
                    }
                  }
                }
              ]
            }
          },
          "type_:InferenceResults": {
            "name": "InferenceResults",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "predictions",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "id",
                      "value": "type_:InferencePrediction"
                    }
                  }
                },
                {
                  "key": "errors",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "id",
                      "value": "type_:Error"
                    }
                  }
                }
              ]
            }
          },
          "type_:InferenceSourcePredictResult": {
            "name": "InferenceSourcePredictResult",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "source",
                  "valueType": {
                    "type": "id",
                    "value": "type_:Source"
                  }
                },
                {
                  "key": "results",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:InferenceResults"
                    }
                  }
                },
                {
                  "description": "An error message.",
                  "key": "error",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:JobEmbeddingGeneration": {
            "name": "JobEmbeddingGeneration",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The ID associated with this job.",
                  "key": "job_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "user_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "request",
                  "valueType": {
                    "type": "id",
                    "value": "type_:EmbeddingGenerationBaseRequest"
                  }
                },
                {
                  "key": "state",
                  "valueType": {
                    "type": "id",
                    "value": "type_:StateEmbeddingGeneration"
                  }
                }
              ]
            }
          },
          "type_:JobInference": {
            "name": "JobInference",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The ID associated with this job.",
                  "key": "job_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "user_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "request",
                  "valueType": {
                    "type": "id",
                    "value": "type_:InferenceRequest"
                  }
                },
                {
                  "key": "state",
                  "valueType": {
                    "type": "id",
                    "value": "type_:StateInference"
                  }
                }
              ]
            }
          },
          "type_:JobTlInference": {
            "name": "JobTlInference",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The ID associated with this job.",
                  "key": "job_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "user_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "request",
                  "valueType": {
                    "type": "id",
                    "value": "type_:TlInferenceBaseRequest"
                  }
                },
                {
                  "key": "state",
                  "valueType": {
                    "type": "id",
                    "value": "type_:StateTlInference"
                  }
                }
              ]
            }
          },
          "type_:JobTraining": {
            "name": "JobTraining",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The ID associated with this job.",
                  "key": "job_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "user_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "request",
                  "valueType": {
                    "type": "id",
                    "value": "type_:TrainingBaseRequest"
                  }
                },
                {
                  "key": "state",
                  "valueType": {
                    "type": "id",
                    "value": "type_:StateTraining"
                  }
                }
              ]
            }
          },
          "type_:JobId": {
            "name": "JobId",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The ID of the started job.",
                  "key": "job_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              ]
            }
          },
          "type_:Language": {
            "name": "Language",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "granularity",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:Granularity"
                    }
                  }
                },
                {
                  "key": "sentiment",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:Unconfigurable"
                    }
                  }
                },
                {
                  "key": "toxicity",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:Unconfigurable"
                    }
                  }
                },
                {
                  "description": "Whether to return identifiers for speakers over time. If `true`, unique identifiers will be assigned to spoken words to differentiate different speakers. If `false`, all speakers will be tagged with an `unknown` ID.",
                  "key": "identify_speakers",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:LanguagePrediction": {
            "name": "LanguagePrediction",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "A segment of text (like a word or a sentence).",
                  "key": "text",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "position",
                  "valueType": {
                    "type": "id",
                    "value": "type_:PositionInterval"
                  }
                },
                {
                  "key": "time",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:TimeInterval"
                    }
                  }
                },
                {
                  "description": "Value between `0.0` and `1.0` that indicates our transcription model's relative confidence in this text.",
                  "key": "confidence",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  }
                },
                {
                  "description": "Value between `0.0` and `1.0` that indicates our transcription model's relative confidence that this text was spoken by this speaker.",
                  "key": "speaker_confidence",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  }
                },
                {
                  "description": "A high-dimensional embedding in emotion space.",
                  "key": "emotions",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "id",
                      "value": "type_:EmotionScore"
                    }
                  }
                },
                {
                  "description": "Sentiment predictions returned as a distribution. This model predicts the probability that a given text could be interpreted as having each sentiment level from `1` (negative) to `9` (positive).\n\nCompared to returning one estimate of sentiment, this enables a more nuanced analysis of a text's meaning. For example, a text with very neutral sentiment would have an average rating of `5`. But also a text that could be interpreted as having very positive sentiment or very negative sentiment would also have an average rating of `5`. The average sentiment is less informative than the distribution over sentiment, so this API returns a value for each sentiment level.",
                  "key": "sentiment",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "id",
                        "value": "type_:SentimentScore"
                      }
                    }
                  }
                },
                {
                  "description": "Toxicity predictions returned as probabilities that the text can be classified into the following categories: `toxic`, `severe_toxic`, `obscene`, `threat`, `insult`, and `identity_hate`.",
                  "key": "toxicity",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "id",
                        "value": "type_:ToxicityScore"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:Models": {
            "name": "Models",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "face",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:Face"
                    }
                  }
                },
                {
                  "key": "burst",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:Unconfigurable"
                    }
                  }
                },
                {
                  "key": "prosody",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:Prosody"
                    }
                  }
                },
                {
                  "key": "language",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:Language"
                    }
                  }
                },
                {
                  "key": "ner",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:Ner"
                    }
                  }
                },
                {
                  "key": "facemesh",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:Unconfigurable"
                    }
                  }
                }
              ]
            }
          },
          "type_:ModelsPredictions": {
            "name": "ModelsPredictions",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "face",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:PredictionsOptionalNullFacePrediction"
                    }
                  }
                },
                {
                  "key": "burst",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:PredictionsOptionalNullBurstPrediction"
                    }
                  }
                },
                {
                  "key": "prosody",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:PredictionsOptionalTranscriptionMetadataProsodyPrediction"
                    }
                  }
                },
                {
                  "key": "language",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:PredictionsOptionalTranscriptionMetadataLanguagePrediction"
                    }
                  }
                },
                {
                  "key": "ner",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:PredictionsOptionalTranscriptionMetadataNerPrediction"
                    }
                  }
                },
                {
                  "key": "facemesh",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:PredictionsOptionalNullFacemeshPrediction"
                    }
                  }
                }
              ]
            }
          },
          "type_:Ner": {
            "name": "Ner",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Whether to return identifiers for speakers over time. If `true`, unique identifiers will be assigned to spoken words to differentiate different speakers. If `false`, all speakers will be tagged with an `unknown` ID.",
                  "key": "identify_speakers",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:NerPrediction": {
            "name": "NerPrediction",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The recognized topic or entity.",
                  "key": "entity",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "position",
                  "valueType": {
                    "type": "id",
                    "value": "type_:PositionInterval"
                  }
                },
                {
                  "description": "Our NER model's relative confidence in the recognized topic or entity.",
                  "key": "entity_confidence",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "double"
                    }
                  }
                },
                {
                  "description": "A measure of how often the entity is linked to by other entities.",
                  "key": "support",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "double"
                    }
                  }
                },
                {
                  "description": "A URL which provides more information about the recognized topic or entity.",
                  "key": "uri",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "The specific word to which the emotion predictions are linked.",
                  "key": "link_word",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "time",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:TimeInterval"
                    }
                  }
                },
                {
                  "description": "Value between `0.0` and `1.0` that indicates our transcription model's relative confidence in this text.",
                  "key": "confidence",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  }
                },
                {
                  "description": "Value between `0.0` and `1.0` that indicates our transcription model's relative confidence that this text was spoken by this speaker.",
                  "key": "speaker_confidence",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  }
                },
                {
                  "description": "A high-dimensional embedding in emotion space.",
                  "key": "emotions",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "id",
                      "value": "type_:EmotionScore"
                    }
                  }
                }
              ]
            }
          },
          "type_:Null": {
            "description": "No associated metadata for this model. Value will be `null`.",
            "name": "Null",
            "shape": {
              "type": "alias",
              "value": {
                "type": "map",
                "keyType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                },
                "valueType": {
                  "type": "unknown"
                }
              }
            }
          },
          "type_:PositionInterval": {
            "description": "Position of a segment of text within a larger document, measured in characters. Uses zero-based indexing. The beginning index is inclusive and the end index is exclusive.",
            "name": "PositionInterval",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The index of the first character in the text segment, inclusive.",
                  "key": "begin",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                {
                  "description": "The index of the last character in the text segment, exclusive.",
                  "key": "end",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                }
              ]
            }
          },
          "type_:PredictionsOptionalNullBurstPrediction": {
            "name": "PredictionsOptionalNullBurstPrediction",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "metadata",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:Null"
                    }
                  }
                },
                {
                  "key": "grouped_predictions",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "id",
                      "value": "type_:GroupedPredictionsBurstPrediction"
                    }
                  }
                }
              ]
            }
          },
          "type_:PredictionsOptionalNullFacePrediction": {
            "name": "PredictionsOptionalNullFacePrediction",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "metadata",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:Null"
                    }
                  }
                },
                {
                  "key": "grouped_predictions",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "id",
                      "value": "type_:GroupedPredictionsFacePrediction"
                    }
                  }
                }
              ]
            }
          },
          "type_:PredictionsOptionalNullFacemeshPrediction": {
            "name": "PredictionsOptionalNullFacemeshPrediction",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "metadata",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:Null"
                    }
                  }
                },
                {
                  "key": "grouped_predictions",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "id",
                      "value": "type_:GroupedPredictionsFacemeshPrediction"
                    }
                  }
                }
              ]
            }
          },
          "type_:PredictionsOptionalTranscriptionMetadataLanguagePrediction": {
            "name": "PredictionsOptionalTranscriptionMetadataLanguagePrediction",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "metadata",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:TranscriptionMetadata"
                    }
                  }
                },
                {
                  "key": "grouped_predictions",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "id",
                      "value": "type_:GroupedPredictionsLanguagePrediction"
                    }
                  }
                }
              ]
            }
          },
          "type_:PredictionsOptionalTranscriptionMetadataNerPrediction": {
            "name": "PredictionsOptionalTranscriptionMetadataNerPrediction",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "metadata",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:TranscriptionMetadata"
                    }
                  }
                },
                {
                  "key": "grouped_predictions",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "id",
                      "value": "type_:GroupedPredictionsNerPrediction"
                    }
                  }
                }
              ]
            }
          },
          "type_:PredictionsOptionalTranscriptionMetadataProsodyPrediction": {
            "name": "PredictionsOptionalTranscriptionMetadataProsodyPrediction",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "metadata",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:TranscriptionMetadata"
                    }
                  }
                },
                {
                  "key": "grouped_predictions",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "id",
                      "value": "type_:GroupedPredictionsProsodyPrediction"
                    }
                  }
                }
              ]
            }
          },
          "type_:Prosody": {
            "name": "Prosody",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "granularity",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:Granularity"
                    }
                  }
                },
                {
                  "key": "window",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:Window"
                    }
                  }
                },
                {
                  "description": "Whether to return identifiers for speakers over time. If `true`, unique identifiers will be assigned to spoken words to differentiate different speakers. If `false`, all speakers will be tagged with an `unknown` ID.",
                  "key": "identify_speakers",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:ProsodyPrediction": {
            "name": "ProsodyPrediction",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "A segment of text (like a word or a sentence).",
                  "key": "text",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "key": "time",
                  "valueType": {
                    "type": "id",
                    "value": "type_:TimeInterval"
                  }
                },
                {
                  "description": "Value between `0.0` and `1.0` that indicates our transcription model's relative confidence in this text.",
                  "key": "confidence",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  }
                },
                {
                  "description": "Value between `0.0` and `1.0` that indicates our transcription model's relative confidence that this text was spoken by this speaker.",
                  "key": "speaker_confidence",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  }
                },
                {
                  "description": "A high-dimensional embedding in emotion space.",
                  "key": "emotions",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "id",
                      "value": "type_:EmotionScore"
                    }
                  }
                }
              ]
            }
          },
          "type_:Queued": {
            "name": "Queued",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "When this job was created (Unix timestamp in milliseconds).",
                  "key": "created_timestamp_ms",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                }
              ]
            }
          },
          "type_:RegistryFileDetail": {
            "name": "RegistryFileDetail",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "File ID in the Asset Registry",
                  "key": "file_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "URL to the file in the Asset Registry",
                  "key": "file_url",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              ]
            }
          },
          "type_:Regression": {
            "name": "Regression",
            "shape": {
              "type": "alias",
              "value": {
                "type": "map",
                "keyType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                },
                "valueType": {
                  "type": "unknown"
                }
              }
            }
          },
          "type_:SentimentScore": {
            "name": "SentimentScore",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Level of sentiment, ranging from `1` (negative) to `9` (positive)",
                  "key": "name",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "Prediction for this level of sentiment",
                  "key": "score",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              ]
            }
          },
          "type_:SortBy": {
            "name": "SortBy",
            "shape": {
              "type": "enum",
              "values": [
                {
                  "value": "created"
                },
                {
                  "value": "started"
                },
                {
                  "value": "ended"
                }
              ]
            }
          },
          "type_:Source": {
            "name": "Source",
            "shape": {
              "type": "discriminatedUnion",
              "discriminant": "type",
              "variants": [
                {
                  "discriminantValue": "url",
                  "additionalProperties": {
                    "extends": ["type_:SourceUrl"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "file",
                  "additionalProperties": {
                    "extends": ["type_:SourceFile"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "text",
                  "additionalProperties": {
                    "extends": ["type_:SourceTextSource"],
                    "properties": []
                  }
                }
              ]
            }
          },
          "type_:SourceFile": {
            "name": "SourceFile",
            "shape": {
              "type": "object",
              "extends": ["type_:File"],
              "properties": []
            }
          },
          "type_:SourceTextSource": {
            "name": "SourceTextSource",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": []
            }
          },
          "type_:SourceUrl": {
            "name": "SourceUrl",
            "shape": {
              "type": "object",
              "extends": ["type_:Url"],
              "properties": []
            }
          },
          "type_:Url": {
            "name": "Url",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The URL of the source media file.",
                  "key": "url",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              ]
            }
          },
          "type_:StateEmbeddingGeneration": {
            "name": "StateEmbeddingGeneration",
            "shape": {
              "type": "discriminatedUnion",
              "discriminant": "status",
              "variants": [
                {
                  "discriminantValue": "QUEUED",
                  "additionalProperties": {
                    "extends": ["type_:StateEmbeddingGenerationQueued"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "IN_PROGRESS",
                  "additionalProperties": {
                    "extends": ["type_:StateEmbeddingGenerationInProgress"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "COMPLETED",
                  "additionalProperties": {
                    "extends": ["type_:StateEmbeddingGenerationCompletedEmbeddingGeneration"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "FAILED",
                  "additionalProperties": {
                    "extends": ["type_:StateEmbeddingGenerationFailed"],
                    "properties": []
                  }
                }
              ]
            }
          },
          "type_:StateEmbeddingGenerationCompletedEmbeddingGeneration": {
            "name": "StateEmbeddingGenerationCompletedEmbeddingGeneration",
            "shape": {
              "type": "object",
              "extends": ["type_:CompletedEmbeddingGeneration"],
              "properties": []
            }
          },
          "type_:StateEmbeddingGenerationFailed": {
            "name": "StateEmbeddingGenerationFailed",
            "shape": {
              "type": "object",
              "extends": ["type_:Failed"],
              "properties": []
            }
          },
          "type_:StateEmbeddingGenerationInProgress": {
            "name": "StateEmbeddingGenerationInProgress",
            "shape": {
              "type": "object",
              "extends": ["type_:InProgress"],
              "properties": []
            }
          },
          "type_:StateEmbeddingGenerationQueued": {
            "name": "StateEmbeddingGenerationQueued",
            "shape": {
              "type": "object",
              "extends": ["type_:Queued"],
              "properties": []
            }
          },
          "type_:StateInference": {
            "name": "StateInference",
            "shape": {
              "type": "discriminatedUnion",
              "discriminant": "status",
              "variants": [
                {
                  "discriminantValue": "QUEUED",
                  "additionalProperties": {
                    "extends": ["type_:StateInferenceQueued"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "IN_PROGRESS",
                  "additionalProperties": {
                    "extends": ["type_:StateInferenceInProgress"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "COMPLETED",
                  "additionalProperties": {
                    "extends": ["type_:StateInferenceCompletedInference"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "FAILED",
                  "additionalProperties": {
                    "extends": ["type_:StateInferenceFailed"],
                    "properties": []
                  }
                }
              ]
            }
          },
          "type_:StateInferenceCompletedInference": {
            "name": "StateInferenceCompletedInference",
            "shape": {
              "type": "object",
              "extends": ["type_:CompletedInference"],
              "properties": []
            }
          },
          "type_:StateInferenceFailed": {
            "name": "StateInferenceFailed",
            "shape": {
              "type": "object",
              "extends": ["type_:Failed"],
              "properties": []
            }
          },
          "type_:StateInferenceInProgress": {
            "name": "StateInferenceInProgress",
            "shape": {
              "type": "object",
              "extends": ["type_:InProgress"],
              "properties": []
            }
          },
          "type_:StateInferenceQueued": {
            "name": "StateInferenceQueued",
            "shape": {
              "type": "object",
              "extends": ["type_:Queued"],
              "properties": []
            }
          },
          "type_:StateTlInference": {
            "name": "StateTlInference",
            "shape": {
              "type": "discriminatedUnion",
              "discriminant": "status",
              "variants": [
                {
                  "discriminantValue": "QUEUED",
                  "additionalProperties": {
                    "extends": ["type_:StateTlInferenceQueued"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "IN_PROGRESS",
                  "additionalProperties": {
                    "extends": ["type_:StateTlInferenceInProgress"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "COMPLETED",
                  "additionalProperties": {
                    "extends": ["type_:StateTlInferenceCompletedTlInference"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "FAILED",
                  "additionalProperties": {
                    "extends": ["type_:StateTlInferenceFailed"],
                    "properties": []
                  }
                }
              ]
            }
          },
          "type_:StateTlInferenceCompletedTlInference": {
            "name": "StateTlInferenceCompletedTlInference",
            "shape": {
              "type": "object",
              "extends": ["type_:CompletedTlInference"],
              "properties": []
            }
          },
          "type_:StateTlInferenceFailed": {
            "name": "StateTlInferenceFailed",
            "shape": {
              "type": "object",
              "extends": ["type_:Failed"],
              "properties": []
            }
          },
          "type_:StateTlInferenceInProgress": {
            "name": "StateTlInferenceInProgress",
            "shape": {
              "type": "object",
              "extends": ["type_:InProgress"],
              "properties": []
            }
          },
          "type_:StateTlInferenceQueued": {
            "name": "StateTlInferenceQueued",
            "shape": {
              "type": "object",
              "extends": ["type_:Queued"],
              "properties": []
            }
          },
          "type_:StateTraining": {
            "name": "StateTraining",
            "shape": {
              "type": "discriminatedUnion",
              "discriminant": "status",
              "variants": [
                {
                  "discriminantValue": "QUEUED",
                  "additionalProperties": {
                    "extends": ["type_:StateTrainingQueued"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "IN_PROGRESS",
                  "additionalProperties": {
                    "extends": ["type_:StateTrainingInProgress"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "COMPLETED",
                  "additionalProperties": {
                    "extends": ["type_:StateTrainingCompletedTraining"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "FAILED",
                  "additionalProperties": {
                    "extends": ["type_:StateTrainingFailed"],
                    "properties": []
                  }
                }
              ]
            }
          },
          "type_:StateTrainingCompletedTraining": {
            "name": "StateTrainingCompletedTraining",
            "shape": {
              "type": "object",
              "extends": ["type_:CompletedTraining"],
              "properties": []
            }
          },
          "type_:StateTrainingFailed": {
            "name": "StateTrainingFailed",
            "shape": {
              "type": "object",
              "extends": ["type_:Failed"],
              "properties": []
            }
          },
          "type_:StateTrainingInProgress": {
            "name": "StateTrainingInProgress",
            "shape": {
              "type": "object",
              "extends": ["type_:InProgress"],
              "properties": []
            }
          },
          "type_:StateTrainingQueued": {
            "name": "StateTrainingQueued",
            "shape": {
              "type": "object",
              "extends": ["type_:Queued"],
              "properties": []
            }
          },
          "type_:Status": {
            "name": "Status",
            "shape": {
              "type": "enum",
              "values": [
                {
                  "value": "QUEUED"
                },
                {
                  "value": "IN_PROGRESS"
                },
                {
                  "value": "COMPLETED"
                },
                {
                  "value": "FAILED"
                }
              ]
            }
          },
          "type_:TlInferencePrediction": {
            "name": "TlInferencePrediction",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "A file path relative to the top level source URL or file.",
                  "key": "file",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "file_type",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "custom_models",
                  "valueType": {
                    "type": "map",
                    "keyType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    },
                    "valueType": {
                      "type": "id",
                      "value": "type_:CustomModelPrediction"
                    }
                  }
                }
              ]
            }
          },
          "type_:TlInferenceResults": {
            "name": "TlInferenceResults",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "predictions",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "id",
                      "value": "type_:TlInferencePrediction"
                    }
                  }
                },
                {
                  "key": "errors",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "id",
                      "value": "type_:Error"
                    }
                  }
                }
              ]
            }
          },
          "type_:TlInferenceSourcePredictResult": {
            "name": "TlInferenceSourcePredictResult",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "source",
                  "valueType": {
                    "type": "id",
                    "value": "type_:Source"
                  }
                },
                {
                  "key": "results",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:TlInferenceResults"
                    }
                  }
                },
                {
                  "description": "An error message.",
                  "key": "error",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:Tag": {
            "name": "Tag",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "key",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "value",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              ]
            }
          },
          "type_:Target": {
            "name": "Target",
            "shape": {
              "type": "undiscriminatedUnion",
              "variants": [
                {
                  "type": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                {
                  "type": {
                    "type": "primitive",
                    "value": {
                      "type": "double"
                    }
                  }
                },
                {
                  "type": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              ]
            }
          },
          "type_:Task": {
            "name": "Task",
            "shape": {
              "type": "discriminatedUnion",
              "discriminant": "type",
              "variants": [
                {
                  "discriminantValue": "classification",
                  "additionalProperties": {
                    "extends": ["type_:TaskClassification"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "regression",
                  "additionalProperties": {
                    "extends": ["type_:TaskRegression"],
                    "properties": []
                  }
                }
              ]
            }
          },
          "type_:TaskClassification": {
            "name": "TaskClassification",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": []
            }
          },
          "type_:TaskRegression": {
            "name": "TaskRegression",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": []
            }
          },
          "type_:TextSource": {
            "name": "TextSource",
            "shape": {
              "type": "alias",
              "value": {
                "type": "map",
                "keyType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                },
                "valueType": {
                  "type": "unknown"
                }
              }
            }
          },
          "type_:TimeInterval": {
            "description": "A time range with a beginning and end, measured in seconds.",
            "name": "TimeInterval",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Beginning of time range in seconds.",
                  "key": "begin",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "double"
                    }
                  }
                },
                {
                  "description": "End of time range in seconds.",
                  "key": "end",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "double"
                    }
                  }
                }
              ]
            }
          },
          "type_:TlInferenceBaseRequest": {
            "name": "TlInferenceBaseRequest",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "custom_model",
                  "valueType": {
                    "type": "id",
                    "value": "type_:TlInferenceCustomModel"
                  }
                },
                {
                  "description": "URLs to the media files to be processed. Each must be a valid public URL to a media file (see recommended input filetypes) or an archive (`.zip`, `.tar.gz`, `.tar.bz2`, `.tar.xz`) of media files.\n\nIf you wish to supply more than 100 URLs, consider providing them as an archive (`.zip`, `.tar.gz`, `.tar.bz2`, `.tar.xz`).",
                  "key": "urls",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                {
                  "description": "List of File IDs corresponding to the files in the asset registry.",
                  "key": "registry_files",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                {
                  "description": "If provided, a `POST` request will be made to the URL with the generated predictions on completion or the error message on failure.",
                  "key": "callback_url",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "Whether to send an email notification to the user upon job completion/failure.",
                  "key": "notify",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:TlInferenceCustomModel": {
            "name": "TlInferenceCustomModel",
            "shape": {
              "type": "undiscriminatedUnion",
              "variants": [
                {
                  "type": {
                    "type": "id",
                    "value": "type_:TlInferenceCustomModelId"
                  },
                  "displayName": "Tl Inference Custom Model Id"
                },
                {
                  "type": {
                    "type": "id",
                    "value": "type_:TlInferenceCustomModelVersionId"
                  },
                  "displayName": "Tl Inference Custom Model Version Id"
                }
              ]
            }
          },
          "type_:TlInferenceCustomModelId": {
            "name": "TlInferenceCustomModelId",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              ]
            }
          },
          "type_:TlInferenceCustomModelVersionId": {
            "name": "TlInferenceCustomModelVersionId",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "version_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              ]
            }
          },
          "type_:ToxicityScore": {
            "name": "ToxicityScore",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Category of toxicity.",
                  "key": "name",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "Prediction for this category of toxicity",
                  "key": "score",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              ]
            }
          },
          "type_:TrainingBaseRequest": {
            "name": "TrainingBaseRequest",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "custom_model",
                  "valueType": {
                    "type": "id",
                    "value": "type_:CustomModelRequest"
                  }
                },
                {
                  "key": "dataset",
                  "valueType": {
                    "type": "id",
                    "value": "type_:Dataset"
                  }
                },
                {
                  "key": "target_feature",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "key": "task",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:Task"
                    }
                  }
                },
                {
                  "key": "evaluation",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:EvaluationArgs"
                    }
                  }
                },
                {
                  "key": "alternatives",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "id",
                        "value": "type_:Alternative"
                      }
                    }
                  }
                },
                {
                  "key": "callback_url",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "key": "notify",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:TrainingCustomModel": {
            "name": "TrainingCustomModel",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "version_id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:Transcription": {
            "name": "Transcription",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "language",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:Bcp47Tag"
                    }
                  }
                },
                {
                  "description": "Whether to return identifiers for speakers over time. If `true`, unique identifiers will be assigned to spoken words to differentiate different speakers. If `false`, all speakers will be tagged with an `unknown` ID.",
                  "key": "identify_speakers",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean"
                      }
                    }
                  }
                },
                {
                  "description": "Transcript confidence threshold. Transcripts generated with a confidence less than this threshold will be considered invalid and not used as an input for model inference.",
                  "key": "confidence_threshold",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:TranscriptionMetadata": {
            "description": "Transcription metadata for your media file.",
            "name": "TranscriptionMetadata",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Value between `0.0` and `1.0` indicating our transcription model's relative confidence in the transcription of your media file.",
                  "key": "confidence",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "double"
                    }
                  }
                },
                {
                  "key": "detected_language",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:Bcp47Tag"
                    }
                  }
                }
              ]
            }
          },
          "type_:Type": {
            "name": "Type",
            "shape": {
              "type": "enum",
              "values": [
                {
                  "value": "EMBEDDING_GENERATION"
                },
                {
                  "value": "INFERENCE"
                },
                {
                  "value": "TL_INFERENCE"
                },
                {
                  "value": "TRAINING"
                }
              ]
            }
          },
          "type_:Unconfigurable": {
            "description": "To include predictions for this model type, set this field to `{}`. It is currently not configurable further.",
            "name": "Unconfigurable",
            "shape": {
              "type": "alias",
              "value": {
                "type": "map",
                "keyType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                },
                "valueType": {
                  "type": "unknown"
                }
              }
            }
          },
          "type_:UnionJob": {
            "name": "UnionJob",
            "shape": {
              "type": "discriminatedUnion",
              "discriminant": "type",
              "variants": [
                {
                  "discriminantValue": "EMBEDDING_GENERATION",
                  "additionalProperties": {
                    "extends": ["type_:UnionJobJobEmbeddingGeneration"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "INFERENCE",
                  "additionalProperties": {
                    "extends": ["type_:UnionJobJobInference"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "TL_INFERENCE",
                  "additionalProperties": {
                    "extends": ["type_:UnionJobJobTlInference"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "TRAINING",
                  "additionalProperties": {
                    "extends": ["type_:UnionJobJobTraining"],
                    "properties": []
                  }
                }
              ]
            }
          },
          "type_:UnionJobJobEmbeddingGeneration": {
            "name": "UnionJobJobEmbeddingGeneration",
            "shape": {
              "type": "object",
              "extends": ["type_:JobEmbeddingGeneration"],
              "properties": []
            }
          },
          "type_:UnionJobJobInference": {
            "name": "UnionJobJobInference",
            "shape": {
              "type": "object",
              "extends": ["type_:JobInference"],
              "properties": []
            }
          },
          "type_:UnionJobJobTlInference": {
            "name": "UnionJobJobTlInference",
            "shape": {
              "type": "object",
              "extends": ["type_:JobTlInference"],
              "properties": []
            }
          },
          "type_:UnionJobJobTraining": {
            "name": "UnionJobJobTraining",
            "shape": {
              "type": "object",
              "extends": ["type_:JobTraining"],
              "properties": []
            }
          },
          "type_:UnionPredictResult": {
            "name": "UnionPredictResult",
            "shape": {
              "type": "undiscriminatedUnion",
              "variants": [
                {
                  "type": {
                    "type": "id",
                    "value": "type_:InferenceSourcePredictResult"
                  },
                  "displayName": "Inference Source Predict Result"
                },
                {
                  "type": {
                    "type": "id",
                    "value": "type_:TlInferenceSourcePredictResult"
                  },
                  "displayName": "Tl Inference Source Predict Result"
                }
              ]
            }
          },
          "type_:ValidationArgs": {
            "name": "ValidationArgs",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "positive_label",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:Target"
                    }
                  }
                }
              ]
            }
          },
          "type_:When": {
            "name": "When",
            "shape": {
              "type": "enum",
              "values": [
                {
                  "value": "created_before"
                },
                {
                  "value": "created_after"
                }
              ]
            }
          },
          "type_:Window": {
            "name": "Window",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The length of the sliding window.",
                  "key": "length",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  }
                },
                {
                  "description": "The step size of the sliding window.",
                  "key": "step",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  }
                }
              ]
            }
          }
        },
        "subpackages": {
          "subpackage_files": {
            "subpackageId": "subpackage_files",
            "name": "files",
            "endpoints": [
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.hume.ai/v0/registry"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "get-files-and-attributes-by-user",
                "migratedFromUrlSlugs": ["list-files"],
                "method": "GET",
                "id": "getFilesAndAttributesByUser",
                "name": "List files",
                "path": {
                  "pathParameters": [],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/files"
                    }
                  ]
                },
                "queryParameters": [
                  {
                    "description": "Index of the first result",
                    "key": "page_number",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "integer"
                        }
                      }
                    }
                  },
                  {
                    "description": "Maximum number of results",
                    "key": "page_size",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "integer"
                        }
                      }
                    }
                  },
                  {
                    "description": "`True` Will show all assets owned by you and shared with you. `False` Will show only your assets. Default: `False`",
                    "key": "shared_assets",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "boolean"
                        }
                      }
                    }
                  }
                ],
                "headers": [],
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_:FilePage"
                    }
                  }
                },
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "path": "/files",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 200,
                    "responseBody": {
                      "content": [
                        {
                          "file": {
                            "id": "id",
                            "user_id": "user_id",
                            "data_type": "data_type",
                            "is_sanitized": true,
                            "is_owned_by_reader": true
                          },
                          "attributes": [
                            {
                              "name": "name",
                              "value": "value"
                            }
                          ]
                        }
                      ],
                      "pageable": {
                        "offset": 1,
                        "sort": {
                          "empty": true,
                          "sorted": true,
                          "unsorted": true
                        },
                        "paged": true,
                        "unpaged": true,
                        "page_number": 1,
                        "page_size": 1
                      },
                      "total": 1,
                      "last": true,
                      "total_elements": 1,
                      "total_pages": 1,
                      "size": 1,
                      "number": 1,
                      "sort": {
                        "empty": true,
                        "sorted": true,
                        "unsorted": true
                      },
                      "first": true,
                      "number_of_elements": 1,
                      "empty": true
                    },
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "content": [
                          {
                            "file": {
                              "id": "id",
                              "user_id": "user_id",
                              "data_type": "data_type",
                              "is_sanitized": true,
                              "is_owned_by_reader": true
                            },
                            "attributes": [
                              {
                                "name": "name",
                                "value": "value"
                              }
                            ]
                          }
                        ],
                        "pageable": {
                          "offset": 1,
                          "sort": {
                            "empty": true,
                            "sorted": true,
                            "unsorted": true
                          },
                          "paged": true,
                          "unpaged": true,
                          "page_number": 1,
                          "page_size": 1
                        },
                        "total": 1,
                        "last": true,
                        "total_elements": 1,
                        "total_pages": 1,
                        "size": 1,
                        "number": 1,
                        "sort": {
                          "empty": true,
                          "sorted": true,
                          "unsorted": true
                        },
                        "first": true,
                        "number_of_elements": 1,
                        "empty": true
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Returns 200 if successful",
                "authed": true
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.hume.ai/v0/registry"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "create-files",
                "method": "POST",
                "id": "createFiles",
                "name": "Create files",
                "path": {
                  "pathParameters": [],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/files"
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "request": {
                  "contentType": "application/json",
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "list",
                      "itemType": {
                        "type": "id",
                        "value": "type_:FileWithAttributesInput"
                      }
                    }
                  }
                },
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "list",
                      "itemType": {
                        "type": "id",
                        "value": "type_:FileWithAttributes"
                      }
                    }
                  }
                },
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "path": "/files",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {},
                    "requestBody": [
                      {
                        "file": {
                          "name": "name",
                          "hume_storage": true,
                          "data_type": "data_type"
                        }
                      }
                    ],
                    "responseStatusCode": 200,
                    "responseBody": [
                      {
                        "file": {
                          "id": "id",
                          "name": "name",
                          "uri": "uri",
                          "upload_uri": "upload_uri",
                          "thumbnail_uri": "thumbnail_uri",
                          "user_id": "user_id",
                          "data_type": "data_type",
                          "created_on": 1,
                          "modified_on": 1,
                          "metadata": {
                            "metadata": {}
                          },
                          "hume_storage": true,
                          "hume_storage_upload_timestamp": 1,
                          "is_sanitized": true,
                          "is_owned_by_reader": true,
                          "is_linked_to_publicly_shared": true,
                          "is_linked_to_hume_model": true
                        },
                        "attributes": [
                          {
                            "name": "name",
                            "value": "value"
                          }
                        ]
                      }
                    ],
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": [
                        {
                          "file": {
                            "name": "name",
                            "hume_storage": true,
                            "data_type": "data_type"
                          }
                        }
                      ]
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": [
                        {
                          "file": {
                            "id": "id",
                            "name": "name",
                            "uri": "uri",
                            "upload_uri": "upload_uri",
                            "thumbnail_uri": "thumbnail_uri",
                            "user_id": "user_id",
                            "data_type": "data_type",
                            "created_on": 1,
                            "modified_on": 1,
                            "metadata": {
                              "metadata": {}
                            },
                            "hume_storage": true,
                            "hume_storage_upload_timestamp": 1,
                            "is_sanitized": true,
                            "is_owned_by_reader": true,
                            "is_linked_to_publicly_shared": true,
                            "is_linked_to_hume_model": true
                          },
                          "attributes": [
                            {
                              "name": "name",
                              "value": "value"
                            }
                          ]
                        }
                      ]
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Returns 201 if successful",
                "authed": true
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.hume.ai/v0/registry"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "upload-file",
                "method": "POST",
                "id": "uploadFile",
                "name": "Upload file",
                "path": {
                  "pathParameters": [],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/files/upload"
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "request": {
                  "contentType": "multipart/form-data",
                  "type": {
                    "type": "fileUpload",
                    "value": {
                      "name": "FilesUploadFileRequest",
                      "properties": [
                        {
                          "type": "file",
                          "value": {
                            "type": "file",
                            "key": "file",
                            "isOptional": false
                          }
                        },
                        {
                          "type": "file",
                          "value": {
                            "type": "file",
                            "key": "attributes",
                            "isOptional": true
                          }
                        }
                      ]
                    }
                  }
                },
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_:FileWithAttributes"
                    }
                  }
                },
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "path": "/files/upload",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {},
                    "requestBody": {
                      "file": "<filename1>"
                    },
                    "responseStatusCode": 200,
                    "responseBody": {
                      "file": {
                        "id": "string",
                        "name": "string",
                        "uri": "string",
                        "upload_uri": "string",
                        "thumbnail_uri": "string",
                        "user_id": "string",
                        "data_type": "string",
                        "created_on": 0,
                        "modified_on": 0,
                        "metadata": {
                          "string": {
                            "string": {}
                          }
                        },
                        "hume_storage": true,
                        "hume_storage_upload_timestamp": 0,
                        "is_sanitized": true,
                        "is_owned_by_reader": true,
                        "is_linked_to_publicly_shared": true,
                        "is_linked_to_hume_model": true
                      },
                      "attributes": [
                        {
                          "name": "string",
                          "value": "string"
                        }
                      ]
                    },
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "file": "<filename1>"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "file": {
                          "id": "string",
                          "name": "string",
                          "uri": "string",
                          "upload_uri": "string",
                          "thumbnail_uri": "string",
                          "user_id": "string",
                          "data_type": "string",
                          "created_on": 0,
                          "modified_on": 0,
                          "metadata": {
                            "string": {
                              "string": {}
                            }
                          },
                          "hume_storage": true,
                          "hume_storage_upload_timestamp": 0,
                          "is_sanitized": true,
                          "is_owned_by_reader": true,
                          "is_linked_to_publicly_shared": true,
                          "is_linked_to_hume_model": true
                        },
                        "attributes": [
                          {
                            "name": "string",
                            "value": "string"
                          }
                        ]
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Upload a file synchronously. Returns 201 if successful. Files must have a name. Files must specify Content-Type. Request bodies, and therefore files, are limited to 100MB",
                "authed": true
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.hume.ai/v0/registry"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "get-file-and-attributes-by-id",
                "migratedFromUrlSlugs": ["get-file"],
                "method": "GET",
                "id": "getFileAndAttributesById",
                "name": "Get file",
                "path": {
                  "pathParameters": [
                    {
                      "description": "Hume-generated ID of a File",
                      "key": "id",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/files/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "id"
                    },
                    {
                      "type": "literal",
                      "value": ""
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_:FileWithAttributes"
                    }
                  }
                },
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "path": "/files/id",
                    "pathParameters": {
                      "id": "id"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 200,
                    "responseBody": {
                      "file": {
                        "id": "id",
                        "name": "name",
                        "uri": "uri",
                        "upload_uri": "upload_uri",
                        "thumbnail_uri": "thumbnail_uri",
                        "user_id": "user_id",
                        "data_type": "data_type",
                        "created_on": 1,
                        "modified_on": 1,
                        "metadata": {
                          "metadata": {}
                        },
                        "hume_storage": true,
                        "hume_storage_upload_timestamp": 1,
                        "is_sanitized": true,
                        "is_owned_by_reader": true,
                        "is_linked_to_publicly_shared": true,
                        "is_linked_to_hume_model": true
                      },
                      "attributes": [
                        {
                          "name": "name",
                          "value": "value"
                        }
                      ]
                    },
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "file": {
                          "id": "id",
                          "name": "name",
                          "uri": "uri",
                          "upload_uri": "upload_uri",
                          "thumbnail_uri": "thumbnail_uri",
                          "user_id": "user_id",
                          "data_type": "data_type",
                          "created_on": 1,
                          "modified_on": 1,
                          "metadata": {
                            "metadata": {}
                          },
                          "hume_storage": true,
                          "hume_storage_upload_timestamp": 1,
                          "is_sanitized": true,
                          "is_owned_by_reader": true,
                          "is_linked_to_publicly_shared": true,
                          "is_linked_to_hume_model": true
                        },
                        "attributes": [
                          {
                            "name": "name",
                            "value": "value"
                          }
                        ]
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Returns 200 if successful",
                "authed": true
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.hume.ai/v0/registry"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "delete-file",
                "method": "DELETE",
                "id": "deleteFile",
                "name": "Delete file",
                "path": {
                  "pathParameters": [
                    {
                      "description": "Hume-generated ID of a File",
                      "key": "id",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/files/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "id"
                    },
                    {
                      "type": "literal",
                      "value": ""
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "path": "/files/id",
                    "pathParameters": {
                      "id": "id"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 204,
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Returns 204 if successful",
                "authed": true
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.hume.ai/v0/registry"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "rename-file",
                "migratedFromUrlSlugs": ["update-file-name"],
                "method": "PATCH",
                "id": "renameFile",
                "name": "Update file name",
                "path": {
                  "pathParameters": [
                    {
                      "description": "Hume-generated ID of a File",
                      "key": "id",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/files/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "id"
                    },
                    {
                      "type": "literal",
                      "value": ""
                    }
                  ]
                },
                "queryParameters": [
                  {
                    "description": "New File name",
                    "key": "name",
                    "type": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                ],
                "headers": [],
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_:FileWithAttributes"
                    }
                  }
                },
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "path": "/files/id",
                    "pathParameters": {
                      "id": "id"
                    },
                    "queryParameters": {
                      "name": "name"
                    },
                    "headers": {},
                    "responseStatusCode": 200,
                    "responseBody": {
                      "file": {
                        "id": "id",
                        "name": "name",
                        "uri": "uri",
                        "upload_uri": "upload_uri",
                        "thumbnail_uri": "thumbnail_uri",
                        "user_id": "user_id",
                        "data_type": "data_type",
                        "created_on": 1,
                        "modified_on": 1,
                        "metadata": {
                          "metadata": {}
                        },
                        "hume_storage": true,
                        "hume_storage_upload_timestamp": 1,
                        "is_sanitized": true,
                        "is_owned_by_reader": true,
                        "is_linked_to_publicly_shared": true,
                        "is_linked_to_hume_model": true
                      },
                      "attributes": [
                        {
                          "name": "name",
                          "value": "value"
                        }
                      ]
                    },
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "file": {
                          "id": "id",
                          "name": "name",
                          "uri": "uri",
                          "upload_uri": "upload_uri",
                          "thumbnail_uri": "thumbnail_uri",
                          "user_id": "user_id",
                          "data_type": "data_type",
                          "created_on": 1,
                          "modified_on": 1,
                          "metadata": {
                            "metadata": {}
                          },
                          "hume_storage": true,
                          "hume_storage_upload_timestamp": 1,
                          "is_sanitized": true,
                          "is_owned_by_reader": true,
                          "is_linked_to_publicly_shared": true,
                          "is_linked_to_hume_model": true
                        },
                        "attributes": [
                          {
                            "name": "name",
                            "value": "value"
                          }
                        ]
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Returns 200 if successful",
                "authed": true
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.hume.ai/v0/registry"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "get-predictions-by-file-id",
                "migratedFromUrlSlugs": ["get-file-predictions"],
                "method": "GET",
                "id": "getPredictionsByFileId",
                "name": "Get file predictions",
                "path": {
                  "pathParameters": [
                    {
                      "description": "Hume-generated ID of a File",
                      "key": "id",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/files/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "id"
                    },
                    {
                      "type": "literal",
                      "value": "/predictions"
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "path": "/files/id/predictions",
                    "pathParameters": {
                      "id": "id"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 204,
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Returns 200 if successful",
                "authed": true
              }
            ],
            "types": [],
            "subpackages": [],
            "urlSlug": "files",
            "webhooks": [],
            "websockets": []
          },
          "subpackage_datasets": {
            "subpackageId": "subpackage_datasets",
            "name": "datasets",
            "endpoints": [
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.hume.ai/v0/registry"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "list-datasets",
                "method": "GET",
                "id": "listDatasets",
                "name": "List datasets",
                "path": {
                  "pathParameters": [],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/datasets"
                    }
                  ]
                },
                "queryParameters": [
                  {
                    "description": "Dataset name to be queried",
                    "key": "name",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  {
                    "description": "Index of the first result",
                    "key": "page_number",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "integer"
                        }
                      }
                    }
                  },
                  {
                    "description": "Maximum number of results",
                    "key": "page_size",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "integer"
                        }
                      }
                    }
                  },
                  {
                    "description": "`True` Will show all assets owned by you and shared with you. `False` Will show only your assets. Default: `False`",
                    "key": "shared_assets",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "boolean"
                        }
                      }
                    }
                  }
                ],
                "headers": [],
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_:DatasetPage"
                    }
                  }
                },
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "path": "/datasets",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 200,
                    "responseBody": {
                      "content": [
                        {
                          "id": "id",
                          "name": "name",
                          "latest_version": {
                            "id": "id",
                            "user_id": "user_id",
                            "labels_file_uri": "labels_file_uri",
                            "feature_types": {
                              "feature_types": "CATEGORICAL"
                            },
                            "dataset_id": "dataset_id",
                            "dataset_version": 1,
                            "created_on": 1
                          },
                          "modified_on": 1,
                          "metadata": {
                            "metadata": {}
                          }
                        }
                      ],
                      "pageable": {
                        "offset": 1,
                        "sort": {
                          "empty": true,
                          "sorted": true,
                          "unsorted": true
                        },
                        "paged": true,
                        "unpaged": true,
                        "page_number": 1,
                        "page_size": 1
                      },
                      "total": 1,
                      "last": true,
                      "total_elements": 1,
                      "total_pages": 1,
                      "size": 1,
                      "number": 1,
                      "sort": {
                        "empty": true,
                        "sorted": true,
                        "unsorted": true
                      },
                      "first": true,
                      "number_of_elements": 1,
                      "empty": true
                    },
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "content": [
                          {
                            "id": "id",
                            "name": "name",
                            "latest_version": {
                              "id": "id",
                              "user_id": "user_id",
                              "labels_file_uri": "labels_file_uri",
                              "feature_types": {
                                "feature_types": "CATEGORICAL"
                              },
                              "dataset_id": "dataset_id",
                              "dataset_version": 1,
                              "created_on": 1
                            },
                            "modified_on": 1,
                            "metadata": {
                              "metadata": {}
                            }
                          }
                        ],
                        "pageable": {
                          "offset": 1,
                          "sort": {
                            "empty": true,
                            "sorted": true,
                            "unsorted": true
                          },
                          "paged": true,
                          "unpaged": true,
                          "page_number": 1,
                          "page_size": 1
                        },
                        "total": 1,
                        "last": true,
                        "total_elements": 1,
                        "total_pages": 1,
                        "size": 1,
                        "number": 1,
                        "sort": {
                          "empty": true,
                          "sorted": true,
                          "unsorted": true
                        },
                        "first": true,
                        "number_of_elements": 1,
                        "empty": true
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Returns 200 if successful",
                "authed": true
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.hume.ai/v0/registry"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "create-dataset-1",
                "migratedFromUrlSlugs": ["create-dataset"],
                "method": "POST",
                "id": "createDataset_1",
                "name": "Create dataset",
                "path": {
                  "pathParameters": [],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/datasets"
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "request": {
                  "contentType": "multipart/form-data",
                  "type": {
                    "type": "fileUpload",
                    "value": {
                      "name": "DatasetsCreateDataset1Request",
                      "properties": [
                        {
                          "type": "bodyProperty",
                          "key": "name",
                          "valueType": {
                            "type": "primitive",
                            "value": {
                              "type": "string"
                            }
                          }
                        },
                        {
                          "type": "file",
                          "value": {
                            "type": "file",
                            "key": "feature_types",
                            "isOptional": true
                          }
                        },
                        {
                          "type": "file",
                          "value": {
                            "type": "file",
                            "key": "labels_file",
                            "isOptional": false
                          }
                        }
                      ]
                    }
                  }
                },
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_:ReturnDataset"
                    }
                  }
                },
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "path": "/datasets",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {},
                    "requestBody": {
                      "name": "string",
                      "labels_file": "<filename1>"
                    },
                    "responseStatusCode": 200,
                    "responseBody": {
                      "id": "string",
                      "name": "string",
                      "latest_version": {
                        "id": "string",
                        "user_id": "string",
                        "labels_file_uri": "string",
                        "feature_types": {
                          "string": "CATEGORICAL"
                        },
                        "dataset_id": "string",
                        "dataset_version": 0,
                        "created_on": 0
                      },
                      "modified_on": 0,
                      "metadata": {
                        "string": {
                          "string": {}
                        }
                      }
                    },
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "name": "string",
                        "labels_file": "<filename1>"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "id": "string",
                        "name": "string",
                        "latest_version": {
                          "id": "string",
                          "user_id": "string",
                          "labels_file_uri": "string",
                          "feature_types": {
                            "string": "CATEGORICAL"
                          },
                          "dataset_id": "string",
                          "dataset_version": 0,
                          "created_on": 0
                        },
                        "modified_on": 0,
                        "metadata": {
                          "string": {
                            "string": {}
                          }
                        }
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Returns 201 if successful",
                "authed": true
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.hume.ai/v0/registry"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "get-dataset-by-id",
                "migratedFromUrlSlugs": ["get-dataset"],
                "method": "GET",
                "id": "getDatasetById",
                "name": "Get dataset",
                "path": {
                  "pathParameters": [
                    {
                      "description": "Hume-generated ID of a Dataset",
                      "key": "id",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/datasets/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "id"
                    },
                    {
                      "type": "literal",
                      "value": ""
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_:ReturnDataset"
                    }
                  }
                },
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "path": "/datasets/id",
                    "pathParameters": {
                      "id": "id"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 200,
                    "responseBody": {
                      "id": "id",
                      "name": "name",
                      "latest_version": {
                        "id": "id",
                        "user_id": "user_id",
                        "labels_file_uri": "labels_file_uri",
                        "feature_types": {
                          "feature_types": "CATEGORICAL"
                        },
                        "dataset_id": "dataset_id",
                        "dataset_version": 1,
                        "created_on": 1
                      },
                      "modified_on": 1,
                      "metadata": {
                        "metadata": {
                          "metadata": {
                            "key": "value"
                          }
                        }
                      }
                    },
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "id": "id",
                        "name": "name",
                        "latest_version": {
                          "id": "id",
                          "user_id": "user_id",
                          "labels_file_uri": "labels_file_uri",
                          "feature_types": {
                            "feature_types": "CATEGORICAL"
                          },
                          "dataset_id": "dataset_id",
                          "dataset_version": 1,
                          "created_on": 1
                        },
                        "modified_on": 1,
                        "metadata": {
                          "metadata": {
                            "metadata": {
                              "key": "value"
                            }
                          }
                        }
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Returns 200 if successful",
                "authed": true
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.hume.ai/v0/registry"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "update-dataset",
                "migratedFromUrlSlugs": ["create-dataset-version"],
                "method": "POST",
                "id": "updateDataset",
                "name": "Create dataset version",
                "path": {
                  "pathParameters": [
                    {
                      "description": "Hume-generated ID of a Dataset",
                      "key": "id",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/datasets/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "id"
                    },
                    {
                      "type": "literal",
                      "value": ""
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "request": {
                  "contentType": "multipart/form-data",
                  "type": {
                    "type": "fileUpload",
                    "value": {
                      "name": "DatasetsUpdateDatasetRequest",
                      "properties": [
                        {
                          "type": "file",
                          "value": {
                            "type": "file",
                            "key": "feature_types",
                            "isOptional": true
                          }
                        },
                        {
                          "type": "file",
                          "value": {
                            "type": "file",
                            "key": "labels_file",
                            "isOptional": false
                          }
                        }
                      ]
                    }
                  }
                },
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "list",
                      "itemType": {
                        "type": "id",
                        "value": "type_:ReturnDataset"
                      }
                    }
                  }
                },
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "path": "/datasets/:id",
                    "pathParameters": {
                      "id": ":id"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "requestBody": {
                      "labels_file": "<filename1>"
                    },
                    "responseStatusCode": 200,
                    "responseBody": [
                      {
                        "id": "string",
                        "name": "string",
                        "latest_version": {
                          "id": "string",
                          "user_id": "string",
                          "labels_file_uri": "string",
                          "feature_types": {
                            "string": "CATEGORICAL"
                          },
                          "dataset_id": "string",
                          "dataset_version": 0,
                          "created_on": 0
                        },
                        "modified_on": 0,
                        "metadata": {
                          "string": {
                            "string": {}
                          }
                        }
                      }
                    ],
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "labels_file": "<filename1>"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": [
                        {
                          "id": "string",
                          "name": "string",
                          "latest_version": {
                            "id": "string",
                            "user_id": "string",
                            "labels_file_uri": "string",
                            "feature_types": {
                              "string": "CATEGORICAL"
                            },
                            "dataset_id": "string",
                            "dataset_version": 0,
                            "created_on": 0
                          },
                          "modified_on": 0,
                          "metadata": {
                            "string": {
                              "string": {}
                            }
                          }
                        }
                      ]
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Returns 200 if successful",
                "authed": true
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.hume.ai/v0/registry"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "delete-dataset",
                "method": "DELETE",
                "id": "deleteDataset",
                "name": "Delete dataset",
                "path": {
                  "pathParameters": [
                    {
                      "description": "Hume-generated ID of a Dataset",
                      "key": "id",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/datasets/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "id"
                    },
                    {
                      "type": "literal",
                      "value": ""
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "path": "/datasets/id",
                    "pathParameters": {
                      "id": "id"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 204,
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Returns 204 if successful",
                "authed": true
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.hume.ai/v0/registry"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "list-dataset-versions",
                "migratedFromUrlSlugs": ["get-dataset-versions"],
                "method": "GET",
                "id": "listDatasetVersions",
                "name": "Get dataset versions",
                "path": {
                  "pathParameters": [
                    {
                      "description": "Hume-generated ID of a Dataset",
                      "key": "id",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/datasets/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "id"
                    },
                    {
                      "type": "literal",
                      "value": "/versions"
                    }
                  ]
                },
                "queryParameters": [
                  {
                    "description": "Index of the first result",
                    "key": "page_number",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "integer"
                        }
                      }
                    }
                  },
                  {
                    "description": "Maximum number of results",
                    "key": "page_size",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "integer"
                        }
                      }
                    }
                  },
                  {
                    "description": "`True` Will show all assets owned by you and shared with you. `False` Will show only your assets. Default: `False`",
                    "key": "shared_assets",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "boolean"
                        }
                      }
                    }
                  }
                ],
                "headers": [],
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_:DatasetVersionPage"
                    }
                  }
                },
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "path": "/datasets/id/versions",
                    "pathParameters": {
                      "id": "id"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 200,
                    "responseBody": {
                      "content": [
                        {
                          "id": "id",
                          "user_id": "user_id",
                          "labels_file_uri": "labels_file_uri",
                          "feature_types": {
                            "feature_types": "CATEGORICAL"
                          },
                          "dataset_id": "dataset_id",
                          "dataset_version": 1,
                          "created_on": 1
                        }
                      ],
                      "pageable": {
                        "offset": 1,
                        "sort": {
                          "empty": true,
                          "sorted": true,
                          "unsorted": true
                        },
                        "paged": true,
                        "unpaged": true,
                        "page_number": 1,
                        "page_size": 1
                      },
                      "total": 1,
                      "last": true,
                      "total_elements": 1,
                      "total_pages": 1,
                      "size": 1,
                      "number": 1,
                      "sort": {
                        "empty": true,
                        "sorted": true,
                        "unsorted": true
                      },
                      "first": true,
                      "number_of_elements": 1,
                      "empty": true
                    },
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "content": [
                          {
                            "id": "id",
                            "user_id": "user_id",
                            "labels_file_uri": "labels_file_uri",
                            "feature_types": {
                              "feature_types": "CATEGORICAL"
                            },
                            "dataset_id": "dataset_id",
                            "dataset_version": 1,
                            "created_on": 1
                          }
                        ],
                        "pageable": {
                          "offset": 1,
                          "sort": {
                            "empty": true,
                            "sorted": true,
                            "unsorted": true
                          },
                          "paged": true,
                          "unpaged": true,
                          "page_number": 1,
                          "page_size": 1
                        },
                        "total": 1,
                        "last": true,
                        "total_elements": 1,
                        "total_pages": 1,
                        "size": 1,
                        "number": 1,
                        "sort": {
                          "empty": true,
                          "sorted": true,
                          "unsorted": true
                        },
                        "first": true,
                        "number_of_elements": 1,
                        "empty": true
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Returns 200 if successful",
                "authed": true
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.hume.ai/v0/registry"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "get-files-from-dataset-latest-version",
                "migratedFromUrlSlugs": ["list-dataset-files"],
                "method": "GET",
                "id": "getFilesFromDatasetLatestVersion",
                "name": "List dataset files",
                "path": {
                  "pathParameters": [
                    {
                      "description": "Hume-generated ID of a Dataset",
                      "key": "id",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/datasets/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "id"
                    },
                    {
                      "type": "literal",
                      "value": "/files"
                    }
                  ]
                },
                "queryParameters": [
                  {
                    "description": "Index of the first result",
                    "key": "page_number",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "integer"
                        }
                      }
                    }
                  },
                  {
                    "description": "Maximum number of results",
                    "key": "page_size",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "integer"
                        }
                      }
                    }
                  },
                  {
                    "description": "`True` Will show all assets owned by you and shared with you. `False` Will show only your assets. Default: `False`",
                    "key": "shared_assets",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "boolean"
                        }
                      }
                    }
                  }
                ],
                "headers": [],
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "list",
                      "itemType": {
                        "type": "id",
                        "value": "type_:FilePage"
                      }
                    }
                  }
                },
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "path": "/datasets/id/files",
                    "pathParameters": {
                      "id": "id"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 200,
                    "responseBody": [
                      {
                        "content": [
                          {
                            "file": {
                              "id": "id",
                              "user_id": "user_id",
                              "data_type": "data_type",
                              "is_sanitized": true,
                              "is_owned_by_reader": true
                            }
                          }
                        ],
                        "pageable": {
                          "offset": 1,
                          "paged": true,
                          "unpaged": true,
                          "page_number": 1,
                          "page_size": 1
                        },
                        "total": 1,
                        "last": true,
                        "total_elements": 1,
                        "total_pages": 1,
                        "size": 1,
                        "number": 1,
                        "sort": {
                          "empty": true,
                          "sorted": true,
                          "unsorted": true
                        },
                        "first": true,
                        "number_of_elements": 1,
                        "empty": true
                      }
                    ],
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": [
                        {
                          "content": [
                            {
                              "file": {
                                "id": "id",
                                "user_id": "user_id",
                                "data_type": "data_type",
                                "is_sanitized": true,
                                "is_owned_by_reader": true
                              }
                            }
                          ],
                          "pageable": {
                            "offset": 1,
                            "paged": true,
                            "unpaged": true,
                            "page_number": 1,
                            "page_size": 1
                          },
                          "total": 1,
                          "last": true,
                          "total_elements": 1,
                          "total_pages": 1,
                          "size": 1,
                          "number": 1,
                          "sort": {
                            "empty": true,
                            "sorted": true,
                            "unsorted": true
                          },
                          "first": true,
                          "number_of_elements": 1,
                          "empty": true
                        }
                      ]
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Returns 200 if successful",
                "authed": true
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.hume.ai/v0/registry"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "get-dataset-version-by-id",
                "migratedFromUrlSlugs": ["get-dataset-version"],
                "method": "GET",
                "id": "getDatasetVersionById",
                "name": "Get dataset version",
                "path": {
                  "pathParameters": [
                    {
                      "description": "Hume-generated ID of a Dataset version",
                      "key": "id",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/datasets/version/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "id"
                    },
                    {
                      "type": "literal",
                      "value": ""
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_:DatasetLabels"
                    }
                  }
                },
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "path": "/datasets/version/id",
                    "pathParameters": {
                      "id": "id"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 200,
                    "responseBody": {
                      "id": "id",
                      "user_id": "user_id",
                      "labels_file_uri": "labels_file_uri",
                      "feature_type_json_uri": "feature_type_json_uri",
                      "dataset_id": "dataset_id",
                      "dataset_version": 1,
                      "created_on": 1,
                      "is_most_recent_version": true
                    },
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "id": "id",
                        "user_id": "user_id",
                        "labels_file_uri": "labels_file_uri",
                        "feature_type_json_uri": "feature_type_json_uri",
                        "dataset_id": "dataset_id",
                        "dataset_version": 1,
                        "created_on": 1,
                        "is_most_recent_version": true
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Returns 200 if successful",
                "authed": true
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.hume.ai/v0/registry"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "get-files-from-dataset-version",
                "migratedFromUrlSlugs": ["list-dataset-version-files"],
                "method": "GET",
                "id": "getFilesFromDatasetVersion",
                "name": "List dataset version files",
                "path": {
                  "pathParameters": [
                    {
                      "description": "Hume-generated ID of a Dataset version",
                      "key": "id",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/datasets/version/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "id"
                    },
                    {
                      "type": "literal",
                      "value": "/files"
                    }
                  ]
                },
                "queryParameters": [
                  {
                    "description": "Index of the first result",
                    "key": "page_number",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "integer"
                        }
                      }
                    }
                  },
                  {
                    "description": "Maximum number of results",
                    "key": "page_size",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "integer"
                        }
                      }
                    }
                  },
                  {
                    "description": "`True` Will show all assets owned by you and shared with you. `False` Will show only your assets. Default: `False`",
                    "key": "shared_assets",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "boolean"
                        }
                      }
                    }
                  }
                ],
                "headers": [],
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "list",
                      "itemType": {
                        "type": "id",
                        "value": "type_:FilePage"
                      }
                    }
                  }
                },
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "path": "/datasets/version/id/files",
                    "pathParameters": {
                      "id": "id"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 200,
                    "responseBody": [
                      {
                        "content": [
                          {
                            "file": {
                              "id": "id",
                              "user_id": "user_id",
                              "data_type": "data_type",
                              "is_sanitized": true,
                              "is_owned_by_reader": true
                            }
                          }
                        ],
                        "pageable": {
                          "offset": 1,
                          "paged": true,
                          "unpaged": true,
                          "page_number": 1,
                          "page_size": 1
                        },
                        "total": 1,
                        "last": true,
                        "total_elements": 1,
                        "total_pages": 1,
                        "size": 1,
                        "number": 1,
                        "sort": {
                          "empty": true,
                          "sorted": true,
                          "unsorted": true
                        },
                        "first": true,
                        "number_of_elements": 1,
                        "empty": true
                      }
                    ],
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": [
                        {
                          "content": [
                            {
                              "file": {
                                "id": "id",
                                "user_id": "user_id",
                                "data_type": "data_type",
                                "is_sanitized": true,
                                "is_owned_by_reader": true
                              }
                            }
                          ],
                          "pageable": {
                            "offset": 1,
                            "paged": true,
                            "unpaged": true,
                            "page_number": 1,
                            "page_size": 1
                          },
                          "total": 1,
                          "last": true,
                          "total_elements": 1,
                          "total_pages": 1,
                          "size": 1,
                          "number": 1,
                          "sort": {
                            "empty": true,
                            "sorted": true,
                            "unsorted": true
                          },
                          "first": true,
                          "number_of_elements": 1,
                          "empty": true
                        }
                      ]
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Returns 200 if successful",
                "authed": true
              }
            ],
            "types": [],
            "subpackages": [],
            "urlSlug": "datasets",
            "webhooks": [],
            "websockets": []
          },
          "subpackage_models": {
            "subpackageId": "subpackage_models",
            "name": "models",
            "endpoints": [
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.hume.ai/v0/registry"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "get-model-by-id",
                "migratedFromUrlSlugs": ["get-model-details"],
                "method": "GET",
                "id": "getModelById",
                "name": "Get model details",
                "path": {
                  "pathParameters": [
                    {
                      "description": "Hume-generated ID of a Model",
                      "key": "id",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/models/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "id"
                    },
                    {
                      "type": "literal",
                      "value": ""
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_:ExternalModel"
                    }
                  }
                },
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "path": "/models/id",
                    "pathParameters": {
                      "id": "id"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 200,
                    "responseBody": {
                      "id": "id",
                      "name": "name",
                      "created_on": 1,
                      "modified_on": 1,
                      "total_stars": 1,
                      "model_is_starred_by_user": true,
                      "archived": true,
                      "latest_version": {
                        "id": "id",
                        "model_id": "model_id",
                        "user_id": "user_id",
                        "version": "version",
                        "source_uri": "source_uri",
                        "dataset_version_id": "dataset_version_id",
                        "created_on": 1,
                        "metadata": {
                          "metadata": {}
                        },
                        "description": "description",
                        "tags": [
                          {
                            "key": "key",
                            "value": "value"
                          }
                        ],
                        "file_type": "video",
                        "target_feature": "target_feature",
                        "task_type": "task_type",
                        "training_job_id": "training_job_id"
                      },
                      "is_publicly_shared": true
                    },
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "id": "id",
                        "name": "name",
                        "created_on": 1,
                        "modified_on": 1,
                        "total_stars": 1,
                        "model_is_starred_by_user": true,
                        "archived": true,
                        "latest_version": {
                          "id": "id",
                          "model_id": "model_id",
                          "user_id": "user_id",
                          "version": "version",
                          "source_uri": "source_uri",
                          "dataset_version_id": "dataset_version_id",
                          "created_on": 1,
                          "metadata": {
                            "metadata": {}
                          },
                          "description": "description",
                          "tags": [
                            {
                              "key": "key",
                              "value": "value"
                            }
                          ],
                          "file_type": "video",
                          "target_feature": "target_feature",
                          "task_type": "task_type",
                          "training_job_id": "training_job_id"
                        },
                        "is_publicly_shared": true
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Returns 200 if successful",
                "authed": true
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.hume.ai/v0/registry"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "rename-model",
                "migratedFromUrlSlugs": ["update-model-name"],
                "method": "PATCH",
                "id": "renameModel",
                "name": "Update model name",
                "path": {
                  "pathParameters": [
                    {
                      "description": "Hume-generated ID of a Model",
                      "key": "id",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/models/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "id"
                    },
                    {
                      "type": "literal",
                      "value": ""
                    }
                  ]
                },
                "queryParameters": [
                  {
                    "description": "New Model name",
                    "key": "name",
                    "type": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                ],
                "headers": [],
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_:ExternalModel"
                    }
                  }
                },
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "path": "/models/id",
                    "pathParameters": {
                      "id": "id"
                    },
                    "queryParameters": {
                      "name": "name"
                    },
                    "headers": {},
                    "responseStatusCode": 200,
                    "responseBody": {
                      "id": "id",
                      "name": "name",
                      "created_on": 1,
                      "modified_on": 1,
                      "total_stars": 1,
                      "model_is_starred_by_user": true,
                      "archived": true,
                      "latest_version": {
                        "id": "id",
                        "model_id": "model_id",
                        "user_id": "user_id",
                        "version": "version",
                        "source_uri": "source_uri",
                        "dataset_version_id": "dataset_version_id",
                        "created_on": 1,
                        "metadata": {
                          "metadata": {}
                        },
                        "description": "description",
                        "tags": [
                          {
                            "key": "key",
                            "value": "value"
                          }
                        ],
                        "file_type": "video",
                        "target_feature": "target_feature",
                        "task_type": "task_type",
                        "training_job_id": "training_job_id"
                      },
                      "is_publicly_shared": true
                    },
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "id": "id",
                        "name": "name",
                        "created_on": 1,
                        "modified_on": 1,
                        "total_stars": 1,
                        "model_is_starred_by_user": true,
                        "archived": true,
                        "latest_version": {
                          "id": "id",
                          "model_id": "model_id",
                          "user_id": "user_id",
                          "version": "version",
                          "source_uri": "source_uri",
                          "dataset_version_id": "dataset_version_id",
                          "created_on": 1,
                          "metadata": {
                            "metadata": {}
                          },
                          "description": "description",
                          "tags": [
                            {
                              "key": "key",
                              "value": "value"
                            }
                          ],
                          "file_type": "video",
                          "target_feature": "target_feature",
                          "task_type": "task_type",
                          "training_job_id": "training_job_id"
                        },
                        "is_publicly_shared": true
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Returns 200 if successful",
                "authed": true
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.hume.ai/v0/registry"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "get-external-model-versions-by-id",
                "migratedFromUrlSlugs": ["get-model-version"],
                "method": "GET",
                "id": "getExternalModelVersionsById",
                "name": "Get model version",
                "path": {
                  "pathParameters": [
                    {
                      "description": "Hume-generated ID of a Model version",
                      "key": "id",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/models/version/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "id"
                    },
                    {
                      "type": "literal",
                      "value": ""
                    }
                  ]
                },
                "queryParameters": [
                  {
                    "description": "`True` Will show all assets owned by you and shared with you. `False` Will show only your assets. Default: `False`",
                    "key": "shared_assets",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "boolean"
                        }
                      }
                    }
                  }
                ],
                "headers": [],
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_:ExternalModelVersion"
                    }
                  }
                },
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "path": "/models/version/id",
                    "pathParameters": {
                      "id": "id"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 200,
                    "responseBody": {
                      "id": "id",
                      "model_id": "model_id",
                      "user_id": "user_id",
                      "version": "version",
                      "source_uri": "source_uri",
                      "dataset_version_id": "dataset_version_id",
                      "created_on": 1,
                      "metadata": {
                        "metadata": {
                          "metadata": {
                            "key": "value"
                          }
                        }
                      },
                      "description": "description",
                      "tags": [
                        {
                          "key": "key",
                          "value": "value"
                        }
                      ],
                      "file_type": "video",
                      "target_feature": "target_feature",
                      "task_type": "task_type",
                      "training_job_id": "training_job_id"
                    },
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "id": "id",
                        "model_id": "model_id",
                        "user_id": "user_id",
                        "version": "version",
                        "source_uri": "source_uri",
                        "dataset_version_id": "dataset_version_id",
                        "created_on": 1,
                        "metadata": {
                          "metadata": {
                            "metadata": {
                              "key": "value"
                            }
                          }
                        },
                        "description": "description",
                        "tags": [
                          {
                            "key": "key",
                            "value": "value"
                          }
                        ],
                        "file_type": "video",
                        "target_feature": "target_feature",
                        "task_type": "task_type",
                        "training_job_id": "training_job_id"
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Returns 200 if successful",
                "authed": true
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.hume.ai/v0/registry"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "update-model-version-description",
                "migratedFromUrlSlugs": ["update-model-description"],
                "method": "PATCH",
                "id": "updateModelVersionDescription",
                "name": "Update model description",
                "path": {
                  "pathParameters": [
                    {
                      "description": "Hume-generated ID of a Model Version",
                      "key": "id",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/models/version/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "id"
                    },
                    {
                      "type": "literal",
                      "value": ""
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "request": {
                  "contentType": "application/json",
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_:ExternalModelVersion"
                    }
                  }
                },
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "path": "/models/version/id",
                    "pathParameters": {
                      "id": "id"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "requestBody": "string",
                    "responseStatusCode": 200,
                    "responseBody": {
                      "id": "id",
                      "model_id": "model_id",
                      "user_id": "user_id",
                      "version": "version",
                      "source_uri": "source_uri",
                      "dataset_version_id": "dataset_version_id",
                      "created_on": 1,
                      "metadata": {
                        "metadata": {
                          "metadata": {
                            "key": "value"
                          }
                        }
                      },
                      "description": "description",
                      "tags": [
                        {
                          "key": "key",
                          "value": "value"
                        }
                      ],
                      "file_type": "video",
                      "target_feature": "target_feature",
                      "task_type": "task_type",
                      "training_job_id": "training_job_id"
                    },
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": "string"
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "id": "id",
                        "model_id": "model_id",
                        "user_id": "user_id",
                        "version": "version",
                        "source_uri": "source_uri",
                        "dataset_version_id": "dataset_version_id",
                        "created_on": 1,
                        "metadata": {
                          "metadata": {
                            "metadata": {
                              "key": "value"
                            }
                          }
                        },
                        "description": "description",
                        "tags": [
                          {
                            "key": "key",
                            "value": "value"
                          }
                        ],
                        "file_type": "video",
                        "target_feature": "target_feature",
                        "task_type": "task_type",
                        "training_job_id": "training_job_id"
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Returns 200 if successful",
                "authed": true
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.hume.ai/v0/registry"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "get-models-by-user-and-name",
                "migratedFromUrlSlugs": ["list-models"],
                "method": "GET",
                "id": "getModelsByUserAndName",
                "name": "List models",
                "path": {
                  "pathParameters": [],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/models"
                    }
                  ]
                },
                "queryParameters": [
                  {
                    "description": "Model name to be queried",
                    "key": "name",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  {
                    "description": "Index of the first result",
                    "key": "page_number",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "integer"
                        }
                      }
                    }
                  },
                  {
                    "description": "Maximum number of results",
                    "key": "page_size",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "integer"
                        }
                      }
                    }
                  },
                  {
                    "description": "`True` Will show all assets owned by you and shared with you. `False` Will show only your assets. Default: `False`",
                    "key": "shared_assets",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "boolean"
                        }
                      }
                    }
                  }
                ],
                "headers": [],
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_:ModelPage"
                    }
                  }
                },
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "path": "/models",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 200,
                    "responseBody": {
                      "content": [
                        {
                          "id": "id",
                          "name": "name",
                          "created_on": 1,
                          "modified_on": 1,
                          "total_stars": 1,
                          "model_is_starred_by_user": true,
                          "archived": true,
                          "latest_version": {
                            "id": "id",
                            "model_id": "model_id",
                            "user_id": "user_id",
                            "version": "version",
                            "source_uri": "source_uri",
                            "dataset_version_id": "dataset_version_id",
                            "created_on": 1
                          },
                          "is_publicly_shared": true
                        }
                      ],
                      "pageable": {
                        "offset": 1,
                        "sort": {
                          "empty": true,
                          "sorted": true,
                          "unsorted": true
                        },
                        "paged": true,
                        "unpaged": true,
                        "page_number": 1,
                        "page_size": 1
                      },
                      "total": 1,
                      "last": true,
                      "total_elements": 1,
                      "total_pages": 1,
                      "size": 1,
                      "number": 1,
                      "sort": {
                        "empty": true,
                        "sorted": true,
                        "unsorted": true
                      },
                      "first": true,
                      "number_of_elements": 1,
                      "empty": true
                    },
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "content": [
                          {
                            "id": "id",
                            "name": "name",
                            "created_on": 1,
                            "modified_on": 1,
                            "total_stars": 1,
                            "model_is_starred_by_user": true,
                            "archived": true,
                            "latest_version": {
                              "id": "id",
                              "model_id": "model_id",
                              "user_id": "user_id",
                              "version": "version",
                              "source_uri": "source_uri",
                              "dataset_version_id": "dataset_version_id",
                              "created_on": 1
                            },
                            "is_publicly_shared": true
                          }
                        ],
                        "pageable": {
                          "offset": 1,
                          "sort": {
                            "empty": true,
                            "sorted": true,
                            "unsorted": true
                          },
                          "paged": true,
                          "unpaged": true,
                          "page_number": 1,
                          "page_size": 1
                        },
                        "total": 1,
                        "last": true,
                        "total_elements": 1,
                        "total_pages": 1,
                        "size": 1,
                        "number": 1,
                        "sort": {
                          "empty": true,
                          "sorted": true,
                          "unsorted": true
                        },
                        "first": true,
                        "number_of_elements": 1,
                        "empty": true
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Returns 200 if successful",
                "authed": true
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.hume.ai/v0/registry"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "get-model-versions-by-query",
                "migratedFromUrlSlugs": ["list-model-versions"],
                "method": "GET",
                "id": "getModelVersionsByQuery",
                "name": "List model versions",
                "path": {
                  "pathParameters": [],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/models/version"
                    }
                  ]
                },
                "queryParameters": [
                  {
                    "description": "Hume-generated Model Version IDs to be queried",
                    "key": "id",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  {
                    "description": "Model version name to be queried",
                    "key": "name",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  {
                    "description": "Model version number to be queried",
                    "key": "version",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  {
                    "description": "`True` Will show all assets owned by you and shared with you. `False` Will show only your assets. Default: `False`",
                    "key": "shared_assets",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "boolean"
                        }
                      }
                    }
                  }
                ],
                "headers": [],
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "list",
                      "itemType": {
                        "type": "id",
                        "value": "type_:ExternalModelVersion"
                      }
                    }
                  }
                },
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "path": "/models/version",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 200,
                    "responseBody": [
                      {
                        "id": "id",
                        "model_id": "model_id",
                        "user_id": "user_id",
                        "version": "version",
                        "source_uri": "source_uri",
                        "dataset_version_id": "dataset_version_id",
                        "created_on": 1,
                        "metadata": {
                          "metadata": {}
                        },
                        "description": "description",
                        "tags": [
                          {
                            "key": "key",
                            "value": "value"
                          }
                        ],
                        "file_type": "video",
                        "target_feature": "target_feature",
                        "task_type": "task_type",
                        "training_job_id": "training_job_id"
                      }
                    ],
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": [
                        {
                          "id": "id",
                          "model_id": "model_id",
                          "user_id": "user_id",
                          "version": "version",
                          "source_uri": "source_uri",
                          "dataset_version_id": "dataset_version_id",
                          "created_on": 1,
                          "metadata": {
                            "metadata": {}
                          },
                          "description": "description",
                          "tags": [
                            {
                              "key": "key",
                              "value": "value"
                            }
                          ],
                          "file_type": "video",
                          "target_feature": "target_feature",
                          "task_type": "task_type",
                          "training_job_id": "training_job_id"
                        }
                      ]
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Returns 200 if successful",
                "authed": true
              }
            ],
            "types": [],
            "subpackages": [],
            "urlSlug": "models",
            "webhooks": [],
            "websockets": []
          },
          "subpackage_jobs": {
            "subpackageId": "subpackage_jobs",
            "name": "jobs",
            "endpoints": [
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.hume.ai/v0/registry"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "start-inference-jobs",
                "migratedFromUrlSlugs": ["start-training-job"],
                "method": "POST",
                "id": "startInferenceJobs",
                "name": "Start training job",
                "path": {
                  "pathParameters": [],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/v0/batch/jobs/tl/train"
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "request": {
                  "contentType": "application/json",
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_:TrainingBaseRequest"
                    }
                  }
                },
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_:JobId"
                    }
                  }
                },
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "path": "/v0/batch/jobs/tl/train",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {},
                    "requestBody": {
                      "custom_model": {
                        "name": "name"
                      },
                      "dataset": {
                        "id": "id"
                      }
                    },
                    "responseStatusCode": 200,
                    "responseBody": {
                      "job_id": "job_id"
                    },
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "custom_model": {
                          "name": "name"
                        },
                        "dataset": {
                          "id": "id"
                        }
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "job_id": "job_id"
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Start a new custom models training job.",
                "authed": true
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.hume.ai/v0/registry"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "start-transfer-learning-inference-jobs",
                "migratedFromUrlSlugs": ["start-custom-models-inference-job"],
                "method": "POST",
                "id": "startTransferLearningInferenceJobs",
                "name": "Start custom models inference job",
                "path": {
                  "pathParameters": [],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/v0/batch/jobs/tl/inference"
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "request": {
                  "contentType": "application/json",
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_:TlInferenceBaseRequest"
                    }
                  }
                },
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_:JobId"
                    }
                  }
                },
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "path": "/v0/batch/jobs/tl/inference",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {},
                    "requestBody": {
                      "custom_model": {
                        "id": "id"
                      }
                    },
                    "responseStatusCode": 200,
                    "responseBody": {
                      "job_id": "job_id"
                    },
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "custom_model": {
                          "id": "id"
                        }
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "job_id": "job_id"
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Start a new custom models inference job.",
                "authed": true
              }
            ],
            "types": [],
            "subpackages": [],
            "urlSlug": "jobs",
            "webhooks": [],
            "websockets": []
          }
        },
        "auth": {
          "type": "header",
          "headerWireValue": "X-Hume-Api-Key",
          "nameOverride": "apiKey"
        },
        "hasMultipleBaseUrls": false
      }
    },
    "files": {
      "ea3abb52-d863-4355-9bc7-59164ced123a": "https://fdr-prod-docs-files.s3.us-east-1.amazonaws.com/hume.docs.buildwithfern.com/2024-03-23T03%3A57%3A37.040Z/docs/fonts/Fellix-Medium.woff2?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&X-Amz-Credential=AKIA6KXJSKKNE6LAYO7B%2F20240323%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Date=20240323T220259Z&X-Amz-Expires=604800&X-Amz-Signature=997cb5cfd4f3256e4e566f80aed3e1a991a0875b91bbf417c107688fce45be81&X-Amz-SignedHeaders=host&x-id=GetObject",
      "c1065b9f-56c6-4881-a4a7-cf2945256bde": "https://fdr-prod-docs-files.s3.us-east-1.amazonaws.com/hume.docs.buildwithfern.com/2024-03-23T03%3A57%3A37.040Z/docs/fonts/Fellix-Regular.woff2?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&X-Amz-Credential=AKIA6KXJSKKNE6LAYO7B%2F20240323%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Date=20240323T220259Z&X-Amz-Expires=604800&X-Amz-Signature=08ba7ca3d7e73564c2876fd662f3f3c913e0ae0c573cb1c85e3bd6366e23d049&X-Amz-SignedHeaders=host&x-id=GetObject",
      "2732d006-002e-4551-9f1e-4f7037fa50df": "https://fdr-prod-docs-files.s3.us-east-1.amazonaws.com/hume.docs.buildwithfern.com/2024-03-23T03%3A57%3A37.040Z/docs/fonts/Fellix-SemiBold.woff2?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&X-Amz-Credential=AKIA6KXJSKKNE6LAYO7B%2F20240323%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Date=20240323T220259Z&X-Amz-Expires=604800&X-Amz-Signature=daa5ba400987e3352dca356014decaf6f8dffe085771a92e0abc328460904dfc&X-Amz-SignedHeaders=host&x-id=GetObject",
      "d03f8d3b-3a53-4fd7-97ce-30d33aa0afbe": "https://fdr-prod-docs-files.s3.us-east-1.amazonaws.com/hume.docs.buildwithfern.com/2024-03-23T03%3A57%3A37.040Z/docs/fonts/FraktionMono-Regular.woff2?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&X-Amz-Credential=AKIA6KXJSKKNE6LAYO7B%2F20240323%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Date=20240323T220259Z&X-Amz-Expires=604800&X-Amz-Signature=8243ce656ce70d7b60951dc60b46d430dd2364774262f4cb9b759ebb74dcf3f2&X-Amz-SignedHeaders=host&x-id=GetObject",
      "d43858b5-bcac-4605-88c4-51a54af5be9b": "https://fdr-prod-docs-files.s3.us-east-1.amazonaws.com/hume.docs.buildwithfern.com/2024-03-23T03%3A57%3A37.040Z/docs/fonts/FraktionMono-Bold.woff2?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&X-Amz-Credential=AKIA6KXJSKKNE6LAYO7B%2F20240323%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Date=20240323T220259Z&X-Amz-Expires=604800&X-Amz-Signature=5cc823f1d4b9bd7264ca043488bb349ea8c6e8c42dd66d5738d7e88297753280&X-Amz-SignedHeaders=host&x-id=GetObject",
      "0055843f-1ebf-4960-8607-57d8de0596ac": "https://fdr-prod-docs-files.s3.us-east-1.amazonaws.com/hume.docs.buildwithfern.com/2024-03-23T03%3A57%3A37.040Z/docs/assets/logo-dark-mode.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&X-Amz-Credential=AKIA6KXJSKKNE6LAYO7B%2F20240323%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Date=20240323T220259Z&X-Amz-Expires=604800&X-Amz-Signature=dec8fbfcfbda94ffc7fd11ff3f7c45ef0fd5c8665a98def65a83caf7ca46c234&X-Amz-SignedHeaders=host&x-id=GetObject",
      "fa4aa03c-c518-4afb-ae28-c75e41b43928": "https://fdr-prod-docs-files.s3.us-east-1.amazonaws.com/hume.docs.buildwithfern.com/2024-03-23T03%3A57%3A37.040Z/docs/assets/logo-light-mode.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&X-Amz-Credential=AKIA6KXJSKKNE6LAYO7B%2F20240323%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Date=20240323T220259Z&X-Amz-Expires=604800&X-Amz-Signature=58175aee2087b3a90693f3f96b24c323e620316a03404915931baebdaef7e1dd&X-Amz-SignedHeaders=host&x-id=GetObject",
      "81128cf8-ab76-4de4-8e4c-f97733f690ee": "https://fdr-prod-docs-files.s3.us-east-1.amazonaws.com/hume.docs.buildwithfern.com/2024-03-23T03%3A57%3A37.040Z/docs/assets/favicon.ico?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&X-Amz-Credential=AKIA6KXJSKKNE6LAYO7B%2F20240323%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Date=20240323T220259Z&X-Amz-Expires=604800&X-Amz-Signature=4ed9e4fea5d71abd638b0263a60d0e30446c352582f9237a84a283556aabaf28&X-Amz-SignedHeaders=host&x-id=GetObject"
    },
    "filesV2": {
      "ea3abb52-d863-4355-9bc7-59164ced123a": {
        "type": "url",
        "url": "https://fdr-prod-docs-files.s3.us-east-1.amazonaws.com/hume.docs.buildwithfern.com/2024-03-23T03%3A57%3A37.040Z/docs/fonts/Fellix-Medium.woff2?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&X-Amz-Credential=AKIA6KXJSKKNE6LAYO7B%2F20240323%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Date=20240323T205845Z&X-Amz-Expires=604800&X-Amz-Signature=5ee2119622ae96d0ecb68870a9159d9a91945d56d59cfe45fc1d40403eadd9e5&X-Amz-SignedHeaders=host&x-id=GetObject"
      },
      "c1065b9f-56c6-4881-a4a7-cf2945256bde": {
        "type": "url",
        "url": "https://fdr-prod-docs-files.s3.us-east-1.amazonaws.com/hume.docs.buildwithfern.com/2024-03-23T03%3A57%3A37.040Z/docs/fonts/Fellix-Regular.woff2?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&X-Amz-Credential=AKIA6KXJSKKNE6LAYO7B%2F20240323%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Date=20240323T205845Z&X-Amz-Expires=604800&X-Amz-Signature=38dc50b7f2ef4f317ab0b2579c0af572b8b5c65167e45d260d787fe53022f063&X-Amz-SignedHeaders=host&x-id=GetObject"
      },
      "2732d006-002e-4551-9f1e-4f7037fa50df": {
        "type": "url",
        "url": "https://fdr-prod-docs-files.s3.us-east-1.amazonaws.com/hume.docs.buildwithfern.com/2024-03-23T03%3A57%3A37.040Z/docs/fonts/Fellix-SemiBold.woff2?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&X-Amz-Credential=AKIA6KXJSKKNE6LAYO7B%2F20240323%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Date=20240323T205845Z&X-Amz-Expires=604800&X-Amz-Signature=1f79eeaa7822967adb43b14dfae6e5db9a2975a9d952bf356720878f8908c4fe&X-Amz-SignedHeaders=host&x-id=GetObject"
      },
      "d03f8d3b-3a53-4fd7-97ce-30d33aa0afbe": {
        "type": "url",
        "url": "https://fdr-prod-docs-files.s3.us-east-1.amazonaws.com/hume.docs.buildwithfern.com/2024-03-23T03%3A57%3A37.040Z/docs/fonts/FraktionMono-Regular.woff2?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&X-Amz-Credential=AKIA6KXJSKKNE6LAYO7B%2F20240323%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Date=20240323T205845Z&X-Amz-Expires=604800&X-Amz-Signature=3c3363ef1bff4e3efd593388d0a9d4afad7739ff5c9aa62c29d13df4af1c9a31&X-Amz-SignedHeaders=host&x-id=GetObject"
      },
      "d43858b5-bcac-4605-88c4-51a54af5be9b": {
        "type": "url",
        "url": "https://fdr-prod-docs-files.s3.us-east-1.amazonaws.com/hume.docs.buildwithfern.com/2024-03-23T03%3A57%3A37.040Z/docs/fonts/FraktionMono-Bold.woff2?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&X-Amz-Credential=AKIA6KXJSKKNE6LAYO7B%2F20240323%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Date=20240323T205845Z&X-Amz-Expires=604800&X-Amz-Signature=a1a622c0145fc7662bafe1178c69e357755f926c335f0d9d1487c224ec8dcb98&X-Amz-SignedHeaders=host&x-id=GetObject"
      },
      "0055843f-1ebf-4960-8607-57d8de0596ac": {
        "type": "image",
        "url": "https://fdr-prod-docs-files.s3.us-east-1.amazonaws.com/hume.docs.buildwithfern.com/2024-03-23T03%3A57%3A37.040Z/docs/assets/logo-dark-mode.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&X-Amz-Credential=AKIA6KXJSKKNE6LAYO7B%2F20240323%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Date=20240323T205845Z&X-Amz-Expires=604800&X-Amz-Signature=29f4de409be1f539e46a8fae984933a7a95283efc29291063cfe54c2304a3124&X-Amz-SignedHeaders=host&x-id=GetObject",
        "width": 820,
        "height": 186
      },
      "fa4aa03c-c518-4afb-ae28-c75e41b43928": {
        "type": "image",
        "url": "https://fdr-prod-docs-files.s3.us-east-1.amazonaws.com/hume.docs.buildwithfern.com/2024-03-23T03%3A57%3A37.040Z/docs/assets/logo-light-mode.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&X-Amz-Credential=AKIA6KXJSKKNE6LAYO7B%2F20240323%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Date=20240323T205845Z&X-Amz-Expires=604800&X-Amz-Signature=d08552852e86a56915be0991128c741eb6097a294f6869401918775a50e2bfb4&X-Amz-SignedHeaders=host&x-id=GetObject",
        "width": 820,
        "height": 186
      },
      "81128cf8-ab76-4de4-8e4c-f97733f690ee": {
        "type": "image",
        "url": "https://fdr-prod-docs-files.s3.us-east-1.amazonaws.com/hume.docs.buildwithfern.com/2024-03-23T03%3A57%3A37.040Z/docs/assets/favicon.ico?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&X-Amz-Credential=AKIA6KXJSKKNE6LAYO7B%2F20240323%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Date=20240323T205845Z&X-Amz-Expires=604800&X-Amz-Signature=f94930f1df0040c6cf694236484ac4bcdd677fbee8c756525434a8a12b57d488&X-Amz-SignedHeaders=host&x-id=GetObject",
        "width": 32,
        "height": 32
      }
    },
    "pages": {
      "docs/pages/documentation/introduction/welcome.mdx": {
        "markdown": "---\ntitle: Welcome to Hume AI\ndescription: Hume AI builds AI models that enable technology to communicate with empathy and learn to make people happy.\nslug: intro\n---\n\nHume AI builds AI models that enable technology to communicate with empathy and learn to make people happy. \n\nSo much of human communication -- in-person, text, audio, or video -- is shaped by emotional expression. These cues allow us to attend to each other's well-being. Our platform provides the APIs needed to ensure that technology, too, is guided by empathy and the pursuit of human well-being.\n\n### [Expression Measurement API](/docs/expression-measurement-api/overview)\n\nHume's state of the art expression measurement models for the voice, face, and language are built on 10+ years of research and advances in semantic space theory pioneered by Alan Cowen. Our expression measurement models are able to capture hundreds of dimensions of human expression in audio, video, and images.\n\n### [Custom Models API](/docs/custom-models-api/overview)\n\nOur Custom Models API builds on our expression measurement models and state-of-the-art eLLMs to bring custom insights to your application. Developed using transfer learning from our expression measurement models and eLLMs, our Custom Models API can predict almost any outcome more accurately than language alone, whether it's toxicity, depressed mood, driver drowsiness, or any other metric important to your users.\n\n## API Reference\n\n<Cards>\n  <Card\n    title=\"Expression Measurement API\"\n    icon=\"ruler\"\n    href=\"/reference/expression-measurement-api/batch/start-inference-job\"\n  >\n    Measure facial, vocal, and linguistic expressions\n  </Card>\n  <Card\n    title=\"Custom Models API\"\n    icon=\"fa-gear\"\n    href=\"/reference/custom-models-api/datasets/create-dataset-1\"\n  >\n    Predict almost any outcome more accurately than language alone\n  </Card>\n</Cards>\n\n## Get support\n\nIf you have questions or run into challenges, we're here to help!\n\n<Cards>\n  <Card\n    title=\"Discord\"\n    icon=\"fa-brands fa-discord\"\n    href=\"https://link.hume.ai/discord\"\n  >\n    Join our Discord for answers to any technical questions\n  </Card>\n</Cards>\n"
      },
      "docs/pages/documentation/introduction/getting-your-api-key.mdx": {
        "markdown": "---\ntitle: Quickstart tutorial\nexcerpt: Learn how to get started with Hume in just a few minutes.\n---\n\n<Steps>\n### Sign in to [Hume](https://beta.hume.ai/).\n\n### Navigate to the [API Keys page](https://beta.hume.ai/settings/keys).\n\n### Copy your API key.\n\n<Frame caption=\"API Key\">\n  ![API key](https://fern-image-hosting.s3.amazonaws.com/hume/get-started-api-key.png)\n</Frame>\n\n<Callout intent=\"info\">\n  **Your API key is a random sequence of letters and numbers.** \n  It should look something like `ntylOFypHLRXMmjlTxljoecAnMgB30JtOLZC2nph1TYErCvv`\n</Callout>\n\n</Steps>"
      },
      "docs/pages/documentation/introduction/support.mdx": {
        "markdown": "---\ntitle: Support\nexcerpt: Get help from the team at Hume\nslug: support\nredirects: \n  - /docs/support\n---\n## Discord\n\n[Join our Discord](https://link.hume.ai/discord) for answers to any technical questions.\n\n## Legal\n\nContact [legal@hume.ai](mailto:legal@hume.ai) for legal and data privacy inquires.\n\n## Billing\n\nEmail [billing@hume.ai](mailto:billing@hume.ai) for any questions or concerns about billing.\n\n## Contact us\n\nFor all other inquires, see [hume.ai/contact](https://hume.ai/contact).\n"
      },
      "docs/pages/documentation/expression-measurement-api/overview.mdx": {
        "markdown": "---\ntitle: Expression Measurement API\nexcerpt: Hume's state of the art expression measurement models for the voice, face, and language.\n---\n## Intro\n\nHume's state of the art expression measurement models for the voice, face, and language are built on 10+ years of research and advances in computational approaches to emotion science (semantic space theory) pioneered by our team. Our expression measurement models are able to capture hundreds of dimensions of human expression in audio, video, and images.\n\n### Measurements\n\n* **Facial Expression**, including subtle facial movements often seen as expressing love or admiration, awe, disappointment, or cringes of empathic pain, along 48 distinct dimensions of emotional meaning. Our Facial Expression model will also optionally output FACS 2.0 measurements, our model of facial movements including traditional Action Units (AUs such as “Inner brow raise”, “Nose crinkle”) and facial descriptions (“Smile”, “Wink”, “Hand over mouth”, “Hand over eyes”)\n* **Speech Prosody**, or the non-linguistic tone, rhythm, and timbre of speech, spanning 48 distinct dimensions of emotional meaning.\n* **Vocal Burst**, including laughs, sighs, huhs, hmms, cries and shrieks (to name a few), along 48 distinct dimensions of emotional meaning.\n* **Emotional Language**, or the emotional tone of transcribed text, along 53 dimensions.\n\n<Info>\nThese behaviors are complex and multifaceted.\n</Info>\n\nTo learn more about how to use our models visit our [API reference](/reference/expression-measurement-api/batch/start-job/start-inference-jobs).\n\n### Model training\n\nThe models were trained on human intensity ratings of large-scale, experimentally controlled emotional expression data gathered using the methods described in these papers: [Deep learning reveals what vocal bursts express in different cultures](https://www.nature.com/articles/s41562-022-01489-2) and [Deep learning reveals what facial expressions mean to people in different cultures](https://www.sciencedirect.com/science/article/pii/S2589004224003961).\n\nWhile our models measure nuanced expressions that people most typically describe with emotion labels, it's important to remember that they are not a direct readout of what someone is experiencing. Sometimes, the outputs from facial and vocal models will show different emotional meanings, which is completely normal. Generally speaking, emotional experience is subjective and its expression is multimodal and context-dependent.\n\n## Try out the models\n\nLearn how you can use the Expression Measurement API through both REST and WebSockets.\n\n<Cards>\n    <Card \n        title='REST'\n        icon='paper-plane-top'\n        href='/docs/expression-measurement-api/rest'\n    >\n        Use REST endpoints to process batches of videos, images, text, or audio files.\n    </Card>\n\n    <Card \n        title='WebSocket'\n        icon='messages'\n        href='/docs/expression-measurement-api/websocket'\n    >\n        Use WebSocket endpoints when you need real-time predictions, such as processing a webcam or microphone stream.\n    </Card>\n</Cards>\n\nREST and WebSocket endpoints provide access to all of the same Hume models, but with different speed and scale tradeoffs. All models share a common response format, which associates a score with each detected expression. Scores indicate the degree to which a human rater would assign an expression to a given sample of video, text or audio. \n\n## Specific expressions by modality\n\nOur models measure 53 expressions identified through the subtleties of emotional language and 48 expressions discerned from facial cues, vocal bursts, and speech prosody.\n\n| Expression               |      Language      | Face/Burst/Prosody |\n| :--------------------- | :----------------: | :----------------: |\n| Admiration             |  <Icon icon=\"check\" color=\"#84B060\" />  |  <Icon icon=\"check\" color=\"#84B060\" />  |\n| Adoration              |  <Icon icon=\"check\" color=\"#84B060\" />  |  <Icon icon=\"check\" color=\"#84B060\" />  |\n| Aesthetic Appreciation |  <Icon icon=\"check\" color=\"#84B060\" />  |  <Icon icon=\"check\" color=\"#84B060\" />  |\n| Amusement              |  <Icon icon=\"check\" color=\"#84B060\" />  |  <Icon icon=\"check\" color=\"#84B060\" />  |\n| Anger                  |  <Icon icon=\"check\" color=\"#84B060\" />  |  <Icon icon=\"check\" color=\"#84B060\" />  |\n| Annoyance              |  <Icon icon=\"check\" color=\"#84B060\" />  |                    |\n| Anxiety                |  <Icon icon=\"check\" color=\"#84B060\" />  |  <Icon icon=\"check\" color=\"#84B060\" />  |\n| Awe                    |  <Icon icon=\"check\" color=\"#84B060\" />  |  <Icon icon=\"check\" color=\"#84B060\" />  |\n| Awkwardness            |  <Icon icon=\"check\" color=\"#84B060\" />  |  <Icon icon=\"check\" color=\"#84B060\" />  |\n| Boredom                |  <Icon icon=\"check\" color=\"#84B060\" />  |  <Icon icon=\"check\" color=\"#84B060\" />  |\n| Calmness               |  <Icon icon=\"check\" color=\"#84B060\" />  |  <Icon icon=\"check\" color=\"#84B060\" />  |\n| Concentration          |  <Icon icon=\"check\" color=\"#84B060\" />  |  <Icon icon=\"check\" color=\"#84B060\" />  |\n| Confusion              |  <Icon icon=\"check\" color=\"#84B060\" />  |  <Icon icon=\"check\" color=\"#84B060\" />  |\n| Contemplation          |  <Icon icon=\"check\" color=\"#84B060\" />  |  <Icon icon=\"check\" color=\"#84B060\" />  |\n| Contempt               |  <Icon icon=\"check\" color=\"#84B060\" />  |                    |\n| Contentment            |  <Icon icon=\"check\" color=\"#84B060\" />  |  <Icon icon=\"check\" color=\"#84B060\" />  |\n| Craving                |  <Icon icon=\"check\" color=\"#84B060\" />  |  <Icon icon=\"check\" color=\"#84B060\" />  |\n| Desire                 |  <Icon icon=\"check\" color=\"#84B060\" />  |  <Icon icon=\"check\" color=\"#84B060\" />  |\n| Determination          |  <Icon icon=\"check\" color=\"#84B060\" />  |  <Icon icon=\"check\" color=\"#84B060\" />  |\n| Disappointment         |  <Icon icon=\"check\" color=\"#84B060\" />  |  <Icon icon=\"check\" color=\"#84B060\" />  |\n| Disapproval            |  <Icon icon=\"check\" color=\"#84B060\" />  |                    |\n| Disgust                |  <Icon icon=\"check\" color=\"#84B060\" />  |  <Icon icon=\"check\" color=\"#84B060\" />  |\n| Distress               |  <Icon icon=\"check\" color=\"#84B060\" />  |  <Icon icon=\"check\" color=\"#84B060\" />  |\n| Doubt                  |  <Icon icon=\"check\" color=\"#84B060\" />  |  <Icon icon=\"check\" color=\"#84B060\" />  |\n| Ecstasy                |  <Icon icon=\"check\" color=\"#84B060\" />  |                    |\n| Embarrassment          |  <Icon icon=\"check\" color=\"#84B060\" />  |  <Icon icon=\"check\" color=\"#84B060\" />  |\n| Empathic Pain          |  <Icon icon=\"check\" color=\"#84B060\" />  |  <Icon icon=\"check\" color=\"#84B060\" />  |\n| Enthusiasm             |  <Icon icon=\"check\" color=\"#84B060\" />  |                    |\n| Entrancement           |  <Icon icon=\"check\" color=\"#84B060\" />  |  <Icon icon=\"check\" color=\"#84B060\" />  |\n| Envy                   |  <Icon icon=\"check\" color=\"#84B060\" />  |  <Icon icon=\"check\" color=\"#84B060\" />  |\n| Excitement             |  <Icon icon=\"check\" color=\"#84B060\" />  |  <Icon icon=\"check\" color=\"#84B060\" />  |\n| Fear                   |  <Icon icon=\"check\" color=\"#84B060\" />  |  <Icon icon=\"check\" color=\"#84B060\" />  |\n| Gratitude              |  <Icon icon=\"check\" color=\"#84B060\" />  |                    |\n| Guilt                  |  <Icon icon=\"check\" color=\"#84B060\" />  |  <Icon icon=\"check\" color=\"#84B060\" />  |\n| Horror                 |  <Icon icon=\"check\" color=\"#84B060\" />  |  <Icon icon=\"check\" color=\"#84B060\" />  |\n| Interest               |  <Icon icon=\"check\" color=\"#84B060\" />  |  <Icon icon=\"check\" color=\"#84B060\" />  |\n| Joy                    |  <Icon icon=\"check\" color=\"#84B060\" />  |  <Icon icon=\"check\" color=\"#84B060\" />  |\n| Love                   |  <Icon icon=\"check\" color=\"#84B060\" />  |  <Icon icon=\"check\" color=\"#84B060\" />  |\n| Nostalgia              |  <Icon icon=\"check\" color=\"#84B060\" />  |  <Icon icon=\"check\" color=\"#84B060\" />  |\n| Pain                   |  <Icon icon=\"check\" color=\"#84B060\" />  |  <Icon icon=\"check\" color=\"#84B060\" />  |\n| Pride                  |  <Icon icon=\"check\" color=\"#84B060\" />  |  <Icon icon=\"check\" color=\"#84B060\" />  |\n| Realization            |  <Icon icon=\"check\" color=\"#84B060\" />  |  <Icon icon=\"check\" color=\"#84B060\" />  |\n| Relief                 |  <Icon icon=\"check\" color=\"#84B060\" />  |  <Icon icon=\"check\" color=\"#84B060\" />  |\n| Romance                |  <Icon icon=\"check\" color=\"#84B060\" />  |  <Icon icon=\"check\" color=\"#84B060\" />  |\n| Sadness                |  <Icon icon=\"check\" color=\"#84B060\" />  |  <Icon icon=\"check\" color=\"#84B060\" />  |\n| Sarcasm                |  <Icon icon=\"check\" color=\"#84B060\" />  |                    |\n| Satisfaction           |  <Icon icon=\"check\" color=\"#84B060\" />  |  <Icon icon=\"check\" color=\"#84B060\" />  |\n| Shame                  |  <Icon icon=\"check\" color=\"#84B060\" />  |  <Icon icon=\"check\" color=\"#84B060\" />  |\n| Surprise (negative)    |  <Icon icon=\"check\" color=\"#84B060\" />  |  <Icon icon=\"check\" color=\"#84B060\" />  |\n| Surprise (positive)    |  <Icon icon=\"check\" color=\"#84B060\" />  |  <Icon icon=\"check\" color=\"#84B060\" />  |\n| Sympathy               |  <Icon icon=\"check\" color=\"#84B060\" />  |  <Icon icon=\"check\" color=\"#84B060\" />  |\n| Tiredness              |  <Icon icon=\"check\" color=\"#84B060\" />  |  <Icon icon=\"check\" color=\"#84B060\" />  |\n| Triumph                |  <Icon icon=\"check\" color=\"#84B060\" />  |  <Icon icon=\"check\" color=\"#84B060\" />  |\n"
      },
      "docs/pages/documentation/expression-measurement-api/rest.mdx": {
        "markdown": "---\ntitle: Processing batches of media files\n---\n\nHume’s Expression Measurement API is designed to facilitate large-scale processing of files using Hume's advanced models through an asynchronous, job-based interface. This API allows developers to submit jobs for parallel processing of various files, enabling efficient handling of multiple data points simultaneously, and receiving notifications when results are available.\n\n## Key features\n\n- **Asynchronous job submission:** Jobs can be submitted to process a wide array of files in parallel, making it ideal for applications that require the analysis of large volumes of data.\n\n- **Flexible data input options:** The API supports multiple data formats, including hosted file URLs, local files directly from your system, and raw text in the form of a list of strings. This versatility ensures that you can easily integrate the API into their applications, regardless of where their data resides.\n\n## Applications and use cases\n\nHume’s Expression Measurement API is particularly useful for leveraging Hume's expressive models across a broad spectrum of files and formats. Whether it's for processing large datasets for research, analyzing customer feedback across multiple channels, or enriching user experiences in media-rich applications, REST provides a robust solution for asynchronously handling complex, data-intensive tasks.\n\n## Using Hume’s Expression Measurement API\n\nHere we'll show you how to upload your own files and run Hume models on batches of data.\nIf you haven't already, grab your [API Key](/docs/introduction/getting-your-api-key).\n\n<Steps>\n### Making a request to the API\n\nStart a new job with the Expression Measurement API.\n\n<CodeBlocks>\n    <CodeBlock title=\"cURL\">\n        ```bash\n        curl https://api.hume.ai/v0/batch/jobs \\\n         --header \"Content-Type: application/json\" \\\n         --header \"X-Hume-Api-Key: <YOUR API KEY>\" \\\n         --data '{\n            \"models\": {\n                \"face\": {}\n            },\n            \"urls\": [\n                \"https://hume-tutorials.s3.amazonaws.com/faces.zip\"\n            ]\n        }'\n        ```\n    </CodeBlock>\n    <CodeBlock title=\"Hume Python SDK\">\n        ```python\n        from hume import HumeBatchClient\n        from hume.models.config import FaceConfig\n\n        client = HumeBatchClient(\"<YOUR API KEY>\")\n        filepaths = [\n            \"faces.zip\",\n            \"david_hume.jpeg\",\n        ]\n        config = FaceConfig()\n        job = client.submit_job(None, [config], files=filepaths)\n\n        print(job)\n        print(\"Running...\")\n\n        details = job.await_complete()\n        job.download_predictions(\"predictions.json\")\n        print(\"Predictions downloaded to predictions.json\")\n        ```\n    </CodeBlock>\n\n</CodeBlocks>\n\nTo do the same with a local file:\n\n<CodeBlocks>\n    <CodeBlock title=\"cURL\" language=\"cURL\">\n        ```bash\n        curl https://api.hume.ai/v0/batch/jobs \\\n         --header \"Content-Type: multipart/form-data\" \\\n         --header \"X-Hume-Api-Key: <YOUR API KEY>\" \\\n         --form json='{\n            \"models\": {\n                \"face\": {}\n            }\n         }' \\\n         --form file=@faces.zip \\\n         --form file=@david_hume.jpeg\n        ```\n    </CodeBlock>\n    <CodeBlock title=\"Hume Python SDK\">\n        ```python\n        from hume import HumeBatchClient\n        from hume.models.config import FaceConfig\n\n        client = HumeBatchClient(\"<YOUR API KEY>\")\n        filepaths = [\n            \"faces.zip\",\n            \"david_hume.jpeg\",\n        ]\n        config = FaceConfig()\n        job = client.submit_job(None, [config], files=filepaths)\n\n        print(job)\n        print(\"Running...\")\n\n        details = job.await_complete()\n        job.download_predictions(\"predictions.json\")\n        print(\"Predictions downloaded to predictions.json\")\n        ```\n    </CodeBlock>\n\n</CodeBlocks>\n\nSample files for you to use in this tutorial are available here:\n[Download faces.zip](https://hume-tutorials.s3.amazonaws.com/faces.zip)\n[Download david_hume.jpeg](https://hume-tutorials.s3.amazonaws.com/david_hume.jpeg)\n\n### **Checking job status**\n\n<Callout intent=\"info\">\n  Use webhooks to asynchronously receive notifications once the job completes.\n  It is not recommended to poll the API periodically for job status.\n</Callout>\nThere are several ways to get notified and check the status of your job.\n\n1. Using the [Get job details](https://dev.hume.ai/v1/reference/get_job) API endpoint.\n2. Providing a callback URL. We will send a POST request to your URL when the job is complete. Your request body should look like this: `{ \"callback_url\": \"<YOUR CALLBACK URL>\" }`\n\n<CodeBlock title=\"JSON\" language=\"json\">\n    ```json\n    {\n        job_id: \"Job ID\",\n        status: \"STATUS (COMPLETED/FAILED)\",\n        predictions: [ARRAY OF RESULTS]\n    }\n    ```\n</CodeBlock>\n\n### Retrieving predictions\n\nYour predictions are available in a few formats.\n\nTo get predictions as JSON use the [Get job predictions](https://dev.hume.ai/v1/reference/get_job_predictions) endpoint.\n\n<CodeBlocks>\n    <CodeBlock title=\"cURL\">\n    ```bash\n    curl --request GET \\\n     --url https://api.hume.ai/v0/batch/jobs/<JOB_ID>/predictions \\\n     --header 'X-Hume-Api-Key: <YOUR_API_KEY>' \\\n     --header 'accept: application/json; charset=utf-8'\n    ```\n    </CodeBlock>\n    <CodeBlock title=\"Hume Python SDK\">\n    ```python\n    job.get_predictions()\n\n    or\n\n    job.download_predictions(\"filename.json\")\n    ```\n    </CodeBlock>\n\n</CodeBlocks>\n\nTo get predictions as a compressed file of CSVs, one per model use the [Get job artifacts](https://dev.hume.ai/v1/reference/get_job_artifacts) endpoint.\n\n<CodeBlocks>\n    <CodeBlock title=\"cURL\">\n    ```bash\n    curl --request GET \\\n     --url https://api.hume.ai/v0/batch/jobs/<JOB_ID>/artifacts \\\n     --header 'X-Hume-Api-Key: <YOUR_API_KEY>' \\\n     --header 'accept: application/octet-stream'\n    ```\n    </CodeBlock>\n    <CodeBlock title=\"Hume Python SDK\">\n    ```python\n    job.download_artifacts(\"filename.zip\")\n    ```\n    </CodeBlock>\n</CodeBlocks>\n\n</Steps>\n\n### API limits\n\n- The size of any individual file provided by URL cannot exceed 1 GB.\n\n- The size of any individual local file cannot exceed 100 MB.\n- Each request has an upper limit of 100 URLs, 100 strings (raw text), and 100 local media files.\n  - Can be a mix of the media files or archives (.zip, .tar.gz, .tar.bz2, .tar.xz).\n- For audio and video files the max length supported is 1 Hour.\n\n### Providing URLs and files\n\nYou can provide data for your job in one of the following formats: hosted file URLs, local files, or raw text presented as a list of strings.\n\nIn this tutorial, the data is publicly available to download. For added security, you may choose to create a signed URL through your preferred cloud storage provider.\n\n| Cloud Provider | Signing URLs                                                                                                                                                                                               |\n| -------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| GCP            | [https://cloud.google.com/storage/docs/access-control/signed-urls](https://cloud.google.com/storage/docs/access-control/signed-urls)                                                                       |\n| AWS            | [https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/private-content-signed-urls.html](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/private-content-signed-urls.html) |\n| Azure          | [https://learn.microsoft.com/en-us/azure/storage/common/storage-sas-overview](https://learn.microsoft.com/en-us/azure/storage/common/storage-sas-overview)                                                 |\n"
      },
      "docs/pages/documentation/expression-measurement-api/websocket.mdx": {
        "markdown": "---\ntitle: Real-time measurement streaming\nredirects:\n  - /streaming-api-tutorial\n---\n\nWebSocket-based streaming facilitates continuous data flow between your application and Hume's models, providing immediate feedback and insights.\n\n## Key features\n\n- **Real-time data processing:** Leveraging WebSockets, this API allows for the streaming of data to Hume's models, enabling instant analysis and response. This feature is particularly beneficial for applications requiring immediate processing, such as live interaction systems or real-time monitoring tools.\n- **Persistent, two-way communication:** Unlike traditional request-response models, the WebSocket-based streaming maintains an open connection for two-way communication between the client and server. This facilitates an ongoing exchange of data, allowing for a more interactive and responsive user experience.\n- **High throughput and low latency:** The API is optimized for high performance, supporting high-volume data streaming with minimal delay. This ensures that applications can handle large streams of data efficiently, without sacrificing speed or responsiveness.\n\n## Applications and use cases\n\nWebSockets are ideal for a wide range of applications that benefit from real-time data analysis and interaction. Examples include:\n\n- **Live customer service tools:** enhance customer support with real-time sentiment analysis and automated, emotionally intelligent responses\n- **Interactive educational platforms:** provide immediate feedback and adaptive learning experiences based on real-time student input\n- **Health and wellness apps:** support live mental health and wellness monitoring, offering instant therapeutic feedback or alerts based on the user's vocal or textual expressions\n- **Entertainment and gaming:** create more immersive and interactive experiences by responding to user inputs and emotions in real time\n\n---\n\n## Getting started with WebSocket streaming\n\nIntegrating WebSocket-based streaming into your application involves establishing a WebSocket connection with Hume AI's servers and streaming data directly to the models for processing.\n\nStreaming is built for analysis of audio, video, and text streams. By connecting to WebSocket endpoints you can get near real-time feedback on the expressive and emotional content of your data.\n\n### Install the Hume Python SDK\n\nMake sure to enable the optional `stream` feature when installing the Hume Python SDK.\n\n  <CodeBlock title=\"Shell\">\n    ```bash\n    pip install \"hume[stream]\"\n    ```\n  </CodeBlock>\n\n### Emotional language from text\n\nThis example uses our [Emotional Language](/docs/resources/science#emotional-language) model to perform sentiment analysis on a children's nursery rhyme.\n\nIf you haven't already, grab your [API key](/docs/introduction/getting-your-api-key).\n\n  <CodeBlock title=\"Hume Python SDK\">\n    ```python\n    import asyncio\n    from hume import HumeStreamClient\n    from hume.models.config import LanguageConfig\n\n    samples = [\n        \"Mary had a little lamb,\",\n        \"Its fleece was white as snow.\"\n        \"Everywhere the child went,\"\n        \"The little lamb was sure to go.\"\n    ]\n\n    async def main():\n        client = HumeStreamClient(\"<YOUR API KEY>\")\n        config = LanguageConfig()\n        async with client.connect([config]) as socket:\n            for sample in samples:\n                result = await socket.send_text(sample)\n                emotions = result[\"language\"][\"predictions\"][0][\"emotions\"]\n                print(emotions)\n\n    asyncio.run(main())\n    ```\n\n  </CodeBlock>\n\nYour result should look something like this:\n\n  <CodeBlock title=\"Sample Result\">\n    ```python\n    [\n      {'name': 'Admiration', 'score': 0.06379243731498718},\n      {'name': 'Adoration', 'score': 0.07222934812307358},\n      {'name': 'Aesthetic Appreciation', 'score': 0.02808445133268833},\n      {'name': 'Amusement', 'score': 0.027589013800024986},\n      ......\n      {'name': 'Surprise (positive)', 'score': 0.030542362481355667},\n      {'name': 'Sympathy', 'score': 0.03246130049228668},\n      {'name': 'Tiredness', 'score': 0.03606246039271355},\n      {'name': 'Triumph', 'score': 0.01235896535217762}\n    ]\n    ```\n  </CodeBlock>\n\n### Facial expressions from an image\n\nThis example uses our [Facial Expression](/docs/resources/science#facial-expression) model to get expression measurements from an image.\n\n  <CodeBlock title=\"Hume Python SDK\">\n    ```python\n    import asyncio\n\n    from hume import HumeStreamClient, StreamSocket\n    from hume.models.config import FaceConfig\n\n    async def main():\n    client = HumeStreamClient(\"<YOUR API KEY>\")\n    config = FaceConfig(identify_faces=True)\n    async with client.connect([config]) as socket:\n    result = await socket.send_file(\"<YOUR IMAGE FILEPATH>\")\n    print(result)\n\n    asyncio.run(main())\n\n    ```\n\n  </CodeBlock>\n\n### Speech prosody from an audio or video file\n\nThis example uses our [Speech Prosody](/docs/resources/science#speech-prosody) model to get expression measurements from an audio or video file.\n\n  <CodeBlock title=\"Hume Python SDK\">\n    ```python\n    import asyncio\n\n    from hume import HumeStreamClient, StreamSocket\n    from hume.models.config import ProsodyConfig\n\n    async def main():\n        client = HumeStreamClient(\"<YOUR API KEY>\")\n        config = ProsodyConfig()\n        async with client.connect([config]) as socket:\n            result = await socket.send_file(\"<YOUR VIDEO OR AUDIO FILEPATH>\")\n            print(result)\n\n    asyncio.run(main())\n    ```\n\n  </CodeBlock>\n\n---\n\n## Streaming with your own WebSockets client\n\nTo call the API from your own WebSockets client you'll need the API endpoint, a JSON message, and an API key header/param. More information can be found in the [Expression Measurement API reference](/reference/expression-measurement-api/streaming/streaming).\n\nTo get started, you can use a WebSocket client of your choice to connect to the models endpoint:\n\n<CodeBlock title=\"WebSocket URI\">\n  ```url wss://api.hume.ai/v0/stream/models ```\n</CodeBlock>\n\nMake sure you configure the socket connection headers with your personal API key\n\n  <CodeBlock >\n    ```http\n    X-Hume-Api-Key: <YOUR API KEY>\n    ```\n  </CodeBlock>\n\n<Callout intent=\"info\">\n  The default WebSockets implementation in your browser may not have support for\n  headers. If that's the case you can set the apiKey query parameter.\n</Callout>\n\nAnd finally, send the following JSON message on the socket:\n\n  <CodeBlock title=\"JSON Message\">\n    ```json\n    {\n        \"models\": {\n            \"language\": {}\n        },\n        \"raw_text\": true,\n        \"data\": \"Mary had a little lamb\"\n    }\n    ```\n  </CodeBlock>\n\nYou should receive a JSON response that looks something like this:\n\n  <CodeBlock title=\"JSON Response\">\n    ```json\n    {\n      \"language\": {\n        \"predictions\": [\n          {\n            \"text\": \"Mary\",\n            \"position\": { \"begin\": 0, \"end\": 4 },\n            \"emotions\": [\n              { \"name\": \"Anger\", \"score\": 0.012025930918753147 },\n              { \"name\": \"Joy\", \"score\": 0.056471485644578934 },\n              { \"name\": \"Sadness\", \"score\": 0.031556881964206696 },\n            ]\n          },\n          {\n            \"text\": \"had\",\n            \"position\": { \"begin\": 5, \"end\": 8 },\n            \"emotions\": [\n              { \"name\": \"Anger\", \"score\": 0.0016927534015849233 },\n              { \"name\": \"Joy\", \"score\": 0.02388327568769455 },\n              { \"name\": \"Sadness\", \"score\": 0.018137391656637192 },\n              ...\n            ]\n          },\n          ...\n        ]\n      }\n    }\n    ```\n  </CodeBlock>\n\n### Sending images or audio\n\nThe WebSocket endpoints of the Expression Measurement API require that you encode your media using base64. Here's a quick example of base64 encoding data in Python:\n\n  <CodeBlock title=\"Base64 encoding\">\n    ```python\n    import base64\n    from pathlib import Path\n\n    def encode_data(filepath: Path) -> str:\n    with Path(filepath).open('rb') as fp:\n    bytes_data = base64.b64encode(fp.read())\n    encoded_data = bytes_data.decode(\"utf-8\")\n    return encoded_data\n\n    filepath = \"<path-to-your-media>\"\n    encoded_data = encode_data(filepath)\n    print(encoded_data)\n\n    ```\n\n  </CodeBlock>\n\n## FAQs\n\n<AccordionGroup>\n\n<Accordion title=\"What are WebSockets?\">\n  WebSockets are a communication protocol that enables real-time, two-way\n  communication between a client and a server over a single, long-lived\n  connection. They provide a persistent connection that allows both the client\n  and the server to initiate communication at any time.\n</Accordion>\n\n<Accordion title=\"Handling reconnects\">\n  Streaming will disconnect every minute to ensure unused connections are\n  released. You will need to reconnect by building reconnect logic into your\n  application. Implementation of reconnect logic will depend on the language and\n  framework of your client application.\n</Accordion>\n\n<Accordion title=\"Handling connection failures\">\n  WebSocket connections can experience disruptions due to network issues or\n  other factors. Implement error handling mechanisms to gracefully handle\n  connection failures. This includes handling connection timeouts, connection\n  drops, and intermittent connection issues. Implement reconnection logic to\n  automatically attempt to reconnect and resume communication when a connection\n  is lost.\n</Accordion>\n\n<Accordion title=\"Implementing error handling\">\n  Hume WebSockets endpoints can return errors in response to invalid requests,\n  authentication failures, or other issues. Implement proper error handling to\n  interpret and handle these errors in your application. Provide meaningful\n  error messages to users and handle any exceptional scenarios gracefully. To\n  prevent unknowingly initiating too many errors we have put a limit on how many\n  of the same errors you can have in a row. For a full list of the error\n  responses you can expect, please see our [API errors\n  page](/docs/resources/errors#transcript-confidence-below-threshold-value).\n</Accordion>\n\n<Accordion title=\"Keeping WebSockets open\">\n  The benefits of using a the WebSocket is the persistent connection. The open\n  socket should be kept open until the application is done utilizing the service\n  and then closed. Avoid opening a new connection for each file or payload you\n  send to the API. To ensure that context does not leak across multiple\n  unrelated files you can use the\n  [reset_stream](/reference/expression-measurement-api/streaming/streaming#send.publish.reset_stream)\n  parameter.\n</Accordion>\n\n</AccordionGroup>\n```\n"
      },
      "docs/pages/documentation/expression-measurement-api/faqs.mdx": {
        "markdown": "---\ntitle: Expression Measurement API FAQS\n---\n\n<AccordionGroup>\n<Accordion title=\"How do I interpret my results?\">\n\nOur models capture the widest-ever range of facial, speech, vocal, and language modulations with distinct emotional meanings. We label each of their outputs with emotion terms like “amusement” and “doubt,” not because they always correspond to those emotional experiences (they must not, given that they often differ from one modality to another), but because [scientific studies](/docs/resources/science) show that these kinds of labels are the most precise language we have for describing expressions.\n\nOur models generate JSON or CSV output files with values typically ranging from 0 to 1 for [each output](/docs/expression-measurement-api/overview#specific-emotions-by-modality) in different segments of the input file (though values out of the 0-1 range are possible). Higher values indicate greater intensity of facial movements or vocal modulations that are most strongly associated with the emotion label corresponding to the output.\n\nA given expression will contain a blend of various emotions, and our models identify features that are associated with each emotional dimension. The score for each dimension is proportional to the likelihood that a human would perceive that emotion in the expression.\n\nSpecifically, the scores reflect the likelihood that an average human perceiver would use that emotion dimension to describe a given expression. The models were trained on human intensity ratings gathered using the methods described in this paper: [Deep learning reveals what vocal bursts express in different cultures](https://www.nature.com/articles/s41562-022-01489-2.epdf?sharing_token=upXH5pYRNDy1QVrHKvWEytRgN0jAjWel9jnR3ZoTv0Off9hqvBcIT8C4-mHnc4MXXL0Oj_EeMCKVVaZ_f6PtWcSZuPh6i_NUc4WDRO5U7RvMbv6IIG1VY7eIvHqE9wdvetK7lIdIHD1Ienu0MtiudbpptIJOubce--U4g8nYuWQ%3D%3E).\n\nWhile our models measure nuanced expressions that people most typically describe with emotion labels, it's important to remember that they are not a direct readout of what someone is experiencing. Emotional experience is subjective and its expression is multimodal and context-dependent. Moreover, at any given time, our facial expression outputs might be quite different than our vocal expression outputs. Therefore, it's important to follow [best practices](/docs/resources/usage-guidelines) when interpreting outputs.\n\n</Accordion>\n\n<Accordion title=\"What can I do with my outputs?\">\n\nThere are many different ways to use our platform. That said, successful research and applications of our models generally follow four steps: exploration, prediction, improvement, and testing.\n\n1. **Exploration**: Researchers and developers generally begin by exploring patterns in their data.\n\n- Are there apparent differences across participants or users in a study?\n- Do patterns in expression vary systematically over time?\n- Are there different patterns in expression associated with different stages of research or different product experiences?\n\n2. **Prediction**: A great way to evaluate and start building on our APIs is to use them to predict metrics that you already know are important.\n\n- Are key outcomes like mental health or customer satisfaction better predicted by language and expression than by language alone?\n- If patterns in expression predict important outcomes, how do these patterns in expression vary over time and reveal critical moments for a user or participant?\n\n3. **Improvement**: The goal is often to use measures of expression to directly improve how the application works.\n\n- Sometimes, being able to predict an important metric is enough to make a decision. For example, if you can predict whether two people will get along based on their expressions and language, then your application can pair them up.\n- More formally, you can apply statistics or machine learning to the data you gather to improve how the application works.\n- You can incorporate our API outputs into an out-of-the-box large language model, simply by converting them into text (e.g., \"The user sounds calm but a little frustrated\") and feeding them in as prompts.\n- You can use expressions to teach an AI model. For example, if your application involves a large language model, such as an AI tutor, you can use measures of expression that predict student performance and well-being to directly fine-tune the AI to improve over time.\n\n4. **Testing**: After you've incorporated measures of expression into your application, they can be part of every A/B test you perform. You can now monitor the effects of changes to your application not just on engagement and retention, but also on how much users laugh or sigh in frustration, or show signs of interest or boredom.\n\n<Callout intent=\"info\">\n  As you build expression-related signals, metrics, analyses, models, or\n  feedback into an application, remember to use [scientific best\n  practices](/docs/resources/use-case-guidelines#scientific-best-practices) and\n  follow the ethics guidelines of\n  [thehumeinitiative.org](https://thehumeinitiative.org/).\n</Callout>\n\n</Accordion>\n<Accordion title=\"How granular are the outputs of our speech prosody and language models?\">\n\nOur speech prosody model measures the tune, rhythm, and timbre of speech, whereas our language model measures the tone of the words being spoken. When using either model, we offer the flexibility to annotate emotional expressions at several levels of granularity, ranging from individual words to entire conversational turns. It is important to note that independent of granularity, our language model still takes into account up to 50 previous tokens (word or sub-words) of speech; otherwise, it would not be able to capture how the meaning of the words is affected by context.\n\n**Word**: At the word level, our model provides a separate output for each word, offering the most granular insight into emotional expression during speech.\n\n**Sentence**: At the sentence level of granularity, we annotate the emotional tone of each spoken sentence with our prosody and language models.\n\n**Utterance**: Utterance-level granularity is between word- and sentence-level. It takes into account natural pauses or breaks in speech, providing more rapidly updated measures of emotional expression within a flowing conversation. For text inputs, utterance-level granularity will produce results identical to sentence-level granularity.\n\n**Conversational Turn**: Conversational turn-level analysis is a lower level of granularity. It outputs a single output for each turn; that is, the full sequence of words and sentences spoken uninterrupted by each person. This approach provides a higher-level view of the emotional dynamics in a multi-participant dialogue. For text inputs, specifying conversational turn-level granularity for our Language model will produce results for entire passage.\n\n<Callout intent=\"info\">\n  Remember, each level of granularity has its unique advantages, and choosing\n  the right one depends on the requirements of your specific application.\n</Callout>\n\n</Accordion>\n<Accordion title=\"Why am I seeing more face identifiers than the number of people in the video?\">\n\nState-of-the-art face detection and identification algorithms still occasionally make errors. For instance, our algorithm sometimes detects faces in shadows or reflections. Other times, our algorithm falsely attributes a new identity to someone who has already been in the video, sometimes due to changes in lighting or occlusion. These errors can result in additional face IDs. We are still working to fine-tune our algorithm to minimize errors in the contexts that our customers care about.\n\n</Accordion>\n<Accordion title=\"Why don't I see any vocal bursts in my file?\">\n\nOur vocal burst model detects vocalizations such as laughs, screams, sighs, gasps, “mms,” “uhs,” and “mhms.” Natural speech generally contains a few vocal bursts every minute, but scripted speech has fewer vocal bursts. If no vocal bursts are detected, it may be because there are no vocal bursts in the file. However, if you hear vocal bursts that aren't being detected by the algorithm, note that we are also in the process of improving our vocal burst detection algorithm, so please stay tuned for updates.\n\n</Accordion>\n<Accordion title={\"Why am I getting the \\\"Transcript confidence below threshold value\\\" error?\"}>\n\nWe've documented this issue thoroughly in our [API errors page](/docs/resources/errors#transcript-confidence-below-threshold-value).\n\n<Callout intent=\"info\">\nYou can specify any of the following:\n\n`zh`, `da`, `nl`, `en`, `en-AU`, `en-IN`, `en-NZ`, `en-GB`, `fr`, `fr-CA`, `de`, `hi`, `hi-Latn`, `id`, `it`, `ja`, `ko`, `no`, `pl`, `pt`, `pt-BR`, `pt-PT`, `ru`, `es`, `es-419`, `sv`, `ta`, `tr`, or `uk`.\n\n</Callout>\n\n</Accordion>\n\n<Accordion title=\"Which languages are supported?\">\n\nWe support over 50 languages. Among these, 20 languages have additional support for transcription.\n\n| Language Tag | Language            |                 Text                  |             Transcription             |\n| :----------- | :------------------ | :-----------------------------------: | :-----------------------------------: |\n| ar           | Arabic              | <Icon icon=\"check\" color=\"#84B060\" /> |                                       |\n| bg           | Bulgarian           | <Icon icon=\"check\" color=\"#84B060\" /> |                                       |\n| ca           | Catalan             | <Icon icon=\"check\" color=\"#84B060\" /> |                                       |\n| cs           | Czech               | <Icon icon=\"check\" color=\"#84B060\" /> |                                       |\n| da           | Danish              | <Icon icon=\"check\" color=\"#84B060\" /> | <Icon icon=\"check\" color=\"#84B060\" /> |\n| de           | German              | <Icon icon=\"check\" color=\"#84B060\" /> | <Icon icon=\"check\" color=\"#84B060\" /> |\n| el           | Greek               | <Icon icon=\"check\" color=\"#84B060\" /> |                                       |\n| en           | English\\*           | <Icon icon=\"check\" color=\"#84B060\" /> | <Icon icon=\"check\" color=\"#84B060\" /> |\n| es           | Spanish             | <Icon icon=\"check\" color=\"#84B060\" /> | <Icon icon=\"check\" color=\"#84B060\" /> |\n| et           | Estonian            | <Icon icon=\"check\" color=\"#84B060\" /> |                                       |\n| fa           | Farsi               | <Icon icon=\"check\" color=\"#84B060\" /> |                                       |\n| fi           | Finnish             | <Icon icon=\"check\" color=\"#84B060\" /> |                                       |\n| fr           | French              | <Icon icon=\"check\" color=\"#84B060\" /> | <Icon icon=\"check\" color=\"#84B060\" /> |\n| fr-ca        | French (Canada)     | <Icon icon=\"check\" color=\"#84B060\" /> | <Icon icon=\"check\" color=\"#84B060\" /> |\n| gl           | Galician            | <Icon icon=\"check\" color=\"#84B060\" /> |                                       |\n| gu           | Gujarati            | <Icon icon=\"check\" color=\"#84B060\" /> |                                       |\n| he           | Hebrew              | <Icon icon=\"check\" color=\"#84B060\" /> |                                       |\n| hi           | Hindi               | <Icon icon=\"check\" color=\"#84B060\" /> | <Icon icon=\"check\" color=\"#84B060\" /> |\n| hr           | Croatian            | <Icon icon=\"check\" color=\"#84B060\" /> |                                       |\n| hu           | Hungarian           | <Icon icon=\"check\" color=\"#84B060\" /> |                                       |\n| hy           | Armenian            | <Icon icon=\"check\" color=\"#84B060\" /> |                                       |\n| id           | Indonesian          | <Icon icon=\"check\" color=\"#84B060\" /> | <Icon icon=\"check\" color=\"#84B060\" /> |\n| it           | Italian             | <Icon icon=\"check\" color=\"#84B060\" /> | <Icon icon=\"check\" color=\"#84B060\" /> |\n| ja           | Japanese            | <Icon icon=\"check\" color=\"#84B060\" /> | <Icon icon=\"check\" color=\"#84B060\" /> |\n| ka           | Georgian            | <Icon icon=\"check\" color=\"#84B060\" /> |                                       |\n| ko           | Korean              | <Icon icon=\"check\" color=\"#84B060\" /> | <Icon icon=\"check\" color=\"#84B060\" /> |\n| ku           | Kurdish             | <Icon icon=\"check\" color=\"#84B060\" /> |                                       |\n| lt           | Lithuanian          | <Icon icon=\"check\" color=\"#84B060\" /> |                                       |\n| lv           | Latvian             | <Icon icon=\"check\" color=\"#84B060\" /> |                                       |\n| mk           | FYRO Macedonian     | <Icon icon=\"check\" color=\"#84B060\" /> |                                       |\n| mn           | Mongolian           | <Icon icon=\"check\" color=\"#84B060\" /> |                                       |\n| mr           | Marathi             | <Icon icon=\"check\" color=\"#84B060\" /> |                                       |\n| ms           | Malay               | <Icon icon=\"check\" color=\"#84B060\" /> |                                       |\n| my           | Burmese             | <Icon icon=\"check\" color=\"#84B060\" /> |                                       |\n| nb           | Norwegian (Bokmål)  | <Icon icon=\"check\" color=\"#84B060\" /> |                                       |\n| nl           | Dutch               | <Icon icon=\"check\" color=\"#84B060\" /> | <Icon icon=\"check\" color=\"#84B060\" /> |\n| pl           | Polish              | <Icon icon=\"check\" color=\"#84B060\" /> | <Icon icon=\"check\" color=\"#84B060\" /> |\n| pt           | Portuguese          | <Icon icon=\"check\" color=\"#84B060\" /> | <Icon icon=\"check\" color=\"#84B060\" /> |\n| pt-br        | Portuguese (Brazil) | <Icon icon=\"check\" color=\"#84B060\" /> | <Icon icon=\"check\" color=\"#84B060\" /> |\n| ro           | Romanian            | <Icon icon=\"check\" color=\"#84B060\" /> |                                       |\n| ru           | Russian             | <Icon icon=\"check\" color=\"#84B060\" /> | <Icon icon=\"check\" color=\"#84B060\" /> |\n| sk           | Slovak              | <Icon icon=\"check\" color=\"#84B060\" /> |                                       |\n| sl           | Slovenian           | <Icon icon=\"check\" color=\"#84B060\" /> |                                       |\n| sq           | Albanian            | <Icon icon=\"check\" color=\"#84B060\" /> |                                       |\n| sr           | Serbian             | <Icon icon=\"check\" color=\"#84B060\" /> |                                       |\n| sv           | Swedish             | <Icon icon=\"check\" color=\"#84B060\" /> | <Icon icon=\"check\" color=\"#84B060\" /> |\n| th           | Thai                | <Icon icon=\"check\" color=\"#84B060\" /> |                                       |\n| tr           | Turkish             | <Icon icon=\"check\" color=\"#84B060\" /> | <Icon icon=\"check\" color=\"#84B060\" /> |\n| uk           | Ukrainian           | <Icon icon=\"check\" color=\"#84B060\" /> | <Icon icon=\"check\" color=\"#84B060\" /> |\n| ur           | Urdu                | <Icon icon=\"check\" color=\"#84B060\" /> |                                       |\n| vi           | Vietnamese          | <Icon icon=\"check\" color=\"#84B060\" /> |                                       |\n| zh-cn        | Chinese             | <Icon icon=\"check\" color=\"#84B060\" /> | <Icon icon=\"check\" color=\"#84B060\" /> |\n| zh-tw        | Chinese (Taiwan)    | <Icon icon=\"check\" color=\"#84B060\" /> | <Icon icon=\"check\" color=\"#84B060\" /> |\n\n<Callout intent=\"info\">\n  *English is a primary language, and will yield more accurate predictions than\n  inputs in other supported languages. Currently, our NER model only supports\n  the English language.*\n</Callout>\n\n</Accordion>\n</AccordionGroup>\n"
      },
      "docs/pages/documentation/custom-models-api/overview.mdx": {
        "markdown": "---\ntitle: Custom Models API\nexcerpt: Predict preferences more accurately than any LLM.\n\n---\nCombined with words, expressions provide a wealth of information about our state of mind in any given context like customer satisfaction or frustration, patient health and well-being, student comprehension and confusion, and so much more.\n\nHume’s Custom Models API unlocks these insights at the click of a button, integrating patterns of facial expression, vocal expression, and language into a single custom model to predict whatever outcome you specify. This works by taking advantage not only of our state-of-the-art expression AI models, but also specialized language-expression embeddings that we have trained on conversational data.\n\nThe algorithm that drives our Custom Models API is pretrained on huge volumes of data. That means it already recognizes most patterns of expression and language that people form. All you have to do is add your labels.\n\nYou can access our Custom Models API through our no code platform detailed in the next section or through our API. Once you create your initial labeled dataset, your labels will be used to train a custom model that you own and only your account can access. You’ll be able to run the model on any new file through our Playground and Custom Models API. You’ll also get statistics on the accuracy of your custom model.\n"
      },
      "docs/pages/documentation/custom-models-api/creating-your-dataset.mdx": {
        "markdown": "---\ntitle: Creating your dataset\n---\nIn this guide we'll walk you through the process of creating a dataset using the Hume API. In future sections you'll use a dataset to train your own model.\n\n<Steps>\n\n### Uploading media files to Hume\n\nUpload media files to Hume that you want to exist in your custom dataset. These should be images, videos, audio, or text files.\n\n<CodeBlock title=\"cURL\">\n```bash\ncurl --location 'https://api.hume.ai/v0/registry/files'\n--header 'X-Hume-Api-Key: <YOUR API KEY>'\n--header 'Content-Type: application/json'\n--data '[\n  {\n    \"file\": {\n      \"name\": \"<NAME OF FILE>\",\n      \"uri\": \"<URI OF FILE>\",\n      \"hume_storage\": true,\n      \"data_type\": \"image/png\",\n      \"metadata\": {}\n    }\n  },\n  {\n    \"file\": {\n      \"name\": \"<NAME OF FILE>\",\n      \"uri\": \"<URI OF FILE>\",\n      \"hume_storage\": true,\n      \"data_type\": \"image/png\",\n      \"metadata\": {}\n    }\n  }\n]'\n```\n</CodeBlock>\n\nThe API response will show an array of files newly registered with the Hume.\n\n<CodeBlock title=\"Response\">\n```json\n[\n    {\n        \"file\": {\n            \"id\": \"9f045781-3ecd-4f34-ba9c-969139c32256\",\n            \"name\": \"<NAME OF FILE>\",\n            \"uri\": \"<URI OF FILE>\",\n            \"upload_uri\": null,\n            \"thumbnail_uri\": null,\n            \"user_id\": \"<YOUR USER ID>\",\n            \"data_type\": \"image/png\",\n            \"created_on\": 1695851622,\n            \"modified_on\": 1695851622,\n            \"metadata\": {},\n            \"hume_storage\": true,\n            \"hume_storage_upload_timestamp\": null\n        },\n        \"attributes\": []\n    },\n    {\n        \"file\": {\n            \"id\": \"7f02f481-4sf4-dsf3-ba9c-345639c32256\",\n            \"name\": \"<NAME OF FILE>\",\n            ...\n        }\n    }\n]\n```\n</CodeBlock>\n\n### Making your dataset file\n\nWe will create a CSV file that has a column for media file IDs and another column for labels.\nThe file ID column is required and must be named `file_id`. The label column can be named whatever you want. And you can even have multiple label columns, but only one will be used for training your model.\n\nHere we'll add a label column called `expressions` and an extra column just for housekeeping called `file_name`.\n\n| file_name | file_id | expressions |\n| --- | --- | --- |\n| neutral_face.jpeg  | b3cd5662-ea89-4f00-8eae-86218a556027 | Neutral |\n| positive_face.jpeg | 44bc2ac8-41d5-401e-8c88-df179b993be7 | Positive |\n\n### Registering your dataset\n\nNow that we have our media files registered and a CSV associating those files with labels, we can register our dataset.\n\n<CodeBlock tile=\"cURL\">\n```bash\ncurl --location 'https://api.hume.ai/v0/registry/datasets'\n--header 'X-Hume-Api-Key: <YOUR API KEY>'\n--form 'name=\"Negative, Neutral, & Positive Facial Expressions\"'\n--form 'labels_file=@\"<PATH TO LABEL FILE>/labels-file.csv\"'\n```\n</CodeBlock>\n\nSuccess! Your dataset is registered.\n\n<CodeBlock title=\"Response\">\n```json\n{\n    \"id\": \"8d6ddf39-d9ff-4f9c-9dbe-d6e288d8ddd7\",  // Dataset ID\n    \"name\": \"Negative, Neutral, & Positive Facial Expressions\",\n    \"latest_version\": {\n        \"id\": \"d153f723-8a13-48d2-ba74-2a6c333ff0db\",  // Dataset Version ID\n        \"labels_file_uri\": \"<URI TO DATASET FILE>\",\n        \"dataset_id\": \"8d6ddf39-d9ff-4f9c-9dbe-d6e288d8ddd7\",\n        \"dataset_version\": 0,\n        \"created_on\": 1695854279\n    },\n    \"modified_on\": 1695854279,\n    \"metadata\": null\n}\n```\n</CodeBlock>\n\n</Steps>\n"
      },
      "docs/pages/documentation/custom-models-api/training-your-model.mdx": {
        "markdown": "---\ntitle: Training a custom model\n---\nIn this guide we will walk you through training your own custom model.\n\n<Steps>\n### Starting a training job\n\nHere we kick off a training job using a dataset that's already been registered for you. The resulting model will classify facial expressions as negative, positive, or neutral.\n\nNote that we've set `target_feature` to \"Affect\". This refers to the name of the column that we want to predict from our dataset.\n\n<CodeBlock title=\"cURL\">\n```bash\ncurl --location https://api.hume.ai/v0/batch/jobs/tl/train \\\n     --header \"X-Hume-Api-Key: $API_KEY\" \\\n     --header 'Content-Type: application/json' \\\n     --data '{\n  \"custom_model\": {\n    \"name\": \"Negative, Neutral, & Positive Facial Expressions\",\n    \"description\": \"Is Facial Expression Negative, Neutral or Positive\"\n  },\n  \"dataset\": {\n    \"id\": \"ef7955ce-1755-4942-8615-bc16e654e7e5\"\n  },\n  \"target_feature\": \"Affect\",\n  \"task\": {\n    \"type\": \"classification\"\n  }\n}'\n```\n</CodeBlock>\n\nYou'll get back a job ID that you can use to check the status of your training job.\n\n<CodeBlock title=\"Response\">\n```json\n{\n  \"job_id\": \"<JOB ID>\"\n}\n```\n</CodeBlock>\n\n### Checking the status of your training job\n\nUsing the job ID from the previous step, you can get details about the current status of your training job.\n\n<CodeBlock title=\"cURL\">\n```bash\ncurl --location --globoff https://api.hume.ai/v0/batch/jobs/$JOB_ID \\\n     --header \"X-Hume-Api-Key: $API_KEY\"\n```\n</CodeBlock>\n\nIt may take a few minutes for your model to be ready, but once training is complete you will see the status as `COMPLETED` and you'll have access to your new model.\n\n<CodeBlock title=\"Response\">\n```json\n{\n  \"type\": \"TRAINING\",\n  \"job_id\": \"<JOB ID>\",\n  \"user_id\": \"<USER ID>\",\n  \"request\": {\n    \"custom_model\": {\n      \"name\": \"Negative, Neutral, & Positive Facial Expressions\",\n      \"description\": \"Is Facial Expression Negative, Neutral or Positive\",\n     },\n    \"dataset\": {\n      \"id\": \"ef7955ce-1755-4942-8615-bc16e654e7e5\"\n    },\n    \"target_feature\": \"interaction\",\n    \"task\": {\n      \"type\": \"classification\"\n    }\n  },\n  \"state\": {\n    \"status\": \"COMPLETED\",\n    \"created_timestamp_ms\": 42,\n    \"started_timestamp_ms\": 32,\n    \"ended_timestamp_ms\": 23,\n \t\t\"custom_model\": {\n\t\t\t\"id\": \"<CUSTOM MODEL ID>\"\n  \t}\n  }\n}\n```\n</CodeBlock>\n\n### Testing your custom model\n\nYour custom model is ready to use!\n\nYou can test your model by sending a request to the Custom Models inference endpoint with URLs of images to classify. The model we trained is a facial expression classifier, so test URLs should point to images of faces.\n\n<CodeBlock title=\"cURL\">\n```bash\ncurl --location https://api.hume.ai/v0/batch/jobs/tl/inference \\\n     --header X-Hume-Api-Key: $API_KEY \\\n     --header 'Content-Type: application/json' \\\n     --data '{\n  \"custom_model\": {\n    \"id\": \"<CUSTOM MODEL ID>\"\n  },\n  \"urls\": [\"<URL TO TEST FILE>\"]\n }'\n```\n</CodeBlock>\n\nJust like before, we get back a job ID that we can use to check the status of our job.\n\n<CodeBlock title=\"Response\">\n```json\n{\n  \"job_id\": \"<JOB ID>\"\n}\n```\n</CodeBlock>\n\n### Checking the status of your inference job\n\nUse the job ID from the previous step to check on the status of your model inference job.\n\n<CodeBlock title=\"cURL\">\n```bash\ncurl --location --globoff https://api.hume.ai/v0/batch/jobs/$JOB_ID \\\n     --header \"X-Hume-Api-Key: $API_KEY\"\n```\n</CodeBlock>\n\nOnce the model is done predicting the classes of the images you provided, you'll get a `COMPLETED` status.\n\n<CodeBlock title=\"Response\">\n```json\n{\n  \"type\": \"INFERENCE\",\n  \"job_id\": \"<JOB ID>\",\n  \"user_id\": \"<YOUR USER ID>\",\n  \"request\": {},\n  \"state\": {\n    \"status\": \"COMPLETED\",\n    \"created_timestamp_ms\": 42\n  }\n}\n```\n</CodeBlock>\n\n### Getting model predictions\n\nFinally, you can request the actual model predictions from the inference job. The JSON result will show the predicted class for each image you provided.\n\n<CodeBlock title=\"cURL\">\n```bash\ncurl --request GET \\\n     --url https://api.hume.ai/v0/batch/jobs/$JOB_ID/predictions \\\n     --header \"X-Hume-Api-Key: $API_KEY\" \\\n     --header \"accept: application/json; charset=utf-8\"\n```\n</CodeBlock>\n\n</Steps>"
      },
      "docs/pages/documentation/custom-models-api/evaluating-your-model.mdx": {
        "markdown": "---\ntitle: Evaluating your model\n---\nEach custom model you train has a corresponding details page, viewable from the [Hume website](https://beta.hume.ai). The model details page displays metrics and visualizations to evaluate your model&CloseCurlyQuote;s performance. This document serves to help you interpret those metrics and provide guidance on ways to improve your custom model.\n\n<div align='center'>\n  ![model details](https://fern-image-hosting.s3.amazonaws.com/hume/guides-custom-models-custom-model-eval-header.png)\n</div>\n\n<Callout intent=\"info\">\n**Limitations of model validation metrics**\n\nModel validation metrics are estimates based on a split of your dataset into training and evaluation parts. The larger the training set, the more reliable the metrics. However, it&CloseCurlyQuote;s important to remember that these metrics are indicative and do not guarantee performance on unseen data.\n\n</Callout>\n\n**Assessing 'good' performance**\n\n- **Task-specific variances and performance metrics**: with expression analysis, the complexity of your task determines the range of model performance, which in the case of classification models can technically vary from zero to perfect accuracy. Depending on the complexity of your task, less than perfect performance may still be very useful to serve as an indication of likelihood for your given target.\n- **Influence of number of classes**: prediction gets more difficult as the number of classes in your dataset increases, particularly when distinction between classes is more subtle. Inherently the level of chance will be higher with a lower number of classes. For example, for 3-classes your low-end performance is 33% accuracy vs 50% for a binary problem.\n- **Application-specific requirements**: when establishing acceptable accuracy for a model, it&CloseCurlyQuote;s important to consider the sensitivity and impact of its application. An appropriate accuracy threshold varies with the specific demands and potential consequences of the model&CloseCurlyQuote;s use, requiring a nuanced understanding of how accuracy levels intersect with the objectives and risks of each unique application.\n\n<Callout intent=\"info\">\n**How is it possible that my model achieved 100% accuracy?**\n\nAchieving 100% accuracy is possible, however it is important to consider, especially in small datasets, that this might indicate model overfitting, caused by feature leakage or other data anomalies. Feature leakage occurs when your model inadvertently learns from data that explicitly includes label information (e.g., sentences of &OpenCurlyQuote;I feel happy&CloseCurlyQuote; for a target label &OpenCurlyQuote;happy&CloseCurlyQuote;) leading to skewed results. To ensure more reliable performance, it&CloseCurlyQuote;s advisable to use larger datasets and check that your data does not unintentionally contain explicit information about the labels.\n\n</Callout>\n\n**Advanced evaluation metrics**\n\nIn addition to accuracy, advanced metrics for a deeper evaluation of your custom model&CloseCurlyQuote;s performance are also provided. These metrics can be viewed on each custom model&CloseCurlyQuote;s details page.\n\n<div align='center'>\n  ![model details](https://fern-image-hosting.s3.amazonaws.com/evaluating-a-custom-model.png)\n</div>\n\n| Term              | Definition|\n| ----------------- ||\n| Accuracy          | A fundamental metric in model performance evaluation which measures the proportion of correct predictions (true positives and true negatives) against the total number made. It&CloseCurlyQuote;s straightforward and particularly useful for balanced datasets. However, accuracy can be misleading in imbalanced datasets where one class predominates, as a model might seem accurate by mainly predicting the majority class, neglecting the minority. This limitation underscores the importance of using additional metrics like precision, recall, and F1 score for a more nuanced assessment of model performance across different classes. |\n| Precision         | Score which measures how often the model detects positives correctly. (e.g., When your model identifies a customer&CloseCurlyQuote;s expression as 'satisfied', how often is the customer actually satisfied? Low precision would mean the model often misinterprets other expressions as satisfaction, leading to incorrect categorization.)                                                                                                                                                                                                                                                                                                       |\n| Recall            | Score which measures how often the model correctly identifies actual positives. (e.g., Of all the genuine expressions of satisfaction, how many does your model accurately identify as 'satisfied'?\" Low recall implies the model is missing out on correctly identifying many true instances of customer satisfaction, failing to recognize them accurately.)                                                                                                                                                                                                                                                                                      |\n| F1                | A metric that combines precision and recall, providing a balanced measure of a model&CloseCurlyQuote;s accuracy, particularly useful in scenarios with class imbalance or when specific decision thresholds are vital.                                                                                                                                                                                                                                                                                                                                                                                                                              |\n| Average Precision | A metric that calculates the weighted average of precision at each threshold, providing a comprehensive measure of a model&CloseCurlyQuote;s performance across different levels of recall.                                                                                                                                                                                                                                                                                                                                                                                                                                                         |\n| Roc Auc           | (Area under the ROC curve) a comprehensive measure of a model&CloseCurlyQuote;s ability to distinguish between classes across all possible thresholds, making it ideal for overall performance evaluation and comparative analysis of different models.                                                                                                                                                                                                                                                                                                                                                                                             |\n\n**Improving model performance**\n\n- **Increase data quantity**: adding more data will often help a model to learn a broader range of the given target&CloseCurlyQuote;s representation, increasing the likelihood of capturing outliers from diverse patterns and scenarios.\n- **Improve label quality**: ensure that each data point in your dataset is well-labeled with clear, accurate, and consistent annotations. Properly defined labels are essential for reducing misinterpretations and confusion, allowing the model to accurately represent and learn from the dataset&CloseCurlyQuote;s true characteristics. Ensuring balance in the distribution of labels is important to ensure that the model is not biased towards a specific label.\n- **Enhance data quality**: refine your dataset to ensure it is free from noise and irrelevant information. High-quality data (in terms of your target) enhances the model&CloseCurlyQuote;s ability to make precise predictions and learn effectively from relevant features, critical in complex datasets.\n- **Incorporate clear audio data**: when working with models analyzing vocal expressions, ensure audio files include clear, audible spoken language. This enhances the model&CloseCurlyQuote;s ability to accurately interpret and learn from vocal nuances. Explore various segmentation strategies which evaluate the effect that environmental sound may have on your model&CloseCurlyQuote;s performance.\n"
      },
      "docs/pages/documentation/custom-models-api/faqs.mdx": {
        "markdown": "---\ntitle: FAQ\n---\n\n<AccordionGroup>\n\n<Accordion title=\"When should I use Custom Models?\">\nCustom Models become essential when raw embeddings from Hume’s expression measurement models require further tailoring for specific applications. Here are scenarios where Custom Models offer significant advantages:\n\n- **Specialized contexts**: In environments with unique characteristics or requirements, Custom Models enable the creation of context-specific labels, ensuring more relevant and accurate insights. If your project demands a particular set of labels that are not covered by Hume’s emotional expression labels, Custom Models enable you to create and apply these labels, ensuring that the analysis aligns with your specific objectives.\n- **Iterative model improvement**: In evolving fields or scenarios where data and requirements change over time, Custom Models offer the flexibility to iteratively improve and adapt the model with new data and labels.\n\n</Accordion>\n\n<Accordion title=\"What is Regression vs. Classification in model labeling and training?\">\nIn labeling, regression involves assigning continuous numerical values, while classification involves categorizing data into discrete labels. During training, regression models learn to predict numerical values, whereas classification models learn to categorize data points into predefined classes.\n\n**Classification use cases**\n\n- **Emotion Categorization**: Classification excels in distinguishing distinct emotional states, like identifying happiness, sadness, or surprise based on linguistic or physical expression cues.\n- **Binary Emotional Analysis**: Useful in binary scenarios such as detecting presence or absence of specific emotional reactions, like engagement or disengagement in a learning environment.\n- **Multi-Emotional Identification**: Perfect for classifying a range of emotions in complex scenarios, like understanding varied customer reactions from satisfied to dissatisfied based on their verbal and non-verbal feedback.\n\n**Regression use cases**\n\n- **Intensity Measurement**: Regression is apt for quantifying the intensity or degree of emotional responses, such as assessing the level of stress or joy from vocal or facial cues.\n- **Emotional Progression Tracking**: Ideal for monitoring the fluctuation of emotional states over time, like tracking the development of engagement or anxiety in therapy sessions.\n\nIn essence, regression models in emotional expression analysis assign continuous values representing intensities or degrees, while classification models categorize expressions into distinct states or reactions.\n\n</Accordion>\n\n<Accordion title=\"What are guidelines for building datasets?\">\nOur custom model pipeline is designed to accommodate a wide range of data types, including audio, videos, and text, automatically integrating multimodal patterns of expression and language. However, not all datasets are created equal. For best results, we recommend using a dataset that meets certain standards:\n\n**Dataset size**\n\nIdeally, use a dataset consisting of a minimum of 20 files, but more data is always better for model performance.\n\n**Media type consistency**\n\nAll files within a dataset should be of the same media type (video, audio, image, text...etc.)\n\nIt's generally wise to maintain a consistent naming convention and file format for your dataset. At minimum, ensure files have appropriate extensions, such as `.wav`, `.mp3`, `.aif`, `.mov`, or `.mp4`.\n\n**Classification vs regression tasks**\n\nDepending on your model's objective (classification or regression), you can use different labeling approaches.\n\n- **Classification labels**: use either strings or integers as labels (e.g., \"confused,\" \"focused\"). We limit the number of categorical labels to 50, and you must have at least two (binary).\n- **Regression targets**: use either integers or decimals as targets. A model trained on a regression task with predict a continuous numerical value.\n\n**Label consistency**\n\nWe recommend that your labels follow a consistent format; e.g, do not mix integers and strings. Furthermore, be sure to check for any typos in your labels, as these will be considered as separate classes, e.g, “happy” vs. “hapy.”\n\n**Class imbalance**\n\nIf possible, it helps to have a balanced distribution of labels in your dataset. For example, if you have 50 files and two classes, the best case is to have 25 samples per class. Generally, you need at least 10 samples per class to train a useful model, but more data per class is always better.\n\n</Accordion>\n\n<Accordion title=\"Which languages are supported by Custom Models?\">\n  Our custom models support the same range of languages as our expression\n  measurement models. You can find a complete list of supported languages\n  [here](/docs/expression-measurement-api/faqs#which-languages-are-supported-).\n</Accordion>\n\n</AccordionGroup>\n"
      },
      "docs/pages/documentation/resources/billing.mdx": {
        "markdown": "---\ntitle: Billing\n---\n## Postpaid billing\n\nWe're in the process of transitioning to postpaid billing, a flexible pay-as-you-go system. You pay only for the services used, without needing to purchase credits upfront. This option is not available for all Hume users quite yet. You can check [Usage & Billing](https://beta.hume.ai/settings/usage) to see if postpaid billing is available for your account and reach out to our [support team](/support) if you're interested in getting early access.\n\n<Callout intent=\"info\">\nPostpaid billing is a private beta feature, rolling out to a limited number of users over the next few weeks.\n</Callout>\n\n## How it works\n\n1. **Joining the platform**: When you sign up and start using our API, you'll initially be using the free credits given to every new account.\n2. **Credit card requirement**: Once you've exhausted your credit balance, you'll need to add your credit card information to continue.\n3. **Monthly limit and notifications**:\n   - You'll have a default monthly limit of $100.\n   - If you hit the $100 limit, API calls will return an error, and you'll be prompted to apply for a limit increase.\n4. **Billing notifications**:\n   - On the first of each month, you'll receive an invoice for the previous month’s usage.\n   - If your credit card is successfully added, it will be charged automatically.\n   - You'll get a confirmation email for successful transactions or an alert if a transaction fails.\n5. **Failure to pay**: If payment isn't received within 7 days of the invoice date, API access will be suspended until the outstanding balance is settled.\n\n## Managing your account\n\n- **Usage information**: To view your monthly usage details, visit [Usage & Billing](https://beta.hume.ai/settings/usage). There you can track your API usage and see how much of your monthly limit has been utilized.\n  - **Note**: After your prepaid credits are used, further usage accrues to your _monthly cost_.  You'll be charged this amount on the first of the following month. Your monthly cost is updated daily at 08:00 UTC.\n- **Billing portal**: To manage your billing details, navigate to [Usage & Billing](https://beta.hume.ai/settings/usage) and select **Manage payments and view invoices**. There you can update your payment method, view past invoices, and keep track of upcoming charges.\n\n## Understanding your bill\n\n### Pricing\n\nFind up-to-date pricing information at [hume.ai/pricing](https://beta.hume.ai/pricing).\n\n### Billing methodology\n\n1. **Audio and video:**\n   - Our listed prices are presented per minute for ease of understanding.\n   - However, we bill these services on a corresponding per-second basis to ensure precise and fair charges. This means you are only billed for the exact amount of time your audio or video content is processed.\n2. **Image and text:**\n   - Image processing charges are incurred per image.\n   - Text processing is billed based on the number of words processed.\n\n## FAQs\n\n<AccordionGroup>\n<Accordion title=\"Why do I have a negative credit balance?\">\nAfter you use all your credits, there might be a delay before we switch you to a subscription or stop access, which can result in a small negative credit balance. This is normal and won't affect your subscription.\n</Accordion>\n</AccordionGroup>\n\nIf you have questions about your bill or need assistance understanding the charges, please contact [billing@hume.ai](mailto:billing@hume.ai)."
      },
      "docs/pages/documentation/resources/errors.mdx": {
        "markdown": "---\ntitle: \"Errors\"\nredirects: \n  - \"/streaming-api-error-codes\"\n---\n\n## Configuration errors\n\nConfiguration errors indicate that something about the API call was not configured correctly. The error message you get from the Hume APIs will often contain more information than we're able to provide on this page. For example if an audio file is too long, the error message from the API will specify the limit as well as the length of the audio received.\n\n| Error Code | Description |\n|------------|-------------|\n|E0100|The WebSocket request could not be parsed as valid JSON. The Hume API requires JSON serializable payloads.|\n|E0101|You may be missing or improperly formatting a required field. This generic error indicates that the structure of your WebSocket request was invalid. Please see the error message you received in the API response for more details.|\n|E0102|The requested model was incompatible with the file format received. Some models are not compatible with every file type. For example, no facial expressions will be detected in a text file. Audio can be extracted out of some video files, but if the video has no audio, then models like Speech Prosody and Vocal Burst will not be available.|\n|E0200|Media provided could not be parsed into a known file format. Hume APIs support a wide range of file formats and media types including audio, video, image, text, but not all formats are supported. If you receive this error and believe your file type should be supported please reach out to our [support team](/support).|\n|E0201|Media could not be decoded as a Base64 encoded string. The [data](/reference/expression-measurement-api/streaming/streaming#send.publish.data) field in the request payload should be Base64 encoded bytes. If you want to pass raw text without encoding it you can do so with the [raw_text](/reference/expression-measurement-api/streaming/streaming#send.publish.raw_text) parameter.|\n|E0202|No audio signal could be inferred from the media provided. This error indicates that audio models were configured, but the media provided could not be parsed into a valid audio file.|\n|E0203|Your audio file was too long. The limit is 5000 milliseconds. The WebSocket endpoints are intended for near real-time processing of data streams. For larger files considering using the [Hume Measurement API REST endpoints](/docs/expression-measurement-api/rest).|\n|E0204|Your video file was too long. For best performance we recommend passing individual frames of video as images rather than full video files.|\n|E0205|Your image file was too large. The limit is 3,000 x 3,000 pixels. The WebSocket endpoints are intended for near real-time processing of data streams. For larger files considering using the [Hume Measurement API REST endpoints](/docs/expression-measurement-api/rest).|\n|E0206|Your text file was too long. The limit is 10,000 characters. The WebSocket endpoints are intended for near real-time processing of data streams. For larger files considering using the [Hume Measurement API REST endpoints](/docs/expression-measurement-api/rest).|\n|E0207|The URL you've provided appears to be incorrect. Please verify that you've entered the correct URL and try submitting it again. If you're copying and pasting, ensure that the entire URL has been copied without any missing characters.|\n|E0300|You've run out of credits. Go to [beta.hume.ai](https://beta.hume.ai) to purchase more.|\n|E0400|You've referenced a resource that doesn't exist in our system. Please check if the name or identifier you used is correct and try again.|\n|E0401|Your upload failed. Please ensure your file meets our format and size requirements, and attempt to upload it again.|\n|E0402|The CSV file you used to create or update a dataset is missing a header row. The header specifies what each column represents. Update your CSV file and retry your request. For more information about how to format your dataset CSV please see our tutorial on [dataset creation](/docs/custom-models-api/creating-your-dataset#making-your-dataset-file).|\n|E0500|Your dataset doesn't meet the minimum sample size requirement. Please add more files to your dataset and resubmit your training job. For more information, please see our docs on [dataset requirements](/docs/custom-models-api/faqs#what-are-guidelines-for-building-datasets-).|\n|E0501|Your dataset contains a target column with empty values. Please clean your dataset so that all labels are valid categorical or numeric values and then resubmit your training job. For more information on target columns please see our docs on [dataset requirements](/docs/custom-models-api/faqs#what-are-guidelines-for-building-datasets-).|\n|E0502|Your dataset contains a target column with infinite values. Please clean your dataset so that all labels are valid categorical or numeric values and then resubmit your training job. For more information on target columns please see our tutorial on [dataset creation](/docs/custom-models-api/creating-your-dataset#making-your-label-file).|\n|E0503|For classification tasks, your dataset must include at least two distinct classes. Please check your dataset has two unique labels in the target column.|\n|E0504|Some classes in your dataset don't have enough samples. To ensure that the model we produce is of the highest quality we require your dataset to be relatively balanced across classes. Please check the error message for which class should have more samples (or remove that class entirely). Please see our docs on [dataset requirements](/docs/custom-models-api/faqs#what-are-guidelines-for-building-datasets-) for more details.|\n|E0505|The target column you've selected doesn't exist in the dataset. Please review the columns that exist in your dataset and select a valid column name.|\n|E0506|Your chosen target column is not a valid target column. Please ensure that you select a column with labels rather than the `file_id` column or another reserved column name.|\n\n<Callout intent=\"warning\">\n    The connection will be closed automatically after ten identical configuration errors to avoid unintended looping.\n</Callout>\n\n## Service errors\n\nIf you encounter an error code starting with `I` (for example, error code `I0100`), it indicates an outage or a bug in a Hume service. Our team will already have been alerted of the internal error, but if you need immediate assistance please reach out to our [support team](/support).\n\n## Warnings\n\nWarnings indicate that the payload was configured correctly, but no results could be returned.\n\n| Error Code | Description |\n|------------|-------------|\n|W0101|No vocal bursts could be detected in the media.|\n|W0102|No face meshes could be detected in the media.|\n|W0103|No faces could be detected in the media.|\n|W0104|No emotional language could be detected in the media.|\n|W0105|No speech could be detected in the media.|\n\n## Common errors\n\nSome errors will not have an associated error code, but are documented here.\n\n### Transcript confidence below threshold value\nThis error indicates that our transcription service had difficulty identifying the language spoken in your audio file or the quality was too low. We prioritize quality and accuracy, so if it cannot transcribe with confidence, our models won't be able to process it further.\n\nBy default, we use an automated language detection method for our Speech Prosody, Language, and NER models. However, if you know what language is being spoken in your media samples, you can specify it via its BCP-47 tag and potentially obtain more accurate results.\n\nIf you see the message above there are few steps you can do to resolve the issue:\n\n* Verify we support the language\n* Ensure you are providing clear, high-quality audio files.\n* Specify the language within your request if you know the language in the audio.\n\n<CodeBlocks>\n    <CodeBlock title=\"Hume Python SDK\">\n        ```python\n        from hume import HumeBatchClient\n        from hume.models.config import ProsodyConfig\n\n        client = HumeBatchClient(\"<YOUR API KEY>\")\n        urls = [\"https://hume-tutorials.s3.amazonaws.com/faces.zip\"]\n        model_configs = [ProsodyConfig()]\n        transcription_config = TranscriptionConfig(language=\"en\")\n        job = client.submit_job(urls, model_configs, transcription_config=transcription_config)\n\n        print(job)\n        print(\"Running...\")\n\n        job.await_complete()\n        predictions = job.get_predictions()\n        print(prediction)\n        ```\n    </CodeBlock>\n    <CodeBlock title=\"JSON\">\n        ```json\n        \"transcription\": {\n            \"language\": \"en\"\n        }\n        ```\n    </CodeBlock>\n</CodeBlocks>\n\n<Callout intent=\"info\">\n    You can specify any of the following:\n    zh, da, nl, en, en-AU, en-IN, en-NZ, en-GB, fr, fr-CA, de, hi, hi-Latn, id, it, ja, ko, no, pl, pt, pt-BR, pt-PT, ru, es, es-419, sv, ta, tr, or uk\n</Callout>\n"
      },
      "docs/pages/documentation/resources/science-hume-ai.mdx": {
        "markdown": "---\ntitle: \"About the Science\"\n---\n\nWhat is it about speaking in person that allows us to understand each other so much more accurately than text alone? It isn’t what we say—it’s the way we say it. Science consistently demonstrates that expressions convey important information that is vital for social interaction and forms the building blocks of empathy.\n\nThat being said, expressions aren’t direct windows into the human mind. Measuring and interpreting expressive behavior is a complex and nuanced task that is the subject of ongoing scientific research.\n\nThe scientists at Hume AI have run some of the largest-ever psychology studies to better understand how humans express themselves. By investigating expressions around the world and what they mean to the people making them, we’ve mapped out the nuances of expression in the voice, language, and face in unprecedented detail. We’ve published this research in the world’s leading scientific journals and, for the first time, translated it into cutting-edge machine learning models.\n\nThese models, shaped by a new understanding of human expression, include:\n\n- Facial Expression\n- Speech Prosody\n- Vocal Bursts\n- Emotional Language\n\n---\n\n## Modalities\n\n### Facial Expression\n\nFacial expression is the most well-studied modality of expressive behavior, but the overwhelming focus has been on six discrete categories of facial movement or time-consuming manual annotations of facial movements (the scientifically useful, but outdated, Facial Action Coding System). Our research shows that these approaches capture less than 30% of what typical facial expressions convey.\n\nHume’s **Facial Emotional Expression** model generates 48 outputs encompassing the dimensions of emotional meaning people reliably attribute to facial expressions. As with every model, the labels for each dimension are proxies for how people tend to label the underlying patterns of behavior. They should not be treated as direct inferences of emotional experience.\n\nHume’s **FACS 2.0** model is a new generation automated facial action coding system (FACS). With 55 outputs encompassing 26 traditional actions units (AUs) and 29 other descriptive features (e.g., smile, scowl), FACS 2.0 is even more comprehensive than manual FACS annotations.\n\nOur facial expression models are packaged with face detection and work on both images and videos.\n\nIn addition to our image-based facial expression models, we also offer an **Anonymized Facemesh** model for applications in which it is essential to keep personally identifiable data on-device (e.g., for compliance with local laws). Instead of face images, our facemesh model processes facial landmarks detected using [Google's MediaPipe](https://mediapipe.dev/) library. It achieves about 80% accuracy relative to our image-based model.\n\nTo read more about the team’s research on facial expressions, check out our publications in [American Psychologist (2018)](https://psycnet.apa.org/record/2019-32629-001), [Nature (2021)](https://www.nature.com/articles/s41586-020-3037-7), and [iScience (2024)](https://doi.org/10.1016/j.isci.2024.109175).\n\n### Speech Prosody\n\nSpeech prosody is not about the words you say, but the way you say them. It is distinct from language (words) and from non-linguistic vocal utterances.\n\nOur **Speech Prosody** model generates 48 outputs encompassing the 48 dimensions of emotional meaning that people reliably distinguish from variations in speech prosody. As with every model, the labels for each dimension are proxies for how people tend to label the underlying patterns of behavior. They should not be treated as direct inferences of emotional experience.\n\nOur Speech Prosody model is packaged with speech detection and works on both audio files and videos.\n\nTo read more about the team’s research on speech prosody, check out our publications in [Nature Human Behaviour (2019)](https://www.nature.com/articles/s41562-019-0533-6) and [Proceedings of the 31st ACM International Conference on Multimedia (2023)](https://dl.acm.org/doi/abs/10.1145/3581783.3612835).\n\n### Vocal Bursts\n\nNon-linguistic vocal utterances, including sighs, laughs, oohs, ahhs, umms, and shrieks (to name but a few), are a particularly powerful and understudied modality of expressive behavior. Recent studies reveal that they reliably convey distinct emotional meanings that are extremely well-preserved across most cultures.\n\nNon-linguistic vocal utterances have different acoustic characteristics than speech emotional intonation (prosody) and need to be modeled separately.\n\nOur **Vocal Burst Expression** model generates 48 outputs encompassing the distinct dimensions of emotional meaning that people distinguish in vocal bursts. As with every model, the labels for each dimension are proxies for how people tend to label the underlying patterns of behavior. They should not be treated as direct inferences of emotional experience.\n\nOur **Vocal Burst Description** model provides a more descriptive and categorical view of nonverbal vocal expressions (“gasp,” “mhm,” etc.) intended for use cases such as audio captioning. It generates 67 descriptors, including 30 call types (“sigh,” “laugh,” “shriek,” etc.) and 37 common onomatopoeia transliterations of vocal bursts (“hmm,” “ha,” “mhm,” etc.).\n\nOur vocal burst models are packaged with non-linguistic vocal utterance detection and works on both audio files and videos.\n\nTo read more about the team’s research on vocal bursts, check out our publications in [American Psychologist (2019)](https://www.ncbi.nlm.nih.gov/pmc/articles/PMC6586540/), [Interspeech 2022](https://www.researchgate.net/profile/Dacher-Keltner/publication/363646465_State_Trait_Measurement_from_Nonverbal_Vocalizations_A_Multi-Task_Joint_Learning_Approach/links/6415825366f8522c38b3d959/State-Trait-Measurement-from-Nonverbal-Vocalizations-A-Multi-Task-Joint-Learning-Approach.pdf), [ICASSP 2023](https://ieeexplore.ieee.org/abstract/document/10095294/), and [Nature Human Behaviour (2023)](https://www.nature.com/articles/s41562-022-01489-2).\n\n### Emotional Language\n\nThe words we say include explicit disclosures of emotion and implicit emotional connotations. These meanings are complex and high-dimensional.\n\nFrom written or spoken words, our **Emotional Language** model generates 53 outputs encompassing different dimensions of emotion that people often perceive from language. As with every model, the labels for each dimension are proxies for how people tend to label the underlying patterns of behavior. They should not be treated as direct inferences of emotional experience.\n\nOur Emotional Language model is packaged with speech transcription and works on audio files, videos, and text.\n\nOur **Named Entity Recognition (NER)** model can also identify topics or entities (people, places, organizations, etc.) mentioned in speech or text and the tone of language they are associated with, as identified by our emotional language model.\n\n---\n\n## Published Research\n\nYou can access a comprehensive list of our published research papers along with PDFs for download [here](https://github.com/HumeAI/hume-research-publications/tree/main).\n"
      },
      "docs/pages/documentation/resources/use-case-guidelines.mdx": {
        "markdown": "## Ethical guidelines\nUnderstanding expressive communication is essential to building technologies that address our needs and improve our well-being. But technologies that recognize language and nonverbal behavior can also pose risks. That’s why we require that all commercial applications incorporating our APIs adhere to the ethical guidelines of The Hume Initiative.\n\n## Scientific best practices\n1. **Use inductive methods to identify the expressive signals that matter for your application.** Even if you are interested in a specific emotion like “anger,” how that emotion is expressed depends on setting: anger on a football field sounds different than anger on a customer service call. Our models succinctly compress the representation of emotional expression so that, even with limited data, you can examine how their outputs can be used in your specific research or application setting. You can do this by using statistical methods like regression or classification, or by examining the distribution of expressions in your data using our [Playground](https://beta.hume.ai/).\n2. **Never assume a one-to-one mapping between emotional experience and expression.** The outputs of our models should be treated as measurements of complex expressive behavior. We provide labels to our outputs indicating what these dimensions of expression are often reported to mean, but these labels should not be interpreted as direct inferences of how someone is feeling at any given time. Rather, “a full understanding of emotional expression and experience requires an appreciation of a wide degree of variability in display behavior, subjective experience, patterns of appraisal, and physiological response, both within and across emotion categories” ([Cowen et al., 2019](https://journals.sagepub.com/doi/10.1177/1529100619850176)).\n3. **Never overlook the nuances in emotional expression.** For instance, avoid the temptation to focus on just the top label. We provide interactive visualizations in our [Playground](https://beta.hume.ai/) to help you map out complex patterns in real-life emotional behavior. These visualizations are informed by recent advances in emotion science, departing from reductive models that long “anchored the science of emotion to a predominant focus on prototypical facial expressions of the “basic six”: anger, disgust, fear, sadness, surprise, and happiness,” and embracing how “new discoveries reveal that the two most commonly studied models of emotion—the basic six and the affective circumplex (comprising valence and arousal)—each capture at most 30% of the variance in the emotional experiences people reliably report and in the distinct expressions people reliably recognize.” ([Cowen et al., 2019](https://journals.sagepub.com/doi/10.1177/1529100619850176))\n4. **Account for culture-specific meanings and display tendencies.** Studies have routinely observed subtle cultural differences in the meaning of expressions as well as broader “variations in the frequency and intensity with which different expressions were displayed” ([Cowen et al., 2022](https://psyarxiv.com/gbqtc/)). Given these differences, empathic AI applications should be tested in each population in which they are deployed and fine-tuned when necessary.\nRead about the [science](/docs/resources/science) behind our models if you’d like to delve deeper into how they work.\n\n"
      },
      "docs/pages/documentation/resources/privacy.mdx": {
        "markdown": "---\ntitle: Privacy\n---\n## Privacy Policy \n\nOur [Privacy Policy](https://www.hume.ai/privacy-policy) governs how we collect and use personal information submitted to our products.\n\n## API Data Usage Policy\n\nOur [API Data Usage Policy](https://beta.hume.ai/policies/api-data-usage-policy) details how and when we store API data.\n\n\n## Consumer Services FAQ\n\nOur Consumer Services FAQ explains how and when we store data processed by our frontend applications like our Playground.\n<AccordionGroup>\n<Accordion title=\"Does Hume AI train on my content to improve model performance?\" >\n\nFor non-API consumer products like our Playground, we may use content such as images, video files, audio files, and text files to improve our services. You can request to opt out of having your content used to improve our services at any time by contacting us on [Discord](https://discord.com/invite/WPRSugvAm6) with your request. This opt-out will apply on a going-forward basis only.\n\nPlease note that for our API product, Hume AI will not use data submitted by customers via our API to train or improve our models.\n</Accordion>\n\n<Accordion title=\"How do I delete my account?\">\n\nYou can delete your account by messaging the moderators of our [Discord Server](https://discord.com/invite/WPRSugvAm6) with your specific request. Once you submit your deletion request, we will delete your account within 30 days. Please note that for security reasons, once you delete your account, you may not re-sign up for an account with the same email address.\n</Accordion>\n\n<Accordion title=\"Is my content shared with third parties?\">\n\nWe share content with a select group of trusted service providers that help us provide our services. We share the minimum amount of content we need in order to accomplish this purpose and our service providers are subject to strict confidentiality and security obligations. Please see our [Privacy Policy](https://www.hume.ai/privacy-policy) for more information on who we may share your content with.\n\n</Accordion>\n\n<Accordion title=\"Where is my content stored?\">\n\nContent is stored on Hume AI systems and our trusted service providers' systems in the US and around the world.\n\n</Accordion>\n\n<Accordion title=\"Do humans view my content?\">\n\nA limited number of authorized Hume AI personnel, may view and access user content only as needed for these reasons: (1) investigating abuse or a security incident; (2) to provide support to you if you reach out to us with questions about your account; (3) or to comply with legal obligations. Access to content is subject to technical access controls and limited only to authorized personnel on a need-to-know basis. Additionally, we monitor and log all access to user content and authorized personnel must undergo security and privacy training prior to accessing any user content.\n\n</Accordion>\n\n<Accordion title=\"Does Hume AI sell my data?\">\n\nNo. We do not sell your data or share your content with third parties for marketing purposes.\n\n</Accordion>\n\n<Accordion title=\"How do I submit a data privacy request?\">\n\nPlease message the moderators on our [Discord Server](https://discord.com/invite/WPRSugvAm6).\n\n</Accordion>\n\n</AccordionGroup>\n"
      }
    },
    "search": {
      "type": "singleAlgoliaIndex",
      "value": {
        "type": "unversioned",
        "indexSegment": {
          "id": "seg_hume.docs.buildwithfern.com_893c6ffe-3f20-4657-a9c7-70be47fd59b4",
          "searchApiKey": "Y2I4YjllODcwMDllYTk3MDQ4NWY1OTIwNzhhMGY5YzFjZmU5YzYwNjcwM2NkZTAzMjEzNzE3NjkzMmI4ZWNkOGZpbHRlcnM9aW5kZXhTZWdtZW50SWQlM0FzZWdfaHVtZS5kb2NzLmJ1aWxkd2l0aGZlcm4uY29tXzg5M2M2ZmZlLTNmMjAtNDY1Ny1hOWM3LTcwYmU0N2ZkNTliNCZ2YWxpZFVudGlsPTE3MTEyNTgxMTY="
        }
      }
    },
    "id": "docs_definition_403722ba-0d34-4451-9924-b3e0df37b95b"
  },
  "lightModeEnabled": true
}
