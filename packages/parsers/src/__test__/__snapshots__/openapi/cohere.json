{
  "id": "test-uuid-replacement",
  "endpoints": {
    "test-uuid-replacement": {
      "description": "Generates a text response to a user message.\nTo learn how to use the Chat API and RAG follow our [Text Generation guides](https://docs.cohere.com/docs/chat-api).\n",
      "id": "/v1/chat",
      "method": "POST",
      "path": [
        {
          "type": "literal",
          "value": "v1"
        },
        {
          "type": "literal",
          "value": "chat"
        }
      ],
      "defaultEnvironment": "x-fern-server-name",
      "environments": [
        {
          "id": "x-fern-server-name",
          "baseUrl": "https://api.cohere.com"
        }
      ],
      "requestHeaders": [
        {
          "key": "X-Client-Name",
          "valueShape": {
            "type": "alias",
            "value": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          "description": "The name of the project that is making the request.\n"
        },
        {
          "key": "Accepts",
          "valueShape": {
            "type": "enum",
            "values": [
              {
                "value": "text/event-stream"
              }
            ]
          },
          "description": "Pass text/event-stream to receive the streamed response as server-sent events. The default is `\\n` delimited events.\n"
        }
      ],
      "request": {
        "contentType": "application/json",
        "body": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "message",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "Text input for the model to respond to.\n\nCompatible Deployments: Cohere Platform, Azure, AWS Sagemaker/Bedrock, Private Deployments\n"
            },
            {
              "key": "model",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "Defaults to `command-r-plus-08-2024`.\n\nThe name of a compatible [Cohere model](https://docs.cohere.com/docs/models) or the ID of a [fine-tuned](https://docs.cohere.com/docs/chat-fine-tuning) model.\n\nCompatible Deployments: Cohere Platform, Private Deployments\n"
            },
            {
              "key": "stream",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "boolean"
                  }
                }
              },
              "description": "Defaults to `false`.\n\nWhen `true`, the response will be a JSON stream of events. The final event will contain the complete response, and will have an `event_type` of `\"stream-end\"`.\n\nStreaming is beneficial for user interfaces that render the contents of the response piece by piece, as it gets generated.\n\nCompatible Deployments: Cohere Platform, Azure, AWS Sagemaker/Bedrock, Private Deployments\n"
            },
            {
              "key": "preamble",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "When specified, the default Cohere preamble will be replaced with the provided one. Preambles are a part of the prompt used to adjust the model's overall behavior and conversation style, and use the `SYSTEM` role.\n\nThe `SYSTEM` role is also used for the contents of the optional `chat_history=` parameter. When used with the `chat_history=` parameter it adds content throughout a conversation. Conversely, when used with the `preamble=` parameter it adds content at the start of the conversation only.\n\nCompatible Deployments: Cohere Platform, Azure, AWS Sagemaker/Bedrock, Private Deployments\n"
            },
            {
              "key": "chat_history",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "list",
                  "itemShape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "Message"
                    }
                  }
                }
              },
              "description": "A list of previous messages between the user and the model, giving the model conversational context for responding to the user's `message`.\n\nEach item represents a single message in the chat history, excluding the current user turn. It has two properties: `role` and `message`. The `role` identifies the sender (`CHATBOT`, `SYSTEM`, or `USER`), while the `message` contains the text content.\n\nThe chat_history parameter should not be used for `SYSTEM` messages in most cases. Instead, to add a `SYSTEM` role message at the beginning of a conversation, the `preamble` parameter should be used.\n\nCompatible Deployments: Cohere Platform, Azure, AWS Sagemaker/Bedrock, Private Deployments\n"
            },
            {
              "key": "conversation_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "An alternative to `chat_history`.\n\nProviding a `conversation_id` creates or resumes a persisted conversation with the specified ID. The ID can be any non empty string.\n\nCompatible Deployments: Cohere Platform\n"
            },
            {
              "key": "prompt_truncation",
              "valueShape": {
                "type": "enum",
                "values": [
                  {
                    "value": "OFF"
                  },
                  {
                    "value": "AUTO"
                  },
                  {
                    "value": "AUTO_PRESERVE_ORDER"
                  }
                ]
              },
              "description": "Defaults to `AUTO` when `connectors` are specified and `OFF` in all other cases.\n\nDictates how the prompt will be constructed.\n\nWith `prompt_truncation` set to \"AUTO\", some elements from `chat_history` and `documents` will be dropped in an attempt to construct a prompt that fits within the model's context length limit. During this process the order of the documents and chat history will be changed and ranked by relevance.\n\nWith `prompt_truncation` set to \"AUTO_PRESERVE_ORDER\", some elements from `chat_history` and `documents` will be dropped in an attempt to construct a prompt that fits within the model's context length limit. During this process the order of the documents and chat history will be preserved as they are inputted into the API.\n\nWith `prompt_truncation` set to \"OFF\", no elements will be dropped. If the sum of the inputs exceeds the model's context length limit, a `TooManyTokens` error will be returned.\n\nCompatible Deployments: \n - AUTO: Cohere Platform Only\n - AUTO_PRESERVE_ORDER: Azure, AWS Sagemaker/Bedrock, Private Deployments\n"
            },
            {
              "key": "connectors",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "list",
                  "itemShape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "ChatConnector"
                    }
                  }
                }
              },
              "description": "Accepts `{\"id\": \"web-search\"}`, and/or the `\"id\"` for a custom [connector](https://docs.cohere.com/docs/connectors), if you've [created](https://docs.cohere.com/v1/docs/creating-and-deploying-a-connector) one.\n\nWhen specified, the model's reply will be enriched with information found by querying each of the connectors (RAG).\n\nCompatible Deployments: Cohere Platform\n"
            },
            {
              "key": "search_queries_only",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "boolean"
                  }
                }
              },
              "description": "Defaults to `false`.\n\nWhen `true`, the response will only contain a list of generated search queries, but no search will take place, and no reply from the model to the user's `message` will be generated.\n\nCompatible Deployments: Cohere Platform, Azure, AWS Sagemaker/Bedrock, Private Deployments\n"
            },
            {
              "key": "documents",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "list",
                  "itemShape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "ChatDocument"
                    }
                  }
                }
              },
              "description": "A list of relevant documents that the model can cite to generate a more accurate reply. Each document is a string-string dictionary.\n\nExample:\n```\n[\n  { \"title\": \"Tall penguins\", \"text\": \"Emperor penguins are the tallest.\" },\n  { \"title\": \"Penguin habitats\", \"text\": \"Emperor penguins only live in Antarctica.\" },\n]\n```\n\nKeys and values from each document will be serialized to a string and passed to the model. The resulting generation will include citations that reference some of these documents.\n\nSome suggested keys are \"text\", \"author\", and \"date\". For better generation quality, it is recommended to keep the total word count of the strings in the dictionary to under 300 words.\n\nAn `id` field (string) can be optionally supplied to identify the document in the citations. This field will not be passed to the model.\n\nAn `_excludes` field (array of strings) can be optionally supplied to omit some key-value pairs from being shown to the model. The omitted fields will still show up in the citation object. The \"_excludes\" field will not be passed to the model.\n\nSee ['Document Mode'](https://docs.cohere.com/docs/retrieval-augmented-generation-rag#document-mode) in the guide for more information.\n\nCompatible Deployments: Cohere Platform, Azure, AWS Sagemaker/Bedrock, Private Deployments\n"
            },
            {
              "key": "citation_quality",
              "valueShape": {
                "type": "enum",
                "values": [
                  {
                    "value": "fast"
                  },
                  {
                    "value": "accurate"
                  },
                  {
                    "value": "off"
                  }
                ]
              },
              "description": "Defaults to `\"accurate\"`.\n\nDictates the approach taken to generating citations as part of the RAG flow by allowing the user to specify whether they want `\"accurate\"` results, `\"fast\"` results or no results.\n\nCompatible Deployments: Cohere Platform, Azure, AWS Sagemaker/Bedrock, Private Deployments\n"
            },
            {
              "key": "temperature",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "double",
                    "minimum": 0,
                    "maximum": 1
                  }
                }
              },
              "description": "Defaults to `0.3`.\n\nA non-negative float that tunes the degree of randomness in generation. Lower temperatures mean less random generations, and higher temperatures mean more random generations.\n\nRandomness can be further maximized by increasing the  value of the `p` parameter.\n\nCompatible Deployments: Cohere Platform, Azure, AWS Sagemaker/Bedrock, Private Deployments\n"
            },
            {
              "key": "max_tokens",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              },
              "description": "The maximum number of tokens the model will generate as part of the response. Note: Setting a low value may result in incomplete generations.\n\nCompatible Deployments: Cohere Platform, Azure, AWS Sagemaker/Bedrock, Private Deployments\n"
            },
            {
              "key": "max_input_tokens",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              },
              "description": "The maximum number of input tokens to send to the model. If not specified, `max_input_tokens` is the model's context length limit minus a small buffer.\n\nInput will be truncated according to the `prompt_truncation` parameter.\n\nCompatible Deployments: Cohere Platform\n"
            },
            {
              "key": "k",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "integer",
                    "minimum": 0,
                    "maximum": 500,
                    "default": 0
                  }
                }
              },
              "description": "Ensures only the top `k` most likely tokens are considered for generation at each step.\nDefaults to `0`, min value of `0`, max value of `500`.\n\nCompatible Deployments: Cohere Platform, Azure, AWS Sagemaker/Bedrock, Private Deployments\n"
            },
            {
              "key": "p",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "double",
                    "minimum": 0.01,
                    "maximum": 0.99,
                    "default": 0.75
                  }
                }
              },
              "description": "Ensures that only the most likely tokens, with total probability mass of `p`, are considered for generation at each step. If both `k` and `p` are enabled, `p` acts after `k`.\nDefaults to `0.75`. min value of `0.01`, max value of `0.99`.\n\nCompatible Deployments: Cohere Platform, Azure, AWS Sagemaker/Bedrock, Private Deployments\n"
            },
            {
              "key": "seed",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "integer",
                    "minimum": 0,
                    "maximum": 18446744073709552000
                  }
                }
              },
              "description": "If specified, the backend will make a best effort to sample tokens\ndeterministically, such that repeated requests with the same\nseed and parameters should return the same result. However,\ndeterminism cannot be totally guaranteed.\n\nCompatible Deployments: Cohere Platform, Azure, AWS Sagemaker/Bedrock, Private Deployments\n"
            },
            {
              "key": "stop_sequences",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "list",
                  "itemShape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "A list of up to 5 strings that the model will use to stop generation. If the model generates a string that matches any of the strings in the list, it will stop generating tokens and return the generated text up to that point not including the stop sequence.\n\nCompatible Deployments: Cohere Platform, Azure, AWS Sagemaker/Bedrock, Private Deployments\n"
            },
            {
              "key": "frequency_penalty",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "double"
                  }
                }
              },
              "description": "Defaults to `0.0`, min value of `0.0`, max value of `1.0`.\n\nUsed to reduce repetitiveness of generated tokens. The higher the value, the stronger a penalty is applied to previously present tokens, proportional to how many times they have already appeared in the prompt or prior generation.\n\nCompatible Deployments: Cohere Platform, Azure, AWS Sagemaker/Bedrock, Private Deployments\n"
            },
            {
              "key": "presence_penalty",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "double"
                  }
                }
              },
              "description": "Defaults to `0.0`, min value of `0.0`, max value of `1.0`.\n\nUsed to reduce repetitiveness of generated tokens. Similar to `frequency_penalty`, except that this penalty is applied equally to all tokens that have already appeared, regardless of their exact frequencies.\n\nCompatible Deployments: Cohere Platform, Azure, AWS Sagemaker/Bedrock, Private Deployments\n"
            },
            {
              "key": "tools",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "list",
                  "itemShape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "Tool"
                    }
                  }
                }
              },
              "description": "A list of available tools (functions) that the model may suggest invoking before producing a text response.\n\nWhen `tools` is passed (without `tool_results`), the `text` field in the response will be `\"\"` and the `tool_calls` field in the response will be populated with a list of tool calls that need to be made. If no calls need to be made, the `tool_calls` array will be empty.\n\nCompatible Deployments: Cohere Platform, Azure, AWS Sagemaker/Bedrock, Private Deployments\n"
            },
            {
              "key": "tool_results",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "list",
                  "itemShape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "ToolResult"
                    }
                  }
                }
              },
              "description": "A list of results from invoking tools recommended by the model in the previous chat turn. Results are used to produce a text response and will be referenced in citations. When using `tool_results`, `tools` must be passed as well.\nEach tool_result contains information about how it was invoked, as well as a list of outputs in the form of dictionaries.\n\n**Note**: `outputs` must be a list of objects. If your tool returns a single object (eg `{\"status\": 200}`), make sure to wrap it in a list.\n```\ntool_results = [\n  {\n    \"call\": {\n      \"name\": <tool name>,\n      \"parameters\": {\n        <param name>: <param value>\n      }\n    },\n    \"outputs\": [{\n      <key>: <value>\n    }]\n  },\n  ...\n]\n```\n**Note**: Chat calls with `tool_results` should not be included in the Chat history to avoid duplication of the message text.\n\nCompatible Deployments: Cohere Platform, Azure, AWS Sagemaker/Bedrock, Private Deployments\n"
            },
            {
              "key": "force_single_step",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "boolean"
                  }
                }
              },
              "description": "Forces the chat to be single step. Defaults to `false`."
            },
            {
              "key": "response_format",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "ResponseFormat"
                }
              }
            },
            {
              "key": "safety_mode",
              "valueShape": {
                "type": "enum",
                "values": [
                  {
                    "value": "CONTEXTUAL"
                  },
                  {
                    "value": "STRICT"
                  },
                  {
                    "value": "NONE"
                  }
                ]
              },
              "description": "Used to select the [safety instruction](https://docs.cohere.com/docs/safety-modes) inserted into the prompt. Defaults to `CONTEXTUAL`.\nWhen `NONE` is specified, the safety instruction will be omitted.\n\nSafety modes are not yet configurable in combination with `tools`, `tool_results` and `documents` parameters.\n\n**Note**: This parameter is only compatible with models [Command R 08-2024](https://docs.cohere.com/docs/command-r#august-2024-release), [Command R+ 08-2024](https://docs.cohere.com/docs/command-r-plus#august-2024-release) and newer.\n\nCompatible Deployments: Cohere Platform, Azure, AWS Sagemaker/Bedrock, Private Deployments\n"
            }
          ]
        }
      },
      "errors": [
        {
          "statusCode": 400,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 401,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 403,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 404,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 422,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 429,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 498,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 499,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 500,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 501,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 503,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 504,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        }
      ],
      "examples": []
    },
    "test-uuid-replacement": {
      "description": "Generates a text response to a user message and streams it down, token by token. To learn how to use the Chat API with streaming follow our [Text Generation guides](https://docs.cohere.com/v2/docs/chat-api).\n\nFollow the [Migration Guide](https://docs.cohere.com/v2/docs/migrating-v1-to-v2) for instructions on moving from API v1 to API v2.\n",
      "id": "/v2/chat",
      "method": "POST",
      "path": [
        {
          "type": "literal",
          "value": "v2"
        },
        {
          "type": "literal",
          "value": "chat"
        }
      ],
      "defaultEnvironment": "x-fern-server-name",
      "environments": [
        {
          "id": "x-fern-server-name",
          "baseUrl": "https://api.cohere.com"
        }
      ],
      "requestHeaders": [
        {
          "key": "X-Client-Name",
          "valueShape": {
            "type": "alias",
            "value": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          "description": "The name of the project that is making the request.\n"
        }
      ],
      "request": {
        "contentType": "application/json",
        "body": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "model",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "The name of a compatible [Cohere model](https://docs.cohere.com/v2/docs/models) (such as command-r or command-r-plus) or the ID of a [fine-tuned](https://docs.cohere.com/v2/docs/chat-fine-tuning) model."
            },
            {
              "key": "messages",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "ChatMessages"
                }
              }
            },
            {
              "key": "tools",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "list",
                  "itemShape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "ToolV2"
                    }
                  }
                }
              },
              "description": "A list of available tools (functions) that the model may suggest invoking before producing a text response.\n\nWhen `tools` is passed (without `tool_results`), the `text` content in the response will be empty and the `tool_calls` field in the response will be populated with a list of tool calls that need to be made. If no calls need to be made, the `tool_calls` array will be empty.\n"
            },
            {
              "key": "strict_tools",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "boolean"
                  }
                }
              },
              "description": "When set to `true`, tool calls in the Assistant message will be forced to follow the tool definition strictly. Learn more in the [Strict Tools guide](https://docs.cohere.com/docs/structured-outputs-json#structured-outputs-tools).\n\n**Note**: The first few requests with a new set of tools will take longer to process.\n"
            },
            {
              "key": "documents",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "list",
                  "itemShape": {
                    "type": "undiscriminatedUnion",
                    "variants": []
                  }
                }
              },
              "description": "A list of relevant documents that the model can cite to generate a more accurate reply. Each document is either a string or document object with content and metadata.\n"
            },
            {
              "key": "citation_options",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "CitationOptions"
                }
              }
            },
            {
              "key": "response_format",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "ResponseFormatV2"
                }
              }
            },
            {
              "key": "safety_mode",
              "valueShape": {
                "type": "enum",
                "values": [
                  {
                    "value": "CONTEXTUAL"
                  },
                  {
                    "value": "STRICT"
                  },
                  {
                    "value": "OFF"
                  }
                ]
              },
              "description": "Used to select the [safety instruction](https://docs.cohere.com/v2/docs/safety-modes) inserted into the prompt. Defaults to `CONTEXTUAL`.\nWhen `OFF` is specified, the safety instruction will be omitted.\n\nSafety modes are not yet configurable in combination with `tools`, `tool_results` and `documents` parameters.\n\n**Note**: This parameter is only compatible with models [Command R 08-2024](https://docs.cohere.com/v2/docs/command-r#august-2024-release), [Command R+ 08-2024](https://docs.cohere.com/v2/docs/command-r-plus#august-2024-release) and newer.\n"
            },
            {
              "key": "max_tokens",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              },
              "description": "The maximum number of tokens the model will generate as part of the response.\n\n**Note**: Setting a low value may result in incomplete generations.\n"
            },
            {
              "key": "stop_sequences",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "list",
                  "itemShape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "A list of up to 5 strings that the model will use to stop generation. If the model generates a string that matches any of the strings in the list, it will stop generating tokens and return the generated text up to that point not including the stop sequence.\n"
            },
            {
              "key": "temperature",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "double",
                    "minimum": 0,
                    "maximum": 1
                  }
                }
              },
              "description": "Defaults to `0.3`.\n\nA non-negative float that tunes the degree of randomness in generation. Lower temperatures mean less random generations, and higher temperatures mean more random generations.\n\nRandomness can be further maximized by increasing the  value of the `p` parameter.\n"
            },
            {
              "key": "seed",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "integer",
                    "minimum": 0,
                    "maximum": 18446744073709552000
                  }
                }
              },
              "description": "If specified, the backend will make a best effort to sample tokens\ndeterministically, such that repeated requests with the same\nseed and parameters should return the same result. However,\ndeterminism cannot be totally guaranteed.\n"
            },
            {
              "key": "frequency_penalty",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "double"
                  }
                }
              },
              "description": "Defaults to `0.0`, min value of `0.0`, max value of `1.0`.\nUsed to reduce repetitiveness of generated tokens. The higher the value, the stronger a penalty is applied to previously present tokens, proportional to how many times they have already appeared in the prompt or prior generation.\n"
            },
            {
              "key": "presence_penalty",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "double"
                  }
                }
              },
              "description": "Defaults to `0.0`, min value of `0.0`, max value of `1.0`.\nUsed to reduce repetitiveness of generated tokens. Similar to `frequency_penalty`, except that this penalty is applied equally to all tokens that have already appeared, regardless of their exact frequencies.\n"
            },
            {
              "key": "k",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "double",
                    "minimum": 0,
                    "maximum": 500,
                    "default": 0
                  }
                }
              },
              "description": "Ensures that only the top `k` most likely tokens are considered for generation at each step. When `k` is set to `0`, k-sampling is disabled.\nDefaults to `0`, min value of `0`, max value of `500`.\n"
            },
            {
              "key": "p",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "double",
                    "minimum": 0.01,
                    "maximum": 0.99,
                    "default": 0.75
                  }
                }
              },
              "description": "Ensures that only the most likely tokens, with total probability mass of `p`, are considered for generation at each step. If both `k` and `p` are enabled, `p` acts after `k`.\nDefaults to `0.75`. min value of `0.01`, max value of `0.99`.\n"
            },
            {
              "key": "logprobs",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "boolean"
                  }
                }
              },
              "description": "Defaults to `false`. When set to `true`, the log probabilities of the generated tokens will be included in the response.\n"
            }
          ]
        }
      },
      "errors": [
        {
          "statusCode": 400,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 401,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 403,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 404,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 422,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 429,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 498,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 499,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 500,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 501,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 503,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 504,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        }
      ],
      "examples": []
    },
    "test-uuid-replacement": {
      "description": "<Warning>\nThis API is marked as \"Legacy\" and is no longer maintained. Follow the [migration guide](https://docs.cohere.com/docs/migrating-from-cogenerate-to-cochat) to start using the Chat API.\n</Warning>\nGenerates realistic text conditioned on a given input.\n",
      "id": "/v1/generate",
      "method": "POST",
      "path": [
        {
          "type": "literal",
          "value": "v1"
        },
        {
          "type": "literal",
          "value": "generate"
        }
      ],
      "defaultEnvironment": "x-fern-server-name",
      "environments": [
        {
          "id": "x-fern-server-name",
          "baseUrl": "https://api.cohere.com"
        }
      ],
      "requestHeaders": [
        {
          "key": "X-Client-Name",
          "valueShape": {
            "type": "alias",
            "value": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          "description": "The name of the project that is making the request.\n"
        }
      ],
      "responseHeaders": [
        {
          "key": "X-API-Warning",
          "valueShape": {
            "type": "alias",
            "value": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          "description": "Warning description for incorrect usage of the API"
        }
      ],
      "request": {
        "contentType": "application/json",
        "body": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "prompt",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "The input text that serves as the starting point for generating the response.\nNote: The prompt will be pre-processed and modified before reaching the model.\n"
            },
            {
              "key": "model",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "The identifier of the model to generate with. Currently available models are `command` (default), `command-nightly` (experimental), `command-light`, and `command-light-nightly` (experimental).\nSmaller, \"light\" models are faster, while larger models will perform better. [Custom models](https://docs.cohere.com/docs/training-custom-models) can also be supplied with their full ID."
            },
            {
              "key": "num_generations",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              },
              "description": "The maximum number of generations that will be returned. Defaults to `1`, min value of `1`, max value of `5`.\n"
            },
            {
              "key": "stream",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "boolean"
                  }
                }
              },
              "description": "When `true`, the response will be a JSON stream of events. Streaming is beneficial for user interfaces that render the contents of the response piece by piece, as it gets generated.\n\nThe final event will contain the complete response, and will contain an `is_finished` field set to `true`. The event will also contain a `finish_reason`, which can be one of the following:\n- `COMPLETE` - the model sent back a finished reply\n- `MAX_TOKENS` - the reply was cut off because the model reached the maximum number of tokens for its context length\n- `ERROR` - something went wrong when generating the reply\n- `ERROR_TOXIC` - the model generated a reply that was deemed toxic\n"
            },
            {
              "key": "max_tokens",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              },
              "description": "The maximum number of tokens the model will generate as part of the response. Note: Setting a low value may result in incomplete generations.\n\nThis parameter is off by default, and if it's not specified, the model will continue generating until it emits an EOS completion token. See [BPE Tokens](/bpe-tokens-wiki) for more details.\n\nCan only be set to `0` if `return_likelihoods` is set to `ALL` to get the likelihood of the prompt.\n"
            },
            {
              "key": "truncate",
              "valueShape": {
                "type": "enum",
                "values": [
                  {
                    "value": "NONE"
                  },
                  {
                    "value": "START"
                  },
                  {
                    "value": "END"
                  }
                ],
                "default": "END"
              },
              "description": "One of `NONE|START|END` to specify how the API will handle inputs longer than the maximum token length.\n\nPassing `START` will discard the start of the input. `END` will discard the end of the input. In both cases, input is discarded until the remaining input is exactly the maximum input token length for the model.\n\nIf `NONE` is selected, when the input exceeds the maximum input token length an error will be returned."
            },
            {
              "key": "temperature",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "double"
                  }
                }
              },
              "description": "A non-negative float that tunes the degree of randomness in generation. Lower temperatures mean less random generations. See [Temperature](/temperature-wiki) for more details.\nDefaults to `0.75`, min value of `0.0`, max value of `5.0`.\n"
            },
            {
              "key": "seed",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "integer",
                    "minimum": 0,
                    "maximum": 18446744073709552000
                  }
                }
              },
              "description": "If specified, the backend will make a best effort to sample tokens\ndeterministically, such that repeated requests with the same\nseed and parameters should return the same result. However,\ndeterminism cannot be totally guaranteed.\nCompatible Deployments: Cohere Platform, Azure, AWS Sagemaker/Bedrock, Private Deployments\n"
            },
            {
              "key": "preset",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "Identifier of a custom preset. A preset is a combination of parameters, such as prompt, temperature etc. You can create presets in the [playground](https://dashboard.cohere.com/playground/generate).\nWhen a preset is specified, the `prompt` parameter becomes optional, and any included parameters will override the preset's parameters.\n"
            },
            {
              "key": "end_sequences",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "list",
                  "itemShape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "The generated text will be cut at the beginning of the earliest occurrence of an end sequence. The sequence will be excluded from the text."
            },
            {
              "key": "stop_sequences",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "list",
                  "itemShape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "The generated text will be cut at the end of the earliest occurrence of a stop sequence. The sequence will be included the text."
            },
            {
              "key": "k",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              },
              "description": "Ensures only the top `k` most likely tokens are considered for generation at each step.\nDefaults to `0`, min value of `0`, max value of `500`.\n"
            },
            {
              "key": "p",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "double"
                  }
                }
              },
              "description": "Ensures that only the most likely tokens, with total probability mass of `p`, are considered for generation at each step. If both `k` and `p` are enabled, `p` acts after `k`.\nDefaults to `0.75`. min value of `0.01`, max value of `0.99`.\n"
            },
            {
              "key": "frequency_penalty",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "double"
                  }
                }
              },
              "description": "Used to reduce repetitiveness of generated tokens. The higher the value, the stronger a penalty is applied to previously present tokens, proportional to how many times they have already appeared in the prompt or prior generation.\n\nUsing `frequency_penalty` in combination with `presence_penalty` is not supported on newer models.\n"
            },
            {
              "key": "presence_penalty",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "double"
                  }
                }
              },
              "description": "Defaults to `0.0`, min value of `0.0`, max value of `1.0`.\n\nCan be used to reduce repetitiveness of generated tokens. Similar to `frequency_penalty`, except that this penalty is applied equally to all tokens that have already appeared, regardless of their exact frequencies.\n\nUsing `frequency_penalty` in combination with `presence_penalty` is not supported on newer models.\n"
            },
            {
              "key": "return_likelihoods",
              "valueShape": {
                "type": "enum",
                "values": [
                  {
                    "value": "GENERATION"
                  },
                  {
                    "value": "ALL"
                  },
                  {
                    "value": "NONE"
                  }
                ],
                "default": "NONE"
              },
              "description": "One of `GENERATION|ALL|NONE` to specify how and if the token likelihoods are returned with the response. Defaults to `NONE`.\n\nIf `GENERATION` is selected, the token likelihoods will only be provided for generated text.\n\nIf `ALL` is selected, the token likelihoods will be provided both for the prompt and the generated text."
            },
            {
              "key": "raw_prompting",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "boolean"
                  }
                }
              },
              "description": "When enabled, the user's prompt will be sent to the model without any pre-processing."
            }
          ]
        }
      },
      "response": {
        "statusCode": 200,
        "body": {
          "type": "alias",
          "value": {
            "type": "id",
            "id": "Generation"
          }
        },
        "description": "OK"
      },
      "errors": [
        {
          "statusCode": 400,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 401,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 403,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 404,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 422,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 429,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 498,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 499,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 500,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 501,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 503,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 504,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        }
      ],
      "examples": []
    },
    "test-uuid-replacement": {
      "description": "This endpoint returns text and image embeddings. An embedding is a list of floating point numbers that captures semantic information about the content that it represents.\n\nEmbeddings can be used to create classifiers as well as empower semantic search. To learn more about embeddings, see the embedding page.\n\nIf you want to learn more how to use the embedding model, have a look at the [Semantic Search Guide](https://docs.cohere.com/docs/semantic-search).",
      "id": "/v1/embed",
      "method": "POST",
      "path": [
        {
          "type": "literal",
          "value": "v1"
        },
        {
          "type": "literal",
          "value": "embed"
        }
      ],
      "defaultEnvironment": "x-fern-server-name",
      "environments": [
        {
          "id": "x-fern-server-name",
          "baseUrl": "https://api.cohere.com"
        }
      ],
      "requestHeaders": [
        {
          "key": "X-Client-Name",
          "valueShape": {
            "type": "alias",
            "value": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          "description": "The name of the project that is making the request.\n"
        }
      ],
      "request": {
        "contentType": "application/json",
        "body": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "texts",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "list",
                  "itemShape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "An array of strings for the model to embed. Maximum number of texts per call is `96`. We recommend reducing the length of each text to be under `512` tokens for optimal quality."
            },
            {
              "key": "images",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "list",
                  "itemShape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "An array of image data URIs for the model to embed. Maximum number of images per call is `1`.\n\nThe image must be a valid [data URI](https://developer.mozilla.org/en-US/docs/Web/URI/Schemes/data). The image must be in either `image/jpeg` or `image/png` format and has a maximum size of 5MB."
            },
            {
              "key": "model",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "Defaults to embed-english-v2.0\n\nThe identifier of the model. Smaller \"light\" models are faster, while larger models will perform better. [Custom models](https://docs.cohere.com/docs/training-custom-models) can also be supplied with their full ID.\n\nAvailable models and corresponding embedding dimensions:\n\n* `embed-english-v3.0`  1024\n* `embed-multilingual-v3.0`  1024\n* `embed-english-light-v3.0`  384\n* `embed-multilingual-light-v3.0`  384\n\n* `embed-english-v2.0`  4096\n* `embed-english-light-v2.0`  1024\n* `embed-multilingual-v2.0`  768"
            },
            {
              "key": "input_type",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "EmbedInputType"
                }
              }
            },
            {
              "key": "embedding_types",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "list",
                  "itemShape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "EmbeddingType"
                    }
                  }
                }
              },
              "description": "Specifies the types of embeddings you want to get back. Not required and default is None, which returns the Embed Floats response type. Can be one or more of the following types.\n\n* `\"float\"`: Use this when you want to get back the default float embeddings. Valid for all models.\n* `\"int8\"`: Use this when you want to get back signed int8 embeddings. Valid for only v3 models.\n* `\"uint8\"`: Use this when you want to get back unsigned int8 embeddings. Valid for only v3 models.\n* `\"binary\"`: Use this when you want to get back signed binary embeddings. Valid for only v3 models.\n* `\"ubinary\"`: Use this when you want to get back unsigned binary embeddings. Valid for only v3 models."
            },
            {
              "key": "truncate",
              "valueShape": {
                "type": "enum",
                "values": [
                  {
                    "value": "NONE"
                  },
                  {
                    "value": "START"
                  },
                  {
                    "value": "END"
                  }
                ],
                "default": "END"
              },
              "description": "One of `NONE|START|END` to specify how the API will handle inputs longer than the maximum token length.\n\nPassing `START` will discard the start of the input. `END` will discard the end of the input. In both cases, input is discarded until the remaining input is exactly the maximum input token length for the model.\n\nIf `NONE` is selected, when the input exceeds the maximum input token length an error will be returned."
            }
          ]
        }
      },
      "errors": [
        {
          "statusCode": 400,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 401,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 403,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 404,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 422,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 429,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 498,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 499,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 500,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 501,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 503,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 504,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        }
      ],
      "examples": []
    },
    "test-uuid-replacement": {
      "description": "This endpoint returns text embeddings. An embedding is a list of floating point numbers that captures semantic information about the text that it represents.\n\nEmbeddings can be used to create text classifiers as well as empower semantic search. To learn more about embeddings, see the embedding page.\n\nIf you want to learn more how to use the embedding model, have a look at the [Semantic Search Guide](https://docs.cohere.com/docs/semantic-search).",
      "id": "/v2/embed",
      "method": "POST",
      "path": [
        {
          "type": "literal",
          "value": "v2"
        },
        {
          "type": "literal",
          "value": "embed"
        }
      ],
      "defaultEnvironment": "x-fern-server-name",
      "environments": [
        {
          "id": "x-fern-server-name",
          "baseUrl": "https://api.cohere.com"
        }
      ],
      "requestHeaders": [
        {
          "key": "X-Client-Name",
          "valueShape": {
            "type": "alias",
            "value": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          "description": "The name of the project that is making the request.\n"
        }
      ],
      "responseHeaders": [
        {
          "key": "X-API-Warning",
          "valueShape": {
            "type": "alias",
            "value": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          "description": "Warning description for incorrect usage of the API"
        }
      ],
      "request": {
        "contentType": "application/json",
        "body": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "texts",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "list",
                  "itemShape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "An array of strings for the model to embed. Maximum number of texts per call is `96`. We recommend reducing the length of each text to be under `512` tokens for optimal quality."
            },
            {
              "key": "images",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "list",
                  "itemShape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "An array of image data URIs for the model to embed. Maximum number of images per call is `1`.\n\nThe image must be a valid [data URI](https://developer.mozilla.org/en-US/docs/Web/URI/Schemes/data). The image must be in either `image/jpeg` or `image/png` format and has a maximum size of 5MB."
            },
            {
              "key": "model",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "Defaults to embed-english-v2.0\n\nThe identifier of the model. Smaller \"light\" models are faster, while larger models will perform better. [Custom models](https://docs.cohere.com/docs/training-custom-models) can also be supplied with their full ID.\n\nAvailable models and corresponding embedding dimensions:\n\n* `embed-english-v3.0`  1024\n* `embed-multilingual-v3.0`  1024\n* `embed-english-light-v3.0`  384\n* `embed-multilingual-light-v3.0`  384\n\n* `embed-english-v2.0`  4096\n* `embed-english-light-v2.0`  1024\n* `embed-multilingual-v2.0`  768"
            },
            {
              "key": "input_type",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "EmbedInputType"
                }
              }
            },
            {
              "key": "embedding_types",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "list",
                  "itemShape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "EmbeddingType"
                    }
                  }
                }
              },
              "description": "Specifies the types of embeddings you want to get back. Not required and default is None, which returns the Embed Floats response type. Can be one or more of the following types.\n\n* `\"float\"`: Use this when you want to get back the default float embeddings. Valid for all models.\n* `\"int8\"`: Use this when you want to get back signed int8 embeddings. Valid for only v3 models.\n* `\"uint8\"`: Use this when you want to get back unsigned int8 embeddings. Valid for only v3 models.\n* `\"binary\"`: Use this when you want to get back signed binary embeddings. Valid for only v3 models.\n* `\"ubinary\"`: Use this when you want to get back unsigned binary embeddings. Valid for only v3 models."
            },
            {
              "key": "truncate",
              "valueShape": {
                "type": "enum",
                "values": [
                  {
                    "value": "NONE"
                  },
                  {
                    "value": "START"
                  },
                  {
                    "value": "END"
                  }
                ],
                "default": "END"
              },
              "description": "One of `NONE|START|END` to specify how the API will handle inputs longer than the maximum token length.\n\nPassing `START` will discard the start of the input. `END` will discard the end of the input. In both cases, input is discarded until the remaining input is exactly the maximum input token length for the model.\n\nIf `NONE` is selected, when the input exceeds the maximum input token length an error will be returned."
            }
          ]
        }
      },
      "response": {
        "statusCode": 200,
        "body": {
          "type": "alias",
          "value": {
            "type": "id",
            "id": "EmbedByTypeResponse"
          }
        },
        "description": "OK"
      },
      "errors": [
        {
          "statusCode": 400,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 401,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 403,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 404,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 422,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 429,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 498,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 499,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 500,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 501,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 503,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 504,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        }
      ],
      "examples": []
    },
    "test-uuid-replacement": {
      "description": "The list embed job endpoint allows users to view all embed jobs history for that specific user.",
      "id": "/v1/embed-jobs",
      "method": "GET",
      "path": [
        {
          "type": "literal",
          "value": "v1"
        },
        {
          "type": "literal",
          "value": "embed-jobs"
        }
      ],
      "defaultEnvironment": "x-fern-server-name",
      "environments": [
        {
          "id": "x-fern-server-name",
          "baseUrl": "https://api.cohere.com"
        }
      ],
      "requestHeaders": [
        {
          "key": "X-Client-Name",
          "valueShape": {
            "type": "alias",
            "value": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          "description": "The name of the project that is making the request.\n"
        }
      ],
      "responseHeaders": [
        {
          "key": "X-API-Warning",
          "valueShape": {
            "type": "alias",
            "value": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          "description": "Warning description for incorrect usage of the API"
        }
      ],
      "response": {
        "statusCode": 200,
        "body": {
          "type": "alias",
          "value": {
            "type": "id",
            "id": "ListEmbedJobResponse"
          }
        },
        "description": "OK"
      },
      "errors": [
        {
          "statusCode": 400,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 401,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 403,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 404,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 422,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 429,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 498,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 499,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 500,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 501,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 503,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 504,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        }
      ],
      "examples": []
    },
    "test-uuid-replacement": {
      "description": "This API launches an async Embed job for a [Dataset](https://docs.cohere.com/docs/datasets) of type `embed-input`. The result of a completed embed job is new Dataset of type `embed-output`, which contains the original text entries and the corresponding embeddings.",
      "id": "/v1/embed-jobs",
      "method": "POST",
      "path": [
        {
          "type": "literal",
          "value": "v1"
        },
        {
          "type": "literal",
          "value": "embed-jobs"
        }
      ],
      "defaultEnvironment": "x-fern-server-name",
      "environments": [
        {
          "id": "x-fern-server-name",
          "baseUrl": "https://api.cohere.com"
        }
      ],
      "requestHeaders": [
        {
          "key": "X-Client-Name",
          "valueShape": {
            "type": "alias",
            "value": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          "description": "The name of the project that is making the request.\n"
        }
      ],
      "responseHeaders": [
        {
          "key": "X-API-Warning",
          "valueShape": {
            "type": "alias",
            "value": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          "description": "Warning description for incorrect usage of the API"
        }
      ],
      "request": {
        "contentType": "application/json",
        "body": {
          "type": "alias",
          "value": {
            "type": "id",
            "id": "CreateEmbedJobRequest"
          }
        }
      },
      "response": {
        "statusCode": 200,
        "body": {
          "type": "alias",
          "value": {
            "type": "id",
            "id": "CreateEmbedJobResponse"
          }
        },
        "description": "OK"
      },
      "errors": [
        {
          "statusCode": 400,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 401,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 403,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 404,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 422,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 429,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 498,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 499,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 500,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 501,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 503,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 504,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        }
      ],
      "examples": []
    },
    "test-uuid-replacement": {
      "description": "This API retrieves the details about an embed job started by the same user.",
      "id": "/v1/embed-jobs/{id}",
      "method": "GET",
      "path": [
        {
          "type": "literal",
          "value": "v1"
        },
        {
          "type": "literal",
          "value": "embed-jobs"
        },
        {
          "type": "pathParameter",
          "value": "id"
        }
      ],
      "defaultEnvironment": "x-fern-server-name",
      "environments": [
        {
          "id": "x-fern-server-name",
          "baseUrl": "https://api.cohere.com"
        }
      ],
      "pathParameters": [
        {
          "key": "id",
          "valueShape": {
            "type": "alias",
            "value": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          "description": "The ID of the embed job to retrieve."
        }
      ],
      "requestHeaders": [
        {
          "key": "X-Client-Name",
          "valueShape": {
            "type": "alias",
            "value": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          "description": "The name of the project that is making the request.\n"
        }
      ],
      "responseHeaders": [
        {
          "key": "X-API-Warning",
          "valueShape": {
            "type": "alias",
            "value": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          "description": "Warning message for potentially incorrect usage of the API"
        }
      ],
      "response": {
        "statusCode": 200,
        "body": {
          "type": "alias",
          "value": {
            "type": "id",
            "id": "EmbedJob"
          }
        },
        "description": "OK"
      },
      "errors": [
        {
          "statusCode": 400,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 401,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 403,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 404,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 422,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 429,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 498,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 499,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 500,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 501,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 503,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 504,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        }
      ],
      "examples": []
    },
    "test-uuid-replacement": {
      "description": "This API allows users to cancel an active embed job. Once invoked, the embedding process will be terminated, and users will be charged for the embeddings processed up to the cancellation point. It's important to note that partial results will not be available to users after cancellation.",
      "id": "/v1/embed-jobs/{id}/cancel",
      "method": "POST",
      "path": [
        {
          "type": "literal",
          "value": "v1"
        },
        {
          "type": "literal",
          "value": "embed-jobs"
        },
        {
          "type": "pathParameter",
          "value": "id"
        },
        {
          "type": "literal",
          "value": "cancel"
        }
      ],
      "defaultEnvironment": "x-fern-server-name",
      "environments": [
        {
          "id": "x-fern-server-name",
          "baseUrl": "https://api.cohere.com"
        }
      ],
      "pathParameters": [
        {
          "key": "id",
          "valueShape": {
            "type": "alias",
            "value": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          "description": "The ID of the embed job to cancel."
        }
      ],
      "requestHeaders": [
        {
          "key": "X-Client-Name",
          "valueShape": {
            "type": "alias",
            "value": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          "description": "The name of the project that is making the request.\n"
        }
      ],
      "errors": [
        {
          "statusCode": 400,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 401,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 403,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 404,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 422,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 429,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 498,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 499,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 500,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 501,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 503,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 504,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        }
      ],
      "examples": []
    },
    "test-uuid-replacement": {
      "description": "This endpoint takes in a query and a list of texts and produces an ordered array with each text assigned a relevance score.",
      "id": "/v1/rerank",
      "method": "POST",
      "path": [
        {
          "type": "literal",
          "value": "v1"
        },
        {
          "type": "literal",
          "value": "rerank"
        }
      ],
      "defaultEnvironment": "x-fern-server-name",
      "environments": [
        {
          "id": "x-fern-server-name",
          "baseUrl": "https://api.cohere.com"
        }
      ],
      "requestHeaders": [
        {
          "key": "X-Client-Name",
          "valueShape": {
            "type": "alias",
            "value": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          "description": "The name of the project that is making the request.\n"
        }
      ],
      "request": {
        "contentType": "application/json",
        "body": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "model",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "The identifier of the model to use, one of : `rerank-english-v3.0`, `rerank-multilingual-v3.0`, `rerank-english-v2.0`, `rerank-multilingual-v2.0`"
            },
            {
              "key": "query",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "The search query"
            },
            {
              "key": "documents",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "list",
                  "itemShape": {
                    "type": "undiscriminatedUnion",
                    "variants": []
                  }
                }
              },
              "description": "A list of document objects or strings to rerank.\nIf a document is provided the text fields is required and all other fields will be preserved in the response.\n\nThe total max chunks (length of documents * max_chunks_per_doc) must be less than 10000.\n\nWe recommend a maximum of 1,000 documents for optimal endpoint performance."
            },
            {
              "key": "top_n",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "integer",
                    "minimum": 1
                  }
                }
              },
              "description": "The number of most relevant documents or indices to return, defaults to the length of the documents"
            },
            {
              "key": "rank_fields",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "list",
                  "itemShape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "If a JSON object is provided, you can specify which keys you would like to have considered for reranking. The model will rerank based on order of the fields passed in (i.e. rank_fields=['title','author','text'] will rerank using the values in title, author, text  sequentially. If the length of title, author, and text exceeds the context length of the model, the chunking will not re-consider earlier fields). If not provided, the model will use the default text field for ranking."
            },
            {
              "key": "return_documents",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "boolean",
                    "default": false
                  }
                }
              },
              "description": "- If false, returns results without the doc text - the api will return a list of {index, relevance score} where index is inferred from the list passed into the request.\n- If true, returns results with the doc text passed in - the api will return an ordered list of {index, text, relevance score} where index + text refers to the list passed into the request."
            },
            {
              "key": "max_chunks_per_doc",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "integer",
                    "default": 10
                  }
                }
              },
              "description": "The maximum number of chunks to produce internally from a document"
            }
          ]
        }
      },
      "response": {
        "statusCode": 200,
        "body": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "key": "results",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "list",
                  "itemShape": {
                    "type": "object",
                    "extends": [],
                    "properties": [
                      {
                        "key": "document",
                        "valueShape": {
                          "type": "object",
                          "extends": [],
                          "properties": [
                            {
                              "key": "text",
                              "valueShape": {
                                "type": "alias",
                                "value": {
                                  "type": "primitive",
                                  "value": {
                                    "type": "string"
                                  }
                                }
                              },
                              "description": "The text of the document to rerank"
                            }
                          ]
                        },
                        "description": "If `return_documents` is set as `false` this will return none, if `true` it will return the documents passed in"
                      },
                      {
                        "key": "index",
                        "valueShape": {
                          "type": "alias",
                          "value": {
                            "type": "primitive",
                            "value": {
                              "type": "integer"
                            }
                          }
                        },
                        "description": "Corresponds to the index in the original list of documents to which the ranked document belongs. (i.e. if the first value in the `results` object has an `index` value of 3, it means in the list of documents passed in, the document at `index=3` had the highest relevance)"
                      },
                      {
                        "key": "relevance_score",
                        "valueShape": {
                          "type": "alias",
                          "value": {
                            "type": "primitive",
                            "value": {
                              "type": "double"
                            }
                          }
                        },
                        "description": "Relevance scores are normalized to be in the range `[0, 1]`. Scores close to `1` indicate a high relevance to the query, and scores closer to `0` indicate low relevance. It is not accurate to assume a score of 0.9 means the document is 2x more relevant than a document with a score of 0.45"
                      }
                    ]
                  }
                }
              },
              "description": "An ordered list of ranked documents"
            },
            {
              "key": "meta",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "ApiMeta"
                }
              }
            }
          ]
        },
        "description": "OK"
      },
      "errors": [
        {
          "statusCode": 400,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 401,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 403,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 404,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 422,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 429,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 498,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 499,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 500,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 501,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 503,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 504,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        }
      ],
      "examples": []
    },
    "test-uuid-replacement": {
      "description": "This endpoint takes in a query and a list of texts and produces an ordered array with each text assigned a relevance score.",
      "id": "/v2/rerank",
      "method": "POST",
      "path": [
        {
          "type": "literal",
          "value": "v2"
        },
        {
          "type": "literal",
          "value": "rerank"
        }
      ],
      "defaultEnvironment": "x-fern-server-name",
      "environments": [
        {
          "id": "x-fern-server-name",
          "baseUrl": "https://api.cohere.com"
        }
      ],
      "requestHeaders": [
        {
          "key": "X-Client-Name",
          "valueShape": {
            "type": "alias",
            "value": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          "description": "The name of the project that is making the request.\n"
        }
      ],
      "request": {
        "contentType": "application/json",
        "body": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "model",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "The identifier of the model to use.\n\nSupported models:\n  - `rerank-english-v3.0`\n  - `rerank-multilingual-v3.0`\n  - `rerank-english-v2.0`\n  - `rerank-multilingual-v2.0`"
            },
            {
              "key": "query",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "The search query"
            },
            {
              "key": "documents",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "list",
                  "itemShape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "A list of texts that will be compared to the `query`.\nFor optimal performance we recommend against sending more than 1,000 documents in a single request.\n\n**Note**: long documents will automatically be truncated to the value of `max_tokens_per_doc`.\n\n**Note**: structured data should be formatted as YAML strings for best performance."
            },
            {
              "key": "top_n",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "integer",
                    "minimum": 1
                  }
                }
              },
              "description": "Limits the number of returned rerank results to the specified value. If not passed, all the rerank results will be returned."
            },
            {
              "key": "max_tokens_per_doc",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              },
              "description": "Defaults to `4096`. Long documents will be automatically truncated to the specified number of tokens."
            }
          ]
        }
      },
      "response": {
        "statusCode": 200,
        "body": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "key": "results",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "list",
                  "itemShape": {
                    "type": "object",
                    "extends": [],
                    "properties": [
                      {
                        "key": "index",
                        "valueShape": {
                          "type": "alias",
                          "value": {
                            "type": "primitive",
                            "value": {
                              "type": "integer"
                            }
                          }
                        },
                        "description": "Corresponds to the index in the original list of documents to which the ranked document belongs. (i.e. if the first value in the `results` object has an `index` value of 3, it means in the list of documents passed in, the document at `index=3` had the highest relevance)"
                      },
                      {
                        "key": "relevance_score",
                        "valueShape": {
                          "type": "alias",
                          "value": {
                            "type": "primitive",
                            "value": {
                              "type": "double"
                            }
                          }
                        },
                        "description": "Relevance scores are normalized to be in the range `[0, 1]`. Scores close to `1` indicate a high relevance to the query, and scores closer to `0` indicate low relevance. It is not accurate to assume a score of 0.9 means the document is 2x more relevant than a document with a score of 0.45"
                      }
                    ]
                  }
                }
              },
              "description": "An ordered list of ranked documents"
            },
            {
              "key": "meta",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "ApiMeta"
                }
              }
            }
          ]
        },
        "description": "OK"
      },
      "errors": [
        {
          "statusCode": 400,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 401,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 403,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 404,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 422,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 429,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 498,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 499,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 500,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 501,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 503,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 504,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        }
      ],
      "examples": []
    },
    "test-uuid-replacement": {
      "description": "This endpoint makes a prediction about which label fits the specified text inputs best. To make a prediction, Classify uses the provided `examples` of text + label pairs as a reference.\nNote: [Fine-tuned models](https://docs.cohere.com/docs/classify-fine-tuning) trained on classification examples don't require the `examples` parameter to be passed in explicitly.",
      "id": "/v1/classify",
      "method": "POST",
      "path": [
        {
          "type": "literal",
          "value": "v1"
        },
        {
          "type": "literal",
          "value": "classify"
        }
      ],
      "defaultEnvironment": "x-fern-server-name",
      "environments": [
        {
          "id": "x-fern-server-name",
          "baseUrl": "https://api.cohere.com"
        }
      ],
      "requestHeaders": [
        {
          "key": "X-Client-Name",
          "valueShape": {
            "type": "alias",
            "value": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          "description": "The name of the project that is making the request.\n"
        }
      ],
      "responseHeaders": [
        {
          "key": "X-API-Warning",
          "valueShape": {
            "type": "alias",
            "value": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          "description": "Warning description for incorrect usage of the API"
        }
      ],
      "request": {
        "contentType": "application/json",
        "body": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "inputs",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "list",
                  "itemShape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "A list of up to 96 texts to be classified. Each one must be a non-empty string.\nThere is, however, no consistent, universal limit to the length a particular input can be. We perform classification on the first `x` tokens of each input, and `x` varies depending on which underlying model is powering classification. The maximum token length for each model is listed in the \"max tokens\" column [here](https://docs.cohere.com/docs/models).\nNote: by default the `truncate` parameter is set to `END`, so tokens exceeding the limit will be automatically dropped. This behavior can be disabled by setting `truncate` to `NONE`, which will result in validation errors for longer texts."
            },
            {
              "key": "examples",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "list",
                  "itemShape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "ClassifyExample"
                    }
                  }
                }
              },
              "description": "An array of examples to provide context to the model. Each example is a text string and its associated label/class. Each unique label requires at least 2 examples associated with it; the maximum number of examples is 2500, and each example has a maximum length of 512 tokens. The values should be structured as `{text: \"...\",label: \"...\"}`.\nNote: [Fine-tuned Models](https://docs.cohere.com/docs/classify-fine-tuning) trained on classification examples don't require the `examples` parameter to be passed in explicitly."
            },
            {
              "key": "model",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "The identifier of the model. Currently available models are `embed-multilingual-v2.0`, `embed-english-light-v2.0`, and `embed-english-v2.0` (default). Smaller \"light\" models are faster, while larger models will perform better. [Fine-tuned models](https://docs.cohere.com/docs/fine-tuning) can also be supplied with their full ID."
            },
            {
              "key": "preset",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "The ID of a custom playground preset. You can create presets in the [playground](https://dashboard.cohere.com/playground/classify?model=large). If you use a preset, all other parameters become optional, and any included parameters will override the preset's parameters."
            },
            {
              "key": "truncate",
              "valueShape": {
                "type": "enum",
                "values": [
                  {
                    "value": "NONE"
                  },
                  {
                    "value": "START"
                  },
                  {
                    "value": "END"
                  }
                ],
                "default": "END"
              },
              "description": "One of `NONE|START|END` to specify how the API will handle inputs longer than the maximum token length.\nPassing `START` will discard the start of the input. `END` will discard the end of the input. In both cases, input is discarded until the remaining input is exactly the maximum input token length for the model.\nIf `NONE` is selected, when the input exceeds the maximum input token length an error will be returned."
            }
          ]
        }
      },
      "response": {
        "statusCode": 200,
        "body": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "key": "classifications",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "list",
                  "itemShape": {
                    "type": "object",
                    "extends": [],
                    "properties": [
                      {
                        "key": "id",
                        "valueShape": {
                          "type": "alias",
                          "value": {
                            "type": "primitive",
                            "value": {
                              "type": "string"
                            }
                          }
                        }
                      },
                      {
                        "key": "input",
                        "valueShape": {
                          "type": "alias",
                          "value": {
                            "type": "primitive",
                            "value": {
                              "type": "string"
                            }
                          }
                        },
                        "description": "The input text that was classified"
                      },
                      {
                        "key": "prediction",
                        "valueShape": {
                          "type": "alias",
                          "value": {
                            "type": "primitive",
                            "value": {
                              "type": "string"
                            }
                          }
                        },
                        "description": "The predicted label for the associated query (only filled for single-label models)",
                        "availability": "Deprecated"
                      },
                      {
                        "key": "predictions",
                        "valueShape": {
                          "type": "alias",
                          "value": {
                            "type": "list",
                            "itemShape": {
                              "type": "alias",
                              "value": {
                                "type": "primitive",
                                "value": {
                                  "type": "string"
                                }
                              }
                            }
                          }
                        },
                        "description": "An array containing the predicted labels for the associated query (only filled for single-label classification)"
                      },
                      {
                        "key": "confidence",
                        "valueShape": {
                          "type": "alias",
                          "value": {
                            "type": "primitive",
                            "value": {
                              "type": "double"
                            }
                          }
                        },
                        "description": "The confidence score for the top predicted class (only filled for single-label classification)",
                        "availability": "Deprecated"
                      },
                      {
                        "key": "confidences",
                        "valueShape": {
                          "type": "alias",
                          "value": {
                            "type": "list",
                            "itemShape": {
                              "type": "alias",
                              "value": {
                                "type": "primitive",
                                "value": {
                                  "type": "double"
                                }
                              }
                            }
                          }
                        },
                        "description": "An array containing the confidence scores of all the predictions in the same order"
                      },
                      {
                        "key": "labels",
                        "valueShape": {
                          "type": "object",
                          "extends": [],
                          "properties": []
                        },
                        "description": "A map containing each label and its confidence score according to the classifier. All the confidence scores add up to 1 for single-label classification. For multi-label classification the label confidences are independent of each other, so they don't have to sum up to 1."
                      },
                      {
                        "key": "classification_type",
                        "valueShape": {
                          "type": "enum",
                          "values": [
                            {
                              "value": "single-label"
                            },
                            {
                              "value": "multi-label"
                            }
                          ]
                        },
                        "description": "The type of classification performed"
                      }
                    ]
                  }
                }
              }
            },
            {
              "key": "meta",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "ApiMeta"
                }
              }
            }
          ]
        },
        "description": "OK"
      },
      "errors": [
        {
          "statusCode": 400,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 401,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 403,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 404,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 422,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 429,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 498,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 499,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 500,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 501,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 503,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 504,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        }
      ],
      "examples": []
    },
    "test-uuid-replacement": {
      "description": "List datasets that have been created.",
      "id": "/v1/datasets",
      "method": "GET",
      "path": [
        {
          "type": "literal",
          "value": "v1"
        },
        {
          "type": "literal",
          "value": "datasets"
        }
      ],
      "defaultEnvironment": "x-fern-server-name",
      "environments": [
        {
          "id": "x-fern-server-name",
          "baseUrl": "https://api.cohere.com"
        }
      ],
      "queryParameters": [
        {
          "key": "datasetType",
          "valueShape": {
            "type": "alias",
            "value": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          "description": "optional filter by dataset type"
        },
        {
          "key": "before",
          "valueShape": {
            "type": "alias",
            "value": {
              "type": "primitive",
              "value": {
                "type": "datetime"
              }
            }
          },
          "description": "optional filter before a date"
        },
        {
          "key": "after",
          "valueShape": {
            "type": "alias",
            "value": {
              "type": "primitive",
              "value": {
                "type": "datetime"
              }
            }
          },
          "description": "optional filter after a date"
        },
        {
          "key": "limit",
          "valueShape": {
            "type": "alias",
            "value": {
              "type": "primitive",
              "value": {
                "type": "double"
              }
            }
          },
          "description": "optional limit to number of results"
        },
        {
          "key": "offset",
          "valueShape": {
            "type": "alias",
            "value": {
              "type": "primitive",
              "value": {
                "type": "double"
              }
            }
          },
          "description": "optional offset to start of results"
        },
        {
          "key": "validationStatus",
          "valueShape": {
            "type": "alias",
            "value": {
              "type": "id",
              "id": "DatasetValidationStatus"
            }
          },
          "description": "optional filter by validation status"
        }
      ],
      "requestHeaders": [
        {
          "key": "X-Client-Name",
          "valueShape": {
            "type": "alias",
            "value": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          "description": "The name of the project that is making the request.\n"
        }
      ],
      "response": {
        "statusCode": 200,
        "body": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "datasets",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "list",
                  "itemShape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "Dataset"
                    }
                  }
                }
              }
            }
          ]
        },
        "description": "A successful response."
      },
      "errors": [
        {
          "statusCode": 400,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 401,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 403,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 404,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 422,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 429,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 498,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 499,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 500,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 501,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 503,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 504,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        }
      ],
      "examples": []
    },
    "test-uuid-replacement": {
      "description": "Create a dataset by uploading a file. See ['Dataset Creation'](https://docs.cohere.com/docs/datasets#dataset-creation) for more information.",
      "id": "/v1/datasets",
      "method": "POST",
      "path": [
        {
          "type": "literal",
          "value": "v1"
        },
        {
          "type": "literal",
          "value": "datasets"
        }
      ],
      "defaultEnvironment": "x-fern-server-name",
      "environments": [
        {
          "id": "x-fern-server-name",
          "baseUrl": "https://api.cohere.com"
        }
      ],
      "queryParameters": [
        {
          "key": "name",
          "valueShape": {
            "type": "alias",
            "value": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          "description": "The name of the uploaded dataset."
        },
        {
          "key": "type",
          "valueShape": {
            "type": "alias",
            "value": {
              "type": "id",
              "id": "DatasetType"
            }
          },
          "description": "The dataset type, which is used to validate the data. Valid types are `embed-input`, `reranker-finetune-input`, `single-label-classification-finetune-input`, `chat-finetune-input`, and `multi-label-classification-finetune-input`."
        },
        {
          "key": "keep_original_file",
          "valueShape": {
            "type": "alias",
            "value": {
              "type": "primitive",
              "value": {
                "type": "boolean"
              }
            }
          },
          "description": "Indicates if the original file should be stored."
        },
        {
          "key": "skip_malformed_input",
          "valueShape": {
            "type": "alias",
            "value": {
              "type": "primitive",
              "value": {
                "type": "boolean"
              }
            }
          },
          "description": "Indicates whether rows with malformed input should be dropped (instead of failing the validation check). Dropped rows will be returned in the warnings field."
        },
        {
          "key": "keep_fields",
          "valueShape": {
            "type": "alias",
            "value": {
              "type": "list",
              "itemShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "description": "List of names of fields that will be persisted in the Dataset. By default the Dataset will retain only the required fields indicated in the [schema for the corresponding Dataset type](https://docs.cohere.com/docs/datasets#dataset-types). For example, datasets of type `embed-input` will drop all fields other than the required `text` field. If any of the fields in `keep_fields` are missing from the uploaded file, Dataset validation will fail."
        },
        {
          "key": "optional_fields",
          "valueShape": {
            "type": "alias",
            "value": {
              "type": "list",
              "itemShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "description": "List of names of fields that will be persisted in the Dataset. By default the Dataset will retain only the required fields indicated in the [schema for the corresponding Dataset type](https://docs.cohere.com/docs/datasets#dataset-types). For example, Datasets of type `embed-input` will drop all fields other than the required `text` field. If any of the fields in `optional_fields` are missing from the uploaded file, Dataset validation will pass."
        },
        {
          "key": "text_separator",
          "valueShape": {
            "type": "alias",
            "value": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          "description": "Raw .txt uploads will be split into entries using the text_separator value."
        },
        {
          "key": "csv_delimiter",
          "valueShape": {
            "type": "alias",
            "value": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          "description": "The delimiter used for .csv uploads."
        }
      ],
      "requestHeaders": [
        {
          "key": "X-Client-Name",
          "valueShape": {
            "type": "alias",
            "value": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          "description": "The name of the project that is making the request.\n"
        }
      ],
      "request": {
        "contentType": "multipart/form-data",
        "body": {
          "type": "formData",
          "fields": [
            {
              "type": "file",
              "key": "data",
              "isOptional": false,
              "description": "The file to upload"
            },
            {
              "type": "file",
              "key": "eval_data",
              "isOptional": false,
              "description": "An optional evaluation file to upload"
            }
          ]
        }
      },
      "response": {
        "statusCode": 200,
        "body": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "The dataset ID"
            }
          ]
        },
        "description": "A successful response."
      },
      "errors": [
        {
          "statusCode": 400,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 401,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 403,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 404,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 422,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 429,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 498,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 499,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 500,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 501,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 503,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 504,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        }
      ],
      "examples": []
    },
    "test-uuid-replacement": {
      "description": "View the dataset storage usage for your Organization. Each Organization can have up to 10GB of storage across all their users.",
      "id": "/v1/datasets/usage",
      "method": "GET",
      "path": [
        {
          "type": "literal",
          "value": "v1"
        },
        {
          "type": "literal",
          "value": "datasets"
        },
        {
          "type": "literal",
          "value": "usage"
        }
      ],
      "defaultEnvironment": "x-fern-server-name",
      "environments": [
        {
          "id": "x-fern-server-name",
          "baseUrl": "https://api.cohere.com"
        }
      ],
      "requestHeaders": [
        {
          "key": "X-Client-Name",
          "valueShape": {
            "type": "alias",
            "value": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          "description": "The name of the project that is making the request.\n"
        }
      ],
      "response": {
        "statusCode": 200,
        "body": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "organization_usage",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "double"
                  }
                }
              },
              "description": "The total number of bytes used by the organization."
            }
          ]
        },
        "description": "A successful response."
      },
      "errors": [
        {
          "statusCode": 400,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 401,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 403,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 404,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 422,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 429,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 498,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 499,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 500,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 501,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 503,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 504,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        }
      ],
      "examples": []
    },
    "test-uuid-replacement": {
      "description": "Retrieve a dataset by ID. See ['Datasets'](https://docs.cohere.com/docs/datasets) for more information.",
      "id": "/v1/datasets/{id}",
      "method": "GET",
      "path": [
        {
          "type": "literal",
          "value": "v1"
        },
        {
          "type": "literal",
          "value": "datasets"
        },
        {
          "type": "pathParameter",
          "value": "id"
        }
      ],
      "defaultEnvironment": "x-fern-server-name",
      "environments": [
        {
          "id": "x-fern-server-name",
          "baseUrl": "https://api.cohere.com"
        }
      ],
      "pathParameters": [
        {
          "key": "id",
          "valueShape": {
            "type": "alias",
            "value": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          }
        }
      ],
      "requestHeaders": [
        {
          "key": "X-Client-Name",
          "valueShape": {
            "type": "alias",
            "value": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          "description": "The name of the project that is making the request.\n"
        }
      ],
      "response": {
        "statusCode": 200,
        "body": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "dataset",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "Dataset"
                }
              }
            }
          ]
        },
        "description": "A successful response."
      },
      "errors": [
        {
          "statusCode": 400,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 401,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 403,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 404,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 422,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 429,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 498,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 499,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 500,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 501,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 503,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 504,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        }
      ],
      "examples": []
    },
    "test-uuid-replacement": {
      "description": "Delete a dataset by ID. Datasets are automatically deleted after 30 days, but they can also be deleted manually.",
      "id": "/v1/datasets/{id}",
      "method": "DELETE",
      "path": [
        {
          "type": "literal",
          "value": "v1"
        },
        {
          "type": "literal",
          "value": "datasets"
        },
        {
          "type": "pathParameter",
          "value": "id"
        }
      ],
      "defaultEnvironment": "x-fern-server-name",
      "environments": [
        {
          "id": "x-fern-server-name",
          "baseUrl": "https://api.cohere.com"
        }
      ],
      "pathParameters": [
        {
          "key": "id",
          "valueShape": {
            "type": "alias",
            "value": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          }
        }
      ],
      "requestHeaders": [
        {
          "key": "X-Client-Name",
          "valueShape": {
            "type": "alias",
            "value": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          "description": "The name of the project that is making the request.\n"
        }
      ],
      "response": {
        "statusCode": 200,
        "body": {
          "type": "object",
          "extends": [],
          "properties": []
        },
        "description": "A successful response."
      },
      "errors": [
        {
          "statusCode": 400,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 401,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 403,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 404,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 422,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 429,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 498,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 499,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 500,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 501,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 503,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 504,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        }
      ],
      "examples": []
    },
    "test-uuid-replacement": {
      "description": "<Warning>\nThis API is marked as \"Legacy\" and is no longer maintained. Follow the [migration guide](https://docs.cohere.com/docs/migrating-from-cogenerate-to-cochat) to start using the Chat API.\n</Warning>\nGenerates a summary in English for a given text.\n",
      "id": "/v1/summarize",
      "method": "POST",
      "path": [
        {
          "type": "literal",
          "value": "v1"
        },
        {
          "type": "literal",
          "value": "summarize"
        }
      ],
      "defaultEnvironment": "x-fern-server-name",
      "environments": [
        {
          "id": "x-fern-server-name",
          "baseUrl": "https://api.cohere.com"
        }
      ],
      "requestHeaders": [
        {
          "key": "X-Client-Name",
          "valueShape": {
            "type": "alias",
            "value": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          "description": "The name of the project that is making the request.\n"
        }
      ],
      "responseHeaders": [
        {
          "key": "X-API-Warning",
          "valueShape": {
            "type": "alias",
            "value": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          "description": "Warning description for incorrect usage of the API"
        }
      ],
      "request": {
        "contentType": "application/json",
        "body": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "text",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "The text to generate a summary for. Can be up to 100,000 characters long. Currently the only supported language is English."
            },
            {
              "key": "length",
              "valueShape": {
                "type": "enum",
                "values": [
                  {
                    "value": "short"
                  },
                  {
                    "value": "medium"
                  },
                  {
                    "value": "long"
                  }
                ],
                "default": "medium"
              },
              "description": "One of `short`, `medium`, `long`, or `auto` defaults to `auto`. Indicates the approximate length of the summary. If `auto` is selected, the best option will be picked based on the input text."
            },
            {
              "key": "format",
              "valueShape": {
                "type": "enum",
                "values": [
                  {
                    "value": "paragraph"
                  },
                  {
                    "value": "bullets"
                  }
                ],
                "default": "paragraph"
              },
              "description": "One of `paragraph`, `bullets`, or `auto`, defaults to `auto`. Indicates the style in which the summary will be delivered - in a free form paragraph or in bullet points. If `auto` is selected, the best option will be picked based on the input text."
            },
            {
              "key": "model",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "The identifier of the model to generate the summary with. Currently available models are `command` (default), `command-nightly` (experimental), `command-light`, and `command-light-nightly` (experimental). Smaller, \"light\" models are faster, while larger models will perform better."
            },
            {
              "key": "extractiveness",
              "valueShape": {
                "type": "enum",
                "values": [
                  {
                    "value": "low"
                  },
                  {
                    "value": "medium"
                  },
                  {
                    "value": "high"
                  }
                ],
                "default": "low"
              },
              "description": "One of `low`, `medium`, `high`, or `auto`, defaults to `auto`. Controls how close to the original text the summary is. `high` extractiveness summaries will lean towards reusing sentences verbatim, while `low` extractiveness summaries will tend to paraphrase more. If `auto` is selected, the best option will be picked based on the input text."
            },
            {
              "key": "temperature",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "double",
                    "minimum": 0,
                    "maximum": 5,
                    "default": 0.3
                  }
                }
              },
              "description": "Ranges from 0 to 5. Controls the randomness of the output. Lower values tend to generate more “predictable” output, while higher values tend to generate more “creative” output. The sweet spot is typically between 0 and 1."
            },
            {
              "key": "additional_command",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "A free-form instruction for modifying how the summaries get generated. Should complete the sentence \"Generate a summary _\". Eg. \"focusing on the next steps\" or \"written by Yoda\""
            }
          ]
        }
      },
      "response": {
        "statusCode": 200,
        "body": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "Generated ID for the summary"
            },
            {
              "key": "summary",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "Generated summary for the text"
            },
            {
              "key": "meta",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "ApiMeta"
                }
              }
            }
          ]
        },
        "description": "OK"
      },
      "errors": [
        {
          "statusCode": 400,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 401,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 403,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 404,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 422,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 429,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 498,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 499,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 500,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 501,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 503,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 504,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        }
      ],
      "examples": []
    },
    "test-uuid-replacement": {
      "description": "This endpoint splits input text into smaller units called tokens using byte-pair encoding (BPE). To learn more about tokenization and byte pair encoding, see the tokens page.",
      "id": "/v1/tokenize",
      "method": "POST",
      "path": [
        {
          "type": "literal",
          "value": "v1"
        },
        {
          "type": "literal",
          "value": "tokenize"
        }
      ],
      "defaultEnvironment": "x-fern-server-name",
      "environments": [
        {
          "id": "x-fern-server-name",
          "baseUrl": "https://api.cohere.com"
        }
      ],
      "requestHeaders": [
        {
          "key": "X-Client-Name",
          "valueShape": {
            "type": "alias",
            "value": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          "description": "The name of the project that is making the request.\n"
        }
      ],
      "responseHeaders": [
        {
          "key": "X-API-Warning",
          "valueShape": {
            "type": "alias",
            "value": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          "description": "Warning description for incorrect usage of the API"
        }
      ],
      "request": {
        "contentType": "application/json",
        "body": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "text",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "The string to be tokenized, the minimum text length is 1 character, and the maximum text length is 65536 characters."
            },
            {
              "key": "model",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "An optional parameter to provide the model name. This will ensure that the tokenization uses the tokenizer used by that model."
            }
          ]
        }
      },
      "response": {
        "statusCode": 200,
        "body": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "tokens",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "list",
                  "itemShape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                }
              },
              "description": "An array of tokens, where each token is an integer."
            },
            {
              "key": "token_strings",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "list",
                  "itemShape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "meta",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "ApiMeta"
                }
              }
            }
          ]
        },
        "description": "OK"
      },
      "errors": [
        {
          "statusCode": 400,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 401,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 403,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 404,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 422,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 429,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 498,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 499,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 500,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 501,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 503,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 504,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        }
      ],
      "examples": []
    },
    "test-uuid-replacement": {
      "description": "This endpoint takes tokens using byte-pair encoding and returns their text representation. To learn more about tokenization and byte pair encoding, see the tokens page.",
      "id": "/v1/detokenize",
      "method": "POST",
      "path": [
        {
          "type": "literal",
          "value": "v1"
        },
        {
          "type": "literal",
          "value": "detokenize"
        }
      ],
      "defaultEnvironment": "x-fern-server-name",
      "environments": [
        {
          "id": "x-fern-server-name",
          "baseUrl": "https://api.cohere.com"
        }
      ],
      "requestHeaders": [
        {
          "key": "X-Client-Name",
          "valueShape": {
            "type": "alias",
            "value": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          "description": "The name of the project that is making the request.\n"
        }
      ],
      "responseHeaders": [
        {
          "key": "X-API-Warning",
          "valueShape": {
            "type": "alias",
            "value": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          "description": "Warning description for incorrect usage of the API"
        }
      ],
      "request": {
        "contentType": "application/json",
        "body": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "tokens",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "list",
                  "itemShape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                }
              },
              "description": "The list of tokens to be detokenized."
            },
            {
              "key": "model",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "An optional parameter to provide the model name. This will ensure that the detokenization is done by the tokenizer used by that model."
            }
          ]
        }
      },
      "response": {
        "statusCode": 200,
        "body": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "text",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "A string representing the list of tokens."
            },
            {
              "key": "meta",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "ApiMeta"
                }
              }
            }
          ]
        },
        "description": "OK"
      },
      "errors": [
        {
          "statusCode": 400,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 401,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 403,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 404,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 422,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 429,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 498,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 499,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 500,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 501,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 503,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 504,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        }
      ],
      "examples": []
    },
    "test-uuid-replacement": {
      "description": "Returns a list of connectors ordered by descending creation date (newer first). See ['Managing your Connector'](https://docs.cohere.com/docs/managing-your-connector) for more information.",
      "id": "/v1/connectors",
      "method": "GET",
      "path": [
        {
          "type": "literal",
          "value": "v1"
        },
        {
          "type": "literal",
          "value": "connectors"
        }
      ],
      "defaultEnvironment": "x-fern-server-name",
      "environments": [
        {
          "id": "x-fern-server-name",
          "baseUrl": "https://api.cohere.com"
        }
      ],
      "queryParameters": [
        {
          "key": "limit",
          "valueShape": {
            "type": "alias",
            "value": {
              "type": "primitive",
              "value": {
                "type": "double",
                "default": 30
              }
            }
          },
          "description": "Maximum number of connectors to return [0, 100]."
        },
        {
          "key": "offset",
          "valueShape": {
            "type": "alias",
            "value": {
              "type": "primitive",
              "value": {
                "type": "double",
                "default": 0
              }
            }
          },
          "description": "Number of connectors to skip before returning results [0, inf]."
        }
      ],
      "requestHeaders": [
        {
          "key": "X-Client-Name",
          "valueShape": {
            "type": "alias",
            "value": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          "description": "The name of the project that is making the request.\n"
        }
      ],
      "response": {
        "statusCode": 200,
        "body": {
          "type": "alias",
          "value": {
            "type": "id",
            "id": "ListConnectorsResponse"
          }
        },
        "description": "OK"
      },
      "errors": [
        {
          "statusCode": 400,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 401,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 403,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 404,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 422,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 429,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 498,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 499,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 500,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 501,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 503,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 504,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        }
      ],
      "examples": []
    },
    "test-uuid-replacement": {
      "description": "Creates a new connector. The connector is tested during registration and will cancel registration when the test is unsuccessful. See ['Creating and Deploying a Connector'](https://docs.cohere.com/v1/docs/creating-and-deploying-a-connector) for more information.",
      "id": "/v1/connectors",
      "method": "POST",
      "path": [
        {
          "type": "literal",
          "value": "v1"
        },
        {
          "type": "literal",
          "value": "connectors"
        }
      ],
      "defaultEnvironment": "x-fern-server-name",
      "environments": [
        {
          "id": "x-fern-server-name",
          "baseUrl": "https://api.cohere.com"
        }
      ],
      "requestHeaders": [
        {
          "key": "X-Client-Name",
          "valueShape": {
            "type": "alias",
            "value": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          "description": "The name of the project that is making the request.\n"
        }
      ],
      "request": {
        "contentType": "application/json",
        "body": {
          "type": "alias",
          "value": {
            "type": "id",
            "id": "CreateConnectorRequest"
          }
        }
      },
      "response": {
        "statusCode": 200,
        "body": {
          "type": "alias",
          "value": {
            "type": "id",
            "id": "CreateConnectorResponse"
          }
        },
        "description": "OK"
      },
      "errors": [
        {
          "statusCode": 400,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 401,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 403,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 404,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 422,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 429,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 498,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 499,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 500,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 501,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 503,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 504,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        }
      ],
      "examples": []
    },
    "test-uuid-replacement": {
      "description": "Retrieve a connector by ID. See ['Connectors'](https://docs.cohere.com/docs/connectors) for more information.",
      "id": "/v1/connectors/{id}",
      "method": "GET",
      "path": [
        {
          "type": "literal",
          "value": "v1"
        },
        {
          "type": "literal",
          "value": "connectors"
        },
        {
          "type": "pathParameter",
          "value": "id"
        }
      ],
      "defaultEnvironment": "x-fern-server-name",
      "environments": [
        {
          "id": "x-fern-server-name",
          "baseUrl": "https://api.cohere.com"
        }
      ],
      "pathParameters": [
        {
          "key": "id",
          "valueShape": {
            "type": "alias",
            "value": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          "description": "The ID of the connector to retrieve."
        }
      ],
      "requestHeaders": [
        {
          "key": "X-Client-Name",
          "valueShape": {
            "type": "alias",
            "value": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          "description": "The name of the project that is making the request.\n"
        }
      ],
      "response": {
        "statusCode": 200,
        "body": {
          "type": "alias",
          "value": {
            "type": "id",
            "id": "GetConnectorResponse"
          }
        },
        "description": "OK"
      },
      "errors": [
        {
          "statusCode": 400,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 401,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 403,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 404,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 422,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 429,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 498,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 499,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 500,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 501,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 503,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 504,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        }
      ],
      "examples": []
    },
    "test-uuid-replacement": {
      "description": "Delete a connector by ID. See ['Connectors'](https://docs.cohere.com/docs/connectors) for more information.",
      "id": "/v1/connectors/{id}",
      "method": "DELETE",
      "path": [
        {
          "type": "literal",
          "value": "v1"
        },
        {
          "type": "literal",
          "value": "connectors"
        },
        {
          "type": "pathParameter",
          "value": "id"
        }
      ],
      "defaultEnvironment": "x-fern-server-name",
      "environments": [
        {
          "id": "x-fern-server-name",
          "baseUrl": "https://api.cohere.com"
        }
      ],
      "pathParameters": [
        {
          "key": "id",
          "valueShape": {
            "type": "alias",
            "value": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          "description": "The ID of the connector to delete."
        }
      ],
      "requestHeaders": [
        {
          "key": "X-Client-Name",
          "valueShape": {
            "type": "alias",
            "value": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          "description": "The name of the project that is making the request.\n"
        }
      ],
      "response": {
        "statusCode": 200,
        "body": {
          "type": "alias",
          "value": {
            "type": "id",
            "id": "DeleteConnectorResponse"
          }
        },
        "description": "OK"
      },
      "errors": [
        {
          "statusCode": 400,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 401,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 403,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 404,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 422,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 429,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 498,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 499,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 500,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 501,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 503,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 504,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        }
      ],
      "examples": []
    },
    "test-uuid-replacement": {
      "description": "Authorize the connector with the given ID for the connector oauth app.  See ['Connector Authentication'](https://docs.cohere.com/docs/connector-authentication) for more information.",
      "id": "/v1/connectors/{id}/oauth/authorize",
      "method": "POST",
      "path": [
        {
          "type": "literal",
          "value": "v1"
        },
        {
          "type": "literal",
          "value": "connectors"
        },
        {
          "type": "pathParameter",
          "value": "id"
        },
        {
          "type": "literal",
          "value": "oauth"
        },
        {
          "type": "literal",
          "value": "authorize"
        }
      ],
      "defaultEnvironment": "x-fern-server-name",
      "environments": [
        {
          "id": "x-fern-server-name",
          "baseUrl": "https://api.cohere.com"
        }
      ],
      "pathParameters": [
        {
          "key": "id",
          "valueShape": {
            "type": "alias",
            "value": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          "description": "The ID of the connector to authorize."
        }
      ],
      "queryParameters": [
        {
          "key": "after_token_redirect",
          "valueShape": {
            "type": "alias",
            "value": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          "description": "The URL to redirect to after the connector has been authorized."
        }
      ],
      "requestHeaders": [
        {
          "key": "X-Client-Name",
          "valueShape": {
            "type": "alias",
            "value": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          "description": "The name of the project that is making the request.\n"
        }
      ],
      "response": {
        "statusCode": 200,
        "body": {
          "type": "alias",
          "value": {
            "type": "id",
            "id": "OAuthAuthorizeResponse"
          }
        },
        "description": "OK"
      },
      "errors": [
        {
          "statusCode": 400,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 401,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 403,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 404,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 422,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 429,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 498,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 499,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 500,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 501,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 503,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 504,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        }
      ],
      "examples": []
    },
    "test-uuid-replacement": {
      "description": "Returns the details of a model, provided its name.",
      "id": "/v1/models/{model}",
      "method": "GET",
      "path": [
        {
          "type": "literal",
          "value": "v1"
        },
        {
          "type": "literal",
          "value": "models"
        },
        {
          "type": "pathParameter",
          "value": "model"
        }
      ],
      "defaultEnvironment": "x-fern-server-name",
      "environments": [
        {
          "id": "x-fern-server-name",
          "baseUrl": "https://api.cohere.com"
        }
      ],
      "pathParameters": [
        {
          "key": "model",
          "valueShape": {
            "type": "alias",
            "value": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          }
        }
      ],
      "requestHeaders": [
        {
          "key": "X-Client-Name",
          "valueShape": {
            "type": "alias",
            "value": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          "description": "The name of the project that is making the request.\n"
        }
      ],
      "responseHeaders": [
        {
          "key": "X-API-Warning",
          "valueShape": {
            "type": "alias",
            "value": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          "description": "Warning description for incorrect usage of the API"
        }
      ],
      "response": {
        "statusCode": 200,
        "body": {
          "type": "alias",
          "value": {
            "type": "id",
            "id": "GetModelResponse"
          }
        },
        "description": "OK"
      },
      "errors": [
        {
          "statusCode": 400,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 401,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 403,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 404,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 422,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 429,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 498,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 499,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 500,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 501,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 503,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 504,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        }
      ],
      "examples": []
    },
    "test-uuid-replacement": {
      "description": "Returns a list of models available for use. The list contains models from Cohere as well as your fine-tuned models.",
      "id": "/v1/models",
      "method": "GET",
      "path": [
        {
          "type": "literal",
          "value": "v1"
        },
        {
          "type": "literal",
          "value": "models"
        }
      ],
      "defaultEnvironment": "x-fern-server-name",
      "environments": [
        {
          "id": "x-fern-server-name",
          "baseUrl": "https://api.cohere.com"
        }
      ],
      "queryParameters": [
        {
          "key": "page_size",
          "valueShape": {
            "type": "alias",
            "value": {
              "type": "primitive",
              "value": {
                "type": "double"
              }
            }
          },
          "description": "Maximum number of models to include in a page\nDefaults to `20`, min value of `1`, max value of `1000`."
        },
        {
          "key": "page_token",
          "valueShape": {
            "type": "alias",
            "value": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          "description": "Page token provided in the `next_page_token` field of a previous response."
        },
        {
          "key": "endpoint",
          "valueShape": {
            "type": "alias",
            "value": {
              "type": "id",
              "id": "CompatibleEndpoint"
            }
          },
          "description": "When provided, filters the list of models to only those that are compatible with the specified endpoint."
        },
        {
          "key": "default_only",
          "valueShape": {
            "type": "alias",
            "value": {
              "type": "primitive",
              "value": {
                "type": "boolean"
              }
            }
          },
          "description": "When provided, filters the list of models to only the default model to the endpoint. This parameter is only valid when `endpoint` is provided."
        }
      ],
      "response": {
        "statusCode": 200,
        "body": {
          "type": "alias",
          "value": {
            "type": "id",
            "id": "ListModelsResponse"
          }
        },
        "description": "OK"
      },
      "errors": [
        {
          "statusCode": 400,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 401,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 403,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 404,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 422,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 429,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 498,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 499,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 500,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 501,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 503,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 504,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        }
      ],
      "examples": []
    },
    "test-uuid-replacement": {
      "description": "Checks that the api key in the Authorization header is valid and active\n",
      "id": "/v1/check-api-key",
      "method": "POST",
      "path": [
        {
          "type": "literal",
          "value": "v1"
        },
        {
          "type": "literal",
          "value": "check-api-key"
        }
      ],
      "defaultEnvironment": "x-fern-server-name",
      "environments": [
        {
          "id": "x-fern-server-name",
          "baseUrl": "https://api.cohere.com"
        }
      ],
      "requestHeaders": [
        {
          "key": "X-Client-Name",
          "valueShape": {
            "type": "alias",
            "value": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          "description": "The name of the project that is making the request.\n"
        }
      ],
      "response": {
        "statusCode": 200,
        "body": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "valid",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "boolean"
                  }
                }
              }
            },
            {
              "key": "organization_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "key": "owner_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          ]
        },
        "description": "OK"
      },
      "errors": [
        {
          "statusCode": 400,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 401,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 403,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 404,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 422,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 429,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 498,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 499,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 500,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 501,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 503,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        },
        {
          "statusCode": 504,
          "shape": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "name": "dummy error"
        }
      ],
      "examples": []
    },
    "test-uuid-replacement": {
      "id": "/v1/finetuning/finetuned-models",
      "method": "GET",
      "path": [
        {
          "type": "literal",
          "value": "v1"
        },
        {
          "type": "literal",
          "value": "finetuning"
        },
        {
          "type": "literal",
          "value": "finetuned-models"
        }
      ],
      "defaultEnvironment": "x-fern-server-name",
      "environments": [
        {
          "id": "x-fern-server-name",
          "baseUrl": "https://api.cohere.com"
        }
      ],
      "queryParameters": [
        {
          "key": "page_size",
          "valueShape": {
            "type": "alias",
            "value": {
              "type": "primitive",
              "value": {
                "type": "integer"
              }
            }
          },
          "description": "Maximum number of results to be returned by the server. If 0, defaults to\n50."
        },
        {
          "key": "page_token",
          "valueShape": {
            "type": "alias",
            "value": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          "description": "Request a specific page of the list results."
        },
        {
          "key": "order_by",
          "valueShape": {
            "type": "alias",
            "value": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          "description": "Comma separated list of fields. For example: \"created_at,name\". The default\nsorting order is ascending. To specify descending order for a field, append\n\" desc\" to the field name. For example: \"created_at desc,name\".\n\nSupported sorting fields:\n  - created_at (default)"
        }
      ],
      "requestHeaders": [
        {
          "key": "X-Client-Name",
          "valueShape": {
            "type": "alias",
            "value": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          "description": "The name of the project that is making the request.\n"
        }
      ],
      "response": {
        "statusCode": 200,
        "body": {
          "type": "alias",
          "value": {
            "type": "id",
            "id": "ListFinetunedModelsResponse"
          }
        },
        "description": "A successful response."
      },
      "errors": [
        {
          "statusCode": 400,
          "shape": {
            "type": "alias",
            "value": {
              "type": "id",
              "id": "Error"
            }
          },
          "description": "Bad Request",
          "name": "dummy error"
        },
        {
          "statusCode": 401,
          "shape": {
            "type": "alias",
            "value": {
              "type": "id",
              "id": "Error"
            }
          },
          "description": "Unauthorized",
          "name": "dummy error"
        },
        {
          "statusCode": 403,
          "shape": {
            "type": "alias",
            "value": {
              "type": "id",
              "id": "Error"
            }
          },
          "description": "Forbidden",
          "name": "dummy error"
        },
        {
          "statusCode": 404,
          "shape": {
            "type": "alias",
            "value": {
              "type": "id",
              "id": "Error"
            }
          },
          "description": "Not Found",
          "name": "dummy error"
        },
        {
          "statusCode": 500,
          "shape": {
            "type": "alias",
            "value": {
              "type": "id",
              "id": "Error"
            }
          },
          "description": "Internal Server Error",
          "name": "dummy error"
        },
        {
          "statusCode": 503,
          "shape": {
            "type": "alias",
            "value": {
              "type": "id",
              "id": "Error"
            }
          },
          "description": "Status Service Unavailable",
          "name": "dummy error"
        }
      ],
      "examples": []
    },
    "test-uuid-replacement": {
      "id": "/v1/finetuning/finetuned-models",
      "method": "POST",
      "path": [
        {
          "type": "literal",
          "value": "v1"
        },
        {
          "type": "literal",
          "value": "finetuning"
        },
        {
          "type": "literal",
          "value": "finetuned-models"
        }
      ],
      "defaultEnvironment": "x-fern-server-name",
      "environments": [
        {
          "id": "x-fern-server-name",
          "baseUrl": "https://api.cohere.com"
        }
      ],
      "requestHeaders": [
        {
          "key": "X-Client-Name",
          "valueShape": {
            "type": "alias",
            "value": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          "description": "The name of the project that is making the request.\n"
        }
      ],
      "request": {
        "contentType": "application/json",
        "body": {
          "type": "alias",
          "value": {
            "type": "id",
            "id": "FinetunedModel"
          }
        }
      },
      "response": {
        "statusCode": 200,
        "body": {
          "type": "alias",
          "value": {
            "type": "id",
            "id": "CreateFinetunedModelResponse"
          }
        },
        "description": "A successful response."
      },
      "errors": [
        {
          "statusCode": 400,
          "shape": {
            "type": "alias",
            "value": {
              "type": "id",
              "id": "Error"
            }
          },
          "description": "Bad Request",
          "name": "dummy error"
        },
        {
          "statusCode": 401,
          "shape": {
            "type": "alias",
            "value": {
              "type": "id",
              "id": "Error"
            }
          },
          "description": "Unauthorized",
          "name": "dummy error"
        },
        {
          "statusCode": 403,
          "shape": {
            "type": "alias",
            "value": {
              "type": "id",
              "id": "Error"
            }
          },
          "description": "Forbidden",
          "name": "dummy error"
        },
        {
          "statusCode": 404,
          "shape": {
            "type": "alias",
            "value": {
              "type": "id",
              "id": "Error"
            }
          },
          "description": "Not Found",
          "name": "dummy error"
        },
        {
          "statusCode": 500,
          "shape": {
            "type": "alias",
            "value": {
              "type": "id",
              "id": "Error"
            }
          },
          "description": "Internal Server Error",
          "name": "dummy error"
        },
        {
          "statusCode": 503,
          "shape": {
            "type": "alias",
            "value": {
              "type": "id",
              "id": "Error"
            }
          },
          "description": "Status Service Unavailable",
          "name": "dummy error"
        }
      ],
      "examples": []
    },
    "test-uuid-replacement": {
      "id": "/v1/finetuning/finetuned-models/{id}",
      "method": "GET",
      "path": [
        {
          "type": "literal",
          "value": "v1"
        },
        {
          "type": "literal",
          "value": "finetuning"
        },
        {
          "type": "literal",
          "value": "finetuned-models"
        },
        {
          "type": "pathParameter",
          "value": "id"
        }
      ],
      "defaultEnvironment": "x-fern-server-name",
      "environments": [
        {
          "id": "x-fern-server-name",
          "baseUrl": "https://api.cohere.com"
        }
      ],
      "pathParameters": [
        {
          "key": "id",
          "valueShape": {
            "type": "alias",
            "value": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          "description": "The fine-tuned model ID."
        }
      ],
      "requestHeaders": [
        {
          "key": "X-Client-Name",
          "valueShape": {
            "type": "alias",
            "value": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          "description": "The name of the project that is making the request.\n"
        }
      ],
      "response": {
        "statusCode": 200,
        "body": {
          "type": "alias",
          "value": {
            "type": "id",
            "id": "GetFinetunedModelResponse"
          }
        },
        "description": "A successful response."
      },
      "errors": [
        {
          "statusCode": 400,
          "shape": {
            "type": "alias",
            "value": {
              "type": "id",
              "id": "Error"
            }
          },
          "description": "Bad Request",
          "name": "dummy error"
        },
        {
          "statusCode": 401,
          "shape": {
            "type": "alias",
            "value": {
              "type": "id",
              "id": "Error"
            }
          },
          "description": "Unauthorized",
          "name": "dummy error"
        },
        {
          "statusCode": 403,
          "shape": {
            "type": "alias",
            "value": {
              "type": "id",
              "id": "Error"
            }
          },
          "description": "Forbidden",
          "name": "dummy error"
        },
        {
          "statusCode": 404,
          "shape": {
            "type": "alias",
            "value": {
              "type": "id",
              "id": "Error"
            }
          },
          "description": "Not Found",
          "name": "dummy error"
        },
        {
          "statusCode": 500,
          "shape": {
            "type": "alias",
            "value": {
              "type": "id",
              "id": "Error"
            }
          },
          "description": "Internal Server Error",
          "name": "dummy error"
        },
        {
          "statusCode": 503,
          "shape": {
            "type": "alias",
            "value": {
              "type": "id",
              "id": "Error"
            }
          },
          "description": "Status Service Unavailable",
          "name": "dummy error"
        }
      ],
      "examples": []
    },
    "test-uuid-replacement": {
      "id": "/v1/finetuning/finetuned-models/{id}",
      "method": "DELETE",
      "path": [
        {
          "type": "literal",
          "value": "v1"
        },
        {
          "type": "literal",
          "value": "finetuning"
        },
        {
          "type": "literal",
          "value": "finetuned-models"
        },
        {
          "type": "pathParameter",
          "value": "id"
        }
      ],
      "defaultEnvironment": "x-fern-server-name",
      "environments": [
        {
          "id": "x-fern-server-name",
          "baseUrl": "https://api.cohere.com"
        }
      ],
      "pathParameters": [
        {
          "key": "id",
          "valueShape": {
            "type": "alias",
            "value": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          "description": "The fine-tuned model ID."
        }
      ],
      "requestHeaders": [
        {
          "key": "X-Client-Name",
          "valueShape": {
            "type": "alias",
            "value": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          "description": "The name of the project that is making the request.\n"
        }
      ],
      "response": {
        "statusCode": 200,
        "body": {
          "type": "alias",
          "value": {
            "type": "id",
            "id": "DeleteFinetunedModelResponse"
          }
        },
        "description": "A successful response."
      },
      "errors": [
        {
          "statusCode": 400,
          "shape": {
            "type": "alias",
            "value": {
              "type": "id",
              "id": "Error"
            }
          },
          "description": "Bad Request",
          "name": "dummy error"
        },
        {
          "statusCode": 401,
          "shape": {
            "type": "alias",
            "value": {
              "type": "id",
              "id": "Error"
            }
          },
          "description": "Unauthorized",
          "name": "dummy error"
        },
        {
          "statusCode": 403,
          "shape": {
            "type": "alias",
            "value": {
              "type": "id",
              "id": "Error"
            }
          },
          "description": "Forbidden",
          "name": "dummy error"
        },
        {
          "statusCode": 404,
          "shape": {
            "type": "alias",
            "value": {
              "type": "id",
              "id": "Error"
            }
          },
          "description": "Not Found",
          "name": "dummy error"
        },
        {
          "statusCode": 500,
          "shape": {
            "type": "alias",
            "value": {
              "type": "id",
              "id": "Error"
            }
          },
          "description": "Internal Server Error",
          "name": "dummy error"
        },
        {
          "statusCode": 503,
          "shape": {
            "type": "alias",
            "value": {
              "type": "id",
              "id": "Error"
            }
          },
          "description": "Status Service Unavailable",
          "name": "dummy error"
        }
      ],
      "examples": []
    },
    "test-uuid-replacement": {
      "id": "/v1/finetuning/finetuned-models/{finetuned_model_id}/events",
      "method": "GET",
      "path": [
        {
          "type": "literal",
          "value": "v1"
        },
        {
          "type": "literal",
          "value": "finetuning"
        },
        {
          "type": "literal",
          "value": "finetuned-models"
        },
        {
          "type": "pathParameter",
          "value": "finetuned_model_id"
        },
        {
          "type": "literal",
          "value": "events"
        }
      ],
      "defaultEnvironment": "x-fern-server-name",
      "environments": [
        {
          "id": "x-fern-server-name",
          "baseUrl": "https://api.cohere.com"
        }
      ],
      "pathParameters": [
        {
          "key": "finetuned_model_id",
          "valueShape": {
            "type": "alias",
            "value": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          "description": "The parent fine-tuned model ID."
        }
      ],
      "queryParameters": [
        {
          "key": "page_size",
          "valueShape": {
            "type": "alias",
            "value": {
              "type": "primitive",
              "value": {
                "type": "integer"
              }
            }
          },
          "description": "Maximum number of results to be returned by the server. If 0, defaults to\n50."
        },
        {
          "key": "page_token",
          "valueShape": {
            "type": "alias",
            "value": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          "description": "Request a specific page of the list results."
        },
        {
          "key": "order_by",
          "valueShape": {
            "type": "alias",
            "value": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          "description": "Comma separated list of fields. For example: \"created_at,name\". The default\nsorting order is ascending. To specify descending order for a field, append\n\" desc\" to the field name. For example: \"created_at desc,name\".\n\nSupported sorting fields:\n  - created_at (default)"
        }
      ],
      "requestHeaders": [
        {
          "key": "X-Client-Name",
          "valueShape": {
            "type": "alias",
            "value": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          "description": "The name of the project that is making the request.\n"
        }
      ],
      "response": {
        "statusCode": 200,
        "body": {
          "type": "alias",
          "value": {
            "type": "id",
            "id": "ListEventsResponse"
          }
        },
        "description": "A successful response."
      },
      "errors": [
        {
          "statusCode": 400,
          "shape": {
            "type": "alias",
            "value": {
              "type": "id",
              "id": "Error"
            }
          },
          "description": "Bad Request",
          "name": "dummy error"
        },
        {
          "statusCode": 401,
          "shape": {
            "type": "alias",
            "value": {
              "type": "id",
              "id": "Error"
            }
          },
          "description": "Unauthorized",
          "name": "dummy error"
        },
        {
          "statusCode": 403,
          "shape": {
            "type": "alias",
            "value": {
              "type": "id",
              "id": "Error"
            }
          },
          "description": "Forbidden",
          "name": "dummy error"
        },
        {
          "statusCode": 404,
          "shape": {
            "type": "alias",
            "value": {
              "type": "id",
              "id": "Error"
            }
          },
          "description": "Not Found",
          "name": "dummy error"
        },
        {
          "statusCode": 500,
          "shape": {
            "type": "alias",
            "value": {
              "type": "id",
              "id": "Error"
            }
          },
          "description": "Internal Server Error",
          "name": "dummy error"
        },
        {
          "statusCode": 503,
          "shape": {
            "type": "alias",
            "value": {
              "type": "id",
              "id": "Error"
            }
          },
          "description": "Status Service Unavailable",
          "name": "dummy error"
        }
      ],
      "examples": []
    },
    "test-uuid-replacement": {
      "id": "/v1/finetuning/finetuned-models/{finetuned_model_id}/training-step-metrics",
      "method": "GET",
      "path": [
        {
          "type": "literal",
          "value": "v1"
        },
        {
          "type": "literal",
          "value": "finetuning"
        },
        {
          "type": "literal",
          "value": "finetuned-models"
        },
        {
          "type": "pathParameter",
          "value": "finetuned_model_id"
        },
        {
          "type": "literal",
          "value": "training-step-metrics"
        }
      ],
      "defaultEnvironment": "x-fern-server-name",
      "environments": [
        {
          "id": "x-fern-server-name",
          "baseUrl": "https://api.cohere.com"
        }
      ],
      "pathParameters": [
        {
          "key": "finetuned_model_id",
          "valueShape": {
            "type": "alias",
            "value": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          "description": "The parent fine-tuned model ID."
        }
      ],
      "queryParameters": [
        {
          "key": "page_size",
          "valueShape": {
            "type": "alias",
            "value": {
              "type": "primitive",
              "value": {
                "type": "integer"
              }
            }
          },
          "description": "Maximum number of results to be returned by the server. If 0, defaults to\n50."
        },
        {
          "key": "page_token",
          "valueShape": {
            "type": "alias",
            "value": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          "description": "Request a specific page of the list results."
        }
      ],
      "requestHeaders": [
        {
          "key": "X-Client-Name",
          "valueShape": {
            "type": "alias",
            "value": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          "description": "The name of the project that is making the request.\n"
        }
      ],
      "response": {
        "statusCode": 200,
        "body": {
          "type": "alias",
          "value": {
            "type": "id",
            "id": "ListTrainingStepMetricsResponse"
          }
        },
        "description": "A successful response."
      },
      "errors": [
        {
          "statusCode": 400,
          "shape": {
            "type": "alias",
            "value": {
              "type": "id",
              "id": "Error"
            }
          },
          "description": "Bad Request",
          "name": "dummy error"
        },
        {
          "statusCode": 401,
          "shape": {
            "type": "alias",
            "value": {
              "type": "id",
              "id": "Error"
            }
          },
          "description": "Unauthorized",
          "name": "dummy error"
        },
        {
          "statusCode": 403,
          "shape": {
            "type": "alias",
            "value": {
              "type": "id",
              "id": "Error"
            }
          },
          "description": "Forbidden",
          "name": "dummy error"
        },
        {
          "statusCode": 404,
          "shape": {
            "type": "alias",
            "value": {
              "type": "id",
              "id": "Error"
            }
          },
          "description": "Not Found",
          "name": "dummy error"
        },
        {
          "statusCode": 500,
          "shape": {
            "type": "alias",
            "value": {
              "type": "id",
              "id": "Error"
            }
          },
          "description": "Internal Server Error",
          "name": "dummy error"
        },
        {
          "statusCode": 503,
          "shape": {
            "type": "alias",
            "value": {
              "type": "id",
              "id": "Error"
            }
          },
          "description": "Status Service Unavailable",
          "name": "dummy error"
        }
      ],
      "examples": []
    }
  },
  "websockets": {},
  "webhooks": {},
  "types": {
    "ChatRole": {
      "name": "ChatRole",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "CHATBOT"
          },
          {
            "value": "SYSTEM"
          },
          {
            "value": "USER"
          },
          {
            "value": "TOOL"
          }
        ]
      },
      "description": "One of `CHATBOT`, `SYSTEM`, `TOOL` or `USER` to identify who the message is coming from.\n"
    },
    "ToolCall": {
      "name": "ToolCall",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "name",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "Name of the tool to call."
          },
          {
            "key": "parameters",
            "valueShape": {
              "type": "object",
              "extends": [],
              "properties": []
            },
            "description": "The name and value of the parameters to use when invoking a tool."
          }
        ]
      },
      "description": "Contains the tool calls generated by the model. Use it to invoke your tools.\n"
    },
    "ChatMessage": {
      "name": "ChatMessage",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "role",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "ChatRole"
              }
            }
          },
          {
            "key": "message",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "Contents of the chat message.\n"
          },
          {
            "key": "tool_calls",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "list",
                "itemShape": {
                  "type": "alias",
                  "value": {
                    "type": "id",
                    "id": "ToolCall"
                  }
                }
              }
            }
          }
        ]
      },
      "description": "Represents a single message in the chat history, excluding the current user turn. It has two properties: `role` and `message`. The `role` identifies the sender (`CHATBOT`, `SYSTEM`, or `USER`), while the `message` contains the text content.\n\nThe chat_history parameter should not be used for `SYSTEM` messages in most cases. Instead, to add a `SYSTEM` role message at the beginning of a conversation, the `preamble` parameter should be used.\n"
    },
    "ToolResult": {
      "name": "ToolResult",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "call",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "ToolCall"
              }
            }
          },
          {
            "key": "outputs",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "list",
                "itemShape": {
                  "type": "object",
                  "extends": [],
                  "properties": []
                }
              }
            }
          }
        ]
      }
    },
    "ToolMessage": {
      "name": "ToolMessage",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "role",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "ChatRole"
              }
            }
          },
          {
            "key": "tool_results",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "list",
                "itemShape": {
                  "type": "alias",
                  "value": {
                    "type": "id",
                    "id": "ToolResult"
                  }
                }
              }
            }
          }
        ]
      },
      "description": "Represents tool result in the chat history.\n"
    },
    "Message": {
      "name": "Message",
      "shape": {
        "type": "discriminatedUnion",
        "discriminant": "role",
        "variants": [
          {
            "discriminantValue": "CHATBOT",
            "description": "Represents a single message in the chat history, excluding the current user turn. It has two properties: `role` and `message`. The `role` identifies the sender (`CHATBOT`, `SYSTEM`, or `USER`), while the `message` contains the text content.\n\nThe chat_history parameter should not be used for `SYSTEM` messages in most cases. Instead, to add a `SYSTEM` role message at the beginning of a conversation, the `preamble` parameter should be used.\n",
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "role",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "id",
                    "id": "ChatRole"
                  }
                }
              },
              {
                "key": "message",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                "description": "Contents of the chat message.\n"
              },
              {
                "key": "tool_calls",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "list",
                    "itemShape": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "id": "ToolCall"
                      }
                    }
                  }
                }
              }
            ]
          },
          {
            "discriminantValue": "SYSTEM",
            "description": "Represents a single message in the chat history, excluding the current user turn. It has two properties: `role` and `message`. The `role` identifies the sender (`CHATBOT`, `SYSTEM`, or `USER`), while the `message` contains the text content.\n\nThe chat_history parameter should not be used for `SYSTEM` messages in most cases. Instead, to add a `SYSTEM` role message at the beginning of a conversation, the `preamble` parameter should be used.\n",
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "role",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "id",
                    "id": "ChatRole"
                  }
                }
              },
              {
                "key": "message",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                "description": "Contents of the chat message.\n"
              },
              {
                "key": "tool_calls",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "list",
                    "itemShape": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "id": "ToolCall"
                      }
                    }
                  }
                }
              }
            ]
          },
          {
            "discriminantValue": "USER",
            "description": "Represents a single message in the chat history, excluding the current user turn. It has two properties: `role` and `message`. The `role` identifies the sender (`CHATBOT`, `SYSTEM`, or `USER`), while the `message` contains the text content.\n\nThe chat_history parameter should not be used for `SYSTEM` messages in most cases. Instead, to add a `SYSTEM` role message at the beginning of a conversation, the `preamble` parameter should be used.\n",
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "role",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "id",
                    "id": "ChatRole"
                  }
                }
              },
              {
                "key": "message",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                "description": "Contents of the chat message.\n"
              },
              {
                "key": "tool_calls",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "list",
                    "itemShape": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "id": "ToolCall"
                      }
                    }
                  }
                }
              }
            ]
          },
          {
            "discriminantValue": "TOOL",
            "description": "Represents tool result in the chat history.\n",
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "role",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "id",
                    "id": "ChatRole"
                  }
                }
              },
              {
                "key": "tool_results",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "list",
                    "itemShape": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "id": "ToolResult"
                      }
                    }
                  }
                }
              }
            ]
          }
        ]
      }
    },
    "ChatConnector": {
      "name": "ChatConnector",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "The identifier of the connector.\n"
          },
          {
            "key": "user_access_token",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "When specified, this user access token will be passed to the connector in the Authorization header instead of the Cohere generated one.\n"
          },
          {
            "key": "continue_on_failure",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "boolean"
                }
              }
            },
            "description": "Defaults to `false`.\n\nWhen `true`, the request will continue if this connector returned an error.\n"
          },
          {
            "key": "options",
            "valueShape": {
              "type": "object",
              "extends": [],
              "properties": []
            },
            "description": "Provides the connector with different settings at request time. The key/value pairs of this object are specific to each connector.\n\nFor example, the connector `web-search` supports the `site` option, which limits search results to the specified domain.\n"
          }
        ]
      },
      "description": "The connector used for fetching documents.\n"
    },
    "ChatDocument": {
      "name": "ChatDocument",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "Unique identifier for this document."
          }
        ],
        "extraProperties": {
          "type": "primitive",
          "value": {
            "type": "string"
          }
        }
      },
      "description": "Relevant information that could be used by the model to generate a more accurate reply.\nThe contents of each document are generally short (under 300 words), and are passed in the form of a\ndictionary of strings. Some suggested keys are \"text\", \"author\", \"date\". Both the key name and the value will be\npassed to the model.\n"
    },
    "Tool": {
      "name": "Tool",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "name",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "The name of the tool to be called. Valid names contain only the characters `a-z`, `A-Z`, `0-9`, `_` and must not begin with a digit.\n"
          },
          {
            "key": "description",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "The description of what the tool does, the model uses the description to choose when and how to call the function.\n"
          },
          {
            "key": "parameter_definitions",
            "valueShape": {
              "type": "object",
              "extends": [],
              "properties": []
            },
            "description": "The input parameters of the tool. Accepts a dictionary where the key is the name of the parameter and the value is the parameter spec. Valid parameter names contain only the characters `a-z`, `A-Z`, `0-9`, `_` and must not begin with a digit.\n```\n{\n  \"my_param\": {\n    \"description\": <string>,\n    \"type\": <string>, // any python data type, such as 'str', 'bool'\n    \"required\": <boolean>\n  }\n}\n```\n"
          }
        ]
      }
    },
    "ResponseFormatType": {
      "name": "ResponseFormatType",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "text"
          },
          {
            "value": "json_object"
          }
        ]
      },
      "description": "Defaults to `\"text\"`.\n\nWhen set to `\"json_object\"`, the model's output will be a valid JSON Object.\n"
    },
    "TextResponseFormat": {
      "name": "Text Response",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "type",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "ResponseFormatType"
              }
            }
          }
        ]
      }
    },
    "JSONResponseFormat": {
      "name": "JSON Object Response",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "type",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "ResponseFormatType"
              }
            }
          },
          {
            "key": "schema",
            "valueShape": {
              "type": "object",
              "extends": [],
              "properties": []
            },
            "description": "A JSON schema object that the output will adhere to. There are some restrictions we have on the schema, refer to [our guide](https://docs.cohere.com/docs/structured-outputs-json#schema-constraints) for more information.\nExample (required name and age object):\n```json\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"name\": {\"type\": \"string\"},\n    \"age\": {\"type\": \"integer\"}\n  },\n  \"required\": [\"name\", \"age\"]\n}\n```\n\n**Note**: This field must not be specified when the `type` is set to `\"text\"`.\n"
          }
        ]
      }
    },
    "ResponseFormat": {
      "name": "ResponseFormat",
      "shape": {
        "type": "discriminatedUnion",
        "discriminant": "type",
        "variants": [
          {
            "discriminantValue": "text",
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "type",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "id",
                    "id": "ResponseFormatType"
                  }
                }
              }
            ]
          },
          {
            "discriminantValue": "json_object",
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "type",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "id",
                    "id": "ResponseFormatType"
                  }
                }
              },
              {
                "key": "schema",
                "valueShape": {
                  "type": "object",
                  "extends": [],
                  "properties": []
                },
                "description": "A JSON schema object that the output will adhere to. There are some restrictions we have on the schema, refer to [our guide](https://docs.cohere.com/docs/structured-outputs-json#schema-constraints) for more information.\nExample (required name and age object):\n```json\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"name\": {\"type\": \"string\"},\n    \"age\": {\"type\": \"integer\"}\n  },\n  \"required\": [\"name\", \"age\"]\n}\n```\n\n**Note**: This field must not be specified when the `type` is set to `\"text\"`.\n"
              }
            ]
          }
        ]
      },
      "description": "Configuration for forcing the model output to adhere to the specified format. Supported on [Command R 03-2024](https://docs.cohere.com/docs/command-r), [Command R+ 04-2024](https://docs.cohere.com/docs/command-r-plus) and newer models.\n\nThe model can be forced into outputting JSON objects (with up to 5 levels of nesting) by setting `{ \"type\": \"json_object\" }`.\n\nA [JSON Schema](https://json-schema.org/) can optionally be provided, to ensure a specific structure.\n\n**Note**: When using  `{ \"type\": \"json_object\" }` your `message` should always explicitly instruct the model to generate a JSON (eg: _\"Generate a JSON ...\"_) . Otherwise the model may end up getting stuck generating an infinite stream of characters and eventually run out of context length.\n**Limitation**: The parameter is not supported in RAG mode (when any of `connectors`, `documents`, `tools`, `tool_results` are provided).\n"
    },
    "ChatCitation": {
      "name": "ChatCitation",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "start",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            },
            "description": "The index of text that the citation starts at, counting from zero. For example, a generation of `Hello, world!` with a citation on `world` would have a start value of `7`. This is because the citation starts at `w`, which is the seventh character.\n"
          },
          {
            "key": "end",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            },
            "description": "The index of text that the citation ends after, counting from zero. For example, a generation of `Hello, world!` with a citation on `world` would have an end value of `11`. This is because the citation ends after `d`, which is the eleventh character.\n"
          },
          {
            "key": "text",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "The text of the citation. For example, a generation of `Hello, world!` with a citation of `world` would have a text value of `world`.\n"
          },
          {
            "key": "document_ids",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "list",
                "itemShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "description": "Identifiers of documents cited by this section of the generated reply.\n"
          }
        ]
      },
      "description": "A section of the generated reply which cites external knowledge.\n"
    },
    "ChatSearchQuery": {
      "name": "ChatSearchQuery",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "text",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "The text of the search query.\n"
          },
          {
            "key": "generation_id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "uuid"
                }
              }
            },
            "description": "Unique identifier for the generated search query. Useful for submitting feedback.\n"
          }
        ]
      },
      "description": "The generated search query. Contains the text of the query and a unique identifier for the query.\n"
    },
    "ChatSearchResultConnector": {
      "name": "ChatSearchResultConnector",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "The identifier of the connector.\n"
          }
        ]
      },
      "description": "The connector used for fetching documents.\n"
    },
    "ChatSearchResult": {
      "name": "ChatSearchResult",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "search_query",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "ChatSearchQuery"
              }
            }
          },
          {
            "key": "connector",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "ChatSearchResultConnector"
              }
            },
            "description": "The connector from which this result comes from.\n"
          },
          {
            "key": "document_ids",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "list",
                "itemShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "description": "Identifiers of documents found by this search query.\n"
          },
          {
            "key": "error_message",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "An error message if the search failed.\n"
          },
          {
            "key": "continue_on_failure",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "boolean"
                }
              }
            },
            "description": "Whether a chat request should continue or not if the request to this connector fails.\n"
          }
        ]
      }
    },
    "FinishReason": {
      "name": "FinishReason",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "COMPLETE"
          },
          {
            "value": "STOP_SEQUENCE"
          },
          {
            "value": "ERROR"
          },
          {
            "value": "ERROR_TOXIC"
          },
          {
            "value": "ERROR_LIMIT"
          },
          {
            "value": "USER_CANCEL"
          },
          {
            "value": "MAX_TOKENS"
          }
        ]
      }
    },
    "ApiMeta": {
      "name": "ApiMeta",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "api_version",
            "valueShape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "version",
                  "valueShape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "key": "is_deprecated",
                  "valueShape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean"
                      }
                    }
                  }
                },
                {
                  "key": "is_experimental",
                  "valueShape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean"
                      }
                    }
                  }
                }
              ]
            }
          },
          {
            "key": "billed_units",
            "valueShape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "images",
                  "valueShape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  },
                  "description": "The number of billed images.\n"
                },
                {
                  "key": "input_tokens",
                  "valueShape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  },
                  "description": "The number of billed input tokens.\n"
                },
                {
                  "key": "output_tokens",
                  "valueShape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  },
                  "description": "The number of billed output tokens.\n"
                },
                {
                  "key": "search_units",
                  "valueShape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  },
                  "description": "The number of billed search units.\n"
                },
                {
                  "key": "classifications",
                  "valueShape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  },
                  "description": "The number of billed classifications units.\n"
                }
              ]
            }
          },
          {
            "key": "tokens",
            "valueShape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "input_tokens",
                  "valueShape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  },
                  "description": "The number of tokens used as input to the model.\n"
                },
                {
                  "key": "output_tokens",
                  "valueShape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  },
                  "description": "The number of tokens produced by the model.\n"
                }
              ]
            }
          },
          {
            "key": "warnings",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "list",
                "itemShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        ]
      }
    },
    "NonStreamedChatResponse": {
      "name": "NonStreamedChatResponse",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "text",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "Contents of the reply generated by the model."
          },
          {
            "key": "generation_id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "uuid"
                }
              }
            },
            "description": "Unique identifier for the generated reply. Useful for submitting feedback."
          },
          {
            "key": "response_id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "uuid"
                }
              }
            },
            "description": "Unique identifier for the response."
          },
          {
            "key": "citations",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "list",
                "itemShape": {
                  "type": "alias",
                  "value": {
                    "type": "id",
                    "id": "ChatCitation"
                  }
                }
              }
            },
            "description": "Inline citations for the generated reply."
          },
          {
            "key": "documents",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "list",
                "itemShape": {
                  "type": "alias",
                  "value": {
                    "type": "id",
                    "id": "ChatDocument"
                  }
                }
              }
            },
            "description": "Documents seen by the model when generating the reply."
          },
          {
            "key": "is_search_required",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "boolean"
                }
              }
            },
            "description": "Denotes that a search for documents is required during the RAG flow."
          },
          {
            "key": "search_queries",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "list",
                "itemShape": {
                  "type": "alias",
                  "value": {
                    "type": "id",
                    "id": "ChatSearchQuery"
                  }
                }
              }
            },
            "description": "Generated search queries, meant to be used as part of the RAG flow."
          },
          {
            "key": "search_results",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "list",
                "itemShape": {
                  "type": "alias",
                  "value": {
                    "type": "id",
                    "id": "ChatSearchResult"
                  }
                }
              }
            },
            "description": "Documents retrieved from each of the conducted searches."
          },
          {
            "key": "finish_reason",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "FinishReason"
              }
            }
          },
          {
            "key": "tool_calls",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "list",
                "itemShape": {
                  "type": "alias",
                  "value": {
                    "type": "id",
                    "id": "ToolCall"
                  }
                }
              }
            }
          },
          {
            "key": "chat_history",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "list",
                "itemShape": {
                  "type": "alias",
                  "value": {
                    "type": "id",
                    "id": "Message"
                  }
                }
              }
            },
            "description": "A list of previous messages between the user and the model, meant to give the model conversational context for responding to the user's `message`.\n"
          },
          {
            "key": "meta",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "ApiMeta"
              }
            }
          }
        ]
      }
    },
    "ChatStreamEvent": {
      "name": "ChatStreamEvent",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "event_type",
            "valueShape": {
              "type": "enum",
              "values": [
                {
                  "value": "stream-start"
                },
                {
                  "value": "search-queries-generation"
                },
                {
                  "value": "search-results"
                },
                {
                  "value": "text-generation"
                },
                {
                  "value": "citation-generation"
                },
                {
                  "value": "stream-end"
                },
                {
                  "value": "debug"
                }
              ]
            }
          }
        ]
      }
    },
    "ChatStreamStartEvent": {
      "name": "ChatStreamStartEvent",
      "shape": {
        "type": "object",
        "extends": [
          "ChatStreamEvent"
        ],
        "properties": []
      }
    },
    "ChatSearchQueriesGenerationEvent": {
      "name": "ChatSearchQueriesGenerationEvent",
      "shape": {
        "type": "object",
        "extends": [
          "ChatStreamEvent"
        ],
        "properties": []
      }
    },
    "ChatSearchResultsEvent": {
      "name": "ChatSearchResultsEvent",
      "shape": {
        "type": "object",
        "extends": [
          "ChatStreamEvent"
        ],
        "properties": []
      }
    },
    "ChatTextGenerationEvent": {
      "name": "ChatTextGenerationEvent",
      "shape": {
        "type": "object",
        "extends": [
          "ChatStreamEvent"
        ],
        "properties": []
      }
    },
    "ChatCitationGenerationEvent": {
      "name": "ChatCitationGenerationEvent",
      "shape": {
        "type": "object",
        "extends": [
          "ChatStreamEvent"
        ],
        "properties": []
      }
    },
    "ChatToolCallsGenerationEvent": {
      "name": "ChatToolCallsGenerationEvent",
      "shape": {
        "type": "object",
        "extends": [
          "ChatStreamEvent"
        ],
        "properties": []
      }
    },
    "ChatStreamEndEvent": {
      "name": "ChatStreamEndEvent",
      "shape": {
        "type": "object",
        "extends": [
          "ChatStreamEvent"
        ],
        "properties": []
      }
    },
    "ToolCallDelta": {
      "name": "ToolCallDelta",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "name",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "Name of the tool call\n"
          },
          {
            "key": "index",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "double"
                }
              }
            },
            "description": "Index of the tool call generated\n"
          },
          {
            "key": "parameters",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "Chunk of the tool parameters\n"
          },
          {
            "key": "text",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "Chunk of the tool plan text\n"
          }
        ]
      },
      "description": "Contains the chunk of the tool call generation in the stream.\n"
    },
    "ChatToolCallsChunkEvent": {
      "name": "ChatToolCallsChunkEvent",
      "shape": {
        "type": "object",
        "extends": [
          "ChatStreamEvent"
        ],
        "properties": []
      }
    },
    "ChatDebugEvent": {
      "name": "ChatDebugEvent",
      "shape": {
        "type": "object",
        "extends": [
          "ChatStreamEvent"
        ],
        "properties": []
      }
    },
    "StreamedChatResponse": {
      "name": "StreamedChatResponse",
      "shape": {
        "type": "discriminatedUnion",
        "discriminant": "event_type",
        "variants": [
          {
            "discriminantValue": "stream-start",
            "type": "object",
            "extends": [
              "ChatStreamEvent"
            ],
            "properties": []
          },
          {
            "discriminantValue": "search-queries-generation",
            "type": "object",
            "extends": [
              "ChatStreamEvent"
            ],
            "properties": []
          },
          {
            "discriminantValue": "search-results",
            "type": "object",
            "extends": [
              "ChatStreamEvent"
            ],
            "properties": []
          },
          {
            "discriminantValue": "text-generation",
            "type": "object",
            "extends": [
              "ChatStreamEvent"
            ],
            "properties": []
          },
          {
            "discriminantValue": "citation-generation",
            "type": "object",
            "extends": [
              "ChatStreamEvent"
            ],
            "properties": []
          },
          {
            "discriminantValue": "tool-calls-generation",
            "type": "object",
            "extends": [
              "ChatStreamEvent"
            ],
            "properties": []
          },
          {
            "discriminantValue": "stream-end",
            "type": "object",
            "extends": [
              "ChatStreamEvent"
            ],
            "properties": []
          },
          {
            "discriminantValue": "tool-calls-chunk",
            "type": "object",
            "extends": [
              "ChatStreamEvent"
            ],
            "properties": []
          },
          {
            "discriminantValue": "debug",
            "type": "object",
            "extends": [
              "ChatStreamEvent"
            ],
            "properties": []
          }
        ]
      },
      "description": "StreamedChatResponse is returned in streaming mode (specified with `stream=True` in the request)."
    },
    "TextContent": {
      "name": "TextContent",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "type",
            "valueShape": {
              "type": "enum",
              "values": [
                {
                  "value": "text"
                }
              ]
            }
          },
          {
            "key": "text",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      },
      "description": "Text content of the message."
    },
    "Content": {
      "name": "Content",
      "shape": {
        "type": "discriminatedUnion",
        "discriminant": "type",
        "variants": [
          {
            "discriminantValue": "text",
            "description": "Text content of the message.",
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "type",
                "valueShape": {
                  "type": "enum",
                  "values": [
                    {
                      "value": "text"
                    }
                  ]
                }
              },
              {
                "key": "text",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          }
        ]
      },
      "description": "A Content block which contains information about the content type and the content itself."
    },
    "UserMessage": {
      "name": "User Message",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "role",
            "valueShape": {
              "type": "enum",
              "values": [
                {
                  "value": "user"
                }
              ]
            }
          },
          {
            "key": "content",
            "valueShape": {
              "type": "undiscriminatedUnion",
              "variants": []
            },
            "description": "The content of the message. This can be a string or a list of content blocks.\nIf a string is provided, it will be treated as a text content block.\n"
          }
        ]
      },
      "description": "A message from the user."
    },
    "ToolCallV2": {
      "name": "ToolCallV2",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "key": "type",
            "valueShape": {
              "type": "enum",
              "values": [
                {
                  "value": "function"
                }
              ]
            }
          },
          {
            "key": "function",
            "valueShape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "name",
                  "valueShape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "key": "arguments",
                  "valueShape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              ]
            }
          }
        ]
      },
      "description": "An array of tool calls to be made."
    },
    "ToolSource": {
      "name": "Tool Output",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "The unique identifier of the document"
          },
          {
            "key": "tool_output",
            "valueShape": {
              "type": "object",
              "extends": [],
              "properties": []
            }
          }
        ]
      }
    },
    "DocumentSource": {
      "name": "DocumentSource",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "The unique identifier of the document"
          },
          {
            "key": "document",
            "valueShape": {
              "type": "object",
              "extends": [],
              "properties": []
            }
          }
        ]
      },
      "description": "A document source object containing the unique identifier of the document and the document itself."
    },
    "Source": {
      "name": "Source",
      "shape": {
        "type": "discriminatedUnion",
        "discriminant": "type",
        "variants": [
          {
            "discriminantValue": "tool",
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "id",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                "description": "The unique identifier of the document"
              },
              {
                "key": "tool_output",
                "valueShape": {
                  "type": "object",
                  "extends": [],
                  "properties": []
                }
              }
            ]
          },
          {
            "discriminantValue": "document",
            "description": "A document source object containing the unique identifier of the document and the document itself.",
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "id",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                "description": "The unique identifier of the document"
              },
              {
                "key": "document",
                "valueShape": {
                  "type": "object",
                  "extends": [],
                  "properties": []
                }
              }
            ]
          }
        ]
      },
      "description": "A source object containing information about the source of the data cited."
    },
    "Citation": {
      "name": "Citation",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "start",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            },
            "description": "Start index of the cited snippet in the original source text."
          },
          {
            "key": "end",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            },
            "description": "End index of the cited snippet in the original source text."
          },
          {
            "key": "text",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "Text snippet that is being cited."
          },
          {
            "key": "sources",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "list",
                "itemShape": {
                  "type": "alias",
                  "value": {
                    "type": "id",
                    "id": "Source"
                  }
                }
              }
            }
          }
        ]
      },
      "description": "Citation information containing sources and the text cited."
    },
    "AssistantMessage": {
      "name": "Assistant Message",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "role",
            "valueShape": {
              "type": "enum",
              "values": [
                {
                  "value": "assistant"
                }
              ]
            }
          },
          {
            "key": "tool_calls",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "list",
                "itemShape": {
                  "type": "alias",
                  "value": {
                    "type": "id",
                    "id": "ToolCallV2"
                  }
                }
              }
            }
          },
          {
            "key": "tool_plan",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "A chain-of-thought style reflection and plan that the model generates when working with Tools."
          },
          {
            "key": "content",
            "valueShape": {
              "type": "undiscriminatedUnion",
              "variants": []
            }
          },
          {
            "key": "citations",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "list",
                "itemShape": {
                  "type": "alias",
                  "value": {
                    "type": "id",
                    "id": "Citation"
                  }
                }
              }
            }
          }
        ]
      },
      "description": "A message from the assistant role can contain text and tool call information."
    },
    "SystemMessage": {
      "name": "System Message",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "role",
            "valueShape": {
              "type": "enum",
              "values": [
                {
                  "value": "system"
                }
              ]
            }
          },
          {
            "key": "content",
            "valueShape": {
              "type": "undiscriminatedUnion",
              "variants": []
            }
          }
        ]
      },
      "description": "A message from the system."
    },
    "Document": {
      "name": "Document",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "data",
            "valueShape": {
              "type": "object",
              "extends": [],
              "properties": [],
              "extraProperties": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "A relevant documents that the model can cite to generate a more accurate reply. Each document is a string-string dictionary.\n"
          },
          {
            "key": "id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "Unique identifier for this document which will be referenced in citations. If not provided an ID will be automatically generated."
          }
        ]
      },
      "description": "Relevant information that could be used by the model to generate a more accurate reply.\nThe content of each document are generally short (should be under 300 words). Metadata should be used to provide additional information, both the key name and the value will be\npassed to the model.\n"
    },
    "DocumentContent": {
      "name": "DocumentContent",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "type",
            "valueShape": {
              "type": "enum",
              "values": [
                {
                  "value": "document"
                }
              ]
            }
          },
          {
            "key": "document",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "Document"
              }
            }
          }
        ]
      },
      "description": "Document content."
    },
    "ToolContent": {
      "name": "ToolContent",
      "shape": {
        "type": "discriminatedUnion",
        "discriminant": "type",
        "variants": [
          {
            "discriminantValue": "text",
            "description": "Text content of the message.",
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "type",
                "valueShape": {
                  "type": "enum",
                  "values": [
                    {
                      "value": "text"
                    }
                  ]
                }
              },
              {
                "key": "text",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          {
            "discriminantValue": "document",
            "description": "Document content.",
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "type",
                "valueShape": {
                  "type": "enum",
                  "values": [
                    {
                      "value": "document"
                    }
                  ]
                }
              },
              {
                "key": "document",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "id",
                    "id": "Document"
                  }
                }
              }
            ]
          }
        ]
      },
      "description": "A content block which contains information about the content of a tool result"
    },
    "ToolMessageV2": {
      "name": "Tool Message",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "role",
            "valueShape": {
              "type": "enum",
              "values": [
                {
                  "value": "tool"
                }
              ]
            }
          },
          {
            "key": "tool_call_id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "The id of the associated tool call that has provided the given content"
          },
          {
            "key": "content",
            "valueShape": {
              "type": "undiscriminatedUnion",
              "variants": []
            },
            "description": "Outputs from a tool. The content should formatted as a JSON object string, or a list of tool content blocks"
          }
        ]
      },
      "description": "A message with Tool outputs."
    },
    "ChatMessageV2": {
      "name": "ChatMessageV2",
      "shape": {
        "type": "discriminatedUnion",
        "discriminant": "role",
        "variants": [
          {
            "discriminantValue": "user",
            "description": "A message from the user.",
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "role",
                "valueShape": {
                  "type": "enum",
                  "values": [
                    {
                      "value": "user"
                    }
                  ]
                }
              },
              {
                "key": "content",
                "valueShape": {
                  "type": "undiscriminatedUnion",
                  "variants": []
                },
                "description": "The content of the message. This can be a string or a list of content blocks.\nIf a string is provided, it will be treated as a text content block.\n"
              }
            ]
          },
          {
            "discriminantValue": "assistant",
            "description": "A message from the assistant role can contain text and tool call information.",
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "role",
                "valueShape": {
                  "type": "enum",
                  "values": [
                    {
                      "value": "assistant"
                    }
                  ]
                }
              },
              {
                "key": "tool_calls",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "list",
                    "itemShape": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "id": "ToolCallV2"
                      }
                    }
                  }
                }
              },
              {
                "key": "tool_plan",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                "description": "A chain-of-thought style reflection and plan that the model generates when working with Tools."
              },
              {
                "key": "content",
                "valueShape": {
                  "type": "undiscriminatedUnion",
                  "variants": []
                }
              },
              {
                "key": "citations",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "list",
                    "itemShape": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "id": "Citation"
                      }
                    }
                  }
                }
              }
            ]
          },
          {
            "discriminantValue": "system",
            "description": "A message from the system.",
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "role",
                "valueShape": {
                  "type": "enum",
                  "values": [
                    {
                      "value": "system"
                    }
                  ]
                }
              },
              {
                "key": "content",
                "valueShape": {
                  "type": "undiscriminatedUnion",
                  "variants": []
                }
              }
            ]
          },
          {
            "discriminantValue": "tool",
            "description": "A message with Tool outputs.",
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "role",
                "valueShape": {
                  "type": "enum",
                  "values": [
                    {
                      "value": "tool"
                    }
                  ]
                }
              },
              {
                "key": "tool_call_id",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                "description": "The id of the associated tool call that has provided the given content"
              },
              {
                "key": "content",
                "valueShape": {
                  "type": "undiscriminatedUnion",
                  "variants": []
                },
                "description": "Outputs from a tool. The content should formatted as a JSON object string, or a list of tool content blocks"
              }
            ]
          }
        ]
      },
      "description": "Represents a single message in the chat history from a given role."
    },
    "ChatMessages": {
      "name": "ChatMessages",
      "shape": {
        "type": "alias",
        "value": {
          "type": "list",
          "itemShape": {
            "type": "alias",
            "value": {
              "type": "id",
              "id": "ChatMessageV2"
            }
          }
        }
      },
      "description": "A list of chat messages in chronological order, representing a conversation between the user and the model.\n\nMessages can be from `User`, `Assistant`, `Tool` and `System` roles. Learn more about messages and roles in [the Chat API guide](https://docs.cohere.com/v2/docs/chat-api).\n"
    },
    "ToolV2": {
      "name": "ToolV2",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "type",
            "valueShape": {
              "type": "enum",
              "values": [
                {
                  "value": "function"
                }
              ]
            }
          },
          {
            "key": "function",
            "valueShape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "name",
                  "valueShape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  },
                  "description": "The name of the function."
                },
                {
                  "key": "description",
                  "valueShape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  },
                  "description": "The description of the function."
                },
                {
                  "key": "parameters",
                  "valueShape": {
                    "type": "object",
                    "extends": [],
                    "properties": []
                  },
                  "description": "The parameters of the function as a JSON schema."
                }
              ]
            },
            "description": "The function to be executed."
          }
        ]
      }
    },
    "CitationOptions": {
      "name": "CitationOptions",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "mode",
            "valueShape": {
              "type": "enum",
              "values": [
                {
                  "value": "FAST"
                },
                {
                  "value": "ACCURATE"
                },
                {
                  "value": "OFF"
                }
              ]
            },
            "description": "Defaults to `\"accurate\"`.\nDictates the approach taken to generating citations as part of the RAG flow by allowing the user to specify whether they want `\"accurate\"` results, `\"fast\"` results or no results.\n"
          }
        ]
      },
      "description": "Options for controlling citation generation."
    },
    "ResponseFormatTypeV2": {
      "name": "ResponseFormatTypeV2",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "text"
          },
          {
            "value": "json_object"
          }
        ]
      },
      "description": "Defaults to `\"text\"`.\n\nWhen set to `\"json_object\"`, the model's output will be a valid JSON Object.\n"
    },
    "TextResponseFormatV2": {
      "name": "TextResponseFormatV2",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "type",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "ResponseFormatTypeV2"
              }
            }
          }
        ]
      }
    },
    "JsonResponseFormatV2": {
      "name": "JsonResponseFormatV2",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "type",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "ResponseFormatTypeV2"
              }
            }
          },
          {
            "key": "json_schema",
            "valueShape": {
              "type": "object",
              "extends": [],
              "properties": []
            },
            "description": "A [JSON schema](https://json-schema.org/overview/what-is-jsonschema) object that the output will adhere to. There are some restrictions we have on the schema, refer to [our guide](https://docs.cohere.com/docs/structured-outputs-json#schema-constraints) for more information.\nExample (required name and age object):\n```json\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"name\": {\"type\": \"string\"},\n    \"age\": {\"type\": \"integer\"}\n  },\n  \"required\": [\"name\", \"age\"]\n}\n```\n\n**Note**: This field must not be specified when the `type` is set to `\"text\"`.\n"
          }
        ]
      }
    },
    "ResponseFormatV2": {
      "name": "ResponseFormatV2",
      "shape": {
        "type": "discriminatedUnion",
        "discriminant": "type",
        "variants": [
          {
            "discriminantValue": "text",
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "type",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "id",
                    "id": "ResponseFormatTypeV2"
                  }
                }
              }
            ]
          },
          {
            "discriminantValue": "json_object",
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "type",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "id",
                    "id": "ResponseFormatTypeV2"
                  }
                }
              },
              {
                "key": "json_schema",
                "valueShape": {
                  "type": "object",
                  "extends": [],
                  "properties": []
                },
                "description": "A [JSON schema](https://json-schema.org/overview/what-is-jsonschema) object that the output will adhere to. There are some restrictions we have on the schema, refer to [our guide](https://docs.cohere.com/docs/structured-outputs-json#schema-constraints) for more information.\nExample (required name and age object):\n```json\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"name\": {\"type\": \"string\"},\n    \"age\": {\"type\": \"integer\"}\n  },\n  \"required\": [\"name\", \"age\"]\n}\n```\n\n**Note**: This field must not be specified when the `type` is set to `\"text\"`.\n"
              }
            ]
          }
        ]
      },
      "description": "Configuration for forcing the model output to adhere to the specified format. Supported on [Command R](https://docs.cohere.com/v2/docs/command-r), [Command R+](https://docs.cohere.com/v2/docs/command-r-plus) and newer models.\n\nThe model can be forced into outputting JSON objects by setting `{ \"type\": \"json_object\" }`.\n\nA [JSON Schema](https://json-schema.org/) can optionally be provided, to ensure a specific structure.\n\n**Note**: When using  `{ \"type\": \"json_object\" }` your `message` should always explicitly instruct the model to generate a JSON (eg: _\"Generate a JSON ...\"_) . Otherwise the model may end up getting stuck generating an infinite stream of characters and eventually run out of context length.\n\n**Note**: When `json_schema` is not specified, the generated object can have up to 5 layers of nesting.\n\n**Limitation**: The parameter is not supported when used in combinations with the `documents` or `tools` parameters.\n"
    },
    "ChatFinishReason": {
      "name": "ChatFinishReason",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "COMPLETE"
          },
          {
            "value": "STOP_SEQUENCE"
          },
          {
            "value": "MAX_TOKENS"
          },
          {
            "value": "TOOL_CALL"
          },
          {
            "value": "ERROR"
          }
        ]
      },
      "description": "The reason a chat request has finished.\n\n- **complete**: The model finished sending a complete message.\n- **max_tokens**: The number of generated tokens exceeded the model's context length or the value specified via the `max_tokens` parameter.\n- **stop_sequence**: One of the provided `stop_sequence` entries was reached in the model's generation.\n- **tool_call**: The model generated a Tool Call and is expecting a Tool Message in return\n- **error**: The generation failed due to an internal error\n"
    },
    "AssistantMessageResponse": {
      "name": "AssistantMessageResponse",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "role",
            "valueShape": {
              "type": "enum",
              "values": [
                {
                  "value": "assistant"
                }
              ]
            }
          },
          {
            "key": "tool_calls",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "list",
                "itemShape": {
                  "type": "alias",
                  "value": {
                    "type": "id",
                    "id": "ToolCallV2"
                  }
                }
              }
            }
          },
          {
            "key": "tool_plan",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "A chain-of-thought style reflection and plan that the model generates when working with Tools."
          },
          {
            "key": "content",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "list",
                "itemShape": {
                  "type": "discriminatedUnion",
                  "discriminant": "type",
                  "variants": [
                    {
                      "discriminantValue": "text",
                      "description": "Text content of the message.",
                      "type": "object",
                      "extends": [],
                      "properties": [
                        {
                          "key": "type",
                          "valueShape": {
                            "type": "enum",
                            "values": [
                              {
                                "value": "text"
                              }
                            ]
                          }
                        },
                        {
                          "key": "text",
                          "valueShape": {
                            "type": "alias",
                            "value": {
                              "type": "primitive",
                              "value": {
                                "type": "string"
                              }
                            }
                          }
                        }
                      ]
                    }
                  ]
                }
              }
            }
          },
          {
            "key": "citations",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "list",
                "itemShape": {
                  "type": "alias",
                  "value": {
                    "type": "id",
                    "id": "Citation"
                  }
                }
              }
            }
          }
        ]
      },
      "description": "A message from the assistant role can contain text and tool call information."
    },
    "Usage": {
      "name": "Usage",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "billed_units",
            "valueShape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "input_tokens",
                  "valueShape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  },
                  "description": "The number of billed input tokens.\n"
                },
                {
                  "key": "output_tokens",
                  "valueShape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  },
                  "description": "The number of billed output tokens.\n"
                },
                {
                  "key": "search_units",
                  "valueShape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  },
                  "description": "The number of billed search units.\n"
                },
                {
                  "key": "classifications",
                  "valueShape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  },
                  "description": "The number of billed classifications units.\n"
                }
              ]
            }
          },
          {
            "key": "tokens",
            "valueShape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "input_tokens",
                  "valueShape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  },
                  "description": "The number of tokens used as input to the model.\n"
                },
                {
                  "key": "output_tokens",
                  "valueShape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  },
                  "description": "The number of tokens produced by the model.\n"
                }
              ]
            }
          }
        ]
      }
    },
    "LogprobItem": {
      "name": "LogprobItem",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "text",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "The text chunk for which the log probabilities was calculated."
          },
          {
            "key": "token_ids",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "list",
                "itemShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                }
              }
            },
            "description": "The token ids of each token used to construct the text chunk."
          },
          {
            "key": "logprobs",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "list",
                "itemShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "double"
                    }
                  }
                }
              }
            },
            "description": "The log probability of each token used to construct the text chunk."
          }
        ]
      }
    },
    "ChatResponse": {
      "name": "ChatResponse",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "Unique identifier for the generated reply. Useful for submitting feedback."
          },
          {
            "key": "finish_reason",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "ChatFinishReason"
              }
            }
          },
          {
            "key": "message",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "AssistantMessageResponse"
              }
            }
          },
          {
            "key": "usage",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "Usage"
              }
            }
          },
          {
            "key": "logprobs",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "list",
                "itemShape": {
                  "type": "alias",
                  "value": {
                    "type": "id",
                    "id": "LogprobItem"
                  }
                }
              }
            }
          }
        ]
      }
    },
    "ChatStreamEventType": {
      "name": "ChatStreamEventType",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "type",
            "valueShape": {
              "type": "enum",
              "values": [
                {
                  "value": "message-start"
                },
                {
                  "value": "content-start"
                },
                {
                  "value": "content-delta"
                },
                {
                  "value": "content-end"
                },
                {
                  "value": "tool-call-start"
                },
                {
                  "value": "tool-call-delta"
                },
                {
                  "value": "tool-call-end"
                },
                {
                  "value": "tool-plan-delta"
                },
                {
                  "value": "citation-start"
                },
                {
                  "value": "citation-end"
                },
                {
                  "value": "message-end"
                }
              ]
            }
          }
        ]
      },
      "description": "The streamed event types"
    },
    "ChatMessageStartEvent": {
      "name": "ChatMessageStartEvent",
      "shape": {
        "type": "object",
        "extends": [
          "ChatStreamEventType"
        ],
        "properties": []
      },
      "description": "A streamed event which signifies that a stream has started."
    },
    "ChatContentStartEvent": {
      "name": "ChatContentStartEvent",
      "shape": {
        "type": "object",
        "extends": [
          "ChatStreamEventType"
        ],
        "properties": []
      },
      "description": "A streamed delta event which signifies that a new content block has started."
    },
    "ChatContentDeltaEvent": {
      "name": "ChatContentDeltaEvent",
      "shape": {
        "type": "object",
        "extends": [
          "ChatStreamEventType"
        ],
        "properties": []
      },
      "description": "A streamed delta event which contains a delta of chat text content."
    },
    "ChatContentEndEvent": {
      "name": "ChatContentEndEvent",
      "shape": {
        "type": "object",
        "extends": [
          "ChatStreamEventType"
        ],
        "properties": []
      },
      "description": "A streamed delta event which signifies that the content block has ended."
    },
    "ChatToolPlanDeltaEvent": {
      "name": "ChatToolPlanDeltaEvent",
      "shape": {
        "type": "object",
        "extends": [
          "ChatStreamEventType"
        ],
        "properties": []
      },
      "description": "A streamed event which contains a delta of tool plan text."
    },
    "ChatToolCallStartEvent": {
      "name": "ChatToolCallStartEvent",
      "shape": {
        "type": "object",
        "extends": [
          "ChatStreamEventType"
        ],
        "properties": []
      },
      "description": "A streamed event delta which signifies a tool call has started streaming."
    },
    "ChatToolCallDeltaEvent": {
      "name": "ChatToolCallDeltaEvent",
      "shape": {
        "type": "object",
        "extends": [
          "ChatStreamEventType"
        ],
        "properties": []
      },
      "description": "A streamed event delta which signifies a delta in tool call arguments."
    },
    "ChatToolCallEndEvent": {
      "name": "ChatToolCallEndEvent",
      "shape": {
        "type": "object",
        "extends": [
          "ChatStreamEventType"
        ],
        "properties": []
      },
      "description": "A streamed event delta which signifies a tool call has finished streaming."
    },
    "CitationStartEvent": {
      "name": "CitationStartEvent",
      "shape": {
        "type": "object",
        "extends": [
          "ChatStreamEventType"
        ],
        "properties": []
      },
      "description": "A streamed event which signifies a citation has been created."
    },
    "CitationEndEvent": {
      "name": "CitationEndEvent",
      "shape": {
        "type": "object",
        "extends": [
          "ChatStreamEventType"
        ],
        "properties": []
      },
      "description": "A streamed event which signifies a citation has finished streaming."
    },
    "ChatMessageEndEvent": {
      "name": "ChatMessageEndEvent",
      "shape": {
        "type": "object",
        "extends": [
          "ChatStreamEventType"
        ],
        "properties": []
      },
      "description": "A streamed event which signifies that the chat message has ended."
    },
    "StreamedChatResponseV2": {
      "name": "StreamedChatResponseV2",
      "shape": {
        "type": "discriminatedUnion",
        "discriminant": "type",
        "variants": [
          {
            "discriminantValue": "message-start",
            "description": "A streamed event which signifies that a stream has started.",
            "type": "object",
            "extends": [
              "ChatStreamEventType"
            ],
            "properties": []
          },
          {
            "discriminantValue": "content-start",
            "description": "A streamed delta event which signifies that a new content block has started.",
            "type": "object",
            "extends": [
              "ChatStreamEventType"
            ],
            "properties": []
          },
          {
            "discriminantValue": "content-delta",
            "description": "A streamed delta event which contains a delta of chat text content.",
            "type": "object",
            "extends": [
              "ChatStreamEventType"
            ],
            "properties": []
          },
          {
            "discriminantValue": "content-end",
            "description": "A streamed delta event which signifies that the content block has ended.",
            "type": "object",
            "extends": [
              "ChatStreamEventType"
            ],
            "properties": []
          },
          {
            "discriminantValue": "tool-plan-delta",
            "description": "A streamed event which contains a delta of tool plan text.",
            "type": "object",
            "extends": [
              "ChatStreamEventType"
            ],
            "properties": []
          },
          {
            "discriminantValue": "tool-call-start",
            "description": "A streamed event delta which signifies a tool call has started streaming.",
            "type": "object",
            "extends": [
              "ChatStreamEventType"
            ],
            "properties": []
          },
          {
            "discriminantValue": "tool-call-delta",
            "description": "A streamed event delta which signifies a delta in tool call arguments.",
            "type": "object",
            "extends": [
              "ChatStreamEventType"
            ],
            "properties": []
          },
          {
            "discriminantValue": "tool-call-end",
            "description": "A streamed event delta which signifies a tool call has finished streaming.",
            "type": "object",
            "extends": [
              "ChatStreamEventType"
            ],
            "properties": []
          },
          {
            "discriminantValue": "citation-start",
            "description": "A streamed event which signifies a citation has been created.",
            "type": "object",
            "extends": [
              "ChatStreamEventType"
            ],
            "properties": []
          },
          {
            "discriminantValue": "citation-end",
            "description": "A streamed event which signifies a citation has finished streaming.",
            "type": "object",
            "extends": [
              "ChatStreamEventType"
            ],
            "properties": []
          },
          {
            "discriminantValue": "message-end",
            "description": "A streamed event which signifies that the chat message has ended.",
            "type": "object",
            "extends": [
              "ChatStreamEventType"
            ],
            "properties": []
          },
          {
            "discriminantValue": "debug",
            "type": "object",
            "extends": [
              "ChatStreamEvent"
            ],
            "properties": []
          }
        ]
      },
      "description": "StreamedChatResponse is returned in streaming mode (specified with `stream=True` in the request)."
    },
    "SingleGeneration": {
      "name": "SingleGeneration",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "key": "text",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "key": "index",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            },
            "description": "Refers to the nth generation. Only present when `num_generations` is greater than zero."
          },
          {
            "key": "likelihood",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "double"
                }
              }
            }
          },
          {
            "key": "token_likelihoods",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "list",
                "itemShape": {
                  "type": "object",
                  "extends": [],
                  "properties": [
                    {
                      "key": "token",
                      "valueShape": {
                        "type": "alias",
                        "value": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      }
                    },
                    {
                      "key": "likelihood",
                      "valueShape": {
                        "type": "alias",
                        "value": {
                          "type": "primitive",
                          "value": {
                            "type": "double"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            },
            "description": "Only returned if `return_likelihoods` is set to `GENERATION` or `ALL`. The likelihood refers to the average log-likelihood of the entire specified string, which is useful for [evaluating the performance of your model](likelihood-eval), especially if you've created a [custom model](https://docs.cohere.com/docs/training-custom-models). Individual token likelihoods provide the log-likelihood of each token. The first token will not have a likelihood."
          }
        ]
      }
    },
    "Generation": {
      "name": "Generation",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "key": "prompt",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "Prompt used for generations."
          },
          {
            "key": "generations",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "list",
                "itemShape": {
                  "type": "alias",
                  "value": {
                    "type": "id",
                    "id": "SingleGeneration"
                  }
                }
              }
            },
            "description": "List of generated results"
          },
          {
            "key": "meta",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "ApiMeta"
              }
            }
          }
        ]
      }
    },
    "GenerateStreamEvent": {
      "name": "GenerateStreamEvent",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "event_type",
            "valueShape": {
              "type": "enum",
              "values": [
                {
                  "value": "text-generation"
                },
                {
                  "value": "stream-end"
                },
                {
                  "value": "stream-error"
                }
              ]
            }
          }
        ]
      }
    },
    "GenerateStreamText": {
      "name": "GenerateStreamText",
      "shape": {
        "type": "object",
        "extends": [
          "GenerateStreamEvent"
        ],
        "properties": []
      }
    },
    "SingleGenerationInStream": {
      "name": "SingleGenerationInStream",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "key": "text",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "Full text of the generation."
          },
          {
            "key": "index",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            },
            "description": "Refers to the nth generation. Only present when `num_generations` is greater than zero."
          },
          {
            "key": "finish_reason",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "FinishReason"
              }
            }
          }
        ]
      }
    },
    "GenerateStreamEnd": {
      "name": "GenerateStreamEnd",
      "shape": {
        "type": "object",
        "extends": [
          "GenerateStreamEvent"
        ],
        "properties": []
      }
    },
    "GenerateStreamError": {
      "name": "GenerateStreamError",
      "shape": {
        "type": "object",
        "extends": [
          "GenerateStreamEvent"
        ],
        "properties": []
      }
    },
    "GenerateStreamedResponse": {
      "name": "GenerateStreamedResponse",
      "shape": {
        "type": "discriminatedUnion",
        "discriminant": "event_type",
        "variants": [
          {
            "discriminantValue": "text-generation",
            "type": "object",
            "extends": [
              "GenerateStreamEvent"
            ],
            "properties": []
          },
          {
            "discriminantValue": "stream-end",
            "type": "object",
            "extends": [
              "GenerateStreamEvent"
            ],
            "properties": []
          },
          {
            "discriminantValue": "stream-error",
            "type": "object",
            "extends": [
              "GenerateStreamEvent"
            ],
            "properties": []
          }
        ]
      },
      "description": "Response in content type stream when `stream` is `true` in the request parameters. Generation tokens are streamed with the GenerationStream response. The final response is of type GenerationFinalResponse."
    },
    "EmbedInputType": {
      "name": "EmbedInputType",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "search_document"
          },
          {
            "value": "search_query"
          },
          {
            "value": "classification"
          },
          {
            "value": "clustering"
          },
          {
            "value": "image"
          }
        ]
      },
      "description": "Specifies the type of input passed to the model. Required for embedding models v3 and higher.\n\n- `\"search_document\"`: Used for embeddings stored in a vector database for search use-cases.\n- `\"search_query\"`: Used for embeddings of search queries run against a vector DB to find relevant documents.\n- `\"classification\"`: Used for embeddings passed through a text classifier.\n- `\"clustering\"`: Used for the embeddings run through a clustering algorithm.\n- `\"image\"`: Used for embeddings with image input.\n"
    },
    "EmbeddingType": {
      "name": "EmbeddingType",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "float"
          },
          {
            "value": "int8"
          },
          {
            "value": "uint8"
          },
          {
            "value": "binary"
          },
          {
            "value": "ubinary"
          }
        ]
      }
    },
    "Image": {
      "name": "Image",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "width",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "double"
                }
              }
            },
            "description": "Width of the image in pixels"
          },
          {
            "key": "height",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "double"
                }
              }
            },
            "description": "Height of the image in pixels"
          },
          {
            "key": "format",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "Format of the image"
          },
          {
            "key": "bit_depth",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "double"
                }
              }
            },
            "description": "Bit depth of the image"
          }
        ]
      }
    },
    "EmbedFloatsResponse": {
      "name": "EmbedFloatsResponse",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "response_type",
            "valueShape": {
              "type": "enum",
              "values": [
                {
                  "value": "embeddings_floats"
                },
                {
                  "value": "embeddings_by_type"
                }
              ]
            }
          },
          {
            "key": "id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "key": "embeddings",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "list",
                "itemShape": {
                  "type": "alias",
                  "value": {
                    "type": "list",
                    "itemShape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "double"
                        }
                      }
                    }
                  }
                }
              }
            },
            "description": "An array of embeddings, where each embedding is an array of floats. The length of the `embeddings` array will be the same as the length of the original `texts` array."
          },
          {
            "key": "texts",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "list",
                "itemShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "description": "The text entries for which embeddings were returned."
          },
          {
            "key": "images",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "list",
                "itemShape": {
                  "type": "alias",
                  "value": {
                    "type": "id",
                    "id": "Image"
                  }
                }
              }
            },
            "description": "The image entries for which embeddings were returned."
          },
          {
            "key": "meta",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "ApiMeta"
              }
            }
          }
        ]
      }
    },
    "EmbedByTypeResponse": {
      "name": "EmbedByTypeResponse",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "response_type",
            "valueShape": {
              "type": "enum",
              "values": [
                {
                  "value": "embeddings_floats"
                },
                {
                  "value": "embeddings_by_type"
                }
              ]
            }
          },
          {
            "key": "id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "key": "embeddings",
            "valueShape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "float",
                  "valueShape": {
                    "type": "alias",
                    "value": {
                      "type": "list",
                      "itemShape": {
                        "type": "alias",
                        "value": {
                          "type": "list",
                          "itemShape": {
                            "type": "alias",
                            "value": {
                              "type": "primitive",
                              "value": {
                                "type": "double"
                              }
                            }
                          }
                        }
                      }
                    }
                  },
                  "description": "An array of float embeddings."
                },
                {
                  "key": "int8",
                  "valueShape": {
                    "type": "alias",
                    "value": {
                      "type": "list",
                      "itemShape": {
                        "type": "alias",
                        "value": {
                          "type": "list",
                          "itemShape": {
                            "type": "alias",
                            "value": {
                              "type": "primitive",
                              "value": {
                                "type": "integer"
                              }
                            }
                          }
                        }
                      }
                    }
                  },
                  "description": "An array of signed int8 embeddings. Each value is between -128 and 127."
                },
                {
                  "key": "uint8",
                  "valueShape": {
                    "type": "alias",
                    "value": {
                      "type": "list",
                      "itemShape": {
                        "type": "alias",
                        "value": {
                          "type": "list",
                          "itemShape": {
                            "type": "alias",
                            "value": {
                              "type": "primitive",
                              "value": {
                                "type": "integer"
                              }
                            }
                          }
                        }
                      }
                    }
                  },
                  "description": "An array of unsigned int8 embeddings. Each value is between 0 and 255."
                },
                {
                  "key": "binary",
                  "valueShape": {
                    "type": "alias",
                    "value": {
                      "type": "list",
                      "itemShape": {
                        "type": "alias",
                        "value": {
                          "type": "list",
                          "itemShape": {
                            "type": "alias",
                            "value": {
                              "type": "primitive",
                              "value": {
                                "type": "integer"
                              }
                            }
                          }
                        }
                      }
                    }
                  },
                  "description": "An array of packed signed binary embeddings. The length of each binary embedding is 1/8 the length of the float embeddings of the provided model. Each value is between -128 and 127."
                },
                {
                  "key": "ubinary",
                  "valueShape": {
                    "type": "alias",
                    "value": {
                      "type": "list",
                      "itemShape": {
                        "type": "alias",
                        "value": {
                          "type": "list",
                          "itemShape": {
                            "type": "alias",
                            "value": {
                              "type": "primitive",
                              "value": {
                                "type": "integer"
                              }
                            }
                          }
                        }
                      }
                    }
                  },
                  "description": "An array of packed unsigned binary embeddings. The length of each binary embedding is 1/8 the length of the float embeddings of the provided model. Each value is between 0 and 255."
                }
              ]
            },
            "description": "An object with different embedding types. The length of each embedding type array will be the same as the length of the original `texts` array."
          },
          {
            "key": "texts",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "list",
                "itemShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "description": "The text entries for which embeddings were returned."
          },
          {
            "key": "images",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "list",
                "itemShape": {
                  "type": "alias",
                  "value": {
                    "type": "id",
                    "id": "Image"
                  }
                }
              }
            },
            "description": "The image entries for which embeddings were returned."
          },
          {
            "key": "meta",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "ApiMeta"
              }
            }
          }
        ]
      }
    },
    "EmbedJob": {
      "name": "EmbedJob",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "job_id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "ID of the embed job"
          },
          {
            "key": "name",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "The name of the embed job"
          },
          {
            "key": "status",
            "valueShape": {
              "type": "enum",
              "values": [
                {
                  "value": "processing"
                },
                {
                  "value": "complete"
                },
                {
                  "value": "cancelling"
                },
                {
                  "value": "cancelled"
                },
                {
                  "value": "failed"
                }
              ]
            },
            "description": "The status of the embed job"
          },
          {
            "key": "created_at",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "datetime"
                }
              }
            },
            "description": "The creation date of the embed job"
          },
          {
            "key": "input_dataset_id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "ID of the input dataset"
          },
          {
            "key": "output_dataset_id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "ID of the resulting output dataset"
          },
          {
            "key": "model",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "ID of the model used to embed"
          },
          {
            "key": "truncate",
            "valueShape": {
              "type": "enum",
              "values": [
                {
                  "value": "START"
                },
                {
                  "value": "END"
                }
              ]
            },
            "description": "The truncation option used"
          },
          {
            "key": "meta",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "ApiMeta"
              }
            }
          }
        ]
      }
    },
    "ListEmbedJobResponse": {
      "name": "ListEmbedJobResponse",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "embed_jobs",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "list",
                "itemShape": {
                  "type": "alias",
                  "value": {
                    "type": "id",
                    "id": "EmbedJob"
                  }
                }
              }
            }
          }
        ]
      }
    },
    "CreateEmbedJobRequest": {
      "name": "CreateEmbedJobRequest",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "model",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "ID of the embedding model.\n\nAvailable models and corresponding embedding dimensions:\n\n- `embed-english-v3.0` : 1024\n- `embed-multilingual-v3.0` : 1024\n- `embed-english-light-v3.0` : 384\n- `embed-multilingual-light-v3.0` : 384\n"
          },
          {
            "key": "dataset_id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "ID of a [Dataset](https://docs.cohere.com/docs/datasets). The Dataset must be of type `embed-input` and must have a validation status `Validated`"
          },
          {
            "key": "input_type",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "EmbedInputType"
              }
            }
          },
          {
            "key": "name",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "The name of the embed job."
          },
          {
            "key": "embedding_types",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "list",
                "itemShape": {
                  "type": "alias",
                  "value": {
                    "type": "id",
                    "id": "EmbeddingType"
                  }
                }
              }
            },
            "description": "Specifies the types of embeddings you want to get back. Not required and default is None, which returns the Embed Floats response type. Can be one or more of the following types.\n\n* `\"float\"`: Use this when you want to get back the default float embeddings. Valid for all models.\n* `\"int8\"`: Use this when you want to get back signed int8 embeddings. Valid for only v3 models.\n* `\"uint8\"`: Use this when you want to get back unsigned int8 embeddings. Valid for only v3 models.\n* `\"binary\"`: Use this when you want to get back signed binary embeddings. Valid for only v3 models.\n* `\"ubinary\"`: Use this when you want to get back unsigned binary embeddings. Valid for only v3 models."
          },
          {
            "key": "truncate",
            "valueShape": {
              "type": "enum",
              "values": [
                {
                  "value": "START"
                },
                {
                  "value": "END"
                }
              ],
              "default": "END"
            },
            "description": "One of `START|END` to specify how the API will handle inputs longer than the maximum token length.\n\nPassing `START` will discard the start of the input. `END` will discard the end of the input. In both cases, input is discarded until the remaining input is exactly the maximum input token length for the model.\n"
          }
        ]
      }
    },
    "CreateEmbedJobResponse": {
      "name": "CreateEmbedJobResponse",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "job_id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "key": "meta",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "ApiMeta"
              }
            }
          }
        ]
      },
      "description": "Response from creating an embed job."
    },
    "RerankDocument": {
      "name": "RerankDocument",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "text",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "The text of the document to rerank."
          }
        ]
      }
    },
    "ClassifyExample": {
      "name": "ClassifyExample",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "text",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "key": "label",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "DatasetValidationStatus": {
      "name": "DatasetValidationStatus",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "unknown"
          },
          {
            "value": "queued"
          },
          {
            "value": "processing"
          },
          {
            "value": "failed"
          },
          {
            "value": "validated"
          },
          {
            "value": "skipped"
          }
        ]
      },
      "description": "The validation status of the dataset"
    },
    "DatasetType": {
      "name": "DatasetType",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "embed-input"
          },
          {
            "value": "embed-result"
          },
          {
            "value": "cluster-result"
          },
          {
            "value": "cluster-outliers"
          },
          {
            "value": "reranker-finetune-input"
          },
          {
            "value": "single-label-classification-finetune-input"
          },
          {
            "value": "chat-finetune-input"
          },
          {
            "value": "multi-label-classification-finetune-input"
          }
        ]
      },
      "description": "The type of the dataset"
    },
    "DatasetPart": {
      "name": "DatasetPart",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "The dataset part ID"
          },
          {
            "key": "name",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "The name of the dataset part"
          },
          {
            "key": "url",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "The download url of the file"
          },
          {
            "key": "index",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            },
            "description": "The index of the file"
          },
          {
            "key": "size_bytes",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            },
            "description": "The size of the file in bytes"
          },
          {
            "key": "num_rows",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            },
            "description": "The number of rows in the file"
          },
          {
            "key": "original_url",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "The download url of the original file"
          },
          {
            "key": "samples",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "list",
                "itemShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "description": "The first few rows of the parsed file"
          }
        ]
      }
    },
    "ParseInfo": {
      "name": "ParseInfo",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "separator",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "key": "delimiter",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "RerankerDataMetrics": {
      "name": "RerankerDataMetrics",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "num_train_queries",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "double"
                }
              }
            },
            "description": "The number of training queries."
          },
          {
            "key": "num_train_relevant_passages",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "double"
                }
              }
            },
            "description": "The sum of all relevant passages of valid training examples."
          },
          {
            "key": "num_train_hard_negatives",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "double"
                }
              }
            },
            "description": "The sum of all hard negatives of valid training examples."
          },
          {
            "key": "num_eval_queries",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "double"
                }
              }
            },
            "description": "The number of evaluation queries."
          },
          {
            "key": "num_eval_relevant_passages",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "double"
                }
              }
            },
            "description": "The sum of all relevant passages of valid eval examples."
          },
          {
            "key": "num_eval_hard_negatives",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "double"
                }
              }
            },
            "description": "The sum of all hard negatives of valid eval examples."
          }
        ]
      }
    },
    "ChatDataMetrics": {
      "name": "ChatDataMetrics",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "num_train_turns",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "double"
                }
              }
            },
            "description": "The sum of all turns of valid train examples."
          },
          {
            "key": "num_eval_turns",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "double"
                }
              }
            },
            "description": "The sum of all turns of valid eval examples."
          },
          {
            "key": "preamble",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "The preamble of this dataset."
          }
        ]
      }
    },
    "LabelMetric": {
      "name": "LabelMetric",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "total_examples",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "double"
                }
              }
            },
            "description": "Total number of examples for this label"
          },
          {
            "key": "label",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "value of the label"
          },
          {
            "key": "samples",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "list",
                "itemShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "description": "samples for this label"
          }
        ]
      }
    },
    "ClassifyDataMetrics": {
      "name": "ClassifyDataMetrics",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "label_metrics",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "list",
                "itemShape": {
                  "type": "alias",
                  "value": {
                    "type": "id",
                    "id": "LabelMetric"
                  }
                }
              }
            }
          }
        ]
      }
    },
    "FinetuneDatasetMetrics": {
      "name": "FinetuneDatasetMetrics",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "trainable_token_count",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "double"
                }
              }
            },
            "description": "The number of tokens of valid examples that can be used for training."
          },
          {
            "key": "total_examples",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "double"
                }
              }
            },
            "description": "The overall number of examples."
          },
          {
            "key": "train_examples",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "double"
                }
              }
            },
            "description": "The number of training examples."
          },
          {
            "key": "train_size_bytes",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "double"
                }
              }
            },
            "description": "The size in bytes of all training examples."
          },
          {
            "key": "eval_examples",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "double"
                }
              }
            },
            "description": "Number of evaluation examples."
          },
          {
            "key": "eval_size_bytes",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "double"
                }
              }
            },
            "description": "The size in bytes of all eval examples."
          },
          {
            "key": "reranker_data_metrics",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "RerankerDataMetrics"
              }
            }
          },
          {
            "key": "chat_data_metrics",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "ChatDataMetrics"
              }
            }
          },
          {
            "key": "classify_data_metrics",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "ClassifyDataMetrics"
              }
            }
          }
        ]
      }
    },
    "Metrics": {
      "name": "Metrics",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "finetune_dataset_metrics",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "FinetuneDatasetMetrics"
              }
            }
          }
        ]
      }
    },
    "Dataset": {
      "name": "Dataset",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "The dataset ID"
          },
          {
            "key": "name",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "The name of the dataset"
          },
          {
            "key": "created_at",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "datetime"
                }
              }
            },
            "description": "The creation date"
          },
          {
            "key": "updated_at",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "datetime"
                }
              }
            },
            "description": "The last update date"
          },
          {
            "key": "dataset_type",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "DatasetType"
              }
            }
          },
          {
            "key": "validation_status",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "DatasetValidationStatus"
              }
            }
          },
          {
            "key": "validation_error",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "Errors found during validation"
          },
          {
            "key": "schema",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "the avro schema of the dataset"
          },
          {
            "key": "required_fields",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "list",
                "itemShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          {
            "key": "preserve_fields",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "list",
                "itemShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          {
            "key": "dataset_parts",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "list",
                "itemShape": {
                  "type": "alias",
                  "value": {
                    "type": "id",
                    "id": "DatasetPart"
                  }
                }
              }
            },
            "description": "the underlying files that make up the dataset"
          },
          {
            "key": "validation_warnings",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "list",
                "itemShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "description": "warnings found during validation"
          },
          {
            "key": "parse_info",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "ParseInfo"
              }
            }
          },
          {
            "key": "metrics",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "Metrics"
              }
            }
          }
        ]
      }
    },
    "ConnectorOAuth": {
      "name": "ConnectorOAuth",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "client_id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "The OAuth 2.0 client ID. This field is encrypted at rest."
          },
          {
            "key": "client_secret",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "The OAuth 2.0 client Secret. This field is encrypted at rest and never returned in a response."
          },
          {
            "key": "authorize_url",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "The OAuth 2.0 /authorize endpoint to use when users authorize the connector."
          },
          {
            "key": "token_url",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "The OAuth 2.0 /token endpoint to use when users authorize the connector."
          },
          {
            "key": "scope",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "The OAuth scopes to request when users authorize the connector."
          }
        ]
      }
    },
    "Connector": {
      "name": "Connector",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "The unique identifier of the connector (used in both `/connectors` & `/chat` endpoints).\nThis is automatically created from the name of the connector upon registration."
          },
          {
            "key": "organization_id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "The organization to which this connector belongs. This is automatically set to\nthe organization of the user who created the connector."
          },
          {
            "key": "name",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "A human-readable name for the connector."
          },
          {
            "key": "description",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "A description of the connector."
          },
          {
            "key": "url",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "The URL of the connector that will be used to search for documents."
          },
          {
            "key": "created_at",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "datetime"
                }
              }
            },
            "description": "The UTC time at which the connector was created."
          },
          {
            "key": "updated_at",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "datetime"
                }
              }
            },
            "description": "The UTC time at which the connector was last updated."
          },
          {
            "key": "excludes",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "list",
                "itemShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "description": "A list of fields to exclude from the prompt (fields remain in the document)."
          },
          {
            "key": "auth_type",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "The type of authentication/authorization used by the connector. Possible values: [oauth, service_auth]"
          },
          {
            "key": "oauth",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "ConnectorOAuth"
              }
            },
            "description": "The OAuth 2.0 configuration for the connector."
          },
          {
            "key": "auth_status",
            "valueShape": {
              "type": "enum",
              "values": [
                {
                  "value": "valid"
                },
                {
                  "value": "expired"
                }
              ]
            },
            "description": "The OAuth status for the user making the request. One of [\"valid\", \"expired\", \"\"]. Empty string (field is omitted) means the user has not authorized the connector yet."
          },
          {
            "key": "active",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "boolean"
                }
              }
            },
            "description": "Whether the connector is active or not."
          },
          {
            "key": "continue_on_failure",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "boolean"
                }
              }
            },
            "description": "Whether a chat request should continue or not if the request to this connector fails."
          }
        ]
      },
      "description": "A connector allows you to integrate data sources with the '/chat' endpoint to create grounded generations with citations to the data source.\ndocuments to help answer users."
    },
    "ListConnectorsResponse": {
      "name": "ListConnectorsResponse",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "connectors",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "list",
                "itemShape": {
                  "type": "alias",
                  "value": {
                    "type": "id",
                    "id": "Connector"
                  }
                }
              }
            }
          },
          {
            "key": "total_count",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "double"
                }
              }
            },
            "description": "Total number of connectors."
          }
        ]
      }
    },
    "CreateConnectorOAuth": {
      "name": "CreateConnectorOAuth",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "client_id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "The OAuth 2.0 client ID. This fields is encrypted at rest."
          },
          {
            "key": "client_secret",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "The OAuth 2.0 client Secret. This field is encrypted at rest and never returned in a response."
          },
          {
            "key": "authorize_url",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "The OAuth 2.0 /authorize endpoint to use when users authorize the connector."
          },
          {
            "key": "token_url",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "The OAuth 2.0 /token endpoint to use when users authorize the connector."
          },
          {
            "key": "scope",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "The OAuth scopes to request when users authorize the connector."
          }
        ]
      }
    },
    "AuthTokenType": {
      "name": "AuthTokenType",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "bearer"
          },
          {
            "value": "basic"
          },
          {
            "value": "noscheme"
          }
        ],
        "default": "noscheme"
      },
      "description": "The token_type specifies the way the token is passed in the Authorization header. Valid values are \"bearer\", \"basic\", and \"noscheme\"."
    },
    "CreateConnectorServiceAuth": {
      "name": "CreateConnectorServiceAuth",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "type",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "AuthTokenType"
              }
            }
          },
          {
            "key": "token",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "The token that will be used in the HTTP Authorization header when making requests to the connector. This field is encrypted at rest and never returned in a response."
          }
        ]
      }
    },
    "CreateConnectorRequest": {
      "name": "CreateConnectorRequest",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "name",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "A human-readable name for the connector."
          },
          {
            "key": "description",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "A description of the connector."
          },
          {
            "key": "url",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "The URL of the connector that will be used to search for documents."
          },
          {
            "key": "excludes",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "list",
                "itemShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "description": "A list of fields to exclude from the prompt (fields remain in the document)."
          },
          {
            "key": "oauth",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "CreateConnectorOAuth"
              }
            },
            "description": "The OAuth 2.0 configuration for the connector. Cannot be specified if service_auth is specified."
          },
          {
            "key": "active",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "boolean",
                  "default": true
                }
              }
            },
            "description": "Whether the connector is active or not."
          },
          {
            "key": "continue_on_failure",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "boolean",
                  "default": false
                }
              }
            },
            "description": "Whether a chat request should continue or not if the request to this connector fails."
          },
          {
            "key": "service_auth",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "CreateConnectorServiceAuth"
              }
            },
            "description": "The service to service authentication configuration for the connector. Cannot be specified if oauth is specified."
          }
        ]
      }
    },
    "CreateConnectorResponse": {
      "name": "CreateConnectorResponse",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "connector",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "Connector"
              }
            }
          }
        ]
      }
    },
    "GetConnectorResponse": {
      "name": "GetConnectorResponse",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "connector",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "Connector"
              }
            }
          }
        ]
      }
    },
    "DeleteConnectorResponse": {
      "name": "DeleteConnectorResponse",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": []
      }
    },
    "UpdateConnectorRequest": {
      "name": "UpdateConnectorRequest",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "name",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "A human-readable name for the connector."
          },
          {
            "key": "url",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "The URL of the connector that will be used to search for documents."
          },
          {
            "key": "excludes",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "list",
                "itemShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "description": "A list of fields to exclude from the prompt (fields remain in the document)."
          },
          {
            "key": "oauth",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "CreateConnectorOAuth"
              }
            },
            "description": "The OAuth 2.0 configuration for the connector. Cannot be specified if service_auth is specified."
          },
          {
            "key": "active",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "boolean",
                  "default": true
                }
              }
            }
          },
          {
            "key": "continue_on_failure",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "boolean",
                  "default": false
                }
              }
            }
          },
          {
            "key": "service_auth",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "CreateConnectorServiceAuth"
              }
            },
            "description": "The service to service authentication configuration for the connector. Cannot be specified if oauth is specified."
          }
        ]
      }
    },
    "UpdateConnectorResponse": {
      "name": "UpdateConnectorResponse",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "connector",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "Connector"
              }
            }
          }
        ]
      }
    },
    "OAuthAuthorizeResponse": {
      "name": "OAuthAuthorizeResponse",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "redirect_url",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "The OAuth 2.0 redirect url. Redirect the user to this url to authorize the connector."
          }
        ]
      }
    },
    "ConnectorLog": {
      "name": "ConnectorLog",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "Unique identifier for the connector log"
          },
          {
            "key": "connector_id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "Unique identifier for the connector"
          },
          {
            "key": "request_id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "Unique identifier for the request"
          },
          {
            "key": "user_id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "Unique identifier for the user"
          },
          {
            "key": "organization_id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "Unique identifier for the organization"
          },
          {
            "key": "created_at",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "datetime"
                }
              }
            },
            "description": "Time of connector log creation in RFC3339 format"
          },
          {
            "key": "status_code",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            },
            "description": "HTTP status code of the request"
          },
          {
            "key": "duration_millis",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            },
            "description": "Duration of the request in milliseconds"
          },
          {
            "key": "error_message",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "Error message of the request"
          }
        ]
      }
    },
    "GetConnectorsLogsResponse": {
      "name": "GetConnectorsLogsResponse",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "connector_logs",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "list",
                "itemShape": {
                  "type": "alias",
                  "value": {
                    "type": "id",
                    "id": "ConnectorLog"
                  }
                }
              }
            }
          },
          {
            "key": "total",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "double"
                }
              }
            },
            "description": "Total number of connector logs"
          }
        ]
      }
    },
    "FeedbackResponse": {
      "name": "FeedbackResponse",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": []
      }
    },
    "TokenLikelihood": {
      "name": "TokenLikelihood",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "encoded",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            },
            "description": "Tokenized text"
          },
          {
            "key": "decoded",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "Detokenized text"
          },
          {
            "key": "log_likelihood",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "double"
                }
              }
            },
            "description": "Non normalized probability of the token"
          }
        ]
      }
    },
    "LogLikelihoodResponse": {
      "name": "LogLikelihoodResponse",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "key": "prompt_tokens",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "list",
                "itemShape": {
                  "type": "alias",
                  "value": {
                    "type": "id",
                    "id": "TokenLikelihood"
                  }
                }
              }
            },
            "description": "Probabilities for tokens in the request prompt"
          },
          {
            "key": "completion_tokens",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "list",
                "itemShape": {
                  "type": "alias",
                  "value": {
                    "type": "id",
                    "id": "TokenLikelihood"
                  }
                }
              }
            },
            "description": "Probabilities for tokens in the request completion"
          },
          {
            "key": "raw_prompt_tokens",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "list",
                "itemShape": {
                  "type": "alias",
                  "value": {
                    "type": "id",
                    "id": "TokenLikelihood"
                  }
                }
              }
            },
            "description": "Probabilities for tokens in the request raw_prompt"
          },
          {
            "key": "meta",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "ApiMeta"
              }
            }
          }
        ]
      }
    },
    "Cluster": {
      "name": "Cluster",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "key": "keywords",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "list",
                "itemShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          {
            "key": "description",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "key": "size",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          },
          {
            "key": "sample_elements",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "list",
                "itemShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        ]
      }
    },
    "GetClusterJobResponse": {
      "name": "GetClusterJobResponse",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "job_id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "key": "created_at",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "datetime"
                }
              }
            },
            "description": "Time of job creation in RFC3339 format"
          },
          {
            "key": "embeddings_url",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "The input file URL used for the job"
          },
          {
            "key": "input_dataset_id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "The input dataset ID used for the job"
          },
          {
            "key": "min_cluster_size",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            },
            "description": "The parameter used in the job creation. Please refer to the job creation endpoint for more details"
          },
          {
            "key": "n_neighbors",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            },
            "description": "The parameter used in the job creation. Please refer to the job creation endpoint for more details"
          },
          {
            "key": "is_deterministic",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "boolean"
                }
              }
            },
            "description": "The parameter used in the job creation. Please refer to the job creation endpoint for more details"
          },
          {
            "key": "status",
            "valueShape": {
              "type": "enum",
              "values": [
                {
                  "value": "unknown"
                },
                {
                  "value": "processing"
                },
                {
                  "value": "failed"
                },
                {
                  "value": "complete"
                },
                {
                  "value": "queued"
                }
              ]
            }
          },
          {
            "key": "is_final_state",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "boolean"
                }
              }
            },
            "description": "A boolean indicating whether the job is in a final state, whether completed or failed"
          },
          {
            "key": "output_clusters_url",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "The output file URL for the clusters (signed url that expires)"
          },
          {
            "key": "output_outliers_url",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "The output file URL for the outliers (signed url that expires)"
          },
          {
            "key": "clusters",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "list",
                "itemShape": {
                  "type": "alias",
                  "value": {
                    "type": "id",
                    "id": "Cluster"
                  }
                }
              }
            },
            "description": "The list of cluster summaries for the job"
          },
          {
            "key": "error",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "key": "meta",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "ApiMeta"
              }
            }
          }
        ]
      },
      "description": "Response for getting a cluster job."
    },
    "ListClusterJobsResponse": {
      "name": "ListClusterJobsResponse",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "jobs",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "list",
                "itemShape": {
                  "type": "alias",
                  "value": {
                    "type": "id",
                    "id": "GetClusterJobResponse"
                  }
                }
              }
            }
          },
          {
            "key": "total_count",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          },
          {
            "key": "meta",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "ApiMeta"
              }
            }
          }
        ]
      }
    },
    "CreateClusterJobRequest": {
      "name": "CreateClusterJobRequest",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "embeddings_url",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "key": "input_dataset_id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "key": "min_cluster_size",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "integer",
                  "minimum": 1,
                  "default": 10
                }
              }
            },
            "description": "Defaults to `10`. Parameter for HDBSCAN. Only clusters with this number of elements will be returned with a positive cluster number."
          },
          {
            "key": "n_neighbors",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "integer",
                  "minimum": 2,
                  "maximum": 100,
                  "default": 15
                }
              }
            },
            "description": "Parameter for UMAP. A scalar governing how to balance global vs local structure in the data."
          },
          {
            "key": "is_deterministic",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "boolean",
                  "default": true
                }
              }
            },
            "description": "Parameter for UMAP. A boolean governing whether the embeddings from UMAP (that will be clustered with HDBSCAN) are deterministic."
          },
          {
            "key": "generate_descriptions",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "boolean"
                }
              }
            }
          }
        ]
      }
    },
    "CreateClusterJobResponse": {
      "name": "CreateClusterJobResponse",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "job_id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      },
      "description": "Response for creating a cluster job."
    },
    "UpdateClusterJobRequest": {
      "name": "UpdateClusterJobRequest",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "status",
            "valueShape": {
              "type": "enum",
              "values": [
                {
                  "value": "unknown"
                },
                {
                  "value": "processing"
                },
                {
                  "value": "failed"
                },
                {
                  "value": "complete"
                },
                {
                  "value": "queued"
                }
              ]
            }
          },
          {
            "key": "clusters",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "list",
                "itemShape": {
                  "type": "alias",
                  "value": {
                    "type": "id",
                    "id": "Cluster"
                  }
                }
              }
            }
          },
          {
            "key": "output_clusters_gs_path",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "key": "output_outliers_gs_path",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "key": "error",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "key": "input_tracking_metrics",
            "valueShape": {
              "type": "object",
              "extends": [],
              "properties": []
            }
          },
          {
            "key": "output_tracking_metrics",
            "valueShape": {
              "type": "object",
              "extends": [],
              "properties": []
            }
          }
        ]
      }
    },
    "UpdateClusterJobResponse": {
      "name": "UpdateClusterJobResponse",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "job_id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      },
      "description": "Response for updating a cluster job."
    },
    "CompatibleEndpoint": {
      "name": "CompatibleEndpoint",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "chat"
          },
          {
            "value": "embed"
          },
          {
            "value": "classify"
          },
          {
            "value": "summarize"
          },
          {
            "value": "rerank"
          },
          {
            "value": "rate"
          },
          {
            "value": "generate"
          }
        ]
      },
      "description": "One of the Cohere API endpoints that the model can be used with."
    },
    "GetModelResponse": {
      "name": "GetModelResponse",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "name",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "Specify this name in the `model` parameter of API requests to use your chosen model."
          },
          {
            "key": "endpoints",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "list",
                "itemShape": {
                  "type": "alias",
                  "value": {
                    "type": "id",
                    "id": "CompatibleEndpoint"
                  }
                }
              }
            },
            "description": "The API endpoints that the model is compatible with."
          },
          {
            "key": "finetuned",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "boolean"
                }
              }
            },
            "description": "Whether the model has been fine-tuned or not."
          },
          {
            "key": "context_length",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "double"
                }
              }
            },
            "description": "The maximum number of tokens that the model can process in a single request. Note that not all of these tokens are always available due to special tokens and preambles that Cohere has added by default."
          },
          {
            "key": "tokenizer_url",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "Public URL to the tokenizer's configuration file."
          },
          {
            "key": "default_endpoints",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "list",
                "itemShape": {
                  "type": "alias",
                  "value": {
                    "type": "id",
                    "id": "CompatibleEndpoint"
                  }
                }
              }
            },
            "description": "The API endpoints that the model is default to."
          }
        ]
      },
      "description": "Contains information about the model and which API endpoints it can be used with."
    },
    "ListModelsResponse": {
      "name": "ListModelsResponse",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "models",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "list",
                "itemShape": {
                  "type": "alias",
                  "value": {
                    "type": "id",
                    "id": "GetModelResponse"
                  }
                }
              }
            }
          },
          {
            "key": "next_page_token",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "A token to retrieve the next page of results. Provide in the page_token parameter of the next request."
          }
        ]
      }
    },
    "BaseType": {
      "name": "BaseType",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "BASE_TYPE_UNSPECIFIED"
          },
          {
            "value": "BASE_TYPE_GENERATIVE"
          },
          {
            "value": "BASE_TYPE_CLASSIFICATION"
          },
          {
            "value": "BASE_TYPE_RERANK"
          },
          {
            "value": "BASE_TYPE_CHAT"
          }
        ],
        "default": "BASE_TYPE_UNSPECIFIED"
      },
      "description": "The possible types of fine-tuned models.\n\n - BASE_TYPE_UNSPECIFIED: Unspecified model.\n - BASE_TYPE_GENERATIVE: Deprecated: Generative model.\n - BASE_TYPE_CLASSIFICATION: Classification model.\n - BASE_TYPE_RERANK: Rerank model.\n - BASE_TYPE_CHAT: Chat model."
    },
    "Strategy": {
      "name": "Strategy",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "STRATEGY_UNSPECIFIED"
          },
          {
            "value": "STRATEGY_VANILLA"
          },
          {
            "value": "STRATEGY_TFEW"
          }
        ],
        "default": "STRATEGY_UNSPECIFIED"
      },
      "description": "The possible strategy used to serve a fine-tuned models.\n\n - STRATEGY_UNSPECIFIED: Unspecified strategy.\n - STRATEGY_VANILLA: Deprecated: Serve the fine-tuned model on a dedicated GPU.\n - STRATEGY_TFEW: Deprecated: Serve the fine-tuned model on a shared GPU."
    },
    "BaseModel": {
      "name": "BaseModel",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "name",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "The name of the base model."
          },
          {
            "key": "version",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "read-only. The version of the base model."
          },
          {
            "key": "base_type",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "BaseType"
              }
            },
            "description": "The type of the base model."
          },
          {
            "key": "strategy",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "Strategy"
              }
            },
            "description": "Deprecated: The fine-tuning strategy."
          }
        ]
      },
      "description": "The base model used for fine-tuning."
    },
    "LoraTargetModules": {
      "name": "LoraTargetModules",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "LORA_TARGET_MODULES_UNSPECIFIED"
          },
          {
            "value": "LORA_TARGET_MODULES_QV"
          },
          {
            "value": "LORA_TARGET_MODULES_QKVO"
          },
          {
            "value": "LORA_TARGET_MODULES_QKVO_FFN"
          }
        ],
        "default": "LORA_TARGET_MODULES_UNSPECIFIED"
      },
      "description": "The possible combinations of LoRA modules to target.\n\n - LORA_TARGET_MODULES_UNSPECIFIED: Unspecified LoRA target modules.\n - LORA_TARGET_MODULES_QV: LoRA adapts the query and value matrices in transformer attention layers.\n - LORA_TARGET_MODULES_QKVO: LoRA adapts query, key, value, and output matrices in attention layers.\n - LORA_TARGET_MODULES_QKVO_FFN: LoRA adapts attention projection matrices and feed-forward networks (FFN)."
    },
    "Hyperparameters": {
      "name": "Hyperparameters",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "early_stopping_patience",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            },
            "description": "Stops training if the loss metric does not improve beyond the value of\n`early_stopping_threshold` after this many times of evaluation."
          },
          {
            "key": "early_stopping_threshold",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "double"
                }
              }
            },
            "description": "How much the loss must improve to prevent early stopping."
          },
          {
            "key": "train_batch_size",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            },
            "description": "The batch size is the number of training examples included in a single\ntraining pass."
          },
          {
            "key": "train_epochs",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            },
            "description": "The number of epochs to train for."
          },
          {
            "key": "learning_rate",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "double"
                }
              }
            },
            "description": "The learning rate to be used during training."
          },
          {
            "key": "lora_alpha",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            },
            "description": "Controls the scaling factor for LoRA updates. Higher values make the\nupdates more impactful."
          },
          {
            "key": "lora_rank",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            },
            "description": "Specifies the rank for low-rank matrices. Lower ranks reduce parameters\nbut may limit model flexibility."
          },
          {
            "key": "lora_target_modules",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "LoraTargetModules"
              }
            },
            "description": "The combination of LoRA modules to target."
          }
        ]
      },
      "description": "The fine-tuning hyperparameters."
    },
    "WandbConfig": {
      "name": "WandbConfig",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "project",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "The WandB project name to be used during training."
          },
          {
            "key": "api_key",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "The WandB API key to be used during training."
          },
          {
            "key": "entity",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "The WandB entity name to be used during training."
          }
        ]
      },
      "description": "The Weights & Biases configuration."
    },
    "Settings": {
      "name": "Settings",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "base_model",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "BaseModel"
              }
            },
            "description": "The base model to fine-tune."
          },
          {
            "key": "dataset_id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "The data used for training and evaluating the fine-tuned model."
          },
          {
            "key": "hyperparameters",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "Hyperparameters"
              }
            },
            "description": "Fine-tuning hyper-parameters."
          },
          {
            "key": "multi_label",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "boolean"
                }
              }
            },
            "description": "read-only. Whether the model is single-label or multi-label (only for classification)."
          },
          {
            "key": "wandb",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "WandbConfig"
              }
            },
            "description": "The Weights & Biases configuration (Chat fine-tuning only)."
          }
        ]
      },
      "description": "The configuration used for fine-tuning."
    },
    "Status": {
      "name": "Status",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "STATUS_UNSPECIFIED"
          },
          {
            "value": "STATUS_FINETUNING"
          },
          {
            "value": "STATUS_DEPLOYING_API"
          },
          {
            "value": "STATUS_READY"
          },
          {
            "value": "STATUS_FAILED"
          },
          {
            "value": "STATUS_DELETED"
          },
          {
            "value": "STATUS_TEMPORARILY_OFFLINE"
          },
          {
            "value": "STATUS_PAUSED"
          },
          {
            "value": "STATUS_QUEUED"
          }
        ],
        "default": "STATUS_UNSPECIFIED"
      },
      "description": "The possible stages of a fine-tuned model life-cycle.\n\n - STATUS_UNSPECIFIED: Unspecified status.\n - STATUS_FINETUNING: The fine-tuned model is being fine-tuned.\n - STATUS_DEPLOYING_API: Deprecated: The fine-tuned model is being deployed.\n - STATUS_READY: The fine-tuned model is ready to receive requests.\n - STATUS_FAILED: The fine-tuned model failed.\n - STATUS_DELETED: The fine-tuned model was deleted.\n - STATUS_TEMPORARILY_OFFLINE: Deprecated: The fine-tuned model is temporarily unavailable.\n - STATUS_PAUSED: Deprecated: The fine-tuned model is paused (Vanilla only).\n - STATUS_QUEUED: The fine-tuned model is queued for training."
    },
    "FinetunedModel": {
      "name": "FinetunedModel",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "read-only. FinetunedModel ID."
          },
          {
            "key": "name",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "FinetunedModel name (e.g. `foobar`)."
          },
          {
            "key": "creator_id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "read-only. User ID of the creator."
          },
          {
            "key": "organization_id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "read-only. Organization ID."
          },
          {
            "key": "settings",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "Settings"
              }
            },
            "description": "FinetunedModel settings such as dataset, hyperparameters..."
          },
          {
            "key": "status",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "Status"
              }
            },
            "description": "read-only. Current stage in the life-cycle of the fine-tuned model."
          },
          {
            "key": "created_at",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "datetime"
                }
              }
            },
            "description": "read-only. Creation timestamp."
          },
          {
            "key": "updated_at",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "datetime"
                }
              }
            },
            "description": "read-only. Latest update timestamp."
          },
          {
            "key": "completed_at",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "datetime"
                }
              }
            },
            "description": "read-only. Timestamp for the completed fine-tuning."
          },
          {
            "key": "last_used",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "datetime"
                }
              }
            },
            "description": "read-only. Deprecated: Timestamp for the latest request to this fine-tuned model."
          }
        ]
      },
      "description": "This resource represents a fine-tuned model."
    },
    "ListFinetunedModelsResponse": {
      "name": "ListFinetunedModelsResponse",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "finetuned_models",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "list",
                "itemShape": {
                  "type": "alias",
                  "value": {
                    "type": "id",
                    "id": "FinetunedModel"
                  }
                }
              }
            },
            "description": "List of fine-tuned models matching the request."
          },
          {
            "key": "next_page_token",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "Pagination token to retrieve the next page of results. If the value is \"\",\nit means no further results for the request."
          },
          {
            "key": "total_size",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            },
            "description": "Total count of results."
          }
        ]
      },
      "description": "Response to a request to list fine-tuned models."
    },
    "Error": {
      "name": "Error",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "message",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "A developer-facing error message."
          }
        ]
      },
      "description": "Error is the response for any unsuccessful event."
    },
    "CreateFinetunedModelResponse": {
      "name": "CreateFinetunedModelResponse",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "finetuned_model",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "FinetunedModel"
              }
            },
            "description": "Information about the fine-tuned model."
          }
        ]
      },
      "description": "Response to request to create a fine-tuned model."
    },
    "GetFinetunedModelResponse": {
      "name": "GetFinetunedModelResponse",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "finetuned_model",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "FinetunedModel"
              }
            },
            "description": "Information about the fine-tuned model."
          }
        ]
      },
      "description": "Response to a request to get a fine-tuned model."
    },
    "DeleteFinetunedModelResponse": {
      "name": "DeleteFinetunedModelResponse",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": []
      },
      "description": "Response to request to delete a fine-tuned model."
    },
    "UpdateFinetunedModelResponse": {
      "name": "UpdateFinetunedModelResponse",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "finetuned_model",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "FinetunedModel"
              }
            },
            "description": "Information about the fine-tuned model."
          }
        ]
      },
      "description": "Response to a request to update a fine-tuned model."
    },
    "Event": {
      "name": "Event",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "user_id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "ID of the user who initiated the event. Empty if initiated by the system."
          },
          {
            "key": "status",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "Status"
              }
            },
            "description": "Status of the fine-tuned model."
          },
          {
            "key": "created_at",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "datetime"
                }
              }
            },
            "description": "Timestamp when the event happened."
          }
        ]
      },
      "description": "A change in status of a fine-tuned model."
    },
    "ListEventsResponse": {
      "name": "ListEventsResponse",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "events",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "list",
                "itemShape": {
                  "type": "alias",
                  "value": {
                    "type": "id",
                    "id": "Event"
                  }
                }
              }
            },
            "description": "List of events for the fine-tuned model."
          },
          {
            "key": "next_page_token",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "Pagination token to retrieve the next page of results. If the value is \"\",\nit means no further results for the request."
          },
          {
            "key": "total_size",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            },
            "description": "Total count of results."
          }
        ]
      },
      "description": "Response to a request to list events of a fine-tuned model."
    },
    "TrainingStepMetrics": {
      "name": "TrainingStepMetrics",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "created_at",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "datetime"
                }
              }
            },
            "description": "Creation timestamp."
          },
          {
            "key": "step_number",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            },
            "description": "Step number."
          },
          {
            "key": "metrics",
            "valueShape": {
              "type": "object",
              "extends": [],
              "properties": [],
              "extraProperties": {
                "type": "primitive",
                "value": {
                  "type": "double"
                }
              }
            },
            "description": "Map of names and values for each evaluation metrics."
          }
        ]
      },
      "description": "The evaluation metrics at a given step of the training of a fine-tuned model."
    },
    "ListTrainingStepMetricsResponse": {
      "name": "ListTrainingStepMetricsResponse",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "step_metrics",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "list",
                "itemShape": {
                  "type": "alias",
                  "value": {
                    "type": "id",
                    "id": "TrainingStepMetrics"
                  }
                }
              }
            },
            "description": "The metrics for each step the evaluation was run on."
          },
          {
            "key": "next_page_token",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "Pagination token to retrieve the next page of results. If the value is \"\",\nit means no further results for the request."
          }
        ]
      },
      "description": "Response to a request to list training-step metrics of a fine-tuned model."
    }
  },
  "subpackages": {},
  "auths": {}
}