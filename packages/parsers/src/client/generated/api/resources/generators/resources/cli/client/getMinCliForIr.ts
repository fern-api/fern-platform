/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as FernRegistry from "../../../../../index";
import * as core from "../../../../../../core";

export type Error =
    | FernRegistry.generators.cli.getMinCliForIr.Error.NoValidClisFoundError
    | FernRegistry.generators.cli.getMinCliForIr.Error._Unknown;

export declare namespace Error {
    interface NoValidClisFoundError {
        error: "NoValidClisFoundError";
    }

    interface _Unknown {
        error: void;
        content: core.Fetcher.Error;
    }

    interface _Visitor<_Result> {
        noValidClisFoundError: () => _Result;
        _other: (value: core.Fetcher.Error) => _Result;
    }
}

export const Error = {
    noValidClisFoundError: (): FernRegistry.generators.cli.getMinCliForIr.Error.NoValidClisFoundError => {
        return {
            error: "NoValidClisFoundError",
        };
    },

    _unknown: (fetcherError: core.Fetcher.Error): FernRegistry.generators.cli.getMinCliForIr.Error._Unknown => {
        return {
            error: undefined,
            content: fetcherError,
        };
    },

    _visit: <_Result>(
        value: FernRegistry.generators.cli.getMinCliForIr.Error,
        visitor: FernRegistry.generators.cli.getMinCliForIr.Error._Visitor<_Result>
    ): _Result => {
        switch (value.error) {
            case "NoValidClisFoundError":
                return visitor.noValidClisFoundError();
            default:
                return visitor._other(value as any);
        }
    },
} as const;
