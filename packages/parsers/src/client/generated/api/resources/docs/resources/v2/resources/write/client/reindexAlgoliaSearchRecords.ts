/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as FernRegistry from "../../../../../../../index";
import * as core from "../../../../../../../../core";

export type Error =
    | FernRegistry.docs.v2.write.reindexAlgoliaSearchRecords.Error.DocsNotFoundError
    | FernRegistry.docs.v2.write.reindexAlgoliaSearchRecords.Error.ReindexNotAllowedError
    | FernRegistry.docs.v2.write.reindexAlgoliaSearchRecords.Error._Unknown;

export declare namespace Error {
    interface DocsNotFoundError {
        error: "DocsNotFoundError";
    }

    interface ReindexNotAllowedError {
        error: "ReindexNotAllowedError";
    }

    interface _Unknown {
        error: void;
        content: core.Fetcher.Error;
    }

    interface _Visitor<_Result> {
        docsNotFoundError: () => _Result;
        reindexNotAllowedError: () => _Result;
        _other: (value: core.Fetcher.Error) => _Result;
    }
}

export const Error = {
    docsNotFoundError: (): FernRegistry.docs.v2.write.reindexAlgoliaSearchRecords.Error.DocsNotFoundError => {
        return {
            error: "DocsNotFoundError",
        };
    },

    reindexNotAllowedError: (): FernRegistry.docs.v2.write.reindexAlgoliaSearchRecords.Error.ReindexNotAllowedError => {
        return {
            error: "ReindexNotAllowedError",
        };
    },

    _unknown: (
        fetcherError: core.Fetcher.Error
    ): FernRegistry.docs.v2.write.reindexAlgoliaSearchRecords.Error._Unknown => {
        return {
            error: undefined,
            content: fetcherError,
        };
    },

    _visit: <_Result>(
        value: FernRegistry.docs.v2.write.reindexAlgoliaSearchRecords.Error,
        visitor: FernRegistry.docs.v2.write.reindexAlgoliaSearchRecords.Error._Visitor<_Result>
    ): _Result => {
        switch (value.error) {
            case "DocsNotFoundError":
                return visitor.docsNotFoundError();
            case "ReindexNotAllowedError":
                return visitor.reindexNotAllowedError();
            default:
                return visitor._other(value as any);
        }
    },
} as const;
