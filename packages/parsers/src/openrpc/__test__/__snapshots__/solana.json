{
  "id": "test-uuid-replacement",
  "types": {},
  "endpoints": {
    "getAccountInfo": {
      "protocol": {
        "type": "openrpc",
        "methodName": "getAccountInfo"
      },
      "id": "getAccountInfo",
      "displayName": "getAccountInfo",
      "method": "POST",
      "path": [
        {
          "type": "pathParameter",
          "value": "apiKey"
        }
      ],
      "pathParameters": [
        {
          "key": "apiKey",
          "valueShape": {
            "type": "alias",
            "value": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          }
        }
      ],
      "queryParameters": [],
      "requests": [
        {
          "contentType": "application/json",
          "body": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "Pubkey",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                "description": "Pubkey of the account to query."
              },
              {
                "key": "Configuration",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "object",
                      "extends": [],
                      "properties": [
                        {
                          "key": "commitment",
                          "valueShape": {
                            "type": "enum",
                            "values": [
                              {
                                "value": "processed"
                              },
                              {
                                "value": "confirmed"
                              },
                              {
                                "value": "finalized"
                              }
                            ]
                          },
                          "description": "Configures the state commitment for querying."
                        },
                        {
                          "key": "encoding",
                          "valueShape": {
                            "type": "enum",
                            "values": [
                              {
                                "value": "base58"
                              },
                              {
                                "value": "base64"
                              },
                              {
                                "value": "base64+zstd"
                              },
                              {
                                "value": "jsonParsed"
                              }
                            ]
                          },
                          "description": "Encoding format for account data."
                        },
                        {
                          "key": "dataSlice",
                          "valueShape": {
                            "type": "object",
                            "extends": [],
                            "properties": [
                              {
                                "key": "length",
                                "valueShape": {
                                  "type": "alias",
                                  "value": {
                                    "type": "primitive",
                                    "value": {
                                      "type": "integer"
                                    }
                                  }
                                },
                                "description": "Number of bytes to return."
                              },
                              {
                                "key": "offset",
                                "valueShape": {
                                  "type": "alias",
                                  "value": {
                                    "type": "primitive",
                                    "value": {
                                      "type": "integer"
                                    }
                                  }
                                },
                                "description": "Byte offset from which to start reading."
                              }
                            ]
                          }
                        },
                        {
                          "key": "minContextSlot",
                          "valueShape": {
                            "type": "alias",
                            "value": {
                              "type": "primitive",
                              "value": {
                                "type": "integer"
                              }
                            }
                          },
                          "description": "The minimum slot that the request can be evaluated at."
                        }
                      ]
                    }
                  }
                },
                "description": "Optional configuration object for additional settings."
              }
            ]
          }
        }
      ],
      "responses": [
        {
          "statusCode": 200,
          "body": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "lamports",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                "description": "Number of lamports assigned to this account."
              },
              {
                "key": "owner",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                "description": "Program owner of this account."
              },
              {
                "key": "data",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "list",
                    "itemShape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "description": "Account data in the specified encoding format."
              },
              {
                "key": "executable",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "boolean"
                    }
                  }
                },
                "description": "Indicates if the account contains a program."
              },
              {
                "key": "rentEpoch",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                "description": "The epoch at which this account will next owe rent."
              },
              {
                "key": "size",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                "description": "The data size of the account."
              }
            ]
          }
        }
      ],
      "errors": [],
      "examples": [
        {
          "name": "Example",
          "path": "",
          "pathParameters": {},
          "queryParameters": {},
          "headers": {},
          "requestBody": {
            "type": "json",
            "value": {
              "Pubkey": "string",
              "Configuration": {
                "commitment": "processed",
                "encoding": "base58",
                "dataSlice": {
                  "length": 0,
                  "offset": 0
                },
                "minContextSlot": 0
              }
            }
          },
          "responseStatusCode": 200,
          "responseBody": {
            "type": "json",
            "value": {
              "lamports": 0,
              "owner": "string",
              "data": [
                "string"
              ],
              "executable": false,
              "rentEpoch": 0,
              "size": 0
            }
          }
        }
      ],
      "description": "Returns all information associated with the account of provided Pubkey.",
      "operationId": "getAccountInfo",
      "environments": [],
      "requestHeaders": [],
      "responseHeaders": []
    },
    "getBalance": {
      "protocol": {
        "type": "openrpc",
        "methodName": "getBalance"
      },
      "id": "getBalance",
      "displayName": "getBalance",
      "method": "POST",
      "path": [
        {
          "type": "pathParameter",
          "value": "apiKey"
        }
      ],
      "pathParameters": [
        {
          "key": "apiKey",
          "valueShape": {
            "type": "alias",
            "value": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          }
        }
      ],
      "queryParameters": [],
      "requests": [
        {
          "contentType": "application/json",
          "body": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "Pubkey",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                "description": "Pubkey of the account to query."
              },
              {
                "key": "Configuration",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "object",
                      "extends": [],
                      "properties": [
                        {
                          "key": "commitment",
                          "valueShape": {
                            "type": "enum",
                            "values": [
                              {
                                "value": "processed"
                              },
                              {
                                "value": "confirmed"
                              },
                              {
                                "value": "finalized"
                              }
                            ]
                          },
                          "description": "Configures the state commitment for querying."
                        },
                        {
                          "key": "minContextSlot",
                          "valueShape": {
                            "type": "alias",
                            "value": {
                              "type": "primitive",
                              "value": {
                                "type": "integer"
                              }
                            }
                          },
                          "description": "The minimum slot that the request can be evaluated at."
                        }
                      ]
                    }
                  }
                },
                "description": "Optional configuration object containing additional settings."
              }
            ]
          }
        }
      ],
      "responses": [
        {
          "statusCode": 200,
          "body": {
            "type": "alias",
            "value": {
              "type": "primitive",
              "value": {
                "type": "integer"
              }
            }
          }
        }
      ],
      "errors": [],
      "examples": [
        {
          "name": "Example",
          "path": "",
          "pathParameters": {},
          "queryParameters": {},
          "headers": {},
          "requestBody": {
            "type": "json",
            "value": {
              "Pubkey": "string",
              "Configuration": {
                "commitment": "processed",
                "minContextSlot": 0
              }
            }
          },
          "responseStatusCode": 200,
          "responseBody": {
            "type": "json",
            "value": 0
          }
        }
      ],
      "description": "Returns the lamport balance of the account of the provided Pubkey.",
      "operationId": "getBalance",
      "environments": [],
      "requestHeaders": [],
      "responseHeaders": []
    },
    "getBlock": {
      "protocol": {
        "type": "openrpc",
        "methodName": "getBlock"
      },
      "id": "getBlock",
      "displayName": "getBlock",
      "method": "POST",
      "path": [
        {
          "type": "pathParameter",
          "value": "apiKey"
        }
      ],
      "pathParameters": [
        {
          "key": "apiKey",
          "valueShape": {
            "type": "alias",
            "value": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          }
        }
      ],
      "queryParameters": [],
      "requests": [
        {
          "contentType": "application/json",
          "body": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "slot",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                "description": "Slot number as a u64 integer."
              },
              {
                "key": "Configuration",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "object",
                      "extends": [],
                      "properties": [
                        {
                          "key": "commitment",
                          "valueShape": {
                            "type": "enum",
                            "values": [
                              {
                                "value": "processed"
                              },
                              {
                                "value": "confirmed"
                              },
                              {
                                "value": "finalized"
                              }
                            ],
                            "default": "finalized"
                          },
                          "description": "Configures the state commitment for querying."
                        },
                        {
                          "key": "encoding",
                          "valueShape": {
                            "type": "enum",
                            "values": [
                              {
                                "value": "json"
                              },
                              {
                                "value": "jsonParsed"
                              },
                              {
                                "value": "base58"
                              },
                              {
                                "value": "base64"
                              }
                            ],
                            "default": "json"
                          },
                          "description": "Encoding format for transactions."
                        },
                        {
                          "key": "transactionDetails",
                          "valueShape": {
                            "type": "enum",
                            "values": [
                              {
                                "value": "full"
                              },
                              {
                                "value": "accounts"
                              },
                              {
                                "value": "signatures"
                              },
                              {
                                "value": "none"
                              }
                            ],
                            "default": "full"
                          },
                          "description": "Level of transaction detail to return."
                        },
                        {
                          "key": "maxSupportedTransactionVersion",
                          "valueShape": {
                            "type": "alias",
                            "value": {
                              "type": "primitive",
                              "value": {
                                "type": "integer"
                              }
                            }
                          },
                          "description": "Max transaction version to return."
                        },
                        {
                          "key": "rewards",
                          "valueShape": {
                            "type": "alias",
                            "value": {
                              "type": "primitive",
                              "value": {
                                "type": "boolean",
                                "default": true
                              }
                            }
                          },
                          "description": "Include rewards array if true."
                        }
                      ]
                    }
                  }
                },
                "description": "Optional configuration object containing additional settings."
              }
            ]
          }
        }
      ],
      "responses": [
        {
          "statusCode": 200,
          "body": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "blockhash",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                "description": "Blockhash of this block."
              },
              {
                "key": "previousBlockhash",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                "description": "Blockhash of the parent block."
              },
              {
                "key": "parentSlot",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                "description": "Slot index of the parent block."
              },
              {
                "key": "transactions",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "list",
                    "itemShape": {
                      "type": "object",
                      "extends": [],
                      "properties": [
                        {
                          "key": "slot",
                          "valueShape": {
                            "type": "alias",
                            "value": {
                              "type": "primitive",
                              "value": {
                                "type": "integer"
                              }
                            }
                          },
                          "description": "The slot this transaction was processed in."
                        },
                        {
                          "key": "transaction",
                          "valueShape": {
                            "type": "object",
                            "extends": [],
                            "properties": [
                              {
                                "key": "signatures",
                                "valueShape": {
                                  "type": "alias",
                                  "value": {
                                    "type": "list",
                                    "itemShape": {
                                      "type": "alias",
                                      "value": {
                                        "type": "primitive",
                                        "value": {
                                          "type": "string"
                                        }
                                      }
                                    }
                                  }
                                },
                                "description": "An array of signatures applied to the transaction."
                              },
                              {
                                "key": "message",
                                "valueShape": {
                                  "type": "object",
                                  "extends": [],
                                  "properties": [
                                    {
                                      "key": "accountKeys",
                                      "valueShape": {
                                        "type": "alias",
                                        "value": {
                                          "type": "list",
                                          "itemShape": {
                                            "type": "alias",
                                            "value": {
                                              "type": "primitive",
                                              "value": {
                                                "type": "string"
                                              }
                                            }
                                          }
                                        }
                                      },
                                      "description": "An array of account keys used by the transaction."
                                    },
                                    {
                                      "key": "header",
                                      "valueShape": {
                                        "type": "object",
                                        "extends": [],
                                        "properties": [
                                          {
                                            "key": "numRequiredSignatures",
                                            "valueShape": {
                                              "type": "alias",
                                              "value": {
                                                "type": "primitive",
                                                "value": {
                                                  "type": "integer"
                                                }
                                              }
                                            },
                                            "description": "The number of signatures required for the transaction."
                                          },
                                          {
                                            "key": "numReadonlySignedAccounts",
                                            "valueShape": {
                                              "type": "alias",
                                              "value": {
                                                "type": "primitive",
                                                "value": {
                                                  "type": "integer"
                                                }
                                              }
                                            },
                                            "description": "Number of read-only signed accounts."
                                          },
                                          {
                                            "key": "numReadonlyUnsignedAccounts",
                                            "valueShape": {
                                              "type": "alias",
                                              "value": {
                                                "type": "primitive",
                                                "value": {
                                                  "type": "integer"
                                                }
                                              }
                                            },
                                            "description": "Number of read-only unsigned accounts."
                                          }
                                        ]
                                      }
                                    },
                                    {
                                      "key": "instructions",
                                      "valueShape": {
                                        "type": "alias",
                                        "value": {
                                          "type": "list",
                                          "itemShape": {
                                            "type": "object",
                                            "extends": [],
                                            "properties": [
                                              {
                                                "key": "accounts",
                                                "valueShape": {
                                                  "type": "alias",
                                                  "value": {
                                                    "type": "list",
                                                    "itemShape": {
                                                      "type": "alias",
                                                      "value": {
                                                        "type": "primitive",
                                                        "value": {
                                                          "type": "integer"
                                                        }
                                                      }
                                                    }
                                                  }
                                                },
                                                "description": "List of account indices to be passed to the program."
                                              },
                                              {
                                                "key": "data",
                                                "valueShape": {
                                                  "type": "alias",
                                                  "value": {
                                                    "type": "primitive",
                                                    "value": {
                                                      "type": "string"
                                                    }
                                                  }
                                                },
                                                "description": "The program input data encoded as a base-58 string."
                                              },
                                              {
                                                "key": "programIdIndex",
                                                "valueShape": {
                                                  "type": "alias",
                                                  "value": {
                                                    "type": "primitive",
                                                    "value": {
                                                      "type": "integer"
                                                    }
                                                  }
                                                },
                                                "description": "Index into the message.accountKeys array indicating the program account."
                                              }
                                            ]
                                          }
                                        }
                                      }
                                    },
                                    {
                                      "key": "recentBlockhash",
                                      "valueShape": {
                                        "type": "alias",
                                        "value": {
                                          "type": "primitive",
                                          "value": {
                                            "type": "string"
                                          }
                                        }
                                      },
                                      "description": "The recent blockhash used by the transaction."
                                    }
                                  ]
                                }
                              }
                            ]
                          },
                          "description": "The transaction details, either in JSON format or encoded binary data, depending on the encoding parameter."
                        },
                        {
                          "key": "blockTime",
                          "valueShape": {
                            "type": "alias",
                            "value": {
                              "type": "nullable",
                              "shape": {
                                "type": "alias",
                                "value": {
                                  "type": "primitive",
                                  "value": {
                                    "type": "integer"
                                  }
                                }
                              }
                            }
                          },
                          "description": "Estimated production time as a Unix timestamp. Null if not available."
                        },
                        {
                          "key": "meta",
                          "valueShape": {
                            "type": "alias",
                            "value": {
                              "type": "nullable",
                              "shape": {
                                "type": "object",
                                "extends": [],
                                "properties": [
                                  {
                                    "key": "err",
                                    "valueShape": {
                                      "type": "alias",
                                      "value": {
                                        "type": "nullable",
                                        "shape": {
                                          "type": "object",
                                          "extends": [],
                                          "properties": []
                                        }
                                      }
                                    },
                                    "description": "Error if the transaction failed, null if it succeeded."
                                  },
                                  {
                                    "key": "fee",
                                    "valueShape": {
                                      "type": "alias",
                                      "value": {
                                        "type": "primitive",
                                        "value": {
                                          "type": "integer"
                                        }
                                      }
                                    },
                                    "description": "Fee charged for this transaction."
                                  },
                                  {
                                    "key": "preBalances",
                                    "valueShape": {
                                      "type": "alias",
                                      "value": {
                                        "type": "list",
                                        "itemShape": {
                                          "type": "alias",
                                          "value": {
                                            "type": "primitive",
                                            "value": {
                                              "type": "integer"
                                            }
                                          }
                                        }
                                      }
                                    },
                                    "description": "Array of u64 account balances before the transaction."
                                  },
                                  {
                                    "key": "postBalances",
                                    "valueShape": {
                                      "type": "alias",
                                      "value": {
                                        "type": "list",
                                        "itemShape": {
                                          "type": "alias",
                                          "value": {
                                            "type": "primitive",
                                            "value": {
                                              "type": "integer"
                                            }
                                          }
                                        }
                                      }
                                    },
                                    "description": "Array of u64 account balances after the transaction."
                                  },
                                  {
                                    "key": "innerInstructions",
                                    "valueShape": {
                                      "type": "alias",
                                      "value": {
                                        "type": "list",
                                        "itemShape": {
                                          "type": "object",
                                          "extends": [],
                                          "properties": [
                                            {
                                              "key": "index",
                                              "valueShape": {
                                                "type": "alias",
                                                "value": {
                                                  "type": "primitive",
                                                  "value": {
                                                    "type": "integer"
                                                  }
                                                }
                                              },
                                              "description": "Index of the instruction in the transaction."
                                            },
                                            {
                                              "key": "instructions",
                                              "valueShape": {
                                                "type": "alias",
                                                "value": {
                                                  "type": "list",
                                                  "itemShape": {
                                                    "type": "object",
                                                    "extends": [],
                                                    "properties": [
                                                      {
                                                        "key": "programId",
                                                        "valueShape": {
                                                          "type": "alias",
                                                          "value": {
                                                            "type": "primitive",
                                                            "value": {
                                                              "type": "string"
                                                            }
                                                          }
                                                        },
                                                        "description": "Program ID invoked by this instruction."
                                                      },
                                                      {
                                                        "key": "accounts",
                                                        "valueShape": {
                                                          "type": "alias",
                                                          "value": {
                                                            "type": "list",
                                                            "itemShape": {
                                                              "type": "alias",
                                                              "value": {
                                                                "type": "primitive",
                                                                "value": {
                                                                  "type": "string"
                                                                }
                                                              }
                                                            }
                                                          }
                                                        },
                                                        "description": "Account addresses involved in this instruction."
                                                      },
                                                      {
                                                        "key": "data",
                                                        "valueShape": {
                                                          "type": "alias",
                                                          "value": {
                                                            "type": "primitive",
                                                            "value": {
                                                              "type": "string"
                                                            }
                                                          }
                                                        },
                                                        "description": "The program input data encoded as a base-58 string."
                                                      }
                                                    ]
                                                  }
                                                }
                                              }
                                            }
                                          ]
                                        }
                                      }
                                    },
                                    "description": "List of inner instructions or null if not enabled."
                                  },
                                  {
                                    "key": "preTokenBalances",
                                    "valueShape": {
                                      "type": "alias",
                                      "value": {
                                        "type": "list",
                                        "itemShape": {
                                          "type": "object",
                                          "extends": [],
                                          "properties": [
                                            {
                                              "key": "amount",
                                              "valueShape": {
                                                "type": "alias",
                                                "value": {
                                                  "type": "primitive",
                                                  "value": {
                                                    "type": "string"
                                                  }
                                                }
                                              },
                                              "description": "The raw balance without decimals, a string representation of u64."
                                            },
                                            {
                                              "key": "decimals",
                                              "valueShape": {
                                                "type": "alias",
                                                "value": {
                                                  "type": "primitive",
                                                  "value": {
                                                    "type": "integer"
                                                  }
                                                }
                                              },
                                              "description": "Number of base-10 digits to the right of the decimal place."
                                            },
                                            {
                                              "key": "uiAmount",
                                              "valueShape": {
                                                "type": "alias",
                                                "value": {
                                                  "type": "nullable",
                                                  "shape": {
                                                    "type": "alias",
                                                    "value": {
                                                      "type": "primitive",
                                                      "value": {
                                                        "type": "double"
                                                      }
                                                    }
                                                  }
                                                }
                                              },
                                              "description": "The balance, using mint-prescribed decimals. **DEPRECATED**"
                                            },
                                            {
                                              "key": "uiAmountString",
                                              "valueShape": {
                                                "type": "alias",
                                                "value": {
                                                  "type": "primitive",
                                                  "value": {
                                                    "type": "string"
                                                  }
                                                }
                                              },
                                              "description": "The balance as a string, using mint-prescribed decimals."
                                            }
                                          ]
                                        }
                                      }
                                    },
                                    "description": "Token balances before the transaction, if available."
                                  },
                                  {
                                    "key": "postTokenBalances",
                                    "valueShape": {
                                      "type": "alias",
                                      "value": {
                                        "type": "list",
                                        "itemShape": {
                                          "type": "object",
                                          "extends": [],
                                          "properties": [
                                            {
                                              "key": "amount",
                                              "valueShape": {
                                                "type": "alias",
                                                "value": {
                                                  "type": "primitive",
                                                  "value": {
                                                    "type": "string"
                                                  }
                                                }
                                              },
                                              "description": "The raw balance without decimals, a string representation of u64."
                                            },
                                            {
                                              "key": "decimals",
                                              "valueShape": {
                                                "type": "alias",
                                                "value": {
                                                  "type": "primitive",
                                                  "value": {
                                                    "type": "integer"
                                                  }
                                                }
                                              },
                                              "description": "Number of base-10 digits to the right of the decimal place."
                                            },
                                            {
                                              "key": "uiAmount",
                                              "valueShape": {
                                                "type": "alias",
                                                "value": {
                                                  "type": "nullable",
                                                  "shape": {
                                                    "type": "alias",
                                                    "value": {
                                                      "type": "primitive",
                                                      "value": {
                                                        "type": "double"
                                                      }
                                                    }
                                                  }
                                                }
                                              },
                                              "description": "The balance, using mint-prescribed decimals. **DEPRECATED**"
                                            },
                                            {
                                              "key": "uiAmountString",
                                              "valueShape": {
                                                "type": "alias",
                                                "value": {
                                                  "type": "primitive",
                                                  "value": {
                                                    "type": "string"
                                                  }
                                                }
                                              },
                                              "description": "The balance as a string, using mint-prescribed decimals."
                                            }
                                          ]
                                        }
                                      }
                                    },
                                    "description": "Token balances after the transaction, if available."
                                  },
                                  {
                                    "key": "logMessages",
                                    "valueShape": {
                                      "type": "alias",
                                      "value": {
                                        "type": "list",
                                        "itemShape": {
                                          "type": "alias",
                                          "value": {
                                            "type": "primitive",
                                            "value": {
                                              "type": "string"
                                            }
                                          }
                                        }
                                      }
                                    },
                                    "description": "Array of string log messages or null if not enabled."
                                  },
                                  {
                                    "key": "rewards",
                                    "valueShape": {
                                      "type": "alias",
                                      "value": {
                                        "type": "list",
                                        "itemShape": {
                                          "type": "object",
                                          "extends": [],
                                          "properties": [
                                            {
                                              "key": "pubkey",
                                              "valueShape": {
                                                "type": "alias",
                                                "value": {
                                                  "type": "primitive",
                                                  "value": {
                                                    "type": "string"
                                                  }
                                                }
                                              },
                                              "description": "The public key of the rewarded account."
                                            },
                                            {
                                              "key": "lamports",
                                              "valueShape": {
                                                "type": "alias",
                                                "value": {
                                                  "type": "primitive",
                                                  "value": {
                                                    "type": "integer"
                                                  }
                                                }
                                              },
                                              "description": "The amount of reward in lamports."
                                            },
                                            {
                                              "key": "postBalance",
                                              "valueShape": {
                                                "type": "alias",
                                                "value": {
                                                  "type": "primitive",
                                                  "value": {
                                                    "type": "integer"
                                                  }
                                                }
                                              },
                                              "description": "The balance of the account after the reward was applied."
                                            },
                                            {
                                              "key": "rewardType",
                                              "valueShape": {
                                                "type": "enum",
                                                "values": [
                                                  {
                                                    "value": "fee"
                                                  },
                                                  {
                                                    "value": "rent"
                                                  },
                                                  {
                                                    "value": "voting"
                                                  },
                                                  {
                                                    "value": "staking"
                                                  }
                                                ]
                                              },
                                              "description": "The type of reward."
                                            },
                                            {
                                              "key": "commission",
                                              "valueShape": {
                                                "type": "alias",
                                                "value": {
                                                  "type": "nullable",
                                                  "shape": {
                                                    "type": "alias",
                                                    "value": {
                                                      "type": "primitive",
                                                      "value": {
                                                        "type": "integer"
                                                      }
                                                    }
                                                  }
                                                }
                                              },
                                              "description": "The vote account commission when the reward was credited, if applicable."
                                            }
                                          ]
                                        }
                                      }
                                    },
                                    "description": "Transaction-level rewards."
                                  },
                                  {
                                    "key": "loadedAddresses",
                                    "valueShape": {
                                      "type": "alias",
                                      "value": {
                                        "type": "nullable",
                                        "shape": {
                                          "type": "object",
                                          "extends": [],
                                          "properties": []
                                        }
                                      }
                                    },
                                    "description": "Transaction addresses loaded from address lookup tables."
                                  },
                                  {
                                    "key": "returnData",
                                    "valueShape": {
                                      "type": "alias",
                                      "value": {
                                        "type": "nullable",
                                        "shape": {
                                          "type": "object",
                                          "extends": [],
                                          "properties": []
                                        }
                                      }
                                    },
                                    "description": "Return data generated by an instruction in the transaction."
                                  },
                                  {
                                    "key": "computeUnitsConsumed",
                                    "valueShape": {
                                      "type": "alias",
                                      "value": {
                                        "type": "nullable",
                                        "shape": {
                                          "type": "alias",
                                          "value": {
                                            "type": "primitive",
                                            "value": {
                                              "type": "integer"
                                            }
                                          }
                                        }
                                      }
                                    },
                                    "description": "Number of compute units consumed by the transaction."
                                  }
                                ]
                              }
                            }
                          },
                          "description": "Transaction status metadata."
                        },
                        {
                          "key": "version",
                          "valueShape": {
                            "type": "alias",
                            "value": {
                              "type": "nullable",
                              "shape": {
                                "type": "alias",
                                "value": {
                                  "type": "primitive",
                                  "value": {
                                    "type": "string"
                                  }
                                }
                              }
                            }
                          },
                          "description": "Transaction version. Undefined if not set."
                        }
                      ]
                    }
                  }
                },
                "description": "Array of transaction objects."
              },
              {
                "key": "signatures",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "list",
                    "itemShape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "description": "Array of transaction signatures."
              },
              {
                "key": "rewards",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "list",
                    "itemShape": {
                      "type": "object",
                      "extends": [],
                      "properties": [
                        {
                          "key": "pubkey",
                          "valueShape": {
                            "type": "alias",
                            "value": {
                              "type": "primitive",
                              "value": {
                                "type": "string"
                              }
                            }
                          },
                          "description": "The public key of the rewarded account."
                        },
                        {
                          "key": "lamports",
                          "valueShape": {
                            "type": "alias",
                            "value": {
                              "type": "primitive",
                              "value": {
                                "type": "integer"
                              }
                            }
                          },
                          "description": "The amount of reward in lamports."
                        },
                        {
                          "key": "postBalance",
                          "valueShape": {
                            "type": "alias",
                            "value": {
                              "type": "primitive",
                              "value": {
                                "type": "integer"
                              }
                            }
                          },
                          "description": "The balance of the account after the reward was applied."
                        },
                        {
                          "key": "rewardType",
                          "valueShape": {
                            "type": "enum",
                            "values": [
                              {
                                "value": "fee"
                              },
                              {
                                "value": "rent"
                              },
                              {
                                "value": "voting"
                              },
                              {
                                "value": "staking"
                              }
                            ]
                          },
                          "description": "The type of reward."
                        },
                        {
                          "key": "commission",
                          "valueShape": {
                            "type": "alias",
                            "value": {
                              "type": "nullable",
                              "shape": {
                                "type": "alias",
                                "value": {
                                  "type": "primitive",
                                  "value": {
                                    "type": "integer"
                                  }
                                }
                              }
                            }
                          },
                          "description": "The vote account commission when the reward was credited, if applicable."
                        }
                      ]
                    }
                  }
                },
                "description": "Block-level rewards."
              },
              {
                "key": "blockTime",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                "description": "Estimated production time as Unix timestamp."
              },
              {
                "key": "blockHeight",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                "description": "Number of blocks beneath this block."
              }
            ]
          }
        }
      ],
      "errors": [],
      "examples": [
        {
          "name": "Example",
          "path": "",
          "pathParameters": {},
          "queryParameters": {},
          "headers": {},
          "requestBody": {
            "type": "json",
            "value": {
              "slot": 0,
              "Configuration": {
                "commitment": "processed",
                "encoding": "json",
                "transactionDetails": "full",
                "maxSupportedTransactionVersion": 0,
                "rewards": true
              }
            }
          },
          "responseStatusCode": 200,
          "responseBody": {
            "type": "json",
            "value": {
              "blockhash": "string",
              "previousBlockhash": "string",
              "parentSlot": 0,
              "transactions": [
                {
                  "slot": 0,
                  "transaction": {
                    "signatures": [
                      "string"
                    ],
                    "message": {
                      "accountKeys": [
                        "string"
                      ],
                      "header": {
                        "numRequiredSignatures": 0,
                        "numReadonlySignedAccounts": 0,
                        "numReadonlyUnsignedAccounts": 0
                      },
                      "instructions": [
                        {
                          "accounts": [
                            0
                          ],
                          "data": "string",
                          "programIdIndex": 0
                        }
                      ],
                      "recentBlockhash": "string"
                    }
                  },
                  "blockTime": 0,
                  "meta": {
                    "err": {},
                    "fee": 0,
                    "preBalances": [
                      0
                    ],
                    "postBalances": [
                      0
                    ],
                    "innerInstructions": [
                      {
                        "index": 0,
                        "instructions": [
                          {
                            "programId": "string",
                            "accounts": [
                              "string"
                            ],
                            "data": "string"
                          }
                        ]
                      }
                    ],
                    "preTokenBalances": [
                      {
                        "amount": "string",
                        "decimals": 0,
                        "uiAmount": 0,
                        "uiAmountString": "string"
                      }
                    ],
                    "postTokenBalances": [
                      {
                        "amount": "string",
                        "decimals": 0,
                        "uiAmount": 0,
                        "uiAmountString": "string"
                      }
                    ],
                    "logMessages": [
                      "string"
                    ],
                    "rewards": [
                      {
                        "pubkey": "string",
                        "lamports": 0,
                        "postBalance": 0,
                        "rewardType": "fee",
                        "commission": 0
                      }
                    ],
                    "loadedAddresses": {},
                    "returnData": {},
                    "computeUnitsConsumed": 0
                  },
                  "version": "string"
                }
              ],
              "signatures": [
                "string"
              ],
              "rewards": [
                {
                  "pubkey": "string",
                  "lamports": 0,
                  "postBalance": 0,
                  "rewardType": "fee",
                  "commission": 0
                }
              ],
              "blockTime": 0,
              "blockHeight": 0
            }
          }
        }
      ],
      "description": "Returns identity and transaction information about a confirmed block in the ledger.",
      "operationId": "getBlock",
      "environments": [],
      "requestHeaders": [],
      "responseHeaders": []
    },
    "getBlockCommitment": {
      "protocol": {
        "type": "openrpc",
        "methodName": "getBlockCommitment"
      },
      "id": "getBlockCommitment",
      "displayName": "getBlockCommitment",
      "method": "POST",
      "path": [
        {
          "type": "pathParameter",
          "value": "apiKey"
        }
      ],
      "pathParameters": [
        {
          "key": "apiKey",
          "valueShape": {
            "type": "alias",
            "value": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          }
        }
      ],
      "queryParameters": [],
      "requests": [
        {
          "contentType": "application/json",
          "body": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "block",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                "description": "Block number, identified by Slot."
              }
            ]
          }
        }
      ],
      "responses": [
        {
          "statusCode": 200,
          "body": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "commitment",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "list",
                    "itemShape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                },
                "description": "Cluster stake in lamports voted on the block."
              },
              {
                "key": "totalStake",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                "description": "Total active stake in lamports."
              }
            ]
          }
        }
      ],
      "errors": [],
      "examples": [
        {
          "name": "Example",
          "path": "",
          "pathParameters": {},
          "queryParameters": {},
          "headers": {},
          "requestBody": {
            "type": "json",
            "value": {
              "block": 0
            }
          },
          "responseStatusCode": 200,
          "responseBody": {
            "type": "json",
            "value": {
              "commitment": [
                0
              ],
              "totalStake": 0
            }
          }
        }
      ],
      "description": "Returns the commitment for a particular block.",
      "operationId": "getBlockCommitment",
      "environments": [],
      "requestHeaders": [],
      "responseHeaders": []
    },
    "getBlockHeight": {
      "protocol": {
        "type": "openrpc",
        "methodName": "getBlockHeight"
      },
      "id": "getBlockHeight",
      "displayName": "getBlockHeight",
      "method": "POST",
      "path": [
        {
          "type": "pathParameter",
          "value": "apiKey"
        }
      ],
      "pathParameters": [
        {
          "key": "apiKey",
          "valueShape": {
            "type": "alias",
            "value": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          }
        }
      ],
      "queryParameters": [],
      "requests": [
        {
          "contentType": "application/json",
          "body": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "Configuration",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "object",
                      "extends": [],
                      "properties": [
                        {
                          "key": "commitment",
                          "valueShape": {
                            "type": "enum",
                            "values": [
                              {
                                "value": "processed"
                              },
                              {
                                "value": "confirmed"
                              },
                              {
                                "value": "finalized"
                              }
                            ]
                          },
                          "description": "Configures the state commitment for querying."
                        },
                        {
                          "key": "minContextSlot",
                          "valueShape": {
                            "type": "alias",
                            "value": {
                              "type": "primitive",
                              "value": {
                                "type": "integer"
                              }
                            }
                          },
                          "description": "The minimum slot that the request can be evaluated at."
                        }
                      ]
                    }
                  }
                },
                "description": "Optional configuration object containing additional request parameters."
              }
            ]
          }
        }
      ],
      "responses": [
        {
          "statusCode": 200,
          "body": {
            "type": "alias",
            "value": {
              "type": "primitive",
              "value": {
                "type": "integer"
              }
            }
          }
        }
      ],
      "errors": [],
      "examples": [
        {
          "name": "Example",
          "path": "",
          "pathParameters": {},
          "queryParameters": {},
          "headers": {},
          "requestBody": {
            "type": "json",
            "value": {
              "Configuration": {
                "commitment": "processed",
                "minContextSlot": 0
              }
            }
          },
          "responseStatusCode": 200,
          "responseBody": {
            "type": "json",
            "value": 0
          }
        }
      ],
      "description": "Returns the current block height of the node.",
      "operationId": "getBlockHeight",
      "environments": [],
      "requestHeaders": [],
      "responseHeaders": []
    },
    "getBlockProduction": {
      "protocol": {
        "type": "openrpc",
        "methodName": "getBlockProduction"
      },
      "id": "getBlockProduction",
      "displayName": "getBlockProduction",
      "method": "POST",
      "path": [
        {
          "type": "pathParameter",
          "value": "apiKey"
        }
      ],
      "pathParameters": [
        {
          "key": "apiKey",
          "valueShape": {
            "type": "alias",
            "value": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          }
        }
      ],
      "queryParameters": [],
      "requests": [
        {
          "contentType": "application/json",
          "body": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "Configuration",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "object",
                      "extends": [],
                      "properties": [
                        {
                          "key": "commitment",
                          "valueShape": {
                            "type": "enum",
                            "values": [
                              {
                                "value": "processed"
                              },
                              {
                                "value": "confirmed"
                              },
                              {
                                "value": "finalized"
                              }
                            ]
                          },
                          "description": "Configures the state commitment for querying."
                        },
                        {
                          "key": "identity",
                          "valueShape": {
                            "type": "alias",
                            "value": {
                              "type": "primitive",
                              "value": {
                                "type": "string"
                              }
                            }
                          },
                          "description": "Validator identity to filter results."
                        },
                        {
                          "key": "range",
                          "valueShape": {
                            "type": "object",
                            "extends": [],
                            "properties": [
                              {
                                "key": "firstSlot",
                                "valueShape": {
                                  "type": "alias",
                                  "value": {
                                    "type": "primitive",
                                    "value": {
                                      "type": "integer"
                                    }
                                  }
                                },
                                "description": "First slot to return block production for."
                              },
                              {
                                "key": "lastSlot",
                                "valueShape": {
                                  "type": "alias",
                                  "value": {
                                    "type": "primitive",
                                    "value": {
                                      "type": "integer"
                                    }
                                  }
                                },
                                "description": "Last slot to return block production for."
                              }
                            ]
                          }
                        }
                      ]
                    }
                  }
                },
                "description": "Optional configuration object containing additional settings."
              }
            ]
          }
        }
      ],
      "responses": [
        {
          "statusCode": 200,
          "body": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "byIdentity",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "map",
                    "keyShape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    },
                    "valueShape": {
                      "type": "alias",
                      "value": {
                        "type": "list",
                        "itemShape": {
                          "type": "alias",
                          "value": {
                            "type": "primitive",
                            "value": {
                              "type": "integer"
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "description": "Validator identities with leader slots and blocks produced."
              },
              {
                "key": "range",
                "valueShape": {
                  "type": "object",
                  "extends": [],
                  "properties": [
                    {
                      "key": "firstSlot",
                      "valueShape": {
                        "type": "alias",
                        "value": {
                          "type": "primitive",
                          "value": {
                            "type": "integer"
                          }
                        }
                      },
                      "description": "First slot to return block production for."
                    },
                    {
                      "key": "lastSlot",
                      "valueShape": {
                        "type": "alias",
                        "value": {
                          "type": "primitive",
                          "value": {
                            "type": "integer"
                          }
                        }
                      },
                      "description": "Last slot to return block production for."
                    }
                  ]
                }
              }
            ]
          }
        }
      ],
      "errors": [],
      "examples": [
        {
          "name": "Example",
          "path": "",
          "pathParameters": {},
          "queryParameters": {},
          "headers": {},
          "requestBody": {
            "type": "json",
            "value": {
              "Configuration": {
                "commitment": "processed",
                "identity": "string",
                "range": {
                  "firstSlot": 0,
                  "lastSlot": 0
                }
              }
            }
          },
          "responseStatusCode": 200,
          "responseBody": {
            "type": "json",
            "value": {
              "byIdentity": {},
              "range": {
                "firstSlot": 0,
                "lastSlot": 0
              }
            }
          }
        }
      ],
      "description": "Returns recent block production information from the current or previous epoch.",
      "operationId": "getBlockProduction",
      "environments": [],
      "requestHeaders": [],
      "responseHeaders": []
    },
    "getBlocks": {
      "protocol": {
        "type": "openrpc",
        "methodName": "getBlocks"
      },
      "id": "getBlocks",
      "displayName": "getBlocks",
      "method": "POST",
      "path": [
        {
          "type": "pathParameter",
          "value": "apiKey"
        }
      ],
      "pathParameters": [
        {
          "key": "apiKey",
          "valueShape": {
            "type": "alias",
            "value": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          }
        }
      ],
      "queryParameters": [],
      "requests": [
        {
          "contentType": "application/json",
          "body": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "start_slot",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                "description": "The starting slot."
              },
              {
                "key": "end_slot",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                },
                "description": "The ending slot."
              },
              {
                "key": "Configuration",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "object",
                      "extends": [],
                      "properties": [
                        {
                          "key": "commitment",
                          "valueShape": {
                            "type": "enum",
                            "values": [
                              {
                                "value": "processed"
                              },
                              {
                                "value": "confirmed"
                              },
                              {
                                "value": "finalized"
                              }
                            ],
                            "default": "finalized"
                          },
                          "description": "Configures the state commitment for querying."
                        }
                      ]
                    }
                  }
                },
                "description": "Optional configuration object."
              }
            ]
          }
        }
      ],
      "responses": [
        {
          "statusCode": 200,
          "body": {
            "type": "alias",
            "value": {
              "type": "list",
              "itemShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              }
            }
          }
        }
      ],
      "errors": [],
      "examples": [
        {
          "name": "Example",
          "path": "",
          "pathParameters": {},
          "queryParameters": {},
          "headers": {},
          "requestBody": {
            "type": "json",
            "value": {
              "start_slot": 0,
              "end_slot": 0,
              "Configuration": {
                "commitment": "processed"
              }
            }
          },
          "responseStatusCode": 200,
          "responseBody": {
            "type": "json",
            "value": [
              0
            ]
          }
        }
      ],
      "description": "Returns a list of confirmed blocks between two slots.",
      "operationId": "getBlocks",
      "environments": [],
      "requestHeaders": [],
      "responseHeaders": []
    },
    "getBlocksWithLimit": {
      "protocol": {
        "type": "openrpc",
        "methodName": "getBlocksWithLimit"
      },
      "id": "getBlocksWithLimit",
      "displayName": "getBlocksWithLimit",
      "method": "POST",
      "path": [
        {
          "type": "pathParameter",
          "value": "apiKey"
        }
      ],
      "pathParameters": [
        {
          "key": "apiKey",
          "valueShape": {
            "type": "alias",
            "value": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          }
        }
      ],
      "queryParameters": [],
      "requests": [
        {
          "contentType": "application/json",
          "body": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "start_slot",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                "description": "The starting slot."
              },
              {
                "key": "limit",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                "description": "The limit for the number of blocks to return."
              },
              {
                "key": "Configuration",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "object",
                      "extends": [],
                      "properties": [
                        {
                          "key": "commitment",
                          "valueShape": {
                            "type": "enum",
                            "values": [
                              {
                                "value": "processed"
                              },
                              {
                                "value": "confirmed"
                              },
                              {
                                "value": "finalized"
                              }
                            ],
                            "default": "finalized"
                          },
                          "description": "Configures the state commitment for querying."
                        }
                      ]
                    }
                  }
                },
                "description": "Optional configuration object."
              }
            ]
          }
        }
      ],
      "responses": [
        {
          "statusCode": 200,
          "body": {
            "type": "alias",
            "value": {
              "type": "list",
              "itemShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              }
            }
          }
        }
      ],
      "errors": [],
      "examples": [
        {
          "name": "Example",
          "path": "",
          "pathParameters": {},
          "queryParameters": {},
          "headers": {},
          "requestBody": {
            "type": "json",
            "value": {
              "start_slot": 0,
              "limit": 0,
              "Configuration": {
                "commitment": "processed"
              }
            }
          },
          "responseStatusCode": 200,
          "responseBody": {
            "type": "json",
            "value": [
              0
            ]
          }
        }
      ],
      "description": "Returns a list of confirmed blocks starting at the given slot.",
      "operationId": "getBlocksWithLimit",
      "environments": [],
      "requestHeaders": [],
      "responseHeaders": []
    },
    "getBlockTime": {
      "protocol": {
        "type": "openrpc",
        "methodName": "getBlockTime"
      },
      "id": "getBlockTime",
      "displayName": "getBlockTime",
      "method": "POST",
      "path": [
        {
          "type": "pathParameter",
          "value": "apiKey"
        }
      ],
      "pathParameters": [
        {
          "key": "apiKey",
          "valueShape": {
            "type": "alias",
            "value": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          }
        }
      ],
      "queryParameters": [],
      "requests": [
        {
          "contentType": "application/json",
          "body": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "block",
                "valueShape": {
                  "type": "object",
                  "extends": [],
                  "properties": [
                    {
                      "key": "block",
                      "valueShape": {
                        "type": "alias",
                        "value": {
                          "type": "primitive",
                          "value": {
                            "type": "integer"
                          }
                        }
                      },
                      "description": "Block number identified by Slot."
                    }
                  ]
                },
                "description": "Block number, identified by Slot."
              }
            ]
          }
        }
      ],
      "responses": [
        {
          "statusCode": 200,
          "body": {
            "type": "alias",
            "value": {
              "type": "primitive",
              "value": {
                "type": "integer"
              }
            }
          }
        }
      ],
      "errors": [],
      "examples": [
        {
          "name": "Example",
          "path": "",
          "pathParameters": {},
          "queryParameters": {},
          "headers": {},
          "requestBody": {
            "type": "json",
            "value": {
              "block": {
                "block": 0
              }
            }
          },
          "responseStatusCode": 200,
          "responseBody": {
            "type": "json",
            "value": 0
          }
        }
      ],
      "description": "Returns the estimated production time of a block.",
      "operationId": "getBlockTime",
      "environments": [],
      "requestHeaders": [],
      "responseHeaders": []
    },
    "getClusterNodes": {
      "protocol": {
        "type": "openrpc",
        "methodName": "getClusterNodes"
      },
      "id": "getClusterNodes",
      "displayName": "getClusterNodes",
      "method": "POST",
      "path": [
        {
          "type": "pathParameter",
          "value": "apiKey"
        }
      ],
      "pathParameters": [
        {
          "key": "apiKey",
          "valueShape": {
            "type": "alias",
            "value": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          }
        }
      ],
      "queryParameters": [],
      "responses": [
        {
          "statusCode": 200,
          "body": {
            "type": "alias",
            "value": {
              "type": "list",
              "itemShape": {
                "type": "object",
                "extends": [],
                "properties": [
                  {
                    "key": "pubkey",
                    "valueShape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    },
                    "description": "Node public key."
                  },
                  {
                    "key": "gossip",
                    "valueShape": {
                      "type": "alias",
                      "value": {
                        "type": "nullable",
                        "shape": {
                          "type": "alias",
                          "value": {
                            "type": "primitive",
                            "value": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    },
                    "description": "Gossip network address."
                  },
                  {
                    "key": "tpu",
                    "valueShape": {
                      "type": "alias",
                      "value": {
                        "type": "nullable",
                        "shape": {
                          "type": "alias",
                          "value": {
                            "type": "primitive",
                            "value": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    },
                    "description": "TPU network address."
                  },
                  {
                    "key": "rpc",
                    "valueShape": {
                      "type": "alias",
                      "value": {
                        "type": "nullable",
                        "shape": {
                          "type": "alias",
                          "value": {
                            "type": "primitive",
                            "value": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    },
                    "description": "JSON RPC network address."
                  },
                  {
                    "key": "version",
                    "valueShape": {
                      "type": "alias",
                      "value": {
                        "type": "nullable",
                        "shape": {
                          "type": "alias",
                          "value": {
                            "type": "primitive",
                            "value": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    },
                    "description": "Software version of the node."
                  },
                  {
                    "key": "featureSet",
                    "valueShape": {
                      "type": "alias",
                      "value": {
                        "type": "nullable",
                        "shape": {
                          "type": "alias",
                          "value": {
                            "type": "primitive",
                            "value": {
                              "type": "integer"
                            }
                          }
                        }
                      }
                    },
                    "description": "Unique identifier of the node's feature set."
                  },
                  {
                    "key": "shredVersion",
                    "valueShape": {
                      "type": "alias",
                      "value": {
                        "type": "nullable",
                        "shape": {
                          "type": "alias",
                          "value": {
                            "type": "primitive",
                            "value": {
                              "type": "integer"
                            }
                          }
                        }
                      }
                    },
                    "description": "Shred version used by the node."
                  }
                ]
              }
            }
          }
        }
      ],
      "errors": [],
      "examples": [
        {
          "name": "Example",
          "path": "",
          "pathParameters": {},
          "queryParameters": {},
          "headers": {},
          "requestBody": {
            "type": "json",
            "value": {}
          },
          "responseStatusCode": 200,
          "responseBody": {
            "type": "json",
            "value": [
              {
                "pubkey": "string",
                "gossip": "string",
                "tpu": "string",
                "rpc": "string",
                "version": "string",
                "featureSet": 0,
                "shredVersion": 0
              }
            ]
          }
        }
      ],
      "description": "Returns information about all the nodes participating in the cluster.",
      "operationId": "getClusterNodes",
      "environments": [],
      "requestHeaders": [],
      "responseHeaders": []
    },
    "getEpochInfo": {
      "protocol": {
        "type": "openrpc",
        "methodName": "getEpochInfo"
      },
      "id": "getEpochInfo",
      "displayName": "getEpochInfo",
      "method": "POST",
      "path": [
        {
          "type": "pathParameter",
          "value": "apiKey"
        }
      ],
      "pathParameters": [
        {
          "key": "apiKey",
          "valueShape": {
            "type": "alias",
            "value": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          }
        }
      ],
      "queryParameters": [],
      "requests": [
        {
          "contentType": "application/json",
          "body": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "Configuration",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "object",
                      "extends": [],
                      "properties": [
                        {
                          "key": "commitment",
                          "valueShape": {
                            "type": "enum",
                            "values": [
                              {
                                "value": "processed"
                              },
                              {
                                "value": "confirmed"
                              },
                              {
                                "value": "finalized"
                              }
                            ]
                          },
                          "description": "Configures the state commitment for querying."
                        },
                        {
                          "key": "minContextSlot",
                          "valueShape": {
                            "type": "alias",
                            "value": {
                              "type": "primitive",
                              "value": {
                                "type": "integer"
                              }
                            }
                          },
                          "description": "The minimum slot that the request can be evaluated at."
                        }
                      ]
                    }
                  }
                },
                "description": "Optional configuration object."
              }
            ]
          }
        }
      ],
      "responses": [
        {
          "statusCode": 200,
          "body": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "absoluteSlot",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                "description": "Current slot."
              },
              {
                "key": "blockHeight",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                "description": "Current block height."
              },
              {
                "key": "epoch",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                "description": "Current epoch."
              },
              {
                "key": "slotIndex",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                "description": "Slot index relative to the start of the epoch."
              },
              {
                "key": "slotsInEpoch",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                "description": "Number of slots in this epoch."
              },
              {
                "key": "transactionCount",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "nullable",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                },
                "description": "Total transactions processed without error since genesis."
              }
            ]
          }
        }
      ],
      "errors": [],
      "examples": [
        {
          "name": "Example",
          "path": "",
          "pathParameters": {},
          "queryParameters": {},
          "headers": {},
          "requestBody": {
            "type": "json",
            "value": {
              "Configuration": {
                "commitment": "processed",
                "minContextSlot": 0
              }
            }
          },
          "responseStatusCode": 200,
          "responseBody": {
            "type": "json",
            "value": {
              "absoluteSlot": 0,
              "blockHeight": 0,
              "epoch": 0,
              "slotIndex": 0,
              "slotsInEpoch": 0,
              "transactionCount": 0
            }
          }
        }
      ],
      "description": "Returns information about the current epoch.",
      "operationId": "getEpochInfo",
      "environments": [],
      "requestHeaders": [],
      "responseHeaders": []
    },
    "getEpochSchedule": {
      "protocol": {
        "type": "openrpc",
        "methodName": "getEpochSchedule"
      },
      "id": "getEpochSchedule",
      "displayName": "getEpochSchedule",
      "method": "POST",
      "path": [
        {
          "type": "pathParameter",
          "value": "apiKey"
        }
      ],
      "pathParameters": [
        {
          "key": "apiKey",
          "valueShape": {
            "type": "alias",
            "value": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          }
        }
      ],
      "queryParameters": [],
      "responses": [
        {
          "statusCode": 200,
          "body": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "slotsPerEpoch",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                "description": "Max number of slots in each epoch."
              },
              {
                "key": "leaderScheduleSlotOffset",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                "description": "Slots before epoch to calculate leader schedule."
              },
              {
                "key": "warmup",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "boolean"
                    }
                  }
                },
                "description": "Whether epochs start short and grow."
              },
              {
                "key": "firstNormalEpoch",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                "description": "First normal-length epoch."
              },
              {
                "key": "firstNormalSlot",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                "description": "First normal slot."
              }
            ]
          }
        }
      ],
      "errors": [],
      "examples": [
        {
          "name": "Example",
          "path": "",
          "pathParameters": {},
          "queryParameters": {},
          "headers": {},
          "requestBody": {
            "type": "json",
            "value": {}
          },
          "responseStatusCode": 200,
          "responseBody": {
            "type": "json",
            "value": {
              "slotsPerEpoch": 0,
              "leaderScheduleSlotOffset": 0,
              "warmup": false,
              "firstNormalEpoch": 0,
              "firstNormalSlot": 0
            }
          }
        }
      ],
      "description": "Returns the epoch schedule information from the cluster's genesis config.",
      "operationId": "getEpochSchedule",
      "environments": [],
      "requestHeaders": [],
      "responseHeaders": []
    },
    "getFeeForMessage": {
      "protocol": {
        "type": "openrpc",
        "methodName": "getFeeForMessage"
      },
      "id": "getFeeForMessage",
      "displayName": "getFeeForMessage",
      "method": "POST",
      "path": [
        {
          "type": "pathParameter",
          "value": "apiKey"
        }
      ],
      "pathParameters": [
        {
          "key": "apiKey",
          "valueShape": {
            "type": "alias",
            "value": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          }
        }
      ],
      "queryParameters": [],
      "requests": [
        {
          "contentType": "application/json",
          "body": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "Message",
                "valueShape": {
                  "type": "object",
                  "extends": [],
                  "properties": [
                    {
                      "key": "Message",
                      "valueShape": {
                        "type": "alias",
                        "value": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      },
                      "description": "Base-64 encoded Message."
                    }
                  ]
                },
                "description": "Base-64 encoded Message."
              },
              {
                "key": "Configuration",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "object",
                      "extends": [],
                      "properties": [
                        {
                          "key": "commitment",
                          "valueShape": {
                            "type": "enum",
                            "values": [
                              {
                                "value": "processed"
                              },
                              {
                                "value": "confirmed"
                              },
                              {
                                "value": "finalized"
                              }
                            ]
                          },
                          "description": "Configures the state commitment for querying."
                        },
                        {
                          "key": "minContextSlot",
                          "valueShape": {
                            "type": "alias",
                            "value": {
                              "type": "primitive",
                              "value": {
                                "type": "integer"
                              }
                            }
                          },
                          "description": "The minimum slot that the request can be evaluated at."
                        }
                      ]
                    }
                  }
                },
                "description": "Optional configuration object."
              }
            ]
          }
        }
      ],
      "responses": [
        {
          "statusCode": 200,
          "body": {
            "type": "alias",
            "value": {
              "type": "nullable",
              "shape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              }
            }
          }
        }
      ],
      "errors": [],
      "examples": [
        {
          "name": "Example",
          "path": "",
          "pathParameters": {},
          "queryParameters": {},
          "headers": {},
          "requestBody": {
            "type": "json",
            "value": {
              "Message": {
                "Message": "string"
              },
              "Configuration": {
                "commitment": "processed",
                "minContextSlot": 0
              }
            }
          },
          "responseStatusCode": 200,
          "responseBody": {
            "type": "json",
            "value": 0
          }
        }
      ],
      "description": "Get the fee the network will charge for a particular Message.",
      "operationId": "getFeeForMessage",
      "environments": [],
      "requestHeaders": [],
      "responseHeaders": []
    },
    "getFirstAvailableBlock": {
      "protocol": {
        "type": "openrpc",
        "methodName": "getFirstAvailableBlock"
      },
      "id": "getFirstAvailableBlock",
      "displayName": "getFirstAvailableBlock",
      "method": "POST",
      "path": [
        {
          "type": "pathParameter",
          "value": "apiKey"
        }
      ],
      "pathParameters": [
        {
          "key": "apiKey",
          "valueShape": {
            "type": "alias",
            "value": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          }
        }
      ],
      "queryParameters": [],
      "responses": [
        {
          "statusCode": 200,
          "body": {
            "type": "alias",
            "value": {
              "type": "primitive",
              "value": {
                "type": "integer"
              }
            }
          }
        }
      ],
      "errors": [],
      "examples": [
        {
          "name": "Example",
          "path": "",
          "pathParameters": {},
          "queryParameters": {},
          "headers": {},
          "requestBody": {
            "type": "json",
            "value": {}
          },
          "responseStatusCode": 200,
          "responseBody": {
            "type": "json",
            "value": 0
          }
        }
      ],
      "description": "Returns the slot of the lowest confirmed block that has not been purged from the ledger.",
      "operationId": "getFirstAvailableBlock",
      "environments": [],
      "requestHeaders": [],
      "responseHeaders": []
    },
    "getGenesisHash": {
      "protocol": {
        "type": "openrpc",
        "methodName": "getGenesisHash"
      },
      "id": "getGenesisHash",
      "displayName": "getGenesisHash",
      "method": "POST",
      "path": [
        {
          "type": "pathParameter",
          "value": "apiKey"
        }
      ],
      "pathParameters": [
        {
          "key": "apiKey",
          "valueShape": {
            "type": "alias",
            "value": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          }
        }
      ],
      "queryParameters": [],
      "responses": [
        {
          "statusCode": 200,
          "body": {
            "type": "alias",
            "value": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          }
        }
      ],
      "errors": [],
      "examples": [
        {
          "name": "Example",
          "path": "",
          "pathParameters": {},
          "queryParameters": {},
          "headers": {},
          "requestBody": {
            "type": "json",
            "value": {}
          },
          "responseStatusCode": 200,
          "responseBody": {
            "type": "json",
            "value": "string"
          }
        }
      ],
      "description": "Returns the genesis hash.",
      "operationId": "getGenesisHash",
      "environments": [],
      "requestHeaders": [],
      "responseHeaders": []
    },
    "getHealth": {
      "protocol": {
        "type": "openrpc",
        "methodName": "getHealth"
      },
      "id": "getHealth",
      "displayName": "getHealth",
      "method": "POST",
      "path": [
        {
          "type": "pathParameter",
          "value": "apiKey"
        }
      ],
      "pathParameters": [
        {
          "key": "apiKey",
          "valueShape": {
            "type": "alias",
            "value": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          }
        }
      ],
      "queryParameters": [],
      "responses": [
        {
          "statusCode": 200,
          "body": {
            "type": "alias",
            "value": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          }
        }
      ],
      "errors": [],
      "examples": [
        {
          "name": "Example",
          "path": "",
          "pathParameters": {},
          "queryParameters": {},
          "headers": {},
          "requestBody": {
            "type": "json",
            "value": {}
          },
          "responseStatusCode": 200,
          "responseBody": {
            "type": "json",
            "value": "string"
          }
        }
      ],
      "description": "Returns the current health of the node.",
      "operationId": "getHealth",
      "environments": [],
      "requestHeaders": [],
      "responseHeaders": []
    },
    "getHighestSnapshotSlot": {
      "protocol": {
        "type": "openrpc",
        "methodName": "getHighestSnapshotSlot"
      },
      "id": "getHighestSnapshotSlot",
      "displayName": "getHighestSnapshotSlot",
      "method": "POST",
      "path": [
        {
          "type": "pathParameter",
          "value": "apiKey"
        }
      ],
      "pathParameters": [
        {
          "key": "apiKey",
          "valueShape": {
            "type": "alias",
            "value": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          }
        }
      ],
      "queryParameters": [],
      "responses": [
        {
          "statusCode": 200,
          "body": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "full",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                "description": "Highest full snapshot slot."
              },
              {
                "key": "incremental",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "nullable",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                },
                "description": "Highest incremental snapshot slot based on the full snapshot."
              }
            ]
          }
        }
      ],
      "errors": [],
      "examples": [
        {
          "name": "Example",
          "path": "",
          "pathParameters": {},
          "queryParameters": {},
          "headers": {},
          "requestBody": {
            "type": "json",
            "value": {}
          },
          "responseStatusCode": 200,
          "responseBody": {
            "type": "json",
            "value": {
              "full": 0,
              "incremental": 0
            }
          }
        }
      ],
      "description": "Returns the highest slot information that the node has snapshots for.",
      "operationId": "getHighestSnapshotSlot",
      "environments": [],
      "requestHeaders": [],
      "responseHeaders": []
    },
    "getIdentity": {
      "protocol": {
        "type": "openrpc",
        "methodName": "getIdentity"
      },
      "id": "getIdentity",
      "displayName": "getIdentity",
      "method": "POST",
      "path": [
        {
          "type": "pathParameter",
          "value": "apiKey"
        }
      ],
      "pathParameters": [
        {
          "key": "apiKey",
          "valueShape": {
            "type": "alias",
            "value": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          }
        }
      ],
      "queryParameters": [],
      "responses": [
        {
          "statusCode": 200,
          "body": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "identity",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                "description": "Identity pubkey of the current node."
              }
            ]
          }
        }
      ],
      "errors": [],
      "examples": [
        {
          "name": "Example",
          "path": "",
          "pathParameters": {},
          "queryParameters": {},
          "headers": {},
          "requestBody": {
            "type": "json",
            "value": {}
          },
          "responseStatusCode": 200,
          "responseBody": {
            "type": "json",
            "value": {
              "identity": "string"
            }
          }
        }
      ],
      "description": "Returns the identity pubkey for the current node.",
      "operationId": "getIdentity",
      "environments": [],
      "requestHeaders": [],
      "responseHeaders": []
    },
    "getInflationGovernor": {
      "protocol": {
        "type": "openrpc",
        "methodName": "getInflationGovernor"
      },
      "id": "getInflationGovernor",
      "displayName": "getInflationGovernor",
      "method": "POST",
      "path": [
        {
          "type": "pathParameter",
          "value": "apiKey"
        }
      ],
      "pathParameters": [
        {
          "key": "apiKey",
          "valueShape": {
            "type": "alias",
            "value": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          }
        }
      ],
      "queryParameters": [],
      "requests": [
        {
          "contentType": "application/json",
          "body": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "Configuration",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "object",
                      "extends": [],
                      "properties": [
                        {
                          "key": "commitment",
                          "valueShape": {
                            "type": "enum",
                            "values": [
                              {
                                "value": "processed"
                              },
                              {
                                "value": "confirmed"
                              },
                              {
                                "value": "finalized"
                              }
                            ]
                          },
                          "description": "Configures the state commitment for querying."
                        },
                        {
                          "key": "minContextSlot",
                          "valueShape": {
                            "type": "alias",
                            "value": {
                              "type": "primitive",
                              "value": {
                                "type": "integer"
                              }
                            }
                          },
                          "description": "The minimum slot that the request can be evaluated at."
                        }
                      ]
                    }
                  }
                },
                "description": "Optional configuration object."
              }
            ]
          }
        }
      ],
      "responses": [
        {
          "statusCode": 200,
          "body": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "initial",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "double"
                    }
                  }
                },
                "description": "Initial inflation percentage from time 0."
              },
              {
                "key": "terminal",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "double"
                    }
                  }
                },
                "description": "Terminal inflation percentage."
              },
              {
                "key": "taper",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "double"
                    }
                  }
                },
                "description": "Rate per year at which inflation is lowered."
              },
              {
                "key": "foundation",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "double"
                    }
                  }
                },
                "description": "Percentage of total inflation allocated to the foundation."
              },
              {
                "key": "foundationTerm",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "double"
                    }
                  }
                },
                "description": "Duration of foundation pool inflation in years."
              }
            ]
          }
        }
      ],
      "errors": [],
      "examples": [
        {
          "name": "Example",
          "path": "",
          "pathParameters": {},
          "queryParameters": {},
          "headers": {},
          "requestBody": {
            "type": "json",
            "value": {
              "Configuration": {
                "commitment": "processed",
                "minContextSlot": 0
              }
            }
          },
          "responseStatusCode": 200,
          "responseBody": {
            "type": "json",
            "value": {
              "initial": 0,
              "terminal": 0,
              "taper": 0,
              "foundation": 0,
              "foundationTerm": 0
            }
          }
        }
      ],
      "description": "Returns the current inflation governor.",
      "operationId": "getInflationGovernor",
      "environments": [],
      "requestHeaders": [],
      "responseHeaders": []
    },
    "getInflationRate": {
      "protocol": {
        "type": "openrpc",
        "methodName": "getInflationRate"
      },
      "id": "getInflationRate",
      "displayName": "getInflationRate",
      "method": "POST",
      "path": [
        {
          "type": "pathParameter",
          "value": "apiKey"
        }
      ],
      "pathParameters": [
        {
          "key": "apiKey",
          "valueShape": {
            "type": "alias",
            "value": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          }
        }
      ],
      "queryParameters": [],
      "responses": [
        {
          "statusCode": 200,
          "body": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "total",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "double"
                    }
                  }
                },
                "description": "Total inflation rate."
              },
              {
                "key": "validator",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "double"
                    }
                  }
                },
                "description": "Inflation rate allocated to validators."
              },
              {
                "key": "foundation",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "double"
                    }
                  }
                },
                "description": "Inflation rate allocated to the foundation."
              },
              {
                "key": "epoch",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                "description": "Epoch for which these values are valid."
              }
            ]
          }
        }
      ],
      "errors": [],
      "examples": [
        {
          "name": "Example",
          "path": "",
          "pathParameters": {},
          "queryParameters": {},
          "headers": {},
          "requestBody": {
            "type": "json",
            "value": {}
          },
          "responseStatusCode": 200,
          "responseBody": {
            "type": "json",
            "value": {
              "total": 0,
              "validator": 0,
              "foundation": 0,
              "epoch": 0
            }
          }
        }
      ],
      "description": "Returns the specific inflation values for the current epoch.",
      "operationId": "getInflationRate",
      "environments": [],
      "requestHeaders": [],
      "responseHeaders": []
    },
    "getInflationReward": {
      "protocol": {
        "type": "openrpc",
        "methodName": "getInflationReward"
      },
      "id": "getInflationReward",
      "displayName": "getInflationReward",
      "method": "POST",
      "path": [
        {
          "type": "pathParameter",
          "value": "apiKey"
        }
      ],
      "pathParameters": [
        {
          "key": "apiKey",
          "valueShape": {
            "type": "alias",
            "value": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          }
        }
      ],
      "queryParameters": [],
      "requests": [
        {
          "contentType": "application/json",
          "body": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "Addresses",
                "valueShape": {
                  "type": "object",
                  "extends": [],
                  "properties": [
                    {
                      "key": "Addresses",
                      "valueShape": {
                        "type": "alias",
                        "value": {
                          "type": "list",
                          "itemShape": {
                            "type": "alias",
                            "value": {
                              "type": "primitive",
                              "value": {
                                "type": "string"
                              }
                            }
                          }
                        }
                      },
                      "description": "Array of addresses to query."
                    },
                    {
                      "key": "commitment",
                      "valueShape": {
                        "type": "enum",
                        "values": [
                          {
                            "value": "processed"
                          },
                          {
                            "value": "confirmed"
                          },
                          {
                            "value": "finalized"
                          }
                        ]
                      },
                      "description": "Configures the state commitment for querying."
                    },
                    {
                      "key": "epoch",
                      "valueShape": {
                        "type": "alias",
                        "value": {
                          "type": "primitive",
                          "value": {
                            "type": "integer"
                          }
                        }
                      },
                      "description": "Epoch for which the reward occurs."
                    },
                    {
                      "key": "minContextSlot",
                      "valueShape": {
                        "type": "alias",
                        "value": {
                          "type": "primitive",
                          "value": {
                            "type": "integer"
                          }
                        }
                      },
                      "description": "The minimum slot that the request can be evaluated at."
                    }
                  ]
                },
                "description": "An array of addresses to query."
              }
            ]
          }
        }
      ],
      "responses": [
        {
          "statusCode": 200,
          "body": {
            "type": "alias",
            "value": {
              "type": "list",
              "itemShape": {
                "type": "alias",
                "value": {
                  "type": "nullable",
                  "shape": {
                    "type": "object",
                    "extends": [],
                    "properties": [
                      {
                        "key": "epoch",
                        "valueShape": {
                          "type": "alias",
                          "value": {
                            "type": "primitive",
                            "value": {
                              "type": "integer"
                            }
                          }
                        },
                        "description": "Epoch for which the reward occurred."
                      },
                      {
                        "key": "effectiveSlot",
                        "valueShape": {
                          "type": "alias",
                          "value": {
                            "type": "primitive",
                            "value": {
                              "type": "integer"
                            }
                          }
                        },
                        "description": "Slot in which rewards are effective."
                      },
                      {
                        "key": "amount",
                        "valueShape": {
                          "type": "alias",
                          "value": {
                            "type": "primitive",
                            "value": {
                              "type": "integer"
                            }
                          }
                        },
                        "description": "Reward amount in lamports."
                      },
                      {
                        "key": "postBalance",
                        "valueShape": {
                          "type": "alias",
                          "value": {
                            "type": "primitive",
                            "value": {
                              "type": "integer"
                            }
                          }
                        },
                        "description": "Post balance of the account in lamports."
                      },
                      {
                        "key": "commission",
                        "valueShape": {
                          "type": "alias",
                          "value": {
                            "type": "nullable",
                            "shape": {
                              "type": "alias",
                              "value": {
                                "type": "primitive",
                                "value": {
                                  "type": "integer"
                                }
                              }
                            }
                          }
                        },
                        "description": "Vote account commission when reward was credited."
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      ],
      "errors": [],
      "examples": [
        {
          "name": "Example",
          "path": "",
          "pathParameters": {},
          "queryParameters": {},
          "headers": {},
          "requestBody": {
            "type": "json",
            "value": {
              "Addresses": {
                "Addresses": [
                  "string"
                ],
                "commitment": "processed",
                "epoch": 0,
                "minContextSlot": 0
              }
            }
          },
          "responseStatusCode": 200,
          "responseBody": {
            "type": "json",
            "value": [
              {
                "epoch": 0,
                "effectiveSlot": 0,
                "amount": 0,
                "postBalance": 0,
                "commission": 0
              }
            ]
          }
        }
      ],
      "description": "Returns the inflation or staking reward for a list of addresses for a specified epoch.",
      "operationId": "getInflationReward",
      "environments": [],
      "requestHeaders": [],
      "responseHeaders": []
    },
    "getLargestAccounts": {
      "protocol": {
        "type": "openrpc",
        "methodName": "getLargestAccounts"
      },
      "id": "getLargestAccounts",
      "displayName": "getLargestAccounts",
      "method": "POST",
      "path": [
        {
          "type": "pathParameter",
          "value": "apiKey"
        }
      ],
      "pathParameters": [
        {
          "key": "apiKey",
          "valueShape": {
            "type": "alias",
            "value": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          }
        }
      ],
      "queryParameters": [],
      "requests": [
        {
          "contentType": "application/json",
          "body": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "Configuration",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "object",
                      "extends": [],
                      "properties": [
                        {
                          "key": "commitment",
                          "valueShape": {
                            "type": "enum",
                            "values": [
                              {
                                "value": "processed"
                              },
                              {
                                "value": "confirmed"
                              },
                              {
                                "value": "finalized"
                              }
                            ]
                          },
                          "description": "Configures the state commitment for querying."
                        },
                        {
                          "key": "filter",
                          "valueShape": {
                            "type": "enum",
                            "values": [
                              {
                                "value": "circulating"
                              },
                              {
                                "value": "nonCirculating"
                              }
                            ]
                          },
                          "description": "Filter results by account type."
                        }
                      ]
                    }
                  }
                },
                "description": "Optional configuration object."
              }
            ]
          }
        }
      ],
      "responses": [
        {
          "statusCode": 200,
          "body": {
            "type": "alias",
            "value": {
              "type": "list",
              "itemShape": {
                "type": "object",
                "extends": [],
                "properties": [
                  {
                    "key": "address",
                    "valueShape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    },
                    "description": "Address of the account."
                  },
                  {
                    "key": "lamports",
                    "valueShape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "integer"
                        }
                      }
                    },
                    "description": "Number of lamports in the account."
                  }
                ]
              }
            }
          }
        }
      ],
      "errors": [],
      "examples": [
        {
          "name": "Example",
          "path": "",
          "pathParameters": {},
          "queryParameters": {},
          "headers": {},
          "requestBody": {
            "type": "json",
            "value": {
              "Configuration": {
                "commitment": "processed",
                "filter": "circulating"
              }
            }
          },
          "responseStatusCode": 200,
          "responseBody": {
            "type": "json",
            "value": [
              {
                "address": "string",
                "lamports": 0
              }
            ]
          }
        }
      ],
      "description": "Returns the 20 largest accounts, by lamport balance.",
      "operationId": "getLargestAccounts",
      "environments": [],
      "requestHeaders": [],
      "responseHeaders": []
    },
    "getLatestBlockhash": {
      "protocol": {
        "type": "openrpc",
        "methodName": "getLatestBlockhash"
      },
      "id": "getLatestBlockhash",
      "displayName": "getLatestBlockhash",
      "method": "POST",
      "path": [
        {
          "type": "pathParameter",
          "value": "apiKey"
        }
      ],
      "pathParameters": [
        {
          "key": "apiKey",
          "valueShape": {
            "type": "alias",
            "value": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          }
        }
      ],
      "queryParameters": [],
      "requests": [
        {
          "contentType": "application/json",
          "body": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "Configuration",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "object",
                      "extends": [],
                      "properties": [
                        {
                          "key": "commitment",
                          "valueShape": {
                            "type": "enum",
                            "values": [
                              {
                                "value": "processed"
                              },
                              {
                                "value": "confirmed"
                              },
                              {
                                "value": "finalized"
                              }
                            ]
                          },
                          "description": "Configures the state commitment for querying."
                        },
                        {
                          "key": "minContextSlot",
                          "valueShape": {
                            "type": "alias",
                            "value": {
                              "type": "primitive",
                              "value": {
                                "type": "integer"
                              }
                            }
                          },
                          "description": "The minimum slot that the request can be evaluated at."
                        }
                      ]
                    }
                  }
                },
                "description": "A configuration object with optional fields for specifying commitment and minimum context slot."
              }
            ]
          }
        }
      ],
      "responses": [
        {
          "statusCode": 200,
          "body": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "blockhash",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                "description": "Blockhash as a base-58 encoded string."
              },
              {
                "key": "lastValidBlockHeight",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                "description": "Last block height at which the blockhash is valid."
              }
            ]
          }
        }
      ],
      "errors": [],
      "examples": [
        {
          "name": "Example",
          "path": "",
          "pathParameters": {},
          "queryParameters": {},
          "headers": {},
          "requestBody": {
            "type": "json",
            "value": {
              "Configuration": {
                "commitment": "processed",
                "minContextSlot": 0
              }
            }
          },
          "responseStatusCode": 200,
          "responseBody": {
            "type": "json",
            "value": {
              "blockhash": "string",
              "lastValidBlockHeight": 0
            }
          }
        }
      ],
      "description": "Returns the latest blockhash.",
      "operationId": "getLatestBlockhash",
      "environments": [],
      "requestHeaders": [],
      "responseHeaders": []
    },
    "getMaxRetransmitSlot": {
      "protocol": {
        "type": "openrpc",
        "methodName": "getMaxRetransmitSlot"
      },
      "id": "getMaxRetransmitSlot",
      "displayName": "getMaxRetransmitSlot",
      "method": "POST",
      "path": [
        {
          "type": "pathParameter",
          "value": "apiKey"
        }
      ],
      "pathParameters": [
        {
          "key": "apiKey",
          "valueShape": {
            "type": "alias",
            "value": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          }
        }
      ],
      "queryParameters": [],
      "responses": [
        {
          "statusCode": 200,
          "body": {
            "type": "alias",
            "value": {
              "type": "primitive",
              "value": {
                "type": "integer"
              }
            }
          }
        }
      ],
      "errors": [],
      "examples": [
        {
          "name": "Example",
          "path": "",
          "pathParameters": {},
          "queryParameters": {},
          "headers": {},
          "requestBody": {
            "type": "json",
            "value": {}
          },
          "responseStatusCode": 200,
          "responseBody": {
            "type": "json",
            "value": 0
          }
        }
      ],
      "description": "Get the max slot seen from the retransmit stage.",
      "operationId": "getMaxRetransmitSlot",
      "environments": [],
      "requestHeaders": [],
      "responseHeaders": []
    },
    "getMaxShredInsertSlot": {
      "protocol": {
        "type": "openrpc",
        "methodName": "getMaxShredInsertSlot"
      },
      "id": "getMaxShredInsertSlot",
      "displayName": "getMaxShredInsertSlot",
      "method": "POST",
      "path": [
        {
          "type": "pathParameter",
          "value": "apiKey"
        }
      ],
      "pathParameters": [
        {
          "key": "apiKey",
          "valueShape": {
            "type": "alias",
            "value": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          }
        }
      ],
      "queryParameters": [],
      "responses": [
        {
          "statusCode": 200,
          "body": {
            "type": "alias",
            "value": {
              "type": "primitive",
              "value": {
                "type": "integer"
              }
            }
          }
        }
      ],
      "errors": [],
      "examples": [
        {
          "name": "Example",
          "path": "",
          "pathParameters": {},
          "queryParameters": {},
          "headers": {},
          "requestBody": {
            "type": "json",
            "value": {}
          },
          "responseStatusCode": 200,
          "responseBody": {
            "type": "json",
            "value": 0
          }
        }
      ],
      "description": "Get the max slot seen from after shred insert.",
      "operationId": "getMaxShredInsertSlot",
      "environments": [],
      "requestHeaders": [],
      "responseHeaders": []
    },
    "getMinimumBalanceForRentExemption": {
      "protocol": {
        "type": "openrpc",
        "methodName": "getMinimumBalanceForRentExemption"
      },
      "id": "getMinimumBalanceForRentExemption",
      "displayName": "getMinimumBalanceForRentExemption",
      "method": "POST",
      "path": [
        {
          "type": "pathParameter",
          "value": "apiKey"
        }
      ],
      "pathParameters": [
        {
          "key": "apiKey",
          "valueShape": {
            "type": "alias",
            "value": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          }
        }
      ],
      "queryParameters": [],
      "requests": [
        {
          "contentType": "application/json",
          "body": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "Account data length",
                "valueShape": {
                  "type": "object",
                  "extends": [],
                  "properties": [
                    {
                      "key": "dataLength",
                      "valueShape": {
                        "type": "alias",
                        "value": {
                          "type": "primitive",
                          "value": {
                            "type": "integer"
                          }
                        }
                      },
                      "description": "Account's data length in bytes."
                    }
                  ]
                },
                "description": "The account's data length in bytes."
              },
              {
                "key": "Configuration",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "object",
                      "extends": [],
                      "properties": [
                        {
                          "key": "commitment",
                          "valueShape": {
                            "type": "enum",
                            "values": [
                              {
                                "value": "processed"
                              },
                              {
                                "value": "confirmed"
                              },
                              {
                                "value": "finalized"
                              }
                            ]
                          },
                          "description": "Configures the state commitment for querying."
                        }
                      ]
                    }
                  }
                },
                "description": "Optional configuration object."
              }
            ]
          }
        }
      ],
      "responses": [
        {
          "statusCode": 200,
          "body": {
            "type": "alias",
            "value": {
              "type": "primitive",
              "value": {
                "type": "integer"
              }
            }
          }
        }
      ],
      "errors": [],
      "examples": [
        {
          "name": "Example",
          "path": "",
          "pathParameters": {},
          "queryParameters": {},
          "headers": {},
          "requestBody": {
            "type": "json",
            "value": {
              "Account data length": {
                "dataLength": 0
              },
              "Configuration": {
                "commitment": "processed"
              }
            }
          },
          "responseStatusCode": 200,
          "responseBody": {
            "type": "json",
            "value": 0
          }
        }
      ],
      "description": "Returns the minimum balance required to make an account rent exempt.",
      "operationId": "getMinimumBalanceForRentExemption",
      "environments": [],
      "requestHeaders": [],
      "responseHeaders": []
    },
    "getMultipleAccounts": {
      "protocol": {
        "type": "openrpc",
        "methodName": "getMultipleAccounts"
      },
      "id": "getMultipleAccounts",
      "displayName": "getMultipleAccounts",
      "method": "POST",
      "path": [
        {
          "type": "pathParameter",
          "value": "apiKey"
        }
      ],
      "pathParameters": [
        {
          "key": "apiKey",
          "valueShape": {
            "type": "alias",
            "value": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          }
        }
      ],
      "queryParameters": [],
      "requests": [
        {
          "contentType": "application/json",
          "body": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "Pubkeys",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "list",
                    "itemShape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "description": "An array of Pubkeys to query."
              },
              {
                "key": "Configuration",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "object",
                      "extends": [],
                      "properties": [
                        {
                          "key": "commitment",
                          "valueShape": {
                            "type": "enum",
                            "values": [
                              {
                                "value": "processed"
                              },
                              {
                                "value": "confirmed"
                              },
                              {
                                "value": "finalized"
                              }
                            ]
                          },
                          "description": "Configures the state commitment for querying."
                        },
                        {
                          "key": "minContextSlot",
                          "valueShape": {
                            "type": "alias",
                            "value": {
                              "type": "primitive",
                              "value": {
                                "type": "integer"
                              }
                            }
                          },
                          "description": "The minimum slot that the request can be evaluated at."
                        },
                        {
                          "key": "dataSlice",
                          "valueShape": {
                            "type": "object",
                            "extends": [],
                            "properties": [
                              {
                                "key": "length",
                                "valueShape": {
                                  "type": "alias",
                                  "value": {
                                    "type": "primitive",
                                    "value": {
                                      "type": "integer"
                                    }
                                  }
                                },
                                "description": "Number of bytes to return."
                              },
                              {
                                "key": "offset",
                                "valueShape": {
                                  "type": "alias",
                                  "value": {
                                    "type": "primitive",
                                    "value": {
                                      "type": "integer"
                                    }
                                  }
                                },
                                "description": "Byte offset from which to start reading."
                              }
                            ]
                          }
                        },
                        {
                          "key": "encoding",
                          "valueShape": {
                            "type": "enum",
                            "values": [
                              {
                                "value": "base58"
                              },
                              {
                                "value": "base64"
                              },
                              {
                                "value": "base64+zstd"
                              },
                              {
                                "value": "jsonParsed"
                              }
                            ],
                            "default": "base64"
                          },
                          "description": "Encoding format for data."
                        }
                      ]
                    }
                  }
                },
                "description": "Optional configuration object."
              }
            ]
          }
        }
      ],
      "responses": [
        {
          "statusCode": 200,
          "body": {
            "type": "alias",
            "value": {
              "type": "list",
              "itemShape": {
                "type": "object",
                "extends": [],
                "properties": [
                  {
                    "key": "lamports",
                    "valueShape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "integer"
                        }
                      }
                    },
                    "description": "Number of lamports assigned to this account."
                  },
                  {
                    "key": "owner",
                    "valueShape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    },
                    "description": "Program owner of this account."
                  },
                  {
                    "key": "data",
                    "valueShape": {
                      "type": "alias",
                      "value": {
                        "type": "list",
                        "itemShape": {
                          "type": "alias",
                          "value": {
                            "type": "primitive",
                            "value": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    },
                    "description": "Account data in the specified encoding format."
                  },
                  {
                    "key": "executable",
                    "valueShape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "boolean"
                        }
                      }
                    },
                    "description": "Indicates if the account contains a program."
                  },
                  {
                    "key": "rentEpoch",
                    "valueShape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "integer"
                        }
                      }
                    },
                    "description": "The epoch at which this account will next owe rent."
                  },
                  {
                    "key": "size",
                    "valueShape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "integer"
                        }
                      }
                    },
                    "description": "The data size of the account."
                  }
                ]
              }
            }
          }
        }
      ],
      "errors": [],
      "examples": [
        {
          "name": "Example",
          "path": "",
          "pathParameters": {},
          "queryParameters": {},
          "headers": {},
          "requestBody": {
            "type": "json",
            "value": {
              "Pubkeys": [
                "string"
              ],
              "Configuration": {
                "commitment": "processed",
                "minContextSlot": 0,
                "dataSlice": {
                  "length": 0,
                  "offset": 0
                },
                "encoding": "base58"
              }
            }
          },
          "responseStatusCode": 200,
          "responseBody": {
            "type": "json",
            "value": [
              {
                "lamports": 0,
                "owner": "string",
                "data": [
                  "string"
                ],
                "executable": false,
                "rentEpoch": 0,
                "size": 0
              }
            ]
          }
        }
      ],
      "description": "Returns the account information for a list of Pubkeys.",
      "operationId": "getMultipleAccounts",
      "environments": [],
      "requestHeaders": [],
      "responseHeaders": []
    },
    "getProgramAccounts": {
      "protocol": {
        "type": "openrpc",
        "methodName": "getProgramAccounts"
      },
      "id": "getProgramAccounts",
      "displayName": "getProgramAccounts",
      "method": "POST",
      "path": [
        {
          "type": "pathParameter",
          "value": "apiKey"
        }
      ],
      "pathParameters": [
        {
          "key": "apiKey",
          "valueShape": {
            "type": "alias",
            "value": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          }
        }
      ],
      "queryParameters": [],
      "requests": [
        {
          "contentType": "application/json",
          "body": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "Pubkey",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                "description": "The Pubkey of the program."
              },
              {
                "key": "Configuration",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "object",
                      "extends": [],
                      "properties": [
                        {
                          "key": "commitment",
                          "valueShape": {
                            "type": "enum",
                            "values": [
                              {
                                "value": "processed"
                              },
                              {
                                "value": "confirmed"
                              },
                              {
                                "value": "finalized"
                              }
                            ]
                          },
                          "description": "Configures the state commitment for querying."
                        },
                        {
                          "key": "minContextSlot",
                          "valueShape": {
                            "type": "alias",
                            "value": {
                              "type": "primitive",
                              "value": {
                                "type": "integer"
                              }
                            }
                          },
                          "description": "The minimum slot that the request can be evaluated at."
                        },
                        {
                          "key": "withContext",
                          "valueShape": {
                            "type": "alias",
                            "value": {
                              "type": "primitive",
                              "value": {
                                "type": "boolean"
                              }
                            }
                          },
                          "description": "If set, wraps the result in an `RpcResponse` JSON object."
                        },
                        {
                          "key": "encoding",
                          "valueShape": {
                            "type": "enum",
                            "values": [
                              {
                                "value": "base58"
                              },
                              {
                                "value": "base64"
                              },
                              {
                                "value": "base64+zstd"
                              },
                              {
                                "value": "jsonParsed"
                              }
                            ],
                            "default": "json"
                          },
                          "description": "Encoding format for data."
                        },
                        {
                          "key": "dataSlice",
                          "valueShape": {
                            "type": "object",
                            "extends": [],
                            "properties": [
                              {
                                "key": "length",
                                "valueShape": {
                                  "type": "alias",
                                  "value": {
                                    "type": "primitive",
                                    "value": {
                                      "type": "integer"
                                    }
                                  }
                                },
                                "description": "Number of bytes to return."
                              },
                              {
                                "key": "offset",
                                "valueShape": {
                                  "type": "alias",
                                  "value": {
                                    "type": "primitive",
                                    "value": {
                                      "type": "integer"
                                    }
                                  }
                                },
                                "description": "Byte offset from which to start reading."
                              }
                            ]
                          }
                        }
                      ]
                    }
                  }
                },
                "description": "Optional configuration object."
              }
            ]
          }
        }
      ],
      "responses": [
        {
          "statusCode": 200,
          "body": {
            "type": "alias",
            "value": {
              "type": "list",
              "itemShape": {
                "type": "object",
                "extends": [],
                "properties": [
                  {
                    "key": "pubkey",
                    "valueShape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    },
                    "description": "The account Pubkey as a base-58 encoded string."
                  },
                  {
                    "key": "account",
                    "valueShape": {
                      "type": "object",
                      "extends": [],
                      "properties": [
                        {
                          "key": "lamports",
                          "valueShape": {
                            "type": "alias",
                            "value": {
                              "type": "primitive",
                              "value": {
                                "type": "integer"
                              }
                            }
                          },
                          "description": "Number of lamports assigned to this account."
                        },
                        {
                          "key": "owner",
                          "valueShape": {
                            "type": "alias",
                            "value": {
                              "type": "primitive",
                              "value": {
                                "type": "string"
                              }
                            }
                          },
                          "description": "Program owner of this account."
                        },
                        {
                          "key": "data",
                          "valueShape": {
                            "type": "alias",
                            "value": {
                              "type": "list",
                              "itemShape": {
                                "type": "alias",
                                "value": {
                                  "type": "primitive",
                                  "value": {
                                    "type": "string"
                                  }
                                }
                              }
                            }
                          },
                          "description": "Account data in the specified encoding format."
                        },
                        {
                          "key": "executable",
                          "valueShape": {
                            "type": "alias",
                            "value": {
                              "type": "primitive",
                              "value": {
                                "type": "boolean"
                              }
                            }
                          },
                          "description": "Indicates if the account contains a program."
                        },
                        {
                          "key": "rentEpoch",
                          "valueShape": {
                            "type": "alias",
                            "value": {
                              "type": "primitive",
                              "value": {
                                "type": "integer"
                              }
                            }
                          },
                          "description": "The epoch at which this account will next owe rent."
                        },
                        {
                          "key": "size",
                          "valueShape": {
                            "type": "alias",
                            "value": {
                              "type": "primitive",
                              "value": {
                                "type": "integer"
                              }
                            }
                          },
                          "description": "The data size of the account."
                        }
                      ]
                    }
                  }
                ]
              }
            }
          }
        }
      ],
      "errors": [],
      "examples": [
        {
          "name": "Example",
          "path": "",
          "pathParameters": {},
          "queryParameters": {},
          "headers": {},
          "requestBody": {
            "type": "json",
            "value": {
              "Pubkey": "string",
              "Configuration": {
                "commitment": "processed",
                "minContextSlot": 0,
                "withContext": false,
                "encoding": "base58",
                "dataSlice": {
                  "length": 0,
                  "offset": 0
                },
                "filters": []
              }
            }
          },
          "responseStatusCode": 200,
          "responseBody": {
            "type": "json",
            "value": [
              {
                "pubkey": "string",
                "account": {
                  "lamports": 0,
                  "owner": "string",
                  "data": [
                    "string"
                  ],
                  "executable": false,
                  "rentEpoch": 0,
                  "size": 0
                }
              }
            ]
          }
        }
      ],
      "description": "Returns all accounts owned by the provided program Pubkey.",
      "operationId": "getProgramAccounts",
      "environments": [],
      "requestHeaders": [],
      "responseHeaders": []
    },
    "getRecentPerformanceSamples": {
      "protocol": {
        "type": "openrpc",
        "methodName": "getRecentPerformanceSamples"
      },
      "id": "getRecentPerformanceSamples",
      "displayName": "getRecentPerformanceSamples",
      "method": "POST",
      "path": [
        {
          "type": "pathParameter",
          "value": "apiKey"
        }
      ],
      "pathParameters": [
        {
          "key": "apiKey",
          "valueShape": {
            "type": "alias",
            "value": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          }
        }
      ],
      "queryParameters": [],
      "requests": [
        {
          "contentType": "application/json",
          "body": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "limit",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                },
                "description": "The number of samples to return."
              }
            ]
          }
        }
      ],
      "responses": [
        {
          "statusCode": 200,
          "body": {
            "type": "alias",
            "value": {
              "type": "list",
              "itemShape": {
                "type": "object",
                "extends": [],
                "properties": [
                  {
                    "key": "slot",
                    "valueShape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "integer"
                        }
                      }
                    },
                    "description": "The slot in which the sample was taken."
                  },
                  {
                    "key": "numTransactions",
                    "valueShape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "integer"
                        }
                      }
                    },
                    "description": "The number of transactions processed during the sample period."
                  },
                  {
                    "key": "numSlots",
                    "valueShape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "integer"
                        }
                      }
                    },
                    "description": "The number of slots completed during the sample period."
                  },
                  {
                    "key": "samplePeriodSecs",
                    "valueShape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "integer"
                        }
                      }
                    },
                    "description": "The number of seconds in a sample window."
                  },
                  {
                    "key": "numNonVoteTransactions",
                    "valueShape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "integer"
                        }
                      }
                    },
                    "description": "The number of non-vote transactions processed during the sample period."
                  }
                ]
              }
            }
          }
        }
      ],
      "errors": [],
      "examples": [
        {
          "name": "Example",
          "path": "",
          "pathParameters": {},
          "queryParameters": {},
          "headers": {},
          "requestBody": {
            "type": "json",
            "value": {
              "limit": 0
            }
          },
          "responseStatusCode": 200,
          "responseBody": {
            "type": "json",
            "value": [
              {
                "slot": 0,
                "numTransactions": 0,
                "numSlots": 0,
                "samplePeriodSecs": 0,
                "numNonVoteTransactions": 0
              }
            ]
          }
        }
      ],
      "description": "Returns a list of recent performance samples, in reverse slot order.",
      "operationId": "getRecentPerformanceSamples",
      "environments": [],
      "requestHeaders": [],
      "responseHeaders": []
    },
    "getRecentPrioritizationFees": {
      "protocol": {
        "type": "openrpc",
        "methodName": "getRecentPrioritizationFees"
      },
      "id": "getRecentPrioritizationFees",
      "displayName": "getRecentPrioritizationFees",
      "method": "POST",
      "path": [
        {
          "type": "pathParameter",
          "value": "apiKey"
        }
      ],
      "pathParameters": [
        {
          "key": "apiKey",
          "valueShape": {
            "type": "alias",
            "value": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          }
        }
      ],
      "queryParameters": [],
      "requests": [
        {
          "contentType": "application/json",
          "body": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "Account addresses",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "list",
                        "itemShape": {
                          "type": "alias",
                          "value": {
                            "type": "primitive",
                            "value": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "description": "An array of up to 128 account addresses. If provided, the response will reflect a fee to land a transaction locking all of the provided accounts as writable."
              }
            ]
          }
        }
      ],
      "responses": [
        {
          "statusCode": 200,
          "body": {
            "type": "alias",
            "value": {
              "type": "list",
              "itemShape": {
                "type": "object",
                "extends": [],
                "properties": [
                  {
                    "key": "slot",
                    "valueShape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "integer"
                        }
                      }
                    },
                    "description": "Slot in which the fee was observed."
                  },
                  {
                    "key": "prioritizationFee",
                    "valueShape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "integer"
                        }
                      }
                    },
                    "description": "The per-compute-unit fee in micro-lamports."
                  }
                ]
              }
            }
          }
        }
      ],
      "errors": [],
      "examples": [
        {
          "name": "Example",
          "path": "",
          "pathParameters": {},
          "queryParameters": {},
          "headers": {},
          "requestBody": {
            "type": "json",
            "value": {
              "Account addresses": [
                "string"
              ]
            }
          },
          "responseStatusCode": 200,
          "responseBody": {
            "type": "json",
            "value": [
              {
                "slot": 0,
                "prioritizationFee": 0
              }
            ]
          }
        }
      ],
      "description": "Returns a list of prioritization fees from recent blocks.",
      "operationId": "getRecentPrioritizationFees",
      "environments": [],
      "requestHeaders": [],
      "responseHeaders": []
    },
    "getSignaturesForAddress": {
      "protocol": {
        "type": "openrpc",
        "methodName": "getSignaturesForAddress"
      },
      "id": "getSignaturesForAddress",
      "displayName": "getSignaturesForAddress",
      "method": "POST",
      "path": [
        {
          "type": "pathParameter",
          "value": "apiKey"
        }
      ],
      "pathParameters": [
        {
          "key": "apiKey",
          "valueShape": {
            "type": "alias",
            "value": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          }
        }
      ],
      "queryParameters": [],
      "requests": [
        {
          "contentType": "application/json",
          "body": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "Account address",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                "description": "The account address."
              },
              {
                "key": "Configuration",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "object",
                      "extends": [],
                      "properties": [
                        {
                          "key": "commitment",
                          "valueShape": {
                            "type": "enum",
                            "values": [
                              {
                                "value": "processed"
                              },
                              {
                                "value": "confirmed"
                              },
                              {
                                "value": "finalized"
                              }
                            ]
                          },
                          "description": "Configures the state commitment for querying."
                        },
                        {
                          "key": "minContextSlot",
                          "valueShape": {
                            "type": "alias",
                            "value": {
                              "type": "primitive",
                              "value": {
                                "type": "integer"
                              }
                            }
                          },
                          "description": "The minimum slot that the request can be evaluated at."
                        },
                        {
                          "key": "limit",
                          "valueShape": {
                            "type": "alias",
                            "value": {
                              "type": "primitive",
                              "value": {
                                "type": "integer",
                                "default": 1000
                              }
                            }
                          },
                          "description": "The maximum number of transaction signatures to return (between 1 and 1,000)."
                        },
                        {
                          "key": "before",
                          "valueShape": {
                            "type": "alias",
                            "value": {
                              "type": "primitive",
                              "value": {
                                "type": "string"
                              }
                            }
                          },
                          "description": "Start searching backwards from this transaction signature."
                        },
                        {
                          "key": "until",
                          "valueShape": {
                            "type": "alias",
                            "value": {
                              "type": "primitive",
                              "value": {
                                "type": "string"
                              }
                            }
                          },
                          "description": "Search until this transaction signature, if found before the limit is reached."
                        }
                      ]
                    }
                  }
                },
                "description": "Optional configuration object."
              }
            ]
          }
        }
      ],
      "responses": [
        {
          "statusCode": 200,
          "body": {
            "type": "alias",
            "value": {
              "type": "list",
              "itemShape": {
                "type": "object",
                "extends": [],
                "properties": [
                  {
                    "key": "signature",
                    "valueShape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    },
                    "description": "The transaction signature as a base-58 encoded string."
                  },
                  {
                    "key": "slot",
                    "valueShape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "integer"
                        }
                      }
                    },
                    "description": "The slot that contains the block with the transaction."
                  },
                  {
                    "key": "err",
                    "valueShape": {
                      "type": "alias",
                      "value": {
                        "type": "nullable",
                        "shape": {
                          "type": "object",
                          "extends": [],
                          "properties": []
                        }
                      }
                    },
                    "description": "Error if the transaction failed, null if the transaction succeeded."
                  },
                  {
                    "key": "memo",
                    "valueShape": {
                      "type": "alias",
                      "value": {
                        "type": "nullable",
                        "shape": {
                          "type": "alias",
                          "value": {
                            "type": "primitive",
                            "value": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    },
                    "description": "The memo associated with the transaction, null if no memo is present."
                  },
                  {
                    "key": "blockTime",
                    "valueShape": {
                      "type": "alias",
                      "value": {
                        "type": "nullable",
                        "shape": {
                          "type": "alias",
                          "value": {
                            "type": "primitive",
                            "value": {
                              "type": "integer"
                            }
                          }
                        }
                      }
                    },
                    "description": "The estimated production time of the transaction as a Unix timestamp, null if not available."
                  },
                  {
                    "key": "confirmationStatus",
                    "valueShape": {
                      "type": "alias",
                      "value": {
                        "type": "nullable",
                        "shape": {
                          "type": "alias",
                          "value": {
                            "type": "primitive",
                            "value": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    },
                    "description": "The transaction's cluster confirmation status, either `processed`, `confirmed`, or `finalized`."
                  }
                ]
              }
            }
          }
        }
      ],
      "errors": [],
      "examples": [
        {
          "name": "Example",
          "path": "",
          "pathParameters": {},
          "queryParameters": {},
          "headers": {},
          "requestBody": {
            "type": "json",
            "value": {
              "Account address": "string",
              "Configuration": {
                "commitment": "processed",
                "minContextSlot": 0,
                "limit": 1000,
                "before": "string",
                "until": "string"
              }
            }
          },
          "responseStatusCode": 200,
          "responseBody": {
            "type": "json",
            "value": [
              {
                "signature": "string",
                "slot": 0,
                "err": {},
                "memo": "string",
                "blockTime": 0,
                "confirmationStatus": "string"
              }
            ]
          }
        }
      ],
      "description": "Returns signatures for confirmed transactions that include the given address.",
      "operationId": "getSignaturesForAddress",
      "environments": [],
      "requestHeaders": [],
      "responseHeaders": []
    },
    "getSignatureStatuses": {
      "protocol": {
        "type": "openrpc",
        "methodName": "getSignatureStatuses"
      },
      "id": "getSignatureStatuses",
      "displayName": "getSignatureStatuses",
      "method": "POST",
      "path": [
        {
          "type": "pathParameter",
          "value": "apiKey"
        }
      ],
      "pathParameters": [
        {
          "key": "apiKey",
          "valueShape": {
            "type": "alias",
            "value": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          }
        }
      ],
      "queryParameters": [],
      "requests": [
        {
          "contentType": "application/json",
          "body": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "Signatures",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "list",
                    "itemShape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "description": "An array of transaction signatures to confirm."
              },
              {
                "key": "Configuration",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "object",
                      "extends": [],
                      "properties": [
                        {
                          "key": "searchTransactionHistory",
                          "valueShape": {
                            "type": "alias",
                            "value": {
                              "type": "primitive",
                              "value": {
                                "type": "boolean"
                              }
                            }
                          },
                          "description": "If true, searches the ledger cache for any signatures not found in the recent status cache."
                        }
                      ]
                    }
                  }
                },
                "description": "Optional configuration object."
              }
            ]
          }
        }
      ],
      "responses": [
        {
          "statusCode": 200,
          "body": {
            "type": "alias",
            "value": {
              "type": "list",
              "itemShape": {
                "type": "object",
                "extends": [],
                "properties": [
                  {
                    "key": "slot",
                    "valueShape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "integer"
                        }
                      }
                    },
                    "description": "The slot in which the transaction was processed."
                  },
                  {
                    "key": "confirmations",
                    "valueShape": {
                      "type": "alias",
                      "value": {
                        "type": "nullable",
                        "shape": {
                          "type": "alias",
                          "value": {
                            "type": "primitive",
                            "value": {
                              "type": "integer"
                            }
                          }
                        }
                      }
                    },
                    "description": "The number of blocks since signature confirmation, or null if rooted and finalized."
                  },
                  {
                    "key": "err",
                    "valueShape": {
                      "type": "alias",
                      "value": {
                        "type": "nullable",
                        "shape": {
                          "type": "object",
                          "extends": [],
                          "properties": []
                        }
                      }
                    },
                    "description": "Error if the transaction failed, or null if the transaction succeeded."
                  },
                  {
                    "key": "confirmationStatus",
                    "valueShape": {
                      "type": "alias",
                      "value": {
                        "type": "nullable",
                        "shape": {
                          "type": "alias",
                          "value": {
                            "type": "primitive",
                            "value": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    },
                    "description": "The transaction's cluster confirmation status."
                  },
                  {
                    "key": "status",
                    "valueShape": {
                      "type": "object",
                      "extends": [],
                      "properties": []
                    },
                    "description": "DEPRECATED. The transaction status."
                  }
                ]
              }
            }
          }
        }
      ],
      "errors": [],
      "examples": [
        {
          "name": "Example",
          "path": "",
          "pathParameters": {},
          "queryParameters": {},
          "headers": {},
          "requestBody": {
            "type": "json",
            "value": {
              "Signatures": [
                "string"
              ],
              "Configuration": {
                "searchTransactionHistory": false
              }
            }
          },
          "responseStatusCode": 200,
          "responseBody": {
            "type": "json",
            "value": [
              {
                "slot": 0,
                "confirmations": 0,
                "err": {},
                "confirmationStatus": "string",
                "status": {}
              }
            ]
          }
        }
      ],
      "description": "Returns the statuses of a list of transaction signatures.",
      "operationId": "getSignatureStatuses",
      "environments": [],
      "requestHeaders": [],
      "responseHeaders": []
    },
    "getSlot": {
      "protocol": {
        "type": "openrpc",
        "methodName": "getSlot"
      },
      "id": "getSlot",
      "displayName": "getSlot",
      "method": "POST",
      "path": [
        {
          "type": "pathParameter",
          "value": "apiKey"
        }
      ],
      "pathParameters": [
        {
          "key": "apiKey",
          "valueShape": {
            "type": "alias",
            "value": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          }
        }
      ],
      "queryParameters": [],
      "requests": [
        {
          "contentType": "application/json",
          "body": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "Configuration",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "object",
                      "extends": [],
                      "properties": [
                        {
                          "key": "commitment",
                          "valueShape": {
                            "type": "enum",
                            "values": [
                              {
                                "value": "processed"
                              },
                              {
                                "value": "confirmed"
                              },
                              {
                                "value": "finalized"
                              }
                            ]
                          },
                          "description": "Configures the state commitment for querying."
                        },
                        {
                          "key": "minContextSlot",
                          "valueShape": {
                            "type": "alias",
                            "value": {
                              "type": "primitive",
                              "value": {
                                "type": "integer"
                              }
                            }
                          },
                          "description": "The minimum slot that the request can be evaluated at."
                        }
                      ]
                    }
                  }
                },
                "description": "Optional configuration object containing additional settings."
              }
            ]
          }
        }
      ],
      "responses": [
        {
          "statusCode": 200,
          "body": {
            "type": "alias",
            "value": {
              "type": "primitive",
              "value": {
                "type": "integer"
              }
            }
          }
        }
      ],
      "errors": [],
      "examples": [
        {
          "name": "Example",
          "path": "",
          "pathParameters": {},
          "queryParameters": {},
          "headers": {},
          "requestBody": {
            "type": "json",
            "value": {
              "Configuration": {
                "commitment": "processed",
                "minContextSlot": 0
              }
            }
          },
          "responseStatusCode": 200,
          "responseBody": {
            "type": "json",
            "value": 0
          }
        }
      ],
      "description": "Returns the slot that has reached the given or default commitment level.",
      "operationId": "getSlot",
      "environments": [],
      "requestHeaders": [],
      "responseHeaders": []
    },
    "getSlotLeader": {
      "protocol": {
        "type": "openrpc",
        "methodName": "getSlotLeader"
      },
      "id": "getSlotLeader",
      "displayName": "getSlotLeader",
      "method": "POST",
      "path": [
        {
          "type": "pathParameter",
          "value": "apiKey"
        }
      ],
      "pathParameters": [
        {
          "key": "apiKey",
          "valueShape": {
            "type": "alias",
            "value": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          }
        }
      ],
      "queryParameters": [],
      "requests": [
        {
          "contentType": "application/json",
          "body": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "Configuration",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "object",
                      "extends": [],
                      "properties": [
                        {
                          "key": "commitment",
                          "valueShape": {
                            "type": "enum",
                            "values": [
                              {
                                "value": "processed"
                              },
                              {
                                "value": "confirmed"
                              },
                              {
                                "value": "finalized"
                              }
                            ]
                          },
                          "description": "Configures the state commitment for querying."
                        },
                        {
                          "key": "minContextSlot",
                          "valueShape": {
                            "type": "alias",
                            "value": {
                              "type": "primitive",
                              "value": {
                                "type": "integer"
                              }
                            }
                          },
                          "description": "The minimum slot that the request can be evaluated at."
                        }
                      ]
                    }
                  }
                },
                "description": "Optional configuration object containing additional settings."
              }
            ]
          }
        }
      ],
      "responses": [
        {
          "statusCode": 200,
          "body": {
            "type": "alias",
            "value": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          }
        }
      ],
      "errors": [],
      "examples": [
        {
          "name": "Example",
          "path": "",
          "pathParameters": {},
          "queryParameters": {},
          "headers": {},
          "requestBody": {
            "type": "json",
            "value": {
              "Configuration": {
                "commitment": "processed",
                "minContextSlot": 0
              }
            }
          },
          "responseStatusCode": 200,
          "responseBody": {
            "type": "json",
            "value": "string"
          }
        }
      ],
      "description": "Returns the current slot leader.",
      "operationId": "getSlotLeader",
      "environments": [],
      "requestHeaders": [],
      "responseHeaders": []
    },
    "getSlotLeaders": {
      "protocol": {
        "type": "openrpc",
        "methodName": "getSlotLeaders"
      },
      "id": "getSlotLeaders",
      "displayName": "getSlotLeaders",
      "method": "POST",
      "path": [
        {
          "type": "pathParameter",
          "value": "apiKey"
        }
      ],
      "pathParameters": [
        {
          "key": "apiKey",
          "valueShape": {
            "type": "alias",
            "value": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          }
        }
      ],
      "queryParameters": [],
      "requests": [
        {
          "contentType": "application/json",
          "body": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "Start slot",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                "description": "The starting slot as a u64 integer."
              },
              {
                "key": "Limit",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                "description": "The number of slot leaders to return, between 1 and 5,000."
              }
            ]
          }
        }
      ],
      "responses": [
        {
          "statusCode": 200,
          "body": {
            "type": "alias",
            "value": {
              "type": "list",
              "itemShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      ],
      "errors": [],
      "examples": [
        {
          "name": "Example",
          "path": "",
          "pathParameters": {},
          "queryParameters": {},
          "headers": {},
          "requestBody": {
            "type": "json",
            "value": {
              "Start slot": 0,
              "Limit": 0
            }
          },
          "responseStatusCode": 200,
          "responseBody": {
            "type": "json",
            "value": [
              "string"
            ]
          }
        }
      ],
      "description": "Returns the slot leaders for a given slot range.",
      "operationId": "getSlotLeaders",
      "environments": [],
      "requestHeaders": [],
      "responseHeaders": []
    },
    "getSupply": {
      "protocol": {
        "type": "openrpc",
        "methodName": "getSupply"
      },
      "id": "getSupply",
      "displayName": "getSupply",
      "method": "POST",
      "path": [
        {
          "type": "pathParameter",
          "value": "apiKey"
        }
      ],
      "pathParameters": [
        {
          "key": "apiKey",
          "valueShape": {
            "type": "alias",
            "value": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          }
        }
      ],
      "queryParameters": [],
      "requests": [
        {
          "contentType": "application/json",
          "body": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "Configuration",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "object",
                      "extends": [],
                      "properties": [
                        {
                          "key": "commitment",
                          "valueShape": {
                            "type": "enum",
                            "values": [
                              {
                                "value": "processed"
                              },
                              {
                                "value": "confirmed"
                              },
                              {
                                "value": "finalized"
                              }
                            ]
                          },
                          "description": "Configures the state commitment for querying."
                        },
                        {
                          "key": "excludeNonCirculatingAccountsList",
                          "valueShape": {
                            "type": "alias",
                            "value": {
                              "type": "primitive",
                              "value": {
                                "type": "boolean"
                              }
                            }
                          },
                          "description": "Exclude non-circulating accounts list from the response."
                        }
                      ]
                    }
                  }
                },
                "description": "Optional configuration object containing additional settings."
              }
            ]
          }
        }
      ],
      "responses": [
        {
          "statusCode": 200,
          "body": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "total",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                "description": "The total supply in lamports."
              },
              {
                "key": "circulating",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                "description": "The circulating supply in lamports."
              },
              {
                "key": "nonCirculating",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                "description": "The non-circulating supply in lamports."
              },
              {
                "key": "nonCirculatingAccounts",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "list",
                    "itemShape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "description": "An array of account addresses of non-circulating accounts."
              }
            ]
          }
        }
      ],
      "errors": [],
      "examples": [
        {
          "name": "Example",
          "path": "",
          "pathParameters": {},
          "queryParameters": {},
          "headers": {},
          "requestBody": {
            "type": "json",
            "value": {
              "Configuration": {
                "commitment": "processed",
                "excludeNonCirculatingAccountsList": false
              }
            }
          },
          "responseStatusCode": 200,
          "responseBody": {
            "type": "json",
            "value": {
              "total": 0,
              "circulating": 0,
              "nonCirculating": 0,
              "nonCirculatingAccounts": [
                "string"
              ]
            }
          }
        }
      ],
      "description": "Returns information about the current supply of lamports.",
      "operationId": "getSupply",
      "environments": [],
      "requestHeaders": [],
      "responseHeaders": []
    },
    "getTokenAccountBalance": {
      "protocol": {
        "type": "openrpc",
        "methodName": "getTokenAccountBalance"
      },
      "id": "getTokenAccountBalance",
      "displayName": "getTokenAccountBalance",
      "method": "POST",
      "path": [
        {
          "type": "pathParameter",
          "value": "apiKey"
        }
      ],
      "pathParameters": [
        {
          "key": "apiKey",
          "valueShape": {
            "type": "alias",
            "value": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          }
        }
      ],
      "queryParameters": [],
      "requests": [
        {
          "contentType": "application/json",
          "body": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "Token account Pubkey",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                "description": "The Pubkey of the token account to query."
              },
              {
                "key": "Configuration",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "object",
                      "extends": [],
                      "properties": [
                        {
                          "key": "commitment",
                          "valueShape": {
                            "type": "enum",
                            "values": [
                              {
                                "value": "processed"
                              },
                              {
                                "value": "confirmed"
                              },
                              {
                                "value": "finalized"
                              }
                            ]
                          },
                          "description": "Configures the state commitment for querying."
                        }
                      ]
                    }
                  }
                },
                "description": "Optional configuration object containing additional settings."
              }
            ]
          }
        }
      ],
      "responses": [
        {
          "statusCode": 200,
          "body": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "amount",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                "description": "The raw balance without decimals, a string representation of u64."
              },
              {
                "key": "decimals",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                "description": "Number of base-10 digits to the right of the decimal place."
              },
              {
                "key": "uiAmount",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "nullable",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "double"
                        }
                      }
                    }
                  }
                },
                "description": "The balance, using mint-prescribed decimals. **DEPRECATED**"
              },
              {
                "key": "uiAmountString",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                "description": "The balance as a string, using mint-prescribed decimals."
              }
            ]
          }
        }
      ],
      "errors": [],
      "examples": [
        {
          "name": "Example",
          "path": "",
          "pathParameters": {},
          "queryParameters": {},
          "headers": {},
          "requestBody": {
            "type": "json",
            "value": {
              "Token account Pubkey": "string",
              "Configuration": {
                "commitment": "processed"
              }
            }
          },
          "responseStatusCode": 200,
          "responseBody": {
            "type": "json",
            "value": {
              "amount": "string",
              "decimals": 0,
              "uiAmount": 0,
              "uiAmountString": "string"
            }
          }
        }
      ],
      "description": "Returns the token balance of an SPL Token account.",
      "operationId": "getTokenAccountBalance",
      "environments": [],
      "requestHeaders": [],
      "responseHeaders": []
    },
    "getTokenAccountsByOwner": {
      "protocol": {
        "type": "openrpc",
        "methodName": "getTokenAccountsByOwner"
      },
      "id": "getTokenAccountsByOwner",
      "displayName": "getTokenAccountsByOwner",
      "method": "POST",
      "path": [
        {
          "type": "pathParameter",
          "value": "apiKey"
        }
      ],
      "pathParameters": [
        {
          "key": "apiKey",
          "valueShape": {
            "type": "alias",
            "value": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          }
        }
      ],
      "queryParameters": [],
      "requests": [
        {
          "contentType": "application/json",
          "body": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "Token owner Pubkey",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                "description": "The Pubkey of the account owner to query."
              },
              {
                "key": "Token filter",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "object",
                      "extends": [],
                      "properties": [
                        {
                          "key": "mint",
                          "valueShape": {
                            "type": "alias",
                            "value": {
                              "type": "primitive",
                              "value": {
                                "type": "string"
                              }
                            }
                          },
                          "description": "The Pubkey of the specific token Mint to limit accounts to."
                        },
                        {
                          "key": "programId",
                          "valueShape": {
                            "type": "alias",
                            "value": {
                              "type": "primitive",
                              "value": {
                                "type": "string"
                              }
                            }
                          },
                          "description": "The Pubkey of the Token program that owns the accounts."
                        }
                      ]
                    }
                  }
                },
                "description": "A filter object containing either the Mint Pubkey or the Token program Pubkey."
              },
              {
                "key": "Configuration",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "object",
                      "extends": [],
                      "properties": [
                        {
                          "key": "commitment",
                          "valueShape": {
                            "type": "enum",
                            "values": [
                              {
                                "value": "processed"
                              },
                              {
                                "value": "confirmed"
                              },
                              {
                                "value": "finalized"
                              }
                            ]
                          },
                          "description": "Configures the state commitment for querying."
                        },
                        {
                          "key": "minContextSlot",
                          "valueShape": {
                            "type": "alias",
                            "value": {
                              "type": "primitive",
                              "value": {
                                "type": "integer"
                              }
                            }
                          },
                          "description": "The minimum slot that the request can be evaluated at."
                        },
                        {
                          "key": "dataSlice",
                          "valueShape": {
                            "type": "object",
                            "extends": [],
                            "properties": [
                              {
                                "key": "length",
                                "valueShape": {
                                  "type": "alias",
                                  "value": {
                                    "type": "primitive",
                                    "value": {
                                      "type": "integer"
                                    }
                                  }
                                },
                                "description": "Number of bytes to return."
                              },
                              {
                                "key": "offset",
                                "valueShape": {
                                  "type": "alias",
                                  "value": {
                                    "type": "primitive",
                                    "value": {
                                      "type": "integer"
                                    }
                                  }
                                },
                                "description": "Byte offset from which to start reading."
                              }
                            ]
                          }
                        },
                        {
                          "key": "encoding",
                          "valueShape": {
                            "type": "enum",
                            "values": [
                              {
                                "value": "base58"
                              },
                              {
                                "value": "base64"
                              },
                              {
                                "value": "base64+zstd"
                              },
                              {
                                "value": "jsonParsed"
                              }
                            ]
                          },
                          "description": "Encoding format for account data."
                        }
                      ]
                    }
                  }
                },
                "description": "Optional configuration object containing additional settings."
              }
            ]
          }
        }
      ],
      "responses": [
        {
          "statusCode": 200,
          "body": {
            "type": "alias",
            "value": {
              "type": "list",
              "itemShape": {
                "type": "object",
                "extends": [],
                "properties": [
                  {
                    "key": "pubkey",
                    "valueShape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    },
                    "description": "The account Pubkey as a base-58 encoded string."
                  },
                  {
                    "key": "account",
                    "valueShape": {
                      "type": "object",
                      "extends": [],
                      "properties": [
                        {
                          "key": "lamports",
                          "valueShape": {
                            "type": "alias",
                            "value": {
                              "type": "primitive",
                              "value": {
                                "type": "integer"
                              }
                            }
                          },
                          "description": "Number of lamports assigned to this account."
                        },
                        {
                          "key": "owner",
                          "valueShape": {
                            "type": "alias",
                            "value": {
                              "type": "primitive",
                              "value": {
                                "type": "string"
                              }
                            }
                          },
                          "description": "Program owner of this account."
                        },
                        {
                          "key": "data",
                          "valueShape": {
                            "type": "alias",
                            "value": {
                              "type": "list",
                              "itemShape": {
                                "type": "alias",
                                "value": {
                                  "type": "primitive",
                                  "value": {
                                    "type": "string"
                                  }
                                }
                              }
                            }
                          },
                          "description": "Account data in the specified encoding format."
                        },
                        {
                          "key": "executable",
                          "valueShape": {
                            "type": "alias",
                            "value": {
                              "type": "primitive",
                              "value": {
                                "type": "boolean"
                              }
                            }
                          },
                          "description": "Indicates if the account contains a program."
                        },
                        {
                          "key": "rentEpoch",
                          "valueShape": {
                            "type": "alias",
                            "value": {
                              "type": "primitive",
                              "value": {
                                "type": "integer"
                              }
                            }
                          },
                          "description": "The epoch at which this account will next owe rent."
                        },
                        {
                          "key": "size",
                          "valueShape": {
                            "type": "alias",
                            "value": {
                              "type": "primitive",
                              "value": {
                                "type": "integer"
                              }
                            }
                          },
                          "description": "The data size of the account."
                        }
                      ]
                    }
                  }
                ]
              }
            }
          }
        }
      ],
      "errors": [],
      "examples": [
        {
          "name": "Example",
          "path": "",
          "pathParameters": {},
          "queryParameters": {},
          "headers": {},
          "requestBody": {
            "type": "json",
            "value": {
              "Token owner Pubkey": "string",
              "Token filter": {
                "mint": "string",
                "programId": "string"
              },
              "Configuration": {
                "commitment": "processed",
                "minContextSlot": 0,
                "dataSlice": {
                  "length": 0,
                  "offset": 0
                },
                "encoding": "base58"
              }
            }
          },
          "responseStatusCode": 200,
          "responseBody": {
            "type": "json",
            "value": [
              {
                "pubkey": "string",
                "account": {
                  "lamports": 0,
                  "owner": "string",
                  "data": [
                    "string"
                  ],
                  "executable": false,
                  "rentEpoch": 0,
                  "size": 0
                }
              }
            ]
          }
        }
      ],
      "description": "Returns all SPL Token accounts owned by the specified token owner.",
      "operationId": "getTokenAccountsByOwner",
      "environments": [],
      "requestHeaders": [],
      "responseHeaders": []
    },
    "getTokenSupply": {
      "protocol": {
        "type": "openrpc",
        "methodName": "getTokenSupply"
      },
      "id": "getTokenSupply",
      "displayName": "getTokenSupply",
      "method": "POST",
      "path": [
        {
          "type": "pathParameter",
          "value": "apiKey"
        }
      ],
      "pathParameters": [
        {
          "key": "apiKey",
          "valueShape": {
            "type": "alias",
            "value": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          }
        }
      ],
      "queryParameters": [],
      "requests": [
        {
          "contentType": "application/json",
          "body": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "Token Mint Pubkey",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                "description": "The Pubkey of the token Mint to query."
              },
              {
                "key": "Configuration",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "object",
                      "extends": [],
                      "properties": [
                        {
                          "key": "commitment",
                          "valueShape": {
                            "type": "enum",
                            "values": [
                              {
                                "value": "processed"
                              },
                              {
                                "value": "confirmed"
                              },
                              {
                                "value": "finalized"
                              }
                            ]
                          },
                          "description": "Configures the state commitment for querying."
                        }
                      ]
                    }
                  }
                },
                "description": "Optional configuration object containing additional settings."
              }
            ]
          }
        }
      ],
      "responses": [
        {
          "statusCode": 200,
          "body": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "amount",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                "description": "The raw balance without decimals, a string representation of u64."
              },
              {
                "key": "decimals",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                "description": "Number of base-10 digits to the right of the decimal place."
              },
              {
                "key": "uiAmount",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "nullable",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "double"
                        }
                      }
                    }
                  }
                },
                "description": "The balance, using mint-prescribed decimals. **DEPRECATED**"
              },
              {
                "key": "uiAmountString",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                "description": "The balance as a string, using mint-prescribed decimals."
              }
            ]
          }
        }
      ],
      "errors": [],
      "examples": [
        {
          "name": "Example",
          "path": "",
          "pathParameters": {},
          "queryParameters": {},
          "headers": {},
          "requestBody": {
            "type": "json",
            "value": {
              "Token Mint Pubkey": "string",
              "Configuration": {
                "commitment": "processed"
              }
            }
          },
          "responseStatusCode": 200,
          "responseBody": {
            "type": "json",
            "value": {
              "amount": "string",
              "decimals": 0,
              "uiAmount": 0,
              "uiAmountString": "string"
            }
          }
        }
      ],
      "description": "Returns the total supply of an SPL Token type.",
      "operationId": "getTokenSupply",
      "environments": [],
      "requestHeaders": [],
      "responseHeaders": []
    },
    "getTransaction": {
      "protocol": {
        "type": "openrpc",
        "methodName": "getTransaction"
      },
      "id": "getTransaction",
      "displayName": "getTransaction",
      "method": "POST",
      "path": [
        {
          "type": "pathParameter",
          "value": "apiKey"
        }
      ],
      "pathParameters": [
        {
          "key": "apiKey",
          "valueShape": {
            "type": "alias",
            "value": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          }
        }
      ],
      "queryParameters": [],
      "requests": [
        {
          "contentType": "application/json",
          "body": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "Transaction signature",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                "description": "Transaction signature as a base-58 encoded string."
              },
              {
                "key": "Configuration",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "object",
                      "extends": [],
                      "properties": [
                        {
                          "key": "commitment",
                          "valueShape": {
                            "type": "enum",
                            "values": [
                              {
                                "value": "processed"
                              },
                              {
                                "value": "confirmed"
                              },
                              {
                                "value": "finalized"
                              }
                            ]
                          },
                          "description": "Commitment level to use. `Processed` is not supported."
                        },
                        {
                          "key": "maxSupportedTransactionVersion",
                          "valueShape": {
                            "type": "alias",
                            "value": {
                              "type": "primitive",
                              "value": {
                                "type": "integer"
                              }
                            }
                          },
                          "description": "Sets the max transaction version to return."
                        },
                        {
                          "key": "encoding",
                          "valueShape": {
                            "type": "enum",
                            "values": [
                              {
                                "value": "json"
                              },
                              {
                                "value": "jsonParsed"
                              },
                              {
                                "value": "base64"
                              },
                              {
                                "value": "base58"
                              }
                            ]
                          },
                          "description": "Encoding format for the returned transaction."
                        }
                      ]
                    }
                  }
                },
                "description": "Optional configuration object containing additional settings."
              }
            ]
          }
        }
      ],
      "responses": [
        {
          "statusCode": 200,
          "body": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "slot",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                "description": "The slot this transaction was processed in."
              },
              {
                "key": "transaction",
                "valueShape": {
                  "type": "object",
                  "extends": [],
                  "properties": []
                },
                "description": "The transaction details, either in JSON format or encoded binary data."
              },
              {
                "key": "blockTime",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "nullable",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                },
                "description": "Estimated production time as a Unix timestamp."
              },
              {
                "key": "meta",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "nullable",
                    "shape": {
                      "type": "object",
                      "extends": [],
                      "properties": []
                    }
                  }
                },
                "description": "Transaction status metadata."
              },
              {
                "key": "version",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "nullable",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "description": "Transaction version."
              }
            ]
          }
        }
      ],
      "errors": [],
      "examples": [
        {
          "name": "Example",
          "path": "",
          "pathParameters": {},
          "queryParameters": {},
          "headers": {},
          "requestBody": {
            "type": "json",
            "value": {
              "Transaction signature": "string",
              "Configuration": {
                "commitment": "processed",
                "maxSupportedTransactionVersion": 0,
                "encoding": "json"
              }
            }
          },
          "responseStatusCode": 200,
          "responseBody": {
            "type": "json",
            "value": {
              "slot": 0,
              "transaction": {},
              "blockTime": 0,
              "meta": {},
              "version": "string"
            }
          }
        }
      ],
      "description": "Returns transaction details for a confirmed transaction.",
      "operationId": "getTransaction",
      "environments": [],
      "requestHeaders": [],
      "responseHeaders": []
    },
    "getVersion": {
      "protocol": {
        "type": "openrpc",
        "methodName": "getVersion"
      },
      "id": "getVersion",
      "displayName": "getVersion",
      "method": "POST",
      "path": [
        {
          "type": "pathParameter",
          "value": "apiKey"
        }
      ],
      "pathParameters": [
        {
          "key": "apiKey",
          "valueShape": {
            "type": "alias",
            "value": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          }
        }
      ],
      "queryParameters": [],
      "responses": [
        {
          "statusCode": 200,
          "body": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "solana-core",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                "description": "The software version of solana-core."
              },
              {
                "key": "feature-set",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                "description": "Unique identifier of the current software's feature set."
              }
            ]
          }
        }
      ],
      "errors": [],
      "examples": [
        {
          "name": "Example",
          "path": "",
          "pathParameters": {},
          "queryParameters": {},
          "headers": {},
          "requestBody": {
            "type": "json",
            "value": {}
          },
          "responseStatusCode": 200,
          "responseBody": {
            "type": "json",
            "value": {
              "solana-core": "string",
              "feature-set": 0
            }
          }
        }
      ],
      "description": "Returns the current Solana version running on the node.",
      "operationId": "getVersion",
      "environments": [],
      "requestHeaders": [],
      "responseHeaders": []
    },
    "getVoteAccounts": {
      "protocol": {
        "type": "openrpc",
        "methodName": "getVoteAccounts"
      },
      "id": "getVoteAccounts",
      "displayName": "getVoteAccounts",
      "method": "POST",
      "path": [
        {
          "type": "pathParameter",
          "value": "apiKey"
        }
      ],
      "pathParameters": [
        {
          "key": "apiKey",
          "valueShape": {
            "type": "alias",
            "value": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          }
        }
      ],
      "queryParameters": [],
      "requests": [
        {
          "contentType": "application/json",
          "body": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "Configuration",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "object",
                      "extends": [],
                      "properties": [
                        {
                          "key": "commitment",
                          "valueShape": {
                            "type": "enum",
                            "values": [
                              {
                                "value": "processed"
                              },
                              {
                                "value": "confirmed"
                              },
                              {
                                "value": "finalized"
                              }
                            ]
                          },
                          "description": "Configures the state commitment for querying."
                        },
                        {
                          "key": "votePubkey",
                          "valueShape": {
                            "type": "alias",
                            "value": {
                              "type": "primitive",
                              "value": {
                                "type": "string"
                              }
                            }
                          },
                          "description": "Return results for this validator vote address."
                        },
                        {
                          "key": "keepUnstakedDelinquents",
                          "valueShape": {
                            "type": "alias",
                            "value": {
                              "type": "primitive",
                              "value": {
                                "type": "boolean"
                              }
                            }
                          },
                          "description": "Do not filter out delinquent validators with no stake."
                        },
                        {
                          "key": "delinquentSlotDistance",
                          "valueShape": {
                            "type": "alias",
                            "value": {
                              "type": "primitive",
                              "value": {
                                "type": "integer"
                              }
                            }
                          },
                          "description": "Number of slots behind the tip for a validator to be considered delinquent."
                        }
                      ]
                    }
                  }
                },
                "description": "Optional configuration object."
              }
            ]
          }
        }
      ],
      "responses": [
        {
          "statusCode": 200,
          "body": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "current",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "list",
                    "itemShape": {
                      "type": "object",
                      "extends": [],
                      "properties": [
                        {
                          "key": "votePubkey",
                          "valueShape": {
                            "type": "alias",
                            "value": {
                              "type": "primitive",
                              "value": {
                                "type": "string"
                              }
                            }
                          },
                          "description": "Vote account address."
                        },
                        {
                          "key": "nodePubkey",
                          "valueShape": {
                            "type": "alias",
                            "value": {
                              "type": "primitive",
                              "value": {
                                "type": "string"
                              }
                            }
                          },
                          "description": "Validator identity."
                        },
                        {
                          "key": "activatedStake",
                          "valueShape": {
                            "type": "alias",
                            "value": {
                              "type": "primitive",
                              "value": {
                                "type": "integer"
                              }
                            }
                          },
                          "description": "Active stake in lamports delegated to this vote account."
                        },
                        {
                          "key": "epochVoteAccount",
                          "valueShape": {
                            "type": "alias",
                            "value": {
                              "type": "primitive",
                              "value": {
                                "type": "boolean"
                              }
                            }
                          },
                          "description": "Whether the vote account is staked for this epoch."
                        },
                        {
                          "key": "commission",
                          "valueShape": {
                            "type": "alias",
                            "value": {
                              "type": "primitive",
                              "value": {
                                "type": "double"
                              }
                            }
                          },
                          "description": "Percentage of rewards payout owed to the vote account."
                        },
                        {
                          "key": "lastVote",
                          "valueShape": {
                            "type": "alias",
                            "value": {
                              "type": "primitive",
                              "value": {
                                "type": "integer"
                              }
                            }
                          },
                          "description": "Most recent slot voted on by this vote account."
                        },
                        {
                          "key": "epochCredits",
                          "valueShape": {
                            "type": "alias",
                            "value": {
                              "type": "list",
                              "itemShape": {
                                "type": "alias",
                                "value": {
                                  "type": "list",
                                  "itemShape": {
                                    "type": "alias",
                                    "value": {
                                      "type": "primitive",
                                      "value": {
                                        "type": "integer"
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          },
                          "description": "History of earned credits for up to five epochs."
                        },
                        {
                          "key": "rootSlot",
                          "valueShape": {
                            "type": "alias",
                            "value": {
                              "type": "primitive",
                              "value": {
                                "type": "integer"
                              }
                            }
                          },
                          "description": "Current root slot for this vote account."
                        }
                      ]
                    }
                  }
                },
                "description": "List of current vote accounts."
              },
              {
                "key": "delinquent",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "list",
                    "itemShape": {
                      "type": "object",
                      "extends": [],
                      "properties": [
                        {
                          "key": "votePubkey",
                          "valueShape": {
                            "type": "alias",
                            "value": {
                              "type": "primitive",
                              "value": {
                                "type": "string"
                              }
                            }
                          },
                          "description": "Vote account address."
                        },
                        {
                          "key": "nodePubkey",
                          "valueShape": {
                            "type": "alias",
                            "value": {
                              "type": "primitive",
                              "value": {
                                "type": "string"
                              }
                            }
                          },
                          "description": "Validator identity."
                        },
                        {
                          "key": "activatedStake",
                          "valueShape": {
                            "type": "alias",
                            "value": {
                              "type": "primitive",
                              "value": {
                                "type": "integer"
                              }
                            }
                          },
                          "description": "Active stake in lamports delegated to this vote account."
                        },
                        {
                          "key": "epochVoteAccount",
                          "valueShape": {
                            "type": "alias",
                            "value": {
                              "type": "primitive",
                              "value": {
                                "type": "boolean"
                              }
                            }
                          },
                          "description": "Whether the vote account is staked for this epoch."
                        },
                        {
                          "key": "commission",
                          "valueShape": {
                            "type": "alias",
                            "value": {
                              "type": "primitive",
                              "value": {
                                "type": "double"
                              }
                            }
                          },
                          "description": "Percentage of rewards payout owed to the vote account."
                        },
                        {
                          "key": "lastVote",
                          "valueShape": {
                            "type": "alias",
                            "value": {
                              "type": "primitive",
                              "value": {
                                "type": "integer"
                              }
                            }
                          },
                          "description": "Most recent slot voted on by this vote account."
                        },
                        {
                          "key": "epochCredits",
                          "valueShape": {
                            "type": "alias",
                            "value": {
                              "type": "list",
                              "itemShape": {
                                "type": "alias",
                                "value": {
                                  "type": "list",
                                  "itemShape": {
                                    "type": "alias",
                                    "value": {
                                      "type": "primitive",
                                      "value": {
                                        "type": "integer"
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          },
                          "description": "History of earned credits for up to five epochs."
                        },
                        {
                          "key": "rootSlot",
                          "valueShape": {
                            "type": "alias",
                            "value": {
                              "type": "primitive",
                              "value": {
                                "type": "integer"
                              }
                            }
                          },
                          "description": "Current root slot for this vote account."
                        }
                      ]
                    }
                  }
                },
                "description": "List of delinquent vote accounts."
              }
            ]
          }
        }
      ],
      "errors": [],
      "examples": [
        {
          "name": "Example",
          "path": "",
          "pathParameters": {},
          "queryParameters": {},
          "headers": {},
          "requestBody": {
            "type": "json",
            "value": {
              "Configuration": {
                "commitment": "processed",
                "votePubkey": "string",
                "keepUnstakedDelinquents": false,
                "delinquentSlotDistance": 0
              }
            }
          },
          "responseStatusCode": 200,
          "responseBody": {
            "type": "json",
            "value": {
              "current": [
                {
                  "votePubkey": "string",
                  "nodePubkey": "string",
                  "activatedStake": 0,
                  "epochVoteAccount": false,
                  "commission": 0,
                  "lastVote": 0,
                  "epochCredits": [
                    [
                      0
                    ]
                  ],
                  "rootSlot": 0
                }
              ],
              "delinquent": [
                {
                  "votePubkey": "string",
                  "nodePubkey": "string",
                  "activatedStake": 0,
                  "epochVoteAccount": false,
                  "commission": 0,
                  "lastVote": 0,
                  "epochCredits": [
                    [
                      0
                    ]
                  ],
                  "rootSlot": 0
                }
              ]
            }
          }
        }
      ],
      "description": "Returns the account info and associated stake for all voting accounts in the current bank.",
      "operationId": "getVoteAccounts",
      "environments": [],
      "requestHeaders": [],
      "responseHeaders": []
    },
    "isBlockhashValid": {
      "protocol": {
        "type": "openrpc",
        "methodName": "isBlockhashValid"
      },
      "id": "isBlockhashValid",
      "displayName": "isBlockhashValid",
      "method": "POST",
      "path": [
        {
          "type": "pathParameter",
          "value": "apiKey"
        }
      ],
      "pathParameters": [
        {
          "key": "apiKey",
          "valueShape": {
            "type": "alias",
            "value": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          }
        }
      ],
      "queryParameters": [],
      "requests": [
        {
          "contentType": "application/json",
          "body": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "blockhash",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                "description": "The blockhash of the block to evaluate."
              },
              {
                "key": "Configuration",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "object",
                      "extends": [],
                      "properties": [
                        {
                          "key": "blockhash",
                          "valueShape": {
                            "type": "alias",
                            "value": {
                              "type": "primitive",
                              "value": {
                                "type": "string"
                              }
                            }
                          },
                          "description": "The blockhash to evaluate, as a base-58 encoded string."
                        },
                        {
                          "key": "commitment",
                          "valueShape": {
                            "type": "enum",
                            "values": [
                              {
                                "value": "processed"
                              },
                              {
                                "value": "confirmed"
                              },
                              {
                                "value": "finalized"
                              }
                            ]
                          },
                          "description": "Configures the state commitment for querying."
                        },
                        {
                          "key": "minContextSlot",
                          "valueShape": {
                            "type": "alias",
                            "value": {
                              "type": "primitive",
                              "value": {
                                "type": "integer"
                              }
                            }
                          },
                          "description": "The minimum slot that the request can be evaluated at."
                        }
                      ]
                    }
                  }
                },
                "description": "Optional configuration object."
              }
            ]
          }
        }
      ],
      "responses": [
        {
          "statusCode": 200,
          "body": {
            "type": "alias",
            "value": {
              "type": "primitive",
              "value": {
                "type": "boolean"
              }
            }
          }
        }
      ],
      "errors": [],
      "examples": [
        {
          "name": "Example",
          "path": "",
          "pathParameters": {},
          "queryParameters": {},
          "headers": {},
          "requestBody": {
            "type": "json",
            "value": {
              "blockhash": "string",
              "Configuration": {
                "blockhash": "string",
                "commitment": "processed",
                "minContextSlot": 0
              }
            }
          },
          "responseStatusCode": 200,
          "responseBody": {
            "type": "json",
            "value": false
          }
        }
      ],
      "description": "Returns whether a blockhash is still valid or not.",
      "operationId": "isBlockhashValid",
      "environments": [],
      "requestHeaders": [],
      "responseHeaders": []
    },
    "minimumLedgerSlot": {
      "protocol": {
        "type": "openrpc",
        "methodName": "minimumLedgerSlot"
      },
      "id": "minimumLedgerSlot",
      "displayName": "minimumLedgerSlot",
      "method": "POST",
      "path": [
        {
          "type": "pathParameter",
          "value": "apiKey"
        }
      ],
      "pathParameters": [
        {
          "key": "apiKey",
          "valueShape": {
            "type": "alias",
            "value": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          }
        }
      ],
      "queryParameters": [],
      "responses": [
        {
          "statusCode": 200,
          "body": {
            "type": "alias",
            "value": {
              "type": "primitive",
              "value": {
                "type": "integer"
              }
            }
          }
        }
      ],
      "errors": [],
      "examples": [
        {
          "name": "Example",
          "path": "",
          "pathParameters": {},
          "queryParameters": {},
          "headers": {},
          "requestBody": {
            "type": "json",
            "value": {}
          },
          "responseStatusCode": 200,
          "responseBody": {
            "type": "json",
            "value": 0
          }
        }
      ],
      "description": "Returns the lowest slot that the node has information about in its ledger.",
      "operationId": "minimumLedgerSlot",
      "environments": [],
      "requestHeaders": [],
      "responseHeaders": []
    },
    "requestAirdrop": {
      "protocol": {
        "type": "openrpc",
        "methodName": "requestAirdrop"
      },
      "id": "requestAirdrop",
      "displayName": "requestAirdrop",
      "method": "POST",
      "path": [
        {
          "type": "pathParameter",
          "value": "apiKey"
        }
      ],
      "pathParameters": [
        {
          "key": "apiKey",
          "valueShape": {
            "type": "alias",
            "value": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          }
        }
      ],
      "queryParameters": [],
      "requests": [
        {
          "contentType": "application/json",
          "body": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "Pubkey",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                "description": "The Pubkey of the account to receive lamports."
              },
              {
                "key": "Lamports",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                "description": "The number of lamports to airdrop, as a \"u64\"."
              },
              {
                "key": "Configuration",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "object",
                      "extends": [],
                      "properties": [
                        {
                          "key": "commitment",
                          "valueShape": {
                            "type": "enum",
                            "values": [
                              {
                                "value": "processed"
                              },
                              {
                                "value": "confirmed"
                              },
                              {
                                "value": "finalized"
                              }
                            ]
                          },
                          "description": "Configures the state commitment for querying."
                        }
                      ]
                    }
                  }
                },
                "description": "Optional configuration object."
              }
            ]
          }
        }
      ],
      "responses": [
        {
          "statusCode": 200,
          "body": {
            "type": "alias",
            "value": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          }
        }
      ],
      "errors": [],
      "examples": [
        {
          "name": "Example",
          "path": "",
          "pathParameters": {},
          "queryParameters": {},
          "headers": {},
          "requestBody": {
            "type": "json",
            "value": {
              "Pubkey": "string",
              "Lamports": 0,
              "Configuration": {
                "commitment": "processed"
              }
            }
          },
          "responseStatusCode": 200,
          "responseBody": {
            "type": "json",
            "value": "string"
          }
        }
      ],
      "description": "Requests an airdrop of lamports to a Pubkey.",
      "operationId": "requestAirdrop",
      "environments": [],
      "requestHeaders": [],
      "responseHeaders": []
    },
    "sendTransaction": {
      "protocol": {
        "type": "openrpc",
        "methodName": "sendTransaction"
      },
      "id": "sendTransaction",
      "displayName": "sendTransaction",
      "method": "POST",
      "path": [
        {
          "type": "pathParameter",
          "value": "apiKey"
        }
      ],
      "pathParameters": [
        {
          "key": "apiKey",
          "valueShape": {
            "type": "alias",
            "value": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          }
        }
      ],
      "queryParameters": [],
      "requests": [
        {
          "contentType": "application/json",
          "body": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "Transaction",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                "description": "Fully-signed Transaction, as encoded string."
              },
              {
                "key": "Configuration",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "object",
                      "extends": [],
                      "properties": [
                        {
                          "key": "encoding",
                          "valueShape": {
                            "type": "enum",
                            "values": [
                              {
                                "value": "base58"
                              },
                              {
                                "value": "base64"
                              }
                            ],
                            "default": "base58"
                          },
                          "description": "Encoding used for the transaction data."
                        },
                        {
                          "key": "skipPreflight",
                          "valueShape": {
                            "type": "alias",
                            "value": {
                              "type": "primitive",
                              "value": {
                                "type": "boolean",
                                "default": false
                              }
                            }
                          },
                          "description": "Skip preflight transaction checks if `true`."
                        },
                        {
                          "key": "preflightCommitment",
                          "valueShape": {
                            "type": "enum",
                            "values": [
                              {
                                "value": "processed"
                              },
                              {
                                "value": "confirmed"
                              },
                              {
                                "value": "finalized"
                              }
                            ],
                            "default": "finalized"
                          },
                          "description": "Commitment level to use for preflight."
                        },
                        {
                          "key": "maxRetries",
                          "valueShape": {
                            "type": "alias",
                            "value": {
                              "type": "primitive",
                              "value": {
                                "type": "integer"
                              }
                            }
                          },
                          "description": "Maximum retries for the RPC node to send the transaction."
                        },
                        {
                          "key": "minContextSlot",
                          "valueShape": {
                            "type": "alias",
                            "value": {
                              "type": "primitive",
                              "value": {
                                "type": "integer"
                              }
                            }
                          },
                          "description": "The minimum slot that the request can be evaluated at."
                        }
                      ]
                    }
                  }
                },
                "description": "Optional configuration object."
              }
            ]
          }
        }
      ],
      "responses": [
        {
          "statusCode": 200,
          "body": {
            "type": "alias",
            "value": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          }
        }
      ],
      "errors": [],
      "examples": [
        {
          "name": "Example",
          "path": "",
          "pathParameters": {},
          "queryParameters": {},
          "headers": {},
          "requestBody": {
            "type": "json",
            "value": {
              "Transaction": "string",
              "Configuration": {
                "encoding": "base58",
                "skipPreflight": false,
                "preflightCommitment": "processed",
                "maxRetries": 0,
                "minContextSlot": 0
              }
            }
          },
          "responseStatusCode": 200,
          "responseBody": {
            "type": "json",
            "value": "string"
          }
        }
      ],
      "description": "Submits a signed transaction to the cluster for processing.",
      "operationId": "sendTransaction",
      "environments": [],
      "requestHeaders": [],
      "responseHeaders": []
    },
    "simulateTransaction": {
      "protocol": {
        "type": "openrpc",
        "methodName": "simulateTransaction"
      },
      "id": "simulateTransaction",
      "displayName": "simulateTransaction",
      "method": "POST",
      "path": [
        {
          "type": "pathParameter",
          "value": "apiKey"
        }
      ],
      "pathParameters": [
        {
          "key": "apiKey",
          "valueShape": {
            "type": "alias",
            "value": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          }
        }
      ],
      "queryParameters": [],
      "requests": [
        {
          "contentType": "application/json",
          "body": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "Transaction",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                "description": "The transaction to simulate, as an encoded string."
              },
              {
                "key": "Configuration",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "object",
                      "extends": [],
                      "properties": [
                        {
                          "key": "commitment",
                          "valueShape": {
                            "type": "enum",
                            "values": [
                              {
                                "value": "processed"
                              },
                              {
                                "value": "confirmed"
                              },
                              {
                                "value": "finalized"
                              }
                            ],
                            "default": "finalized"
                          },
                          "description": "Configures the state commitment for querying."
                        },
                        {
                          "key": "sigVerify",
                          "valueShape": {
                            "type": "alias",
                            "value": {
                              "type": "primitive",
                              "value": {
                                "type": "boolean",
                                "default": false
                              }
                            }
                          },
                          "description": "If true, the transaction signatures will be verified."
                        },
                        {
                          "key": "replaceRecentBlockhash",
                          "valueShape": {
                            "type": "alias",
                            "value": {
                              "type": "primitive",
                              "value": {
                                "type": "boolean",
                                "default": false
                              }
                            }
                          },
                          "description": "If true, replaces recent blockhash with the most recent one."
                        },
                        {
                          "key": "minContextSlot",
                          "valueShape": {
                            "type": "alias",
                            "value": {
                              "type": "primitive",
                              "value": {
                                "type": "integer"
                              }
                            }
                          },
                          "description": "The minimum slot that the request can be evaluated at."
                        },
                        {
                          "key": "encoding",
                          "valueShape": {
                            "type": "enum",
                            "values": [
                              {
                                "value": "base58"
                              },
                              {
                                "value": "base64"
                              }
                            ],
                            "default": "base58"
                          },
                          "description": "Encoding used for the transaction data."
                        },
                        {
                          "key": "innerInstructions",
                          "valueShape": {
                            "type": "alias",
                            "value": {
                              "type": "primitive",
                              "value": {
                                "type": "boolean",
                                "default": false
                              }
                            }
                          },
                          "description": "If true, includes inner instructions in the response."
                        },
                        {
                          "key": "accounts",
                          "valueShape": {
                            "type": "object",
                            "extends": [],
                            "properties": [
                              {
                                "key": "addresses",
                                "valueShape": {
                                  "type": "alias",
                                  "value": {
                                    "type": "list",
                                    "itemShape": {
                                      "type": "alias",
                                      "value": {
                                        "type": "primitive",
                                        "value": {
                                          "type": "string"
                                        }
                                      }
                                    }
                                  }
                                },
                                "description": "An array of account Pubkeys to return."
                              },
                              {
                                "key": "encoding",
                                "valueShape": {
                                  "type": "enum",
                                  "values": [
                                    {
                                      "value": "base58"
                                    },
                                    {
                                      "value": "base64"
                                    },
                                    {
                                      "value": "base64+zstd"
                                    },
                                    {
                                      "value": "jsonParsed"
                                    }
                                  ],
                                  "default": "base64"
                                },
                                "description": "Encoding for returned account data."
                              }
                            ]
                          }
                        }
                      ]
                    }
                  }
                },
                "description": "Optional configuration object containing additional options."
              }
            ]
          }
        }
      ],
      "responses": [
        {
          "statusCode": 200,
          "body": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "err",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "nullable",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "description": "Error if the transaction failed, null if succeeded."
              },
              {
                "key": "logs",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "list",
                    "itemShape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "description": "Log messages output during execution."
              },
              {
                "key": "accounts",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "list",
                    "itemShape": {
                      "type": "object",
                      "extends": [],
                      "properties": [
                        {
                          "key": "lamports",
                          "valueShape": {
                            "type": "alias",
                            "value": {
                              "type": "primitive",
                              "value": {
                                "type": "integer"
                              }
                            }
                          },
                          "description": "Number of lamports assigned to this account."
                        },
                        {
                          "key": "owner",
                          "valueShape": {
                            "type": "alias",
                            "value": {
                              "type": "primitive",
                              "value": {
                                "type": "string"
                              }
                            }
                          },
                          "description": "Program owner of this account."
                        },
                        {
                          "key": "data",
                          "valueShape": {
                            "type": "alias",
                            "value": {
                              "type": "list",
                              "itemShape": {
                                "type": "alias",
                                "value": {
                                  "type": "primitive",
                                  "value": {
                                    "type": "string"
                                  }
                                }
                              }
                            }
                          },
                          "description": "Account data in the specified encoding format."
                        },
                        {
                          "key": "executable",
                          "valueShape": {
                            "type": "alias",
                            "value": {
                              "type": "primitive",
                              "value": {
                                "type": "boolean"
                              }
                            }
                          },
                          "description": "Indicates if the account contains a program."
                        },
                        {
                          "key": "rentEpoch",
                          "valueShape": {
                            "type": "alias",
                            "value": {
                              "type": "primitive",
                              "value": {
                                "type": "integer"
                              }
                            }
                          },
                          "description": "The epoch at which this account will next owe rent."
                        },
                        {
                          "key": "size",
                          "valueShape": {
                            "type": "alias",
                            "value": {
                              "type": "primitive",
                              "value": {
                                "type": "integer"
                              }
                            }
                          },
                          "description": "The data size of the account."
                        }
                      ]
                    }
                  }
                },
                "description": "Array of account information."
              },
              {
                "key": "unitsConsumed",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                "description": "Compute budget units consumed."
              },
              {
                "key": "returnData",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "nullable",
                    "shape": {
                      "type": "object",
                      "extends": [],
                      "properties": [
                        {
                          "key": "programId",
                          "valueShape": {
                            "type": "alias",
                            "value": {
                              "type": "primitive",
                              "value": {
                                "type": "string"
                              }
                            }
                          },
                          "description": "Program that generated the return data."
                        },
                        {
                          "key": "data",
                          "valueShape": {
                            "type": "alias",
                            "value": {
                              "type": "list",
                              "itemShape": {
                                "type": "alias",
                                "value": {
                                  "type": "primitive",
                                  "value": {
                                    "type": "string"
                                  }
                                }
                              }
                            }
                          },
                          "description": "Return data as base-64 encoded binary data."
                        }
                      ]
                    }
                  }
                }
              },
              {
                "key": "innerInstructions",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "nullable",
                    "shape": {
                      "type": "object",
                      "extends": [],
                      "properties": []
                    }
                  }
                },
                "description": "Inner instructions if `innerInstructions` is true."
              }
            ]
          }
        }
      ],
      "errors": [],
      "examples": [
        {
          "name": "Example",
          "path": "",
          "pathParameters": {},
          "queryParameters": {},
          "headers": {},
          "requestBody": {
            "type": "json",
            "value": {
              "Transaction": "string",
              "Configuration": {
                "commitment": "processed",
                "sigVerify": false,
                "replaceRecentBlockhash": false,
                "minContextSlot": 0,
                "encoding": "base58",
                "innerInstructions": false,
                "accounts": {
                  "addresses": [
                    "string"
                  ],
                  "encoding": "base58"
                }
              }
            }
          },
          "responseStatusCode": 200,
          "responseBody": {
            "type": "json",
            "value": {
              "err": "string",
              "logs": [
                "string"
              ],
              "accounts": [
                {
                  "lamports": 0,
                  "owner": "string",
                  "data": [
                    "string"
                  ],
                  "executable": false,
                  "rentEpoch": 0,
                  "size": 0
                }
              ],
              "unitsConsumed": 0,
              "returnData": {
                "programId": "string",
                "data": [
                  "string"
                ]
              },
              "innerInstructions": {}
            }
          }
        }
      ],
      "description": "Simulates sending a transaction.",
      "operationId": "simulateTransaction",
      "environments": [],
      "requestHeaders": [],
      "responseHeaders": []
    }
  },
  "websockets": {},
  "webhooks": {},
  "subpackages": {},
  "auths": {},
  "globalHeaders": []
}