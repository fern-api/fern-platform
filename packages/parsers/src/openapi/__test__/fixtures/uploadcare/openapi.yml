{
  "openapi": "3.0.0",
  "info":
    {
      "title": "REST API Reference",
      "version": "0.7",
      "description": "REST API provides low-level access to Uploadcare features. You can access files and their metadata, application data, file groups, add-ons, projects, webhooks, document conversion and video encoding.\n\nThe REST API root is `https://api.uploadcare.com/`. Send data via query strings and POST request bodies, and receive JSON responses. All URLs MUST end with a forward slash `/`.\n\nCheck out our [API clients](/docs/integrations/) that cover most of the popular programming languages and frameworks.\n\n# Authentication\n<!-- ReDoc-Inject: <security-definitions> -->\n",
      "contact": { "name": "API support", "email": "help@uploadcare.com" },
      "x-logo":
        {
          "url": "https://ucarecdn.com/06bc72fb-3a5a-4ee7-a19c-b1d02fb9e711/logorestapi.svg",
          "backgroundColor": "#fafafa",
          "altText": "Uploadcare REST API Reference",
        },
      "x-meta":
        {
          "title": "REST API 0.7 Reference — Uploadcare",
          "description": "Complete reference documentation for the Uploadcare REST API 0.7. Covers endpoints, requests, their params, and response examples.",
        },
    },
  "servers": [{ "url": "https://api.uploadcare.com", "description": "Production server" }],
  "tags":
    [
      {
        "name": "Integrations",
        "description": "You don't have to code most of the low-level API interactions.\nWe have high-level [libraries](/docs/integrations/) for all popular platforms:\n* [JavaScript](/docs/integrations/javascript/)\n* [PHP](/docs/integrations/php/)\n* [Python](/docs/integrations/python/) (including Django)\n* [Ruby](/docs/integrations/ruby/) and [Rails](/docs/integrations/rails/)\n* [Swift](/docs/integrations/swift/) (iOS, iPadOS, macOS, tvOS, Linux)\n* [Kotlin](/docs/integrations/android/) (Android)\n* [Java](/docs/integrations/java/)\n* [Golang](/docs/integrations/golang/)\n* [Rust](/docs/integrations/rust/)\n\nIn this API reference, you will see request examples in different languages.\nKeep in mind that running sample queries requires our libraries to be installed and initialized.\n",
      },
      { "name": "File" },
      { "name": "File metadata" },
      { "name": "Group" },
      { "name": "Add-Ons" },
      { "name": "Project" },
      { "name": "Webhook" },
      { "name": "Webhook Callbacks" },
      { "name": "Conversion" },
      {
        "name": "Changelog",
        "description": "### Document conversion info, November 7, 2023\n`GET /convert/document/{uuid}/` allows you to determine the document format and possible conversion formats.\n\nLearn more about [Document conversion](/docs/transformations/document-conversion/).\n\n### Multipage conversion, September 20, 2023\nAdded `save_in_group` parameter to allow `POST /convert/document/` to convert a multi-page document into a group of files.\n\nLearn more about [Multipage conversion](/docs/transformations/document-conversion/#multipage-conversion).\n\n### Webhook updates, July 7, 2023\nAdded a field `initiator` in webhook payload for all events. It contains a \"link\" to the entity that initiated the webhook and metadata related to the event.\n\nAdded new webhook events:\n* `file.info_updated` — file's `metadata` or `appdata` has been altered.\n* `file.deleted` — a file has been removed.\n* `file.stored` — a file has been stored.\n\nLearn more about [Webhook events](/docs/webhooks/#event-types).\n\n### File metadata, September 8, 2022\nFile metadata is introduced. [File metadata Upload API](/docs/api/upload/upload/file-upload-info/#response.body.metadata) provides an option to specify a file's metadata during the file uploading procedure. [File metadata REST API](/docs/api/rest/file-metadata/) provides the ability to update the file's metadata.\n\n<table>\n<tr>\n  <td>GET /files/{uuid}/metadata/</td>\n  <td>Get file's metadata keys and values</td>\n</tr>\n<tr>\n  <td>GET /files/{uuid}/metadata/{key}/</td>\n  <td>Get the value of a single metadata key</td>\n</tr>\n<tr>\n  <td>PUT /files/{uuid}/metadata/{key}/</td>\n  <td>Update the value of a single metadata key. If the key does not exist, it will be created</td>\n</tr>\n<tr>\n  <td>DELETE /files/{uuid}/metadata/{key}/</td>\n  <td>Delete a file's metadata key</td>\n</tr>\n<tr>\n  <td>GET /files/{uuid}/</td>\n</tr>\n</table>\n\nLearn more about [File metadata management](/docs/file-metadata/).\n\n### Changes to previous API version (_released on 15 Aug 2022_)\n<table>\n<tr>\n  <td>GET /files/{uuid}/</td>\n  <td>File information doesn't return `image_info` and `video_info` fields anymore<br /><br />Added mime-type, image (dimensions, format, etc), video information (duration, format, bitrate, etc), audio information, etc. to `content_info` field <br /><br /> Associated field `appdata` that includes <a href=\"/docs/api/rest/file/info/\">dictionary of application names and data</a> with these applications <br /><br />Removed `rekognition_info` in favor of `appdata` <br /><br /> Renamed Parameter `add_fields` to `include`</td>\n</tr>\n<tr>\n  <td>DELETE /files/{uuid}/</td>\n  <td>Removed in favour of `/files/{uuid}/storage/`</td>\n</tr>\n<tr>\n  <td>GET /files/</td>\n  <td>Remove the option of sorting the file list by file size</td>\n</tr>\n<tr>\n  <td>PUT /group/{uuid}/storage/</td>\n  <td>Removed. To store or remove files from a group, query the list of files in it, split the list into chunks of 100 files per chunk and then perform batch file storing or batch file removal for all the chunks</td>\n</tr>\n<tr>\n  <td>DELETE /group/{uuid}/</td>\n  <td>Added a possibility to delete a Group. Note: when we delete a group, we remove information about the group object itself, the files from the group are left intact</td>\n</tr>\n<tr>\n  <td>POST /addons/uc_clamav_virus_scan/execute/</td>\n  <td>Introduced ClamAV Add-On: perform virus scan on a target file</td>\n</tr>\n<tr>\n  <td>GET /addons/uc_clamav_virus_scan/execute/status/</td>\n  <td>Check ClamAV Add-On execution status</td>\n</tr>\n<tr>\n  <td>POST /addons/aws_rekognition_detect_labels /execute/</td>\n  <td>Introduced AWS Rekognition Add-On: detect labels on a target image and save results in the file's application data</td>\n</tr>\n<tr>\n  <td>GET /addons/aws_rekognition_detect_labels /execute/status/</td>\n  <td>Check AWS Rekognition Add-On execution status</td>\n</tr>\n<tr>\n  <td>POST /addons/aws_rekognition_detect_ moderation_labels/execute/</td>\n  <td>Introduced AWS Rekognition moderation Add-On: detect labels on a target image and save results in the file's application data</td>\n</tr>\n<tr>\n  <td>GET /addons/aws_rekognition_detect_ moderation_labels/execute/status/</td>\n  <td>Check AWS Rekognition moderation Add-On execution status</td>\n</tr>\n<tr>\n  <td>POST /addons/remove_bg/execute/</td>\n  <td>Introduced RemoveBG Add-On</td>\n</tr>\n<tr>\n  <td>GET /addons/remove_bg/execute/status/</td>\n  <td>Check RemoveBG Add-On execution status and get `file_id` with an UUID of the file with removed background</td>\n</tr>\n</table>\n",
      },
      {
        "name": "Versioning",
        "description": "When we introduce backward-incompatible changes, we release new major versions.\nOnce published, such versions are supported for _2 years_.\n\n| Version                                               | Date Published | Available Until |\n| ----------------------------------------------------- | -------------- | --------------- |\n| [0.7](/docs/api/rest/)                                | 15 Aug 2022    | TBD             |\n| [0.6](https://uploadcare.com/api-refs/rest-api/v0.6/) | RC             | 15 Aug 2024     |\n| [0.5](https://uploadcare.com/api-refs/rest-api/v0.5/) | 1 Apr 2016     | 15 Aug 2024     |\n| 0.4                                                   | 13 Jun 2015    | 1 Sep 2019      |\n| 0.3                                                   | 11 Jun 2013    | 1 Sep 2019      |\n| 0.2                                                   | 7 Jun 2012     | 1 Sep 2019      |\n| 0.1                                                   | 31 May 2012    | 1 Feb 2019      |\n| Undefined                                             | 31 May 2012    | 1 Sep 2019      |\n\nNote, you won’t be able to use any API version after its support term.\nRequests to deprecated API versions will return error messages.\n",
      },
      {
        "name": "Other APIs",
        "description": "You can find the complete reference documentation for the Upload API [here](/docs/api/upload/) and URL API [here](/docs/api/url/).\n",
      },
    ],
  "security": [{ "apiKeyAuth": [] }],
  "x-fern-global-headers": [
    {
      "type": "string",
      "header": "Authorization",
      "name": "Uploadcare",
      "description": "With the `Uploadcare` authentication method:\n* `auth-param` is a `public_key:signature` pair, where your `secret_key` is used to derive `signature` but is _not included in every request_ itself.\n* You MUST also provide the `Date` header in [RFC2822](https://datatracker.ietf.org/doc/html/rfc2822#section-3.3) format with the time zone set to `GMT` (see the example below).\n* The date you provide MUST NOT exceed the 15-minute offset from the server time of the API endpoint.\n\n```http\nAccept: application/vnd.uploadcare-v0.7+json\nDate: Fri, 30 Sep 2016 11:10:54 GMT\nAuthorization: Uploadcare public_key:6ff75027649aadd4dc98c1f784444445d1e6ed82\n```\n\nThe `signature` part of the `Uploadcare` authentication method `auth-param` MUST be constructed from the following components:\n* Request type (`POST`, `GET`, `HEAD`, `OPTIONS`)\n* Hex md5 hash of the request body\n* `Content-Type` header value\n* `Date` header value\n* URI including path and parameters\n\nThe parameters are then concatenated in textual order using LF: every value sits in a separate line. The result is then signed with [HMAC/SHA1](https://en.wikipedia.org/wiki/HMAC) using your project's `secret_key`.\n\nTake a look at the Python example of deriving `signature`; the example request is made to get a list of files:\n\n```py\nimport time\nimport hashlib\nimport hmac\nfrom email import utils\n\n# Specifying the project’s key\nSECRET_KEY = 'YOUR_SECRET_KEY'\n\n# Specifying request type\nverb = 'GET'\n\n# Calculate [md5](https://en.wikipedia.org/wiki/MD5) checksum for the request's HTTP body.\n# Note: Taking into account that in our example, we are sending an HTTP GET request,\n# and the request does not have anything in its HTTP body, we use an empty string as an input to the md5 hash function.\n# If we were to send an HTTP POST request with, for example, JSON in the request's body,\n# we would have to pass the JSON as the input to the md5 hash function.\ncontent_md5 = hashlib.md5(b'').hexdigest()\n\n# Content-Type header\ncontent_type = 'application/json'\n\n# Current time, e.g. 1541423681\ntimestamp = int(time.time())\n# Date header ('Mon, 05 Nov 2018 13:14:41 GMT')\ndate_header = utils.formatdate(timestamp, usegmt=True)\n\n# The request URI\nuri = '/files/?limit=1&stored=true'\n\n# Forming the final string: concatenating\nsign_string = '\\n'.join([verb, content_md5, content_type, date_header, uri])\n\n# Calculating the signature,\n# the result may look like this: \"3cbc4d2cf91f80c1ba162b926f8a975e8bec7995\"\nsignature = hmac.new(SECRET_KEY.encode(), sign_string.encode(), hashlib.sha1).hexdigest()\n```\n\nOnce `signature` is derived, it SHOULD be implemented into the request body:\n\n```bash\ncurl  \\\n    -H 'Content-Type: application/json' \\\n    -H 'Accept: application/vnd.uploadcare-v0.7+json' \\\n    -H 'Date: Mon, 05 Nov 2018 13:14:41 GMT' \\\n    -H 'Authorization: Uploadcare YOUR_PUBLIC_KEY:SIGNATURE' \\\n    'https://api.uploadcare.com/files/?limit=1&stored=true'\n```\n",
    },
    {
      "type": "string",
      "header": "Authorization",
      "name": "Uploadcare.Simple",
      "description": "Note: We DO NOT recommend using this authentication method in production.\n\nWith the `Uploadcare.Simple` authentication method, `auth-param` is your `public_key:secret_key` pair. Note that in this scheme, your Uploadcare project `secret_key` is  _included in every request as plain text_.\n\n```http\nAccept: application/vnd.uploadcare-v0.7+json\nAuthorization: Uploadcare.Simple public_key:secret_key\n```\n",
    },
  ],
  "paths":
    {
      "/files/":
        {
          "get":
            {
              "tags": ["File"],
              "summary": "List of files",
              "description": "Getting a paginated list of files. If you need multiple results pages, use `previous`/`next` from the response to navigate back/forth.",
              "operationId": "filesList",
              "parameters":
                [
                  { "$ref": "#/components/parameters/acceptHeader" },
                  {
                    "in": "query",
                    "name": "removed",
                    "description": "`true` to only include removed files in the response, `false` to include existing files. Defaults to `false`.",
                    "schema": { "type": "boolean", "default": false, "example": true },
                  },
                  {
                    "in": "query",
                    "name": "stored",
                    "description": "`true` to only include files that were stored, `false` to include temporary ones. The default is unset: both stored and not stored files are returned.",
                    "schema": { "type": "boolean", "example": true },
                  },
                  {
                    "in": "query",
                    "name": "limit",
                    "description": "A preferred amount of files in a list for a single response. Defaults to 100, while the maximum is 1000.",
                    "schema": { "type": "number", "maximum": 1000, "minimum": 1, "example": 100, "default": 100 },
                  },
                  {
                    "in": "query",
                    "name": "ordering",
                    "description": "Specifies the way files are sorted in a returned list. `datetime_uploaded` for ascending order, `-datetime_uploaded` for descending order.",
                    "schema":
                      {
                        "type": "string",
                        "enum": ["datetime_uploaded", "-datetime_uploaded"],
                        "default": "datetime_uploaded",
                        "example": "-datetime_uploaded",
                      },
                  },
                  {
                    "in": "query",
                    "name": "from",
                    "description": "A starting point for filtering the files. If provided, the value MUST adhere to the ISO 8601 Extended Date/Time Format (`YYYY-MM-DDTHH:MM:SSZ`).",
                    "schema": { "type": "string", "example": "2015-09-10T10:00:00Z" },
                  },
                  {
                    "in": "query",
                    "name": "include",
                    "description": "Include additional fields to the file object, such as: appdata.",
                    "schema": { "type": "string" },
                    "example": "appdata",
                  },
                ],
              "responses":
                {
                  "200": { "$ref": "#/components/responses/paginatedFilesResponse" },
                  "400": { "$ref": "#/components/responses/simpleAuthHTTPForbiddenResponse" },
                  "401": { "$ref": "#/components/responses/authorizationProblemsResponse" },
                  "406": { "$ref": "#/components/responses/invalidAcceptHeader" },
                  "429": { "$ref": "#/components/responses/requestWasThrottledError" },
                },
              "x-codeSamples":
                [
                  {
                    "lang": "curl",
                    "label": "curl",
                    "source": "curl -X GET 'https://api.uploadcare.com/files/?limit=10&ordering=-datetime_uploaded&stored=true' -H 'Authorization: Api-Key YOUR_API_KEY'",
                  },
                  {
                    "lang": "JavaScript",
                    "label": "JS",
                    "source": "import {\n  listOfFiles,\n  UploadcareSimpleAuthSchema,\n} from '@uploadcare/rest-client';\n\nconst uploadcareSimpleAuthSchema = new UploadcareSimpleAuthSchema({\n  publicKey: 'YOUR_PUBLIC_KEY',\n  secretKey: 'YOUR_SECRET_KEY',\n});\n\nconst result = await listOfFiles(\n  {},\n  { authSchema: uploadcareSimpleAuthSchema }\n)\n",
                  },
                  {
                    "lang": "PHP",
                    "label": "PHP",
                    "source": "<?php\n$configuration = Uploadcare\\Configuration::create((string) $_ENV['UPLOADCARE_PUBLIC_KEY'], (string) $_ENV['UPLOADCARE_SECRET_KEY']);\n\n$api = (new Uploadcare\\Api($configuration))->file();\n$list = $api->listFiles();\nforeach ($list->getResults() as $result) {\n    echo \\sprintf('URL: %s', $result->getUrl());\n}\nwhile (($next = $api->nextPage($list)) !== null) {\n    foreach ($next->getResults() as $result) {\n        echo \\sprintf('URL: %s', $result->getUrl());\n    }\n}\n",
                  },
                  {
                    "lang": "Python",
                    "label": "Python",
                    "source": "from pyuploadcare import Uploadcare\nuploadcare = Uploadcare(public_key='YOUR_PUBLIC_KEY', secret_key='YOUR_SECRET_KEY')\n\nfiles = uploadcare.list_files(stored=True, limit=10)\nfor file in files:\n    print(file.info)\n",
                  },
                  {
                    "lang": "Ruby",
                    "label": "Ruby",
                    "source": "require 'uploadcare'\nUploadcare.config.public_key = 'YOUR_PUBLIC_KEY'\nUploadcare.config.secret_key = 'YOUR_SECRET_KEY'\n\nlist = Uploadcare::FileList.file_list(stored: true, removed: false, limit: 100)\nlist.each { |file| puts file.inspect }\n",
                  },
                  {
                    "lang": "Swift",
                    "label": "Swift",
                    "source": "import Uploadcare\n\nlet uploadcare = Uploadcare(withPublicKey: \"YOUR_PUBLIC_KEY\", secretKey: \"YOUR_SECRET_KEY\")\n\nlet query = PaginationQuery()\n  .stored(true)\n  .ordering(.dateTimeUploadedDESC)\n  .limit(10)\nvar list = uploadcare.listOfFiles()\n\ntry await list.get(withQuery: query)\nprint(list)\n\n// Next page\nif list.next != nil {\n  try await list.nextPage()\n  print(list)\n}\n\n// Previous page\nif list.previous != nil {\n  try await filesList.previousPage()\n  print(list)\n}\n",
                  },
                  {
                    "lang": "Kotlin",
                    "label": "Kotlin",
                    "source": "import com.uploadcare.android.library.api.UploadcareClient\n\nval uploadcare = UploadcareClient(publicKey = \"YOUR_PUBLIC_KEY\", secretKey = \"YOUR_SECRET_KEY\")\n\nval filesQueryBuilder = uploadcare.getFiles()\nval files = filesQueryBuilder\n    .stored(true)\n    .ordering(Order.UPLOAD_TIME_DESC)\n    .asList()\nLog.d(\"TAG\", files.toString())\n",
                  },
                ],
            },
        },
      "/files/{uuid}/storage/":
        {
          "put":
            {
              "summary": "Store file",
              "description": "Store a single file by UUID. When file is stored, it is available permanently. If not stored — it will only be available for 24 hours. If the parameter is omitted, it checks the `Auto file storing` setting of your Uploadcare project identified by the `public_key` provided in the `auth-param`.",
              "tags": ["File"],
              "operationId": "storeFile",
              "parameters":
                [
                  { "$ref": "#/components/parameters/acceptHeader" },
                  {
                    "in": "path",
                    "name": "uuid",
                    "description": "File UUID.",
                    "required": true,
                    "schema": { "type": "string", "format": "uuid", "example": "21975c81-7f57-4c7a-aef9-acfe28779f78" },
                  },
                ],
              "responses":
                {
                  "200":
                    {
                      "description": "File stored. File info in JSON.",
                      "content": { "application/json": { "schema": { "$ref": "#/components/schemas/file" } } },
                    },
                  "400": { "$ref": "#/components/responses/simpleAuthHTTPForbiddenResponse" },
                  "401": { "$ref": "#/components/responses/authorizationProblemsResponse" },
                  "404": { "$ref": "#/components/responses/fileNotFoundError" },
                  "406": { "$ref": "#/components/responses/invalidAcceptHeader" },
                  "429": { "$ref": "#/components/responses/requestWasThrottledError" },
                },
              "x-codeSamples":
                [
                  {
                    "lang": "JavaScript",
                    "label": "JS",
                    "source": "import {\n  storeFile,\n  UploadcareSimpleAuthSchema,\n} from '@uploadcare/rest-client';\n\nconst uploadcareSimpleAuthSchema = new UploadcareSimpleAuthSchema({\n  publicKey: 'YOUR_PUBLIC_KEY',\n  secretKey: 'YOUR_SECRET_KEY',\n});\n\nconst result = await storeFile(\n  {\n    uuid: '1bac376c-aa7e-4356-861b-dd2657b5bfd2',\n  },\n  { authSchema: uploadcareSimpleAuthSchema }\n)\n",
                  },
                  {
                    "lang": "PHP",
                    "label": "PHP",
                    "source": "<?php\n$configuration = Uploadcare\\Configuration::create((string) $_ENV['UPLOADCARE_PUBLIC_KEY'], (string) $_ENV['UPLOADCARE_SECRET_KEY']);\n\n$api = (new Uploadcare\\Api($configuration))->file();\n$result = $api->storeFile('1bac376c-aa7e-4356-861b-dd2657b5bfd2');\necho \\sprintf('File %s is stored at %s', $result->getUuid(), $result->getDatetimeStored()->format(\\DateTimeInterface::ATOM));\n",
                  },
                  {
                    "lang": "Python",
                    "label": "Python",
                    "source": "from pyuploadcare import Uploadcare\nuploadcare = Uploadcare(public_key='YOUR_PUBLIC_KEY', secret_key='YOUR_SECRET_KEY')\n\nfile = uploadcare.file(\"1bac376c-aa7e-4356-861b-dd2657b5bfd2\")\nfile.store()\n",
                  },
                  {
                    "lang": "Ruby",
                    "label": "Ruby",
                    "source": "require 'uploadcare'\nUploadcare.config.public_key = 'YOUR_PUBLIC_KEY'\nUploadcare.config.secret_key = 'YOUR_SECRET_KEY'\n\nuuid = '1bac376c-aa7e-4356-861b-dd2657b5bfd2'\nUploadcare::File.store(uuid)\n",
                  },
                  {
                    "lang": "Swift",
                    "label": "Swift",
                    "source": "import Uploadcare\n\nlet uploadcare = Uploadcare(withPublicKey: \"YOUR_PUBLIC_KEY\", secretKey: \"YOUR_SECRET_KEY\")\n\nlet file = try await uploadcare.storeFile(withUUID: \"1bac376c-aa7e-4356-861b-dd2657b5bfd2\")\nprint(file)\n",
                  },
                  {
                    "lang": "Kotlin",
                    "label": "Kotlin",
                    "source": "import com.uploadcare.android.library.api.UploadcareClient\n\nval uploadcare = UploadcareClient(publicKey = \"YOUR_PUBLIC_KEY\", secretKey = \"YOUR_SECRET_KEY\")\n\nuploadcare.saveFile(\"1bac376c-aa7e-4356-861b-dd2657b5bfd2\")\n",
                  },
                ],
            },
          "delete":
            {
              "summary": "Delete file",
              "tags": ["File"],
              "description": "Removes individual files. Returns file info.\n\nNote: this operation removes the file from storage but doesn't invalidate CDN cache.\n",
              "operationId": "deleteFileStorage",
              "parameters":
                [
                  { "$ref": "#/components/parameters/acceptHeader" },
                  {
                    "in": "path",
                    "name": "uuid",
                    "description": "File UUID.",
                    "required": true,
                    "schema": { "type": "string", "format": "uuid", "example": "21975c81-7f57-4c7a-aef9-acfe28779f78" },
                  },
                ],
              "responses":
                {
                  "200":
                    {
                      "description": "File deleted. File info in JSON.",
                      "content":
                        {
                          "application/json":
                            {
                              "schema": { "$ref": "#/components/schemas/file" },
                              "examples": { "removed-file": { "$ref": "#/components/examples/file_removed" } },
                            },
                        },
                    },
                  "400": { "$ref": "#/components/responses/simpleAuthHTTPForbiddenResponse" },
                  "401": { "$ref": "#/components/responses/authorizationProblemsResponse" },
                  "404": { "$ref": "#/components/responses/fileNotFoundError" },
                  "406": { "$ref": "#/components/responses/invalidAcceptHeader" },
                  "429": { "$ref": "#/components/responses/requestWasThrottledError" },
                },
              "x-codeSamples":
                [
                  {
                    "lang": "JavaScript",
                    "label": "JS",
                    "source": "import {\n  deleteFile,\n  UploadcareSimpleAuthSchema,\n} from '@uploadcare/rest-client';\n\nconst uploadcareSimpleAuthSchema = new UploadcareSimpleAuthSchema({\n  publicKey: 'YOUR_PUBLIC_KEY',\n  secretKey: 'YOUR_SECRET_KEY',\n});\n\nconst result = await deleteFile(\n  {\n    uuid: '1bac376c-aa7e-4356-861b-dd2657b5bfd2',\n  },\n  { authSchema: uploadcareSimpleAuthSchema }\n)\n",
                  },
                  {
                    "lang": "PHP",
                    "label": "PHP",
                    "source": "<?php\n$configuration = Uploadcare\\Configuration::create((string) $_ENV['UPLOADCARE_PUBLIC_KEY'], (string) $_ENV['UPLOADCARE_SECRET_KEY']);\n\n$fileInfo = (new Uploadcare\\Api($configuration))->file()->deleteFile('1bac376c-aa7e-4356-861b-dd2657b5bfd2');\necho \\sprintf('File \\'%s\\' deleted at \\'%s\\'', $fileInfo->getUuid(), $fileInfo->getDatetimeRemoved()->format(\\DateTimeInterface::ATOM));\n",
                  },
                  {
                    "lang": "Python",
                    "label": "Python",
                    "source": "from pyuploadcare import Uploadcare\nuploadcare = Uploadcare(public_key='YOUR_PUBLIC_KEY', secret_key='YOUR_SECRET_KEY')\n\nfile = uploadcare.file(\"1bac376c-aa7e-4356-861b-dd2657b5bfd2\")\nfile.delete()\n",
                  },
                  {
                    "lang": "Ruby",
                    "label": "Ruby",
                    "source": "require 'uploadcare'\nUploadcare.config.public_key = 'YOUR_PUBLIC_KEY'\nUploadcare.config.secret_key = 'YOUR_SECRET_KEY'\n\nputs Uploadcare::File.delete('1bac376c-aa7e-4356-861b-dd2657b5bfd2')\n",
                  },
                  {
                    "lang": "Swift",
                    "label": "Swift",
                    "source": "import Uploadcare\n\nlet uploadcare = Uploadcare(withPublicKey: \"YOUR_PUBLIC_KEY\", secretKey: \"YOUR_SECRET_KEY\")\n\nlet file = try await uploadcare.deleteFile(withUUID: \"1bac376c-aa7e-4356-861b-dd2657b5bfd2\")\nprint(file)\n",
                  },
                  {
                    "lang": "Kotlin",
                    "label": "Kotlin",
                    "source": "import com.uploadcare.android.library.api.UploadcareClient\n\nval uploadcare = UploadcareClient(publicKey = \"YOUR_PUBLIC_KEY\", secretKey = \"YOUR_SECRET_KEY\")\n\nuploadcare.deleteFile(fileId = \"1bac376c-aa7e-4356-861b-dd2657b5bfd2\")\n",
                  },
                ],
            },
        },
      "/files/{uuid}/":
        {
          "get":
            {
              "summary": "File info",
              "tags": ["File"],
              "description": "Get file information by its UUID (immutable).",
              "operationId": "fileInfo",
              "parameters":
                [
                  { "$ref": "#/components/parameters/acceptHeader" },
                  {
                    "in": "path",
                    "name": "uuid",
                    "description": "File UUID.",
                    "required": true,
                    "schema": { "type": "string", "format": "uuid", "example": "03ccf9ab-f266-43fb-973d-a6529c55c2ae" },
                  },
                  {
                    "in": "query",
                    "name": "include",
                    "description": "Include additional fields to the file object, such as: appdata.",
                    "schema": { "type": "string" },
                    "example": "appdata",
                  },
                ],
              "responses":
                {
                  "200":
                    {
                      "description": "File info in JSON.",
                      "content":
                        {
                          "application/json":
                            {
                              "schema": { "$ref": "#/components/schemas/file" },
                              "examples":
                                {
                                  "Image": { "$ref": "#/components/examples/file" },
                                  "Video": { "$ref": "#/components/examples/file_video" },
                                },
                            },
                        },
                    },
                  "400": { "$ref": "#/components/responses/simpleAuthHTTPForbiddenResponse" },
                  "401": { "$ref": "#/components/responses/authorizationProblemsResponse" },
                  "404": { "$ref": "#/components/responses/fileNotFoundError" },
                  "406": { "$ref": "#/components/responses/invalidAcceptHeader" },
                  "429": { "$ref": "#/components/responses/requestWasThrottledError" },
                },
              "x-codeSamples":
                [
                  {
                    "lang": "JavaScript",
                    "label": "JS",
                    "source": "import {\n  fileInfo,\n  UploadcareSimpleAuthSchema,\n} from '@uploadcare/rest-client';\n\nconst uploadcareSimpleAuthSchema = new UploadcareSimpleAuthSchema({\n  publicKey: 'YOUR_PUBLIC_KEY',\n  secretKey: 'YOUR_SECRET_KEY',\n});\n\nconst result = await fileInfo(\n  {\n    uuid: '1bac376c-aa7e-4356-861b-dd2657b5bfd2',\n  },\n  { authSchema: uploadcareSimpleAuthSchema }\n)\n",
                  },
                  {
                    "lang": "PHP",
                    "label": "PHP",
                    "source": "<?php\n$configuration = Uploadcare\\Configuration::create((string) $_ENV['UPLOADCARE_PUBLIC_KEY'], (string) $_ENV['UPLOADCARE_SECRET_KEY']);\n\n$api = (new Uploadcare\\Api($configuration))->file();\n$fileInfo = $api->fileInfo('1bac376c-aa7e-4356-861b-dd2657b5bfd2');\necho \\sprintf('URL: %s, ID: %s, Mime type: %s', $fileInfo->getUrl(), $fileInfo->getUuid(), $fileInfo->getMimeType());\n",
                  },
                  {
                    "lang": "Python",
                    "label": "Python",
                    "source": "from pyuploadcare import Uploadcare\nuploadcare = Uploadcare(public_key='YOUR_PUBLIC_KEY', secret_key='YOUR_SECRET_KEY')\n\nfile = uploadcare.file(\"1bac376c-aa7e-4356-861b-dd2657b5bfd2\")\nprint(file.info)\n",
                  },
                  {
                    "lang": "Ruby",
                    "label": "Ruby",
                    "source": "require 'uploadcare'\nUploadcare.config.public_key = 'YOUR_PUBLIC_KEY'\nUploadcare.config.secret_key = 'YOUR_SECRET_KEY'\n\nuuid = '1bac376c-aa7e-4356-861b-dd2657b5bfd2'\nputs Uploadcare::File.info(uuid).inspect\n",
                  },
                  {
                    "lang": "Swift",
                    "label": "Swift",
                    "source": "import Uploadcare\n\nlet uploadcare = Uploadcare(withPublicKey: \"YOUR_PUBLIC_KEY\", secretKey: \"YOUR_SECRET_KEY\")\n\nlet fileInfoQuery = FileInfoQuery().include(.appdata)\nlet file = try await uploadcare.fileInfo(withUUID: \"1bac376c-aa7e-4356-861b-dd2657b5bfd2\", withQuery: fileInfoQuery)\nprint(file)\n",
                  },
                  {
                    "lang": "Kotlin",
                    "label": "Kotlin",
                    "source": "import com.uploadcare.android.library.api.UploadcareClient\n\nval uploadcare = UploadcareClient(publicKey = \"YOUR_PUBLIC_KEY\", secretKey = \"YOUR_SECRET_KEY\")\n\nval file = uploadcare.getFile(fileId = \"1bac376c-aa7e-4356-861b-dd2657b5bfd2\")\nLog.d(\"TAG\", file.toString())\n",
                  },
                ],
            },
        },
      "/files/storage/":
        {
          "put":
            {
              "summary": "Batch file storing",
              "description": "Used to store multiple files in one go. Up to 100 files are supported per request. A JSON object holding your File list SHOULD be put into a request body.",
              "operationId": "filesStoring",
              "tags": ["File"],
              "parameters": [{ "$ref": "#/components/parameters/acceptHeader" }],
              "requestBody":
                {
                  "required": true,
                  "content":
                    {
                      "application/json":
                        {
                          "schema":
                            {
                              "type": "array",
                              "items":
                                { "type": "string", "format": "uuid", "description": "List of file UUIDs to store." },
                              "example":
                                ["21975c81-7f57-4c7a-aef9-acfe28779f78", "cbaf2d73-5169-4b2b-a543-496cf2813dff"],
                            },
                        },
                    },
                },
              "responses":
                {
                  "200": { "$ref": "#/components/responses/filesStorageResponse" },
                  "400": { "$ref": "#/components/responses/filesStoreUUIDSError" },
                  "401": { "$ref": "#/components/responses/authorizationProblemsResponse" },
                  "406": { "$ref": "#/components/responses/invalidAcceptHeader" },
                  "429": { "$ref": "#/components/responses/requestWasThrottledError" },
                },
              "x-codeSamples":
                [
                  {
                    "lang": "JavaScript",
                    "label": "JS",
                    "source": "import {\n  storeFiles,\n  UploadcareSimpleAuthSchema,\n} from '@uploadcare/rest-client';\n\nconst uploadcareSimpleAuthSchema = new UploadcareSimpleAuthSchema({\n  publicKey: 'YOUR_PUBLIC_KEY',\n  secretKey: 'YOUR_SECRET_KEY',\n});\n\nconst result = await storeFiles(\n  {\n      uuids: [\n          'b7a301d1-1bd0-473d-8d32-708dd55addc0',\n          '1bac376c-aa7e-4356-861b-dd2657b5bfd2',\n        ]\n  },\n  { authSchema: uploadcareSimpleAuthSchema }\n)\n",
                  },
                  {
                    "lang": "PHP",
                    "label": "PHP",
                    "source": "<?php\n$configuration = Uploadcare\\Configuration::create((string) $_ENV['UPLOADCARE_PUBLIC_KEY'], (string) $_ENV['UPLOADCARE_SECRET_KEY']);\n\nuse Uploadcare\\Interfaces\\File\\FileInfoInterface;\n$api = (new Uploadcare\\Api($configuration))->file();\n$result = $api->batchStoreFile(['b7a301d1-1bd0-473d-8d32-708dd55addc0', '1bac376c-aa7e-4356-861b-dd2657b5bfd2']);\nforeach ($result->getResult() as $result) {\n    if (!$result instanceof FileInfoInterface) {\n        continue;\n    }\n    \\sprintf('Result %s is stored at %s', $result->getUuid(), $result->getDatetimeStored()->format(\\DateTimeInterface::ATOM));\n}\n",
                  },
                  {
                    "lang": "Python",
                    "label": "Python",
                    "source": "from pyuploadcare import Uploadcare\nuploadcare = Uploadcare(public_key='YOUR_PUBLIC_KEY', secret_key='YOUR_SECRET_KEY')\n\nfiles = [\n    'b7a301d1-1bd0-473d-8d32-708dd55addc0',\n    '1bac376c-aa7e-4356-861b-dd2657b5bfd2'\n]\nuploadcare.store_files(files)\n",
                  },
                  {
                    "lang": "Ruby",
                    "label": "Ruby",
                    "source": "require 'uploadcare'\nUploadcare.config.public_key = 'YOUR_PUBLIC_KEY'\nUploadcare.config.secret_key = 'YOUR_SECRET_KEY'\n\nuuids = %w[\n  b7a301d1-1bd0-473d-8d32-708dd55addc0\n  1bac376c-aa7e-4356-861b-dd2657b5bfd2\n]\nUploadcare::FileList.batch_store(uuids)\n",
                  },
                  {
                    "lang": "Swift",
                    "label": "Swift",
                    "source": "import Uploadcare\n\nlet uploadcare = Uploadcare(withPublicKey: \"YOUR_PUBLIC_KEY\", secretKey: \"YOUR_SECRET_KEY\")\n\nlet uuids = [\n  \"b7a301d1-1bd0-473d-8d32-708dd55addc0\",\n  \"1bac376c-aa7e-4356-861b-dd2657b5bfd2\"\n]\nlet response = try await uploadcare.storeFiles(withUUIDs: uuids)\nprint(response)\n",
                  },
                  {
                    "lang": "Kotlin",
                    "label": "Kotlin",
                    "source": "import com.uploadcare.android.library.api.UploadcareClient\n\nval uploadcare = UploadcareClient(publicKey = \"YOUR_PUBLIC_KEY\", secretKey = \"YOUR_SECRET_KEY\")\n\nval uuids = listOf(\n    \"b7a301d1-1bd0-473d-8d32-708dd55addc0\",\n    \"1bac376c-aa7e-4356-861b-dd2657b5bfd2\"\n)\nuploadcare.saveFiles(uuids)\n",
                  },
                ],
            },
          "delete":
            {
              "summary": "Batch file delete",
              "description": "Used to delete multiple files in one go. Up to 100 files are supported per request. A JSON object holding your File list SHOULD be put into a request body.\n\nNote: this operation removes files from storage but doesn't invalidate CDN cache.\n",
              "operationId": "filesDelete",
              "tags": ["File"],
              "parameters": [{ "$ref": "#/components/parameters/acceptHeader" }],
              "requestBody":
                {
                  "required": true,
                  "content":
                    {
                      "application/json":
                        {
                          "schema":
                            {
                              "type": "array",
                              "items":
                                { "type": "string", "format": "uuid", "description": "List of file UUIDs to delete." },
                              "example":
                                ["21975c81-7f57-4c7a-aef9-acfe28779f78", "cbaf2d73-5169-4b2b-a543-496cf2813dff"],
                            },
                        },
                    },
                },
              "responses":
                {
                  "200": { "$ref": "#/components/responses/filesStorageResponse" },
                  "400": { "$ref": "#/components/responses/filesStoreUUIDSError" },
                  "401": { "$ref": "#/components/responses/authorizationProblemsResponse" },
                  "406": { "$ref": "#/components/responses/invalidAcceptHeader" },
                  "429": { "$ref": "#/components/responses/requestWasThrottledError" },
                },
              "x-codeSamples":
                [
                  {
                    "lang": "JavaScript",
                    "label": "JS",
                    "source": "import {\n  deleteFiles,\n  UploadcareSimpleAuthSchema,\n} from '@uploadcare/rest-client';\n\nconst uploadcareSimpleAuthSchema = new UploadcareSimpleAuthSchema({\n  publicKey: 'YOUR_PUBLIC_KEY',\n  secretKey: 'YOUR_SECRET_KEY',\n});\n\nconst result = await deleteFiles(\n  {\n      uuids: [\n          '21975c81-7f57-4c7a-aef9-acfe28779f78',\n          'cbaf2d73-5169-4b2b-a543-496cf2813dff',\n        ]\n  },\n  { authSchema: uploadcareSimpleAuthSchema }\n)\n",
                  },
                  {
                    "lang": "PHP",
                    "label": "PHP",
                    "source": "<?php\n$configuration = Uploadcare\\Configuration::create((string) $_ENV['UPLOADCARE_PUBLIC_KEY'], (string) $_ENV['UPLOADCARE_SECRET_KEY']);\n\n$api = (new Uploadcare\\Api($configuration))->file();\n$fileInfo = $api->fileInfo('21975c81-7f57-4c7a-aef9-acfe28779f78');\n$api->deleteFile($fileInfo);\necho \\sprintf('File \\'%s\\' deleted at \\'%s\\'', $fileInfo->getUuid(), $fileInfo->getDatetimeRemoved()->format(\\DateTimeInterface::ATOM));\n",
                  },
                  {
                    "lang": "Python",
                    "label": "Python",
                    "source": "from pyuploadcare import Uploadcare\nuploadcare = Uploadcare(public_key='YOUR_PUBLIC_KEY', secret_key='YOUR_SECRET_KEY')\n\nfiles = [\n    '21975c81-7f57-4c7a-aef9-acfe28779f78',\n    'cbaf2d73-5169-4b2b-a543-496cf2813dff'\n    ]\nuploadcare.delete_files(files)\n",
                  },
                  {
                    "lang": "Ruby",
                    "label": "Ruby",
                    "source": "require 'uploadcare'\nUploadcare.config.public_key = 'YOUR_PUBLIC_KEY'\nUploadcare.config.secret_key = 'YOUR_SECRET_KEY'\n\nuuids = %w[21975c81-7f57-4c7a-aef9-acfe28779f78 cbaf2d73-5169-4b2b-a543-496cf2813dff]\nputs Uploadcare::FileList.batch_delete(uuids)\n",
                  },
                  {
                    "lang": "Swift",
                    "label": "Swift",
                    "source": "import Uploadcare\n\nlet uploadcare = Uploadcare(withPublicKey: \"YOUR_PUBLIC_KEY\", secretKey: \"YOUR_SECRET_KEY\")\n\nlet uuids = [\"21975c81-7f57-4c7a-aef9-acfe28779f78\", \"cbaf2d73-5169-4b2b-a543-496cf2813dff\"]\ntry await uploadcare.deleteFiles(withUUIDs: uuids)\n",
                  },
                  {
                    "lang": "Kotlin",
                    "label": "Kotlin",
                    "source": "import com.uploadcare.android.library.api.UploadcareClient\n\nval uploadcare = UploadcareClient(publicKey = \"YOUR_PUBLIC_KEY\", secretKey = \"YOUR_SECRET_KEY\")\n\nval uuids = listOf(\"21975c81-7f57-4c7a-aef9-acfe28779f78\", \"cbaf2d73-5169-4b2b-a543-496cf2813dff\")\nuploadcare.deleteFiles(fileIds = uuids)\n",
                  },
                ],
            },
        },
      "/files/local_copy/":
        {
          "post":
            {
              "summary": "Copy file to local storage",
              "description": "POST requests are used to copy original files or their modified versions to a default storage.\n\nSource files MAY either be stored or just uploaded and MUST NOT be deleted.\n\nCopying of large files is not supported at the moment. If the file CDN URL includes transformation operators, its size MUST NOT exceed 100 MB. If not, the size MUST NOT exceed 5 GB.\n",
              "tags": ["File"],
              "operationId": "createLocalCopy",
              "requestBody":
                {
                  "required": true,
                  "content":
                    {
                      "application/json":
                        {
                          "schema":
                            {
                              "required": ["source"],
                              "type": "object",
                              "properties":
                                {
                                  "source":
                                    {
                                      "description": "A CDN URL or just UUID of a file subjected to copy.",
                                      "type": "string",
                                      "format": "uri",
                                      "example":
                                        {
                                          "uuid": { "value": "85b5644f-e692-4855-9db0-8c5a83096e25" },
                                          "cdn":
                                            {
                                              "value": "http://www.ucarecdn.com/85b5644f-e692-4855-9db0-8c5a83096e25/-/resize/200x/roof.jpg",
                                            },
                                        },
                                    },
                                  "store":
                                    {
                                      "description": "The parameter only applies to the Uploadcare storage and MUST be either true or false.",
                                      "type": "string",
                                      "enum": ["true", "false"],
                                      "default": "false",
                                      "example": "true",
                                    },
                                  "metadata":
                                    {
                                      "description": "Arbitrary additional metadata.",
                                      "type": "object",
                                      "example": { "subsystem": "uploader" },
                                    },
                                },
                            },
                          "example":
                            {
                              "source": "03ccf9ab-f266-43fb-973d-a6529c55c2ae",
                              "store": "true",
                              "metadata": { "subsystem": "uploader", "pet": "cat" },
                            },
                        },
                    },
                },
              "parameters": [{ "$ref": "#/components/parameters/acceptHeader" }],
              "responses":
                {
                  "201":
                    {
                      "description": "The file was copied successfully. HTTP response contains `result` field with information about the copy.",
                      "content":
                        { "application/json": { "schema": { "$ref": "#/components/schemas/localCopyResponse" } } },
                    },
                  "400": { "$ref": "#/components/responses/fileCopyErrors" },
                  "401": { "$ref": "#/components/responses/authorizationProblemsResponse" },
                  "406": { "$ref": "#/components/responses/invalidAcceptHeader" },
                  "429": { "$ref": "#/components/responses/requestWasThrottledError" },
                },
              "x-codeSamples":
                [
                  {
                    "lang": "JavaScript",
                    "label": "JS",
                    "source": "import {\n  copyFileToLocalStorage,\n  UploadcareSimpleAuthSchema,\n} from '@uploadcare/rest-client';\n\nconst uploadcareSimpleAuthSchema = new UploadcareSimpleAuthSchema({\n  publicKey: 'YOUR_PUBLIC_KEY',\n  secretKey: 'YOUR_SECRET_KEY',\n});\n\nconst result = await copyFileToLocalStorage(\n  {\n    source: '1bac376c-aa7e-4356-861b-dd2657b5bfd2',\n    store: true,\n  },\n  { authSchema: uploadcareSimpleAuthSchema }\n)\n",
                  },
                  {
                    "lang": "PHP",
                    "label": "PHP",
                    "source": "<?php\n$configuration = Uploadcare\\Configuration::create((string) $_ENV['UPLOADCARE_PUBLIC_KEY'], (string) $_ENV['UPLOADCARE_SECRET_KEY']);\n\n$api = (new Uploadcare\\Api($configuration))->file();\n$fileInfo = $api->copyToLocalStorage('03ccf9ab-f266-43fb-973d-a6529c55c2ae', true);\necho \\sprintf('File \\'%s\\' copied to local storage', $fileInfo->getUuid());\n",
                  },
                  {
                    "lang": "Python",
                    "label": "Python",
                    "source": "from pyuploadcare import Uploadcare\nuploadcare = Uploadcare(public_key='YOUR_PUBLIC_KEY', secret_key='YOUR_SECRET_KEY')\n\nfile = uploadcare.file(\"1bac376c-aa7e-4356-861b-dd2657b5bfd2\")\ncopied_file = file.create_local_copy(store=True)\n",
                  },
                  {
                    "lang": "Ruby",
                    "label": "Ruby",
                    "source": "require 'uploadcare'\nUploadcare.config.public_key = 'YOUR_PUBLIC_KEY'\nUploadcare.config.secret_key = 'YOUR_SECRET_KEY'\n\nsource = '1bac376c-aa7e-4356-861b-dd2657b5bfd2'\ncopied_file = Uploadcare::File.local_copy(source, store: true)\nputs copied_file.uuid\n",
                  },
                  {
                    "lang": "Swift",
                    "label": "Swift",
                    "source": "import Uploadcare\n\nlet uploadcare = Uploadcare(withPublicKey: \"YOUR_PUBLIC_KEY\", secretKey: \"YOUR_SECRET_KEY\")\n\nlet response = try await uploadcare.copyFileToLocalStorage(source: \"1bac376c-aa7e-4356-861b-dd2657b5bfd2\")\nprint(response)\n",
                  },
                  {
                    "lang": "Kotlin",
                    "label": "Kotlin",
                    "source": "import com.uploadcare.android.library.api.UploadcareClient\n\nval uploadcare = UploadcareClient(publicKey = \"YOUR_PUBLIC_KEY\", secretKey = \"YOUR_SECRET_KEY\")\n\nval copyFile = uploadcare.copyFileLocalStorage(source = \"1bac376c-aa7e-4356-861b-dd2657b5bfd2\")\nLog.d(\"TAG\", copyFile.toString())\n",
                  },
                ],
            },
        },
      "/files/remote_copy/":
        {
          "post":
            {
              "summary": "Copy file to remote storage",
              "description": "POST requests are used to copy original files or their modified versions to a custom storage.\n\nSource files MAY either be stored or just uploaded and MUST NOT be deleted.\n\nCopying of large files is not supported at the moment. File size MUST NOT exceed 5 GB.\n",
              "tags": ["File"],
              "operationId": "createRemoteCopy",
              "requestBody":
                {
                  "required": true,
                  "content":
                    {
                      "application/json":
                        {
                          "schema":
                            {
                              "required": ["source", "target"],
                              "type": "object",
                              "properties":
                                {
                                  "source":
                                    {
                                      "description": "A CDN URL or just UUID of a file subjected to copy.",
                                      "type": "string",
                                      "format": "uri",
                                      "example":
                                        {
                                          "uuid": { "value": "85b5644f-e692-4855-9db0-8c5a83096e25" },
                                          "cdn":
                                            {
                                              "value": "http://www.ucarecdn.com/85b5644f-e692-4855-9db0-8c5a83096e25/-/resize/200x/roof.jpg",
                                            },
                                        },
                                    },
                                  "target":
                                    {
                                      "description": "Identifies a custom storage name related to your project. It implies that you are copying a file to a specified custom storage. Keep in mind that you can have multiple storages associated with a single S3 bucket.",
                                      "type": "string",
                                      "example": "mytarget",
                                    },
                                  "make_public":
                                    {
                                      "description": "MUST be either `true` or `false`. The `true` value makes copied files available via public links, `false` does the opposite.",
                                      "type": "boolean",
                                      "default": true,
                                      "example": true,
                                    },
                                  "pattern":
                                    {
                                      "description": "The parameter is used to specify file names Uploadcare passes to a custom storage. If the parameter is omitted, your custom storages pattern is used. Use any combination of allowed values.\n\nParameter values:\n- `${default}` = `${uuid}/${auto_filename}`\n- `${auto_filename}` = `${filename}${effects}${ext}`\n- `${effects}` = processing operations put into a CDN URL\n- `${filename}` = original filename without extension\n- `${uuid}` = file UUID\n- `${ext}` = file extension, including period, e.g. .jpg\n",
                                      "type": "string",
                                      "default": "${default}",
                                      "enum":
                                        [
                                          "${default}",
                                          "${auto_filename}",
                                          "${effects}",
                                          "${filename}",
                                          "${uuid}",
                                          "${ext}",
                                        ],
                                      "example": "${uuid}.${ext}",
                                    },
                                },
                            },
                          "example": { "source": "03ccf9ab-f266-43fb-973d-a6529c55c2ae", "target": "mytarget" },
                        },
                    },
                },
              "parameters": [{ "$ref": "#/components/parameters/acceptHeader" }],
              "responses":
                {
                  "200": { "$ref": "#/components/responses/remoteCopyResponse" },
                  "201": { "$ref": "#/components/responses/remoteCopyResponse201" },
                  "400":
                    {
                      "description": "Simple HTTP auth. on HTTP or file copy errors.",
                      "content":
                        {
                          "application/json":
                            {
                              "schema":
                                {
                                  "oneOf":
                                    [
                                      { "$ref": "#/components/schemas/simpleAuthHTTPForbidden" },
                                      {
                                        "$ref": "#/components/responses/fileCopyErrors/content/application~1json/schema",
                                      },
                                    ],
                                },
                              "examples":
                                {
                                  "auth-errors": { "$ref": "#/components/examples/simpleAuthHTTPForbidden" },
                                  "copy-error":
                                    { "value": { "detail": "Bad `source` parameter. Use UUID or CDN URL." } },
                                },
                            },
                        },
                    },
                  "401": { "$ref": "#/components/responses/authorizationProblemsResponse" },
                  "406": { "$ref": "#/components/responses/invalidAcceptHeader" },
                  "429": { "$ref": "#/components/responses/requestWasThrottledError" },
                },
              "x-codeSamples":
                [
                  {
                    "lang": "JavaScript",
                    "label": "JS",
                    "source": "import {\n  copyFileToRemoteStorage,\n  UploadcareSimpleAuthSchema,\n} from '@uploadcare/rest-client';\n\nconst uploadcareSimpleAuthSchema = new UploadcareSimpleAuthSchema({\n  publicKey: 'YOUR_PUBLIC_KEY',\n  secretKey: 'YOUR_SECRET_KEY',\n});\n\nconst result = await copyFileToRemoteStorage(\n  {\n    source: '1bac376c-aa7e-4356-861b-dd2657b5bfd2',\n    target: 'custom_storage_connected_to_the_project',\n  },\n  { authSchema: uploadcareSimpleAuthSchema }\n)\n",
                  },
                  {
                    "lang": "PHP",
                    "label": "PHP",
                    "source": "<?php\n$configuration = Uploadcare\\Configuration::create((string) $_ENV['UPLOADCARE_PUBLIC_KEY'], (string) $_ENV['UPLOADCARE_SECRET_KEY']);\n\n$api = (new Uploadcare\\Api($configuration))->file();\n$result = $api->copyToRemoteStorage('03ccf9ab-f266-43fb-973d-a6529c55c2ae', true);\necho \\sprintf('File \\'%s\\' copied to local storage', $result);\n",
                  },
                  {
                    "lang": "Python",
                    "label": "Python",
                    "source": "from pyuploadcare import Uploadcare\nuploadcare = Uploadcare(public_key='YOUR_PUBLIC_KEY', secret_key='YOUR_SECRET_KEY')\n\nfile = uploadcare.file(\"1bac376c-aa7e-4356-861b-dd2657b5bfd2\")\nr_copied_file = file.create_remote_copy(\n    target='custom_storage_connected_to_the_project',\n    make_public=True,\n    pattern='${uuid}/${filename}${ext}',\n)\n",
                  },
                  {
                    "lang": "Ruby",
                    "label": "Ruby",
                    "source": "require 'uploadcare'\nUploadcare.config.public_key = 'YOUR_PUBLIC_KEY'\nUploadcare.config.secret_key = 'YOUR_SECRET_KEY'\n\nsource_object = '1bac376c-aa7e-4356-861b-dd2657b5bfd2'\ntarget = 'custom_storage_connected_to_the_project'\ncopied_file_url = Uploadcare::File.remote_copy(source_object, target, make_public: true)\nputs copied_file_url\n",
                  },
                  {
                    "lang": "Swift",
                    "label": "Swift",
                    "source": "import Uploadcare\n\nlet uploadcare = Uploadcare(withPublicKey: \"YOUR_PUBLIC_KEY\", secretKey: \"YOUR_SECRET_KEY\")\n\nlet response = try await uploadcare.copyFileToRemoteStorage(source: \"03ccf9ab-f266-43fb-973d-a6529c55c2ae\", target: \"mytarget\", pattern: .uuid)\nprint(response)\n",
                  },
                  {
                    "lang": "Kotlin",
                    "label": "Kotlin",
                    "source": "import com.uploadcare.android.library.api.UploadcareClient\n\nval uploadcare = UploadcareClient(publicKey = \"YOUR_PUBLIC_KEY\", secretKey = \"YOUR_SECRET_KEY\")\n\nval copyFile = uploadcare.copyFileRemoteStorage(\n    source = \"1bac376c-aa7e-4356-861b-dd2657b5bfd2\",\n    target = \"custom_storage_connected_to_the_project\"\n)\nLog.d(\"TAG\", copyFile.toString())\n",
                  },
                ],
            },
        },
      "/addons/aws_rekognition_detect_labels/execute/":
        {
          "post":
            {
              "summary": "Execute AWS Rekognition",
              "description": "An `Add-On` is an application implemented by Uploadcare that accepts uploaded files as an\ninput and can produce other files and/or [appdata](/docs/api/rest/file/info/#response.body.appdata) as an output.\n\nExecute [AWS Rekognition](https://docs.aws.amazon.com/rekognition/latest/dg/labels-detect-labels-image.html) Add-On for a given target to detect labels in images. **Note:** Detected labels are stored in the file's appdata.\n",
              "tags": ["Add-Ons"],
              "operationId": "awsRekognitionExecute",
              "parameters": [{ "$ref": "#/components/parameters/acceptHeader" }],
              "requestBody":
                {
                  "required": true,
                  "content":
                    {
                      "application/json":
                        {
                          "schema":
                            {
                              "type": "object",
                              "properties":
                                {
                                  "target":
                                    {
                                      "description": "Unique ID of the file to process",
                                      "type": "string",
                                      "format": "uuid",
                                      "example": "21975c81-7f57-4c7a-aef9-acfe28779f78",
                                    },
                                },
                              "required": ["target"],
                            },
                        },
                    },
                },
              "responses":
                {
                  "200": { "$ref": "#/components/responses/executeAddonResponse" },
                  "400": { "$ref": "#/components/responses/simpleAuthHTTPForbiddenResponse" },
                  "401": { "$ref": "#/components/responses/authorizationProblemsResponse" },
                  "406": { "$ref": "#/components/responses/invalidAcceptHeader" },
                  "409": { "$ref": "#/components/responses/executeAddonConcurrentCallResponse" },
                  "429": { "$ref": "#/components/responses/requestWasThrottledError" },
                },
              "x-codeSamples":
                [
                  {
                    "lang": "PHP",
                    "label": "PHP",
                    "source": "<?php\n$configuration = Uploadcare\\Configuration::create((string) $_ENV['UPLOADCARE_PUBLIC_KEY'], (string) $_ENV['UPLOADCARE_SECRET_KEY']);\n\n$api = (new Uploadcare\\Api($configuration))->addons();\n$resultKey = $api->requestAwsRecognition('1bac376c-aa7e-4356-861b-dd2657b5bfd2');\necho \\sprintf('Recognition requested. Key is \\'%s\\'', $resultKey);\n",
                  },
                  {
                    "lang": "Python",
                    "label": "Python",
                    "source": "from pyuploadcare import Uploadcare\nuploadcare = Uploadcare(public_key='YOUR_PUBLIC_KEY', secret_key='YOUR_SECRET_KEY')\n\ntarget_file = uploadcare.file(\"1bac376c-aa7e-4356-861b-dd2657b5bfd2\")\naws_recognition_result = uploadcare.addons_api.execute(\n    target_file,\n    AddonLabels.AWS_LABEL_RECOGNITION,\n)\n",
                  },
                  {
                    "lang": "Ruby",
                    "label": "Ruby",
                    "source": "require 'uploadcare'\nUploadcare.config.public_key = 'YOUR_PUBLIC_KEY'\nUploadcare.config.secret_key = 'YOUR_SECRET_KEY'\n\nuuid = '1bac376c-aa7e-4356-861b-dd2657b5bfd2'\nUploadcare::Addons.ws_rekognition_detect_labels(uuid)\n",
                  },
                  {
                    "lang": "Swift",
                    "label": "Swift",
                    "source": "import Uploadcare\n\nlet uploadcare = Uploadcare(withPublicKey: \"YOUR_PUBLIC_KEY\", secretKey: \"YOUR_SECRET_KEY\")\n\nlet response = try await uploadcare.executeAWSRekognition(fileUUID: \"1bac376c-aa7e-4356-861b-dd2657b5bfd2\")\nprint(response) // contains requestID\n\n// Execute and wait for completion:\nlet status = try await uploadcare.performAWSRekognition(fileUUID: \"1bac376c-aa7e-4356-861b-dd2657b5bfd2\")\nprint(status)\n",
                  },
                  {
                    "lang": "Kotlin",
                    "label": "Kotlin",
                    "source": "import com.uploadcare.android.library.api.UploadcareClient\n\nval uploadcare = UploadcareClient(publicKey = \"YOUR_PUBLIC_KEY\", secretKey = \"YOUR_SECRET_KEY\")\n\nval addOn = AWSRekognitionAddOn(uploadcare)\nval response = addOn.execute(fileId = \"1bac376c-aa7e-4356-861b-dd2657b5bfd2\")\nLog.d(\"TAG\", response.toString())\n",
                  },
                ],
            },
        },
      "/addons/aws_rekognition_detect_labels/execute/status/":
        {
          "get":
            {
              "summary": "Check AWS Rekognition execution status",
              "description": "Check the status of an Add-On execution request that had been started\nusing the [Execute Add-On](/docs/api/rest/add-ons/aws-rekognition-execute/) operation.\n",
              "tags": ["Add-Ons"],
              "operationId": "awsRekognitionExecutionStatus",
              "parameters":
                [
                  { "$ref": "#/components/parameters/acceptHeader" },
                  {
                    "in": "query",
                    "name": "request_id",
                    "description": "Request ID returned by the Add-On execution request described above.\n",
                    "schema": { "type": "string", "format": "uuid" },
                    "required": true,
                  },
                ],
              "responses":
                {
                  "200": { "$ref": "#/components/responses/addonExecutionStatusResponse" },
                  "400": { "$ref": "#/components/responses/simpleAuthHTTPForbiddenResponse" },
                  "401": { "$ref": "#/components/responses/authorizationProblemsResponse" },
                  "406": { "$ref": "#/components/responses/invalidAcceptHeader" },
                },
              "x-codeSamples":
                [
                  {
                    "lang": "PHP",
                    "label": "PHP",
                    "source": "<?php\n$configuration = Uploadcare\\Configuration::create((string) $_ENV['UPLOADCARE_PUBLIC_KEY'], (string) $_ENV['UPLOADCARE_SECRET_KEY']);\n\n$api = (new Uploadcare\\Api($configuration))->addons();\n$status = $api->checkAwsRecognition('request-id');\necho \\sprintf('Recognition status: %s', $status);\n",
                  },
                  {
                    "lang": "Python",
                    "label": "Python",
                    "source": "from pyuploadcare import Uploadcare\nuploadcare = Uploadcare(public_key='YOUR_PUBLIC_KEY', secret_key='YOUR_SECRET_KEY')\n\naddon_task_status = uploadcare.addons_api.status(request_id, AddonLabels.AWS_LABEL_RECOGNITION)\nprint(addon_task_status)\n",
                  },
                  {
                    "lang": "Ruby",
                    "label": "Ruby",
                    "source": "require 'uploadcare'\nUploadcare.config.public_key = 'YOUR_PUBLIC_KEY'\nUploadcare.config.secret_key = 'YOUR_SECRET_KEY'\n\nrequest_id = 'd1fb31c6-ed34-4e21-bdc3-4f1485f58e21'\nresult = Uploadcare::Addons.ws_rekognition_detect_labels_status(request_id)\nputs result.status\n",
                  },
                  {
                    "lang": "Swift",
                    "label": "Swift",
                    "source": "import Uploadcare\n\nlet uploadcare = Uploadcare(withPublicKey: \"YOUR_PUBLIC_KEY\", secretKey: \"YOUR_SECRET_KEY\")\n\nlet status = try await uploadcare.checkAWSRekognitionStatus(requestID: \"requestID\")\nprint(status)\n",
                  },
                  {
                    "lang": "Kotlin",
                    "label": "Kotlin",
                    "source": "import com.uploadcare.android.library.api.UploadcareClient\n\nval uploadcare = UploadcareClient(publicKey = \"YOUR_PUBLIC_KEY\", secretKey = \"YOUR_SECRET_KEY\")\n\nval addOn = AWSRekognitionAddOn(uploadcare)\nval status = addOn.check(requestId = \"d1fb31c6-ed34-4e21-bdc3-4f1485f58e21\")\nLog.d(\"TAG\", status.toString())\n",
                  },
                ],
            },
        },
      "/addons/aws_rekognition_detect_moderation_labels/execute/":
        {
          "post":
            {
              "summary": "Execute AWS Rekognition Moderation",
              "description": "Execute [AWS Rekognition Moderation](https://docs.aws.amazon.com/rekognition/latest/dg/moderation.html) Add-On for a given target to detect moderation labels in images. **Note:** Detected moderation labels are stored in the file's appdata.",
              "tags": ["Add-Ons"],
              "operationId": "awsRekognitionDetectModerationLabelsExecute",
              "parameters": [{ "$ref": "#/components/parameters/acceptHeader" }],
              "requestBody":
                {
                  "required": true,
                  "content":
                    {
                      "application/json":
                        {
                          "schema":
                            {
                              "type": "object",
                              "properties":
                                {
                                  "target":
                                    {
                                      "description": "Unique ID of the file to process",
                                      "type": "string",
                                      "format": "uuid",
                                      "example": "21975c81-7f57-4c7a-aef9-acfe28779f78",
                                    },
                                },
                              "required": ["target"],
                            },
                        },
                    },
                },
              "responses":
                {
                  "200": { "$ref": "#/components/responses/executeAddonResponse" },
                  "400": { "$ref": "#/components/responses/simpleAuthHTTPForbiddenResponse" },
                  "401": { "$ref": "#/components/responses/authorizationProblemsResponse" },
                  "406": { "$ref": "#/components/responses/invalidAcceptHeader" },
                  "409": { "$ref": "#/components/responses/executeAddonConcurrentCallResponse" },
                  "429": { "$ref": "#/components/responses/requestWasThrottledError" },
                },
              "x-codeSamples":
                [
                  {
                    "lang": "PHP",
                    "label": "PHP",
                    "source": "<?php\n$configuration = Uploadcare\\Configuration::create((string) $_ENV['UPLOADCARE_PUBLIC_KEY'], (string) $_ENV['UPLOADCARE_SECRET_KEY']);\n\n$api = (new Uploadcare\\Api($configuration))->addons();\n$resultKey = $api->requestAwsRecognitionModeration('1bac376c-aa7e-4356-861b-dd2657b5bfd2');\necho \\sprintf('Recognition requested. Key is \\'%s\\'', $resultKey);\n",
                  },
                  {
                    "lang": "Python",
                    "label": "Python",
                    "source": "from pyuploadcare import Uploadcare\nuploadcare = Uploadcare(public_key='YOUR_PUBLIC_KEY', secret_key='YOUR_SECRET_KEY')\n\ntarget_file = uploadcare.file(\"1bac376c-aa7e-4356-861b-dd2657b5bfd2\")\naws_recognition_result = uploadcare.addons_api.execute(\n    target_file,\n    AddonLabels.AWS_MODERATION_LABELS,\n)\n",
                  },
                  {
                    "lang": "Ruby",
                    "label": "Ruby",
                    "source": "require 'uploadcare'\nUploadcare.config.public_key = 'YOUR_PUBLIC_KEY'\nUploadcare.config.secret_key = 'YOUR_SECRET_KEY'\n\nuuid = '1bac376c-aa7e-4356-861b-dd2657b5bfd2'\nUploadcare::Addons.ws_rekognition_detect_moderation_labels(uuid)\n",
                  },
                  {
                    "lang": "Swift",
                    "label": "Swift",
                    "source": "import Uploadcare\n\nlet uploadcare = Uploadcare(withPublicKey: \"YOUR_PUBLIC_KEY\", secretKey: \"YOUR_SECRET_KEY\")\n\nlet response = try await uploadcare.executeAWSRekognitionModeration(fileUUID: \"1bac376c-aa7e-4356-861b-dd2657b5bfd2\")\nprint(response) // contains requestID\n\n// Execute and wait for completion:\nlet status = try await uploadcare.performAWSRekognitionModeration(fileUUID: \"1bac376c-aa7e-4356-861b-dd2657b5bfd2\")\nprint(status)\n",
                  },
                  {
                    "lang": "Kotlin",
                    "label": "Kotlin",
                    "source": "import com.uploadcare.android.library.api.UploadcareClient\n\nval uploadcare = UploadcareClient(publicKey = \"YOUR_PUBLIC_KEY\", secretKey = \"YOUR_SECRET_KEY\")\n\nval addOn = AWSRekognitionModerationAddOn(uploadcare)\nval response = addOn.execute(fileId = \"1bac376c-aa7e-4356-861b-dd2657b5bfd2\")\nLog.d(\"TAG\", response.toString())\n",
                  },
                ],
            },
        },
      "/addons/aws_rekognition_detect_moderation_labels/execute/status/":
        {
          "get":
            {
              "summary": "Check AWS Rekognition Moderation execution status",
              "description": "Check the status of an Add-On execution request that had been started\nusing the [Execute Add-On](/docs/api/rest/add-ons/aws-rekognition-detect-moderation-labels-execution-status/) operation.\n",
              "tags": ["Add-Ons"],
              "operationId": "awsRekognitionDetectModerationLabelsExecutionStatus",
              "parameters":
                [
                  { "$ref": "#/components/parameters/acceptHeader" },
                  {
                    "in": "query",
                    "name": "request_id",
                    "description": "Request ID returned by the Add-On execution request described above.\n",
                    "schema": { "type": "string", "format": "uuid" },
                    "required": true,
                  },
                ],
              "responses":
                {
                  "200": { "$ref": "#/components/responses/addonExecutionStatusResponse" },
                  "400": { "$ref": "#/components/responses/simpleAuthHTTPForbiddenResponse" },
                  "401": { "$ref": "#/components/responses/authorizationProblemsResponse" },
                  "406": { "$ref": "#/components/responses/invalidAcceptHeader" },
                },
              "x-codeSamples":
                [
                  {
                    "lang": "PHP",
                    "label": "PHP",
                    "source": "<?php\n$configuration = Uploadcare\\Configuration::create((string) $_ENV['UPLOADCARE_PUBLIC_KEY'], (string) $_ENV['UPLOADCARE_SECRET_KEY']);\n\n$api = (new Uploadcare\\Api($configuration))->addons();\n$status = $api->checkAwsRecognitionModeration('request-id');\necho \\sprintf('Recognition status: %s', $status);\n",
                  },
                  {
                    "lang": "Python",
                    "label": "Python",
                    "source": "from pyuploadcare import Uploadcare\nuploadcare = Uploadcare(public_key='YOUR_PUBLIC_KEY', secret_key='YOUR_SECRET_KEY')\n\naddon_task_status = uploadcare.addons_api.status(request_id, AddonLabels.AWS_MODERATION_LABEL)\nprint(addon_task_status)\n",
                  },
                  {
                    "lang": "Ruby",
                    "label": "Ruby",
                    "source": "require 'uploadcare'\nUploadcare.config.public_key = 'YOUR_PUBLIC_KEY'\nUploadcare.config.secret_key = 'YOUR_SECRET_KEY'\n\nrequest_id = 'd1fb31c6-ed34-4e21-bdc3-4f1485f58e21'\nresult = Uploadcare::Addons.ws_rekognition_detect_moderation_labels_status(request_id)\nputs result.status\n",
                  },
                  {
                    "lang": "Swift",
                    "label": "Swift",
                    "source": "import Uploadcare\n\nlet uploadcare = Uploadcare(withPublicKey: \"YOUR_PUBLIC_KEY\", secretKey: \"YOUR_SECRET_KEY\")\n\nlet status = try await uploadcare.checkAWSRekognitionModerationStatus(requestID: \"requestID\")\nprint(status)\n",
                  },
                  {
                    "lang": "Kotlin",
                    "label": "Kotlin",
                    "source": "import com.uploadcare.android.library.api.UploadcareClient\n\nval uploadcare = UploadcareClient(publicKey = \"YOUR_PUBLIC_KEY\", secretKey = \"YOUR_SECRET_KEY\")\n\nval addOn = AWSRekognitionModerationAddOn(uploadcare)\nval status = addOn.check(requestId = \"d1fb31c6-ed34-4e21-bdc3-4f1485f58e21\")\nLog.d(\"TAG\", status.toString())\n",
                  },
                ],
            },
        },
      "/addons/uc_clamav_virus_scan/execute/":
        {
          "post":
            {
              "summary": "Execute ClamAV",
              "description": "Execute [ClamAV](https://www.clamav.net/) virus checking Add-On for a given target.",
              "tags": ["Add-Ons"],
              "operationId": "ucClamavVirusScanExecute",
              "parameters": [{ "$ref": "#/components/parameters/acceptHeader" }],
              "requestBody":
                {
                  "required": true,
                  "content":
                    {
                      "application/json":
                        {
                          "schema":
                            {
                              "type": "object",
                              "properties":
                                {
                                  "target":
                                    {
                                      "description": "Unique ID of the file to process",
                                      "type": "string",
                                      "format": "uuid",
                                      "example": "21975c81-7f57-4c7a-aef9-acfe28779f78",
                                    },
                                  "params":
                                    {
                                      "description": "Optional object with Add-On specific parameters",
                                      "type": "object",
                                      "default": {},
                                      "properties":
                                        {
                                          "purge_infected":
                                            {
                                              "type": "boolean",
                                              "description": "Purge infected file.",
                                              "example": true,
                                            },
                                        },
                                      "example": { "purge_infected": true },
                                    },
                                },
                              "required": ["target"],
                            },
                        },
                    },
                },
              "responses":
                {
                  "200": { "$ref": "#/components/responses/executeAddonResponse" },
                  "400": { "$ref": "#/components/responses/simpleAuthHTTPForbiddenResponse" },
                  "401": { "$ref": "#/components/responses/authorizationProblemsResponse" },
                  "406": { "$ref": "#/components/responses/invalidAcceptHeader" },
                  "409": { "$ref": "#/components/responses/executeAddonConcurrentCallResponse" },
                  "429": { "$ref": "#/components/responses/requestWasThrottledError" },
                },
              "x-codeSamples":
                [
                  {
                    "lang": "JavaScript",
                    "label": "JS",
                    "source": "import {\n  executeAddon,\n  AddonName,\n  UploadcareSimpleAuthSchema,\n} from '@uploadcare/rest-client';\n\nconst uploadcareSimpleAuthSchema = new UploadcareSimpleAuthSchema({\n  publicKey: 'YOUR_PUBLIC_KEY',\n  secretKey: 'YOUR_SECRET_KEY',\n});\n\nconst result = await executeAddon(\n  {\n    addonName: AddonName.UC_CLAMAV_VIRUS_SCAN,\n    target: '1bac376c-aa7e-4356-861b-dd2657b5bfd2',\n  },\n  { authSchema: uploadcareSimpleAuthSchema }\n)\n",
                  },
                  {
                    "lang": "PHP",
                    "label": "PHP",
                    "source": "<?php\n$configuration = Uploadcare\\Configuration::create((string) $_ENV['UPLOADCARE_PUBLIC_KEY'], (string) $_ENV['UPLOADCARE_SECRET_KEY']);\n\n$api = (new Uploadcare\\Api($configuration))->addons();\n$resultKey = $api->requestAntivirusScan('21975c81-7f57-4c7a-aef9-acfe28779f78');\necho \\sprintf('Antivirus scan requested. Key is \\'%s\\'', $resultKey);\n",
                  },
                  {
                    "lang": "Python",
                    "label": "Python",
                    "source": "from pyuploadcare import Uploadcare\nuploadcare = Uploadcare(public_key='YOUR_PUBLIC_KEY', secret_key='YOUR_SECRET_KEY')\n\nclamav_params = AddonClamAVExecutionParams(purge_infected=True)\ntarget_file = uploadcare.file(\"1bac376c-aa7e-4356-861b-dd2657b5bfd2\")\nclamav_result = uploadcare.addons_api.execute(\n    target_file.uuid,\n    AddonLabels.CLAM_AV,\n    clamav_params\n)\n",
                  },
                  {
                    "lang": "Ruby",
                    "label": "Ruby",
                    "source": "require 'uploadcare'\nUploadcare.config.public_key = 'YOUR_PUBLIC_KEY'\nUploadcare.config.secret_key = 'YOUR_SECRET_KEY'\n\nuuid = '1bac376c-aa7e-4356-861b-dd2657b5bfd2'\nUploadcare::Addons.uc_clamav_virus_scan(uuid, purge_infected: true)\n",
                  },
                  {
                    "lang": "Swift",
                    "label": "Swift",
                    "source": "import Uploadcare\n\nlet uploadcare = Uploadcare(withPublicKey: \"YOUR_PUBLIC_KEY\", secretKey: \"YOUR_SECRET_KEY\")\n\nlet parameters = ClamAVAddonExecutionParams(purgeInfected: true)\nlet response = try await uploadcare.executeClamav(fileUUID: \"1bac376c-aa7e-4356-861b-dd2657b5bfd2\", parameters: parameters)\nprint(response) // contains requestID\n\n// Execute and wait for completion:\nlet status = try await uploadcare.performClamav(fileUUID: \"1bac376c-aa7e-4356-861b-dd2657b5bfd2\", parameters: parameters)\nprint(status)\n",
                  },
                  {
                    "lang": "Kotlin",
                    "label": "Kotlin",
                    "source": "import com.uploadcare.android.library.api.UploadcareClient\n\nval uploadcare = UploadcareClient(publicKey = \"YOUR_PUBLIC_KEY\", secretKey = \"YOUR_SECRET_KEY\")\n\nval addOn = ClamAVAddOn(uploadcare)\nval response = addOn.execute(fileId = \"1bac376c-aa7e-4356-861b-dd2657b5bfd2\")\nLog.d(\"TAG\", response.toString())\n",
                  },
                ],
            },
        },
      "/addons/uc_clamav_virus_scan/execute/status/":
        {
          "get":
            {
              "summary": "Check ClamAV execution status",
              "description": "Check the status of an Add-On execution request that had been started\nusing the [Execute Add-On](/docs/api/rest/add-ons/uc-clamav-virus-scan-execute/) operation.\n",
              "tags": ["Add-Ons"],
              "operationId": "ucClamavVirusScanExecutionStatus",
              "parameters":
                [
                  { "$ref": "#/components/parameters/acceptHeader" },
                  {
                    "in": "query",
                    "name": "request_id",
                    "description": "Request ID returned by the Add-On execution request described above.\n",
                    "schema": { "type": "string", "format": "uuid" },
                    "required": true,
                  },
                ],
              "responses":
                {
                  "200": { "$ref": "#/components/responses/addonExecutionStatusResponse" },
                  "400": { "$ref": "#/components/responses/simpleAuthHTTPForbiddenResponse" },
                  "401": { "$ref": "#/components/responses/authorizationProblemsResponse" },
                  "406": { "$ref": "#/components/responses/invalidAcceptHeader" },
                },
              "x-codeSamples":
                [
                  {
                    "lang": "JavaScript",
                    "label": "JS",
                    "source": "import {\n  addonExecutionStatus,\n  AddonName,\n  UploadcareSimpleAuthSchema,\n} from '@uploadcare/rest-client';\n\nconst uploadcareSimpleAuthSchema = new UploadcareSimpleAuthSchema({\n  publicKey: 'YOUR_PUBLIC_KEY',\n  secretKey: 'YOUR_SECRET_KEY',\n});\n\nconst result = await addonExecutionStatus(\n  {\n    addonName: AddonName.UC_CLAMAV_VIRUS_SCAN,\n    requestId: '1bac376c-aa7e-4356-861b-dd2657b5bfd2',\n  },\n  { authSchema: uploadcareSimpleAuthSchema }\n)\n",
                  },
                  {
                    "lang": "PHP",
                    "label": "PHP",
                    "source": "<?php\n$configuration = Uploadcare\\Configuration::create((string) $_ENV['UPLOADCARE_PUBLIC_KEY'], (string) $_ENV['UPLOADCARE_SECRET_KEY']);\n\n$api = (new Uploadcare\\Api($configuration))->addons();\n$status = $api->checkAntivirusScan('request-id');\necho \\sprintf('Antivirus scan status: %s', $status);\n",
                  },
                  {
                    "lang": "Python",
                    "label": "Python",
                    "source": "from pyuploadcare import Uploadcare\nuploadcare = Uploadcare(public_key='YOUR_PUBLIC_KEY', secret_key='YOUR_SECRET_KEY')\n\naddon_task_status = uploadcare.addons_api.status(request_id, AddonLabels.CLAM_AV)\nprint(addon_task_status)\n",
                  },
                  {
                    "lang": "Ruby",
                    "label": "Ruby",
                    "source": "require 'uploadcare'\nUploadcare.config.public_key = 'YOUR_PUBLIC_KEY'\nUploadcare.config.secret_key = 'YOUR_SECRET_KEY'\n\nrequest_id = '1bac376c-aa7e-4356-861b-dd2657b5bfd2'\nresult = Uploadcare::Addons.uc_clamav_virus_scan_status(request_id)\nputs result.status\n",
                  },
                  {
                    "lang": "Swift",
                    "label": "Swift",
                    "source": "import Uploadcare\n\nlet uploadcare = Uploadcare(withPublicKey: \"YOUR_PUBLIC_KEY\", secretKey: \"YOUR_SECRET_KEY\")\n\nlet status = try await uploadcare.checkClamAVStatus(requestID: \"requestID\")\nprint(status)\n",
                  },
                  {
                    "lang": "Kotlin",
                    "label": "Kotlin",
                    "source": "import com.uploadcare.android.library.api.UploadcareClient\n\nval uploadcare = UploadcareClient(publicKey = \"YOUR_PUBLIC_KEY\", secretKey = \"YOUR_SECRET_KEY\")\n\nval addOn = ClamAVAddOn(uploadcare)\nval status = addOn.check(requestId = \"d1fb31c6-ed34-4e21-bdc3-4f1485f58e21\")\nLog.d(\"TAG\", status.toString())\n",
                  },
                ],
            },
        },
      "/addons/remove_bg/execute/":
        {
          "post":
            {
              "summary": "Execute Remove.bg",
              "description": "Execute [remove.bg](https://remove.bg/) background image removal Add-On for a given target.",
              "tags": ["Add-Ons"],
              "operationId": "removeBgExecute",
              "parameters": [{ "$ref": "#/components/parameters/acceptHeader" }],
              "requestBody":
                {
                  "required": true,
                  "content":
                    {
                      "application/json":
                        {
                          "schema":
                            {
                              "type": "object",
                              "properties":
                                {
                                  "target":
                                    {
                                      "description": "Unique ID of the file to process",
                                      "type": "string",
                                      "format": "uuid",
                                      "example": "21975c81-7f57-4c7a-aef9-acfe28779f78",
                                    },
                                  "params":
                                    {
                                      "description": "Optional object with Add-On specific parameters",
                                      "type": "object",
                                      "properties":
                                        {
                                          "crop":
                                            {
                                              "type": "boolean",
                                              "default": false,
                                              "description": "Whether to crop off all empty regions",
                                            },
                                          "crop_margin":
                                            {
                                              "type": "string",
                                              "default": "0",
                                              "description": "Adds a margin around the cropped subject, e.g 30px or 30%",
                                            },
                                          "scale":
                                            {
                                              "type": "string",
                                              "description": "Scales the subject relative to the total image size, e.g 80%",
                                              "example": "30%",
                                            },
                                          "add_shadow":
                                            {
                                              "type": "boolean",
                                              "description": "Whether to add an artificial shadow to the result",
                                              "default": false,
                                            },
                                          "type_level":
                                            {
                                              "type": "string",
                                              "enum": ["none", "1", "2", "latest"],
                                              "description": "\"none\" = No classification (foreground_type won't bet set in the application data)\n\n\"1\" = Use coarse classification classes: [person, product, animal, car, other]\n\n\"2\" = Use more specific classification classes: [person, product, animal, car,\n      car_interior, car_part, transportation, graphics, other]\n\n\"latest\" = Always use the latest classification classes available\n",
                                              "default": "none",
                                            },
                                          "type":
                                            {
                                              "type": "string",
                                              "enum": ["auto", "person", "product", "car"],
                                              "description": "Foreground type.",
                                            },
                                          "semitransparency":
                                            {
                                              "type": "boolean",
                                              "description": "Whether to have semi-transparent regions in the result",
                                              "default": true,
                                            },
                                          "channels":
                                            {
                                              "type": "string",
                                              "enum": ["rgba", "alpha"],
                                              "description": "Request either the finalized image ('rgba', default) or an alpha mask ('alpha').",
                                              "default": "rgba",
                                            },
                                          "roi":
                                            {
                                              "type": "string",
                                              "description": "Region of interest: Only contents of this rectangular region can be detected\nas foreground. Everything outside is considered background and will be removed.\nThe rectangle is defined as two x/y coordinates in the format \"x1 y1 x2 y2\".\nThe coordinates can be in absolute pixels (suffix 'px') or relative to the\nwidth/height of the image (suffix '%'). By default, the whole image is the\nregion of interest (\"0% 0% 100% 100%\").\n",
                                              "example": "0% 0% 90% 90%",
                                            },
                                          "position":
                                            {
                                              "type": "string",
                                              "description": "Positions the subject within the image canvas. Can be \"original\"\n(default unless \"scale\" is given), \"center\" (default when \"scale\" is given) or a value from \"0%\" to \"100%\"\n(both horizontal and vertical) or two values (horizontal, vertical).\n",
                                            },
                                        },
                                      "default": {},
                                      "example": { "crop": true, "type_level": "2" },
                                    },
                                },
                              "required": ["target"],
                            },
                        },
                    },
                },
              "responses":
                {
                  "200": { "$ref": "#/components/responses/executeAddonResponse" },
                  "400": { "$ref": "#/components/responses/simpleAuthHTTPForbiddenResponse" },
                  "401": { "$ref": "#/components/responses/authorizationProblemsResponse" },
                  "406": { "$ref": "#/components/responses/invalidAcceptHeader" },
                  "409": { "$ref": "#/components/responses/executeAddonConcurrentCallResponse" },
                  "429": { "$ref": "#/components/responses/requestWasThrottledError" },
                },
              "x-codeSamples":
                [
                  {
                    "lang": "PHP",
                    "label": "PHP",
                    "source": "<?php\n$configuration = Uploadcare\\Configuration::create((string) $_ENV['UPLOADCARE_PUBLIC_KEY'], (string) $_ENV['UPLOADCARE_SECRET_KEY']);\n\n$api = (new Uploadcare\\Api($configuration))->addons();\n$resultKey = $api->requestRemoveBackground('21975c81-7f57-4c7a-aef9-acfe28779f78');\necho \\sprintf('Remove background requested. Key is \\'%s\\'', $resultKey);\n",
                  },
                  {
                    "lang": "Python",
                    "label": "Python",
                    "source": "from pyuploadcare import Uploadcare\nuploadcare = Uploadcare(public_key='YOUR_PUBLIC_KEY', secret_key='YOUR_SECRET_KEY')\n\nremove_bg_params = AddonRemoveBGExecutionParams(\n    crop=True,\n    crop_margin=\"20px\",\n    scale=\"15%\",\n    position ='',\n    roi = ''\n)\n\ntarget_file = uploadcare.file(\"1bac376c-aa7e-4356-861b-dd2657b5bfd2\")\nremove_bg_result = uploadcare.addons_api.execute(\n    target_file,\n    AddonLabels.REMOVE_BG,\n    remove_bg_params\n)\n",
                  },
                  {
                    "lang": "Ruby",
                    "label": "Ruby",
                    "source": "require 'uploadcare'\nUploadcare.config.public_key = 'YOUR_PUBLIC_KEY'\nUploadcare.config.secret_key = 'YOUR_SECRET_KEY'\n\nuuid = '1bac376c-aa7e-4356-861b-dd2657b5bfd2'\nUploadcare::Addons.remove_bg(uuid, crop: true)\n",
                  },
                  {
                    "lang": "Swift",
                    "label": "Swift",
                    "source": "import Uploadcare\n\nlet uploadcare = Uploadcare(withPublicKey: \"YOUR_PUBLIC_KEY\", secretKey: \"YOUR_SECRET_KEY\")\n\nlet parameters = RemoveBGAddonExecutionParams(crop: true, typeLevel: .two)\nlet response = try await uploadcare.executeRemoveBG(fileUUID: \"1bac376c-aa7e-4356-861b-dd2657b5bfd2\", parameters: parameters)\nprint(response) // contains requestID\n\n// Execute and wait for completion:\nlet status = try await uploadcare.performRemoveBG(fileUUID: \"1bac376c-aa7e-4356-861b-dd2657b5bfd2\")\nprint(status)\n",
                  },
                  {
                    "lang": "Kotlin",
                    "label": "Kotlin",
                    "source": "import com.uploadcare.android.library.api.UploadcareClient\n\nval uploadcare = UploadcareClient(publicKey = \"YOUR_PUBLIC_KEY\", secretKey = \"YOUR_SECRET_KEY\")\n\nval addOn = RemoveBgAddOn(uploadcare)\nval response = addOn.execute(fileId = \"1bac376c-aa7e-4356-861b-dd2657b5bfd2\")\nLog.d(\"TAG\", response.toString())\n",
                  },
                ],
            },
        },
      "/addons/remove_bg/execute/status/":
        {
          "get":
            {
              "summary": "Check Remove.bg execution status",
              "description": "Check the status of an Add-On execution request that had been started\nusing the [Execute Add-On](/docs/api/rest/add-ons/remove-bg-execute/) operation.\n",
              "tags": ["Add-Ons"],
              "operationId": "removeBgExecutionStatus",
              "parameters":
                [
                  { "$ref": "#/components/parameters/acceptHeader" },
                  {
                    "in": "query",
                    "name": "request_id",
                    "description": "Request ID returned by the Add-On execution request described above.\n",
                    "schema": { "type": "string", "format": "uuid" },
                    "required": true,
                  },
                ],
              "responses":
                {
                  "200":
                    {
                      "description": "Add-On execution response. See `file_id` in response in order to get image without background.",
                      "content":
                        {
                          "application/json":
                            {
                              "schema":
                                {
                                  "allOf":
                                    [
                                      { "$ref": "#/components/schemas/addonExecutionStatus" },
                                      {
                                        "type": "object",
                                        "properties":
                                          {
                                            "result":
                                              {
                                                "type": "object",
                                                "properties":
                                                  {
                                                    "file_id":
                                                      {
                                                        "type": "string",
                                                        "description": "UUID of the file with removed background.",
                                                        "example": "21975c81-7f57-4c7a-aef9-acfe28779f78",
                                                      },
                                                  },
                                              },
                                          },
                                      },
                                    ],
                                },
                              "example":
                                { "result": { "file_id": "21975c81-7f57-4c7a-aef9-acfe28779f78" }, "status": "done" },
                            },
                        },
                    },
                  "400": { "$ref": "#/components/responses/simpleAuthHTTPForbiddenResponse" },
                  "401": { "$ref": "#/components/responses/authorizationProblemsResponse" },
                  "406": { "$ref": "#/components/responses/invalidAcceptHeader" },
                },
              "x-codeSamples":
                [
                  {
                    "lang": "PHP",
                    "label": "PHP",
                    "source": "<?php\n$configuration = Uploadcare\\Configuration::create((string) $_ENV['UPLOADCARE_PUBLIC_KEY'], (string) $_ENV['UPLOADCARE_SECRET_KEY']);\n\n$api = (new Uploadcare\\Api($configuration))->addons();\n$status = $api->checkRemoveBackground('request-id');\necho \\sprintf('Remove background status: %s', $status);\n",
                  },
                  {
                    "lang": "Python",
                    "label": "Python",
                    "source": "from pyuploadcare import Uploadcare\nuploadcare = Uploadcare(public_key='YOUR_PUBLIC_KEY', secret_key='YOUR_SECRET_KEY')\n\naddon_task_status = uploadcare.addons_api.status(request_id, AddonLabels.REMOVE_BG)\nprint(addon_task_status)\n",
                  },
                  {
                    "lang": "Ruby",
                    "label": "Ruby",
                    "source": "require 'uploadcare'\nUploadcare.config.public_key = 'YOUR_PUBLIC_KEY'\nUploadcare.config.secret_key = 'YOUR_SECRET_KEY'\n\nrequest_id = '1bac376c-aa7e-4356-861b-dd2657b5bfd2'\nresult = Uploadcare::Addons.remove_bg_status(request_id)\nputs result.status\n",
                  },
                  {
                    "lang": "Swift",
                    "label": "Swift",
                    "source": "import Uploadcare\n\nlet uploadcare = Uploadcare(withPublicKey: \"YOUR_PUBLIC_KEY\", secretKey: \"YOUR_SECRET_KEY\")\n\nlet status = try await uploadcare.checkRemoveBGStatus(requestID: \"requestID\")\nprint(status)\n",
                  },
                  {
                    "lang": "Kotlin",
                    "label": "Kotlin",
                    "source": "import com.uploadcare.android.library.api.UploadcareClient\n\nval uploadcare = UploadcareClient(publicKey = \"YOUR_PUBLIC_KEY\", secretKey = \"YOUR_SECRET_KEY\")\n\nval addOn = RemoveBgAddOn(uploadcare)\nval status = addOn.check(requestId = \"d1fb31c6-ed34-4e21-bdc3-4f1485f58e21\")\nLog.d(\"TAG\", status.toString())\n",
                  },
                ],
            },
        },
      "/files/{uuid}/metadata/":
        {
          "get":
            {
              "summary": "Get file's metadata",
              "description": "File metadata is additional, arbitrary data, associated with uploaded file. As an example, you could store unique file identifier from your system.\n\nMetadata is key-value data. You can specify up to 50 keys, with key names up to 64 characters long and values up to 512 characters long.\nRead more in the [docs](/docs/file-metadata/).\n\n**Notice:** Do not store any sensitive information (bank account numbers, card details, etc.) as metadata.\n\n**Notice:** File metadata is provided by the end-users uploading the files and can contain symbols unsafe in, for example, HTML context. Please escape the metadata before use according to the rules of the target runtime context (HTML browser, SQL query parameter, etc).\n\nGet file's metadata keys and values.\n",
              "tags": ["File metadata"],
              "operationId": "_fileMetadata",
              "parameters":
                [
                  { "$ref": "#/components/parameters/acceptHeader" },
                  {
                    "in": "path",
                    "name": "uuid",
                    "description": "File UUID.",
                    "required": true,
                    "schema": { "type": "string", "format": "uuid", "example": "21975c81-7f57-4c7a-aef9-acfe28779f78" },
                  },
                ],
              "responses":
                {
                  "200": { "$ref": "#/components/responses/fileMetadataResponse" },
                  "400": { "$ref": "#/components/responses/simpleAuthHTTPForbiddenResponse" },
                  "401": { "$ref": "#/components/responses/authorizationProblemsResponse" },
                  "406": { "$ref": "#/components/responses/invalidAcceptHeader" },
                },
              "x-codeSamples":
                [
                  {
                    "lang": "JavaScript",
                    "label": "JS",
                    "source": "import {\n  getMetadata,\n  UploadcareSimpleAuthSchema,\n} from '@uploadcare/rest-client';\n\nconst uploadcareSimpleAuthSchema = new UploadcareSimpleAuthSchema({\n  publicKey: 'YOUR_PUBLIC_KEY',\n  secretKey: 'YOUR_SECRET_KEY',\n});\n\nconst result = await getMetadata(\n  {\n    uuid: '1bac376c-aa7e-4356-861b-dd2657b5bfd2',\n  },\n  { authSchema: uploadcareSimpleAuthSchema }\n)\n",
                  },
                  {
                    "lang": "PHP",
                    "label": "PHP",
                    "source": "<?php\n$configuration = Uploadcare\\Configuration::create((string) $_ENV['UPLOADCARE_PUBLIC_KEY'], (string) $_ENV['UPLOADCARE_SECRET_KEY']);\n\n$api = (new Uploadcare\\Api($configuration))->file();\n$fileInfo = $api->fileInfo('1bac376c-aa7e-4356-861b-dd2657b5bfd2');\necho \\sprintf(\"File %s metadata:\\n\", $fileInfo->getUuid());\nforeach ($fileInfo->getMetadata() as $metaKey => $metaItem) {\n    echo \\sprintf(\"%s: %s\\n\", $metaKey, $metaItem);\n}\n",
                  },
                  {
                    "lang": "Python",
                    "label": "Python",
                    "source": "from pyuploadcare import Uploadcare\nuploadcare = Uploadcare(public_key='YOUR_PUBLIC_KEY', secret_key='YOUR_SECRET_KEY')\n\nvalue = uploadcare.metadata_api.get_all_metadata(\"1bac376c-aa7e-4356-861b-dd2657b5bfd2\")\nprint(value)\n",
                  },
                  {
                    "lang": "Ruby",
                    "label": "Ruby",
                    "source": "require 'uploadcare'\nUploadcare.config.public_key = 'YOUR_PUBLIC_KEY'\nUploadcare.config.secret_key = 'YOUR_SECRET_KEY'\n\nuuid = '1bac376c-aa7e-4356-861b-dd2657b5bfd2'\nputs Uploadcare::FileMetadata.show(uuid, 'pet')\n",
                  },
                  {
                    "lang": "Swift",
                    "label": "Swift",
                    "source": "import Uploadcare\n\nlet uploadcare = Uploadcare(withPublicKey: \"YOUR_PUBLIC_KEY\", secretKey: \"YOUR_SECRET_KEY\")\n\nlet metadata = try await uploadcare.fileMetadata(withUUID: \"1bac376c-aa7e-4356-861b-dd2657b5bfd2\")\nprint(metadata)\n",
                  },
                  {
                    "lang": "Kotlin",
                    "label": "Kotlin",
                    "source": "import com.uploadcare.android.library.api.UploadcareClient\n\nval uploadcare = UploadcareClient(publicKey = \"YOUR_PUBLIC_KEY\", secretKey = \"YOUR_SECRET_KEY\")\n\nval metadata = uploadcare.getFileMetadata(fileId = \"1bac376c-aa7e-4356-861b-dd2657b5bfd2\")\nLog.d(\"TAG\", metadata.toString())\n",
                  },
                ],
            },
        },
      "/files/{uuid}/metadata/{key}/":
        {
          "get":
            {
              "summary": "Get metadata key's value",
              "description": "Get the value of a single metadata key.",
              "tags": ["File metadata"],
              "operationId": "fileMetadataKey",
              "parameters":
                [
                  { "$ref": "#/components/parameters/acceptHeader" },
                  { "$ref": "#/components/parameters/fileUUID" },
                  { "$ref": "#/components/parameters/fileMetadataKey" },
                ],
              "responses":
                {
                  "200":
                    {
                      "description": "Value of a file's metadata key.",
                      "content":
                        { "application/json": { "schema": { "$ref": "#/components/schemas/metadataItemValue" } } },
                    },
                  "400": { "$ref": "#/components/responses/simpleAuthHTTPForbiddenResponse" },
                  "401": { "$ref": "#/components/responses/authorizationProblemsResponse" },
                  "406": { "$ref": "#/components/responses/invalidAcceptHeader" },
                },
              "x-codeSamples":
                [
                  {
                    "lang": "JavaScript",
                    "label": "JS",
                    "source": "import {\n  getMetadataValue,\n  UploadcareSimpleAuthSchema,\n} from '@uploadcare/rest-client';\n\nconst uploadcareSimpleAuthSchema = new UploadcareSimpleAuthSchema({\n  publicKey: 'YOUR_PUBLIC_KEY',\n  secretKey: 'YOUR_SECRET_KEY',\n});\n\nconst result = await getMetadataValue(\n  {\n    uuid: '1bac376c-aa7e-4356-861b-dd2657b5bfd2',\n    key: 'pet'\n  },\n  { authSchema: uploadcareSimpleAuthSchema }\n)\n",
                  },
                  {
                    "lang": "PHP",
                    "label": "PHP",
                    "source": "<?php\n$configuration = Uploadcare\\Configuration::create((string) $_ENV['UPLOADCARE_PUBLIC_KEY'], (string) $_ENV['UPLOADCARE_SECRET_KEY']);\n\n$api = (new Uploadcare\\Api($configuration))->metadata();\n$metadata = $api->getMetadata('1bac376c-aa7e-4356-861b-dd2657b5bfd2');\necho \\sprintf('Value for key \\'pet\\' %s', $metadata['pet'] ?? 'does not exists');\n",
                  },
                  {
                    "lang": "Python",
                    "label": "Python",
                    "source": "from pyuploadcare import Uploadcare\nuploadcare = Uploadcare(public_key='YOUR_PUBLIC_KEY', secret_key='YOUR_SECRET_KEY')\n\nvalue = uploadcare.metadata_api.get_key(\"1bac376c-aa7e-4356-861b-dd2657b5bfd2\", \"pet\")\nprint(value)\n",
                  },
                  {
                    "lang": "Ruby",
                    "label": "Ruby",
                    "source": "require 'uploadcare'\nUploadcare.config.public_key = 'YOUR_PUBLIC_KEY'\nUploadcare.config.secret_key = 'YOUR_SECRET_KEY'\n\nuuid = '1bac376c-aa7e-4356-861b-dd2657b5bfd2'\nputs Uploadcare::FileMetadata.index(uuid).inspect\n",
                  },
                  {
                    "lang": "Swift",
                    "label": "Swift",
                    "source": "import Uploadcare\n\nlet uploadcare = Uploadcare(withPublicKey: \"YOUR_PUBLIC_KEY\", secretKey: \"YOUR_SECRET_KEY\")\n\nlet value = try await uploadcare.fileMetadataValue(forKey: \"pet\", withUUID: \"1bac376c-aa7e-4356-861b-dd2657b5bfd2\")\nprint(value)\n",
                  },
                  {
                    "lang": "Kotlin",
                    "label": "Kotlin",
                    "source": "import com.uploadcare.android.library.api.UploadcareClient\n\nval uploadcare = UploadcareClient(publicKey = \"YOUR_PUBLIC_KEY\", secretKey = \"YOUR_SECRET_KEY\")\n\nval value = uploadcare.getFileMetadataKeyValue(\n    fileId = \"1bac376c-aa7e-4356-861b-dd2657b5bfd2\",\n    key = \"pet\"\n)\nLog.d(\"TAG\", value)\n",
                  },
                ],
            },
          "put":
            {
              "summary": "Update metadata key's value",
              "description": "Update the value of a single metadata key. If the key does not exist, it will be created.",
              "tags": ["File metadata"],
              "operationId": "updateFileMetadataKey",
              "parameters":
                [
                  { "$ref": "#/components/parameters/acceptHeader" },
                  { "$ref": "#/components/parameters/fileUUID" },
                  { "$ref": "#/components/parameters/fileMetadataKey" },
                ],
              "requestBody":
                {
                  "required": true,
                  "content":
                    { "application/json": { "schema": { "type": "string", "minLength": 1, "maxLength": 512 } } },
                },
              "responses":
                {
                  "200":
                    {
                      "description": "Value of a file's metadata key successfully updated.",
                      "content":
                        { "application/json": { "schema": { "$ref": "#/components/schemas/metadataItemValue" } } },
                    },
                  "201":
                    {
                      "description": "Key of a file metadata successfully added.",
                      "content":
                        { "application/json": { "schema": { "$ref": "#/components/schemas/metadataItemValue" } } },
                    },
                  "400": { "$ref": "#/components/responses/simpleAuthHTTPForbiddenResponse" },
                  "401": { "$ref": "#/components/responses/authorizationProblemsResponse" },
                  "406": { "$ref": "#/components/responses/invalidAcceptHeader" },
                },
              "x-codeSamples":
                [
                  {
                    "lang": "JavaScript",
                    "label": "JS",
                    "source": "import {\n  updateMetadata,\n  UploadcareSimpleAuthSchema,\n} from '@uploadcare/rest-client';\n\nconst uploadcareSimpleAuthSchema = new UploadcareSimpleAuthSchema({\n  publicKey: 'YOUR_PUBLIC_KEY',\n  secretKey: 'YOUR_SECRET_KEY',\n});\n\nconst result = await updateMetadata(\n  {\n    uuid: '1bac376c-aa7e-4356-861b-dd2657b5bfd2',\n    key: 'pet',\n    value: 'dog',\n  },\n  { authSchema: uploadcareSimpleAuthSchema }\n)\n",
                  },
                  {
                    "lang": "PHP",
                    "label": "PHP",
                    "source": "<?php\n$configuration = Uploadcare\\Configuration::create((string) $_ENV['UPLOADCARE_PUBLIC_KEY'], (string) $_ENV['UPLOADCARE_SECRET_KEY']);\n\n$api = (new Uploadcare\\Api($configuration))->metadata();\n$result = $api->setKey('1bac376c-aa7e-4356-861b-dd2657b5bfd2', 'pet', 'dog');\necho \\sprintf('Metadata key \\'pet\\' is set to %s', $result['pet']);\n",
                  },
                  {
                    "lang": "Python",
                    "label": "Python",
                    "source": "from pyuploadcare import Uploadcare\nuploadcare = Uploadcare(public_key='YOUR_PUBLIC_KEY', secret_key='YOUR_SECRET_KEY')\n\nfile_uuid = '1bac376c-aa7e-4356-861b-dd2657b5bfd2'\nkey, value = \"pet\", \"dog\"\nuploadcare.metadata_api.update_or_create_key(file_uuid, key, value)\n",
                  },
                  {
                    "lang": "Ruby",
                    "label": "Ruby",
                    "source": "require 'uploadcare'\nUploadcare.config.public_key = 'YOUR_PUBLIC_KEY'\nUploadcare.config.secret_key = 'YOUR_SECRET_KEY'\n\nuuid = '1bac376c-aa7e-4356-861b-dd2657b5bfd2'\nkey = 'pet'\nvalue = 'dog'\nUploadcare::FileMetadata.update(uuid, key, value)\n",
                  },
                  {
                    "lang": "Swift",
                    "label": "Swift",
                    "source": "import Uploadcare\n\nlet uploadcare = Uploadcare(withPublicKey: \"YOUR_PUBLIC_KEY\", secretKey: \"YOUR_SECRET_KEY\")\n\nlet response = try await uploadcare.updateFileMetadata(\n  withUUID: \"1bac376c-aa7e-4356-861b-dd2657b5bfd2\", \n  key: \"pet\", \n  value: dog\n)\n print(response)\n",
                  },
                  {
                    "lang": "Kotlin",
                    "label": "Kotlin",
                    "source": "import com.uploadcare.android.library.api.UploadcareClient\n\nval uploadcare = UploadcareClient(publicKey = \"YOUR_PUBLIC_KEY\", secretKey = \"YOUR_SECRET_KEY\")\n\nval value = uploadcare.updateFileMetadataKeyValue(\n    fileId = \"1bac376c-aa7e-4356-861b-dd2657b5bfd2\",\n    key = \"pet\",\n    value = \"dog\"\n)\nLog.d(\"TAG\", value)\n",
                  },
                ],
            },
          "delete":
            {
              "summary": "Delete metadata key",
              "description": "Delete a file's metadata key.",
              "tags": ["File metadata"],
              "operationId": "deleteFileMetadataKey",
              "parameters":
                [
                  { "$ref": "#/components/parameters/acceptHeader" },
                  { "$ref": "#/components/parameters/fileUUID" },
                  { "$ref": "#/components/parameters/fileMetadataKey" },
                ],
              "responses":
                {
                  "204": { "description": "Key of a file metadata successfully deleted." },
                  "400": { "$ref": "#/components/responses/simpleAuthHTTPForbiddenResponse" },
                  "401": { "$ref": "#/components/responses/authorizationProblemsResponse" },
                  "406": { "$ref": "#/components/responses/invalidAcceptHeader" },
                },
              "x-codeSamples":
                [
                  {
                    "lang": "JavaScript",
                    "label": "JS",
                    "source": "import {\n  deleteMetadata,\n  UploadcareSimpleAuthSchema,\n} from '@uploadcare/rest-client';\n\nconst uploadcareSimpleAuthSchema = new UploadcareSimpleAuthSchema({\n  publicKey: 'YOUR_PUBLIC_KEY',\n  secretKey: 'YOUR_SECRET_KEY',\n});\n\nconst result = await deleteMetadata(\n  {\n    uuid: '1bac376c-aa7e-4356-861b-dd2657b5bfd2',\n    key: 'delete_key',\n  },\n  { authSchema: uploadcareSimpleAuthSchema }\n)\n",
                  },
                  {
                    "lang": "PHP",
                    "label": "PHP",
                    "source": "<?php\n$configuration = Uploadcare\\Configuration::create((string) $_ENV['UPLOADCARE_PUBLIC_KEY'], (string) $_ENV['UPLOADCARE_SECRET_KEY']);\n\n$metadataApi = (new Uploadcare\\Api($configuration))->metadata();\ntry {\n    $metadataApi->removeKey('1bac376c-aa7e-4356-861b-dd2657b5bfd2', 'pet');\n} catch (\\Throwable $e) {\n    echo \\sprintf('Error while key removing: %s', $e->getMessage());\n}\necho 'Key was successfully removed';\n",
                  },
                  {
                    "lang": "Python",
                    "label": "Python",
                    "source": "from pyuploadcare import Uploadcare\nuploadcare = Uploadcare(public_key='YOUR_PUBLIC_KEY', secret_key='YOUR_SECRET_KEY')\n\nfile_uuid = '1bac376c-aa7e-4356-861b-dd2657b5bfd2'\nuploadcare.metadata_api.delete_key(file_uuid, mkey='pet')\n",
                  },
                  {
                    "lang": "Ruby",
                    "label": "Ruby",
                    "source": "require 'uploadcare'\nUploadcare.config.public_key = 'YOUR_PUBLIC_KEY'\nUploadcare.config.secret_key = 'YOUR_SECRET_KEY'\n\nputs Uploadcare::FileMetadata.delete('1bac376c-aa7e-4356-861b-dd2657b5bfd2', 'pet')\n",
                  },
                  {
                    "lang": "Swift",
                    "label": "Swift",
                    "source": "import Uploadcare\n\nlet uploadcare = Uploadcare(withPublicKey: \"YOUR_PUBLIC_KEY\", secretKey: \"YOUR_SECRET_KEY\")\n\ntry await uploadcare.deleteFileMetadata(forKey: \"pet\",  withUUID: \"1bac376c-aa7e-4356-861b-dd2657b5bfd2\")\n",
                  },
                  {
                    "lang": "Kotlin",
                    "label": "Kotlin",
                    "source": "import com.uploadcare.android.library.api.UploadcareClient\n\nval uploadcare = UploadcareClient(publicKey = \"YOUR_PUBLIC_KEY\", secretKey = \"YOUR_SECRET_KEY\")\n\nuploadcare.deleteFileMetadataKey(fileId = \"1bac376c-aa7e-4356-861b-dd2657b5bfd2\", key = \"pet\")\n",
                  },
                ],
            },
        },
      "/groups/":
        {
          "get":
            {
              "tags": ["Group"],
              "summary": "List of groups",
              "description": "Get a paginated list of groups.",
              "operationId": "groupsList",
              "parameters":
                [
                  {
                    "in": "header",
                    "name": "Accept",
                    "description": "Version header.",
                    "schema":
                      {
                        "type": "string",
                        "nullable": true,
                        "enum": ["application/vnd.uploadcare-v0.7+json"],
                        "example": "application/vnd.uploadcare-v0.7+json",
                      },
                    "required": true,
                  },
                  {
                    "in": "query",
                    "name": "limit",
                    "description": "A preferred amount of groups in a list for a single response.\nDefaults to 100, while the maximum is 1000.\n",
                    "schema": { "type": "number", "example": 150 },
                  },
                  {
                    "in": "query",
                    "name": "from",
                    "description": "A starting point for filtering the list of groups.\nIf passed, MUST be a date and time value in ISO-8601 format.\n",
                    "schema": { "type": "string", "format": "date-time", "example": "2015-01-02T10:00:00.463352Z" },
                  },
                  {
                    "in": "query",
                    "name": "ordering",
                    "description": "Specifies the way groups should be sorted in the returned list.\n`datetime_created` for the ascending order (default),\n`-datetime_created` for the descending one.\n",
                    "schema":
                      {
                        "type": "string",
                        "enum": ["datetime_created", "-datetime_created"],
                        "default": "datetime_created",
                        "example": "-datetime_created",
                      },
                  },
                ],
              "responses":
                {
                  "200": { "$ref": "#/components/responses/paginatedGroupsResponse" },
                  "400": { "$ref": "#/components/responses/simpleAuthHTTPForbiddenResponse" },
                  "401": { "$ref": "#/components/responses/authorizationProblemsResponse" },
                  "406": { "$ref": "#/components/responses/invalidAcceptHeader" },
                  "429": { "$ref": "#/components/responses/requestWasThrottledError" },
                },
              "x-codeSamples":
                [
                  {
                    "lang": "JavaScript",
                    "label": "JS",
                    "source": "import {\n  listOfGroups,\n  UploadcareSimpleAuthSchema,\n} from '@uploadcare/rest-client';\n\nconst uploadcareSimpleAuthSchema = new UploadcareSimpleAuthSchema({\n  publicKey: 'YOUR_PUBLIC_KEY',\n  secretKey: 'YOUR_SECRET_KEY',\n});\n\nconst result = await listOfGroups({}, { authSchema: uploadcareSimpleAuthSchema })\n",
                  },
                  {
                    "lang": "PHP",
                    "label": "PHP",
                    "source": "<?php\n$configuration = Uploadcare\\Configuration::create((string) $_ENV['UPLOADCARE_PUBLIC_KEY'], (string) $_ENV['UPLOADCARE_SECRET_KEY']);\n\n$api = (new Uploadcare\\Api($configuration))->group();\n$list = $api->listGroups();\nforeach ($list->getResults() as $group) {\n    \\sprintf('Group URL: %s, ID: %s', $group->getUrl(), $group->getUuid());\n}\nwhile (($next = $api->nextPage($list)) !== null) {\n    foreach ($next->getResults() as $group) {\n        \\sprintf('Group URL: %s, ID: %s', $group->getUrl(), $group->getUuid());\n    }\n}\n",
                  },
                  {
                    "lang": "Python",
                    "label": "Python",
                    "source": "from pyuploadcare import Uploadcare\nuploadcare = Uploadcare(public_key='YOUR_PUBLIC_KEY', secret_key='YOUR_SECRET_KEY')\n\ngroups_list = uploadcare.list_file_groups()\nprint('Number of groups is', groups_list.count())\n",
                  },
                  {
                    "lang": "Ruby",
                    "label": "Ruby",
                    "source": "require 'uploadcare'\nUploadcare.config.public_key = 'YOUR_PUBLIC_KEY'\nUploadcare.config.secret_key = 'YOUR_SECRET_KEY'\n\ngroups = Uploadcare::GroupList.list(limit: 10)\ngroups.each { |group| puts group.inspect }\n",
                  },
                  {
                    "lang": "Swift",
                    "label": "Swift",
                    "source": "import Uploadcare\n\nlet uploadcare = Uploadcare(withPublicKey: \"YOUR_PUBLIC_KEY\", secretKey: \"YOUR_SECRET_KEY\")\n\nlet query = GroupsListQuery()\n  .limit(10)\n  .ordering(.datetimeCreatedDESC)\n  \nlet groupsList = uploadcare.listOfGroups()\n\nlet list = try await groupsList.get(withQuery: query)\nprint(list)\n\n// Next page\nlet next = try await groupsList.nextPage()\nprint(list)\n\n// Previous page\nlet previous = try await groupsList.previousPage()\nprint(list)\n",
                  },
                  {
                    "lang": "Kotlin",
                    "label": "Kotlin",
                    "source": "import com.uploadcare.android.library.api.UploadcareClient\n\nval uploadcare = UploadcareClient(publicKey = \"YOUR_PUBLIC_KEY\", secretKey = \"YOUR_SECRET_KEY\")\n\nval groupsQueryBuilder = uploadcare.getGroups()\nval groups = groupsQueryBuilder\n    .ordering(Order.UPLOAD_TIME_DESC)\n    .asList()\nLog.d(\"TAG\", groups.toString())\n",
                  },
                ],
            },
        },
      "/groups/{uuid}/":
        {
          "get":
            {
              "summary": "Group info",
              "description": "Get a file group by its ID.\n\nGroups are identified in a way similar to individual files. A group ID consists of a UUID\nfollowed by a “~” (tilde) character and a group size: integer number of the files in the group.\n",
              "operationId": "groupInfo",
              "tags": ["Group"],
              "parameters":
                [
                  {
                    "in": "header",
                    "name": "Accept",
                    "description": "Version header.",
                    "schema":
                      {
                        "type": "string",
                        "nullable": true,
                        "enum": ["application/vnd.uploadcare-v0.7+json"],
                        "example": "application/vnd.uploadcare-v0.7+json",
                      },
                    "required": true,
                  },
                  {
                    "in": "path",
                    "name": "uuid",
                    "description": "Group UUID.",
                    "required": true,
                    "schema": { "type": "string", "example": "badfc9f7-f88f-4921-9cc0-22e2c08aa2da~12" },
                  },
                ],
              "responses":
                {
                  "200":
                    {
                      "description": "Group's info",
                      "content":
                        { "application/json": { "schema": { "$ref": "#/components/schemas/groupWithFiles" } } },
                    },
                  "400": { "$ref": "#/components/responses/simpleAuthHTTPForbiddenResponse" },
                  "401": { "$ref": "#/components/responses/authorizationProblemsResponse" },
                  "404": { "$ref": "#/components/responses/groupNotFound" },
                  "406": { "$ref": "#/components/responses/invalidAcceptHeader" },
                  "429": { "$ref": "#/components/responses/requestWasThrottledError" },
                },
              "x-codeSamples":
                [
                  {
                    "lang": "JavaScript",
                    "label": "JS",
                    "source": "import {\n  groupInfo,\n  UploadcareSimpleAuthSchema,\n} from '@uploadcare/rest-client';\n\nconst uploadcareSimpleAuthSchema = new UploadcareSimpleAuthSchema({\n  publicKey: 'YOUR_PUBLIC_KEY',\n  secretKey: 'YOUR_SECRET_KEY',\n});\n\nconst result = await groupInfo(\n  {\n    uuid: 'c5bec8c7-d4b6-4921-9e55-6edb027546bc~1',\n  },\n  { authSchema: uploadcareSimpleAuthSchema }\n)\n",
                  },
                  {
                    "lang": "PHP",
                    "label": "PHP",
                    "source": "<?php\n$configuration = Uploadcare\\Configuration::create((string) $_ENV['UPLOADCARE_PUBLIC_KEY'], (string) $_ENV['UPLOADCARE_SECRET_KEY']);\n\n$api = (new Uploadcare\\Api($configuration))->group();\n$groupInfo = $api->groupInfo('c5bec8c7-d4b6-4921-9e55-6edb027546bc~1');\necho \\sprintf(\"Group: %s files:\\n\", $groupInfo->getUrl());\nforeach ($groupInfo->getFiles() as $file) {\n    \\sprintf('File: %s (%s)', $file->getUrl(), $file->getUuid());\n}\n",
                  },
                  {
                    "lang": "Python",
                    "label": "Python",
                    "source": "from pyuploadcare import Uploadcare\nuploadcare = Uploadcare(public_key='YOUR_PUBLIC_KEY', secret_key='YOUR_SECRET_KEY')\n\ngroup = uploadcare.file_group(\"c5bec8c7-d4b6-4921-9e55-6edb027546bc~1\")\nprint(group.info)\n",
                  },
                  {
                    "lang": "Ruby",
                    "label": "Ruby",
                    "source": "require 'uploadcare'\nUploadcare.config.public_key = 'YOUR_PUBLIC_KEY'\nUploadcare.config.secret_key = 'YOUR_SECRET_KEY'\n\nuuid = 'c5bec8c7-d4b6-4921-9e55-6edb027546bc~1'\nputs Uploadcare::Group.info(uuid).inspect\n",
                  },
                  {
                    "lang": "Swift",
                    "label": "Swift",
                    "source": "import Uploadcare\n\nlet uploadcare = Uploadcare(withPublicKey: \"YOUR_PUBLIC_KEY\", secretKey: \"YOUR_SECRET_KEY\")\n\nlet group = try await uploadcare.groupInfo(withUUID: \"c5bec8c7-d4b6-4921-9e55-6edb027546bc~1\")\nprint(group)\n",
                  },
                  {
                    "lang": "Kotlin",
                    "label": "Kotlin",
                    "source": "import com.uploadcare.android.library.api.UploadcareClient\n\nval uploadcare = UploadcareClient(publicKey = \"YOUR_PUBLIC_KEY\", secretKey = \"YOUR_SECRET_KEY\")\n\nval group = uploadcare.getGroup(groupId = \"c5bec8c7-d4b6-4921-9e55-6edb027546bc~1\")\nLog.d(\"TAG\", group.toString())\n",
                  },
                ],
            },
          "delete":
            {
              "summary": "Delete group",
              "description": "Delete a file group by its ID.\n\n**Note**: The operation only removes the group object itself. **All the files that were part of the group are left as is.**\n",
              "operationId": "deleteGroup",
              "tags": ["Group"],
              "parameters":
                [
                  {
                    "in": "header",
                    "name": "Accept",
                    "description": "Version header.",
                    "schema":
                      {
                        "type": "string",
                        "nullable": true,
                        "enum": ["application/vnd.uploadcare-v0.7+json"],
                        "example": "application/vnd.uploadcare-v0.7+json",
                      },
                    "required": true,
                  },
                  {
                    "in": "path",
                    "name": "uuid",
                    "description": "Group UUID.",
                    "required": true,
                    "schema": { "type": "string", "example": "badfc9f7-f88f-4921-9cc0-22e2c08aa2da~12" },
                  },
                ],
              "responses":
                {
                  "204": { "description": "The group has been deleted successfully." },
                  "400": { "$ref": "#/components/responses/simpleAuthHTTPForbiddenResponse" },
                  "401": { "$ref": "#/components/responses/authorizationProblemsResponse" },
                  "404": { "$ref": "#/components/responses/groupNotFound" },
                  "406": { "$ref": "#/components/responses/invalidAcceptHeader" },
                  "429": { "$ref": "#/components/responses/requestWasThrottledError" },
                },
              "x-codeSamples":
                [
                  {
                    "lang": "JavaScript",
                    "label": "JS",
                    "source": "import {\n  deleteGroup,\n  UploadcareSimpleAuthSchema,\n} from '@uploadcare/rest-client';\n\nconst uploadcareSimpleAuthSchema = new UploadcareSimpleAuthSchema({\n  publicKey: 'YOUR_PUBLIC_KEY',\n  secretKey: 'YOUR_SECRET_KEY',\n});\n\nconst result = await deleteGroup(\n  {\n    uuid: 'c5bec8c7-d4b6-4921-9e55-6edb027546bc~1',\n  },\n  { authSchema: uploadcareSimpleAuthSchema }\n)\n",
                  },
                  {
                    "lang": "PHP",
                    "label": "PHP",
                    "source": "<?php\n$configuration = Uploadcare\\Configuration::create((string) $_ENV['UPLOADCARE_PUBLIC_KEY'], (string) $_ENV['UPLOADCARE_SECRET_KEY']);\n\n$api = (new Uploadcare\\Api($configuration))->group();\ntry {\n    $api->removeGroup('c5bec8c7-d4b6-4921-9e55-6edb027546bc~1');\n} catch (\\Throwable $e) {\n    echo \\sprintf('Error while group deletion: %s', $e->getMessage());\n}\necho 'Group successfully deleted';\n",
                  },
                  {
                    "lang": "Python",
                    "label": "Python",
                    "source": "from pyuploadcare import Uploadcare\nuploadcare = Uploadcare(public_key='YOUR_PUBLIC_KEY', secret_key='YOUR_SECRET_KEY')\n\nfile_group = uploadcare.file_group(\"c5bec8c7-d4b6-4921-9e55-6edb027546bc~1\")\nfile_group.delete()\n",
                  },
                  {
                    "lang": "Ruby",
                    "label": "Ruby",
                    "source": "require 'uploadcare'\nUploadcare.config.public_key = 'YOUR_PUBLIC_KEY'\nUploadcare.config.secret_key = 'YOUR_SECRET_KEY'\n\nputs Uploadcare::Group.delete('c5bec8c7-d4b6-4921-9e55-6edb027546bc~1')\n",
                  },
                  {
                    "lang": "Swift",
                    "label": "Swift",
                    "source": "import Uploadcare\n\nlet uploadcare = Uploadcare(withPublicKey: \"YOUR_PUBLIC_KEY\", secretKey: \"YOUR_SECRET_KEY\")\n\ntry await uploadcare.deleteGroup(withUUID: \"c5bec8c7-d4b6-4921-9e55-6edb027546bc~1\")\n",
                  },
                  {
                    "lang": "Kotlin",
                    "label": "Kotlin",
                    "source": "import com.uploadcare.android.library.api.UploadcareClient\n\nval uploadcare = UploadcareClient(publicKey = \"YOUR_PUBLIC_KEY\", secretKey = \"YOUR_SECRET_KEY\")\n\nuploadcare.deleteGroup(groupId = \"c5bec8c7-d4b6-4921-9e55-6edb027546bc~1\")\n",
                  },
                ],
            },
        },
      "/project/":
        {
          "get":
            {
              "tags": ["Project"],
              "summary": "Project info",
              "description": "Getting info about account project.",
              "operationId": "projectInfo",
              "parameters": [{ "$ref": "#/components/parameters/acceptHeader" }],
              "responses":
                {
                  "200":
                    {
                      "description": "Your project details.",
                      "content": { "application/json": { "schema": { "$ref": "#/components/schemas/project" } } },
                    },
                  "400": { "$ref": "#/components/responses/simpleAuthHTTPForbiddenResponse" },
                  "401": { "$ref": "#/components/responses/authorizationProblemsResponse" },
                  "406": { "$ref": "#/components/responses/invalidAcceptHeader" },
                  "429": { "$ref": "#/components/responses/requestWasThrottledError" },
                },
              "x-codeSamples":
                [
                  {
                    "lang": "PHP",
                    "label": "PHP",
                    "source": "<?php\n$configuration = Uploadcare\\Configuration::create((string) $_ENV['UPLOADCARE_PUBLIC_KEY'], (string) $_ENV['UPLOADCARE_SECRET_KEY']);\n\n$api = (new Uploadcare\\Api($configuration))->project();\n$projectInfo = $api->getProjectInfo();\necho \\sprintf(\"Project %s info:\\n\", $projectInfo->getName());\necho \\sprintf(\"Public key: %s\\n\", $projectInfo->getPubKey());\necho \\sprintf(\"Auto-store enabled: %s\\n\", $projectInfo->isAutostoreEnabled() ? 'yes' : 'no');\nforeach ($projectInfo->getCollaborators() as $email => $name) {\n    echo \\sprintf(\"%s: %s\\n\", $name, $email);\n}\n",
                  },
                  {
                    "lang": "Python",
                    "label": "Python",
                    "source": "from pyuploadcare import Uploadcare, ProjectInfo\nuploadcare = Uploadcare(public_key='YOUR_PUBLIC_KEY', secret_key='YOUR_SECRET_KEY')\n\nproject_info = uploadcare.get_project_info()\nprint(project_info)\n",
                  },
                  {
                    "lang": "Ruby",
                    "label": "Ruby",
                    "source": "require 'uploadcare'\nUploadcare.config.public_key = 'YOUR_PUBLIC_KEY'\nUploadcare.config.secret_key = 'YOUR_SECRET_KEY'\n\nproject_info = Uploadcare::Project.show\nputs project_info.inspect\n",
                  },
                  {
                    "lang": "Swift",
                    "label": "Swift",
                    "source": "import Uploadcare\n\nlet uploadcare = Uploadcare(withPublicKey: \"YOUR_PUBLIC_KEY\", secretKey: \"YOUR_SECRET_KEY\")\n\nlet project = try await uploadcare.getProjectInfo()\nprint(project)\n",
                  },
                  {
                    "lang": "Kotlin",
                    "label": "Kotlin",
                    "source": "import com.uploadcare.android.library.api.UploadcareClient\n\nval uploadcare = UploadcareClient(publicKey = \"YOUR_PUBLIC_KEY\", secretKey = \"YOUR_SECRET_KEY\")\n\nval project = uploadcare.getProject()\nLog.d(\"TAG\", project.toString())\n",
                  },
                ],
            },
        },
      "/webhooks/":
        {
          "get":
            {
              "summary": "List of webhooks",
              "description": "List of project webhooks.",
              "tags": ["Webhook"],
              "operationId": "webhooksList",
              "parameters": [{ "$ref": "#/components/parameters/acceptHeader" }],
              "responses":
                {
                  "200":
                    {
                      "description": "List of project webhooks.",
                      "content":
                        {
                          "application/json":
                            {
                              "schema":
                                {
                                  "type": "array",
                                  "items": { "$ref": "#/components/schemas/webhook_of_list_response" },
                                },
                            },
                        },
                    },
                  "400":
                    {
                      "description": "Simple HTTP Auth or webhook permission errors.",
                      "content":
                        {
                          "application/json":
                            {
                              "schema":
                                {
                                  "oneOf":
                                    [
                                      { "$ref": "#/components/schemas/simpleAuthHTTPForbidden" },
                                      { "$ref": "#/components/schemas/cantUseWebhooksError" },
                                    ],
                                },
                              "examples":
                                {
                                  "auth-errors": { "$ref": "#/components/examples/simpleAuthHTTPForbidden" },
                                  "permission-error": { "$ref": "#/components/examples/cantUseWebhooksError" },
                                },
                            },
                        },
                    },
                  "401": { "$ref": "#/components/responses/authorizationProblemsResponse" },
                  "406": { "$ref": "#/components/responses/invalidAcceptHeader" },
                  "429": { "$ref": "#/components/responses/requestWasThrottledError" },
                },
              "x-codeSamples":
                [
                  {
                    "lang": "JavaScript",
                    "label": "JS",
                    "source": "import {\n  listOfWebhooks,\n  UploadcareSimpleAuthSchema,\n} from '@uploadcare/rest-client';\n\nconst uploadcareSimpleAuthSchema = new UploadcareSimpleAuthSchema({\n  publicKey: 'YOUR_PUBLIC_KEY',\n  secretKey: 'YOUR_SECRET_KEY',\n});\n\nconst result = await listOfWebhooks({}, { authSchema: uploadcareSimpleAuthSchema })\n",
                  },
                  {
                    "lang": "PHP",
                    "label": "PHP",
                    "source": "<?php\n$configuration = Uploadcare\\Configuration::create((string) $_ENV['UPLOADCARE_PUBLIC_KEY'], (string) $_ENV['UPLOADCARE_SECRET_KEY']);\n\n$api = (new Uploadcare\\Api($configuration))->webhook();\nforeach ($api->listWebhooks() as $webhook) {\n    \\sprintf(\"Webhook with url %s is %s\\n\", $webhook->getTargetUrl(), $webhook->isActive() ? 'active' : 'not active');\n}\n",
                  },
                  {
                    "lang": "Python",
                    "label": "Python",
                    "source": "from pyuploadcare import Uploadcare, Webhook\nuploadcare = Uploadcare(public_key='YOUR_PUBLIC_KEY', secret_key='YOUR_SECRET_KEY')\n\nwebhooks: list[Webhook] = list(uploadcare.list_webhooks(limit=10))\nfor w in webhooks:\n    print(w.id)\n",
                  },
                  {
                    "lang": "Ruby",
                    "label": "Ruby",
                    "source": "require 'uploadcare'\nUploadcare.config.public_key = 'YOUR_PUBLIC_KEY'\nUploadcare.config.secret_key = 'YOUR_SECRET_KEY'\n\nwebhooks = Uploadcare::Webhook.list\nwebhooks.each { |webhook| puts webhook.inspect }\n",
                  },
                  {
                    "lang": "Swift",
                    "label": "Swift",
                    "source": "import Uploadcare\n\nlet uploadcare = Uploadcare(withPublicKey: \"YOUR_PUBLIC_KEY\", secretKey: \"YOUR_SECRET_KEY\")\n\nlet webhooks = try await uploadcare.getListOfWebhooks()\nfor webhook in webhooks {\n  print(webhook)\n}\n",
                  },
                  {
                    "lang": "Kotlin",
                    "label": "Kotlin",
                    "source": "import com.uploadcare.android.library.api.UploadcareClient\n\nval uploadcare = UploadcareClient(publicKey = \"YOUR_PUBLIC_KEY\", secretKey = \"YOUR_SECRET_KEY\")\n\nval webhooks = uploadcare.getWebhooks()\nLog.d(\"TAG\", webhooks.toString())\n",
                  },
                ],
            },
          "post":
            {
              "summary": "Create webhook",
              "description": "Create and subscribe to a webhook. You can use webhooks to receive notifications about your uploads. For instance, once a file gets uploaded to your project, we can notify you by sending a message to a target URL.",
              "operationId": "webhookCreate",
              "parameters": [{ "$ref": "#/components/parameters/acceptHeader" }],
              "tags": ["Webhook"],
              "requestBody":
                {
                  "required": true,
                  "content":
                    {
                      "application/x-www-form-urlencoded":
                        {
                          "schema":
                            {
                              "required": ["target_url", "event"],
                              "type": "object",
                              "properties":
                                {
                                  "target_url": { "$ref": "#/components/schemas/webhook_target" },
                                  "event": { "$ref": "#/components/schemas/webhook_event" },
                                  "is_active": { "$ref": "#/components/schemas/webhook_is_active" },
                                  "signing_secret": { "$ref": "#/components/schemas/webhook_signing_secret" },
                                  "version": { "$ref": "#/components/schemas/webhook_version_of_request" },
                                },
                            },
                        },
                    },
                },
              "responses":
                {
                  "201":
                    {
                      "description": "Webhook successfully created.",
                      "content":
                        {
                          "application/json": { "schema": { "$ref": "#/components/schemas/webhook_of_list_response" } },
                        },
                    },
                  "400":
                    {
                      "description": "Simple HTTP Auth or webhook permission or endpoint errors.",
                      "content":
                        {
                          "application/json":
                            {
                              "schema":
                                {
                                  "oneOf":
                                    [
                                      { "$ref": "#/components/schemas/simpleAuthHTTPForbidden" },
                                      { "$ref": "#/components/schemas/cantUseWebhooksError" },
                                      { "$ref": "#/components/schemas/webhookTargetUrlError" },
                                    ],
                                },
                              "examples":
                                {
                                  "auth-errors": { "$ref": "#/components/examples/simpleAuthHTTPForbidden" },
                                  "permission-error": { "$ref": "#/components/examples/cantUseWebhooksError" },
                                  "target-url-error": { "$ref": "#/components/examples/webhookTargetUrlError" },
                                },
                            },
                        },
                    },
                  "401": { "$ref": "#/components/responses/authorizationProblemsResponse" },
                  "406": { "$ref": "#/components/responses/invalidAcceptHeader" },
                  "429": { "$ref": "#/components/responses/requestWasThrottledError" },
                },
              "x-codeSamples":
                [
                  {
                    "lang": "JavaScript",
                    "label": "JS",
                    "source": "import {\n  createWebhook,\n  UploadcareSimpleAuthSchema,\n} from '@uploadcare/rest-client';\n\nconst uploadcareSimpleAuthSchema = new UploadcareSimpleAuthSchema({\n  publicKey: 'YOUR_PUBLIC_KEY',\n  secretKey: 'YOUR_SECRET_KEY',\n});\n\nconst result = await createWebhook(\n  {\n    targetUrl: 'https://yourwebhook.com',\n    event: 'file.uploaded',\n    isActive: true,\n  },\n  { authSchema: uploadcareSimpleAuthSchema }\n)\n",
                  },
                  {
                    "lang": "PHP",
                    "label": "PHP",
                    "source": "<?php\n$configuration = Uploadcare\\Configuration::create((string) $_ENV['UPLOADCARE_PUBLIC_KEY'], (string) $_ENV['UPLOADCARE_SECRET_KEY']);\n\n$api = (new Uploadcare\\Api($configuration))->webhook();\n$result = $api->createWebhook('https://yourwebhook.com', true, 'sign-secret', 'file.uploaded');\necho \\sprintf('Webhook %s created', $result->getId());\n",
                  },
                  {
                    "lang": "Python",
                    "label": "Python",
                    "source": "from pyuploadcare import Uploadcare, Webhook\nuploadcare = Uploadcare(public_key='YOUR_PUBLIC_KEY', secret_key='YOUR_SECRET_KEY')\n\nwebhook = uploadcare.webhooks_api.create(\n    {\n        \"event\": \"file.uploaded\",\n        \"target_url\": \"https://yourwebhook.com\",\n        \"is_active\": True,\n    }\n)\nprint(webhook)\n",
                  },
                  {
                    "lang": "Ruby",
                    "label": "Ruby",
                    "source": "require 'uploadcare'\nUploadcare.config.public_key = 'YOUR_PUBLIC_KEY'\nUploadcare.config.secret_key = 'YOUR_SECRET_KEY'\n\noptions = {\n  target_url: 'https://yourwebhook.com',\n  event: 'file.uploaded',\n  is_active: true\n}\nUploadcare::Webhook.create(**options)\n",
                  },
                  {
                    "lang": "Swift",
                    "label": "Swift",
                    "source": "import Uploadcare\n\nlet uploadcare = Uploadcare(withPublicKey: \"YOUR_PUBLIC_KEY\", secretKey: \"YOUR_SECRET_KEY\")\n\nlet url = URL(string: \"https://yourwebhook.com\")!\nlet webhook = try await uploadcare.createWebhook(targetUrl: url,  event: .fileUploaded, isActive: true, signingSecret: \"sign-secret\")\nprint(webhook)\n",
                  },
                  {
                    "lang": "Kotlin",
                    "label": "Kotlin",
                    "source": "import com.uploadcare.android.library.api.UploadcareClient\n\nval uploadcare = UploadcareClient(publicKey = \"YOUR_PUBLIC_KEY\", secretKey = \"YOUR_SECRET_KEY\")\n\nval url = URI(\"https://yourwebhook.com\")\nval webhook = uploadcare.createWebhook(\n    targetUrl = url,\n    event = EventType.UPLOADED,\n    isActive = true,\n    signingSecret = \"sign-secret\"\n)\nLog.d(\"TAG\", webhook.toString())\n",
                  },
                ],
            },
        },
      "/file-uploaded":
        {
          "post":
            {
              "x-fern-webhook": true,
              "operationId": "fileUploaded",
              "tags": ["Webhook Callbacks"],
              "summary": "file.uploaded",
              "description": "file.uploaded event payload",
              "parameters": [{ "$ref": "#/components/parameters/webhookSignature" }],
              "requestBody":
                {
                  "required": true,
                  "content":
                    { "application/json": { "schema": { "$ref": "#/components/schemas/webhookFilePayload" } } },
                },
              "responses": { "2XX": { "description": "Webhook has been received successfully" } },
            },
        },
      "/file-infected":
        {
          "post":
            {
              "x-fern-webhook": true,
              "operationId": "fileInfected",
              "tags": ["Webhook Callbacks"],
              "summary": "file.infected",
              "description": "file.infected event payload",
              "parameters": [{ "$ref": "#/components/parameters/webhookSignature" }],
              "requestBody":
                {
                  "required": true,
                  "content":
                    { "application/json": { "schema": { "$ref": "#/components/schemas/webhookFilePayload" } } },
                },
              "responses": { "2XX": { "description": "Webhook has been received successfully" } },
            },
        },
      "/file-stored":
        {
          "post":
            {
              "x-fern-webhook": true,
              "operationId": "fileStored",
              "tags": ["Webhook Callbacks"],
              "summary": "file.stored",
              "description": "file.stored event payload",
              "parameters": [{ "$ref": "#/components/parameters/webhookSignature" }],
              "requestBody":
                {
                  "required": true,
                  "content":
                    { "application/json": { "schema": { "$ref": "#/components/schemas/webhookFilePayload" } } },
                },
              "responses": { "2XX": { "description": "Webhook has been received successfully" } },
            },
        },
      "/file-deleted":
        {
          "post":
            {
              "x-fern-webhook": true,
              "operationId": "fileDeleted",
              "tags": ["Webhook Callbacks"],
              "summary": "file.deleted",
              "description": "file.deleted event payload",
              "parameters": [{ "$ref": "#/components/parameters/webhookSignature" }],
              "requestBody":
                {
                  "required": true,
                  "content":
                    { "application/json": { "schema": { "$ref": "#/components/schemas/webhookFilePayload" } } },
                },
              "responses": { "2XX": { "description": "Webhook has been received successfully" } },
            },
        },
      "/file-info-updated":
        {
          "post":
            {
              "x-fern-webhook": true,
              "operationId": "fileInfoUpdated",
              "tags": ["Webhook Callbacks"],
              "summary": "file.info_updated",
              "description": "file.info_updated event payload",
              "parameters": [{ "$ref": "#/components/parameters/webhookSignature" }],
              "requestBody":
                {
                  "required": true,
                  "content":
                    {
                      "application/json":
                        { "schema": { "$ref": "#/components/schemas/webhookFileInfoUpdatedPayload" } },
                    },
                },
              "responses": { "2XX": { "description": "Webhook has been received successfully" } },
            },
        },
      "/webhooks/{id}/":
        {
          "put":
            {
              "summary": "Update webhook",
              "description": "Update webhook attributes.",
              "operationId": "updateWebhook",
              "tags": ["Webhook"],
              "parameters":
                [
                  { "$ref": "#/components/parameters/acceptHeader" },
                  {
                    "in": "path",
                    "name": "id",
                    "description": "Webhook ID.",
                    "schema": { "type": "number", "example": 143 },
                    "required": true,
                  },
                ],
              "requestBody":
                {
                  "required": true,
                  "content":
                    {
                      "application/x-www-form-urlencoded":
                        {
                          "schema":
                            {
                              "type": "object",
                              "properties":
                                {
                                  "target_url": { "$ref": "#/components/schemas/webhook_target" },
                                  "event": { "$ref": "#/components/schemas/webhook_event" },
                                  "is_active": { "$ref": "#/components/schemas/webhook_is_active" },
                                  "signing_secret": { "$ref": "#/components/schemas/webhook_signing_secret" },
                                },
                            },
                        },
                    },
                },
              "responses":
                {
                  "200":
                    {
                      "description": "Webhook attributes successfully updated.",
                      "content": { "application/json": { "schema": { "$ref": "#/components/schemas/webhook" } } },
                    },
                  "401": { "$ref": "#/components/responses/authorizationProblemsResponse" },
                  "404":
                    {
                      "description": "Webhook with ID {id} not found.",
                      "content":
                        {
                          "application/json":
                            {
                              "schema":
                                {
                                  "type": "object",
                                  "properties":
                                    {
                                      "detail":
                                        { "type": "string", "description": "Not found.", "example": "Not found." },
                                    },
                                },
                            },
                        },
                    },
                  "406": { "$ref": "#/components/responses/invalidAcceptHeader" },
                  "429": { "$ref": "#/components/responses/requestWasThrottledError" },
                },
              "x-codeSamples":
                [
                  {
                    "lang": "JavaScript",
                    "label": "JS",
                    "source": "import {\n  updateWebhook,\n  UploadcareSimpleAuthSchema,\n} from '@uploadcare/rest-client';\n\nconst uploadcareSimpleAuthSchema = new UploadcareSimpleAuthSchema({\n  publicKey: 'YOUR_PUBLIC_KEY',\n  secretKey: 'YOUR_SECRET_KEY',\n});\n\nconst result = await updateWebhook(\n  {\n    id: 1473151,\n    targetUrl: 'https://yourwebhook.com',\n    event: 'file.uploaded',\n    isActive: true,\n    signingSecret: 'webhook-secret',\n  },\n  { authSchema: uploadcareSimpleAuthSchema }\n)\n",
                  },
                  {
                    "lang": "PHP",
                    "label": "PHP",
                    "source": "<?php\n$configuration = Uploadcare\\Configuration::create((string) $_ENV['UPLOADCARE_PUBLIC_KEY'], (string) $_ENV['UPLOADCARE_SECRET_KEY']);\n\n$api = (new Uploadcare\\Api($configuration))->webhook();\n$webhook = $api->updateWebhook(1473151, [\n    'target_url' => 'https://yourwebhook.com',\n    'event' => 'file.uploaded',\n    'is_active' => true,\n    'signing_secret' => 'webhook-secret',\n]);\n\\sprintf(\"Webhook with url %s is %s\\n\", $webhook->getTargetUrl(), $webhook->isActive() ? 'active' : 'not active');\n",
                  },
                  {
                    "lang": "Python",
                    "label": "Python",
                    "source": "from pyuploadcare import Uploadcare, Webhook\nuploadcare = Uploadcare(public_key='YOUR_PUBLIC_KEY', secret_key='YOUR_SECRET_KEY')\n\nwebhook_id = 1473151\nwebhook = uploadcare.webhooks_api.update(webhook_id, {\"is_active\": False})\n",
                  },
                  {
                    "lang": "Ruby",
                    "label": "Ruby",
                    "source": "require 'uploadcare'\nUploadcare.config.public_key = 'YOUR_PUBLIC_KEY'\nUploadcare.config.secret_key = 'YOUR_SECRET_KEY'\n\nwebhook_id = 1_473_151\noptions = {\n  target_url: 'https://yourwebhook.com',\n  event: 'file.uploaded',\n  is_active: true,\n  signing_secret: 'webhook-secret'\n}\nUploadcare::Webhook.update(webhook_id, options)\n",
                  },
                  {
                    "lang": "Swift",
                    "label": "Swift",
                    "source": "import Uploadcare\n\nlet uploadcare = Uploadcare(withPublicKey: \"YOUR_PUBLIC_KEY\", secretKey: \"YOUR_SECRET_KEY\")\n\nlet url = URL(string: \"https://yourwebhook.com\")!\nlet webhook = try await uploadcare.updateWebhook(id: 1473151, targetUrl: url, event: .fileInfoUpdated, isActive: true, signingSecret: \"webhook-secret\")\nprint(webhook)\n",
                  },
                  {
                    "lang": "Kotlin",
                    "label": "Kotlin",
                    "source": "import com.uploadcare.android.library.api.UploadcareClient\n\nval uploadcare = UploadcareClient(publicKey = \"YOUR_PUBLIC_KEY\", secretKey = \"YOUR_SECRET_KEY\")\n\nval url = URI(\"https://yourwebhook.com\")\nval webhook = uploadcare.updateWebhook(\n    webhookId = 1473151,\n    targetUrl = url,\n    event = EventType.UPLOADED,\n    isActive = true,\n    signingSecret = \"\",\n)\nLog.d(\"TAG\", webhook.toString())\n",
                  },
                ],
            },
        },
      "/webhooks/unsubscribe/":
        {
          "delete":
            {
              "summary": "Delete webhook",
              "description": "Unsubscribe and delete a webhook.",
              "tags": ["Webhook"],
              "operationId": "webhookUnsubscribe",
              "parameters": [{ "$ref": "#/components/parameters/acceptHeader" }],
              "requestBody":
                {
                  "required": true,
                  "content":
                    {
                      "application/x-www-form-urlencoded":
                        {
                          "schema":
                            {
                              "required": ["target_url"],
                              "type": "object",
                              "properties": { "target_url": { "$ref": "#/components/schemas/webhook_target" } },
                            },
                        },
                    },
                },
              "responses":
                {
                  "204": { "description": "Webhook successfully deleted." },
                  "400":
                    {
                      "description": "Simple HTTP Auth or webhook permission or endpoint errors.",
                      "content":
                        {
                          "application/json":
                            {
                              "schema":
                                {
                                  "oneOf":
                                    [
                                      { "$ref": "#/components/schemas/simpleAuthHTTPForbidden" },
                                      { "$ref": "#/components/schemas/cantUseWebhooksError" },
                                      { "$ref": "#/components/schemas/webhookTargetUrlError" },
                                    ],
                                },
                              "examples":
                                {
                                  "auth-errors": { "$ref": "#/components/examples/simpleAuthHTTPForbidden" },
                                  "permission-error": { "$ref": "#/components/examples/cantUseWebhooksError" },
                                  "target-url-error": { "$ref": "#/components/examples/webhookTargetUrlError" },
                                },
                            },
                        },
                    },
                  "401": { "$ref": "#/components/responses/authorizationProblemsResponse" },
                  "406": { "$ref": "#/components/responses/invalidAcceptHeader" },
                  "429": { "$ref": "#/components/responses/requestWasThrottledError" },
                },
              "x-codeSamples":
                [
                  {
                    "lang": "JavaScript",
                    "label": "JS",
                    "source": "import {\n  deleteWebhook,\n  UploadcareSimpleAuthSchema,\n} from '@uploadcare/rest-client';\n\nconst uploadcareSimpleAuthSchema = new UploadcareSimpleAuthSchema({\n  publicKey: 'YOUR_PUBLIC_KEY',\n  secretKey: 'YOUR_SECRET_KEY',\n});\n\nconst result = await deleteWebhook(\n  {\n    targetUrl: 'https://yourwebhook.com',\n  },\n  { authSchema: uploadcareSimpleAuthSchema }\n)\n",
                  },
                  {
                    "lang": "PHP",
                    "label": "PHP",
                    "source": "<?php\n$configuration = Uploadcare\\Configuration::create((string) $_ENV['UPLOADCARE_PUBLIC_KEY'], (string) $_ENV['UPLOADCARE_SECRET_KEY']);\n\n$api = (new Uploadcare\\Api($configuration))->webhook();\n$result = $api->deleteWebhook('https://yourwebhook.com');\necho $result ? 'Webhook has been deleted' : 'Webhook is not deleted, something went wrong';\n",
                  },
                  {
                    "lang": "Python",
                    "label": "Python",
                    "source": "from pyuploadcare import Uploadcare, Webhook\nuploadcare = Uploadcare(public_key='YOUR_PUBLIC_KEY', secret_key='YOUR_SECRET_KEY')\n\nwebhook_id = 1473151\nuploadcare.delete_webhook(webhook_id)\n",
                  },
                  {
                    "lang": "Ruby",
                    "label": "Ruby",
                    "source": "require 'uploadcare'\nUploadcare.config.public_key = 'YOUR_PUBLIC_KEY'\nUploadcare.config.secret_key = 'YOUR_SECRET_KEY'\n\nputs Uploadcare::Webhook.delete('https://yourwebhook.com')\n",
                  },
                  {
                    "lang": "Swift",
                    "label": "Swift",
                    "source": "import Uploadcare\n\nlet uploadcare = Uploadcare(withPublicKey: \"YOUR_PUBLIC_KEY\", secretKey: \"YOUR_SECRET_KEY\")\n\nlet url = URL(string: \"https://yourwebhook.com\")!\ntry await uploadcare.deleteWebhook(forTargetUrl: url)\n",
                  },
                  {
                    "lang": "Kotlin",
                    "label": "Kotlin",
                    "source": "import com.uploadcare.android.library.api.UploadcareClient\n\nval uploadcare = UploadcareClient(publicKey = \"YOUR_PUBLIC_KEY\", secretKey = \"YOUR_SECRET_KEY\")\n\nval url = URI(\"https://yourwebhook.com\")\nuploadcare.deleteWebhook(url)\n",
                  },
                ],
            },
        },
      "/convert/document/{uuid}/":
        {
          "get":
            {
              "tags": ["Conversion"],
              "summary": "Document info",
              "description": "The endpoint allows you to determine the document format and possible conversion formats.",
              "operationId": "documentConvertInfo",
              "parameters":
                [
                  { "$ref": "#/components/parameters/acceptHeader" },
                  {
                    "name": "uuid",
                    "description": "File uuid.",
                    "in": "path",
                    "required": true,
                    "schema": { "type": "string", "example": "86c91c35-58e1-41f7-9b23-2d7652cfcd17" },
                  },
                ],
              "responses":
                {
                  "200": { "$ref": "#/components/responses/documentInfoResponse" },
                  "400":
                    {
                      "description": "Simple HTTP Auth or document conversion permission errors.",
                      "content":
                        {
                          "application/json":
                            {
                              "schema":
                                {
                                  "oneOf":
                                    [
                                      { "$ref": "#/components/schemas/simpleAuthHTTPForbidden" },
                                      { "$ref": "#/components/schemas/cantUseDocsConversionError" },
                                    ],
                                },
                              "examples":
                                {
                                  "auth-errors": { "$ref": "#/components/examples/simpleAuthHTTPForbidden" },
                                  "permission-error": { "$ref": "#/components/examples/cantUseDocsConversionError" },
                                },
                            },
                        },
                    },
                  "401": { "$ref": "#/components/responses/authorizationProblemsResponse" },
                  "404":
                    {
                      "description": "Document with specified ID is not found.",
                      "content":
                        {
                          "application/json":
                            {
                              "schema":
                                {
                                  "type": "object",
                                  "properties":
                                    {
                                      "detail": { "type": "string", "example": "Not found.", "default": "Not found." },
                                    },
                                },
                            },
                        },
                    },
                  "406": { "$ref": "#/components/responses/invalidAcceptHeader" },
                  "429": { "$ref": "#/components/responses/requestWasThrottledError" },
                  "503":
                    {
                      "description": "Conversion service error.",
                      "content": { "text/plain": { "schema": { "type": "string" } } },
                    },
                },
            },
        },
      "/convert/document/":
        {
          "post":
            {
              "tags": ["Conversion"],
              "summary": "Convert document",
              "description": "Uploadcare allows you to convert files to different target formats. Check out the [conversion capabilities](/docs/transformations/document-conversion/#document-file-formats) for each supported format.",
              "operationId": "documentConvert",
              "parameters": [{ "$ref": "#/components/parameters/acceptHeader" }],
              "requestBody":
                {
                  "required": true,
                  "content":
                    {
                      "application/json": { "schema": { "$ref": "#/components/schemas/documentJobSubmitParameters" } },
                    },
                },
              "responses":
                {
                  "200": { "$ref": "#/components/responses/documentJobSubmitResponse" },
                  "400":
                    {
                      "description": "Simple HTTP Auth or document conversion permission errors.",
                      "content":
                        {
                          "application/json":
                            {
                              "schema":
                                {
                                  "oneOf":
                                    [
                                      { "$ref": "#/components/schemas/simpleAuthHTTPForbidden" },
                                      { "$ref": "#/components/schemas/cantUseDocsConversionError" },
                                      { "$ref": "#/components/schemas/jsonObjectParseError" },
                                      {
                                        "type": "object",
                                        "properties":
                                          {
                                            "detail": { "type": "string", "default": "“paths” parameter is required." },
                                          },
                                      },
                                    ],
                                },
                              "examples":
                                {
                                  "auth-errors": { "$ref": "#/components/examples/simpleAuthHTTPForbidden" },
                                  "permission-error": { "$ref": "#/components/examples/cantUseDocsConversionError" },
                                  "json-parse-error": { "$ref": "#/components/examples/jsonObjectParseError" },
                                  "path-error": { "value": { "detail": "“paths” parameter is required." } },
                                },
                            },
                        },
                    },
                  "401": { "$ref": "#/components/responses/authorizationProblemsResponse" },
                  "406": { "$ref": "#/components/responses/invalidAcceptHeader" },
                },
              "x-codeSamples":
                [
                  {
                    "lang": "PHP",
                    "label": "PHP",
                    "source": "<?php\nuse Uploadcare\\Interfaces\\Conversion\\ConvertedItemInterface;\nuse Uploadcare\\Interfaces\\Response\\ResponseProblemInterface;\n$configuration = Uploadcare\\Configuration::create((string) $_ENV['UPLOADCARE_PUBLIC_KEY'], (string) $_ENV['UPLOADCARE_SECRET_KEY']);\n\n$api = (new Uploadcare\\Api($configuration))->conversion();\n$request = new Uploadcare\\Conversion\\DocumentConversionRequest('pdf');\n$result = $api->convertDocument('1bac376c-aa7e-4356-861b-dd2657b5bfd2', $request);\nif ($result instanceof ConvertedItemInterface) {\n    echo \\sprintf('Conversion requested. Key is \\'%s\\'', $result->getToken());\n}\nif ($result instanceof ResponseProblemInterface) {\n    echo \\sprintf('Error in request: %s', $result->getReason());\n}\n",
                  },
                  {
                    "lang": "Python",
                    "label": "Python",
                    "source": "from pyuploadcare import Uploadcare\nuploadcare = Uploadcare(public_key='YOUR_PUBLIC_KEY', secret_key='YOUR_SECRET_KEY')\n\nfile = uploadcare.file('1bac376c-aa7e-4356-861b-dd2657b5bfd2')\ntransformation = DocumentTransformation().format(DocumentFormat.pdf)\nconverted_file = file.convert(transformation)\nprint(converted_file.info)\n",
                  },
                  {
                    "lang": "Ruby",
                    "label": "Ruby",
                    "source": "require 'uploadcare'\nUploadcare.config.public_key = 'YOUR_PUBLIC_KEY'\nUploadcare.config.secret_key = 'YOUR_SECRET_KEY'\n\ndocument_params = { uuid: '1bac376c-aa7e-4356-861b-dd2657b5bfd2', format: :pdf }\noptions = { store: true }\nUploadcare::DocumentConverter.convert(document_params, options)\n",
                  },
                  {
                    "lang": "Swift",
                    "label": "Swift",
                    "source": "import Uploadcare\n\nlet uploadcare = Uploadcare(withPublicKey: \"YOUR_PUBLIC_KEY\", secretKey: \"YOUR_SECRET_KEY\")\n\nlet file = try await uploadcare.fileInfo(withUUID: \"1bac376c-aa7e-4356-861b-dd2657b5bfd2\")\nlet settings = DocumentConversionJobSettings(forFile: file)\n  .format(.pdf)\n  \nlet response = try await uploadcare.convertDocumentsWithSettings([settings])\nprint(response)\n",
                  },
                  {
                    "lang": "Kotlin",
                    "label": "Kotlin",
                    "source": "import com.uploadcare.android.library.api.UploadcareClient\n\nval uploadcare = UploadcareClient(publicKey = \"YOUR_PUBLIC_KEY\", secretKey = \"YOUR_SECRET_KEY\")\n\nval conversionJob = DocumentConversionJob(fileId = \"1bac376c-aa7e-4356-861b-dd2657b5bfd2\")\n    .apply { setFormat(DocumentFormat.PDF) }\nval converter = DocumentConverter(uploadcare, listOf(conversionJob))\nval response = converter.convertWithResultData()\nLog.d(\"TAG\", response.toString())\n",
                  },
                ],
            },
        },
      "/convert/document/status/{token}/":
        {
          "get":
            {
              "tags": ["Conversion"],
              "summary": "Document conversion job status",
              "description": "Once you get a conversion job result, you can acquire a conversion job status via token. Just put it in your request URL as `:token`.",
              "operationId": "documentConvertStatus",
              "parameters":
                [
                  { "$ref": "#/components/parameters/acceptHeader" },
                  {
                    "name": "token",
                    "description": "Job token.",
                    "in": "path",
                    "schema": { "type": "integer" },
                    "required": true,
                    "example": 426339926,
                  },
                ],
              "responses":
                {
                  "200": { "$ref": "#/components/responses/documentJobStatusResponse" },
                  "400":
                    {
                      "description": "Simple HTTP Auth or document conversion permission errors.",
                      "content":
                        {
                          "application/json":
                            {
                              "schema":
                                {
                                  "oneOf":
                                    [
                                      { "$ref": "#/components/schemas/simpleAuthHTTPForbidden" },
                                      { "$ref": "#/components/schemas/cantUseDocsConversionError" },
                                    ],
                                },
                              "examples":
                                {
                                  "auth-errors": { "$ref": "#/components/examples/simpleAuthHTTPForbidden" },
                                  "permission-error": { "$ref": "#/components/examples/cantUseDocsConversionError" },
                                },
                            },
                        },
                    },
                  "401": { "$ref": "#/components/responses/authorizationProblemsResponse" },
                  "404":
                    {
                      "description": "Job with specified ID is not found.",
                      "content":
                        {
                          "application/json":
                            {
                              "schema":
                                {
                                  "type": "object",
                                  "properties":
                                    {
                                      "detail": { "type": "string", "example": "Not found.", "default": "Not found." },
                                    },
                                },
                            },
                        },
                    },
                  "406": { "$ref": "#/components/responses/invalidAcceptHeader" },
                  "429": { "$ref": "#/components/responses/requestWasThrottledError" },
                  "503":
                    {
                      "description": "Conversion service error.",
                      "content": { "text/plain": { "schema": { "type": "string" } } },
                    },
                },
              "x-codeSamples":
                [
                  {
                    "lang": "JavaScript",
                    "label": "JS",
                    "source": "import {\n  conversionJobStatus,\n  ConversionType,\n  UploadcareSimpleAuthSchema,\n} from '@uploadcare/rest-client';\n\nconst uploadcareSimpleAuthSchema = new UploadcareSimpleAuthSchema({\n  publicKey: 'YOUR_PUBLIC_KEY',\n  secretKey: 'YOUR_SECRET_KEY',\n});\n\nconst result = await conversionJobStatus(\n  {\n    type: ConversionType.DOCUMENT,\n    token: 32921143\n  },\n  { authSchema: uploadcareSimpleAuthSchema }\n)\n",
                  },
                  {
                    "lang": "PHP",
                    "label": "PHP",
                    "source": "<?php\n$configuration = Uploadcare\\Configuration::create((string) $_ENV['UPLOADCARE_PUBLIC_KEY'], (string) $_ENV['UPLOADCARE_SECRET_KEY']);\n\n$api = (new Uploadcare\\Api($configuration))->conversion();\n$status = $api->documentJobStatus(32921143);\necho \\sprintf('Conversion status: %s', $status->getError() ?? $status->getStatus());\n",
                  },
                  {
                    "lang": "Python",
                    "label": "Python",
                    "source": "from pyuploadcare import Uploadcare\nuploadcare = Uploadcare(public_key='YOUR_PUBLIC_KEY', secret_key='YOUR_SECRET_KEY')\n\ntoken = 32921143\ndocument_convert_status = uploadcare.document_convert_api.status(token)\nprint(document_convert_status.status)\n",
                  },
                  {
                    "lang": "Ruby",
                    "label": "Ruby",
                    "source": "require 'uploadcare'\nUploadcare.config.public_key = 'YOUR_PUBLIC_KEY'\nUploadcare.config.secret_key = 'YOUR_SECRET_KEY'\n\ntoken = 32_921_143\nputs Uploadcare::DocumentConverter.status(token)\n",
                  },
                  {
                    "lang": "Swift",
                    "label": "Swift",
                    "source": "import Uploadcare\n\nlet uploadcare = Uploadcare(withPublicKey: \"YOUR_PUBLIC_KEY\", secretKey: \"YOUR_SECRET_KEY\")\n\nlet job = try await uploadcare.documentConversionJobStatus(token: 32921143)\nprint(job.statusString)\n",
                  },
                  {
                    "lang": "Kotlin",
                    "label": "Kotlin",
                    "source": "import com.uploadcare.android.library.api.UploadcareClient\n\nval uploadcare = UploadcareClient(publicKey = \"YOUR_PUBLIC_KEY\", secretKey = \"YOUR_SECRET_KEY\")\n\nval status = uploadcare.getDocumentConversionStatus(token = 32921143)\nLog.d(\"TAG\", status.toString())\n",
                  },
                ],
            },
        },
      "/convert/video/":
        {
          "post":
            {
              "tags": ["Conversion"],
              "summary": "Convert video",
              "description": "Uploadcare video processing adjusts video quality, format (mp4, webm, ogg), and size, cuts it, and generates thumbnails. Processed video is instantly available over CDN.",
              "operationId": "videoConvert",
              "parameters": [{ "$ref": "#/components/parameters/acceptHeader" }],
              "requestBody":
                {
                  "required": true,
                  "content":
                    { "application/json": { "schema": { "$ref": "#/components/schemas/videoJobSubmitParameters" } } },
                },
              "responses":
                {
                  "200": { "$ref": "#/components/responses/videoJobSubmitResponse" },
                  "400":
                    {
                      "description": "Simple HTTP Auth or video conversion permission errors.",
                      "content":
                        {
                          "application/json":
                            {
                              "schema":
                                {
                                  "oneOf":
                                    [
                                      { "$ref": "#/components/schemas/simpleAuthHTTPForbidden" },
                                      { "$ref": "#/components/schemas/cantUseVideoConversionError" },
                                      { "$ref": "#/components/schemas/jsonObjectParseError" },
                                      {
                                        "type": "object",
                                        "properties":
                                          {
                                            "detail": { "type": "string", "default": "“paths” parameter is required." },
                                          },
                                      },
                                    ],
                                },
                              "examples":
                                {
                                  "auth-errors": { "$ref": "#/components/examples/simpleAuthHTTPForbidden" },
                                  "permission-error": { "$ref": "#/components/examples/cantUseVideoConversionError" },
                                  "json-parse-error": { "$ref": "#/components/examples/jsonObjectParseError" },
                                  "path-error": { "value": { "detail": "“paths” parameter is required." } },
                                },
                            },
                        },
                    },
                  "401": { "$ref": "#/components/responses/authorizationProblemsResponse" },
                  "406": { "$ref": "#/components/responses/invalidAcceptHeader" },
                },
              "x-codeSamples":
                [
                  {
                    "lang": "PHP",
                    "label": "PHP",
                    "source": "<?php\nuse Uploadcare\\Interfaces\\Conversion\\ConvertedItemInterface;\nuse Uploadcare\\Interfaces\\Response\\ResponseProblemInterface;\n$configuration = Uploadcare\\Configuration::create((string) $_ENV['UPLOADCARE_PUBLIC_KEY'], (string) $_ENV['UPLOADCARE_SECRET_KEY']);\n\n$api = (new Uploadcare\\Api($configuration))->conversion();\n$request = (new Uploadcare\\Conversion\\VideoEncodingRequest())\n    ->setHorizontalSize(1024)\n    ->setVerticalSize(768)\n    ->setResizeMode('preserve_ratio')\n    ->setTargetFormat('mp4');\n$result = $api->convertVideo('1bac376c-aa7e-4356-861b-dd2657b5bfd2', $request);\nif ($result instanceof ConvertedItemInterface) {\n    echo \\sprintf('Conversion requested. Key is \\'%s\\'', $result->getToken());\n}\nif ($result instanceof ResponseProblemInterface) {\n    echo \\sprintf('Error in request: %s', $result->getReason());\n}\n",
                  },
                  {
                    "lang": "Python",
                    "label": "Python",
                    "source": "from pyuploadcare import Uploadcare\nuploadcare = Uploadcare(public_key='YOUR_PUBLIC_KEY', secret_key='YOUR_SECRET_KEY')\n\ntransformation = (\n    VideoTransformation()\n    .format(VideoFormat.mp4)\n    .size(width=640, height=480, resize_mode=ResizeMode.add_padding)\n    .quality(Quality.lighter)\n    .cut(start_time=\"0:1.535\", length=\"0:10.0\")\n    .thumbs(10)\n)\n\npath = transformation.path('1bac376c-aa7e-4356-861b-dd2657b5bfd2')\nresponse = uploadcare.video_convert_api.convert([path])\nvideo_convert_info = response.result[0]\nconverted_file = uploadcare.file(video_convert_info.uuid)\nvideo_convert_status = uploadcare.video_convert_api.status(video_convert_info.token)\n",
                  },
                  {
                    "lang": "Ruby",
                    "label": "Ruby",
                    "source": "require 'uploadcare'\nUploadcare.config.public_key = 'YOUR_PUBLIC_KEY'\nUploadcare.config.secret_key = 'YOUR_SECRET_KEY'\n\nvideo_params = {\n  uuid: '1bac376c-aa7e-4356-861b-dd2657b5bfd2',\n  format: :mp4,\n  quality: :lighter\n}\noptions = { store: true }\nUploadcare::VideoConverter.convert(video_params, options)\n",
                  },
                  {
                    "lang": "Swift",
                    "label": "Swift",
                    "source": "import Uploadcare\n\nlet uploadcare = Uploadcare(withPublicKey: \"YOUR_PUBLIC_KEY\", secretKey: \"YOUR_SECRET_KEY\")\n\nlet file = try await uploadcare.fileInfo(withUUID: \"1bac376c-aa7e-4356-861b-dd2657b5bfd2\")\nlet settings = VideoConversionJobSettings(forFile: videoFile)\n  .format(.mp4)\n  .size(VideoSize(width: 640, height: 480))\n  .resizeMode(.addPadding)\n  .quality(.lighter)\n  .cut( VideoCut(startTime: \"0:0:5.000\", length: \"15\") )\n  .thumbs(10)\n\nlet response = try await uploadcare.convertVideosWithSettings([settings])\nprint(response)\n",
                  },
                  {
                    "lang": "Kotlin",
                    "label": "Kotlin",
                    "source": "import com.uploadcare.android.library.api.UploadcareClient\n\nval uploadcare = UploadcareClient(publicKey = \"YOUR_PUBLIC_KEY\", secretKey = \"YOUR_SECRET_KEY\")\n\nval conversionJob = VideoConversionJob(fileId = \"1bac376c-aa7e-4356-861b-dd2657b5bfd2\")\n    .apply {\n        setFormat(VideoFormat.MP4)\n        resize(width = 640, height = 480, resizeMode = VideoResizeMode.LETTERBOX)\n        quality(VideoQuality.LIGHTER)\n        cut(startTime = \"0:0:5.000\", length = \"15\")\n        thumbnails(10)\n    }\nval converter = VideoConverter(uploadcare, listOf(conversionJob))\nval response = converter.convertWithResultData()\nLog.d(\"TAG\", response.toString())\n",
                  },
                ],
            },
        },
      "/convert/video/status/{token}/":
        {
          "get":
            {
              "tags": ["Conversion"],
              "summary": "Video conversion job status",
              "description": "Once you get a processing job result, you can acquire a processing job status via token. Just put it in your request URL as `:token`.",
              "operationId": "videoConvertStatus",
              "parameters":
                [
                  { "$ref": "#/components/parameters/acceptHeader" },
                  {
                    "name": "token",
                    "description": "Job token.",
                    "in": "path",
                    "schema": { "type": "integer" },
                    "required": true,
                    "example": 426339926,
                  },
                ],
              "responses":
                {
                  "200": { "$ref": "#/components/responses/videoJobStatusResponse" },
                  "400":
                    {
                      "description": "Simple HTTP Auth or video conversion permission errors.",
                      "content":
                        {
                          "application/json":
                            {
                              "schema":
                                {
                                  "oneOf":
                                    [
                                      { "$ref": "#/components/schemas/simpleAuthHTTPForbidden" },
                                      { "$ref": "#/components/schemas/cantUseVideoConversionError" },
                                    ],
                                },
                              "examples":
                                {
                                  "auth-errors": { "$ref": "#/components/examples/simpleAuthHTTPForbidden" },
                                  "permission-error": { "$ref": "#/components/examples/cantUseVideoConversionError" },
                                },
                            },
                        },
                    },
                  "401": { "$ref": "#/components/responses/authorizationProblemsResponse" },
                  "404":
                    {
                      "description": "Job with specified ID is not found.",
                      "content":
                        {
                          "application/json":
                            {
                              "schema":
                                {
                                  "type": "object",
                                  "properties":
                                    {
                                      "detail": { "type": "string", "example": "Not found.", "default": "Not found." },
                                    },
                                },
                            },
                        },
                    },
                  "406": { "$ref": "#/components/responses/invalidAcceptHeader" },
                  "429": { "$ref": "#/components/responses/requestWasThrottledError" },
                  "503":
                    {
                      "description": "Conversion service error.",
                      "content": { "text/plain": { "schema": { "type": "string" } } },
                    },
                },
              "x-codeSamples":
                [
                  {
                    "lang": "JavaScript",
                    "label": "JS",
                    "source": "import {\n  conversionJobStatus,\n  ConversionType,\n  UploadcareSimpleAuthSchema,\n} from '@uploadcare/rest-client';\n\nconst uploadcareSimpleAuthSchema = new UploadcareSimpleAuthSchema({\n  publicKey: 'YOUR_PUBLIC_KEY',\n  secretKey: 'YOUR_SECRET_KEY',\n});\n\nconst result = await conversionJobStatus(\n  {\n    type: ConversionType.VIDEO,\n    token: 1201016744\n  },\n  { authSchema: uploadcareSimpleAuthSchema }\n)\n",
                  },
                  {
                    "lang": "PHP",
                    "label": "PHP",
                    "source": "<?php\n$configuration = Uploadcare\\Configuration::create((string) $_ENV['UPLOADCARE_PUBLIC_KEY'], (string) $_ENV['UPLOADCARE_SECRET_KEY']);\n\n$api = (new Uploadcare\\Api($configuration))->conversion();\n$status = $api->videoJobStatus(1201016744);\necho \\sprintf('Conversion status: %s', $status->getError() ?? $status->getStatus());\n",
                  },
                  {
                    "lang": "Python",
                    "label": "Python",
                    "source": "from pyuploadcare import Uploadcare\nuploadcare = Uploadcare(public_key='YOUR_PUBLIC_KEY', secret_key='YOUR_SECRET_KEY')\n\ntoken = 1201016744\nvideo_convert_status = uploadcare.video_convert_api.status(token)\nprint(video_convert_status.status)\n",
                  },
                  {
                    "lang": "Ruby",
                    "label": "Ruby",
                    "source": "require 'uploadcare'\nUploadcare.config.public_key = 'YOUR_PUBLIC_KEY'\nUploadcare.config.secret_key = 'YOUR_SECRET_KEY'\n\ntoken = 1_201_016_744\nputs Uploadcare::VideoConverter.status(token)\n",
                  },
                  {
                    "lang": "Swift",
                    "label": "Swift",
                    "source": "import Uploadcare\n\nlet uploadcare = Uploadcare(withPublicKey: \"YOUR_PUBLIC_KEY\", secretKey: \"YOUR_SECRET_KEY\")\n\nlet job = try await uploadcare.videoConversionJobStatus(token: 1201016744)\nprint(job.statusString)\n",
                  },
                  {
                    "lang": "Kotlin",
                    "label": "Kotlin",
                    "source": "import com.uploadcare.android.library.api.UploadcareClient\n\nval uploadcare = UploadcareClient(publicKey = \"YOUR_PUBLIC_KEY\", secretKey = \"YOUR_SECRET_KEY\")\n\nval status = uploadcare.getVideoConversionStatus(token = 1201016744)\nLog.d(\"TAG\", status.toString())\n",
                  },
                ],
            },
        },
    },
  "components":
    {
      "securitySchemes":
        {
          "apiKeyAuth":
            {
              "type": "apiKey",
              "in": "header",
              "name": "Authorization",
              "x-fern-header": { "prefix": "Uploadcare" },
              "description": "Every request made to `https://api.uploadcare.com/` MUST be signed. HTTPS SHOULD be used with any authorization scheme.\n\nRequests MUST contain the `Authorization` header defining `auth-scheme` and `auth-param`: `Authorization: auth-scheme auth-param`.\n\nEvery request MUST contain the `Accept` header identifying the REST API version: `Accept: application/vnd.uploadcare-v0.7+json`.\n\nThere are two available authorization schemes:\n* For production: `Uploadcare`, a scheme where a `signature`, not your Secret API Key MUST be specified. Signatures SHOULD be generated on backend.\n* For quick tests: `Uploadcare.Simple`, a simple scheme where your [Secret API Key](https://app.uploadcare.com/projects/-/api-keys/) MUST be specified in every request's `auth-param`.\n",
            }
        },
      "responses":
        {
          "invalidAcceptHeader":
            {
              "description": "Invalid version header `Accept` for this endpoint.",
              "content":
                {
                  "application/json":
                    {
                      "schema":
                        {
                          "type": "object",
                          "properties":
                            {
                              "detail":
                                {
                                  "type": "string",
                                  "example": "Incorrect Accept header provided. Make sure to specify API version. Refer to REST API docs for details.",
                                  "default": "Incorrect Accept header provided. Make sure to specify API version. Refer to REST API docs for details.",
                                },
                            },
                        },
                    },
                },
            },
          "authorizationProblemsResponse":
            {
              "description": "Authorization errors.",
              "content":
                {
                  "application/json":
                    {
                      "schema":
                        {
                          "type": "object",
                          "properties":
                            {
                              "detail":
                                {
                                  "type": "string",
                                  "enum":
                                    [
                                      "Incorrect authentication credentials.",
                                      "Public key {public_key} not found.",
                                      "Secret key not found.",
                                      "Invalid signature. Please check your Secret key.",
                                    ],
                                  "example": "Incorrect authentication credentials.",
                                },
                            },
                        },
                    },
                },
            },
          "simpleAuthHTTPForbiddenResponse":
            {
              "description": "Simple authentication over HTTP is forbidden. Please, use HTTPS or signed requests instead.",
              "content":
                { "application/json": { "schema": { "$ref": "#/components/schemas/simpleAuthHTTPForbidden" } } },
            },
          "requestWasThrottledError":
            {
              "description": "Request was throttled.",
              "headers":
                {
                  "Retry-After":
                    {
                      "description": "Number of seconds to wait before the next request.",
                      "schema": { "type": "number", "example": 10 },
                    },
                },
              "content":
                {
                  "application/json":
                    {
                      "schema":
                        {
                          "type": "object",
                          "properties":
                            {
                              "detail":
                                {
                                  "type": "string",
                                  "example": "Request was throttled. Expected available in 10 seconds.",
                                },
                            },
                        },
                    },
                },
            },
          "executeAddonResponse":
            {
              "description": "Add-On execution response.",
              "content":
                {
                  "application/json":
                    {
                      "schema":
                        {
                          "type": "object",
                          "properties":
                            {
                              "request_id":
                                {
                                  "type": "string",
                                  "format": "uuid",
                                  "description": "Request ID.",
                                  "example": "8db3c8b4-2dea-4146-bcdb-63387e2b33c1",
                                },
                            },
                        },
                    },
                },
            },
          "executeAddonConcurrentCallResponse":
            {
              "description": "Add-On concurrent call attempt.",
              "content":
                {
                  "application/json":
                    {
                      "schema":
                        {
                          "type": "object",
                          "properties":
                            {
                              "detail":
                                {
                                  "type": "string",
                                  "example": "Concurrent call attempted",
                                  "default": "Concurrent call attempted",
                                },
                            },
                        },
                    },
                },
            },
          "addonExecutionStatusResponse":
            {
              "description": "Add-On execution status response.",
              "content":
                {
                  "application/json":
                    {
                      "schema":
                        {
                          "type": "object",
                          "properties":
                            {
                              "status":
                                {
                                  "type": "string",
                                  "enum": ["in_progress", "error", "done", "unknown"],
                                  "description": "Defines the status of an Add-On execution.\nIn most cases, once the status changes to `done`, [Application Data](/docs/api/rest/file/info/#response.body.appdata) of the file that had been specified as a `appdata`, will contain the result of the execution.",
                                },
                            },
                        },
                    },
                },
            },
          "fileMetadataResponse":
            {
              "description": "File metadata in JSON.",
              "content":
                {
                  "application/json":
                    { "schema": { "type": "object", "example": { "subsystem": "uploader", "pet": "cat" } } },
                },
            },
          "paginatedFilesResponse":
            {
              "description": "A list of files, paginated.",
              "content":
                {
                  "application/json":
                    {
                      "schema":
                        {
                          "type": "object",
                          "properties":
                            {
                              "next":
                                {
                                  "type": "string",
                                  "format": "uri",
                                  "description": "Next page URL.",
                                  "nullable": true,
                                  "example": "https://api.uploadcare.com/files/?from=2018-11-27T01%3A00%3A24.296613%2B00%3A00&limit=3&offset=0",
                                },
                              "previous":
                                {
                                  "type": "string",
                                  "format": "uri",
                                  "description": "Previous page URL.",
                                  "nullable": true,
                                  "example": "https://api.uploadcare.com/files/?limit=3&to=2018-11-27T01%3A00%3A36.436838%2B00%3A00&offset=0",
                                },
                              "total":
                                {
                                  "type": "number",
                                  "minimum": 0,
                                  "description": "Total number of the files of the queried type. The queried type depends on the stored and removed query parameters.",
                                  "example": 26,
                                },
                              "totals":
                                {
                                  "type": "object",
                                  "properties":
                                    {
                                      "removed":
                                        {
                                          "type": "number",
                                          "minimum": 0,
                                          "description": "Total number of the files that are marked as removed.",
                                          "default": 0,
                                          "example": 0,
                                        },
                                      "stored":
                                        {
                                          "type": "number",
                                          "minimum": 0,
                                          "description": "Total number of the files that are marked as stored.",
                                          "default": 0,
                                          "example": 25,
                                        },
                                      "unstored":
                                        {
                                          "type": "number",
                                          "minimum": 0,
                                          "description": "Total number of the files that are not marked as stored.",
                                          "default": 0,
                                          "example": 1,
                                        },
                                    },
                                  "required": ["removed", "stored", "unstored"],
                                },
                              "per_page":
                                { "type": "number", "description": "Number of the files per page.", "example": 100 },
                              "results": { "type": "array", "items": { "$ref": "#/components/schemas/file" } },
                            },
                        },
                      "examples":
                        {
                          "with-appdata": { "$ref": "#/components/examples/file_list_w_appdata" },
                          "without-appdata": { "$ref": "#/components/examples/file_list" },
                        },
                    },
                },
            },
          "paginatedGroupsResponse":
            {
              "description": "A list of groups, paginated.",
              "content":
                {
                  "application/json":
                    {
                      "schema":
                        {
                          "type": "object",
                          "properties":
                            {
                              "next":
                                {
                                  "type": "string",
                                  "format": "uri",
                                  "description": "Next page URL.",
                                  "nullable": true,
                                  "example": "https://api.uploadcare.com/groups/?limit=3&from=2018-11-27T01%3A00%3A24.296613%2B00%3A00&offset=0",
                                },
                              "previous":
                                {
                                  "type": "string",
                                  "format": "uri",
                                  "description": "Previous page URL.",
                                  "nullable": true,
                                  "example": "https://api.uploadcare.com/groups/?limit=3&to=2018-11-27T01%3A00%3A36.436838%2B00%3A00&offset=0",
                                },
                              "total":
                                {
                                  "type": "number",
                                  "minimum": 0,
                                  "description": "Total number of groups in the project.",
                                  "example": 26,
                                },
                              "per_page":
                                { "type": "number", "description": "Number of groups per page.", "example": 100 },
                              "results": { "type": "array", "items": { "$ref": "#/components/schemas/group" } },
                            },
                        },
                      "examples": { "list": { "$ref": "#/components/examples/group_list" } },
                    },
                },
            },
          "filesStoreUUIDSError":
            {
              "description": "File UUIDs list validation errors.",
              "content":
                {
                  "application/json":
                    {
                      "schema":
                        {
                          "oneOf":
                            [
                              { "$ref": "#/components/schemas/simpleAuthHTTPForbidden" },
                              {
                                "type": "object",
                                "description": "File UUIDs list validation errors.",
                                "properties":
                                  {
                                    "detail":
                                      {
                                        "type": "string",
                                        "enum":
                                          [
                                            "Expected list of UUIDs",
                                            "List of UUIDs can not be empty",
                                            "Maximum UUIDs per request is exceeded. The limit is 100",
                                          ],
                                        "example": "Expected list of UUIDs",
                                      },
                                  },
                              },
                            ],
                        },
                    },
                },
            },
          "fileNotFoundError":
            {
              "description": "File not found.",
              "content":
                {
                  "application/json":
                    {
                      "schema":
                        {
                          "type": "object",
                          "properties":
                            { "detail": { "type": "string", "description": "Not found.", "example": "Not found." } },
                        },
                    },
                },
            },
          "filesStorageResponse":
            {
              "description": "OK. See `problems` and `result` fields in the response. In case a file list provided in a request holds invalid UUIDs, they'll be included in the `problems` structure. Invalid UUIDs can be incomplete, associated with files that no longer exist, etc.",
              "content":
                {
                  "application/json":
                    {
                      "schema":
                        {
                          "type": "object",
                          "properties":
                            {
                              "status": { "type": "string", "example": "ok" },
                              "problems":
                                {
                                  "type": "object",
                                  "description": "Dictionary of passed files UUIDs and problems associated with these UUIDs.",
                                  "example":
                                    {
                                      "21975c81-7f57-4c7a-aef9-acfe28779f78": "Missing in the project",
                                      "4j334o01-8bs3": "Invalid",
                                    },
                                },
                              "result":
                                {
                                  "description": "List of file objects that have been stored/deleted.",
                                  "type": "array",
                                  "items": { "$ref": "#/components/schemas/file" },
                                },
                            },
                        },
                    },
                },
            },
          "fileCopyErrors":
            {
              "description": "Possible errors for file copy endpoint.",
              "content":
                {
                  "application/json":
                    {
                      "schema":
                        {
                          "type": "object",
                          "properties":
                            {
                              "detail":
                                {
                                  "type": "string",
                                  "enum":
                                    [
                                      "Bad `source` parameter. Use UUID or CDN URL.",
                                      "`source` parameter is required.",
                                      "Project has no storage with provided name.",
                                      "`store` parameter should be `true` or `false`.",
                                      "Invalid pattern provided: `pattern_value`",
                                      "Invalid pattern provided: Invalid character in a pattern.",
                                      "File is not ready yet.",
                                      "Copying of large files is not supported at the moment.",
                                      "Not allowed on your current plan.",
                                    ],
                                  "example": "File is not ready yet.",
                                },
                            },
                        },
                    },
                },
            },
          "groupNotFound":
            {
              "description": "Group with `uuid` not found.",
              "content":
                {
                  "application/json":
                    {
                      "schema":
                        {
                          "type": "object",
                          "properties":
                            {
                              "detail":
                                { "type": "string", "description": "Group not found.", "example": "Not found." },
                            },
                        },
                    },
                },
            },
          "documentJobSubmitResponse":
            {
              "description": "Success.",
              "content":
                {
                  "application/json":
                    {
                      "schema":
                        {
                          "type": "object",
                          "properties":
                            {
                              "problems":
                                {
                                  "type": "object",
                                  "description": "Dictionary of problems related to your processing job, if any. A key is the `path` you requested.",
                                  "additionalProperties": { "type": "string", "format": "uuid" },
                                },
                              "result":
                                {
                                  "type": "array",
                                  "description": "Result for each requested path, in case of no errors for that path.",
                                  "items":
                                    {
                                      "type": "object",
                                      "properties":
                                        {
                                          "original_source":
                                            {
                                              "type": "string",
                                              "description": "Source file identifier including a target format, if present.",
                                            },
                                          "uuid":
                                            {
                                              "type": "string",
                                              "description": "A UUID of your converted document.",
                                              "format": "uuid",
                                            },
                                          "token":
                                            {
                                              "type": "integer",
                                              "description": "A conversion job token that can be used to get a job status.",
                                            },
                                        },
                                    },
                                },
                            },
                          "example":
                            {
                              "problems":
                                {
                                  "8ddbbb48-0927-4df7-afac-c6031668b01b": 'Bad path "8ddbbb48-0927-4df7-afac-c6031668b01b". Use UUID or CDN URL',
                                },
                              "result":
                                [
                                  {
                                    "original_source": "https://cdn.uploadcare.com/5ffa2545-ea40-4e71-a9e4-3a8e49b7b737/document/-/format/jpg/-/page/1/",
                                    "token": 445630631,
                                    "uuid": "d52d7136-a2e5-4338-9f45-affbf83b857d",
                                  },
                                  {
                                    "original_source": "88a51210-bd69-4411-bc72-a9952d9512cd/document/-/format/pdf/",
                                    "token": 445630637,
                                    "uuid": "28843a09-dd3d-4b8a-ad4f-8aa5f8f60ff2",
                                  },
                                ],
                            },
                        },
                    },
                },
            },
          "documentJobStatusResponse":
            {
              "description": "Success.",
              "content":
                {
                  "application/json":
                    {
                      "schema":
                        {
                          "type": "object",
                          "properties":
                            {
                              "status":
                                {
                                  "type": "string",
                                  "description": "Conversion job status, can have one of the following values: - `pending` — a source file is being prepared for conversion. - `processing` — conversion is in progress. - `finished` — the conversion is finished. - `failed` — failed to convert the source, see `error` for details. - `canceled` — the conversion was canceled.",
                                  "enum": ["pending", "processing", "finished", "failed", "cancelled"],
                                },
                              "error":
                                {
                                  "type": "string",
                                  "nullable": true,
                                  "description": "Holds a conversion error if your file can't be handled.",
                                },
                              "result":
                                {
                                  "type": "object",
                                  "description": "Repeats the contents of your processing output.",
                                  "properties":
                                    {
                                      "uuid":
                                        {
                                          "type": "string",
                                          "format": "uuid",
                                          "description": "A UUID of a converted target file.",
                                        },
                                    },
                                },
                            },
                          "example":
                            {
                              "status": "processing",
                              "error": null,
                              "result": { "uuid": "500196bc-9da5-4aaf-8f3e-70a4ce86edae" },
                            },
                        },
                    },
                },
            },
          "documentInfoResponse":
            {
              "description": "Success.",
              "content":
                {
                  "application/json":
                    {
                      "schema":
                        {
                          "type": "object",
                          "properties":
                            {
                              "error":
                                {
                                  "type": "string",
                                  "nullable": true,
                                  "description": "Holds an error if your document can't be handled.",
                                },
                              "format":
                                {
                                  "type": "object",
                                  "description": "Document format details.",
                                  "properties":
                                    {
                                      "name": { "type": "string", "description": "A detected document format." },
                                      "conversion_formats":
                                        {
                                          "type": "array",
                                          "description": "The conversions that are supported for the document.",
                                          "items":
                                            {
                                              "type": "object",
                                              "properties":
                                                {
                                                  "name":
                                                    {
                                                      "type": "string",
                                                      "description": "Supported target document format.",
                                                    },
                                                },
                                            },
                                        },
                                    },
                                },
                              "converted_groups":
                                {
                                  "type": "object",
                                  "description": "Information about already converted groups.",
                                  "properties":
                                    {
                                      "{conversion_format}":
                                        { "type": "string", "description": "Converted group UUID." },
                                    },
                                },
                            },
                          "example":
                            {
                              "error": null,
                              "format":
                                { "name": "txt", "conversion_formats": [{ "name": "epub" }, { "name": "pdf" }] },
                              "converted_groups": { "pdf": "49732da8-1530-470c-8743-998c4c634718~5" },
                            },
                        },
                    },
                },
            },
          "videoJobStatusResponse":
            {
              "description": "Success.",
              "content":
                {
                  "application/json":
                    {
                      "schema":
                        {
                          "type": "object",
                          "properties":
                            {
                              "status":
                                {
                                  "type": "string",
                                  "description": "Processing job status, can have one of the following values: - `pending` — video file is being prepared for conversion. - `processing` — video file processing is in progress. - `finished` — the processing is finished. - `failed` — we failed to process the video, see `error` for details. - `canceled` — video processing was canceled.",
                                  "enum": ["pending", "processing", "finished", "failed", "cancelled"],
                                },
                              "error":
                                {
                                  "type": "string",
                                  "nullable": true,
                                  "description": "Holds a processing error if we failed to handle your video.",
                                },
                              "result":
                                {
                                  "type": "object",
                                  "description": "Repeats the contents of your processing output.",
                                  "properties":
                                    {
                                      "uuid":
                                        {
                                          "type": "string",
                                          "format": "uuid",
                                          "description": "A UUID of your processed video file.",
                                        },
                                      "thumbnails_group_uuid":
                                        {
                                          "type": "string",
                                          "format": "uuid",
                                          "description": "A UUID of a file group with thumbnails for an output video, based on the `thumbs` operation parameters.",
                                        },
                                    },
                                },
                            },
                          "example":
                            {
                              "status": "processing",
                              "error": null,
                              "result":
                                {
                                  "thumbnails_group_uuid": "575ed4e8-f4e8-4c14-a58b-1527b6d9ee46~1",
                                  "uuid": "500196bc-9da5-4aaf-8f3e-70a4ce86edae",
                                },
                            },
                        },
                    },
                },
            },
          "videoJobSubmitResponse":
            {
              "description": "Success.",
              "content":
                {
                  "application/json":
                    {
                      "schema":
                        {
                          "type": "object",
                          "properties":
                            {
                              "problems":
                                {
                                  "type": "object",
                                  "description": "Dictionary of problems related to your processing job, if any. Key is the `path` you requested.",
                                  "additionalProperties": { "type": "string", "format": "uuid" },
                                },
                              "result":
                                {
                                  "type": "array",
                                  "description": "Result for each requested path, in case of no errors for that path.",
                                  "items":
                                    {
                                      "type": "object",
                                      "properties":
                                        {
                                          "original_source":
                                            {
                                              "type": "string",
                                              "description": "Input file identifier including operations, if present.",
                                            },
                                          "uuid":
                                            {
                                              "type": "string",
                                              "description": "A UUID of your processed video file.",
                                              "format": "uuid",
                                            },
                                          "token":
                                            {
                                              "type": "integer",
                                              "description": "A processing job token that can be used to get a job status.",
                                            },
                                          "thumbnails_group_uuid":
                                            {
                                              "description": "UUID of a file group with thumbnails for an output video, based on the `thumbs` operation parameters.",
                                              "type": "string",
                                              "format": "uuid",
                                            },
                                        },
                                    },
                                },
                            },
                          "example":
                            {
                              "problems":
                                {
                                  "13cd56e2-f6d7-4c66-ab1b-ffd13cd6646d": 'Bad path "13cd56e2-f6d7-4c66-ab1b-ffd13cd6646d". Use UUID or CDN URL',
                                },
                              "result":
                                [
                                  {
                                    "original_source": "d52d7136-a2e5-4338-9f45-affbf83b857d/video/-/format/ogg/-/quality/best/",
                                    "token": 445630631,
                                    "thumbnails_group_uuid": "575ed4e8-f4e8-4c14-a58b-1527b6d9ee46~1",
                                    "uuid": "d52d7136-a2e5-4338-9f45-affbf83b857d",
                                  },
                                  {
                                    "original_source": "500196bc-9da5-4aaf-8f3e-70a4ce86edae/video/",
                                    "token": 445630637,
                                    "thumbnails_group_uuid": "be3b4d5e-179d-460e-8a5d-69112ac86cbb~1",
                                    "uuid": "28843a09-dd3d-4b8a-ad4f-8aa5f8f60ff2",
                                  },
                                ],
                            },
                        },
                    },
                },
            },
          "remoteCopyResponse":
            {
              "description": "Destination file with that name already exists. Check the `pattern` parameter.",
              "content": { "application/json": { "schema": { "$ref": "#/components/schemas/copiedFileURL" } } },
            },
          "remoteCopyResponse201":
            {
              "description": "The file was copied successfully. HTTP response contains `result` field with the URL of the file on the remote storage.",
              "content": { "application/json": { "schema": { "$ref": "#/components/schemas/copiedFileURL" } } },
            },
        },
      "schemas":
        {
          "addonExecutionStatus":
            {
              "type": "object",
              "properties":
                {
                  "status":
                    {
                      "type": "string",
                      "enum": ["in_progress", "error", "done", "unknown"],
                      "description": "Defines the status of an Add-On execution.\nIn most cases, once the status changes to `done`, [Application Data](/docs/api/rest/file/info/#response.body.appdata) of the file that had been specified as a `appdata`, will contain the result of the execution.",
                    },
                },
            },
          "webhookFilePayload":
            {
              "type": "object",
              "required": ["initiator", "hook", "data", "file"],
              "properties":
                {
                  "initiator": { "$ref": "#/components/schemas/webhookInitiator" },
                  "hook": { "$ref": "#/components/schemas/webhookPublicInfo" },
                  "data": { "$ref": "#/components/schemas/file" },
                  "file": { "description": "File CDN URL.", "type": "string", "format": "uri" },
                },
            },
          "webhookFileInfoUpdatedPayload":
            {
              "type": "object",
              "required": ["initiator", "hook", "data", "file", "previous_values"],
              "properties":
                {
                  "initiator": { "$ref": "#/components/schemas/webhookInitiator" },
                  "hook": { "$ref": "#/components/schemas/webhookPublicInfo" },
                  "data": { "$ref": "#/components/schemas/file" },
                  "file": { "description": "File CDN URL.", "type": "string", "format": "uri" },
                  "previous_values":
                    {
                      "type": "object",
                      "description": "Object containing the values of the updated file data attributes and their values prior to the event.",
                      "properties":
                        {
                          "appdata": { "$ref": "#/components/schemas/applicationDataObject" },
                          "metadata": { "$ref": "#/components/schemas/metadata" },
                        },
                    },
                },
            },
          "fileCopy":
            {
              "type": "object",
              "required":
                [
                  "datetime_removed",
                  "datetime_stored",
                  "datetime_uploaded",
                  "is_image",
                  "is_ready",
                  "mime_type",
                  "original_file_url",
                  "original_filename",
                  "size",
                  "url",
                  "uuid",
                  "variations",
                  "content_info",
                  "metadata",
                ],
              "properties":
                {
                  "datetime_removed":
                    {
                      "type": "string",
                      "format": "date-time",
                      "nullable": true,
                      "description": "Date and time when a file was removed, if any.",
                    },
                  "datetime_stored":
                    {
                      "type": "string",
                      "format": "date-time",
                      "nullable": true,
                      "description": "Date and time of the last store request, if any.",
                    },
                  "datetime_uploaded":
                    {
                      "type": "string",
                      "format": "date-time",
                      "description": "Date and time when a file was uploaded.",
                    },
                  "is_image": { "type": "boolean", "description": "Is file is image.", "example": true },
                  "is_ready":
                    { "type": "boolean", "description": "Is file is ready to be used after upload.", "example": true },
                  "mime_type": { "type": "string", "description": "File MIME-type.", "example": "image/jpeg" },
                  "original_file_url":
                    {
                      "type": "string",
                      "format": "uri",
                      "description": "Publicly available file CDN URL. Available if a file is not deleted.",
                      "nullable": true,
                    },
                  "original_filename":
                    {
                      "type": "string",
                      "description": "Original file name taken from uploaded file.",
                      "example": "EU_4.jpg",
                    },
                  "size": { "type": "integer", "enum": [0], "description": "File size in bytes.", "example": 0 },
                  "url":
                    { "type": "string", "format": "uri", "description": "API resource URL for a particular file." },
                  "uuid":
                    {
                      "type": "string",
                      "format": "uuid",
                      "description": "File UUID.",
                      "example": "575ed4e8-f4e8-4c14-a58b-1527b6d9ee46",
                    },
                  "variations": { "enum": [null] },
                  "content_info": { "enum": [null] },
                  "metadata": { "$ref": "#/components/schemas/metadata" },
                },
            },
          "file":
            {
              "type": "object",
              "required":
                [
                  "datetime_removed",
                  "datetime_stored",
                  "datetime_uploaded",
                  "is_image",
                  "is_ready",
                  "mime_type",
                  "original_file_url",
                  "original_filename",
                  "size",
                  "url",
                  "uuid",
                  "variations",
                  "content_info",
                  "metadata",
                ],
              "properties":
                {
                  "datetime_removed":
                    {
                      "type": "string",
                      "format": "date-time",
                      "nullable": true,
                      "description": "Date and time when a file was removed, if any.",
                    },
                  "datetime_stored":
                    {
                      "type": "string",
                      "format": "date-time",
                      "nullable": true,
                      "description": "Date and time of the last store request, if any.",
                    },
                  "datetime_uploaded":
                    {
                      "type": "string",
                      "format": "date-time",
                      "description": "Date and time when a file was uploaded.",
                    },
                  "is_image": { "type": "boolean", "description": "Is file is image.", "example": true },
                  "is_ready":
                    { "type": "boolean", "description": "Is file is ready to be used after upload.", "example": true },
                  "mime_type": { "type": "string", "description": "File MIME-type.", "example": "image/jpeg" },
                  "original_file_url":
                    {
                      "type": "string",
                      "format": "uri",
                      "description": "Publicly available file CDN URL. Available if a file is not deleted.",
                      "nullable": true,
                      "example": "https://ucarecdn.com/e575ed4e8-f4e8-4c14-a58b-1527b6d9ee46/EU_4.jpg",
                    },
                  "original_filename":
                    {
                      "type": "string",
                      "description": "Original file name taken from uploaded file.",
                      "example": "EU_4.jpg",
                    },
                  "size": { "type": "integer", "description": "File size in bytes.", "example": 145212 },
                  "url":
                    {
                      "type": "string",
                      "format": "uri",
                      "description": "API resource URL for a particular file.",
                      "example": "https://api.uploadcare.com/files/e10ce759-42c3-4185-bae5-e22a9143d68f/",
                    },
                  "uuid":
                    {
                      "type": "string",
                      "format": "uuid",
                      "description": "File UUID.",
                      "example": "575ed4e8-f4e8-4c14-a58b-1527b6d9ee46",
                    },
                  "appdata": { "$ref": "#/components/schemas/applicationDataObject" },
                  "variations":
                    {
                      "type": "object",
                      "nullable": true,
                      "description": "Dictionary of other files that were created using this file as a source. It's used for video processing and document conversion jobs. E.g., `<conversion_path>: <uuid>`.",
                    },
                  "content_info": { "$ref": "#/components/schemas/contentInfo" },
                  "metadata": { "$ref": "#/components/schemas/metadata" },
                },
              "example":
                {
                  "datetime_removed": null,
                  "datetime_stored": "2018-11-26T12:49:10.477888Z",
                  "datetime_uploaded": "2018-11-26T12:49:09.945335Z",
                  "variations": null,
                  "is_image": true,
                  "is_ready": true,
                  "mime_type": "image/jpeg",
                  "original_file_url": "https://ucarecdn.com/22240276-2f06-41f8-9411-755c8ce926ed/pineapple.jpg",
                  "original_filename": "pineapple.jpg",
                  "size": 642,
                  "url": "https://api.uploadcare.com/files/22240276-2f06-41f8-9411-755c8ce926ed/",
                  "uuid": "22240276-2f06-41f8-9411-755c8ce926ed",
                  "content_info":
                    {
                      "mime": { "mime": "image/jpeg", "type": "image", "subtype": "jpeg" },
                      "image":
                        {
                          "format": "JPEG",
                          "width": 500,
                          "height": 500,
                          "sequence": false,
                          "color_mode": "RGB",
                          "orientation": 6,
                          "geo_location": { "latitude": 55.62013611111111, "longitude": 37.66299166666666 },
                          "datetime_original": "2018-08-20T08:59:50",
                          "dpi": [72, 72],
                        },
                    },
                  "metadata": { "subsystem": "uploader", "pet": "cat" },
                  "appdata":
                    {
                      "aws_rekognition_detect_labels":
                        {
                          "data":
                            {
                              "LabelModelVersion": "2.0",
                              "Labels":
                                [
                                  {
                                    "Confidence": 93.41645812988281,
                                    "Instances": [],
                                    "Name": "Home Decor",
                                    "Parents": [],
                                  },
                                  {
                                    "Confidence": 70.75951385498047,
                                    "Instances": [],
                                    "Name": "Linen",
                                    "Parents": [{ "Name": "Home Decor" }],
                                  },
                                  {
                                    "Confidence": 64.7123794555664,
                                    "Instances": [],
                                    "Name": "Sunlight",
                                    "Parents": [],
                                  },
                                  {
                                    "Confidence": 56.264793395996094,
                                    "Instances": [],
                                    "Name": "Flare",
                                    "Parents": [{ "Name": "Light" }],
                                  },
                                  {
                                    "Confidence": 50.47153854370117,
                                    "Instances": [],
                                    "Name": "Tree",
                                    "Parents": [{ "Name": "Plant" }],
                                  },
                                ],
                            },
                          "version": "2016-06-27",
                          "datetime_created": "2021-09-21T11:25:31.259763Z",
                          "datetime_updated": "2021-09-21T11:27:33.359763Z",
                        },
                      "aws_rekognition_detect_moderation_labels":
                        {
                          "data":
                            {
                              "ModerationModelVersion": "6.0",
                              "ModerationLabels":
                                [{ "Confidence": 93.41645812988281, "Name": "Weapons", "ParentName": "Violence" }],
                            },
                          "version": "2016-06-27",
                          "datetime_created": "2023-02-21T11:25:31.259763Z",
                          "datetime_updated": "2023-02-21T11:27:33.359763Z",
                        },
                      "remove_bg":
                        {
                          "data": { "foreground_type": "person" },
                          "version": "1.0",
                          "datetime_created": "2021-07-25T12:24:33.159663Z",
                          "datetime_updated": "2021-07-25T12:24:33.159663Z",
                        },
                      "uc_clamav_virus_scan":
                        {
                          "data": { "infected": true, "infected_with": "Win.Test.EICAR_HDB-1" },
                          "version": "0.104.2",
                          "datetime_created": "2021-09-21T11:24:33.159663Z",
                          "datetime_updated": "2021-09-21T11:24:33.159663Z",
                        },
                    },
                },
            },
          "metadata":
            { "type": "object", "nullable": true, "description": "Arbitrary metadata associated with a file." },
          "metadataItemValue":
            {
              "type": "string",
              "minLength": 1,
              "maxLength": 512,
              "description": "Value of metadata key.",
              "example": "uploader",
            },
          "contentInfo":
            {
              "type": "object",
              "nullable": true,
              "description": "Information about file content.",
              "properties":
                {
                  "mime":
                    {
                      "type": "object",
                      "description": "MIME type.",
                      "required": ["mime", "type", "subtype"],
                      "properties":
                        {
                          "mime": { "type": "string", "description": "Full MIME type.", "example": "image/jpeg" },
                          "type": { "type": "string", "description": "Type of MIME type.", "example": "image" },
                          "subtype": { "type": "string", "description": "Subtype of MIME type.", "example": "jpeg" },
                        },
                    },
                  "image": { "$ref": "#/components/schemas/imageInfo" },
                  "video": { "$ref": "#/components/schemas/videoInfo" },
                },
            },
          "imageInfo":
            {
              "type": "object",
              "description": "Image metadata.",
              "required":
                [
                  "color_mode",
                  "orientation",
                  "format",
                  "height",
                  "width",
                  "geo_location",
                  "datetime_original",
                  "dpi",
                  "sequence",
                ],
              "properties":
                {
                  "color_mode":
                    {
                      "type": "string",
                      "description": "Image color mode.",
                      "enum":
                        ["RGB", "RGBA", "RGBa", "RGBX", "L", "LA", "La", "P", "PA", "CMYK", "YCbCr", "HSV", "LAB"],
                      "example": "RGBA",
                    },
                  "orientation":
                    {
                      "type": "integer",
                      "description": "Image orientation from EXIF.",
                      "nullable": true,
                      "minimum": 0,
                      "maximum": 8,
                      "example": 6,
                    },
                  "format": { "type": "string", "description": "Image format.", "example": "JPEG" },
                  "sequence":
                    {
                      "type": "boolean",
                      "description": "Set to true if a file contains a sequence of images (GIF for example).",
                      "example": false,
                    },
                  "height": { "type": "integer", "description": "Image height in pixels.", "example": 2352 },
                  "width": { "type": "integer", "description": "Image width in pixels.", "example": 2935 },
                  "geo_location":
                    {
                      "description": "Geo-location of image from EXIF.",
                      "type": "object",
                      "nullable": true,
                      "required": ["latitude", "longitude"],
                      "properties":
                        {
                          "latitude":
                            { "type": "number", "description": "Location latitude.", "example": -1.1884555555555556 },
                          "longitude":
                            { "type": "number", "description": "Location longitude.", "example": 52.66996666666667 },
                        },
                    },
                  "datetime_original":
                    {
                      "type": "string",
                      "description": "Image date and time from EXIF. Please be aware that this data is not always formatted and displayed exactly as it appears in the EXIF.",
                      "nullable": true,
                      "format": "date-time",
                      "example": "2018-09-13T16:23:40",
                    },
                  "dpi":
                    {
                      "type": "array",
                      "description": "Image DPI for two dimensions.",
                      "nullable": true,
                      "items": { "type": "number", "example": 72 },
                      "minItems": 2,
                      "maxItems": 2,
                      "example": [72, 72],
                    },
                },
            },
          "videoInfo":
            {
              "type": "object",
              "description": "Video metadata.",
              "required": ["duration", "format", "bitrate", "audio", "video"],
              "properties":
                {
                  "duration":
                    {
                      "type": "integer",
                      "description": "Video file's duration in milliseconds.",
                      "nullable": true,
                      "example": 261827,
                    },
                  "format": { "type": "string", "description": "Video file's format.", "example": "mp4" },
                  "bitrate":
                    { "type": "integer", "description": "Video file's bitrate.", "nullable": true, "example": 393 },
                  "audio":
                    {
                      "type": "array",
                      "items":
                        {
                          "type": "object",
                          "description": "Audio stream's metadata.",
                          "required": ["bitrate", "codec", "sample_rate", "channels"],
                          "properties":
                            {
                              "bitrate":
                                {
                                  "type": "integer",
                                  "description": "Audio stream's bitrate.",
                                  "nullable": true,
                                  "example": 78,
                                },
                              "codec":
                                {
                                  "type": "string",
                                  "description": "Audio stream's codec.",
                                  "nullable": true,
                                  "example": "aac",
                                },
                              "sample_rate":
                                {
                                  "type": "integer",
                                  "description": "Audio stream's sample rate.",
                                  "nullable": true,
                                  "example": 44100,
                                },
                              "channels":
                                {
                                  "type": "integer",
                                  "description": "Audio stream's number of channels.",
                                  "nullable": true,
                                  "example": 2,
                                },
                            },
                        },
                    },
                  "video":
                    {
                      "type": "array",
                      "items":
                        {
                          "type": "object",
                          "description": "Video stream's metadata.",
                          "required": ["height", "width", "frame_rate", "bitrate", "codec"],
                          "properties":
                            {
                              "height":
                                { "type": "integer", "description": "Video stream's image height.", "example": 360 },
                              "width":
                                { "type": "integer", "description": "Video stream's image width.", "example": 640 },
                              "frame_rate":
                                { "type": "number", "description": "Video stream's frame rate.", "example": 30 },
                              "bitrate":
                                {
                                  "type": "integer",
                                  "description": "Video stream's bitrate.",
                                  "nullable": true,
                                  "example": 315,
                                },
                              "codec":
                                {
                                  "type": "string",
                                  "description": "Video stream's codec.",
                                  "nullable": true,
                                  "example": "h264",
                                },
                            },
                        },
                    },
                },
            },
          "legacyVideoInfo":
            {
              "type": "object",
              "nullable": true,
              "description": "Video metadata.",
              "properties":
                {
                  "duration":
                    { "type": "number", "description": "Video file's duration in milliseconds.", "example": 261827 },
                  "format": { "type": "string", "description": "Video file's format.", "example": "mp4" },
                  "bitrate": { "type": "number", "description": "Video file's bitrate.", "example": 393 },
                  "audio":
                    {
                      "type": "object",
                      "description": "Audio stream's metadata.",
                      "nullable": true,
                      "properties":
                        {
                          "bitrate":
                            {
                              "nullable": true,
                              "type": "number",
                              "description": "Audio stream's bitrate.",
                              "example": 78,
                            },
                          "codec":
                            {
                              "nullable": true,
                              "type": "string",
                              "description": "Audio stream's codec.",
                              "example": "aac",
                            },
                          "sample_rate":
                            {
                              "nullable": true,
                              "type": "number",
                              "description": "Audio stream's sample rate.",
                              "example": 44100,
                            },
                          "channels":
                            {
                              "nullable": true,
                              "type": "string",
                              "description": "Audio stream's number of channels.",
                              "example": "2",
                            },
                        },
                    },
                  "video":
                    {
                      "type": "object",
                      "description": "Video stream's metadata.",
                      "properties":
                        {
                          "height": { "type": "number", "description": "Video stream's image height.", "example": 360 },
                          "width": { "type": "number", "description": "Video stream's image width.", "example": 640 },
                          "frame_rate":
                            { "type": "number", "description": "Video stream's frame rate.", "example": 30 },
                          "bitrate": { "type": "number", "description": "Video stream's bitrate.", "example": 315 },
                          "codec": { "type": "string", "description": "Video stream codec.", "example": "h264" },
                        },
                    },
                },
            },
          "copiedFileURL":
            {
              "type": "object",
              "properties":
                {
                  "type": { "type": "string", "default": "url", "example": "url" },
                  "result":
                    {
                      "type": "string",
                      "format": "url",
                      "description": "URL with an s3 scheme. Your bucket name is put as a host, and an s3 object path follows.",
                      "example": "s3://mybucket/03ccf9ab-f266-43fb-973d-a6529c55c2ae/image.png",
                    },
                },
            },
          "group":
            {
              "type": "object",
              "properties":
                {
                  "id": { "type": "string", "description": "Group's identifier." },
                  "datetime_created":
                    {
                      "type": "string",
                      "format": "date-time",
                      "description": "ISO-8601 date and time when the group was created.",
                    },
                  "files_count":
                    { "type": "integer", "minimum": 1, "description": "Number of the files in the group." },
                  "cdn_url": { "type": "string", "format": "uri", "description": "Group's CDN URL." },
                  "url": { "type": "string", "format": "uri", "description": "Group's API resource URL." },
                },
              "example":
                {
                  "id": "dd43982b-5447-44b2-86f6-1c3b52afa0ff~1",
                  "datetime_created": "2018-11-27T14:14:37.583654Z",
                  "files_count": 1,
                  "cdn_url": "https://ucarecdn.com/dd43982b-5447-44b2-86f6-1c3b52afa0ff~1/",
                  "url": "https://api.uploadcare.com/groups/dd43982b-5447-44b2-86f6-1c3b52afa0ff~1/",
                },
            },
          "groupWithFiles":
            {
              "allOf":
                [
                  { "$ref": "#/components/schemas/group" },
                  {
                    "type": "object",
                    "properties":
                      {
                        "files":
                          {
                            "type": "array",
                            "description": "The list of files in the group. An array may contain null values if a file has been removed.\n",
                            "nullable": true,
                            "allOf":
                              [
                                { "$ref": "#/components/schemas/file" },
                                {
                                  "type": "object",
                                  "properties":
                                    {
                                      "default_effects":
                                        {
                                          "type": "string",
                                          "format": "uri",
                                          "description": "The field contains a set of processing operations applied to the file when the group was created. This set is applied by default when the file is reffered via a group CDN URL and `/nth/N/` operator.",
                                          "example": "resize/x800/",
                                        },
                                    },
                                },
                              ],
                          },
                      },
                    "example":
                      {
                        "id": "dd43982b-5447-44b2-86f6-1c3b52afa0ff~1",
                        "datetime_created": "2018-11-27T14:14:37.583654Z",
                        "files_count": 1,
                        "cdn_url": "https://ucarecdn.com/dd43982b-5447-44b2-86f6-1c3b52afa0ff~1/",
                        "url": "https://api.uploadcare.com/groups/dd43982b-5447-44b2-86f6-1c3b52afa0ff~1/",
                        "files":
                          [
                            {
                              "datetime_removed": null,
                              "datetime_stored": "2018-11-26T12:49:10.477888Z",
                              "datetime_uploaded": "2018-11-26T12:49:09.945335Z",
                              "variations": null,
                              "is_image": true,
                              "is_ready": true,
                              "mime_type": "image/jpeg",
                              "original_file_url": "https://ucarecdn.com/22240276-2f06-41f8-9411-755c8ce926ed/pineapple.jpg",
                              "original_filename": "pineapple.jpg",
                              "size": 642,
                              "url": "https://api.uploadcare.com/files/22240276-2f06-41f8-9411-755c8ce926ed/",
                              "uuid": "22240276-2f06-41f8-9411-755c8ce926ed",
                              "content_info":
                                {
                                  "mime": { "mime": "image/jpeg", "type": "image", "subtype": "jpeg" },
                                  "image":
                                    {
                                      "format": "JPEG",
                                      "width": 500,
                                      "height": 500,
                                      "sequence": false,
                                      "color_mode": "RGB",
                                      "orientation": 6,
                                      "geo_location": { "latitude": 55.62013611111111, "longitude": 37.66299166666666 },
                                      "datetime_original": "2018-08-20T08:59:50",
                                      "dpi": [72, 72],
                                    },
                                },
                              "metadata": { "subsystem": "uploader", "pet": "cat" },
                              "default_effects": "resize/x800/",
                            },
                          ],
                      },
                  },
                ],
            },
          "project":
            {
              "type": "object",
              "properties":
                {
                  "collaborators":
                    {
                      "type": "array",
                      "nullable": true,
                      "items":
                        {
                          "type": "object",
                          "properties":
                            {
                              "email": { "type": "string", "format": "email", "description": "Collaborator email." },
                              "name": { "type": "string", "description": "Collaborator name." },
                            },
                        },
                    },
                  "name": { "type": "string", "description": "Project login name." },
                  "pub_key": { "type": "string", "description": "Project public key." },
                  "autostore_enabled": { "type": "boolean", "example": true },
                },
              "example":
                { "collaborators": [], "name": "demo", "pub_key": "YOUR_PUBLIC_KEY", "autostore_enabled": true },
            },
          "webhook_id": { "type": "number", "description": "Webhook's ID.", "example": 1234 },
          "webhook_project":
            { "type": "number", "description": "Project ID the webhook belongs to.", "example": 39123 },
          "webhook_project_pubkey":
            {
              "type": "string",
              "description": "Public project key the webhook belongs to.",
              "example": "2d199fbf3896699a2639",
            },
          "webhook_created":
            {
              "type": "string",
              "format": "date-time",
              "description": "date-time when a webhook was created.",
              "example": "2018-11-26T12:49:10.477888Z",
            },
          "webhook_updated":
            {
              "type": "string",
              "format": "date-time",
              "description": "date-time when a webhook was updated.",
              "example": "2018-11-26T12:49:10.477888Z",
            },
          "webhook_target":
            {
              "type": "string",
              "format": "uri",
              "maxLength": 255,
              "description": "A URL that is triggered by an event, for example, a file upload. A target URL MUST be unique for each `project` — `event type` combination.",
              "example": "http://example.com/hooks/receiver",
            },
          "webhook_event":
            {
              "type": "string",
              "description": "An event you subscribe to.",
              "enum": ["file.uploaded", "file.infected", "file.stored", "file.deleted", "file.info_updated"],
              "example": "file.uploaded",
            },
          "webhook_is_active":
            {
              "type": "boolean",
              "description": "Marks a subscription as either active or not, defaults to `true`, otherwise `false`.",
              "default": true,
              "example": false,
            },
          "webhook_signing_secret":
            {
              "type": "string",
              "format": "password",
              "maxLength": 32,
              "example": "7kMVZivndx0ErgvhRKAr",
              "description": "Optional [HMAC/SHA-256](https://en.wikipedia.org/wiki/HMAC) secret that, if set, will be used to\ncalculate signatures for the webhook payloads sent to the `target_url`.\n\nCalculated signature will be sent to the `target_url` as a value of the `X-Uc-Signature` HTTP\nheader. The header will have the following format: `X-Uc-Signature: v1=<HMAC-SHA256-HEX-DIGEST>`.\nSee [Secure Webhooks](/docs/webhooks/#signed-webhooks) for details.\n",
            },
          "webhook_version":
            { "type": "string", "description": "Webhook payload's version.", "enum": ["0.7"], "example": "0.7" },
          "webhook_version_of_request":
            {
              "type": "string",
              "description": "Webhook payload's version.",
              "enum": ["0.7"],
              "example": "0.7",
              "default": "0.7",
            },
          "webhook_version_of_list_response":
            {
              "type": "string",
              "description": "Webhook payload's version.",
              "enum": ["", "0.5", "0.6", "0.7"],
              "example": "0.7",
            },
          "webhook":
            {
              "description": "Webhook.",
              "type": "object",
              "properties":
                {
                  "id": { "$ref": "#/components/schemas/webhook_id" },
                  "project": { "$ref": "#/components/schemas/webhook_project" },
                  "created": { "$ref": "#/components/schemas/webhook_created" },
                  "updated": { "$ref": "#/components/schemas/webhook_updated" },
                  "event": { "$ref": "#/components/schemas/webhook_event" },
                  "target_url": { "$ref": "#/components/schemas/webhook_target" },
                  "is_active": { "$ref": "#/components/schemas/webhook_is_active" },
                  "version": { "$ref": "#/components/schemas/webhook_version" },
                  "signing_secret": { "$ref": "#/components/schemas/webhook_signing_secret" },
                },
              "example":
                {
                  "id": 1,
                  "project": 13,
                  "created": "2016-04-27T11:49:54.948615Z",
                  "updated": "2016-04-27T12:04:57.819933Z",
                  "event": "file.infected",
                  "target_url": "http://example.com/hooks/receiver",
                  "is_active": true,
                  "signing_secret": "7kMVZivndx0ErgvhRKAr",
                  "version": "0.7",
                },
            },
          "webhook_of_list_response":
            {
              "description": "Webhook.",
              "type": "object",
              "properties":
                {
                  "id": { "$ref": "#/components/schemas/webhook_id" },
                  "project": { "$ref": "#/components/schemas/webhook_project" },
                  "created": { "$ref": "#/components/schemas/webhook_created" },
                  "updated": { "$ref": "#/components/schemas/webhook_updated" },
                  "event": { "$ref": "#/components/schemas/webhook_event" },
                  "target_url": { "$ref": "#/components/schemas/webhook_target" },
                  "is_active": { "$ref": "#/components/schemas/webhook_is_active" },
                  "version": { "$ref": "#/components/schemas/webhook_version_of_list_response" },
                  "signing_secret": { "$ref": "#/components/schemas/webhook_signing_secret" },
                },
              "example":
                {
                  "id": 1,
                  "project": 13,
                  "created": "2016-04-27T11:49:54.948615Z",
                  "updated": "2016-04-27T12:04:57.819933Z",
                  "event": "file.infected",
                  "target_url": "http://example.com/hooks/receiver",
                  "is_active": true,
                  "signing_secret": "7kMVZivndx0ErgvhRKAr",
                  "version": "0.7",
                },
            },
          "webhookInitiator":
            {
              "description": "Webhook event initiator.",
              "type": "object",
              "required": ["type", "detail"],
              "properties":
                {
                  "type":
                    { "type": "string", "description": "Initiator type name.", "enum": ["api", "system", "addon"] },
                  "detail":
                    {
                      "type": "object",
                      "required": ["request_id", "addon_name"],
                      "properties":
                        {
                          "request_id":
                            {
                              "type": "string",
                              "format": "uuid",
                              "description": "Request ID.",
                              "example": "972654bd-a2ad-485a-bd27-c86126c1ed8c",
                              "nullable": true,
                            },
                          "addon_name":
                            {
                              "type": "string",
                              "description": "Add-On name.",
                              "enum":
                                [
                                  "aws_rekognition_detect_labels",
                                  "aws_rekognition_detect_moderation_labels",
                                  "uc_clamav_virus_scan",
                                  "remove_bg",
                                  "zamzar_convert_document",
                                  "zencoder_convert_video",
                                ],
                              "example": "aws_rekognition_detect_labels",
                              "nullable": true,
                            },
                          "source_file_uuid":
                            {
                              "type": "string",
                              "format": "uuid",
                              "description": "Source file UUID if the current is derivative.",
                              "example": "972654bd-a2ad-485a-bd27-c86126c1ed8c",
                            },
                        },
                    },
                },
            },
          "webhookPublicInfo":
            {
              "description": "Public Webhook information (does not include secret data like `signing_secret`)",
              "type": "object",
              "required": ["id", "project_id", "created_at", "updated_at", "event", "target", "is_active", "version"],
              "properties":
                {
                  "id": { "$ref": "#/components/schemas/webhook_id" },
                  "project": { "$ref": "#/components/schemas/webhook_project" },
                  "project_pub_key": { "$ref": "#/components/schemas/webhook_project_pubkey" },
                  "created_at": { "$ref": "#/components/schemas/webhook_created" },
                  "updated_at": { "$ref": "#/components/schemas/webhook_updated" },
                  "event": { "$ref": "#/components/schemas/webhook_event" },
                  "target": { "$ref": "#/components/schemas/webhook_target" },
                  "is_active": { "$ref": "#/components/schemas/webhook_is_active" },
                  "version": { "$ref": "#/components/schemas/webhook_version" },
                },
              "example":
                {
                  "id": 1,
                  "project_id": 13,
                  "project_pub_key": "2d199fbf3896699a2639",
                  "created_at": "2016-04-27T11:49:54.948615Z",
                  "updated_at": "2016-04-27T12:04:57.819933Z",
                  "event": "file.uploaded",
                  "target": "http://example.com/hooks/receiver",
                  "is_active": true,
                  "version": "0.7",
                },
            },
          "documentJobSubmitParameters":
            {
              "type": "object",
              "properties":
                {
                  "paths":
                    {
                      "description": "An array of UUIDs of your source documents to convert together with the specified target format (see [documentation](/docs/transformations/document-conversion/)).",
                      "type": "array",
                      "items": { "type": "string" },
                      "example":
                        [
                          "https://cdn.uploadcare.com/5ffa2545-ea40-4e71-a9e4-3a8e49b7b737/document/-/format/jpg/-/page/1/",
                          "88a51210-bd69-4411-bc72-a9952d9512cd/document/-/format/pdf/",
                          "8ddbbb48-0927-4df7-afac-c6031668b01b/document/",
                        ],
                    },
                  "store":
                    {
                      "type": "string",
                      "description": "When `store` is set to `\"0\"`, the converted files will only be available for 24 hours. `\"1\"` makes converted files available permanently. If the parameter is omitted, it checks the `Auto file storing` setting of your Uploadcare project identified by the `public_key` provided in the `auth-param`.\n",
                      "enum": ["0", "false", "1", "true"],
                      "example": "1",
                    },
                  "save_in_group":
                    {
                      "type": "string",
                      "default": "0",
                      "description": "When `save_in_group` is set to `\"1\"`, multi-page documents additionally will be saved as a file group.\n",
                      "enum": ["0", "false", "1", "true"],
                      "example": "1",
                    },
                },
              "example":
                {
                  "paths":
                    [
                      "https://cdn.uploadcare.com/5ffa2545-ea40-4e71-a9e4-3a8e49b7b737/document/-/format/jpg/-/page/1/",
                      "88a51210-bd69-4411-bc72-a9952d9512cd/document/-/format/pdf/",
                      "8ddbbb48-0927-4df7-afac-c6031668b01b/document/",
                    ],
                  "store": 1,
                  "save_in_group": "1",
                },
            },
          "videoJobSubmitParameters":
            {
              "type": "object",
              "properties":
                {
                  "paths":
                    {
                      "description": "An array of UUIDs of your video files to process together with a set of assigned operations (see [documentation](/docs/transformations/video-encoding/)).",
                      "type": "array",
                      "items": { "type": "string" },
                      "example":
                        [
                          "https://cdn.uploadcare.com/5ffa2545-ea40-4e71-a9e4-3a8e49b7b737/video/-/format/webm/",
                          "88a51210-bd69-4411-bc72-a9952d9512cd/video/-/format/ogg/-/quality/best/",
                          "8ddbbb48-0927-4df7-afac-c6031668b01b/video/",
                        ],
                    },
                  "store":
                    {
                      "type": "string",
                      "description": "When `store` is set to `\"0\"`, the converted files will only be available for 24 hours. `\"1\"` makes converted files available permanently. If the parameter is omitted, it checks the `Auto file storing` setting of your Uploadcare project identified by the `public_key` provided in the `auth-param`.\n",
                      "enum": ["0", "false", "1", "true"],
                      "example": "1",
                    },
                },
              "example":
                {
                  "paths":
                    [
                      "d52d7136-a2e5-4338-9f45-affbf83b857d/video/",
                      "d52d7136-a2e5-4338-9f45-affbf83b857d/video/-/format/ogg/-/quality/best/",
                      "28843a09-dd3d-4b8a-ad4f-8aa5f8f60ff2",
                    ],
                  "store": "1",
                },
            },
          "cantUseDocsConversionError":
            {
              "type": "object",
              "properties":
                {
                  "detail":
                    { "type": "string", "default": "Document conversion feature is not available for this project." },
                },
              "example": { "detail": "Document conversion feature is not available for this project." },
            },
          "cantUseVideoConversionError":
            {
              "type": "object",
              "properties":
                {
                  "detail":
                    { "type": "string", "default": "Video conversion feature is not available for this project." },
                },
              "example": { "detail": "Video conversion feature is not available for this project." },
            },
          "cantUseWebhooksError":
            {
              "type": "object",
              "properties": { "detail": { "type": "string", "default": "You can't use webhooks" } },
              "example": { "detail": "You can't use webhooks" },
            },
          "jsonObjectParseError":
            {
              "type": "object",
              "properties": { "detail": { "type": "string", "description": "Expected JSON object." } },
              "example": { "detail": "Expected JSON object." },
            },
          "localCopyResponse":
            {
              "type": "object",
              "properties":
                {
                  "type": { "type": "string", "default": "file", "example": "file" },
                  "result": { "$ref": "#/components/schemas/fileCopy" },
                },
            },
          "applicationData":
            {
              "type": "object",
              "properties":
                {
                  "version": { "type": "string", "description": "An application version." },
                  "datetime_created":
                    {
                      "type": "string",
                      "format": "date-time",
                      "description": "Date and time when an application data was created.",
                    },
                  "datetime_updated":
                    {
                      "type": "string",
                      "format": "date-time",
                      "description": "Date and time when an application data was updated.",
                    },
                  "data":
                    { "type": "object", "description": "Dictionary with a result of an application execution result." },
                },
              "required": ["version", "datetime_created", "datetime_updated", "data"],
            },
          "removeBg_v1_0":
            {
              "allOf":
                [
                  { "$ref": "#/components/schemas/applicationData" },
                  {
                    "type": "object",
                    "properties":
                      {
                        "version": { "type": "string", "enum": ["1.0"] },
                        "data":
                          {
                            "type": "object",
                            "description": "Dictionary with a result of an remove.bg information about an image.",
                            "properties":
                              {
                                "foreground_type":
                                  {
                                    "type": "string",
                                    "description": "foreground classification type (present if type_level was set)",
                                  },
                              },
                          },
                      },
                    "example":
                      {
                        "value":
                          {
                            "remove_bg":
                              {
                                "data": { "foreground_type": "person" },
                                "version": "1.0",
                                "datetime_created": "2021-07-25T12:24:33.159663Z",
                                "datetime_updated": "2021-07-25T12:24:33.159663Z",
                              },
                          },
                      },
                  },
                ],
            },
          "awsRekognitionDetectLabels_v2016_06_27":
            {
              "allOf":
                [
                  { "$ref": "#/components/schemas/applicationData" },
                  {
                    "type": "object",
                    "properties":
                      {
                        "version": { "type": "string", "enum": ["2016-06-27"] },
                        "data":
                          {
                            "type": "object",
                            "description": "Dictionary with a result of an aws rekognition detect labels execution result.",
                            "properties":
                              {
                                "LabelModelVersion": { "type": "string" },
                                "Labels":
                                  {
                                    "type": "array",
                                    "items":
                                      {
                                        "type": "object",
                                        "properties":
                                          {
                                            "Confidence": { "type": "number" },
                                            "Instances":
                                              {
                                                "type": "array",
                                                "items":
                                                  {
                                                    "type": "object",
                                                    "properties":
                                                      {
                                                        "BoundingBox":
                                                          {
                                                            "type": "object",
                                                            "properties":
                                                              {
                                                                "Height": { "type": "number" },
                                                                "Left": { "type": "number" },
                                                                "Top": { "type": "number" },
                                                                "Width": { "type": "number" },
                                                              },
                                                          },
                                                        "Confidence": { "type": "number" },
                                                      },
                                                  },
                                              },
                                            "Name": { "type": "string" },
                                            "Parents":
                                              {
                                                "type": "array",
                                                "items":
                                                  { "type": "object", "properties": { "Name": { "type": "string" } } },
                                              },
                                          },
                                        "required": ["Name", "Parents", "Instances", "Confidence"],
                                      },
                                  },
                              },
                            "required": ["Labels", "LabelModelVersion"],
                            "example":
                              {
                                "value":
                                  {
                                    "aws_rekognition_detect_labels":
                                      {
                                        "data":
                                          {
                                            "LabelModelVersion": "2.0",
                                            "Labels":
                                              [
                                                {
                                                  "Confidence": 93.41645812988281,
                                                  "Instances": [],
                                                  "Name": "Home Decor",
                                                  "Parents": [],
                                                },
                                                {
                                                  "Confidence": 70.75951385498047,
                                                  "Instances": [],
                                                  "Name": "Linen",
                                                  "Parents": [{ "Name": "Home Decor" }],
                                                },
                                                {
                                                  "Confidence": 64.7123794555664,
                                                  "Instances": [],
                                                  "Name": "Sunlight",
                                                  "Parents": [],
                                                },
                                                {
                                                  "Confidence": 56.264793395996094,
                                                  "Instances": [],
                                                  "Name": "Flare",
                                                  "Parents": [{ "Name": "Light" }],
                                                },
                                                {
                                                  "Confidence": 50.47153854370117,
                                                  "Instances": [],
                                                  "Name": "Tree",
                                                  "Parents": [{ "Name": "Plant" }],
                                                },
                                              ],
                                          },
                                        "version": "2016-06-27",
                                        "datetime_created": "2021-09-21T11:25:31.259763Z",
                                        "datetime_updated": "2021-09-21T11:27:33.359763Z",
                                      },
                                  },
                              },
                          },
                      },
                  },
                ],
            },
          "awsRekognitionDetectModerationLabels_v2016_06_27":
            {
              "allOf":
                [
                  { "$ref": "#/components/schemas/applicationData" },
                  {
                    "type": "object",
                    "properties":
                      {
                        "version": { "type": "string", "enum": ["2016-06-27"] },
                        "data":
                          {
                            "type": "object",
                            "description": "Dictionary with a result of an aws rekognition detect moderation labels execution result.",
                            "properties":
                              {
                                "ModerationModelVersion": { "type": "string" },
                                "ModerationLabels":
                                  {
                                    "type": "array",
                                    "items":
                                      {
                                        "type": "object",
                                        "properties":
                                          {
                                            "Confidence": { "type": "number" },
                                            "Name": { "type": "string" },
                                            "ParentName": { "type": "string" },
                                          },
                                        "required": ["Name", "ParentName", "Confidence"],
                                      },
                                  },
                              },
                            "required": ["ModerationLabels", "ModerationModelVersion"],
                            "example":
                              {
                                "value":
                                  {
                                    "aws_rekognition_detect_moderation_labels":
                                      {
                                        "data":
                                          {
                                            "ModerationModelVersion": "6.0",
                                            "ModerationLabels":
                                              [
                                                {
                                                  "Confidence": 93.41645812988281,
                                                  "Name": "Weapons",
                                                  "ParentName": "Violence",
                                                },
                                              ],
                                          },
                                        "version": "2016-06-27",
                                        "datetime_created": "2023-02-21T11:25:31.259763Z",
                                        "datetime_updated": "2023-02-21T11:27:33.359763Z",
                                      },
                                  },
                              },
                          },
                      },
                  },
                ],
            },
          "ucClamavVirusScan":
            {
              "allOf":
                [
                  { "$ref": "#/components/schemas/applicationData" },
                  {
                    "type": "object",
                    "properties":
                      {
                        "version": { "type": "string", "enum": ["0.104.2", "0.104.3", "0.105.0", "0.105.1"] },
                        "data":
                          {
                            "type": "object",
                            "description": "Dictionary with a result of ClamAV execution result.",
                            "properties": { "infected": { "type": "boolean" }, "infected_with": { "type": "string" } },
                            "required": ["infected"],
                          },
                      },
                    "example":
                      {
                        "value":
                          {
                            "uc_clamav_virus_scan":
                              {
                                "data": { "infected": true, "infected_with": "Win.Test.EICAR_HDB-1" },
                                "version": "0.104.2",
                                "datetime_created": "2021-09-21T11:24:33.159663Z",
                                "datetime_updated": "2021-09-21T11:24:33.159663Z",
                              },
                          },
                      },
                  },
                ],
            },
          "applicationDataObject":
            {
              "type": "object",
              "nullable": true,
              "description": "Dictionary of application names and data associated with these applications.",
              "properties":
                {
                  "aws_rekognition_detect_labels":
                    { "$ref": "#/components/schemas/awsRekognitionDetectLabels_v2016_06_27" },
                  "aws_rekognition_detect_moderation_labels":
                    { "$ref": "#/components/schemas/awsRekognitionDetectModerationLabels_v2016_06_27" },
                  "remove_bg": { "$ref": "#/components/schemas/removeBg_v1_0" },
                  "uc_clamav_virus_scan": { "$ref": "#/components/schemas/ucClamavVirusScan" },
                },
            },
          "simpleAuthHTTPForbidden":
            {
              "type": "object",
              "properties":
                {
                  "detail":
                    {
                      "type": "string",
                      "default": "Simple authentication over HTTP is forbidden. Please, use HTTPS or signed requests instead.",
                    },
                },
              "example":
                {
                  "detail": "Simple authentication over HTTP is forbidden. Please, use HTTPS or signed requests instead.",
                },
            },
          "webhookTargetUrlError":
            {
              "type": "object",
              "properties":
                {
                  "detail":
                    {
                      "type": "string",
                      "description": "`target_url` is missing.",
                      "default": "`target_url` is missing.",
                    },
                },
              "example": { "detail": "`target_url` is missing." },
            },
        },
      "examples":
        {
          "simpleAuthHTTPForbidden":
            {
              "value":
                {
                  "detail": "Simple authentication over HTTP is forbidden. Please, use HTTPS or signed requests instead.",
                },
            },
          "webhookTargetUrlError": { "value": { "detail": "`target_url` is missing." } },
          "cantUseDocsConversionError":
            { "value": { "detail": "Document conversion feature is not available for this project." } },
          "cantUseVideoConversionError":
            { "value": { "detail": "Video conversion feature is not available for this project." } },
          "cantUseWebhooksError": { "value": { "detail": "You can't use webhooks" } },
          "jsonObjectParseError": { "value": { "detail": "Expected JSON object." } },
          "file_list_w_appdata":
            {
              "value":
                {
                  "next": "https://api.uploadcare.com/files/?limit=1&from=2018-11-27T01%3A00%3A43.001705%2B00%3A00&offset=0",
                  "previous": "https://api.uploadcare.com/files/?limit=1&to=2018-11-27T01%3A00%3A36.436838%2B00%3A00&offset=0",
                  "total": 2484,
                  "totals": { "removed": 0, "stored": 2480, "unstored": 4 },
                  "per_page": 1,
                  "results":
                    [
                      {
                        "datetime_removed": null,
                        "datetime_stored": "2018-11-26T12:49:10.477888Z",
                        "datetime_uploaded": "2018-11-26T12:49:09.945335Z",
                        "variations": null,
                        "is_image": true,
                        "is_ready": true,
                        "mime_type": "image/jpeg",
                        "original_file_url": "https://ucarecdn.com/22240276-2f06-41f8-9411-755c8ce926ed/pineapple.jpg",
                        "original_filename": "pineapple.jpg",
                        "size": 642,
                        "url": "https://api.uploadcare.com/files/22240276-2f06-41f8-9411-755c8ce926ed/",
                        "uuid": "22240276-2f06-41f8-9411-755c8ce926ed",
                        "content_info":
                          {
                            "mime": { "mime": "image/jpeg", "type": "image", "subtype": "jpeg" },
                            "image":
                              {
                                "format": "JPEG",
                                "width": 500,
                                "height": 500,
                                "sequence": false,
                                "color_mode": "RGB",
                                "orientation": 6,
                                "geo_location": { "latitude": 55.62013611111111, "longitude": 37.66299166666666 },
                                "datetime_original": "2018-08-20T08:59:50",
                                "dpi": [72, 72],
                              },
                          },
                        "metadata": { "subsystem": "uploader", "pet": "cat" },
                        "appdata":
                          {
                            "uc_clamav_virus_scan":
                              {
                                "data": { "infected": true, "infected_with": "Win.Test.EICAR_HDB-1" },
                                "version": "0.104.2",
                                "datetime_created": "2021-09-21T11:24:33.159663Z",
                                "datetime_updated": "2021-09-21T11:24:33.159663Z",
                              },
                          },
                      },
                    ],
                },
            },
          "file_list":
            {
              "value":
                {
                  "next": "https://api.uploadcare.com/files/?limit=1&from=2018-11-27T01%3A00%3A43.001705%2B00%3A00&offset=0",
                  "previous": "https://api.uploadcare.com/files/?limit=1&to=2018-11-27T01%3A00%3A36.436838%2B00%3A00&offset=0",
                  "total": 2484,
                  "totals": { "removed": 0, "stored": 2480, "unstored": 4 },
                  "per_page": 1,
                  "results":
                    [
                      {
                        "datetime_removed": null,
                        "datetime_stored": "2021-09-21T11:24:33.159663Z",
                        "datetime_uploaded": "2021-09-21T11:24:33.159663Z",
                        "is_image": false,
                        "is_ready": true,
                        "mime_type": "video/mp4",
                        "original_file_url": "https://ucarecdn.com/7ed2aed0-0482-4c13-921b-0557b193edc2/16317390663260.mp4",
                        "original_filename": "16317390663260.mp4",
                        "size": 14479722,
                        "url": "https://api.uploadcare.com/files/7ed2aed0-0482-4c13-921b-0557b193edc2/",
                        "uuid": "7ed2aed0-0482-4c13-921b-0557b193edc2",
                        "variations": null,
                        "content_info":
                          {
                            "mime": { "mime": "video/mp4", "type": "video", "subtype": "mp4" },
                            "video":
                              {
                                "audio": [{ "codec": "aac", "bitrate": 129, "channels": 2, "sample_rate": 44100 }],
                                "video":
                                  [{ "codec": "h264", "width": 640, "height": 480, "bitrate": 433, "frame_rate": 30 }],
                                "format": "mp4",
                                "bitrate": 579,
                                "duration": 200044,
                              },
                          },
                        "metadata": { "subsystem": "tester", "pet": "dog" },
                      },
                    ],
                },
            },
          "file_removed":
            {
              "value":
                {
                  "datetime_removed": "2018-11-26T12:49:11.477888Z",
                  "datetime_stored": null,
                  "datetime_uploaded": "2018-11-26T12:49:09.945335Z",
                  "variations": null,
                  "is_image": true,
                  "is_ready": true,
                  "mime_type": "image/jpeg",
                  "original_file_url": "https://ucarecdn.com/22240276-2f06-41f8-9411-755c8ce926ed/pineapple.jpg",
                  "original_filename": "pineapple.jpg",
                  "size": 642,
                  "url": "https://api.uploadcare.com/files/22240276-2f06-41f8-9411-755c8ce926ed/",
                  "uuid": "22240276-2f06-41f8-9411-755c8ce926ed",
                  "content_info":
                    {
                      "mime": { "mime": "image/jpeg", "type": "image", "subtype": "jpeg" },
                      "image":
                        {
                          "format": "JPEG",
                          "width": 500,
                          "height": 500,
                          "sequence": false,
                          "color_mode": "RGB",
                          "orientation": 6,
                          "geo_location": { "latitude": 55.62013611111111, "longitude": 37.66299166666666 },
                          "datetime_original": "2018-08-20T08:59:50",
                          "dpi": [72, 72],
                        },
                    },
                  "metadata": { "subsystem": "uploader", "pet": "cat" },
                  "appdata":
                    {
                      "uc_clamav_virus_scan":
                        {
                          "data": { "infected": true, "infected_with": "Win.Test.EICAR_HDB-1" },
                          "version": "0.104.2",
                          "datetime_created": "2021-09-21T11:24:33.159663Z",
                          "datetime_updated": "2021-09-21T11:24:33.159663Z",
                        },
                    },
                },
            },
          "file":
            {
              "value":
                {
                  "datetime_removed": null,
                  "datetime_stored": "2018-11-26T12:49:10.477888Z",
                  "datetime_uploaded": "2018-11-26T12:49:09.945335Z",
                  "variations": null,
                  "is_image": true,
                  "is_ready": true,
                  "mime_type": "image/jpeg",
                  "original_file_url": "https://ucarecdn.com/22240276-2f06-41f8-9411-755c8ce926ed/pineapple.jpg",
                  "original_filename": "pineapple.jpg",
                  "size": 642,
                  "url": "https://api.uploadcare.com/files/22240276-2f06-41f8-9411-755c8ce926ed/",
                  "uuid": "22240276-2f06-41f8-9411-755c8ce926ed",
                  "content_info":
                    {
                      "mime": { "mime": "image/jpeg", "type": "image", "subtype": "jpeg" },
                      "image":
                        {
                          "format": "JPEG",
                          "width": 500,
                          "height": 500,
                          "sequence": false,
                          "color_mode": "RGB",
                          "orientation": 6,
                          "geo_location": { "latitude": 55.62013611111111, "longitude": 37.66299166666666 },
                          "datetime_original": "2018-08-20T08:59:50",
                          "dpi": [72, 72],
                        },
                    },
                  "metadata": { "subsystem": "uploader", "pet": "cat" },
                  "appdata":
                    {
                      "aws_rekognition_detect_labels":
                        {
                          "data":
                            {
                              "LabelModelVersion": "2.0",
                              "Labels":
                                [
                                  {
                                    "Confidence": 93.41645812988281,
                                    "Instances": [],
                                    "Name": "Home Decor",
                                    "Parents": [],
                                  },
                                  {
                                    "Confidence": 70.75951385498047,
                                    "Instances": [],
                                    "Name": "Linen",
                                    "Parents": [{ "Name": "Home Decor" }],
                                  },
                                  {
                                    "Confidence": 64.7123794555664,
                                    "Instances": [],
                                    "Name": "Sunlight",
                                    "Parents": [],
                                  },
                                  {
                                    "Confidence": 56.264793395996094,
                                    "Instances": [],
                                    "Name": "Flare",
                                    "Parents": [{ "Name": "Light" }],
                                  },
                                  {
                                    "Confidence": 50.47153854370117,
                                    "Instances": [],
                                    "Name": "Tree",
                                    "Parents": [{ "Name": "Plant" }],
                                  },
                                ],
                            },
                          "version": "2016-06-27",
                          "datetime_created": "2021-09-21T11:25:31.259763Z",
                          "datetime_updated": "2021-09-21T11:27:33.359763Z",
                        },
                      "aws_rekognition_detect_moderation_labels":
                        {
                          "data":
                            {
                              "ModerationModelVersion": "6.0",
                              "ModerationLabels":
                                [{ "Confidence": 93.41645812988281, "Name": "Weapons", "ParentName": "Violence" }],
                            },
                          "version": "2016-06-27",
                          "datetime_created": "2023-02-21T11:25:31.259763Z",
                          "datetime_updated": "2023-02-21T11:27:33.359763Z",
                        },
                      "remove_bg":
                        {
                          "data": { "foreground_type": "person" },
                          "version": "1.0",
                          "datetime_created": "2021-07-25T12:24:33.159663Z",
                          "datetime_updated": "2021-07-25T12:24:33.159663Z",
                        },
                      "uc_clamav_virus_scan":
                        {
                          "data": { "infected": true, "infected_with": "Win.Test.EICAR_HDB-1" },
                          "version": "0.104.2",
                          "datetime_created": "2021-09-21T11:24:33.159663Z",
                          "datetime_updated": "2021-09-21T11:24:33.159663Z",
                        },
                    },
                },
            },
          "file_video":
            {
              "value":
                {
                  "datetime_removed": null,
                  "datetime_stored": "2021-09-21T11:24:33.159663Z",
                  "datetime_uploaded": "2021-09-21T11:24:33.159663Z",
                  "is_image": false,
                  "is_ready": true,
                  "mime_type": "video/mp4",
                  "original_file_url": "https://ucarecdn.com/7ed2aed0-0482-4c13-921b-0557b193edc2/16317390663260.mp4",
                  "original_filename": "16317390663260.mp4",
                  "size": 14479722,
                  "url": "https://api.uploadcare.com/files/7ed2aed0-0482-4c13-921b-0557b193edc2/",
                  "uuid": "7ed2aed0-0482-4c13-921b-0557b193edc2",
                  "variations": null,
                  "content_info":
                    {
                      "mime": { "mime": "video/mp4", "type": "video", "subtype": "mp4" },
                      "video":
                        {
                          "audio": [{ "codec": "aac", "bitrate": 129, "channels": 2, "sample_rate": 44100 }],
                          "video": [{ "codec": "h264", "width": 640, "height": 480, "bitrate": 433, "frame_rate": 30 }],
                          "format": "mp4",
                          "bitrate": 579,
                          "duration": 200044,
                        },
                    },
                  "metadata": { "subsystem": "tester", "pet": "dog" },
                },
            },
          "group_list":
            {
              "value":
                {
                  "next": "https://api.uploadcare.com/groups/?limit=3&from=2016-11-09T14%3A30%3A22.421889%2B00%3A00&offset=0",
                  "previous": null,
                  "total": 100,
                  "per_page": 2,
                  "results":
                    [
                      {
                        "id": "dd43982b-5447-44b2-86f6-1c3b52afa0ff~1",
                        "datetime_created": "2018-11-27T14:14:37.583654Z",
                        "files_count": 1,
                        "cdn_url": "https://ucarecdn.com/dd43982b-5447-44b2-86f6-1c3b52afa0ff~1/",
                        "url": "https://api.uploadcare.com/groups/dd43982b-5447-44b2-86f6-1c3b52afa0ff~1/",
                      },
                      {
                        "id": "fd59dbcb-40a1-4f3a-8062-cc7d23f66885~1",
                        "datetime_created": "2018-11-27T15:14:39.586674Z",
                        "files_count": 1,
                        "cdn_url": "https://ucarecdn.com/fd59dbcb-40a1-4f3a-8062-cc7d23f66885~1/",
                        "url": "https://api.uploadcare.com/groups/fd59dbcb-40a1-4f3a-8062-cc7d23f66885~1/",
                      },
                    ],
                },
            },
        },
      "parameters":
        {
          "webhookSignature":
            {
              "in": "header",
              "name": "X-Uc-Signature",
              "description": "Optional header with an HMAC-SHA256 signature that is sent to the `target_url`,\nif the webhook has a `signing_secret` associated with it.\n",
              "schema":
                { "type": "string", "example": "v1=01ba4719c80b6fe911b091a7c05124b64eeece964e09c058ef8f9805daca546b" },
            },
          "acceptHeader":
            {
              "in": "header",
              "name": "Accept",
              "description": "Version header.",
              "schema": { "type": "string", "nullable": true, "example": "application/vnd.uploadcare-v0.7+json" },
              "required": true,
            },
          "fileUUID":
            {
              "in": "path",
              "name": "uuid",
              "description": "File UUID.",
              "required": true,
              "schema": { "type": "string", "format": "uuid", "example": "21975c81-7f57-4c7a-aef9-acfe28779f78" },
            },
          "fileMetadataKey":
            {
              "in": "path",
              "name": "key",
              "description": "Key of file metadata.\nList of allowed characters for the key:\n  - Latin letters in lower or upper case (a-z,A-Z)\n  - digits (0-9)\n  - underscore `_`\n  - a hyphen `-`\n  - dot `.`\n  - colon `:`\n",
              "required": true,
              "schema":
                {
                  "type": "string",
                  "minLength": 1,
                  "maxLength": 64,
                  "pattern": "[\\w\\-\\.\\:]+",
                  "example": "subsystem",
                },
            },
        },
    },
}
