[
  {
    "id": "83d12b33-dab6-466a-9d55-0dbc8135e742",
    "endpoints": {
      "endpoint_.execute-prompt": {
        "id": "endpoint_.execute-prompt",
        "namespace": [],
        "displayName": "Execute Prompt",
        "operationId": "execute-prompt",
        "description": "Executes a deployed Prompt and returns the result.",
        "availability": "GenerallyAvailable",
        "method": "POST",
        "path": [
          {
            "type": "literal",
            "value": "/v1/execute-prompt"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Production",
        "environments": [
          {
            "id": "Production",
            "baseUrl": "https://predict.vellum.ai"
          }
        ],
        "requests": [
          {
            "contentType": "application/json",
            "body": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "inputs",
                  "valueShape": {
                    "type": "alias",
                    "value": {
                      "type": "list",
                      "itemShape": {
                        "type": "alias",
                        "value": {
                          "type": "id",
                          "id": "type_:PromptDeploymentInputRequest"
                        }
                      }
                    }
                  },
                  "description": "A list consisting of the Prompt Deployment's input variables and their values."
                },
                {
                  "key": "prompt_deployment_id",
                  "valueShape": {
                    "type": "alias",
                    "value": {
                      "type": "optional",
                      "shape": {
                        "type": "alias",
                        "value": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "description": "The ID of the Prompt Deployment. Must provide either this or prompt_deployment_name."
                },
                {
                  "key": "prompt_deployment_name",
                  "valueShape": {
                    "type": "alias",
                    "value": {
                      "type": "optional",
                      "shape": {
                        "type": "alias",
                        "value": {
                          "type": "primitive",
                          "value": {
                            "type": "string",
                            "minLength": 1,
                            "maxLength": 1
                          }
                        }
                      }
                    }
                  },
                  "description": "The unique name of the Prompt Deployment. Must provide either this or prompt_deployment_id."
                },
                {
                  "key": "release_tag",
                  "valueShape": {
                    "type": "alias",
                    "value": {
                      "type": "optional",
                      "shape": {
                        "type": "alias",
                        "value": {
                          "type": "primitive",
                          "value": {
                            "type": "string",
                            "minLength": 1,
                            "maxLength": 1
                          }
                        }
                      }
                    }
                  },
                  "description": "Optionally specify a release tag if you want to pin to a specific release of the Prompt Deployment"
                },
                {
                  "key": "external_id",
                  "valueShape": {
                    "type": "alias",
                    "value": {
                      "type": "optional",
                      "shape": {
                        "type": "alias",
                        "value": {
                          "type": "primitive",
                          "value": {
                            "type": "string",
                            "minLength": 1,
                            "maxLength": 1
                          }
                        }
                      }
                    }
                  },
                  "description": "Optionally include a unique identifier for tracking purposes. Must be unique within a given Prompt Deployment."
                },
                {
                  "key": "expand_meta",
                  "valueShape": {
                    "type": "alias",
                    "value": {
                      "type": "optional",
                      "shape": {
                        "type": "alias",
                        "value": {
                          "type": "id",
                          "id": "type_:PromptDeploymentExpandMetaRequest"
                        }
                      }
                    }
                  },
                  "description": "An optionally specified configuration used to opt in to including additional metadata about this prompt execution in the API response. Corresponding values will be returned under the `meta` key of the API response."
                },
                {
                  "key": "raw_overrides",
                  "valueShape": {
                    "type": "alias",
                    "value": {
                      "type": "optional",
                      "shape": {
                        "type": "alias",
                        "value": {
                          "type": "id",
                          "id": "type_:RawPromptExecutionOverridesRequest"
                        }
                      }
                    }
                  },
                  "description": "Overrides for the raw API request sent to the model host. Combined with `expand_raw`, it can be used to access new features from models."
                },
                {
                  "key": "expand_raw",
                  "valueShape": {
                    "type": "alias",
                    "value": {
                      "type": "optional",
                      "shape": {
                        "type": "alias",
                        "value": {
                          "type": "list",
                          "itemShape": {
                            "type": "alias",
                            "value": {
                              "type": "primitive",
                              "value": {
                                "type": "string"
                              }
                            }
                          }
                        }
                      }
                    }
                  },
                  "description": "A list of keys whose values you'd like to directly return from the JSON response of the model provider. Useful if you need lower-level info returned by model providers that Vellum would otherwise omit. Corresponding key/value pairs will be returned under the `raw` key of the API response."
                },
                {
                  "key": "metadata",
                  "valueShape": {
                    "type": "alias",
                    "value": {
                      "type": "optional",
                      "shape": {
                        "type": "alias",
                        "value": {
                          "type": "map",
                          "keyShape": {
                            "type": "alias",
                            "value": {
                              "type": "primitive",
                              "value": {
                                "type": "string"
                              }
                            }
                          },
                          "valueShape": {
                            "type": "alias",
                            "value": {
                              "type": "unknown"
                            }
                          }
                        }
                      }
                    }
                  },
                  "description": "Arbitrary JSON metadata associated with this request. Can be used to capture additional monitoring data such as user id, session id, etc. for future analysis."
                }
              ]
            }
          }
        ],
        "responses": [
          {
            "statusCode": 200,
            "body": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:ExecutePromptResponse"
              }
            }
          }
        ],
        "errors": [
          {
            "description": "",
            "name": "Bad Request",
            "statusCode": 400,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:ExecutePromptApiErrorResponse"
              }
            },
            "examples": []
          },
          {
            "description": "",
            "name": "Forbidden",
            "statusCode": 403,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:ExecutePromptApiErrorResponse"
              }
            },
            "examples": []
          },
          {
            "description": "",
            "name": "Not Found",
            "statusCode": 404,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:ExecutePromptApiErrorResponse"
              }
            },
            "examples": []
          },
          {
            "description": "",
            "name": "Internal Server Error",
            "statusCode": 500,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:ExecutePromptApiErrorResponse"
              }
            },
            "examples": []
          }
        ],
        "examples": [
          {
            "path": "/v1/execute-prompt",
            "responseStatusCode": 200,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {
                "inputs": [
                  {
                    "type": "CHAT_HISTORY",
                    "name": "inputs",
                    "value": [
                      {
                        "role": "SYSTEM"
                      }
                    ]
                  }
                ]
              }
            },
            "responseBody": {
              "type": "json",
              "value": {
                "state": "REJECTED",
                "error": {
                  "message": "message",
                  "code": "INVALID_REQUEST"
                },
                "execution_id": "string",
                "meta": {
                  "model_name": "model_name",
                  "latency": 1,
                  "deployment_release_tag": "deployment_release_tag",
                  "prompt_version_id": "prompt_version_id",
                  "finish_reason": "LENGTH",
                  "usage": {
                    "output_token_count": 1,
                    "input_token_count": 1,
                    "input_char_count": 1,
                    "output_char_count": 1,
                    "compute_nanos": 1,
                    "cache_creation_input_tokens": 1,
                    "cache_read_input_tokens": 1
                  },
                  "cost": {
                    "value": 1.1,
                    "unit": "USD"
                  }
                },
                "raw": {
                  "key": "value"
                }
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://predict.vellum.ai/v1/execute-prompt \\\n     -H \"X_API_KEY: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n  \"inputs\": [\n    {\n      \"type\": \"CHAT_HISTORY\",\n      \"name\": \"inputs\",\n      \"value\": [\n        {\n          \"role\": \"SYSTEM\"\n        }\n      ]\n    }\n  ]\n}'",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from vellum import StringInputRequest, Vellum\n\nclient = Vellum(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.execute_prompt(\n    inputs=[\n        StringInputRequest(\n            name=\"name\",\n            value=\"value\",\n        )\n    ],\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { VellumClient } from \"vellum-ai\";\n\nconst client = new VellumClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.executePrompt({\n    inputs: [{\n            name: \"name\",\n            type: \"STRING\",\n            value: \"value\"\n        }]\n});\n",
                  "generated": true
                }
              ],
              "go": [
                {
                  "language": "go",
                  "code": "import (\n\tcontext \"context\"\n\toption \"github.com/vellum-ai/vellum-client-go/option\"\n\tvellumclientgo \"github.com/vellum-ai/vellum-client-go\"\n\tvellumclientgoclient \"github.com/vellum-ai/vellum-client-go/client\"\n)\n\nclient := vellumclientgoclient.NewClient(\n\toption.WithApiKey(\n\t\t\"<YOUR_ApiKey>\",\n\t),\n)\nresponse, err := client.ExecutePrompt(\n\tcontext.TODO(),\n\t&vellumclientgo.ExecutePromptRequest{\n\t\tInputs: []*vellumclientgo.PromptDeploymentInputRequest{\n\t\t\t&vellumclientgo.PromptDeploymentInputRequest{\n\t\t\t\tStringInputRequest: &vellumclientgo.StringInputRequest{\n\t\t\t\t\tName:  \"name\",\n\t\t\t\t\tValue: \"value\",\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t},\n)\n",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/v1/execute-prompt",
            "responseStatusCode": 400,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {
                "inputs": [
                  {
                    "type": "STRING",
                    "name": "string",
                    "value": "string"
                  }
                ]
              }
            },
            "responseBody": {
              "type": "json",
              "value": {
                "detail": "string"
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://predict.vellum.ai/v1/execute-prompt \\\n     -H \"X_API_KEY: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n  \"inputs\": [\n    {\n      \"type\": \"STRING\",\n      \"name\": \"string\",\n      \"value\": \"string\"\n    }\n  ]\n}'",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from vellum import StringInputRequest, Vellum\n\nclient = Vellum(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.execute_prompt(\n    inputs=[\n        StringInputRequest(\n            name=\"name\",\n            value=\"value\",\n        )\n    ],\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { VellumClient } from \"vellum-ai\";\n\nconst client = new VellumClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.executePrompt({\n    inputs: [{\n            name: \"name\",\n            type: \"STRING\",\n            value: \"value\"\n        }]\n});\n",
                  "generated": true
                }
              ],
              "go": [
                {
                  "language": "go",
                  "code": "import (\n\tcontext \"context\"\n\toption \"github.com/vellum-ai/vellum-client-go/option\"\n\tvellumclientgo \"github.com/vellum-ai/vellum-client-go\"\n\tvellumclientgoclient \"github.com/vellum-ai/vellum-client-go/client\"\n)\n\nclient := vellumclientgoclient.NewClient(\n\toption.WithApiKey(\n\t\t\"<YOUR_ApiKey>\",\n\t),\n)\nresponse, err := client.ExecutePrompt(\n\tcontext.TODO(),\n\t&vellumclientgo.ExecutePromptRequest{\n\t\tInputs: []*vellumclientgo.PromptDeploymentInputRequest{\n\t\t\t&vellumclientgo.PromptDeploymentInputRequest{\n\t\t\t\tStringInputRequest: &vellumclientgo.StringInputRequest{\n\t\t\t\t\tName:  \"name\",\n\t\t\t\t\tValue: \"value\",\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t},\n)\n",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/v1/execute-prompt",
            "responseStatusCode": 403,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {
                "inputs": [
                  {
                    "type": "STRING",
                    "name": "string",
                    "value": "string"
                  }
                ]
              }
            },
            "responseBody": {
              "type": "json",
              "value": {
                "detail": "string"
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://predict.vellum.ai/v1/execute-prompt \\\n     -H \"X_API_KEY: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n  \"inputs\": [\n    {\n      \"type\": \"STRING\",\n      \"name\": \"string\",\n      \"value\": \"string\"\n    }\n  ]\n}'",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from vellum import StringInputRequest, Vellum\n\nclient = Vellum(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.execute_prompt(\n    inputs=[\n        StringInputRequest(\n            name=\"name\",\n            value=\"value\",\n        )\n    ],\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { VellumClient } from \"vellum-ai\";\n\nconst client = new VellumClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.executePrompt({\n    inputs: [{\n            name: \"name\",\n            type: \"STRING\",\n            value: \"value\"\n        }]\n});\n",
                  "generated": true
                }
              ],
              "go": [
                {
                  "language": "go",
                  "code": "import (\n\tcontext \"context\"\n\toption \"github.com/vellum-ai/vellum-client-go/option\"\n\tvellumclientgo \"github.com/vellum-ai/vellum-client-go\"\n\tvellumclientgoclient \"github.com/vellum-ai/vellum-client-go/client\"\n)\n\nclient := vellumclientgoclient.NewClient(\n\toption.WithApiKey(\n\t\t\"<YOUR_ApiKey>\",\n\t),\n)\nresponse, err := client.ExecutePrompt(\n\tcontext.TODO(),\n\t&vellumclientgo.ExecutePromptRequest{\n\t\tInputs: []*vellumclientgo.PromptDeploymentInputRequest{\n\t\t\t&vellumclientgo.PromptDeploymentInputRequest{\n\t\t\t\tStringInputRequest: &vellumclientgo.StringInputRequest{\n\t\t\t\t\tName:  \"name\",\n\t\t\t\t\tValue: \"value\",\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t},\n)\n",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/v1/execute-prompt",
            "responseStatusCode": 404,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {
                "inputs": [
                  {
                    "type": "STRING",
                    "name": "string",
                    "value": "string"
                  }
                ]
              }
            },
            "responseBody": {
              "type": "json",
              "value": {
                "detail": "string"
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://predict.vellum.ai/v1/execute-prompt \\\n     -H \"X_API_KEY: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n  \"inputs\": [\n    {\n      \"type\": \"STRING\",\n      \"name\": \"string\",\n      \"value\": \"string\"\n    }\n  ]\n}'",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from vellum import StringInputRequest, Vellum\n\nclient = Vellum(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.execute_prompt(\n    inputs=[\n        StringInputRequest(\n            name=\"name\",\n            value=\"value\",\n        )\n    ],\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { VellumClient } from \"vellum-ai\";\n\nconst client = new VellumClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.executePrompt({\n    inputs: [{\n            name: \"name\",\n            type: \"STRING\",\n            value: \"value\"\n        }]\n});\n",
                  "generated": true
                }
              ],
              "go": [
                {
                  "language": "go",
                  "code": "import (\n\tcontext \"context\"\n\toption \"github.com/vellum-ai/vellum-client-go/option\"\n\tvellumclientgo \"github.com/vellum-ai/vellum-client-go\"\n\tvellumclientgoclient \"github.com/vellum-ai/vellum-client-go/client\"\n)\n\nclient := vellumclientgoclient.NewClient(\n\toption.WithApiKey(\n\t\t\"<YOUR_ApiKey>\",\n\t),\n)\nresponse, err := client.ExecutePrompt(\n\tcontext.TODO(),\n\t&vellumclientgo.ExecutePromptRequest{\n\t\tInputs: []*vellumclientgo.PromptDeploymentInputRequest{\n\t\t\t&vellumclientgo.PromptDeploymentInputRequest{\n\t\t\t\tStringInputRequest: &vellumclientgo.StringInputRequest{\n\t\t\t\t\tName:  \"name\",\n\t\t\t\t\tValue: \"value\",\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t},\n)\n",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/v1/execute-prompt",
            "responseStatusCode": 500,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {
                "inputs": [
                  {
                    "type": "STRING",
                    "name": "string",
                    "value": "string"
                  }
                ]
              }
            },
            "responseBody": {
              "type": "json",
              "value": {
                "detail": "string"
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://predict.vellum.ai/v1/execute-prompt \\\n     -H \"X_API_KEY: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n  \"inputs\": [\n    {\n      \"type\": \"STRING\",\n      \"name\": \"string\",\n      \"value\": \"string\"\n    }\n  ]\n}'",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from vellum import StringInputRequest, Vellum\n\nclient = Vellum(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.execute_prompt(\n    inputs=[\n        StringInputRequest(\n            name=\"name\",\n            value=\"value\",\n        )\n    ],\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { VellumClient } from \"vellum-ai\";\n\nconst client = new VellumClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.executePrompt({\n    inputs: [{\n            name: \"name\",\n            type: \"STRING\",\n            value: \"value\"\n        }]\n});\n",
                  "generated": true
                }
              ],
              "go": [
                {
                  "language": "go",
                  "code": "import (\n\tcontext \"context\"\n\toption \"github.com/vellum-ai/vellum-client-go/option\"\n\tvellumclientgo \"github.com/vellum-ai/vellum-client-go\"\n\tvellumclientgoclient \"github.com/vellum-ai/vellum-client-go/client\"\n)\n\nclient := vellumclientgoclient.NewClient(\n\toption.WithApiKey(\n\t\t\"<YOUR_ApiKey>\",\n\t),\n)\nresponse, err := client.ExecutePrompt(\n\tcontext.TODO(),\n\t&vellumclientgo.ExecutePromptRequest{\n\t\tInputs: []*vellumclientgo.PromptDeploymentInputRequest{\n\t\t\t&vellumclientgo.PromptDeploymentInputRequest{\n\t\t\t\tStringInputRequest: &vellumclientgo.StringInputRequest{\n\t\t\t\t\tName:  \"name\",\n\t\t\t\t\tValue: \"value\",\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t},\n)\n",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "endpoint_.execute-prompt-stream": {
        "id": "endpoint_.execute-prompt-stream",
        "namespace": [],
        "displayName": "Execute Prompt Stream",
        "operationId": "execute-prompt-stream",
        "description": "Executes a deployed Prompt and streams back the results.",
        "availability": "GenerallyAvailable",
        "method": "POST",
        "path": [
          {
            "type": "literal",
            "value": "/v1/execute-prompt-stream"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Production",
        "environments": [
          {
            "id": "Production",
            "baseUrl": "https://predict.vellum.ai"
          }
        ],
        "requests": [
          {
            "contentType": "application/json",
            "body": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "inputs",
                  "valueShape": {
                    "type": "alias",
                    "value": {
                      "type": "list",
                      "itemShape": {
                        "type": "alias",
                        "value": {
                          "type": "id",
                          "id": "type_:PromptDeploymentInputRequest"
                        }
                      }
                    }
                  },
                  "description": "A list consisting of the Prompt Deployment's input variables and their values."
                },
                {
                  "key": "prompt_deployment_id",
                  "valueShape": {
                    "type": "alias",
                    "value": {
                      "type": "optional",
                      "shape": {
                        "type": "alias",
                        "value": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "description": "The ID of the Prompt Deployment. Must provide either this or prompt_deployment_name."
                },
                {
                  "key": "prompt_deployment_name",
                  "valueShape": {
                    "type": "alias",
                    "value": {
                      "type": "optional",
                      "shape": {
                        "type": "alias",
                        "value": {
                          "type": "primitive",
                          "value": {
                            "type": "string",
                            "minLength": 1,
                            "maxLength": 1
                          }
                        }
                      }
                    }
                  },
                  "description": "The unique name of the Prompt Deployment. Must provide either this or prompt_deployment_id."
                },
                {
                  "key": "release_tag",
                  "valueShape": {
                    "type": "alias",
                    "value": {
                      "type": "optional",
                      "shape": {
                        "type": "alias",
                        "value": {
                          "type": "primitive",
                          "value": {
                            "type": "string",
                            "minLength": 1,
                            "maxLength": 1
                          }
                        }
                      }
                    }
                  },
                  "description": "Optionally specify a release tag if you want to pin to a specific release of the Prompt Deployment"
                },
                {
                  "key": "external_id",
                  "valueShape": {
                    "type": "alias",
                    "value": {
                      "type": "optional",
                      "shape": {
                        "type": "alias",
                        "value": {
                          "type": "primitive",
                          "value": {
                            "type": "string",
                            "minLength": 1,
                            "maxLength": 1
                          }
                        }
                      }
                    }
                  },
                  "description": "Optionally include a unique identifier for tracking purposes. Must be unique within a given Prompt Deployment."
                },
                {
                  "key": "expand_meta",
                  "valueShape": {
                    "type": "alias",
                    "value": {
                      "type": "optional",
                      "shape": {
                        "type": "alias",
                        "value": {
                          "type": "id",
                          "id": "type_:PromptDeploymentExpandMetaRequest"
                        }
                      }
                    }
                  },
                  "description": "An optionally specified configuration used to opt in to including additional metadata about this prompt execution in the API response. Corresponding values will be returned under the `meta` key of the API response."
                },
                {
                  "key": "raw_overrides",
                  "valueShape": {
                    "type": "alias",
                    "value": {
                      "type": "optional",
                      "shape": {
                        "type": "alias",
                        "value": {
                          "type": "id",
                          "id": "type_:RawPromptExecutionOverridesRequest"
                        }
                      }
                    }
                  },
                  "description": "Overrides for the raw API request sent to the model host. Combined with `expand_raw`, it can be used to access new features from models."
                },
                {
                  "key": "expand_raw",
                  "valueShape": {
                    "type": "alias",
                    "value": {
                      "type": "optional",
                      "shape": {
                        "type": "alias",
                        "value": {
                          "type": "list",
                          "itemShape": {
                            "type": "alias",
                            "value": {
                              "type": "primitive",
                              "value": {
                                "type": "string"
                              }
                            }
                          }
                        }
                      }
                    }
                  },
                  "description": "A list of keys whose values you'd like to directly return from the JSON response of the model provider. Useful if you need lower-level info returned by model providers that Vellum would otherwise omit. Corresponding key/value pairs will be returned under the `raw` key of the API response."
                },
                {
                  "key": "metadata",
                  "valueShape": {
                    "type": "alias",
                    "value": {
                      "type": "optional",
                      "shape": {
                        "type": "alias",
                        "value": {
                          "type": "map",
                          "keyShape": {
                            "type": "alias",
                            "value": {
                              "type": "primitive",
                              "value": {
                                "type": "string"
                              }
                            }
                          },
                          "valueShape": {
                            "type": "alias",
                            "value": {
                              "type": "unknown"
                            }
                          }
                        }
                      }
                    }
                  },
                  "description": "Arbitrary JSON metadata associated with this request. Can be used to capture additional monitoring data such as user id, session id, etc. for future analysis."
                }
              ]
            }
          }
        ],
        "responses": [
          {
            "statusCode": 200,
            "body": {
              "type": "stream",
              "shape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:ExecutePromptEvent"
                }
              }
            }
          }
        ],
        "errors": [
          {
            "description": "",
            "name": "Bad Request",
            "statusCode": 400,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:ExecutePromptApiErrorResponse"
              }
            },
            "examples": []
          },
          {
            "description": "",
            "name": "Forbidden",
            "statusCode": 403,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:ExecutePromptApiErrorResponse"
              }
            },
            "examples": []
          },
          {
            "description": "",
            "name": "Not Found",
            "statusCode": 404,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:ExecutePromptApiErrorResponse"
              }
            },
            "examples": []
          },
          {
            "description": "",
            "name": "Internal Server Error",
            "statusCode": 500,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:ExecutePromptApiErrorResponse"
              }
            },
            "examples": []
          }
        ],
        "examples": [
          {
            "path": "/v1/execute-prompt-stream",
            "responseStatusCode": 200,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {
                "inputs": [
                  {
                    "type": "STRING",
                    "name": "string",
                    "value": "string"
                  }
                ]
              }
            },
            "responseBody": {
              "type": "stream",
              "value": [
                {
                  "state": "INITIATED",
                  "meta": {
                    "model_name": "string",
                    "latency": 0,
                    "deployment_release_tag": "string",
                    "prompt_version_id": "string"
                  },
                  "execution_id": "string"
                },
                {
                  "state": "INITIATED",
                  "meta": {
                    "model_name": "string",
                    "latency": 0,
                    "deployment_release_tag": "string",
                    "prompt_version_id": "string"
                  },
                  "execution_id": "string"
                }
              ]
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://predict.vellum.ai/v1/execute-prompt-stream \\\n     -H \"X_API_KEY: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n  \"inputs\": [\n    {\n      \"type\": \"STRING\",\n      \"name\": \"string\",\n      \"value\": \"string\"\n    }\n  ]\n}'",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from vellum import (\n    PromptDeploymentExpandMetaRequest,\n    RawPromptExecutionOverridesRequest,\n    StringInputRequest,\n    Vellum,\n)\n\nclient = Vellum(\n    api_key=\"YOUR_API_KEY\",\n)\nresponse = client.execute_prompt_stream(\n    inputs=[\n        StringInputRequest(\n            name=\"string\",\n            value=\"string\",\n        )\n    ],\n    prompt_deployment_id=\"string\",\n    prompt_deployment_name=\"string\",\n    release_tag=\"string\",\n    external_id=\"string\",\n    expand_meta=PromptDeploymentExpandMetaRequest(\n        model_name=True,\n        usage=True,\n        cost=True,\n        finish_reason=True,\n        latency=True,\n        deployment_release_tag=True,\n        prompt_version_id=True,\n    ),\n    raw_overrides=RawPromptExecutionOverridesRequest(\n        body={\"string\": {\"key\": \"value\"}},\n        headers={\"string\": {\"key\": \"value\"}},\n        url=\"string\",\n    ),\n    expand_raw=[\"string\"],\n    metadata={\"string\": {\"key\": \"value\"}},\n)\nfor chunk in response:\n    yield chunk\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { VellumClient } from \"vellum-ai\";\n\nconst client = new VellumClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.executePromptStream({\n    inputs: [{\n            name: \"string\",\n            type: \"STRING\",\n            value: \"string\"\n        }],\n    promptDeploymentId: \"string\",\n    promptDeploymentName: \"string\",\n    releaseTag: \"string\",\n    externalId: \"string\",\n    expandMeta: {\n        modelName: true,\n        usage: true,\n        cost: true,\n        finishReason: true,\n        latency: true,\n        deploymentReleaseTag: true,\n        promptVersionId: true\n    },\n    rawOverrides: {\n        body: {\n            \"string\": {\n                \"key\": \"value\"\n            }\n        },\n        headers: {\n            \"string\": {\n                \"key\": \"value\"\n            }\n        },\n        url: \"string\"\n    },\n    expandRaw: [\"string\"],\n    metadata: {\n        \"string\": {\n            \"key\": \"value\"\n        }\n    }\n});\n",
                  "generated": true
                }
              ],
              "go": [
                {
                  "language": "go",
                  "code": "import (\n\tcontext \"context\"\n\toption \"github.com/vellum-ai/vellum-client-go/option\"\n\tvellumclientgo \"github.com/vellum-ai/vellum-client-go\"\n\tvellumclientgoclient \"github.com/vellum-ai/vellum-client-go/client\"\n)\n\nclient := vellumclientgoclient.NewClient(\n\toption.WithApiKey(\n\t\t\"<YOUR_ApiKey>\",\n\t),\n)\nresponse, err := client.ExecutePromptStream(\n\tcontext.TODO(),\n\t&vellumclientgo.ExecutePromptStreamRequest{\n\t\tInputs: []*vellumclientgo.PromptDeploymentInputRequest{\n\t\t\t&vellumclientgo.PromptDeploymentInputRequest{\n\t\t\t\tStringInputRequest: &vellumclientgo.StringInputRequest{\n\t\t\t\t\tName:  \"string\",\n\t\t\t\t\tValue: \"string\",\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t\tPromptDeploymentId: vellumclientgo.String(\n\t\t\t\"string\",\n\t\t),\n\t\tPromptDeploymentName: vellumclientgo.String(\n\t\t\t\"string\",\n\t\t),\n\t\tReleaseTag: vellumclientgo.String(\n\t\t\t\"string\",\n\t\t),\n\t\tExternalId: vellumclientgo.String(\n\t\t\t\"string\",\n\t\t),\n\t\tExpandMeta: &vellumclientgo.PromptDeploymentExpandMetaRequest{\n\t\t\tModelName: vellumclientgo.Bool(\n\t\t\t\ttrue,\n\t\t\t),\n\t\t\tUsage: vellumclientgo.Bool(\n\t\t\t\ttrue,\n\t\t\t),\n\t\t\tCost: vellumclientgo.Bool(\n\t\t\t\ttrue,\n\t\t\t),\n\t\t\tFinishReason: vellumclientgo.Bool(\n\t\t\t\ttrue,\n\t\t\t),\n\t\t\tLatency: vellumclientgo.Bool(\n\t\t\t\ttrue,\n\t\t\t),\n\t\t\tDeploymentReleaseTag: vellumclientgo.Bool(\n\t\t\t\ttrue,\n\t\t\t),\n\t\t\tPromptVersionId: vellumclientgo.Bool(\n\t\t\t\ttrue,\n\t\t\t),\n\t\t},\n\t\tRawOverrides: &vellumclientgo.RawPromptExecutionOverridesRequest{\n\t\t\tBody: map[string]interface{}{\n\t\t\t\t\"string\": map[string]interface{}{\n\t\t\t\t\t\"key\": \"value\",\n\t\t\t\t},\n\t\t\t},\n\t\t\tHeaders: map[string]*interface{}{\n\t\t\t\t\"string\": map[string]interface{}{\n\t\t\t\t\t\"key\": \"value\",\n\t\t\t\t},\n\t\t\t},\n\t\t\tUrl: vellumclientgo.String(\n\t\t\t\t\"string\",\n\t\t\t),\n\t\t},\n\t\tExpandRaw: []string{\n\t\t\t\"string\",\n\t\t},\n\t\tMetadata: map[string]interface{}{\n\t\t\t\"string\": map[string]interface{}{\n\t\t\t\t\"key\": \"value\",\n\t\t\t},\n\t\t},\n\t},\n)\n",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/v1/execute-prompt-stream",
            "responseStatusCode": 400,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {
                "inputs": [
                  {
                    "type": "STRING",
                    "name": "string",
                    "value": "string"
                  }
                ]
              }
            },
            "responseBody": {
              "type": "json",
              "value": {
                "detail": "string"
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://predict.vellum.ai/v1/execute-prompt-stream \\\n     -H \"X_API_KEY: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n  \"inputs\": [\n    {\n      \"type\": \"STRING\",\n      \"name\": \"string\",\n      \"value\": \"string\"\n    }\n  ]\n}'",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from vellum import (\n    PromptDeploymentExpandMetaRequest,\n    RawPromptExecutionOverridesRequest,\n    StringInputRequest,\n    Vellum,\n)\n\nclient = Vellum(\n    api_key=\"YOUR_API_KEY\",\n)\nresponse = client.execute_prompt_stream(\n    inputs=[\n        StringInputRequest(\n            name=\"string\",\n            value=\"string\",\n        )\n    ],\n    prompt_deployment_id=\"string\",\n    prompt_deployment_name=\"string\",\n    release_tag=\"string\",\n    external_id=\"string\",\n    expand_meta=PromptDeploymentExpandMetaRequest(\n        model_name=True,\n        usage=True,\n        cost=True,\n        finish_reason=True,\n        latency=True,\n        deployment_release_tag=True,\n        prompt_version_id=True,\n    ),\n    raw_overrides=RawPromptExecutionOverridesRequest(\n        body={\"string\": {\"key\": \"value\"}},\n        headers={\"string\": {\"key\": \"value\"}},\n        url=\"string\",\n    ),\n    expand_raw=[\"string\"],\n    metadata={\"string\": {\"key\": \"value\"}},\n)\nfor chunk in response:\n    yield chunk\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { VellumClient } from \"vellum-ai\";\n\nconst client = new VellumClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.executePromptStream({\n    inputs: [{\n            name: \"string\",\n            type: \"STRING\",\n            value: \"string\"\n        }],\n    promptDeploymentId: \"string\",\n    promptDeploymentName: \"string\",\n    releaseTag: \"string\",\n    externalId: \"string\",\n    expandMeta: {\n        modelName: true,\n        usage: true,\n        cost: true,\n        finishReason: true,\n        latency: true,\n        deploymentReleaseTag: true,\n        promptVersionId: true\n    },\n    rawOverrides: {\n        body: {\n            \"string\": {\n                \"key\": \"value\"\n            }\n        },\n        headers: {\n            \"string\": {\n                \"key\": \"value\"\n            }\n        },\n        url: \"string\"\n    },\n    expandRaw: [\"string\"],\n    metadata: {\n        \"string\": {\n            \"key\": \"value\"\n        }\n    }\n});\n",
                  "generated": true
                }
              ],
              "go": [
                {
                  "language": "go",
                  "code": "import (\n\tcontext \"context\"\n\toption \"github.com/vellum-ai/vellum-client-go/option\"\n\tvellumclientgo \"github.com/vellum-ai/vellum-client-go\"\n\tvellumclientgoclient \"github.com/vellum-ai/vellum-client-go/client\"\n)\n\nclient := vellumclientgoclient.NewClient(\n\toption.WithApiKey(\n\t\t\"<YOUR_ApiKey>\",\n\t),\n)\nresponse, err := client.ExecutePromptStream(\n\tcontext.TODO(),\n\t&vellumclientgo.ExecutePromptStreamRequest{\n\t\tInputs: []*vellumclientgo.PromptDeploymentInputRequest{\n\t\t\t&vellumclientgo.PromptDeploymentInputRequest{\n\t\t\t\tStringInputRequest: &vellumclientgo.StringInputRequest{\n\t\t\t\t\tName:  \"string\",\n\t\t\t\t\tValue: \"string\",\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t\tPromptDeploymentId: vellumclientgo.String(\n\t\t\t\"string\",\n\t\t),\n\t\tPromptDeploymentName: vellumclientgo.String(\n\t\t\t\"string\",\n\t\t),\n\t\tReleaseTag: vellumclientgo.String(\n\t\t\t\"string\",\n\t\t),\n\t\tExternalId: vellumclientgo.String(\n\t\t\t\"string\",\n\t\t),\n\t\tExpandMeta: &vellumclientgo.PromptDeploymentExpandMetaRequest{\n\t\t\tModelName: vellumclientgo.Bool(\n\t\t\t\ttrue,\n\t\t\t),\n\t\t\tUsage: vellumclientgo.Bool(\n\t\t\t\ttrue,\n\t\t\t),\n\t\t\tCost: vellumclientgo.Bool(\n\t\t\t\ttrue,\n\t\t\t),\n\t\t\tFinishReason: vellumclientgo.Bool(\n\t\t\t\ttrue,\n\t\t\t),\n\t\t\tLatency: vellumclientgo.Bool(\n\t\t\t\ttrue,\n\t\t\t),\n\t\t\tDeploymentReleaseTag: vellumclientgo.Bool(\n\t\t\t\ttrue,\n\t\t\t),\n\t\t\tPromptVersionId: vellumclientgo.Bool(\n\t\t\t\ttrue,\n\t\t\t),\n\t\t},\n\t\tRawOverrides: &vellumclientgo.RawPromptExecutionOverridesRequest{\n\t\t\tBody: map[string]interface{}{\n\t\t\t\t\"string\": map[string]interface{}{\n\t\t\t\t\t\"key\": \"value\",\n\t\t\t\t},\n\t\t\t},\n\t\t\tHeaders: map[string]*interface{}{\n\t\t\t\t\"string\": map[string]interface{}{\n\t\t\t\t\t\"key\": \"value\",\n\t\t\t\t},\n\t\t\t},\n\t\t\tUrl: vellumclientgo.String(\n\t\t\t\t\"string\",\n\t\t\t),\n\t\t},\n\t\tExpandRaw: []string{\n\t\t\t\"string\",\n\t\t},\n\t\tMetadata: map[string]interface{}{\n\t\t\t\"string\": map[string]interface{}{\n\t\t\t\t\"key\": \"value\",\n\t\t\t},\n\t\t},\n\t},\n)\n",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/v1/execute-prompt-stream",
            "responseStatusCode": 403,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {
                "inputs": [
                  {
                    "type": "STRING",
                    "name": "string",
                    "value": "string"
                  }
                ]
              }
            },
            "responseBody": {
              "type": "json",
              "value": {
                "detail": "string"
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://predict.vellum.ai/v1/execute-prompt-stream \\\n     -H \"X_API_KEY: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n  \"inputs\": [\n    {\n      \"type\": \"STRING\",\n      \"name\": \"string\",\n      \"value\": \"string\"\n    }\n  ]\n}'",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from vellum import (\n    PromptDeploymentExpandMetaRequest,\n    RawPromptExecutionOverridesRequest,\n    StringInputRequest,\n    Vellum,\n)\n\nclient = Vellum(\n    api_key=\"YOUR_API_KEY\",\n)\nresponse = client.execute_prompt_stream(\n    inputs=[\n        StringInputRequest(\n            name=\"string\",\n            value=\"string\",\n        )\n    ],\n    prompt_deployment_id=\"string\",\n    prompt_deployment_name=\"string\",\n    release_tag=\"string\",\n    external_id=\"string\",\n    expand_meta=PromptDeploymentExpandMetaRequest(\n        model_name=True,\n        usage=True,\n        cost=True,\n        finish_reason=True,\n        latency=True,\n        deployment_release_tag=True,\n        prompt_version_id=True,\n    ),\n    raw_overrides=RawPromptExecutionOverridesRequest(\n        body={\"string\": {\"key\": \"value\"}},\n        headers={\"string\": {\"key\": \"value\"}},\n        url=\"string\",\n    ),\n    expand_raw=[\"string\"],\n    metadata={\"string\": {\"key\": \"value\"}},\n)\nfor chunk in response:\n    yield chunk\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { VellumClient } from \"vellum-ai\";\n\nconst client = new VellumClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.executePromptStream({\n    inputs: [{\n            name: \"string\",\n            type: \"STRING\",\n            value: \"string\"\n        }],\n    promptDeploymentId: \"string\",\n    promptDeploymentName: \"string\",\n    releaseTag: \"string\",\n    externalId: \"string\",\n    expandMeta: {\n        modelName: true,\n        usage: true,\n        cost: true,\n        finishReason: true,\n        latency: true,\n        deploymentReleaseTag: true,\n        promptVersionId: true\n    },\n    rawOverrides: {\n        body: {\n            \"string\": {\n                \"key\": \"value\"\n            }\n        },\n        headers: {\n            \"string\": {\n                \"key\": \"value\"\n            }\n        },\n        url: \"string\"\n    },\n    expandRaw: [\"string\"],\n    metadata: {\n        \"string\": {\n            \"key\": \"value\"\n        }\n    }\n});\n",
                  "generated": true
                }
              ],
              "go": [
                {
                  "language": "go",
                  "code": "import (\n\tcontext \"context\"\n\toption \"github.com/vellum-ai/vellum-client-go/option\"\n\tvellumclientgo \"github.com/vellum-ai/vellum-client-go\"\n\tvellumclientgoclient \"github.com/vellum-ai/vellum-client-go/client\"\n)\n\nclient := vellumclientgoclient.NewClient(\n\toption.WithApiKey(\n\t\t\"<YOUR_ApiKey>\",\n\t),\n)\nresponse, err := client.ExecutePromptStream(\n\tcontext.TODO(),\n\t&vellumclientgo.ExecutePromptStreamRequest{\n\t\tInputs: []*vellumclientgo.PromptDeploymentInputRequest{\n\t\t\t&vellumclientgo.PromptDeploymentInputRequest{\n\t\t\t\tStringInputRequest: &vellumclientgo.StringInputRequest{\n\t\t\t\t\tName:  \"string\",\n\t\t\t\t\tValue: \"string\",\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t\tPromptDeploymentId: vellumclientgo.String(\n\t\t\t\"string\",\n\t\t),\n\t\tPromptDeploymentName: vellumclientgo.String(\n\t\t\t\"string\",\n\t\t),\n\t\tReleaseTag: vellumclientgo.String(\n\t\t\t\"string\",\n\t\t),\n\t\tExternalId: vellumclientgo.String(\n\t\t\t\"string\",\n\t\t),\n\t\tExpandMeta: &vellumclientgo.PromptDeploymentExpandMetaRequest{\n\t\t\tModelName: vellumclientgo.Bool(\n\t\t\t\ttrue,\n\t\t\t),\n\t\t\tUsage: vellumclientgo.Bool(\n\t\t\t\ttrue,\n\t\t\t),\n\t\t\tCost: vellumclientgo.Bool(\n\t\t\t\ttrue,\n\t\t\t),\n\t\t\tFinishReason: vellumclientgo.Bool(\n\t\t\t\ttrue,\n\t\t\t),\n\t\t\tLatency: vellumclientgo.Bool(\n\t\t\t\ttrue,\n\t\t\t),\n\t\t\tDeploymentReleaseTag: vellumclientgo.Bool(\n\t\t\t\ttrue,\n\t\t\t),\n\t\t\tPromptVersionId: vellumclientgo.Bool(\n\t\t\t\ttrue,\n\t\t\t),\n\t\t},\n\t\tRawOverrides: &vellumclientgo.RawPromptExecutionOverridesRequest{\n\t\t\tBody: map[string]interface{}{\n\t\t\t\t\"string\": map[string]interface{}{\n\t\t\t\t\t\"key\": \"value\",\n\t\t\t\t},\n\t\t\t},\n\t\t\tHeaders: map[string]*interface{}{\n\t\t\t\t\"string\": map[string]interface{}{\n\t\t\t\t\t\"key\": \"value\",\n\t\t\t\t},\n\t\t\t},\n\t\t\tUrl: vellumclientgo.String(\n\t\t\t\t\"string\",\n\t\t\t),\n\t\t},\n\t\tExpandRaw: []string{\n\t\t\t\"string\",\n\t\t},\n\t\tMetadata: map[string]interface{}{\n\t\t\t\"string\": map[string]interface{}{\n\t\t\t\t\"key\": \"value\",\n\t\t\t},\n\t\t},\n\t},\n)\n",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/v1/execute-prompt-stream",
            "responseStatusCode": 404,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {
                "inputs": [
                  {
                    "type": "STRING",
                    "name": "string",
                    "value": "string"
                  }
                ]
              }
            },
            "responseBody": {
              "type": "json",
              "value": {
                "detail": "string"
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://predict.vellum.ai/v1/execute-prompt-stream \\\n     -H \"X_API_KEY: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n  \"inputs\": [\n    {\n      \"type\": \"STRING\",\n      \"name\": \"string\",\n      \"value\": \"string\"\n    }\n  ]\n}'",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from vellum import (\n    PromptDeploymentExpandMetaRequest,\n    RawPromptExecutionOverridesRequest,\n    StringInputRequest,\n    Vellum,\n)\n\nclient = Vellum(\n    api_key=\"YOUR_API_KEY\",\n)\nresponse = client.execute_prompt_stream(\n    inputs=[\n        StringInputRequest(\n            name=\"string\",\n            value=\"string\",\n        )\n    ],\n    prompt_deployment_id=\"string\",\n    prompt_deployment_name=\"string\",\n    release_tag=\"string\",\n    external_id=\"string\",\n    expand_meta=PromptDeploymentExpandMetaRequest(\n        model_name=True,\n        usage=True,\n        cost=True,\n        finish_reason=True,\n        latency=True,\n        deployment_release_tag=True,\n        prompt_version_id=True,\n    ),\n    raw_overrides=RawPromptExecutionOverridesRequest(\n        body={\"string\": {\"key\": \"value\"}},\n        headers={\"string\": {\"key\": \"value\"}},\n        url=\"string\",\n    ),\n    expand_raw=[\"string\"],\n    metadata={\"string\": {\"key\": \"value\"}},\n)\nfor chunk in response:\n    yield chunk\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { VellumClient } from \"vellum-ai\";\n\nconst client = new VellumClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.executePromptStream({\n    inputs: [{\n            name: \"string\",\n            type: \"STRING\",\n            value: \"string\"\n        }],\n    promptDeploymentId: \"string\",\n    promptDeploymentName: \"string\",\n    releaseTag: \"string\",\n    externalId: \"string\",\n    expandMeta: {\n        modelName: true,\n        usage: true,\n        cost: true,\n        finishReason: true,\n        latency: true,\n        deploymentReleaseTag: true,\n        promptVersionId: true\n    },\n    rawOverrides: {\n        body: {\n            \"string\": {\n                \"key\": \"value\"\n            }\n        },\n        headers: {\n            \"string\": {\n                \"key\": \"value\"\n            }\n        },\n        url: \"string\"\n    },\n    expandRaw: [\"string\"],\n    metadata: {\n        \"string\": {\n            \"key\": \"value\"\n        }\n    }\n});\n",
                  "generated": true
                }
              ],
              "go": [
                {
                  "language": "go",
                  "code": "import (\n\tcontext \"context\"\n\toption \"github.com/vellum-ai/vellum-client-go/option\"\n\tvellumclientgo \"github.com/vellum-ai/vellum-client-go\"\n\tvellumclientgoclient \"github.com/vellum-ai/vellum-client-go/client\"\n)\n\nclient := vellumclientgoclient.NewClient(\n\toption.WithApiKey(\n\t\t\"<YOUR_ApiKey>\",\n\t),\n)\nresponse, err := client.ExecutePromptStream(\n\tcontext.TODO(),\n\t&vellumclientgo.ExecutePromptStreamRequest{\n\t\tInputs: []*vellumclientgo.PromptDeploymentInputRequest{\n\t\t\t&vellumclientgo.PromptDeploymentInputRequest{\n\t\t\t\tStringInputRequest: &vellumclientgo.StringInputRequest{\n\t\t\t\t\tName:  \"string\",\n\t\t\t\t\tValue: \"string\",\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t\tPromptDeploymentId: vellumclientgo.String(\n\t\t\t\"string\",\n\t\t),\n\t\tPromptDeploymentName: vellumclientgo.String(\n\t\t\t\"string\",\n\t\t),\n\t\tReleaseTag: vellumclientgo.String(\n\t\t\t\"string\",\n\t\t),\n\t\tExternalId: vellumclientgo.String(\n\t\t\t\"string\",\n\t\t),\n\t\tExpandMeta: &vellumclientgo.PromptDeploymentExpandMetaRequest{\n\t\t\tModelName: vellumclientgo.Bool(\n\t\t\t\ttrue,\n\t\t\t),\n\t\t\tUsage: vellumclientgo.Bool(\n\t\t\t\ttrue,\n\t\t\t),\n\t\t\tCost: vellumclientgo.Bool(\n\t\t\t\ttrue,\n\t\t\t),\n\t\t\tFinishReason: vellumclientgo.Bool(\n\t\t\t\ttrue,\n\t\t\t),\n\t\t\tLatency: vellumclientgo.Bool(\n\t\t\t\ttrue,\n\t\t\t),\n\t\t\tDeploymentReleaseTag: vellumclientgo.Bool(\n\t\t\t\ttrue,\n\t\t\t),\n\t\t\tPromptVersionId: vellumclientgo.Bool(\n\t\t\t\ttrue,\n\t\t\t),\n\t\t},\n\t\tRawOverrides: &vellumclientgo.RawPromptExecutionOverridesRequest{\n\t\t\tBody: map[string]interface{}{\n\t\t\t\t\"string\": map[string]interface{}{\n\t\t\t\t\t\"key\": \"value\",\n\t\t\t\t},\n\t\t\t},\n\t\t\tHeaders: map[string]*interface{}{\n\t\t\t\t\"string\": map[string]interface{}{\n\t\t\t\t\t\"key\": \"value\",\n\t\t\t\t},\n\t\t\t},\n\t\t\tUrl: vellumclientgo.String(\n\t\t\t\t\"string\",\n\t\t\t),\n\t\t},\n\t\tExpandRaw: []string{\n\t\t\t\"string\",\n\t\t},\n\t\tMetadata: map[string]interface{}{\n\t\t\t\"string\": map[string]interface{}{\n\t\t\t\t\"key\": \"value\",\n\t\t\t},\n\t\t},\n\t},\n)\n",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/v1/execute-prompt-stream",
            "responseStatusCode": 500,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {
                "inputs": [
                  {
                    "type": "STRING",
                    "name": "string",
                    "value": "string"
                  }
                ]
              }
            },
            "responseBody": {
              "type": "json",
              "value": {
                "detail": "string"
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://predict.vellum.ai/v1/execute-prompt-stream \\\n     -H \"X_API_KEY: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n  \"inputs\": [\n    {\n      \"type\": \"STRING\",\n      \"name\": \"string\",\n      \"value\": \"string\"\n    }\n  ]\n}'",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from vellum import (\n    PromptDeploymentExpandMetaRequest,\n    RawPromptExecutionOverridesRequest,\n    StringInputRequest,\n    Vellum,\n)\n\nclient = Vellum(\n    api_key=\"YOUR_API_KEY\",\n)\nresponse = client.execute_prompt_stream(\n    inputs=[\n        StringInputRequest(\n            name=\"string\",\n            value=\"string\",\n        )\n    ],\n    prompt_deployment_id=\"string\",\n    prompt_deployment_name=\"string\",\n    release_tag=\"string\",\n    external_id=\"string\",\n    expand_meta=PromptDeploymentExpandMetaRequest(\n        model_name=True,\n        usage=True,\n        cost=True,\n        finish_reason=True,\n        latency=True,\n        deployment_release_tag=True,\n        prompt_version_id=True,\n    ),\n    raw_overrides=RawPromptExecutionOverridesRequest(\n        body={\"string\": {\"key\": \"value\"}},\n        headers={\"string\": {\"key\": \"value\"}},\n        url=\"string\",\n    ),\n    expand_raw=[\"string\"],\n    metadata={\"string\": {\"key\": \"value\"}},\n)\nfor chunk in response:\n    yield chunk\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { VellumClient } from \"vellum-ai\";\n\nconst client = new VellumClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.executePromptStream({\n    inputs: [{\n            name: \"string\",\n            type: \"STRING\",\n            value: \"string\"\n        }],\n    promptDeploymentId: \"string\",\n    promptDeploymentName: \"string\",\n    releaseTag: \"string\",\n    externalId: \"string\",\n    expandMeta: {\n        modelName: true,\n        usage: true,\n        cost: true,\n        finishReason: true,\n        latency: true,\n        deploymentReleaseTag: true,\n        promptVersionId: true\n    },\n    rawOverrides: {\n        body: {\n            \"string\": {\n                \"key\": \"value\"\n            }\n        },\n        headers: {\n            \"string\": {\n                \"key\": \"value\"\n            }\n        },\n        url: \"string\"\n    },\n    expandRaw: [\"string\"],\n    metadata: {\n        \"string\": {\n            \"key\": \"value\"\n        }\n    }\n});\n",
                  "generated": true
                }
              ],
              "go": [
                {
                  "language": "go",
                  "code": "import (\n\tcontext \"context\"\n\toption \"github.com/vellum-ai/vellum-client-go/option\"\n\tvellumclientgo \"github.com/vellum-ai/vellum-client-go\"\n\tvellumclientgoclient \"github.com/vellum-ai/vellum-client-go/client\"\n)\n\nclient := vellumclientgoclient.NewClient(\n\toption.WithApiKey(\n\t\t\"<YOUR_ApiKey>\",\n\t),\n)\nresponse, err := client.ExecutePromptStream(\n\tcontext.TODO(),\n\t&vellumclientgo.ExecutePromptStreamRequest{\n\t\tInputs: []*vellumclientgo.PromptDeploymentInputRequest{\n\t\t\t&vellumclientgo.PromptDeploymentInputRequest{\n\t\t\t\tStringInputRequest: &vellumclientgo.StringInputRequest{\n\t\t\t\t\tName:  \"string\",\n\t\t\t\t\tValue: \"string\",\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t\tPromptDeploymentId: vellumclientgo.String(\n\t\t\t\"string\",\n\t\t),\n\t\tPromptDeploymentName: vellumclientgo.String(\n\t\t\t\"string\",\n\t\t),\n\t\tReleaseTag: vellumclientgo.String(\n\t\t\t\"string\",\n\t\t),\n\t\tExternalId: vellumclientgo.String(\n\t\t\t\"string\",\n\t\t),\n\t\tExpandMeta: &vellumclientgo.PromptDeploymentExpandMetaRequest{\n\t\t\tModelName: vellumclientgo.Bool(\n\t\t\t\ttrue,\n\t\t\t),\n\t\t\tUsage: vellumclientgo.Bool(\n\t\t\t\ttrue,\n\t\t\t),\n\t\t\tCost: vellumclientgo.Bool(\n\t\t\t\ttrue,\n\t\t\t),\n\t\t\tFinishReason: vellumclientgo.Bool(\n\t\t\t\ttrue,\n\t\t\t),\n\t\t\tLatency: vellumclientgo.Bool(\n\t\t\t\ttrue,\n\t\t\t),\n\t\t\tDeploymentReleaseTag: vellumclientgo.Bool(\n\t\t\t\ttrue,\n\t\t\t),\n\t\t\tPromptVersionId: vellumclientgo.Bool(\n\t\t\t\ttrue,\n\t\t\t),\n\t\t},\n\t\tRawOverrides: &vellumclientgo.RawPromptExecutionOverridesRequest{\n\t\t\tBody: map[string]interface{}{\n\t\t\t\t\"string\": map[string]interface{}{\n\t\t\t\t\t\"key\": \"value\",\n\t\t\t\t},\n\t\t\t},\n\t\t\tHeaders: map[string]*interface{}{\n\t\t\t\t\"string\": map[string]interface{}{\n\t\t\t\t\t\"key\": \"value\",\n\t\t\t\t},\n\t\t\t},\n\t\t\tUrl: vellumclientgo.String(\n\t\t\t\t\"string\",\n\t\t\t),\n\t\t},\n\t\tExpandRaw: []string{\n\t\t\t\"string\",\n\t\t},\n\t\tMetadata: map[string]interface{}{\n\t\t\t\"string\": map[string]interface{}{\n\t\t\t\t\"key\": \"value\",\n\t\t\t},\n\t\t},\n\t},\n)\n",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "endpoint_.execute-workflow": {
        "id": "endpoint_.execute-workflow",
        "namespace": [],
        "displayName": "Execute Workflow",
        "operationId": "execute-workflow",
        "description": "Executes a deployed Workflow and returns its outputs.",
        "availability": "GenerallyAvailable",
        "method": "POST",
        "path": [
          {
            "type": "literal",
            "value": "/v1/execute-workflow"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Production",
        "environments": [
          {
            "id": "Production",
            "baseUrl": "https://predict.vellum.ai"
          }
        ],
        "requests": [
          {
            "contentType": "application/json",
            "body": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "inputs",
                  "valueShape": {
                    "type": "alias",
                    "value": {
                      "type": "list",
                      "itemShape": {
                        "type": "alias",
                        "value": {
                          "type": "id",
                          "id": "type_:WorkflowRequestInputRequest"
                        }
                      }
                    }
                  },
                  "description": "The list of inputs defined in the Workflow's Deployment with their corresponding values."
                },
                {
                  "key": "expand_meta",
                  "valueShape": {
                    "type": "alias",
                    "value": {
                      "type": "optional",
                      "shape": {
                        "type": "alias",
                        "value": {
                          "type": "id",
                          "id": "type_:WorkflowExpandMetaRequest"
                        }
                      }
                    }
                  },
                  "description": "An optionally specified configuration used to opt in to including additional metadata about this workflow execution in the API response. Corresponding values will be returned under the `execution_meta` key within NODE events in the response stream."
                },
                {
                  "key": "workflow_deployment_id",
                  "valueShape": {
                    "type": "alias",
                    "value": {
                      "type": "optional",
                      "shape": {
                        "type": "alias",
                        "value": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "description": "The ID of the Workflow Deployment. Must provide either this or workflow_deployment_name."
                },
                {
                  "key": "workflow_deployment_name",
                  "valueShape": {
                    "type": "alias",
                    "value": {
                      "type": "optional",
                      "shape": {
                        "type": "alias",
                        "value": {
                          "type": "primitive",
                          "value": {
                            "type": "string",
                            "minLength": 1,
                            "maxLength": 1
                          }
                        }
                      }
                    }
                  },
                  "description": "The name of the Workflow Deployment. Must provide either this or workflow_deployment_id."
                },
                {
                  "key": "release_tag",
                  "valueShape": {
                    "type": "alias",
                    "value": {
                      "type": "optional",
                      "shape": {
                        "type": "alias",
                        "value": {
                          "type": "primitive",
                          "value": {
                            "type": "string",
                            "minLength": 1,
                            "maxLength": 1
                          }
                        }
                      }
                    }
                  },
                  "description": "Optionally specify a release tag if you want to pin to a specific release of the Workflow Deployment"
                },
                {
                  "key": "external_id",
                  "valueShape": {
                    "type": "alias",
                    "value": {
                      "type": "optional",
                      "shape": {
                        "type": "alias",
                        "value": {
                          "type": "primitive",
                          "value": {
                            "type": "string",
                            "minLength": 1,
                            "maxLength": 1
                          }
                        }
                      }
                    }
                  },
                  "description": "Optionally include a unique identifier for tracking purposes. Must be unique for a given workflow deployment."
                },
                {
                  "key": "metadata",
                  "valueShape": {
                    "type": "alias",
                    "value": {
                      "type": "optional",
                      "shape": {
                        "type": "alias",
                        "value": {
                          "type": "map",
                          "keyShape": {
                            "type": "alias",
                            "value": {
                              "type": "primitive",
                              "value": {
                                "type": "string"
                              }
                            }
                          },
                          "valueShape": {
                            "type": "alias",
                            "value": {
                              "type": "unknown"
                            }
                          }
                        }
                      }
                    }
                  },
                  "description": "Arbitrary JSON metadata associated with this request. Can be used to capture additional monitoring data such as user id, session id, etc. for future analysis."
                }
              ]
            }
          }
        ],
        "responses": [
          {
            "statusCode": 200,
            "body": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:ExecuteWorkflowResponse"
              }
            }
          }
        ],
        "errors": [
          {
            "description": "",
            "name": "Bad Request",
            "statusCode": 400,
            "shape": {
              "type": "alias",
              "value": {
                "type": "map",
                "keyShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "unknown"
                  }
                }
              }
            },
            "examples": []
          },
          {
            "description": "",
            "name": "Not Found",
            "statusCode": 404,
            "shape": {
              "type": "alias",
              "value": {
                "type": "map",
                "keyShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "unknown"
                  }
                }
              }
            },
            "examples": []
          },
          {
            "description": "",
            "name": "Internal Server Error",
            "statusCode": 500,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:ExecuteWorkflowErrorResponse"
              }
            },
            "examples": []
          }
        ],
        "examples": [
          {
            "path": "/v1/execute-workflow",
            "responseStatusCode": 200,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {
                "inputs": [
                  {
                    "type": "NUMBER",
                    "name": "inputs",
                    "value": 1.1
                  }
                ]
              }
            },
            "responseBody": {
              "type": "json",
              "value": {
                "execution_id": "execution_id",
                "data": {
                  "state": "REJECTED",
                  "error": {
                    "message": "message",
                    "code": "WORKFLOW_INITIALIZATION"
                  },
                  "id": "data",
                  "ts": "2024-01-15T09:30:00Z"
                },
                "external_id": "external_id",
                "run_id": "run_id"
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://predict.vellum.ai/v1/execute-workflow \\\n     -H \"X_API_KEY: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n  \"inputs\": [\n    {\n      \"type\": \"NUMBER\",\n      \"name\": \"inputs\",\n      \"value\": 1.1\n    }\n  ]\n}'",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from vellum import Vellum, WorkflowRequestStringInputRequest\n\nclient = Vellum(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.execute_workflow(\n    inputs=[\n        WorkflowRequestStringInputRequest(\n            name=\"name\",\n            value=\"value\",\n        )\n    ],\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { VellumClient } from \"vellum-ai\";\n\nconst client = new VellumClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.executeWorkflow({\n    inputs: [{\n            name: \"name\",\n            type: \"STRING\",\n            value: \"value\"\n        }]\n});\n",
                  "generated": true
                }
              ],
              "go": [
                {
                  "language": "go",
                  "code": "import (\n\tcontext \"context\"\n\toption \"github.com/vellum-ai/vellum-client-go/option\"\n\tvellumclientgo \"github.com/vellum-ai/vellum-client-go\"\n\tvellumclientgoclient \"github.com/vellum-ai/vellum-client-go/client\"\n)\n\nclient := vellumclientgoclient.NewClient(\n\toption.WithApiKey(\n\t\t\"<YOUR_ApiKey>\",\n\t),\n)\nresponse, err := client.ExecuteWorkflow(\n\tcontext.TODO(),\n\t&vellumclientgo.ExecuteWorkflowRequest{\n\t\tInputs: []*vellumclientgo.WorkflowRequestInputRequest{\n\t\t\t&vellumclientgo.WorkflowRequestInputRequest{\n\t\t\t\tWorkflowRequestStringInputRequest: &vellumclientgo.WorkflowRequestStringInputRequest{\n\t\t\t\t\tName:  \"name\",\n\t\t\t\t\tValue: \"value\",\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t},\n)\n",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/v1/execute-workflow",
            "responseStatusCode": 400,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {
                "inputs": [
                  {
                    "type": "STRING",
                    "name": "string",
                    "value": "string"
                  }
                ]
              }
            },
            "responseBody": {
              "type": "json",
              "value": {
                "string": {}
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://predict.vellum.ai/v1/execute-workflow \\\n     -H \"X_API_KEY: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n  \"inputs\": [\n    {\n      \"type\": \"STRING\",\n      \"name\": \"string\",\n      \"value\": \"string\"\n    }\n  ]\n}'",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from vellum import Vellum, WorkflowRequestStringInputRequest\n\nclient = Vellum(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.execute_workflow(\n    inputs=[\n        WorkflowRequestStringInputRequest(\n            name=\"name\",\n            value=\"value\",\n        )\n    ],\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { VellumClient } from \"vellum-ai\";\n\nconst client = new VellumClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.executeWorkflow({\n    inputs: [{\n            name: \"name\",\n            type: \"STRING\",\n            value: \"value\"\n        }]\n});\n",
                  "generated": true
                }
              ],
              "go": [
                {
                  "language": "go",
                  "code": "import (\n\tcontext \"context\"\n\toption \"github.com/vellum-ai/vellum-client-go/option\"\n\tvellumclientgo \"github.com/vellum-ai/vellum-client-go\"\n\tvellumclientgoclient \"github.com/vellum-ai/vellum-client-go/client\"\n)\n\nclient := vellumclientgoclient.NewClient(\n\toption.WithApiKey(\n\t\t\"<YOUR_ApiKey>\",\n\t),\n)\nresponse, err := client.ExecuteWorkflow(\n\tcontext.TODO(),\n\t&vellumclientgo.ExecuteWorkflowRequest{\n\t\tInputs: []*vellumclientgo.WorkflowRequestInputRequest{\n\t\t\t&vellumclientgo.WorkflowRequestInputRequest{\n\t\t\t\tWorkflowRequestStringInputRequest: &vellumclientgo.WorkflowRequestStringInputRequest{\n\t\t\t\t\tName:  \"name\",\n\t\t\t\t\tValue: \"value\",\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t},\n)\n",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/v1/execute-workflow",
            "responseStatusCode": 404,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {
                "inputs": [
                  {
                    "type": "STRING",
                    "name": "string",
                    "value": "string"
                  }
                ]
              }
            },
            "responseBody": {
              "type": "json",
              "value": {
                "string": {}
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://predict.vellum.ai/v1/execute-workflow \\\n     -H \"X_API_KEY: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n  \"inputs\": [\n    {\n      \"type\": \"STRING\",\n      \"name\": \"string\",\n      \"value\": \"string\"\n    }\n  ]\n}'",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from vellum import Vellum, WorkflowRequestStringInputRequest\n\nclient = Vellum(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.execute_workflow(\n    inputs=[\n        WorkflowRequestStringInputRequest(\n            name=\"name\",\n            value=\"value\",\n        )\n    ],\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { VellumClient } from \"vellum-ai\";\n\nconst client = new VellumClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.executeWorkflow({\n    inputs: [{\n            name: \"name\",\n            type: \"STRING\",\n            value: \"value\"\n        }]\n});\n",
                  "generated": true
                }
              ],
              "go": [
                {
                  "language": "go",
                  "code": "import (\n\tcontext \"context\"\n\toption \"github.com/vellum-ai/vellum-client-go/option\"\n\tvellumclientgo \"github.com/vellum-ai/vellum-client-go\"\n\tvellumclientgoclient \"github.com/vellum-ai/vellum-client-go/client\"\n)\n\nclient := vellumclientgoclient.NewClient(\n\toption.WithApiKey(\n\t\t\"<YOUR_ApiKey>\",\n\t),\n)\nresponse, err := client.ExecuteWorkflow(\n\tcontext.TODO(),\n\t&vellumclientgo.ExecuteWorkflowRequest{\n\t\tInputs: []*vellumclientgo.WorkflowRequestInputRequest{\n\t\t\t&vellumclientgo.WorkflowRequestInputRequest{\n\t\t\t\tWorkflowRequestStringInputRequest: &vellumclientgo.WorkflowRequestStringInputRequest{\n\t\t\t\t\tName:  \"name\",\n\t\t\t\t\tValue: \"value\",\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t},\n)\n",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/v1/execute-workflow",
            "responseStatusCode": 500,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {
                "inputs": [
                  {
                    "type": "STRING",
                    "name": "string",
                    "value": "string"
                  }
                ]
              }
            },
            "responseBody": {
              "type": "json",
              "value": {
                "detail": "string"
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://predict.vellum.ai/v1/execute-workflow \\\n     -H \"X_API_KEY: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n  \"inputs\": [\n    {\n      \"type\": \"STRING\",\n      \"name\": \"string\",\n      \"value\": \"string\"\n    }\n  ]\n}'",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from vellum import Vellum, WorkflowRequestStringInputRequest\n\nclient = Vellum(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.execute_workflow(\n    inputs=[\n        WorkflowRequestStringInputRequest(\n            name=\"name\",\n            value=\"value\",\n        )\n    ],\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { VellumClient } from \"vellum-ai\";\n\nconst client = new VellumClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.executeWorkflow({\n    inputs: [{\n            name: \"name\",\n            type: \"STRING\",\n            value: \"value\"\n        }]\n});\n",
                  "generated": true
                }
              ],
              "go": [
                {
                  "language": "go",
                  "code": "import (\n\tcontext \"context\"\n\toption \"github.com/vellum-ai/vellum-client-go/option\"\n\tvellumclientgo \"github.com/vellum-ai/vellum-client-go\"\n\tvellumclientgoclient \"github.com/vellum-ai/vellum-client-go/client\"\n)\n\nclient := vellumclientgoclient.NewClient(\n\toption.WithApiKey(\n\t\t\"<YOUR_ApiKey>\",\n\t),\n)\nresponse, err := client.ExecuteWorkflow(\n\tcontext.TODO(),\n\t&vellumclientgo.ExecuteWorkflowRequest{\n\t\tInputs: []*vellumclientgo.WorkflowRequestInputRequest{\n\t\t\t&vellumclientgo.WorkflowRequestInputRequest{\n\t\t\t\tWorkflowRequestStringInputRequest: &vellumclientgo.WorkflowRequestStringInputRequest{\n\t\t\t\t\tName:  \"name\",\n\t\t\t\t\tValue: \"value\",\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t},\n)\n",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "endpoint_.execute-workflow-stream": {
        "id": "endpoint_.execute-workflow-stream",
        "namespace": [],
        "displayName": "Execute Workflow Stream",
        "operationId": "execute-workflow-stream",
        "description": "Executes a deployed Workflow and streams back its results.",
        "availability": "GenerallyAvailable",
        "method": "POST",
        "path": [
          {
            "type": "literal",
            "value": "/v1/execute-workflow-stream"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Production",
        "environments": [
          {
            "id": "Production",
            "baseUrl": "https://predict.vellum.ai"
          }
        ],
        "requests": [
          {
            "contentType": "application/json",
            "body": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "inputs",
                  "valueShape": {
                    "type": "alias",
                    "value": {
                      "type": "list",
                      "itemShape": {
                        "type": "alias",
                        "value": {
                          "type": "id",
                          "id": "type_:WorkflowRequestInputRequest"
                        }
                      }
                    }
                  },
                  "description": "The list of inputs defined in the Workflow's Deployment with their corresponding values."
                },
                {
                  "key": "expand_meta",
                  "valueShape": {
                    "type": "alias",
                    "value": {
                      "type": "optional",
                      "shape": {
                        "type": "alias",
                        "value": {
                          "type": "id",
                          "id": "type_:WorkflowExpandMetaRequest"
                        }
                      }
                    }
                  },
                  "description": "An optionally specified configuration used to opt in to including additional metadata about this workflow execution in the API response. Corresponding values will be returned under the `execution_meta` key within NODE events in the response stream."
                },
                {
                  "key": "workflow_deployment_id",
                  "valueShape": {
                    "type": "alias",
                    "value": {
                      "type": "optional",
                      "shape": {
                        "type": "alias",
                        "value": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "description": "The ID of the Workflow Deployment. Must provide either this or workflow_deployment_name."
                },
                {
                  "key": "workflow_deployment_name",
                  "valueShape": {
                    "type": "alias",
                    "value": {
                      "type": "optional",
                      "shape": {
                        "type": "alias",
                        "value": {
                          "type": "primitive",
                          "value": {
                            "type": "string",
                            "minLength": 1,
                            "maxLength": 1
                          }
                        }
                      }
                    }
                  },
                  "description": "The name of the Workflow Deployment. Must provide either this or workflow_deployment_id."
                },
                {
                  "key": "release_tag",
                  "valueShape": {
                    "type": "alias",
                    "value": {
                      "type": "optional",
                      "shape": {
                        "type": "alias",
                        "value": {
                          "type": "primitive",
                          "value": {
                            "type": "string",
                            "minLength": 1,
                            "maxLength": 1
                          }
                        }
                      }
                    }
                  },
                  "description": "Optionally specify a release tag if you want to pin to a specific release of the Workflow Deployment"
                },
                {
                  "key": "external_id",
                  "valueShape": {
                    "type": "alias",
                    "value": {
                      "type": "optional",
                      "shape": {
                        "type": "alias",
                        "value": {
                          "type": "primitive",
                          "value": {
                            "type": "string",
                            "minLength": 1,
                            "maxLength": 1
                          }
                        }
                      }
                    }
                  },
                  "description": "Optionally include a unique identifier for tracking purposes. Must be unique for a given workflow deployment."
                },
                {
                  "key": "event_types",
                  "valueShape": {
                    "type": "alias",
                    "value": {
                      "type": "optional",
                      "shape": {
                        "type": "alias",
                        "value": {
                          "type": "list",
                          "itemShape": {
                            "type": "alias",
                            "value": {
                              "type": "id",
                              "id": "type_:WorkflowExecutionEventType"
                            }
                          }
                        }
                      }
                    }
                  },
                  "description": "Optionally specify which events you want to receive. Defaults to only WORKFLOW events. Note that the schema of non-WORKFLOW events is unstable and should be used with caution."
                },
                {
                  "key": "metadata",
                  "valueShape": {
                    "type": "alias",
                    "value": {
                      "type": "optional",
                      "shape": {
                        "type": "alias",
                        "value": {
                          "type": "map",
                          "keyShape": {
                            "type": "alias",
                            "value": {
                              "type": "primitive",
                              "value": {
                                "type": "string"
                              }
                            }
                          },
                          "valueShape": {
                            "type": "alias",
                            "value": {
                              "type": "unknown"
                            }
                          }
                        }
                      }
                    }
                  },
                  "description": "Arbitrary JSON metadata associated with this request. Can be used to capture additional monitoring data such as user id, session id, etc. for future analysis."
                }
              ]
            }
          }
        ],
        "responses": [
          {
            "statusCode": 200,
            "body": {
              "type": "stream",
              "shape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:WorkflowStreamEvent"
                }
              }
            }
          }
        ],
        "errors": [
          {
            "description": "",
            "name": "Bad Request",
            "statusCode": 400,
            "shape": {
              "type": "alias",
              "value": {
                "type": "map",
                "keyShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "unknown"
                  }
                }
              }
            },
            "examples": []
          },
          {
            "description": "",
            "name": "Not Found",
            "statusCode": 404,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:ExecuteWorkflowStreamErrorResponse"
              }
            },
            "examples": []
          },
          {
            "description": "",
            "name": "Internal Server Error",
            "statusCode": 500,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:ExecuteWorkflowStreamErrorResponse"
              }
            },
            "examples": []
          }
        ],
        "examples": [
          {
            "path": "/v1/execute-workflow-stream",
            "responseStatusCode": 200,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {
                "inputs": [
                  {
                    "type": "STRING",
                    "name": "string",
                    "value": "string"
                  }
                ]
              }
            },
            "responseBody": {
              "type": "stream",
              "value": [
                {
                  "type": "WORKFLOW",
                  "execution_id": "string",
                  "run_id": "string",
                  "external_id": "string",
                  "data": {
                    "id": "string",
                    "state": "INITIATED",
                    "ts": "2023-01-01T00:00:00Z",
                    "output": {
                      "type": "STRING",
                      "id": "string",
                      "name": "string",
                      "state": "INITIATED",
                      "node_id": "string",
                      "delta": "string",
                      "value": "string"
                    },
                    "error": {
                      "message": "string",
                      "code": "WORKFLOW_INITIALIZATION"
                    },
                    "outputs": [
                      {
                        "type": "STRING",
                        "id": "string",
                        "name": "string",
                        "value": "string"
                      }
                    ],
                    "inputs": [
                      {
                        "type": "STRING",
                        "id": "string",
                        "name": "string",
                        "value": "string"
                      }
                    ]
                  }
                },
                {
                  "type": "WORKFLOW",
                  "execution_id": "string",
                  "run_id": "string",
                  "external_id": "string",
                  "data": {
                    "id": "string",
                    "state": "INITIATED",
                    "ts": "2023-01-01T00:00:00Z",
                    "output": {
                      "type": "STRING",
                      "id": "string",
                      "name": "string",
                      "state": "INITIATED",
                      "node_id": "string",
                      "delta": "string",
                      "value": "string"
                    },
                    "error": {
                      "message": "string",
                      "code": "WORKFLOW_INITIALIZATION"
                    },
                    "outputs": [
                      {
                        "type": "STRING",
                        "id": "string",
                        "name": "string",
                        "value": "string"
                      }
                    ],
                    "inputs": [
                      {
                        "type": "STRING",
                        "id": "string",
                        "name": "string",
                        "value": "string"
                      }
                    ]
                  }
                }
              ]
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://predict.vellum.ai/v1/execute-workflow-stream \\\n     -H \"X_API_KEY: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n  \"inputs\": [\n    {\n      \"type\": \"STRING\",\n      \"name\": \"string\",\n      \"value\": \"string\"\n    }\n  ]\n}'",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from vellum import (\n    Vellum,\n    WorkflowExpandMetaRequest,\n    WorkflowRequestStringInputRequest,\n)\n\nclient = Vellum(\n    api_key=\"YOUR_API_KEY\",\n)\nresponse = client.execute_workflow_stream(\n    inputs=[\n        WorkflowRequestStringInputRequest(\n            name=\"string\",\n            value=\"string\",\n        )\n    ],\n    expand_meta=WorkflowExpandMetaRequest(\n        usage=True,\n    ),\n    workflow_deployment_id=\"string\",\n    workflow_deployment_name=\"string\",\n    release_tag=\"string\",\n    external_id=\"string\",\n    event_types=[\"NODE\"],\n    metadata={\"string\": {\"key\": \"value\"}},\n)\nfor chunk in response:\n    yield chunk\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { VellumClient } from \"vellum-ai\";\n\nconst client = new VellumClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.executeWorkflowStream({\n    inputs: [{\n            name: \"string\",\n            type: \"STRING\",\n            value: \"string\"\n        }],\n    expandMeta: {\n        usage: true\n    },\n    workflowDeploymentId: \"string\",\n    workflowDeploymentName: \"string\",\n    releaseTag: \"string\",\n    externalId: \"string\",\n    eventTypes: [\"NODE\"],\n    metadata: {\n        \"string\": {\n            \"key\": \"value\"\n        }\n    }\n});\n",
                  "generated": true
                }
              ],
              "go": [
                {
                  "language": "go",
                  "code": "import (\n\tcontext \"context\"\n\toption \"github.com/vellum-ai/vellum-client-go/option\"\n\tvellumclientgo \"github.com/vellum-ai/vellum-client-go\"\n\tvellumclientgoclient \"github.com/vellum-ai/vellum-client-go/client\"\n)\n\nclient := vellumclientgoclient.NewClient(\n\toption.WithApiKey(\n\t\t\"<YOUR_ApiKey>\",\n\t),\n)\nresponse, err := client.ExecuteWorkflowStream(\n\tcontext.TODO(),\n\t&vellumclientgo.ExecuteWorkflowStreamRequest{\n\t\tInputs: []*vellumclientgo.WorkflowRequestInputRequest{\n\t\t\t&vellumclientgo.WorkflowRequestInputRequest{\n\t\t\t\tWorkflowRequestStringInputRequest: &vellumclientgo.WorkflowRequestStringInputRequest{\n\t\t\t\t\tName:  \"string\",\n\t\t\t\t\tValue: \"string\",\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t\tExpandMeta: &vellumclientgo.WorkflowExpandMetaRequest{\n\t\t\tUsage: vellumclientgo.Bool(\n\t\t\t\ttrue,\n\t\t\t),\n\t\t},\n\t\tWorkflowDeploymentId: vellumclientgo.String(\n\t\t\t\"string\",\n\t\t),\n\t\tWorkflowDeploymentName: vellumclientgo.String(\n\t\t\t\"string\",\n\t\t),\n\t\tReleaseTag: vellumclientgo.String(\n\t\t\t\"string\",\n\t\t),\n\t\tExternalId: vellumclientgo.String(\n\t\t\t\"string\",\n\t\t),\n\t\tEventTypes: []vellumclientgo.WorkflowExecutionEventType{\n\t\t\tvellumclientgo.WorkflowExecutionEventTypeNode,\n\t\t},\n\t\tMetadata: map[string]interface{}{\n\t\t\t\"string\": map[string]interface{}{\n\t\t\t\t\"key\": \"value\",\n\t\t\t},\n\t\t},\n\t},\n)\n",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/v1/execute-workflow-stream",
            "responseStatusCode": 400,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {
                "inputs": [
                  {
                    "type": "STRING",
                    "name": "string",
                    "value": "string"
                  }
                ]
              }
            },
            "responseBody": {
              "type": "json",
              "value": {
                "string": {}
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://predict.vellum.ai/v1/execute-workflow-stream \\\n     -H \"X_API_KEY: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n  \"inputs\": [\n    {\n      \"type\": \"STRING\",\n      \"name\": \"string\",\n      \"value\": \"string\"\n    }\n  ]\n}'",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from vellum import (\n    Vellum,\n    WorkflowExpandMetaRequest,\n    WorkflowRequestStringInputRequest,\n)\n\nclient = Vellum(\n    api_key=\"YOUR_API_KEY\",\n)\nresponse = client.execute_workflow_stream(\n    inputs=[\n        WorkflowRequestStringInputRequest(\n            name=\"string\",\n            value=\"string\",\n        )\n    ],\n    expand_meta=WorkflowExpandMetaRequest(\n        usage=True,\n    ),\n    workflow_deployment_id=\"string\",\n    workflow_deployment_name=\"string\",\n    release_tag=\"string\",\n    external_id=\"string\",\n    event_types=[\"NODE\"],\n    metadata={\"string\": {\"key\": \"value\"}},\n)\nfor chunk in response:\n    yield chunk\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { VellumClient } from \"vellum-ai\";\n\nconst client = new VellumClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.executeWorkflowStream({\n    inputs: [{\n            name: \"string\",\n            type: \"STRING\",\n            value: \"string\"\n        }],\n    expandMeta: {\n        usage: true\n    },\n    workflowDeploymentId: \"string\",\n    workflowDeploymentName: \"string\",\n    releaseTag: \"string\",\n    externalId: \"string\",\n    eventTypes: [\"NODE\"],\n    metadata: {\n        \"string\": {\n            \"key\": \"value\"\n        }\n    }\n});\n",
                  "generated": true
                }
              ],
              "go": [
                {
                  "language": "go",
                  "code": "import (\n\tcontext \"context\"\n\toption \"github.com/vellum-ai/vellum-client-go/option\"\n\tvellumclientgo \"github.com/vellum-ai/vellum-client-go\"\n\tvellumclientgoclient \"github.com/vellum-ai/vellum-client-go/client\"\n)\n\nclient := vellumclientgoclient.NewClient(\n\toption.WithApiKey(\n\t\t\"<YOUR_ApiKey>\",\n\t),\n)\nresponse, err := client.ExecuteWorkflowStream(\n\tcontext.TODO(),\n\t&vellumclientgo.ExecuteWorkflowStreamRequest{\n\t\tInputs: []*vellumclientgo.WorkflowRequestInputRequest{\n\t\t\t&vellumclientgo.WorkflowRequestInputRequest{\n\t\t\t\tWorkflowRequestStringInputRequest: &vellumclientgo.WorkflowRequestStringInputRequest{\n\t\t\t\t\tName:  \"string\",\n\t\t\t\t\tValue: \"string\",\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t\tExpandMeta: &vellumclientgo.WorkflowExpandMetaRequest{\n\t\t\tUsage: vellumclientgo.Bool(\n\t\t\t\ttrue,\n\t\t\t),\n\t\t},\n\t\tWorkflowDeploymentId: vellumclientgo.String(\n\t\t\t\"string\",\n\t\t),\n\t\tWorkflowDeploymentName: vellumclientgo.String(\n\t\t\t\"string\",\n\t\t),\n\t\tReleaseTag: vellumclientgo.String(\n\t\t\t\"string\",\n\t\t),\n\t\tExternalId: vellumclientgo.String(\n\t\t\t\"string\",\n\t\t),\n\t\tEventTypes: []vellumclientgo.WorkflowExecutionEventType{\n\t\t\tvellumclientgo.WorkflowExecutionEventTypeNode,\n\t\t},\n\t\tMetadata: map[string]interface{}{\n\t\t\t\"string\": map[string]interface{}{\n\t\t\t\t\"key\": \"value\",\n\t\t\t},\n\t\t},\n\t},\n)\n",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/v1/execute-workflow-stream",
            "responseStatusCode": 404,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {
                "inputs": [
                  {
                    "type": "STRING",
                    "name": "string",
                    "value": "string"
                  }
                ]
              }
            },
            "responseBody": {
              "type": "json",
              "value": {
                "detail": "string"
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://predict.vellum.ai/v1/execute-workflow-stream \\\n     -H \"X_API_KEY: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n  \"inputs\": [\n    {\n      \"type\": \"STRING\",\n      \"name\": \"string\",\n      \"value\": \"string\"\n    }\n  ]\n}'",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from vellum import (\n    Vellum,\n    WorkflowExpandMetaRequest,\n    WorkflowRequestStringInputRequest,\n)\n\nclient = Vellum(\n    api_key=\"YOUR_API_KEY\",\n)\nresponse = client.execute_workflow_stream(\n    inputs=[\n        WorkflowRequestStringInputRequest(\n            name=\"string\",\n            value=\"string\",\n        )\n    ],\n    expand_meta=WorkflowExpandMetaRequest(\n        usage=True,\n    ),\n    workflow_deployment_id=\"string\",\n    workflow_deployment_name=\"string\",\n    release_tag=\"string\",\n    external_id=\"string\",\n    event_types=[\"NODE\"],\n    metadata={\"string\": {\"key\": \"value\"}},\n)\nfor chunk in response:\n    yield chunk\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { VellumClient } from \"vellum-ai\";\n\nconst client = new VellumClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.executeWorkflowStream({\n    inputs: [{\n            name: \"string\",\n            type: \"STRING\",\n            value: \"string\"\n        }],\n    expandMeta: {\n        usage: true\n    },\n    workflowDeploymentId: \"string\",\n    workflowDeploymentName: \"string\",\n    releaseTag: \"string\",\n    externalId: \"string\",\n    eventTypes: [\"NODE\"],\n    metadata: {\n        \"string\": {\n            \"key\": \"value\"\n        }\n    }\n});\n",
                  "generated": true
                }
              ],
              "go": [
                {
                  "language": "go",
                  "code": "import (\n\tcontext \"context\"\n\toption \"github.com/vellum-ai/vellum-client-go/option\"\n\tvellumclientgo \"github.com/vellum-ai/vellum-client-go\"\n\tvellumclientgoclient \"github.com/vellum-ai/vellum-client-go/client\"\n)\n\nclient := vellumclientgoclient.NewClient(\n\toption.WithApiKey(\n\t\t\"<YOUR_ApiKey>\",\n\t),\n)\nresponse, err := client.ExecuteWorkflowStream(\n\tcontext.TODO(),\n\t&vellumclientgo.ExecuteWorkflowStreamRequest{\n\t\tInputs: []*vellumclientgo.WorkflowRequestInputRequest{\n\t\t\t&vellumclientgo.WorkflowRequestInputRequest{\n\t\t\t\tWorkflowRequestStringInputRequest: &vellumclientgo.WorkflowRequestStringInputRequest{\n\t\t\t\t\tName:  \"string\",\n\t\t\t\t\tValue: \"string\",\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t\tExpandMeta: &vellumclientgo.WorkflowExpandMetaRequest{\n\t\t\tUsage: vellumclientgo.Bool(\n\t\t\t\ttrue,\n\t\t\t),\n\t\t},\n\t\tWorkflowDeploymentId: vellumclientgo.String(\n\t\t\t\"string\",\n\t\t),\n\t\tWorkflowDeploymentName: vellumclientgo.String(\n\t\t\t\"string\",\n\t\t),\n\t\tReleaseTag: vellumclientgo.String(\n\t\t\t\"string\",\n\t\t),\n\t\tExternalId: vellumclientgo.String(\n\t\t\t\"string\",\n\t\t),\n\t\tEventTypes: []vellumclientgo.WorkflowExecutionEventType{\n\t\t\tvellumclientgo.WorkflowExecutionEventTypeNode,\n\t\t},\n\t\tMetadata: map[string]interface{}{\n\t\t\t\"string\": map[string]interface{}{\n\t\t\t\t\"key\": \"value\",\n\t\t\t},\n\t\t},\n\t},\n)\n",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/v1/execute-workflow-stream",
            "responseStatusCode": 500,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {
                "inputs": [
                  {
                    "type": "STRING",
                    "name": "string",
                    "value": "string"
                  }
                ]
              }
            },
            "responseBody": {
              "type": "json",
              "value": {
                "detail": "string"
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://predict.vellum.ai/v1/execute-workflow-stream \\\n     -H \"X_API_KEY: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n  \"inputs\": [\n    {\n      \"type\": \"STRING\",\n      \"name\": \"string\",\n      \"value\": \"string\"\n    }\n  ]\n}'",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from vellum import (\n    Vellum,\n    WorkflowExpandMetaRequest,\n    WorkflowRequestStringInputRequest,\n)\n\nclient = Vellum(\n    api_key=\"YOUR_API_KEY\",\n)\nresponse = client.execute_workflow_stream(\n    inputs=[\n        WorkflowRequestStringInputRequest(\n            name=\"string\",\n            value=\"string\",\n        )\n    ],\n    expand_meta=WorkflowExpandMetaRequest(\n        usage=True,\n    ),\n    workflow_deployment_id=\"string\",\n    workflow_deployment_name=\"string\",\n    release_tag=\"string\",\n    external_id=\"string\",\n    event_types=[\"NODE\"],\n    metadata={\"string\": {\"key\": \"value\"}},\n)\nfor chunk in response:\n    yield chunk\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { VellumClient } from \"vellum-ai\";\n\nconst client = new VellumClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.executeWorkflowStream({\n    inputs: [{\n            name: \"string\",\n            type: \"STRING\",\n            value: \"string\"\n        }],\n    expandMeta: {\n        usage: true\n    },\n    workflowDeploymentId: \"string\",\n    workflowDeploymentName: \"string\",\n    releaseTag: \"string\",\n    externalId: \"string\",\n    eventTypes: [\"NODE\"],\n    metadata: {\n        \"string\": {\n            \"key\": \"value\"\n        }\n    }\n});\n",
                  "generated": true
                }
              ],
              "go": [
                {
                  "language": "go",
                  "code": "import (\n\tcontext \"context\"\n\toption \"github.com/vellum-ai/vellum-client-go/option\"\n\tvellumclientgo \"github.com/vellum-ai/vellum-client-go\"\n\tvellumclientgoclient \"github.com/vellum-ai/vellum-client-go/client\"\n)\n\nclient := vellumclientgoclient.NewClient(\n\toption.WithApiKey(\n\t\t\"<YOUR_ApiKey>\",\n\t),\n)\nresponse, err := client.ExecuteWorkflowStream(\n\tcontext.TODO(),\n\t&vellumclientgo.ExecuteWorkflowStreamRequest{\n\t\tInputs: []*vellumclientgo.WorkflowRequestInputRequest{\n\t\t\t&vellumclientgo.WorkflowRequestInputRequest{\n\t\t\t\tWorkflowRequestStringInputRequest: &vellumclientgo.WorkflowRequestStringInputRequest{\n\t\t\t\t\tName:  \"string\",\n\t\t\t\t\tValue: \"string\",\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t\tExpandMeta: &vellumclientgo.WorkflowExpandMetaRequest{\n\t\t\tUsage: vellumclientgo.Bool(\n\t\t\t\ttrue,\n\t\t\t),\n\t\t},\n\t\tWorkflowDeploymentId: vellumclientgo.String(\n\t\t\t\"string\",\n\t\t),\n\t\tWorkflowDeploymentName: vellumclientgo.String(\n\t\t\t\"string\",\n\t\t),\n\t\tReleaseTag: vellumclientgo.String(\n\t\t\t\"string\",\n\t\t),\n\t\tExternalId: vellumclientgo.String(\n\t\t\t\"string\",\n\t\t),\n\t\tEventTypes: []vellumclientgo.WorkflowExecutionEventType{\n\t\t\tvellumclientgo.WorkflowExecutionEventTypeNode,\n\t\t},\n\t\tMetadata: map[string]interface{}{\n\t\t\t\"string\": map[string]interface{}{\n\t\t\t\t\"key\": \"value\",\n\t\t\t},\n\t\t},\n\t},\n)\n",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "endpoint_.search": {
        "id": "endpoint_.search",
        "namespace": [],
        "displayName": "Search",
        "operationId": "search",
        "description": "Perform a search against a document index.",
        "availability": "GenerallyAvailable",
        "method": "POST",
        "path": [
          {
            "type": "literal",
            "value": "/v1/search"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Production",
        "environments": [
          {
            "id": "Production",
            "baseUrl": "https://predict.vellum.ai"
          }
        ],
        "requests": [
          {
            "contentType": "application/json",
            "body": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "index_id",
                  "valueShape": {
                    "type": "alias",
                    "value": {
                      "type": "optional",
                      "shape": {
                        "type": "alias",
                        "value": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "description": "The ID of the index to search against. Must provide either this or index_name."
                },
                {
                  "key": "index_name",
                  "valueShape": {
                    "type": "alias",
                    "value": {
                      "type": "optional",
                      "shape": {
                        "type": "alias",
                        "value": {
                          "type": "primitive",
                          "value": {
                            "type": "string",
                            "minLength": 1,
                            "maxLength": 1
                          }
                        }
                      }
                    }
                  },
                  "description": "The name of the index to search against. Must provide either this or index_id."
                },
                {
                  "key": "query",
                  "valueShape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 1
                      }
                    }
                  },
                  "description": "The query to search for."
                },
                {
                  "key": "options",
                  "valueShape": {
                    "type": "alias",
                    "value": {
                      "type": "optional",
                      "shape": {
                        "type": "alias",
                        "value": {
                          "type": "id",
                          "id": "type_:SearchRequestOptionsRequest"
                        }
                      }
                    }
                  },
                  "description": "Configuration options for the search."
                }
              ]
            }
          }
        ],
        "responses": [
          {
            "statusCode": 200,
            "body": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:SearchResponse"
              }
            }
          }
        ],
        "errors": [
          {
            "description": "",
            "name": "Bad Request",
            "statusCode": 400,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:SearchErrorResponse"
              }
            },
            "examples": []
          },
          {
            "description": "",
            "name": "Not Found",
            "statusCode": 404,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:SearchErrorResponse"
              }
            },
            "examples": []
          },
          {
            "description": "",
            "name": "Internal Server Error",
            "statusCode": 500,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:SearchErrorResponse"
              }
            },
            "examples": []
          }
        ],
        "examples": [
          {
            "path": "/v1/search",
            "responseStatusCode": 200,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {
                "query": "query"
              }
            },
            "responseBody": {
              "type": "json",
              "value": {
                "results": [
                  {
                    "text": "text",
                    "score": 1.1,
                    "keywords": [
                      "keywords"
                    ],
                    "document": {
                      "label": "label"
                    }
                  }
                ]
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://predict.vellum.ai/v1/search \\\n     -H \"X_API_KEY: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n  \"query\": \"query\"\n}'",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from vellum import Vellum\n\nclient = Vellum(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.search(\n    query=\"query\",\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { VellumClient } from \"vellum-ai\";\n\nconst client = new VellumClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.search({\n    query: \"query\"\n});\n",
                  "generated": true
                }
              ],
              "go": [
                {
                  "language": "go",
                  "code": "import (\n\tcontext \"context\"\n\toption \"github.com/vellum-ai/vellum-client-go/option\"\n\tvellumclientgo \"github.com/vellum-ai/vellum-client-go\"\n\tvellumclientgoclient \"github.com/vellum-ai/vellum-client-go/client\"\n)\n\nclient := vellumclientgoclient.NewClient(\n\toption.WithApiKey(\n\t\t\"<YOUR_ApiKey>\",\n\t),\n)\nresponse, err := client.Search(\n\tcontext.TODO(),\n\t&vellumclientgo.SearchRequestBodyRequest{\n\t\tQuery: \"query\",\n\t},\n)\n",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/v1/search",
            "responseStatusCode": 400,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {
                "query": "string"
              }
            },
            "responseBody": {
              "type": "json",
              "value": {
                "detail": "string"
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://predict.vellum.ai/v1/search \\\n     -H \"X_API_KEY: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n  \"query\": \"string\"\n}'",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from vellum import Vellum\n\nclient = Vellum(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.search(\n    query=\"query\",\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { VellumClient } from \"vellum-ai\";\n\nconst client = new VellumClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.search({\n    query: \"query\"\n});\n",
                  "generated": true
                }
              ],
              "go": [
                {
                  "language": "go",
                  "code": "import (\n\tcontext \"context\"\n\toption \"github.com/vellum-ai/vellum-client-go/option\"\n\tvellumclientgo \"github.com/vellum-ai/vellum-client-go\"\n\tvellumclientgoclient \"github.com/vellum-ai/vellum-client-go/client\"\n)\n\nclient := vellumclientgoclient.NewClient(\n\toption.WithApiKey(\n\t\t\"<YOUR_ApiKey>\",\n\t),\n)\nresponse, err := client.Search(\n\tcontext.TODO(),\n\t&vellumclientgo.SearchRequestBodyRequest{\n\t\tQuery: \"query\",\n\t},\n)\n",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/v1/search",
            "responseStatusCode": 404,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {
                "query": "string"
              }
            },
            "responseBody": {
              "type": "json",
              "value": {
                "detail": "string"
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://predict.vellum.ai/v1/search \\\n     -H \"X_API_KEY: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n  \"query\": \"string\"\n}'",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from vellum import Vellum\n\nclient = Vellum(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.search(\n    query=\"query\",\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { VellumClient } from \"vellum-ai\";\n\nconst client = new VellumClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.search({\n    query: \"query\"\n});\n",
                  "generated": true
                }
              ],
              "go": [
                {
                  "language": "go",
                  "code": "import (\n\tcontext \"context\"\n\toption \"github.com/vellum-ai/vellum-client-go/option\"\n\tvellumclientgo \"github.com/vellum-ai/vellum-client-go\"\n\tvellumclientgoclient \"github.com/vellum-ai/vellum-client-go/client\"\n)\n\nclient := vellumclientgoclient.NewClient(\n\toption.WithApiKey(\n\t\t\"<YOUR_ApiKey>\",\n\t),\n)\nresponse, err := client.Search(\n\tcontext.TODO(),\n\t&vellumclientgo.SearchRequestBodyRequest{\n\t\tQuery: \"query\",\n\t},\n)\n",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/v1/search",
            "responseStatusCode": 500,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {
                "query": "string"
              }
            },
            "responseBody": {
              "type": "json",
              "value": {
                "detail": "string"
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://predict.vellum.ai/v1/search \\\n     -H \"X_API_KEY: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n  \"query\": \"string\"\n}'",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from vellum import Vellum\n\nclient = Vellum(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.search(\n    query=\"query\",\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { VellumClient } from \"vellum-ai\";\n\nconst client = new VellumClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.search({\n    query: \"query\"\n});\n",
                  "generated": true
                }
              ],
              "go": [
                {
                  "language": "go",
                  "code": "import (\n\tcontext \"context\"\n\toption \"github.com/vellum-ai/vellum-client-go/option\"\n\tvellumclientgo \"github.com/vellum-ai/vellum-client-go\"\n\tvellumclientgoclient \"github.com/vellum-ai/vellum-client-go/client\"\n)\n\nclient := vellumclientgoclient.NewClient(\n\toption.WithApiKey(\n\t\t\"<YOUR_ApiKey>\",\n\t),\n)\nresponse, err := client.Search(\n\tcontext.TODO(),\n\t&vellumclientgo.SearchRequestBodyRequest{\n\t\tQuery: \"query\",\n\t},\n)\n",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "endpoint_.submit-completion-actuals": {
        "id": "endpoint_.submit-completion-actuals",
        "namespace": [],
        "displayName": "Submit Completion Actuals",
        "operationId": "submit-completion-actuals",
        "description": "Used to submit feedback regarding the quality of previously generated completions.",
        "availability": "GenerallyAvailable",
        "method": "POST",
        "path": [
          {
            "type": "literal",
            "value": "/v1/submit-completion-actuals"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Production",
        "environments": [
          {
            "id": "Production",
            "baseUrl": "https://predict.vellum.ai"
          }
        ],
        "requests": [
          {
            "contentType": "application/json",
            "body": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "deployment_id",
                  "valueShape": {
                    "type": "alias",
                    "value": {
                      "type": "optional",
                      "shape": {
                        "type": "alias",
                        "value": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "description": "The ID of the deployment. Must provide either this or deployment_name."
                },
                {
                  "key": "deployment_name",
                  "valueShape": {
                    "type": "alias",
                    "value": {
                      "type": "optional",
                      "shape": {
                        "type": "alias",
                        "value": {
                          "type": "primitive",
                          "value": {
                            "type": "string",
                            "minLength": 1,
                            "maxLength": 1
                          }
                        }
                      }
                    }
                  },
                  "description": "The name of the deployment. Must provide either this or deployment_id."
                },
                {
                  "key": "actuals",
                  "valueShape": {
                    "type": "alias",
                    "value": {
                      "type": "list",
                      "itemShape": {
                        "type": "alias",
                        "value": {
                          "type": "id",
                          "id": "type_:SubmitCompletionActualRequest"
                        }
                      }
                    }
                  },
                  "description": "Feedback regarding the quality of previously generated completions"
                }
              ]
            }
          }
        ],
        "responses": [],
        "errors": [
          {
            "description": "",
            "name": "Bad Request",
            "statusCode": 400,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:SubmitCompletionActualsErrorResponse"
              }
            },
            "examples": []
          },
          {
            "description": "",
            "name": "Not Found",
            "statusCode": 404,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:SubmitCompletionActualsErrorResponse"
              }
            },
            "examples": []
          },
          {
            "description": "",
            "name": "Internal Server Error",
            "statusCode": 500,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:SubmitCompletionActualsErrorResponse"
              }
            },
            "examples": []
          }
        ],
        "examples": [
          {
            "path": "/v1/submit-completion-actuals",
            "responseStatusCode": 204,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {
                "actuals": [
                  {}
                ]
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://predict.vellum.ai/v1/submit-completion-actuals \\\n     -H \"X_API_KEY: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n  \"actuals\": [\n    {}\n  ]\n}'",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from vellum import SubmitCompletionActualRequest, Vellum\n\nclient = Vellum(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.submit_completion_actuals(\n    actuals=[SubmitCompletionActualRequest()],\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { VellumClient } from \"vellum-ai\";\n\nconst client = new VellumClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.submitCompletionActuals({\n    actuals: [{}]\n});\n",
                  "generated": true
                }
              ],
              "go": [
                {
                  "language": "go",
                  "code": "import (\n\tcontext \"context\"\n\toption \"github.com/vellum-ai/vellum-client-go/option\"\n\tvellumclientgo \"github.com/vellum-ai/vellum-client-go\"\n\tvellumclientgoclient \"github.com/vellum-ai/vellum-client-go/client\"\n)\n\nclient := vellumclientgoclient.NewClient(\n\toption.WithApiKey(\n\t\t\"<YOUR_ApiKey>\",\n\t),\n)\nerr := client.SubmitCompletionActuals(\n\tcontext.TODO(),\n\t&vellumclientgo.SubmitCompletionActualsRequest{\n\t\tActuals: []*vellumclientgo.SubmitCompletionActualRequest{\n\t\t\t&vellumclientgo.SubmitCompletionActualRequest{},\n\t\t},\n\t},\n)\n",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/v1/submit-completion-actuals",
            "responseStatusCode": 400,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {
                "actuals": [
                  {}
                ]
              }
            },
            "responseBody": {
              "type": "json",
              "value": {
                "detail": "string"
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://predict.vellum.ai/v1/submit-completion-actuals \\\n     -H \"X_API_KEY: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n  \"actuals\": [\n    {}\n  ]\n}'",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from vellum import SubmitCompletionActualRequest, Vellum\n\nclient = Vellum(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.submit_completion_actuals(\n    actuals=[SubmitCompletionActualRequest()],\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { VellumClient } from \"vellum-ai\";\n\nconst client = new VellumClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.submitCompletionActuals({\n    actuals: [{}]\n});\n",
                  "generated": true
                }
              ],
              "go": [
                {
                  "language": "go",
                  "code": "import (\n\tcontext \"context\"\n\toption \"github.com/vellum-ai/vellum-client-go/option\"\n\tvellumclientgo \"github.com/vellum-ai/vellum-client-go\"\n\tvellumclientgoclient \"github.com/vellum-ai/vellum-client-go/client\"\n)\n\nclient := vellumclientgoclient.NewClient(\n\toption.WithApiKey(\n\t\t\"<YOUR_ApiKey>\",\n\t),\n)\nerr := client.SubmitCompletionActuals(\n\tcontext.TODO(),\n\t&vellumclientgo.SubmitCompletionActualsRequest{\n\t\tActuals: []*vellumclientgo.SubmitCompletionActualRequest{\n\t\t\t&vellumclientgo.SubmitCompletionActualRequest{},\n\t\t},\n\t},\n)\n",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/v1/submit-completion-actuals",
            "responseStatusCode": 404,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {
                "actuals": [
                  {}
                ]
              }
            },
            "responseBody": {
              "type": "json",
              "value": {
                "detail": "string"
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://predict.vellum.ai/v1/submit-completion-actuals \\\n     -H \"X_API_KEY: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n  \"actuals\": [\n    {}\n  ]\n}'",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from vellum import SubmitCompletionActualRequest, Vellum\n\nclient = Vellum(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.submit_completion_actuals(\n    actuals=[SubmitCompletionActualRequest()],\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { VellumClient } from \"vellum-ai\";\n\nconst client = new VellumClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.submitCompletionActuals({\n    actuals: [{}]\n});\n",
                  "generated": true
                }
              ],
              "go": [
                {
                  "language": "go",
                  "code": "import (\n\tcontext \"context\"\n\toption \"github.com/vellum-ai/vellum-client-go/option\"\n\tvellumclientgo \"github.com/vellum-ai/vellum-client-go\"\n\tvellumclientgoclient \"github.com/vellum-ai/vellum-client-go/client\"\n)\n\nclient := vellumclientgoclient.NewClient(\n\toption.WithApiKey(\n\t\t\"<YOUR_ApiKey>\",\n\t),\n)\nerr := client.SubmitCompletionActuals(\n\tcontext.TODO(),\n\t&vellumclientgo.SubmitCompletionActualsRequest{\n\t\tActuals: []*vellumclientgo.SubmitCompletionActualRequest{\n\t\t\t&vellumclientgo.SubmitCompletionActualRequest{},\n\t\t},\n\t},\n)\n",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/v1/submit-completion-actuals",
            "responseStatusCode": 500,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {
                "actuals": [
                  {}
                ]
              }
            },
            "responseBody": {
              "type": "json",
              "value": {
                "detail": "string"
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://predict.vellum.ai/v1/submit-completion-actuals \\\n     -H \"X_API_KEY: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n  \"actuals\": [\n    {}\n  ]\n}'",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from vellum import SubmitCompletionActualRequest, Vellum\n\nclient = Vellum(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.submit_completion_actuals(\n    actuals=[SubmitCompletionActualRequest()],\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { VellumClient } from \"vellum-ai\";\n\nconst client = new VellumClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.submitCompletionActuals({\n    actuals: [{}]\n});\n",
                  "generated": true
                }
              ],
              "go": [
                {
                  "language": "go",
                  "code": "import (\n\tcontext \"context\"\n\toption \"github.com/vellum-ai/vellum-client-go/option\"\n\tvellumclientgo \"github.com/vellum-ai/vellum-client-go\"\n\tvellumclientgoclient \"github.com/vellum-ai/vellum-client-go/client\"\n)\n\nclient := vellumclientgoclient.NewClient(\n\toption.WithApiKey(\n\t\t\"<YOUR_ApiKey>\",\n\t),\n)\nerr := client.SubmitCompletionActuals(\n\tcontext.TODO(),\n\t&vellumclientgo.SubmitCompletionActualsRequest{\n\t\tActuals: []*vellumclientgo.SubmitCompletionActualRequest{\n\t\t\t&vellumclientgo.SubmitCompletionActualRequest{},\n\t\t},\n\t},\n)\n",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "endpoint_.submit-workflow-execution-actuals": {
        "id": "endpoint_.submit-workflow-execution-actuals",
        "namespace": [],
        "displayName": "Submit Workflow Execution Actuals",
        "operationId": "submit-workflow-execution-actuals",
        "description": "    Used to submit feedback regarding the quality of previous workflow execution and its outputs.\n\n    **Note:** Uses a base url of `https://predict.vellum.ai`.",
        "availability": "GenerallyAvailable",
        "method": "POST",
        "path": [
          {
            "type": "literal",
            "value": "/v1/submit-workflow-execution-actuals"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Production",
        "environments": [
          {
            "id": "Production",
            "baseUrl": "https://predict.vellum.ai"
          }
        ],
        "requests": [
          {
            "contentType": "application/json",
            "body": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "actuals",
                  "valueShape": {
                    "type": "alias",
                    "value": {
                      "type": "list",
                      "itemShape": {
                        "type": "alias",
                        "value": {
                          "type": "id",
                          "id": "type_:SubmitWorkflowExecutionActualRequest"
                        }
                      }
                    }
                  },
                  "description": "Feedback regarding the quality of an output on a previously executed workflow."
                },
                {
                  "key": "execution_id",
                  "valueShape": {
                    "type": "alias",
                    "value": {
                      "type": "optional",
                      "shape": {
                        "type": "alias",
                        "value": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "description": "The Vellum-generated ID of a previously executed workflow. Must provide either this or external_id."
                },
                {
                  "key": "external_id",
                  "valueShape": {
                    "type": "alias",
                    "value": {
                      "type": "optional",
                      "shape": {
                        "type": "alias",
                        "value": {
                          "type": "primitive",
                          "value": {
                            "type": "string",
                            "minLength": 1,
                            "maxLength": 1
                          }
                        }
                      }
                    }
                  },
                  "description": "The external ID that was originally provided by when executing the workflow, if applicable, that you'd now like to submit actuals for. Must provide either this or execution_id."
                }
              ]
            }
          }
        ],
        "responses": [],
        "examples": [
          {
            "path": "/v1/submit-workflow-execution-actuals",
            "responseStatusCode": 204,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {
                "actuals": [
                  {
                    "output_type": "CHAT_HISTORY"
                  }
                ]
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://predict.vellum.ai/v1/submit-workflow-execution-actuals \\\n     -H \"X_API_KEY: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n  \"actuals\": [\n    {\n      \"output_type\": \"CHAT_HISTORY\"\n    }\n  ]\n}'",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from vellum import Vellum, WorkflowExecutionActualStringRequest\n\nclient = Vellum(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.submit_workflow_execution_actuals(\n    actuals=[WorkflowExecutionActualStringRequest()],\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { VellumClient } from \"vellum-ai\";\n\nconst client = new VellumClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.submitWorkflowExecutionActuals({\n    actuals: [{\n            outputType: \"STRING\"\n        }]\n});\n",
                  "generated": true
                }
              ],
              "go": [
                {
                  "language": "go",
                  "code": "import (\n\tcontext \"context\"\n\toption \"github.com/vellum-ai/vellum-client-go/option\"\n\tvellumclientgo \"github.com/vellum-ai/vellum-client-go\"\n\tvellumclientgoclient \"github.com/vellum-ai/vellum-client-go/client\"\n)\n\nclient := vellumclientgoclient.NewClient(\n\toption.WithApiKey(\n\t\t\"<YOUR_ApiKey>\",\n\t),\n)\nerr := client.SubmitWorkflowExecutionActuals(\n\tcontext.TODO(),\n\t&vellumclientgo.SubmitWorkflowExecutionActualsRequest{\n\t\tActuals: []*vellumclientgo.SubmitWorkflowExecutionActualRequest{\n\t\t\t&vellumclientgo.SubmitWorkflowExecutionActualRequest{\n\t\t\t\tWorkflowExecutionActualStringRequest: &vellumclientgo.WorkflowExecutionActualStringRequest{},\n\t\t\t},\n\t\t},\n\t},\n)\n",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "endpoint_deployments.list": {
        "id": "endpoint_deployments.list",
        "namespace": [
          "subpackage_deployments"
        ],
        "displayName": "List",
        "operationId": "list",
        "description": "Used to list all Prompt Deployments.",
        "availability": "Beta",
        "method": "GET",
        "path": [
          {
            "type": "literal",
            "value": "/v1/deployments"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Production",
        "environments": [
          {
            "id": "Production",
            "baseUrl": "https://api.vellum.ai"
          }
        ],
        "queryParameters": [
          {
            "key": "limit",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                }
              }
            },
            "description": "Number of results to return per page."
          },
          {
            "key": "offset",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                }
              }
            },
            "description": "The initial index from which to return the results."
          },
          {
            "key": "ordering",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "description": "Which field to use when ordering the results."
          },
          {
            "key": "status",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "id",
                    "id": "type_deployments:DeploymentsListRequestStatus"
                  }
                }
              }
            },
            "description": "status"
          }
        ],
        "requests": [],
        "responses": [
          {
            "statusCode": 200,
            "body": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:PaginatedSlimDeploymentReadList"
              }
            }
          }
        ],
        "examples": [
          {
            "path": "/v1/deployments",
            "responseStatusCode": 200,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "count": 123,
                "next": "http://api.example.org/accounts/?offset=400&limit=100",
                "previous": "http://api.example.org/accounts/?offset=200&limit=100",
                "results": [
                  {
                    "id": "id",
                    "created": "2024-01-15T09:30:00Z",
                    "label": "label",
                    "name": "name",
                    "last_deployed_on": "2024-01-15T09:30:00Z",
                    "input_variables": [
                      {
                        "id": "id",
                        "key": "key",
                        "type": "STRING"
                      }
                    ],
                    "status": "ACTIVE",
                    "environment": "DEVELOPMENT",
                    "description": "description"
                  }
                ]
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl https://api.vellum.ai/v1/deployments \\\n     -H \"X_API_KEY: <apiKey>\"",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from vellum import Vellum\n\nclient = Vellum(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.deployments.list()\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { VellumClient } from \"vellum-ai\";\n\nconst client = new VellumClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.deployments.list();\n",
                  "generated": true
                }
              ],
              "go": [
                {
                  "language": "go",
                  "code": "import (\n\tcontext \"context\"\n\toption \"github.com/vellum-ai/vellum-client-go/option\"\n\tvellumclientgo \"github.com/vellum-ai/vellum-client-go\"\n\tvellumclientgoclient \"github.com/vellum-ai/vellum-client-go/client\"\n)\n\nclient := vellumclientgoclient.NewClient(\n\toption.WithApiKey(\n\t\t\"<YOUR_ApiKey>\",\n\t),\n)\nresponse, err := client.Deployments.List(\n\tcontext.TODO(),\n\t&vellumclientgo.DeploymentsListRequest{},\n)\n",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "endpoint_deployments.retrieve": {
        "id": "endpoint_deployments.retrieve",
        "namespace": [
          "subpackage_deployments"
        ],
        "displayName": "Retrieve",
        "operationId": "retrieve",
        "description": "Used to retrieve a Prompt Deployment given its ID or name.",
        "availability": "Beta",
        "method": "GET",
        "path": [
          {
            "type": "literal",
            "value": "/v1/deployments/"
          },
          {
            "type": "pathParameter",
            "value": "id"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Production",
        "environments": [
          {
            "id": "Production",
            "baseUrl": "https://api.vellum.ai"
          }
        ],
        "pathParameters": [
          {
            "key": "id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "Either the Deployment's ID or its unique name"
          }
        ],
        "requests": [],
        "responses": [
          {
            "statusCode": 200,
            "body": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:DeploymentRead"
              }
            }
          }
        ],
        "examples": [
          {
            "path": "/v1/deployments/id",
            "responseStatusCode": 200,
            "pathParameters": {
              "id": "id"
            },
            "queryParameters": {},
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "id": "id",
                "created": "2024-01-15T09:30:00Z",
                "label": "label",
                "name": "name",
                "last_deployed_on": "2024-01-15T09:30:00Z",
                "input_variables": [
                  {
                    "id": "id",
                    "key": "key",
                    "type": "STRING",
                    "required": true,
                    "default": {
                      "type": "SEARCH_RESULTS"
                    }
                  }
                ],
                "last_deployed_history_item_id": "last_deployed_history_item_id",
                "active_model_version_ids": [
                  "active_model_version_ids"
                ],
                "status": "ACTIVE",
                "environment": "DEVELOPMENT",
                "description": "description"
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl https://api.vellum.ai/v1/deployments/id \\\n     -H \"X_API_KEY: <apiKey>\"",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from vellum import Vellum\n\nclient = Vellum(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.deployments.retrieve(\n    id=\"id\",\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { VellumClient } from \"vellum-ai\";\n\nconst client = new VellumClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.deployments.retrieve(\"id\");\n",
                  "generated": true
                }
              ],
              "go": [
                {
                  "language": "go",
                  "code": "import (\n\tcontext \"context\"\n\toption \"github.com/vellum-ai/vellum-client-go/option\"\n\tvellumclientgoclient \"github.com/vellum-ai/vellum-client-go/client\"\n)\n\nclient := vellumclientgoclient.NewClient(\n\toption.WithApiKey(\n\t\t\"<YOUR_ApiKey>\",\n\t),\n)\nresponse, err := client.Deployments.Retrieve(\n\tcontext.TODO(),\n\t\"id\",\n)\n",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "endpoint_deployments.retrieve_deployment_release_tag": {
        "id": "endpoint_deployments.retrieve_deployment_release_tag",
        "namespace": [
          "subpackage_deployments"
        ],
        "displayName": "Retrieve Deployment Release Tag",
        "operationId": "retrieve-deployment-release-tag",
        "description": "Retrieve a Deployment Release Tag by tag name, associated with a specified Deployment.",
        "availability": "Beta",
        "method": "GET",
        "path": [
          {
            "type": "literal",
            "value": "/v1/deployments/"
          },
          {
            "type": "pathParameter",
            "value": "id"
          },
          {
            "type": "literal",
            "value": "/release-tags/"
          },
          {
            "type": "pathParameter",
            "value": "name"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Production",
        "environments": [
          {
            "id": "Production",
            "baseUrl": "https://api.vellum.ai"
          }
        ],
        "pathParameters": [
          {
            "key": "id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "A UUID string identifying this deployment."
          },
          {
            "key": "name",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "The name of the Release Tag associated with this Deployment that you'd like to retrieve."
          }
        ],
        "requests": [],
        "responses": [
          {
            "statusCode": 200,
            "body": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:DeploymentReleaseTagRead"
              }
            }
          }
        ],
        "examples": [
          {
            "path": "/v1/deployments/id/release-tags/name",
            "responseStatusCode": 200,
            "pathParameters": {
              "id": "id",
              "name": "name"
            },
            "queryParameters": {},
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "name": "name",
                "source": "SYSTEM",
                "history_item": {
                  "id": "id",
                  "timestamp": "2024-01-15T09:30:00Z"
                }
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl https://api.vellum.ai/v1/deployments/id/release-tags/name \\\n     -H \"X_API_KEY: <apiKey>\"",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from vellum import Vellum\n\nclient = Vellum(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.deployments.retrieve_deployment_release_tag(\n    id=\"id\",\n    name=\"name\",\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { VellumClient } from \"vellum-ai\";\n\nconst client = new VellumClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.deployments.retrieveDeploymentReleaseTag(\"id\", \"name\");\n",
                  "generated": true
                }
              ],
              "go": [
                {
                  "language": "go",
                  "code": "import (\n\tcontext \"context\"\n\toption \"github.com/vellum-ai/vellum-client-go/option\"\n\tvellumclientgoclient \"github.com/vellum-ai/vellum-client-go/client\"\n)\n\nclient := vellumclientgoclient.NewClient(\n\toption.WithApiKey(\n\t\t\"<YOUR_ApiKey>\",\n\t),\n)\nresponse, err := client.Deployments.RetrieveDeploymentReleaseTag(\n\tcontext.TODO(),\n\t\"id\",\n\t\"name\",\n)\n",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "endpoint_deployments.update_deployment_release_tag": {
        "id": "endpoint_deployments.update_deployment_release_tag",
        "namespace": [
          "subpackage_deployments"
        ],
        "displayName": "Update Deployment Release Tag",
        "operationId": "update-deployment-release-tag",
        "description": "Updates an existing Release Tag associated with the specified Deployment.",
        "availability": "Beta",
        "method": "PATCH",
        "path": [
          {
            "type": "literal",
            "value": "/v1/deployments/"
          },
          {
            "type": "pathParameter",
            "value": "id"
          },
          {
            "type": "literal",
            "value": "/release-tags/"
          },
          {
            "type": "pathParameter",
            "value": "name"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Production",
        "environments": [
          {
            "id": "Production",
            "baseUrl": "https://api.vellum.ai"
          }
        ],
        "pathParameters": [
          {
            "key": "id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "A UUID string identifying this deployment."
          },
          {
            "key": "name",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "The name of the Release Tag associated with this Deployment that you'd like to update."
          }
        ],
        "requests": [
          {
            "contentType": "application/json",
            "body": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "history_item_id",
                  "valueShape": {
                    "type": "alias",
                    "value": {
                      "type": "optional",
                      "shape": {
                        "type": "alias",
                        "value": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "description": "The ID of the Deployment History Item to tag"
                }
              ]
            }
          }
        ],
        "responses": [
          {
            "statusCode": 200,
            "body": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:DeploymentReleaseTagRead"
              }
            }
          }
        ],
        "examples": [
          {
            "path": "/v1/deployments/id/release-tags/name",
            "responseStatusCode": 200,
            "pathParameters": {
              "id": "id",
              "name": "name"
            },
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {}
            },
            "responseBody": {
              "type": "json",
              "value": {
                "name": "name",
                "source": "SYSTEM",
                "history_item": {
                  "id": "id",
                  "timestamp": "2024-01-15T09:30:00Z"
                }
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X PATCH https://api.vellum.ai/v1/deployments/id/release-tags/name \\\n     -H \"X_API_KEY: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{}'",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from vellum import Vellum\n\nclient = Vellum(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.deployments.update_deployment_release_tag(\n    id=\"id\",\n    name=\"name\",\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { VellumClient } from \"vellum-ai\";\n\nconst client = new VellumClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.deployments.updateDeploymentReleaseTag(\"id\", \"name\");\n",
                  "generated": true
                }
              ],
              "go": [
                {
                  "language": "go",
                  "code": "import (\n\tcontext \"context\"\n\toption \"github.com/vellum-ai/vellum-client-go/option\"\n\tvellumclientgo \"github.com/vellum-ai/vellum-client-go\"\n\tvellumclientgoclient \"github.com/vellum-ai/vellum-client-go/client\"\n)\n\nclient := vellumclientgoclient.NewClient(\n\toption.WithApiKey(\n\t\t\"<YOUR_ApiKey>\",\n\t),\n)\nresponse, err := client.Deployments.UpdateDeploymentReleaseTag(\n\tcontext.TODO(),\n\t\"id\",\n\t\"name\",\n\t&vellumclientgo.PatchedDeploymentReleaseTagUpdateRequest{},\n)\n",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "endpoint_deployments.retrieve_provider_payload": {
        "id": "endpoint_deployments.retrieve_provider_payload",
        "namespace": [
          "subpackage_deployments"
        ],
        "displayName": "Retrieve Provider Payload",
        "operationId": "retrieve-provider-payload",
        "description": "Given a set of input variable values, compile the exact payload that Vellum would send to the configured model provider\nfor execution if the execute-prompt endpoint had been invoked. Note that this endpoint does not actually execute the\nprompt or make an API call to the model provider.\n\nThis endpoint is useful if you don't want to proxy LLM provider requests through Vellum and prefer to send them directly\nto the provider yourself. Note that no guarantees are made on the format of this API's response schema, other than\nthat it will be a valid payload for the configured model provider. It's not recommended that you try to parse or\nderive meaning from the response body and instead, should simply pass it directly to the model provider as is.\n\nWe encourage you to seek advise from Vellum Support before integrating with this API for production use.",
        "availability": "Beta",
        "method": "POST",
        "path": [
          {
            "type": "literal",
            "value": "/v1/deployments/provider-payload"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Production",
        "environments": [
          {
            "id": "Production",
            "baseUrl": "https://api.vellum.ai"
          }
        ],
        "requests": [
          {
            "contentType": "application/json",
            "body": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "deployment_id",
                  "valueShape": {
                    "type": "alias",
                    "value": {
                      "type": "optional",
                      "shape": {
                        "type": "alias",
                        "value": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "description": "The ID of the deployment. Must provide either this or deployment_name."
                },
                {
                  "key": "deployment_name",
                  "valueShape": {
                    "type": "alias",
                    "value": {
                      "type": "optional",
                      "shape": {
                        "type": "alias",
                        "value": {
                          "type": "primitive",
                          "value": {
                            "type": "string",
                            "minLength": 1,
                            "maxLength": 1
                          }
                        }
                      }
                    }
                  },
                  "description": "The name of the deployment. Must provide either this or deployment_id."
                },
                {
                  "key": "inputs",
                  "valueShape": {
                    "type": "alias",
                    "value": {
                      "type": "list",
                      "itemShape": {
                        "type": "alias",
                        "value": {
                          "type": "id",
                          "id": "type_:PromptDeploymentInputRequest"
                        }
                      }
                    }
                  },
                  "description": "The list of inputs defined in the Prompt's deployment with their corresponding values."
                },
                {
                  "key": "release_tag",
                  "valueShape": {
                    "type": "alias",
                    "value": {
                      "type": "optional",
                      "shape": {
                        "type": "alias",
                        "value": {
                          "type": "primitive",
                          "value": {
                            "type": "string",
                            "minLength": 1,
                            "maxLength": 1
                          }
                        }
                      }
                    }
                  },
                  "description": "Optionally specify a release tag if you want to pin to a specific release of the Workflow Deployment"
                },
                {
                  "key": "expand_meta",
                  "valueShape": {
                    "type": "alias",
                    "value": {
                      "type": "optional",
                      "shape": {
                        "type": "alias",
                        "value": {
                          "type": "id",
                          "id": "type_:CompilePromptDeploymentExpandMetaRequest"
                        }
                      }
                    }
                  }
                }
              ]
            }
          }
        ],
        "responses": [
          {
            "statusCode": 200,
            "body": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:DeploymentProviderPayloadResponse"
              }
            }
          }
        ],
        "errors": [
          {
            "description": "",
            "name": "Bad Request",
            "statusCode": 400,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:ExecutePromptApiErrorResponse"
              }
            },
            "examples": []
          },
          {
            "description": "",
            "name": "Forbidden",
            "statusCode": 403,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:ExecutePromptApiErrorResponse"
              }
            },
            "examples": []
          },
          {
            "description": "",
            "name": "Not Found",
            "statusCode": 404,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:ExecutePromptApiErrorResponse"
              }
            },
            "examples": []
          },
          {
            "description": "",
            "name": "Internal Server Error",
            "statusCode": 500,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:ExecutePromptApiErrorResponse"
              }
            },
            "examples": []
          }
        ],
        "examples": [
          {
            "path": "/v1/deployments/provider-payload",
            "responseStatusCode": 200,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {
                "inputs": [
                  {
                    "type": "CHAT_HISTORY",
                    "name": "inputs",
                    "value": [
                      {
                        "role": "SYSTEM"
                      }
                    ]
                  }
                ]
              }
            },
            "responseBody": {
              "type": "json",
              "value": {
                "payload": {
                  "key": "value"
                },
                "meta": {
                  "model_name": "model_name",
                  "deployment_release_tag": "deployment_release_tag",
                  "prompt_version_id": "prompt_version_id"
                }
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://api.vellum.ai/v1/deployments/provider-payload \\\n     -H \"X_API_KEY: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n  \"inputs\": [\n    {\n      \"type\": \"CHAT_HISTORY\",\n      \"name\": \"inputs\",\n      \"value\": [\n        {\n          \"role\": \"SYSTEM\"\n        }\n      ]\n    }\n  ]\n}'",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from vellum import StringInputRequest, Vellum\n\nclient = Vellum(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.deployments.retrieve_provider_payload(\n    inputs=[\n        StringInputRequest(\n            name=\"name\",\n            value=\"value\",\n        )\n    ],\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { VellumClient } from \"vellum-ai\";\n\nconst client = new VellumClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.deployments.retrieveProviderPayload({\n    inputs: [{\n            name: \"name\",\n            type: \"STRING\",\n            value: \"value\"\n        }]\n});\n",
                  "generated": true
                }
              ],
              "go": [
                {
                  "language": "go",
                  "code": "import (\n\tcontext \"context\"\n\toption \"github.com/vellum-ai/vellum-client-go/option\"\n\tvellumclientgo \"github.com/vellum-ai/vellum-client-go\"\n\tvellumclientgoclient \"github.com/vellum-ai/vellum-client-go/client\"\n)\n\nclient := vellumclientgoclient.NewClient(\n\toption.WithApiKey(\n\t\t\"<YOUR_ApiKey>\",\n\t),\n)\nresponse, err := client.Deployments.RetrieveProviderPayload(\n\tcontext.TODO(),\n\t&vellumclientgo.DeploymentProviderPayloadRequest{\n\t\tInputs: []*vellumclientgo.PromptDeploymentInputRequest{\n\t\t\t&vellumclientgo.PromptDeploymentInputRequest{\n\t\t\t\tStringInputRequest: &vellumclientgo.StringInputRequest{\n\t\t\t\t\tName:  \"name\",\n\t\t\t\t\tValue: \"value\",\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t},\n)\n",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/v1/deployments/provider-payload",
            "responseStatusCode": 400,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {
                "inputs": [
                  {
                    "type": "STRING",
                    "name": "string",
                    "value": "string"
                  }
                ]
              }
            },
            "responseBody": {
              "type": "json",
              "value": {
                "detail": "string"
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://api.vellum.ai/v1/deployments/provider-payload \\\n     -H \"X_API_KEY: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n  \"inputs\": [\n    {\n      \"type\": \"STRING\",\n      \"name\": \"string\",\n      \"value\": \"string\"\n    }\n  ]\n}'",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from vellum import StringInputRequest, Vellum\n\nclient = Vellum(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.deployments.retrieve_provider_payload(\n    inputs=[\n        StringInputRequest(\n            name=\"name\",\n            value=\"value\",\n        )\n    ],\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { VellumClient } from \"vellum-ai\";\n\nconst client = new VellumClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.deployments.retrieveProviderPayload({\n    inputs: [{\n            name: \"name\",\n            type: \"STRING\",\n            value: \"value\"\n        }]\n});\n",
                  "generated": true
                }
              ],
              "go": [
                {
                  "language": "go",
                  "code": "import (\n\tcontext \"context\"\n\toption \"github.com/vellum-ai/vellum-client-go/option\"\n\tvellumclientgo \"github.com/vellum-ai/vellum-client-go\"\n\tvellumclientgoclient \"github.com/vellum-ai/vellum-client-go/client\"\n)\n\nclient := vellumclientgoclient.NewClient(\n\toption.WithApiKey(\n\t\t\"<YOUR_ApiKey>\",\n\t),\n)\nresponse, err := client.Deployments.RetrieveProviderPayload(\n\tcontext.TODO(),\n\t&vellumclientgo.DeploymentProviderPayloadRequest{\n\t\tInputs: []*vellumclientgo.PromptDeploymentInputRequest{\n\t\t\t&vellumclientgo.PromptDeploymentInputRequest{\n\t\t\t\tStringInputRequest: &vellumclientgo.StringInputRequest{\n\t\t\t\t\tName:  \"name\",\n\t\t\t\t\tValue: \"value\",\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t},\n)\n",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/v1/deployments/provider-payload",
            "responseStatusCode": 403,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {
                "inputs": [
                  {
                    "type": "STRING",
                    "name": "string",
                    "value": "string"
                  }
                ]
              }
            },
            "responseBody": {
              "type": "json",
              "value": {
                "detail": "string"
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://api.vellum.ai/v1/deployments/provider-payload \\\n     -H \"X_API_KEY: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n  \"inputs\": [\n    {\n      \"type\": \"STRING\",\n      \"name\": \"string\",\n      \"value\": \"string\"\n    }\n  ]\n}'",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from vellum import StringInputRequest, Vellum\n\nclient = Vellum(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.deployments.retrieve_provider_payload(\n    inputs=[\n        StringInputRequest(\n            name=\"name\",\n            value=\"value\",\n        )\n    ],\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { VellumClient } from \"vellum-ai\";\n\nconst client = new VellumClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.deployments.retrieveProviderPayload({\n    inputs: [{\n            name: \"name\",\n            type: \"STRING\",\n            value: \"value\"\n        }]\n});\n",
                  "generated": true
                }
              ],
              "go": [
                {
                  "language": "go",
                  "code": "import (\n\tcontext \"context\"\n\toption \"github.com/vellum-ai/vellum-client-go/option\"\n\tvellumclientgo \"github.com/vellum-ai/vellum-client-go\"\n\tvellumclientgoclient \"github.com/vellum-ai/vellum-client-go/client\"\n)\n\nclient := vellumclientgoclient.NewClient(\n\toption.WithApiKey(\n\t\t\"<YOUR_ApiKey>\",\n\t),\n)\nresponse, err := client.Deployments.RetrieveProviderPayload(\n\tcontext.TODO(),\n\t&vellumclientgo.DeploymentProviderPayloadRequest{\n\t\tInputs: []*vellumclientgo.PromptDeploymentInputRequest{\n\t\t\t&vellumclientgo.PromptDeploymentInputRequest{\n\t\t\t\tStringInputRequest: &vellumclientgo.StringInputRequest{\n\t\t\t\t\tName:  \"name\",\n\t\t\t\t\tValue: \"value\",\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t},\n)\n",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/v1/deployments/provider-payload",
            "responseStatusCode": 404,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {
                "inputs": [
                  {
                    "type": "STRING",
                    "name": "string",
                    "value": "string"
                  }
                ]
              }
            },
            "responseBody": {
              "type": "json",
              "value": {
                "detail": "string"
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://api.vellum.ai/v1/deployments/provider-payload \\\n     -H \"X_API_KEY: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n  \"inputs\": [\n    {\n      \"type\": \"STRING\",\n      \"name\": \"string\",\n      \"value\": \"string\"\n    }\n  ]\n}'",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from vellum import StringInputRequest, Vellum\n\nclient = Vellum(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.deployments.retrieve_provider_payload(\n    inputs=[\n        StringInputRequest(\n            name=\"name\",\n            value=\"value\",\n        )\n    ],\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { VellumClient } from \"vellum-ai\";\n\nconst client = new VellumClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.deployments.retrieveProviderPayload({\n    inputs: [{\n            name: \"name\",\n            type: \"STRING\",\n            value: \"value\"\n        }]\n});\n",
                  "generated": true
                }
              ],
              "go": [
                {
                  "language": "go",
                  "code": "import (\n\tcontext \"context\"\n\toption \"github.com/vellum-ai/vellum-client-go/option\"\n\tvellumclientgo \"github.com/vellum-ai/vellum-client-go\"\n\tvellumclientgoclient \"github.com/vellum-ai/vellum-client-go/client\"\n)\n\nclient := vellumclientgoclient.NewClient(\n\toption.WithApiKey(\n\t\t\"<YOUR_ApiKey>\",\n\t),\n)\nresponse, err := client.Deployments.RetrieveProviderPayload(\n\tcontext.TODO(),\n\t&vellumclientgo.DeploymentProviderPayloadRequest{\n\t\tInputs: []*vellumclientgo.PromptDeploymentInputRequest{\n\t\t\t&vellumclientgo.PromptDeploymentInputRequest{\n\t\t\t\tStringInputRequest: &vellumclientgo.StringInputRequest{\n\t\t\t\t\tName:  \"name\",\n\t\t\t\t\tValue: \"value\",\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t},\n)\n",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/v1/deployments/provider-payload",
            "responseStatusCode": 500,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {
                "inputs": [
                  {
                    "type": "STRING",
                    "name": "string",
                    "value": "string"
                  }
                ]
              }
            },
            "responseBody": {
              "type": "json",
              "value": {
                "detail": "string"
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://api.vellum.ai/v1/deployments/provider-payload \\\n     -H \"X_API_KEY: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n  \"inputs\": [\n    {\n      \"type\": \"STRING\",\n      \"name\": \"string\",\n      \"value\": \"string\"\n    }\n  ]\n}'",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from vellum import StringInputRequest, Vellum\n\nclient = Vellum(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.deployments.retrieve_provider_payload(\n    inputs=[\n        StringInputRequest(\n            name=\"name\",\n            value=\"value\",\n        )\n    ],\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { VellumClient } from \"vellum-ai\";\n\nconst client = new VellumClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.deployments.retrieveProviderPayload({\n    inputs: [{\n            name: \"name\",\n            type: \"STRING\",\n            value: \"value\"\n        }]\n});\n",
                  "generated": true
                }
              ],
              "go": [
                {
                  "language": "go",
                  "code": "import (\n\tcontext \"context\"\n\toption \"github.com/vellum-ai/vellum-client-go/option\"\n\tvellumclientgo \"github.com/vellum-ai/vellum-client-go\"\n\tvellumclientgoclient \"github.com/vellum-ai/vellum-client-go/client\"\n)\n\nclient := vellumclientgoclient.NewClient(\n\toption.WithApiKey(\n\t\t\"<YOUR_ApiKey>\",\n\t),\n)\nresponse, err := client.Deployments.RetrieveProviderPayload(\n\tcontext.TODO(),\n\t&vellumclientgo.DeploymentProviderPayloadRequest{\n\t\tInputs: []*vellumclientgo.PromptDeploymentInputRequest{\n\t\t\t&vellumclientgo.PromptDeploymentInputRequest{\n\t\t\t\tStringInputRequest: &vellumclientgo.StringInputRequest{\n\t\t\t\t\tName:  \"name\",\n\t\t\t\t\tValue: \"value\",\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t},\n)\n",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "endpoint_documentIndexes.list": {
        "id": "endpoint_documentIndexes.list",
        "namespace": [
          "subpackage_documentIndexes"
        ],
        "displayName": "List",
        "operationId": "list",
        "description": "Used to retrieve a list of Document Indexes.",
        "availability": "Beta",
        "method": "GET",
        "path": [
          {
            "type": "literal",
            "value": "/v1/document-indexes"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Production",
        "environments": [
          {
            "id": "Production",
            "baseUrl": "https://api.vellum.ai"
          }
        ],
        "queryParameters": [
          {
            "key": "limit",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                }
              }
            },
            "description": "Number of results to return per page."
          },
          {
            "key": "offset",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                }
              }
            },
            "description": "The initial index from which to return the results."
          },
          {
            "key": "ordering",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "description": "Which field to use when ordering the results."
          },
          {
            "key": "search",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "description": "Search for document indices by name or label"
          },
          {
            "key": "status",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "id",
                    "id": "type_documentIndexes:DocumentIndexesListRequestStatus"
                  }
                }
              }
            },
            "description": "Filter down to only document indices that have a status matching the status specified\n\n- `ACTIVE` - Active\n- `ARCHIVED` - Archived"
          }
        ],
        "requests": [],
        "responses": [
          {
            "statusCode": 200,
            "body": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:PaginatedDocumentIndexReadList"
              }
            }
          }
        ],
        "examples": [
          {
            "path": "/v1/document-indexes",
            "responseStatusCode": 200,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "count": 123,
                "next": "http://api.example.org/accounts/?offset=400&limit=100",
                "previous": "http://api.example.org/accounts/?offset=200&limit=100",
                "results": [
                  {
                    "id": "id",
                    "created": "2024-01-15T09:30:00Z",
                    "label": "label",
                    "name": "name",
                    "indexing_config": {
                      "vectorizer": {
                        "model_name": "text-multilingual-embedding-002",
                        "config": {
                          "project_id": "project_id",
                          "region": "region"
                        }
                      }
                    },
                    "status": "ACTIVE",
                    "environment": "DEVELOPMENT"
                  }
                ]
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl https://api.vellum.ai/v1/document-indexes \\\n     -H \"X_API_KEY: <apiKey>\"",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from vellum import Vellum\n\nclient = Vellum(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.document_indexes.list()\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { VellumClient } from \"vellum-ai\";\n\nconst client = new VellumClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.documentIndexes.list();\n",
                  "generated": true
                }
              ],
              "go": [
                {
                  "language": "go",
                  "code": "import (\n\tcontext \"context\"\n\toption \"github.com/vellum-ai/vellum-client-go/option\"\n\tvellumclientgo \"github.com/vellum-ai/vellum-client-go\"\n\tvellumclientgoclient \"github.com/vellum-ai/vellum-client-go/client\"\n)\n\nclient := vellumclientgoclient.NewClient(\n\toption.WithApiKey(\n\t\t\"<YOUR_ApiKey>\",\n\t),\n)\nresponse, err := client.DocumentIndexes.List(\n\tcontext.TODO(),\n\t&vellumclientgo.DocumentIndexesListRequest{},\n)\n",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "endpoint_documentIndexes.create": {
        "id": "endpoint_documentIndexes.create",
        "namespace": [
          "subpackage_documentIndexes"
        ],
        "displayName": "Create",
        "operationId": "create",
        "description": "Creates a new document index.",
        "availability": "Beta",
        "method": "POST",
        "path": [
          {
            "type": "literal",
            "value": "/v1/document-indexes"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Production",
        "environments": [
          {
            "id": "Production",
            "baseUrl": "https://api.vellum.ai"
          }
        ],
        "requests": [
          {
            "contentType": "application/json",
            "body": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "label",
                  "valueShape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 1
                      }
                    }
                  },
                  "description": "A human-readable label for the document index"
                },
                {
                  "key": "name",
                  "valueShape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 1
                      }
                    }
                  },
                  "description": "A name that uniquely identifies this index within its workspace"
                },
                {
                  "key": "status",
                  "valueShape": {
                    "type": "alias",
                    "value": {
                      "type": "optional",
                      "shape": {
                        "type": "alias",
                        "value": {
                          "type": "id",
                          "id": "type_:EntityStatus"
                        }
                      }
                    }
                  },
                  "description": "The current status of the document index\n\n* `ACTIVE` - Active\n* `ARCHIVED` - Archived"
                },
                {
                  "key": "environment",
                  "valueShape": {
                    "type": "alias",
                    "value": {
                      "type": "optional",
                      "shape": {
                        "type": "alias",
                        "value": {
                          "type": "id",
                          "id": "type_:EnvironmentEnum"
                        }
                      }
                    }
                  },
                  "description": "The environment this document index is used in\n\n* `DEVELOPMENT` - Development\n* `STAGING` - Staging\n* `PRODUCTION` - Production"
                },
                {
                  "key": "indexing_config",
                  "valueShape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:DocumentIndexIndexingConfigRequest"
                    }
                  }
                },
                {
                  "key": "copy_documents_from_index_id",
                  "valueShape": {
                    "type": "alias",
                    "value": {
                      "type": "optional",
                      "shape": {
                        "type": "alias",
                        "value": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "description": "Optionally specify the id of a document index from which you'd like to copy and re-index its documents into this newly created index"
                }
              ]
            }
          }
        ],
        "responses": [
          {
            "statusCode": 200,
            "body": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:DocumentIndexRead"
              }
            }
          }
        ],
        "examples": [
          {
            "path": "/v1/document-indexes",
            "responseStatusCode": 200,
            "name": "Index Using Instructor Model",
            "pathParameters": {},
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {
                "label": "My Document Index",
                "name": "my-document-index",
                "indexing_config": {
                  "vectorizer": {
                    "model_name": "text-multilingual-embedding-002",
                    "config": {
                      "project_id": "project_id",
                      "region": "region"
                    }
                  },
                  "chunking": {
                    "chunker_name": "token-overlapping-window-chunker"
                  }
                }
              }
            },
            "responseBody": {
              "type": "json",
              "value": {
                "id": "id",
                "created": "2024-01-15T09:30:00Z",
                "label": "label",
                "name": "name",
                "indexing_config": {
                  "vectorizer": {
                    "model_name": "text-multilingual-embedding-002",
                    "config": {
                      "project_id": "project_id",
                      "region": "region"
                    }
                  },
                  "chunking": {
                    "chunker_name": "token-overlapping-window-chunker"
                  }
                },
                "status": "ACTIVE",
                "environment": "DEVELOPMENT"
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://api.vellum.ai/v1/document-indexes \\\n     -H \"X_API_KEY: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n  \"label\": \"My Document Index\",\n  \"name\": \"my-document-index\",\n  \"indexing_config\": {\n    \"vectorizer\": {\n      \"model_name\": \"text-multilingual-embedding-002\",\n      \"config\": {\n        \"project_id\": \"project_id\",\n        \"region\": \"region\"\n      }\n    },\n    \"chunking\": {\n      \"chunker_name\": \"token-overlapping-window-chunker\"\n    }\n  }\n}'",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from vellum import (\n    DocumentIndexIndexingConfigRequest,\n    HkunlpInstructorXlVectorizerRequest,\n    InstructorVectorizerConfigRequest,\n    SentenceChunkerConfigRequest,\n    SentenceChunkingRequest,\n    Vellum,\n)\n\nclient = Vellum(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.document_indexes.create(\n    label=\"My Document Index\",\n    name=\"my-document-index\",\n    indexing_config=DocumentIndexIndexingConfigRequest(\n        vectorizer=HkunlpInstructorXlVectorizerRequest(\n            config=InstructorVectorizerConfigRequest(\n                instruction_domain=\"\",\n                instruction_query_text_type=\"plain_text\",\n                instruction_document_text_type=\"plain_text\",\n            ),\n        ),\n        chunking=SentenceChunkingRequest(\n            chunker_config=SentenceChunkerConfigRequest(\n                character_limit=1000,\n                min_overlap_ratio=0.5,\n            ),\n        ),\n    ),\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { VellumClient } from \"vellum-ai\";\n\nconst client = new VellumClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.documentIndexes.create({\n    label: \"My Document Index\",\n    name: \"my-document-index\",\n    indexingConfig: {\n        vectorizer: {\n            modelName: \"hkunlp/instructor-xl\",\n            config: {\n                instructionDomain: \"\",\n                instructionQueryTextType: \"plain_text\",\n                instructionDocumentTextType: \"plain_text\"\n            }\n        },\n        chunking: {\n            chunkerName: \"sentence-chunker\",\n            chunkerConfig: {\n                characterLimit: 1000,\n                minOverlapRatio: 0.5\n            }\n        }\n    }\n});\n",
                  "generated": true
                }
              ],
              "go": [
                {
                  "language": "go",
                  "code": "import (\n\tcontext \"context\"\n\toption \"github.com/vellum-ai/vellum-client-go/option\"\n\tvellumclientgo \"github.com/vellum-ai/vellum-client-go\"\n\tvellumclientgoclient \"github.com/vellum-ai/vellum-client-go/client\"\n)\n\nclient := vellumclientgoclient.NewClient(\n\toption.WithApiKey(\n\t\t\"<YOUR_ApiKey>\",\n\t),\n)\nresponse, err := client.DocumentIndexes.Create(\n\tcontext.TODO(),\n\t&vellumclientgo.DocumentIndexCreateRequest{\n\t\tLabel: \"My Document Index\",\n\t\tName:  \"my-document-index\",\n\t\tIndexingConfig: &vellumclientgo.DocumentIndexIndexingConfigRequest{\n\t\t\tVectorizer: &vellumclientgo.IndexingConfigVectorizerRequest{\n\t\t\t\tHkunlpInstructorXlVectorizerRequest: &vellumclientgo.HkunlpInstructorXlVectorizerRequest{\n\t\t\t\t\tConfig: &vellumclientgo.InstructorVectorizerConfigRequest{\n\t\t\t\t\t\tInstructionDomain:           \"\",\n\t\t\t\t\t\tInstructionQueryTextType:    \"plain_text\",\n\t\t\t\t\t\tInstructionDocumentTextType: \"plain_text\",\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\tChunking: &vellumclientgo.DocumentIndexChunkingRequest{\n\t\t\t\tSentenceChunkingRequest: &vellumclientgo.SentenceChunkingRequest{\n\t\t\t\t\tChunkerConfig: &vellumclientgo.SentenceChunkerConfigRequest{\n\t\t\t\t\t\tCharacterLimit: vellumclientgo.Int(\n\t\t\t\t\t\t\t1000,\n\t\t\t\t\t\t),\n\t\t\t\t\t\tMinOverlapRatio: vellumclientgo.Float64(\n\t\t\t\t\t\t\t0.5,\n\t\t\t\t\t\t),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t},\n)\n",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/v1/document-indexes",
            "responseStatusCode": 200,
            "name": "Index Using a Sentence Transformers Model",
            "pathParameters": {},
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {
                "label": "My Document Index",
                "name": "my-document-index",
                "indexing_config": {
                  "vectorizer": {
                    "model_name": "text-multilingual-embedding-002",
                    "config": {
                      "project_id": "project_id",
                      "region": "region"
                    }
                  },
                  "chunking": {
                    "chunker_name": "token-overlapping-window-chunker"
                  }
                }
              }
            },
            "responseBody": {
              "type": "json",
              "value": {
                "id": "id",
                "created": "2024-01-15T09:30:00Z",
                "label": "label",
                "name": "name",
                "indexing_config": {
                  "vectorizer": {
                    "model_name": "text-multilingual-embedding-002",
                    "config": {
                      "project_id": "project_id",
                      "region": "region"
                    }
                  },
                  "chunking": {
                    "chunker_name": "token-overlapping-window-chunker"
                  }
                },
                "status": "ACTIVE",
                "environment": "DEVELOPMENT"
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://api.vellum.ai/v1/document-indexes \\\n     -H \"X_API_KEY: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n  \"label\": \"My Document Index\",\n  \"name\": \"my-document-index\",\n  \"indexing_config\": {\n    \"vectorizer\": {\n      \"model_name\": \"text-multilingual-embedding-002\",\n      \"config\": {\n        \"project_id\": \"project_id\",\n        \"region\": \"region\"\n      }\n    },\n    \"chunking\": {\n      \"chunker_name\": \"token-overlapping-window-chunker\"\n    }\n  }\n}'",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from vellum import (\n    BasicVectorizerSentenceTransformersMultiQaMpnetBaseDotV1Request,\n    DocumentIndexIndexingConfigRequest,\n    SentenceChunkerConfigRequest,\n    SentenceChunkingRequest,\n    Vellum,\n)\n\nclient = Vellum(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.document_indexes.create(\n    label=\"My Document Index\",\n    name=\"my-document-index\",\n    indexing_config=DocumentIndexIndexingConfigRequest(\n        vectorizer=BasicVectorizerSentenceTransformersMultiQaMpnetBaseDotV1Request(\n            config={\"key\": \"value\"},\n        ),\n        chunking=SentenceChunkingRequest(\n            chunker_config=SentenceChunkerConfigRequest(\n                character_limit=1000,\n                min_overlap_ratio=0.5,\n            ),\n        ),\n    ),\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { VellumClient } from \"vellum-ai\";\n\nconst client = new VellumClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.documentIndexes.create({\n    label: \"My Document Index\",\n    name: \"my-document-index\",\n    indexingConfig: {\n        vectorizer: {\n            modelName: \"sentence-transformers/multi-qa-mpnet-base-dot-v1\",\n            config: {\n                \"key\": \"value\"\n            }\n        },\n        chunking: {\n            chunkerName: \"sentence-chunker\",\n            chunkerConfig: {\n                characterLimit: 1000,\n                minOverlapRatio: 0.5\n            }\n        }\n    }\n});\n",
                  "generated": true
                }
              ],
              "go": [
                {
                  "language": "go",
                  "code": "import (\n\tcontext \"context\"\n\toption \"github.com/vellum-ai/vellum-client-go/option\"\n\tvellumclientgo \"github.com/vellum-ai/vellum-client-go\"\n\tvellumclientgoclient \"github.com/vellum-ai/vellum-client-go/client\"\n)\n\nclient := vellumclientgoclient.NewClient(\n\toption.WithApiKey(\n\t\t\"<YOUR_ApiKey>\",\n\t),\n)\nresponse, err := client.DocumentIndexes.Create(\n\tcontext.TODO(),\n\t&vellumclientgo.DocumentIndexCreateRequest{\n\t\tLabel: \"My Document Index\",\n\t\tName:  \"my-document-index\",\n\t\tIndexingConfig: &vellumclientgo.DocumentIndexIndexingConfigRequest{\n\t\t\tVectorizer: &vellumclientgo.IndexingConfigVectorizerRequest{\n\t\t\t\tHkunlpInstructorXlVectorizerRequest: &vellumclientgo.HkunlpInstructorXlVectorizerRequest{\n\t\t\t\t\tConfig: &vellumclientgo.InstructorVectorizerConfigRequest{\n\t\t\t\t\t\tInstructionDomain:           \"\",\n\t\t\t\t\t\tInstructionQueryTextType:    \"plain_text\",\n\t\t\t\t\t\tInstructionDocumentTextType: \"plain_text\",\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\tChunking: &vellumclientgo.DocumentIndexChunkingRequest{\n\t\t\t\tSentenceChunkingRequest: &vellumclientgo.SentenceChunkingRequest{\n\t\t\t\t\tChunkerConfig: &vellumclientgo.SentenceChunkerConfigRequest{\n\t\t\t\t\t\tCharacterLimit: vellumclientgo.Int(\n\t\t\t\t\t\t\t1000,\n\t\t\t\t\t\t),\n\t\t\t\t\t\tMinOverlapRatio: vellumclientgo.Float64(\n\t\t\t\t\t\t\t0.5,\n\t\t\t\t\t\t),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t},\n)\n",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/v1/document-indexes",
            "responseStatusCode": 200,
            "name": "Index Using OpenAI Model",
            "pathParameters": {},
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {
                "label": "My Document Index",
                "name": "my-document-index",
                "indexing_config": {
                  "vectorizer": {
                    "model_name": "text-multilingual-embedding-002",
                    "config": {
                      "project_id": "project_id",
                      "region": "region"
                    }
                  },
                  "chunking": {
                    "chunker_name": "token-overlapping-window-chunker"
                  }
                }
              }
            },
            "responseBody": {
              "type": "json",
              "value": {
                "id": "id",
                "created": "2024-01-15T09:30:00Z",
                "label": "label",
                "name": "name",
                "indexing_config": {
                  "vectorizer": {
                    "model_name": "text-multilingual-embedding-002",
                    "config": {
                      "project_id": "project_id",
                      "region": "region"
                    }
                  },
                  "chunking": {
                    "chunker_name": "token-overlapping-window-chunker"
                  }
                },
                "status": "ACTIVE",
                "environment": "DEVELOPMENT"
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://api.vellum.ai/v1/document-indexes \\\n     -H \"X_API_KEY: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n  \"label\": \"My Document Index\",\n  \"name\": \"my-document-index\",\n  \"indexing_config\": {\n    \"vectorizer\": {\n      \"model_name\": \"text-multilingual-embedding-002\",\n      \"config\": {\n        \"project_id\": \"project_id\",\n        \"region\": \"region\"\n      }\n    },\n    \"chunking\": {\n      \"chunker_name\": \"token-overlapping-window-chunker\"\n    }\n  }\n}'",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from vellum import (\n    DocumentIndexIndexingConfigRequest,\n    OpenAiVectorizerConfigRequest,\n    OpenAiVectorizerTextEmbeddingAda002Request,\n    SentenceChunkerConfigRequest,\n    SentenceChunkingRequest,\n    Vellum,\n)\n\nclient = Vellum(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.document_indexes.create(\n    label=\"My Document Index\",\n    name=\"my-document-index\",\n    indexing_config=DocumentIndexIndexingConfigRequest(\n        vectorizer=OpenAiVectorizerTextEmbeddingAda002Request(\n            config=OpenAiVectorizerConfigRequest(\n                add_openai_api_key=True,\n            ),\n        ),\n        chunking=SentenceChunkingRequest(\n            chunker_config=SentenceChunkerConfigRequest(\n                character_limit=1000,\n                min_overlap_ratio=0.5,\n            ),\n        ),\n    ),\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { VellumClient } from \"vellum-ai\";\n\nconst client = new VellumClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.documentIndexes.create({\n    label: \"My Document Index\",\n    name: \"my-document-index\",\n    indexingConfig: {\n        vectorizer: {\n            config: {\n                addOpenaiApiKey: true\n            },\n            modelName: \"text-embedding-ada-002\"\n        },\n        chunking: {\n            chunkerName: \"sentence-chunker\",\n            chunkerConfig: {\n                characterLimit: 1000,\n                minOverlapRatio: 0.5\n            }\n        }\n    }\n});\n",
                  "generated": true
                }
              ],
              "go": [
                {
                  "language": "go",
                  "code": "import (\n\tcontext \"context\"\n\toption \"github.com/vellum-ai/vellum-client-go/option\"\n\tvellumclientgo \"github.com/vellum-ai/vellum-client-go\"\n\tvellumclientgoclient \"github.com/vellum-ai/vellum-client-go/client\"\n)\n\nclient := vellumclientgoclient.NewClient(\n\toption.WithApiKey(\n\t\t\"<YOUR_ApiKey>\",\n\t),\n)\nresponse, err := client.DocumentIndexes.Create(\n\tcontext.TODO(),\n\t&vellumclientgo.DocumentIndexCreateRequest{\n\t\tLabel: \"My Document Index\",\n\t\tName:  \"my-document-index\",\n\t\tIndexingConfig: &vellumclientgo.DocumentIndexIndexingConfigRequest{\n\t\t\tVectorizer: &vellumclientgo.IndexingConfigVectorizerRequest{\n\t\t\t\tHkunlpInstructorXlVectorizerRequest: &vellumclientgo.HkunlpInstructorXlVectorizerRequest{\n\t\t\t\t\tConfig: &vellumclientgo.InstructorVectorizerConfigRequest{\n\t\t\t\t\t\tInstructionDomain:           \"\",\n\t\t\t\t\t\tInstructionQueryTextType:    \"plain_text\",\n\t\t\t\t\t\tInstructionDocumentTextType: \"plain_text\",\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\tChunking: &vellumclientgo.DocumentIndexChunkingRequest{\n\t\t\t\tSentenceChunkingRequest: &vellumclientgo.SentenceChunkingRequest{\n\t\t\t\t\tChunkerConfig: &vellumclientgo.SentenceChunkerConfigRequest{\n\t\t\t\t\t\tCharacterLimit: vellumclientgo.Int(\n\t\t\t\t\t\t\t1000,\n\t\t\t\t\t\t),\n\t\t\t\t\t\tMinOverlapRatio: vellumclientgo.Float64(\n\t\t\t\t\t\t\t0.5,\n\t\t\t\t\t\t),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t},\n)\n",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "endpoint_documentIndexes.retrieve": {
        "id": "endpoint_documentIndexes.retrieve",
        "namespace": [
          "subpackage_documentIndexes"
        ],
        "displayName": "Retrieve",
        "operationId": "retrieve",
        "description": "Used to retrieve a Document Index given its ID or name.",
        "availability": "Beta",
        "method": "GET",
        "path": [
          {
            "type": "literal",
            "value": "/v1/document-indexes/"
          },
          {
            "type": "pathParameter",
            "value": "id"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Production",
        "environments": [
          {
            "id": "Production",
            "baseUrl": "https://api.vellum.ai"
          }
        ],
        "pathParameters": [
          {
            "key": "id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "Either the Document Index's ID or its unique name"
          }
        ],
        "requests": [],
        "responses": [
          {
            "statusCode": 200,
            "body": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:DocumentIndexRead"
              }
            }
          }
        ],
        "examples": [
          {
            "path": "/v1/document-indexes/id",
            "responseStatusCode": 200,
            "pathParameters": {
              "id": "id"
            },
            "queryParameters": {},
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "id": "id",
                "created": "2024-01-15T09:30:00Z",
                "label": "label",
                "name": "name",
                "indexing_config": {
                  "vectorizer": {
                    "model_name": "text-multilingual-embedding-002",
                    "config": {
                      "project_id": "project_id",
                      "region": "region"
                    }
                  },
                  "chunking": {
                    "chunker_name": "token-overlapping-window-chunker"
                  }
                },
                "status": "ACTIVE",
                "environment": "DEVELOPMENT"
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl https://api.vellum.ai/v1/document-indexes/id \\\n     -H \"X_API_KEY: <apiKey>\"",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from vellum import Vellum\n\nclient = Vellum(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.document_indexes.retrieve(\n    id=\"id\",\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { VellumClient } from \"vellum-ai\";\n\nconst client = new VellumClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.documentIndexes.retrieve(\"id\");\n",
                  "generated": true
                }
              ],
              "go": [
                {
                  "language": "go",
                  "code": "import (\n\tcontext \"context\"\n\toption \"github.com/vellum-ai/vellum-client-go/option\"\n\tvellumclientgoclient \"github.com/vellum-ai/vellum-client-go/client\"\n)\n\nclient := vellumclientgoclient.NewClient(\n\toption.WithApiKey(\n\t\t\"<YOUR_ApiKey>\",\n\t),\n)\nresponse, err := client.DocumentIndexes.Retrieve(\n\tcontext.TODO(),\n\t\"id\",\n)\n",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "endpoint_documentIndexes.update": {
        "id": "endpoint_documentIndexes.update",
        "namespace": [
          "subpackage_documentIndexes"
        ],
        "displayName": "Update",
        "operationId": "update",
        "description": "Used to fully update a Document Index given its ID or name.",
        "availability": "Beta",
        "method": "PUT",
        "path": [
          {
            "type": "literal",
            "value": "/v1/document-indexes/"
          },
          {
            "type": "pathParameter",
            "value": "id"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Production",
        "environments": [
          {
            "id": "Production",
            "baseUrl": "https://api.vellum.ai"
          }
        ],
        "pathParameters": [
          {
            "key": "id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "Either the Document Index's ID or its unique name"
          }
        ],
        "requests": [
          {
            "contentType": "application/json",
            "body": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "label",
                  "valueShape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 1
                      }
                    }
                  },
                  "description": "A human-readable label for the document index"
                },
                {
                  "key": "status",
                  "valueShape": {
                    "type": "alias",
                    "value": {
                      "type": "optional",
                      "shape": {
                        "type": "alias",
                        "value": {
                          "type": "id",
                          "id": "type_:EntityStatus"
                        }
                      }
                    }
                  },
                  "description": "The current status of the document index\n\n* `ACTIVE` - Active\n* `ARCHIVED` - Archived"
                },
                {
                  "key": "environment",
                  "valueShape": {
                    "type": "alias",
                    "value": {
                      "type": "optional",
                      "shape": {
                        "type": "alias",
                        "value": {
                          "type": "id",
                          "id": "type_:EnvironmentEnum"
                        }
                      }
                    }
                  },
                  "description": "The environment this document index is used in\n\n* `DEVELOPMENT` - Development\n* `STAGING` - Staging\n* `PRODUCTION` - Production"
                }
              ]
            }
          }
        ],
        "responses": [
          {
            "statusCode": 200,
            "body": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:DocumentIndexRead"
              }
            }
          }
        ],
        "examples": [
          {
            "path": "/v1/document-indexes/id",
            "responseStatusCode": 200,
            "pathParameters": {
              "id": "id"
            },
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {
                "label": "label"
              }
            },
            "responseBody": {
              "type": "json",
              "value": {
                "id": "id",
                "created": "2024-01-15T09:30:00Z",
                "label": "label",
                "name": "name",
                "indexing_config": {
                  "vectorizer": {
                    "model_name": "text-multilingual-embedding-002",
                    "config": {
                      "project_id": "project_id",
                      "region": "region"
                    }
                  },
                  "chunking": {
                    "chunker_name": "token-overlapping-window-chunker"
                  }
                },
                "status": "ACTIVE",
                "environment": "DEVELOPMENT"
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X PUT https://api.vellum.ai/v1/document-indexes/id \\\n     -H \"X_API_KEY: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n  \"label\": \"label\"\n}'",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from vellum import Vellum\n\nclient = Vellum(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.document_indexes.update(\n    id=\"id\",\n    label=\"label\",\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { VellumClient } from \"vellum-ai\";\n\nconst client = new VellumClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.documentIndexes.update(\"id\", {\n    label: \"label\"\n});\n",
                  "generated": true
                }
              ],
              "go": [
                {
                  "language": "go",
                  "code": "import (\n\tcontext \"context\"\n\toption \"github.com/vellum-ai/vellum-client-go/option\"\n\tvellumclientgo \"github.com/vellum-ai/vellum-client-go\"\n\tvellumclientgoclient \"github.com/vellum-ai/vellum-client-go/client\"\n)\n\nclient := vellumclientgoclient.NewClient(\n\toption.WithApiKey(\n\t\t\"<YOUR_ApiKey>\",\n\t),\n)\nresponse, err := client.DocumentIndexes.Update(\n\tcontext.TODO(),\n\t\"id\",\n\t&vellumclientgo.DocumentIndexUpdateRequest{\n\t\tLabel: \"label\",\n\t},\n)\n",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "endpoint_documentIndexes.destroy": {
        "id": "endpoint_documentIndexes.destroy",
        "namespace": [
          "subpackage_documentIndexes"
        ],
        "displayName": "Destroy",
        "operationId": "destroy",
        "description": "Used to delete a Document Index given its ID or name.",
        "availability": "Beta",
        "method": "DELETE",
        "path": [
          {
            "type": "literal",
            "value": "/v1/document-indexes/"
          },
          {
            "type": "pathParameter",
            "value": "id"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Production",
        "environments": [
          {
            "id": "Production",
            "baseUrl": "https://documents.vellum.ai"
          }
        ],
        "pathParameters": [
          {
            "key": "id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "Either the Document Index's ID or its unique name"
          }
        ],
        "requests": [],
        "responses": [],
        "examples": [
          {
            "path": "/v1/document-indexes/id",
            "responseStatusCode": 204,
            "pathParameters": {
              "id": "id"
            },
            "queryParameters": {},
            "headers": {},
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X DELETE https://documents.vellum.ai/v1/document-indexes/id \\\n     -H \"X_API_KEY: <apiKey>\"",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from vellum import Vellum\n\nclient = Vellum(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.document_indexes.destroy(\n    id=\"id\",\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { VellumClient } from \"vellum-ai\";\n\nconst client = new VellumClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.documentIndexes.destroy(\"id\");\n",
                  "generated": true
                }
              ],
              "go": [
                {
                  "language": "go",
                  "code": "import (\n\tcontext \"context\"\n\toption \"github.com/vellum-ai/vellum-client-go/option\"\n\tvellumclientgoclient \"github.com/vellum-ai/vellum-client-go/client\"\n)\n\nclient := vellumclientgoclient.NewClient(\n\toption.WithApiKey(\n\t\t\"<YOUR_ApiKey>\",\n\t),\n)\nerr := client.DocumentIndexes.Destroy(\n\tcontext.TODO(),\n\t\"id\",\n)\n",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "endpoint_documentIndexes.partialUpdate": {
        "id": "endpoint_documentIndexes.partialUpdate",
        "namespace": [
          "subpackage_documentIndexes"
        ],
        "displayName": "Partial Update",
        "operationId": "partial-update",
        "description": "Used to partial update a Document Index given its ID or name.",
        "availability": "Beta",
        "method": "PATCH",
        "path": [
          {
            "type": "literal",
            "value": "/v1/document-indexes/"
          },
          {
            "type": "pathParameter",
            "value": "id"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Production",
        "environments": [
          {
            "id": "Production",
            "baseUrl": "https://api.vellum.ai"
          }
        ],
        "pathParameters": [
          {
            "key": "id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "Either the Document Index's ID or its unique name"
          }
        ],
        "requests": [
          {
            "contentType": "application/json",
            "body": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "label",
                  "valueShape": {
                    "type": "alias",
                    "value": {
                      "type": "optional",
                      "shape": {
                        "type": "alias",
                        "value": {
                          "type": "primitive",
                          "value": {
                            "type": "string",
                            "minLength": 1,
                            "maxLength": 1
                          }
                        }
                      }
                    }
                  },
                  "description": "A human-readable label for the document index"
                },
                {
                  "key": "status",
                  "valueShape": {
                    "type": "alias",
                    "value": {
                      "type": "optional",
                      "shape": {
                        "type": "alias",
                        "value": {
                          "type": "id",
                          "id": "type_:EntityStatus"
                        }
                      }
                    }
                  },
                  "description": "The current status of the document index\n\n* `ACTIVE` - Active\n* `ARCHIVED` - Archived"
                },
                {
                  "key": "environment",
                  "valueShape": {
                    "type": "alias",
                    "value": {
                      "type": "optional",
                      "shape": {
                        "type": "alias",
                        "value": {
                          "type": "id",
                          "id": "type_:EnvironmentEnum"
                        }
                      }
                    }
                  },
                  "description": "The environment this document index is used in\n\n* `DEVELOPMENT` - Development\n* `STAGING` - Staging\n* `PRODUCTION` - Production"
                }
              ]
            }
          }
        ],
        "responses": [
          {
            "statusCode": 200,
            "body": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:DocumentIndexRead"
              }
            }
          }
        ],
        "examples": [
          {
            "path": "/v1/document-indexes/id",
            "responseStatusCode": 200,
            "pathParameters": {
              "id": "id"
            },
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {}
            },
            "responseBody": {
              "type": "json",
              "value": {
                "id": "id",
                "created": "2024-01-15T09:30:00Z",
                "label": "label",
                "name": "name",
                "indexing_config": {
                  "vectorizer": {
                    "model_name": "text-multilingual-embedding-002",
                    "config": {
                      "project_id": "project_id",
                      "region": "region"
                    }
                  },
                  "chunking": {
                    "chunker_name": "token-overlapping-window-chunker"
                  }
                },
                "status": "ACTIVE",
                "environment": "DEVELOPMENT"
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X PATCH https://api.vellum.ai/v1/document-indexes/id \\\n     -H \"X_API_KEY: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{}'",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from vellum import Vellum\n\nclient = Vellum(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.document_indexes.partial_update(\n    id=\"id\",\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { VellumClient } from \"vellum-ai\";\n\nconst client = new VellumClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.documentIndexes.partialUpdate(\"id\");\n",
                  "generated": true
                }
              ],
              "go": [
                {
                  "language": "go",
                  "code": "import (\n\tcontext \"context\"\n\toption \"github.com/vellum-ai/vellum-client-go/option\"\n\tvellumclientgo \"github.com/vellum-ai/vellum-client-go\"\n\tvellumclientgoclient \"github.com/vellum-ai/vellum-client-go/client\"\n)\n\nclient := vellumclientgoclient.NewClient(\n\toption.WithApiKey(\n\t\t\"<YOUR_ApiKey>\",\n\t),\n)\nresponse, err := client.DocumentIndexes.PartialUpdate(\n\tcontext.TODO(),\n\t\"id\",\n\t&vellumclientgo.PatchedDocumentIndexUpdateRequest{},\n)\n",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "endpoint_documentIndexes.add_document": {
        "id": "endpoint_documentIndexes.add_document",
        "namespace": [
          "subpackage_documentIndexes"
        ],
        "displayName": "Add Document",
        "operationId": "add-document",
        "description": "Adds a previously uploaded Document to the specified Document Index.",
        "availability": "Beta",
        "method": "POST",
        "path": [
          {
            "type": "literal",
            "value": "/v1/document-indexes/"
          },
          {
            "type": "pathParameter",
            "value": "id"
          },
          {
            "type": "literal",
            "value": "/documents/"
          },
          {
            "type": "pathParameter",
            "value": "document_id"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Production",
        "environments": [
          {
            "id": "Production",
            "baseUrl": "https://api.vellum.ai"
          }
        ],
        "pathParameters": [
          {
            "key": "document_id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "Either the Vellum-generated ID or the originally supplied external_id that uniquely identifies the Document you'd like to add."
          },
          {
            "key": "id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "Either the Vellum-generated ID or the originally specified name that uniquely identifies the Document Index to which you'd like to add the Document."
          }
        ],
        "requests": [],
        "responses": [],
        "examples": [
          {
            "path": "/v1/document-indexes/id/documents/document_id",
            "responseStatusCode": 204,
            "pathParameters": {
              "document_id": "document_id",
              "id": "id"
            },
            "queryParameters": {},
            "headers": {},
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://api.vellum.ai/v1/document-indexes/id/documents/document_id \\\n     -H \"X_API_KEY: <apiKey>\"",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from vellum import Vellum\n\nclient = Vellum(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.document_indexes.add_document(\n    document_id=\"document_id\",\n    id=\"id\",\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { VellumClient } from \"vellum-ai\";\n\nconst client = new VellumClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.documentIndexes.addDocument(\"document_id\", \"id\");\n",
                  "generated": true
                }
              ],
              "go": [
                {
                  "language": "go",
                  "code": "import (\n\tcontext \"context\"\n\toption \"github.com/vellum-ai/vellum-client-go/option\"\n\tvellumclientgoclient \"github.com/vellum-ai/vellum-client-go/client\"\n)\n\nclient := vellumclientgoclient.NewClient(\n\toption.WithApiKey(\n\t\t\"<YOUR_ApiKey>\",\n\t),\n)\nerr := client.DocumentIndexes.AddDocument(\n\tcontext.TODO(),\n\t\"document_id\",\n\t\"id\",\n)\n",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "endpoint_documentIndexes.remove_document": {
        "id": "endpoint_documentIndexes.remove_document",
        "namespace": [
          "subpackage_documentIndexes"
        ],
        "displayName": "Remove Document",
        "operationId": "remove-document",
        "description": "Removes a Document from a Document Index without deleting the Document itself.",
        "availability": "Beta",
        "method": "DELETE",
        "path": [
          {
            "type": "literal",
            "value": "/v1/document-indexes/"
          },
          {
            "type": "pathParameter",
            "value": "id"
          },
          {
            "type": "literal",
            "value": "/documents/"
          },
          {
            "type": "pathParameter",
            "value": "document_id"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Production",
        "environments": [
          {
            "id": "Production",
            "baseUrl": "https://documents.vellum.ai"
          }
        ],
        "pathParameters": [
          {
            "key": "document_id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "Either the Vellum-generated ID or the originally supplied external_id that uniquely identifies the Document you'd like to remove."
          },
          {
            "key": "id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "Either the Vellum-generated ID or the originally specified name that uniquely identifies the Document Index from which you'd like to remove a Document."
          }
        ],
        "requests": [],
        "responses": [],
        "examples": [
          {
            "path": "/v1/document-indexes/id/documents/document_id",
            "responseStatusCode": 204,
            "pathParameters": {
              "document_id": "document_id",
              "id": "id"
            },
            "queryParameters": {},
            "headers": {},
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X DELETE https://documents.vellum.ai/v1/document-indexes/id/documents/document_id \\\n     -H \"X_API_KEY: <apiKey>\"",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from vellum import Vellum\n\nclient = Vellum(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.document_indexes.remove_document(\n    document_id=\"document_id\",\n    id=\"id\",\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { VellumClient } from \"vellum-ai\";\n\nconst client = new VellumClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.documentIndexes.removeDocument(\"document_id\", \"id\");\n",
                  "generated": true
                }
              ],
              "go": [
                {
                  "language": "go",
                  "code": "import (\n\tcontext \"context\"\n\toption \"github.com/vellum-ai/vellum-client-go/option\"\n\tvellumclientgoclient \"github.com/vellum-ai/vellum-client-go/client\"\n)\n\nclient := vellumclientgoclient.NewClient(\n\toption.WithApiKey(\n\t\t\"<YOUR_ApiKey>\",\n\t),\n)\nerr := client.DocumentIndexes.RemoveDocument(\n\tcontext.TODO(),\n\t\"document_id\",\n\t\"id\",\n)\n",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "endpoint_documents.list": {
        "id": "endpoint_documents.list",
        "namespace": [
          "subpackage_documents"
        ],
        "displayName": "List",
        "operationId": "list",
        "description": "Used to list documents. Optionally filter on supported fields.",
        "availability": "GenerallyAvailable",
        "method": "GET",
        "path": [
          {
            "type": "literal",
            "value": "/v1/documents"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Production",
        "environments": [
          {
            "id": "Production",
            "baseUrl": "https://api.vellum.ai"
          }
        ],
        "queryParameters": [
          {
            "key": "document_index_id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "description": "Filter down to only those documents that are included in the specified index. You may provide either the Vellum-generated ID or the unique name of the index specified upon initial creation."
          },
          {
            "key": "limit",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                }
              }
            },
            "description": "Number of results to return per page."
          },
          {
            "key": "offset",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                }
              }
            },
            "description": "The initial index from which to return the results."
          },
          {
            "key": "ordering",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "description": "Which field to use when ordering the results."
          }
        ],
        "requests": [],
        "responses": [
          {
            "statusCode": 200,
            "body": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:PaginatedSlimDocumentList"
              }
            }
          }
        ],
        "examples": [
          {
            "path": "/v1/documents",
            "responseStatusCode": 200,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "count": 123,
                "next": "http://api.example.org/accounts/?offset=400&limit=100",
                "previous": "http://api.example.org/accounts/?offset=200&limit=100",
                "results": [
                  {
                    "id": "id",
                    "last_uploaded_at": "2024-01-15T09:30:00Z",
                    "label": "label",
                    "document_to_document_indexes": [
                      {
                        "id": "id",
                        "document_index_id": "document_index_id"
                      }
                    ],
                    "external_id": "external_id",
                    "processing_state": "QUEUED",
                    "processing_failure_reason": "EXCEEDED_CHARACTER_LIMIT",
                    "status": "ACTIVE",
                    "keywords": [
                      "keywords"
                    ],
                    "metadata": {
                      "key": "value"
                    }
                  }
                ]
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl https://api.vellum.ai/v1/documents \\\n     -H \"X_API_KEY: <apiKey>\"",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from vellum import Vellum\n\nclient = Vellum(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.documents.list()\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { VellumClient } from \"vellum-ai\";\n\nconst client = new VellumClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.documents.list();\n",
                  "generated": true
                }
              ],
              "go": [
                {
                  "language": "go",
                  "code": "import (\n\tcontext \"context\"\n\toption \"github.com/vellum-ai/vellum-client-go/option\"\n\tvellumclientgo \"github.com/vellum-ai/vellum-client-go\"\n\tvellumclientgoclient \"github.com/vellum-ai/vellum-client-go/client\"\n)\n\nclient := vellumclientgoclient.NewClient(\n\toption.WithApiKey(\n\t\t\"<YOUR_ApiKey>\",\n\t),\n)\nresponse, err := client.Documents.List(\n\tcontext.TODO(),\n\t&vellumclientgo.DocumentsListRequest{},\n)\n",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "endpoint_documents.retrieve": {
        "id": "endpoint_documents.retrieve",
        "namespace": [
          "subpackage_documents"
        ],
        "displayName": "Retrieve",
        "operationId": "retrieve",
        "description": "Retrieve a Document, keying off of either its Vellum-generated ID or its external ID.",
        "availability": "Beta",
        "method": "GET",
        "path": [
          {
            "type": "literal",
            "value": "/v1/documents/"
          },
          {
            "type": "pathParameter",
            "value": "id"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Production",
        "environments": [
          {
            "id": "Production",
            "baseUrl": "https://api.vellum.ai"
          }
        ],
        "pathParameters": [
          {
            "key": "id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "A UUID string identifying this document."
          }
        ],
        "requests": [],
        "responses": [
          {
            "statusCode": 200,
            "body": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:DocumentRead"
              }
            }
          }
        ],
        "examples": [
          {
            "path": "/v1/documents/id",
            "responseStatusCode": 200,
            "pathParameters": {
              "id": "id"
            },
            "queryParameters": {},
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "id": "id",
                "last_uploaded_at": "2024-01-15T09:30:00Z",
                "label": "label",
                "document_to_document_indexes": [
                  {
                    "id": "id",
                    "document_index_id": "document_index_id",
                    "indexing_state": "AWAITING_PROCESSING"
                  }
                ],
                "external_id": "external_id",
                "processing_state": "QUEUED",
                "status": "ACTIVE",
                "original_file_url": "original_file_url",
                "processed_file_url": "processed_file_url",
                "metadata": {
                  "key": "value"
                }
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl https://api.vellum.ai/v1/documents/id \\\n     -H \"X_API_KEY: <apiKey>\"",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from vellum import Vellum\n\nclient = Vellum(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.documents.retrieve(\n    id=\"id\",\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { VellumClient } from \"vellum-ai\";\n\nconst client = new VellumClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.documents.retrieve(\"id\");\n",
                  "generated": true
                }
              ],
              "go": [
                {
                  "language": "go",
                  "code": "import (\n\tcontext \"context\"\n\toption \"github.com/vellum-ai/vellum-client-go/option\"\n\tvellumclientgoclient \"github.com/vellum-ai/vellum-client-go/client\"\n)\n\nclient := vellumclientgoclient.NewClient(\n\toption.WithApiKey(\n\t\t\"<YOUR_ApiKey>\",\n\t),\n)\nresponse, err := client.Documents.Retrieve(\n\tcontext.TODO(),\n\t\"id\",\n)\n",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "endpoint_documents.destroy": {
        "id": "endpoint_documents.destroy",
        "namespace": [
          "subpackage_documents"
        ],
        "displayName": "Destroy",
        "operationId": "destroy",
        "description": "Delete a Document, keying off of either its Vellum-generated ID or its external ID.",
        "availability": "Beta",
        "method": "DELETE",
        "path": [
          {
            "type": "literal",
            "value": "/v1/documents/"
          },
          {
            "type": "pathParameter",
            "value": "id"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Production",
        "environments": [
          {
            "id": "Production",
            "baseUrl": "https://documents.vellum.ai"
          }
        ],
        "pathParameters": [
          {
            "key": "id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "A UUID string identifying this document."
          }
        ],
        "requests": [],
        "responses": [],
        "examples": [
          {
            "path": "/v1/documents/id",
            "responseStatusCode": 204,
            "pathParameters": {
              "id": "id"
            },
            "queryParameters": {},
            "headers": {},
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X DELETE https://documents.vellum.ai/v1/documents/id \\\n     -H \"X_API_KEY: <apiKey>\"",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from vellum import Vellum\n\nclient = Vellum(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.documents.destroy(\n    id=\"id\",\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { VellumClient } from \"vellum-ai\";\n\nconst client = new VellumClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.documents.destroy(\"id\");\n",
                  "generated": true
                }
              ],
              "go": [
                {
                  "language": "go",
                  "code": "import (\n\tcontext \"context\"\n\toption \"github.com/vellum-ai/vellum-client-go/option\"\n\tvellumclientgoclient \"github.com/vellum-ai/vellum-client-go/client\"\n)\n\nclient := vellumclientgoclient.NewClient(\n\toption.WithApiKey(\n\t\t\"<YOUR_ApiKey>\",\n\t),\n)\nerr := client.Documents.Destroy(\n\tcontext.TODO(),\n\t\"id\",\n)\n",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "endpoint_documents.partialUpdate": {
        "id": "endpoint_documents.partialUpdate",
        "namespace": [
          "subpackage_documents"
        ],
        "displayName": "Partial Update",
        "operationId": "partial-update",
        "description": "Update a Document, keying off of either its Vellum-generated ID or its external ID. Particularly useful for updating its metadata.",
        "availability": "Beta",
        "method": "PATCH",
        "path": [
          {
            "type": "literal",
            "value": "/v1/documents/"
          },
          {
            "type": "pathParameter",
            "value": "id"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Production",
        "environments": [
          {
            "id": "Production",
            "baseUrl": "https://api.vellum.ai"
          }
        ],
        "pathParameters": [
          {
            "key": "id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "A UUID string identifying this document."
          }
        ],
        "requests": [
          {
            "contentType": "application/json",
            "body": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "label",
                  "valueShape": {
                    "type": "alias",
                    "value": {
                      "type": "optional",
                      "shape": {
                        "type": "alias",
                        "value": {
                          "type": "primitive",
                          "value": {
                            "type": "string",
                            "minLength": 1,
                            "maxLength": 1
                          }
                        }
                      }
                    }
                  },
                  "description": "A human-readable label for the document. Defaults to the originally uploaded file's file name."
                },
                {
                  "key": "status",
                  "valueShape": {
                    "type": "alias",
                    "value": {
                      "type": "optional",
                      "shape": {
                        "type": "alias",
                        "value": {
                          "type": "id",
                          "id": "type_:DocumentStatus"
                        }
                      }
                    }
                  },
                  "description": "The current status of the document\n\n* `ACTIVE` - Active"
                },
                {
                  "key": "metadata",
                  "valueShape": {
                    "type": "alias",
                    "value": {
                      "type": "optional",
                      "shape": {
                        "type": "alias",
                        "value": {
                          "type": "map",
                          "keyShape": {
                            "type": "alias",
                            "value": {
                              "type": "primitive",
                              "value": {
                                "type": "string"
                              }
                            }
                          },
                          "valueShape": {
                            "type": "alias",
                            "value": {
                              "type": "unknown"
                            }
                          }
                        }
                      }
                    }
                  },
                  "description": "A JSON object containing any metadata associated with the document that you'd like to filter upon later."
                }
              ]
            }
          }
        ],
        "responses": [
          {
            "statusCode": 200,
            "body": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:DocumentRead"
              }
            }
          }
        ],
        "examples": [
          {
            "path": "/v1/documents/id",
            "responseStatusCode": 200,
            "pathParameters": {
              "id": "id"
            },
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {}
            },
            "responseBody": {
              "type": "json",
              "value": {
                "id": "id",
                "last_uploaded_at": "2024-01-15T09:30:00Z",
                "label": "label",
                "document_to_document_indexes": [
                  {
                    "id": "id",
                    "document_index_id": "document_index_id",
                    "indexing_state": "AWAITING_PROCESSING"
                  }
                ],
                "external_id": "external_id",
                "processing_state": "QUEUED",
                "status": "ACTIVE",
                "original_file_url": "original_file_url",
                "processed_file_url": "processed_file_url",
                "metadata": {
                  "key": "value"
                }
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X PATCH https://api.vellum.ai/v1/documents/id \\\n     -H \"X_API_KEY: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{}'",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from vellum import Vellum\n\nclient = Vellum(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.documents.partial_update(\n    id=\"id\",\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { VellumClient } from \"vellum-ai\";\n\nconst client = new VellumClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.documents.partialUpdate(\"id\");\n",
                  "generated": true
                }
              ],
              "go": [
                {
                  "language": "go",
                  "code": "import (\n\tcontext \"context\"\n\toption \"github.com/vellum-ai/vellum-client-go/option\"\n\tvellumclientgo \"github.com/vellum-ai/vellum-client-go\"\n\tvellumclientgoclient \"github.com/vellum-ai/vellum-client-go/client\"\n)\n\nclient := vellumclientgoclient.NewClient(\n\toption.WithApiKey(\n\t\t\"<YOUR_ApiKey>\",\n\t),\n)\nresponse, err := client.Documents.PartialUpdate(\n\tcontext.TODO(),\n\t\"id\",\n\t&vellumclientgo.PatchedDocumentUpdateRequest{},\n)\n",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "endpoint_documents.upload": {
        "id": "endpoint_documents.upload",
        "namespace": [
          "subpackage_documents"
        ],
        "displayName": "Upload",
        "operationId": "upload",
        "description": "Upload a document to be indexed and used for search.\n\n**Note:** Uses a base url of `https://documents.vellum.ai`.\n\nThis is a multipart/form-data request. The `contents` field should be a file upload. It also expects a JSON body with the following fields:\n\n- `add_to_index_names: list[str]` - Optionally include the names of all indexes that you'd like this document to be included in\n- `external_id: str | None` - Optionally include an external ID for this document. This is useful if you want to re-upload the same document later when its contents change and would like it to be re-indexed.\n- `label: str` - A human-friendly name for this document. Typically the filename.\n- `keywords: list[str] | None` - Optionally include a list of keywords that'll be associated with this document. Used when performing keyword searches.\n- `metadata: dict[str, Any]` - A stringified JSON object containing any metadata associated with the document that you'd like to filter upon later.",
        "availability": "GenerallyAvailable",
        "method": "POST",
        "path": [
          {
            "type": "literal",
            "value": "/v1/upload-document"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Production",
        "environments": [
          {
            "id": "Production",
            "baseUrl": "https://documents.vellum.ai"
          }
        ],
        "requests": [
          {
            "contentType": "multipart/form-data",
            "body": {
              "type": "formData",
              "fields": [
                {
                  "type": "property",
                  "key": "add_to_index_names",
                  "description": "Optionally include the names of all indexes that you'd like this document to be included in",
                  "valueShape": {
                    "type": "alias",
                    "value": {
                      "type": "optional",
                      "shape": {
                        "type": "alias",
                        "value": {
                          "type": "list",
                          "itemShape": {
                            "type": "alias",
                            "value": {
                              "type": "primitive",
                              "value": {
                                "type": "string"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                {
                  "type": "property",
                  "key": "external_id",
                  "description": "Optionally include an external ID for this document. This is useful if you want to re-upload the same document later when its contents change and would like it to be re-indexed.",
                  "valueShape": {
                    "type": "alias",
                    "value": {
                      "type": "optional",
                      "shape": {
                        "type": "alias",
                        "value": {
                          "type": "primitive",
                          "value": {
                            "type": "string",
                            "minLength": 1,
                            "maxLength": 1
                          }
                        }
                      }
                    }
                  }
                },
                {
                  "type": "property",
                  "key": "label",
                  "description": "A human-friendly name for this document. Typically the filename.",
                  "valueShape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 1
                      }
                    }
                  }
                },
                {
                  "type": "file",
                  "key": "contents",
                  "isOptional": false
                },
                {
                  "type": "property",
                  "key": "keywords",
                  "description": "Optionally include a list of keywords that'll be associated with this document. Used when performing keyword searches.",
                  "valueShape": {
                    "type": "alias",
                    "value": {
                      "type": "optional",
                      "shape": {
                        "type": "alias",
                        "value": {
                          "type": "list",
                          "itemShape": {
                            "type": "alias",
                            "value": {
                              "type": "primitive",
                              "value": {
                                "type": "string"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                {
                  "type": "property",
                  "key": "metadata",
                  "description": "A stringified JSON object containing any metadata associated with the document that you'd like to filter upon later.",
                  "valueShape": {
                    "type": "alias",
                    "value": {
                      "type": "optional",
                      "shape": {
                        "type": "alias",
                        "value": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              ]
            }
          }
        ],
        "responses": [
          {
            "statusCode": 200,
            "body": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:UploadDocumentResponse"
              }
            }
          }
        ],
        "errors": [
          {
            "description": "",
            "name": "Bad Request",
            "statusCode": 400,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:UploadDocumentErrorResponse"
              }
            },
            "examples": []
          },
          {
            "description": "",
            "name": "Not Found",
            "statusCode": 404,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:UploadDocumentErrorResponse"
              }
            },
            "examples": []
          },
          {
            "description": "",
            "name": "Internal Server Error",
            "statusCode": 500,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:UploadDocumentErrorResponse"
              }
            },
            "examples": []
          }
        ],
        "examples": [
          {
            "path": "/v1/upload-document",
            "responseStatusCode": 200,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "form",
              "value": {
                "add_to_index_names": {
                  "type": "json"
                },
                "external_id": {
                  "type": "json"
                },
                "label": {
                  "type": "json",
                  "value": "label"
                },
                "contents": {
                  "type": "filename",
                  "value": "<file1>"
                },
                "keywords": {
                  "type": "json"
                },
                "metadata": {
                  "type": "json"
                }
              }
            },
            "responseBody": {
              "type": "json",
              "value": {
                "document_id": "document_id"
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://documents.vellum.ai/v1/upload-document \\\n     -H \"X_API_KEY: <apiKey>\" \\\n     -H \"Content-Type: multipart/form-data\" \\\n     -F label=\"label\" \\\n     -F contents=@<file1>",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from vellum import Vellum\n\nclient = Vellum(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.documents.upload(\n    label=\"label\",\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { VellumClient } from \"vellum-ai\";\nimport * as fs from \"fs\";\n\nconst client = new VellumClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.documents.upload(fs.createReadStream(\"/path/to/your/file\"), {\n    label: \"label\"\n});\n",
                  "generated": true
                }
              ],
              "go": [
                {
                  "language": "go",
                  "code": "import (\n\tcontext \"context\"\n\toption \"github.com/vellum-ai/vellum-client-go/option\"\n\tvellumclientgo \"github.com/vellum-ai/vellum-client-go\"\n\tvellumclientgoclient \"github.com/vellum-ai/vellum-client-go/client\"\n)\n\nclient := vellumclientgoclient.NewClient(\n\toption.WithApiKey(\n\t\t\"<YOUR_ApiKey>\",\n\t),\n)\nresponse, err := client.Documents.Upload(\n\tcontext.TODO(),\n\t&vellumclientgo.UploadDocumentBodyRequest{\n\t\tLabel: \"label\",\n\t},\n)\n",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/v1/upload-document",
            "responseStatusCode": 400,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "form",
              "value": {
                "add_to_index_names": {
                  "type": "json"
                },
                "external_id": {
                  "type": "json"
                },
                "label": {
                  "type": "json",
                  "value": "string"
                },
                "contents": {
                  "type": "filename",
                  "value": "<filename1>"
                },
                "keywords": {
                  "type": "json"
                },
                "metadata": {
                  "type": "json"
                }
              }
            },
            "responseBody": {
              "type": "json",
              "value": {
                "detail": "string"
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://documents.vellum.ai/v1/upload-document \\\n     -H \"X_API_KEY: <apiKey>\" \\\n     -H \"Content-Type: multipart/form-data\" \\\n     -F label=\"string\" \\\n     -F contents=@<filename1>",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from vellum import Vellum\n\nclient = Vellum(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.documents.upload(\n    label=\"label\",\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { VellumClient } from \"vellum-ai\";\nimport * as fs from \"fs\";\n\nconst client = new VellumClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.documents.upload(fs.createReadStream(\"/path/to/your/file\"), {\n    label: \"label\"\n});\n",
                  "generated": true
                }
              ],
              "go": [
                {
                  "language": "go",
                  "code": "import (\n\tcontext \"context\"\n\toption \"github.com/vellum-ai/vellum-client-go/option\"\n\tvellumclientgo \"github.com/vellum-ai/vellum-client-go\"\n\tvellumclientgoclient \"github.com/vellum-ai/vellum-client-go/client\"\n)\n\nclient := vellumclientgoclient.NewClient(\n\toption.WithApiKey(\n\t\t\"<YOUR_ApiKey>\",\n\t),\n)\nresponse, err := client.Documents.Upload(\n\tcontext.TODO(),\n\t&vellumclientgo.UploadDocumentBodyRequest{\n\t\tLabel: \"label\",\n\t},\n)\n",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/v1/upload-document",
            "responseStatusCode": 404,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "form",
              "value": {
                "add_to_index_names": {
                  "type": "json"
                },
                "external_id": {
                  "type": "json"
                },
                "label": {
                  "type": "json",
                  "value": "string"
                },
                "contents": {
                  "type": "filename",
                  "value": "<filename1>"
                },
                "keywords": {
                  "type": "json"
                },
                "metadata": {
                  "type": "json"
                }
              }
            },
            "responseBody": {
              "type": "json",
              "value": {
                "detail": "string"
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://documents.vellum.ai/v1/upload-document \\\n     -H \"X_API_KEY: <apiKey>\" \\\n     -H \"Content-Type: multipart/form-data\" \\\n     -F label=\"string\" \\\n     -F contents=@<filename1>",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from vellum import Vellum\n\nclient = Vellum(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.documents.upload(\n    label=\"label\",\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { VellumClient } from \"vellum-ai\";\nimport * as fs from \"fs\";\n\nconst client = new VellumClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.documents.upload(fs.createReadStream(\"/path/to/your/file\"), {\n    label: \"label\"\n});\n",
                  "generated": true
                }
              ],
              "go": [
                {
                  "language": "go",
                  "code": "import (\n\tcontext \"context\"\n\toption \"github.com/vellum-ai/vellum-client-go/option\"\n\tvellumclientgo \"github.com/vellum-ai/vellum-client-go\"\n\tvellumclientgoclient \"github.com/vellum-ai/vellum-client-go/client\"\n)\n\nclient := vellumclientgoclient.NewClient(\n\toption.WithApiKey(\n\t\t\"<YOUR_ApiKey>\",\n\t),\n)\nresponse, err := client.Documents.Upload(\n\tcontext.TODO(),\n\t&vellumclientgo.UploadDocumentBodyRequest{\n\t\tLabel: \"label\",\n\t},\n)\n",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/v1/upload-document",
            "responseStatusCode": 500,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "form",
              "value": {
                "add_to_index_names": {
                  "type": "json"
                },
                "external_id": {
                  "type": "json"
                },
                "label": {
                  "type": "json",
                  "value": "string"
                },
                "contents": {
                  "type": "filename",
                  "value": "<filename1>"
                },
                "keywords": {
                  "type": "json"
                },
                "metadata": {
                  "type": "json"
                }
              }
            },
            "responseBody": {
              "type": "json",
              "value": {
                "detail": "string"
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://documents.vellum.ai/v1/upload-document \\\n     -H \"X_API_KEY: <apiKey>\" \\\n     -H \"Content-Type: multipart/form-data\" \\\n     -F label=\"string\" \\\n     -F contents=@<filename1>",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from vellum import Vellum\n\nclient = Vellum(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.documents.upload(\n    label=\"label\",\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { VellumClient } from \"vellum-ai\";\nimport * as fs from \"fs\";\n\nconst client = new VellumClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.documents.upload(fs.createReadStream(\"/path/to/your/file\"), {\n    label: \"label\"\n});\n",
                  "generated": true
                }
              ],
              "go": [
                {
                  "language": "go",
                  "code": "import (\n\tcontext \"context\"\n\toption \"github.com/vellum-ai/vellum-client-go/option\"\n\tvellumclientgo \"github.com/vellum-ai/vellum-client-go\"\n\tvellumclientgoclient \"github.com/vellum-ai/vellum-client-go/client\"\n)\n\nclient := vellumclientgoclient.NewClient(\n\toption.WithApiKey(\n\t\t\"<YOUR_ApiKey>\",\n\t),\n)\nresponse, err := client.Documents.Upload(\n\tcontext.TODO(),\n\t&vellumclientgo.UploadDocumentBodyRequest{\n\t\tLabel: \"label\",\n\t},\n)\n",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "endpoint_folderEntities.list": {
        "id": "endpoint_folderEntities.list",
        "namespace": [
          "subpackage_folderEntities"
        ],
        "displayName": "List",
        "operationId": "list",
        "description": "List all folder entities within a specified folder.",
        "availability": "Beta",
        "method": "GET",
        "path": [
          {
            "type": "literal",
            "value": "/v1/folder-entities"
          }
        ],
        "defaultEnvironment": "Production",
        "environments": [
          {
            "id": "Production",
            "baseUrl": "https://api.vellum.ai"
          }
        ],
        "queryParameters": [
          {
            "key": "entity_status",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "id",
                    "id": "type_folderEntities:FolderEntitiesListRequestEntityStatus"
                  }
                }
              }
            },
            "description": "Filter down to only those objects whose entities have a status matching the status specified.\n\n- `ACTIVE` - Active\n- `ARCHIVED` - Archived"
          },
          {
            "key": "limit",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                }
              }
            },
            "description": "Number of results to return per page."
          },
          {
            "key": "offset",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                }
              }
            },
            "description": "The initial index from which to return the results."
          },
          {
            "key": "ordering",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "description": "Which field to use when ordering the results."
          },
          {
            "key": "parent_folder_id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "Filter down to only those entities whose parent folder has the specified ID.\n\nTo filter by an entity's parent folder, provide the ID of the parent folder. To filter by the root directory, provide\na string representing the entity type of the root directory. Supported root directories include:\n\n- PROMPT_SANDBOX\n- WORKFLOW_SANDBOX\n- DOCUMENT_INDEX\n- TEST_SUITE"
          }
        ],
        "requests": [],
        "responses": [
          {
            "statusCode": 200,
            "body": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:PaginatedFolderEntityList"
              }
            }
          }
        ],
        "examples": [
          {
            "path": "/v1/folder-entities",
            "responseStatusCode": 200,
            "pathParameters": {},
            "queryParameters": {
              "parent_folder_id": "parent_folder_id"
            },
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "count": 123,
                "next": "http://api.example.org/accounts/?offset=400&limit=100",
                "previous": "http://api.example.org/accounts/?offset=200&limit=100",
                "results": [
                  {
                    "type": "TEST_SUITE",
                    "data": {
                      "id": "id",
                      "label": "label",
                      "created": "2024-01-15T09:30:00Z",
                      "modified": "2024-01-15T09:30:00Z",
                      "status": "ACTIVE"
                    },
                    "id": "results"
                  }
                ]
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -G https://api.vellum.ai/v1/folder-entities \\\n     -d parent_folder_id=parent_folder_id",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from vellum import Vellum\n\nclient = Vellum(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.folder_entities.list(\n    parent_folder_id=\"parent_folder_id\",\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { VellumClient } from \"vellum-ai\";\n\nconst client = new VellumClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.folderEntities.list({\n    parentFolderId: \"parent_folder_id\"\n});\n",
                  "generated": true
                }
              ],
              "go": [
                {
                  "language": "go",
                  "code": "import (\n\tcontext \"context\"\n\toption \"github.com/vellum-ai/vellum-client-go/option\"\n\tvellumclientgo \"github.com/vellum-ai/vellum-client-go\"\n\tvellumclientgoclient \"github.com/vellum-ai/vellum-client-go/client\"\n)\n\nclient := vellumclientgoclient.NewClient(\n\toption.WithApiKey(\n\t\t\"<YOUR_ApiKey>\",\n\t),\n)\nresponse, err := client.FolderEntities.List(\n\tcontext.TODO(),\n\t&vellumclientgo.FolderEntitiesListRequest{\n\t\tParentFolderId: \"parent_folder_id\",\n\t},\n)\n",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "endpoint_folderEntities.add_entity_to_folder": {
        "id": "endpoint_folderEntities.add_entity_to_folder",
        "namespace": [
          "subpackage_folderEntities"
        ],
        "displayName": "Add Entity To Folder",
        "operationId": "add-entity-to-folder",
        "description": "Add an entity to a specific folder or root directory.\n\nAdding an entity to a folder will remove it from any other folders it might have been a member of.",
        "availability": "Beta",
        "method": "POST",
        "path": [
          {
            "type": "literal",
            "value": "/v1/folders/"
          },
          {
            "type": "pathParameter",
            "value": "folder_id"
          },
          {
            "type": "literal",
            "value": "/add-entity"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Production",
        "environments": [
          {
            "id": "Production",
            "baseUrl": "https://api.vellum.ai"
          }
        ],
        "pathParameters": [
          {
            "key": "folder_id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "The ID of the folder to which the entity should be added. This can be a UUID of a folder, or the name of a root\ndirectory. Supported root directories include:\n\n- PROMPT_SANDBOX\n- WORKFLOW_SANDBOX\n- DOCUMENT_INDEX\n- TEST_SUITE"
          }
        ],
        "requests": [
          {
            "contentType": "application/json",
            "body": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "entity_id",
                  "valueShape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  },
                  "description": "The ID of the entity you would like to move."
                }
              ]
            }
          }
        ],
        "responses": [],
        "examples": [
          {
            "path": "/v1/folders/folder_id/add-entity",
            "responseStatusCode": 204,
            "pathParameters": {
              "folder_id": "folder_id"
            },
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {
                "entity_id": "entity_id"
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://api.vellum.ai/v1/folders/folder_id/add-entity \\\n     -H \"X_API_KEY: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n  \"entity_id\": \"entity_id\"\n}'",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from vellum import Vellum\n\nclient = Vellum(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.folder_entities.add_entity_to_folder(\n    folder_id=\"folder_id\",\n    entity_id=\"entity_id\",\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { VellumClient } from \"vellum-ai\";\n\nconst client = new VellumClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.folderEntities.addEntityToFolder(\"folder_id\", {\n    entityId: \"entity_id\"\n});\n",
                  "generated": true
                }
              ],
              "go": [
                {
                  "language": "go",
                  "code": "import (\n\tcontext \"context\"\n\toption \"github.com/vellum-ai/vellum-client-go/option\"\n\tvellumclientgo \"github.com/vellum-ai/vellum-client-go\"\n\tvellumclientgoclient \"github.com/vellum-ai/vellum-client-go/client\"\n)\n\nclient := vellumclientgoclient.NewClient(\n\toption.WithApiKey(\n\t\t\"<YOUR_ApiKey>\",\n\t),\n)\nerr := client.FolderEntities.AddEntityToFolder(\n\tcontext.TODO(),\n\t\"folder_id\",\n\t&vellumclientgo.AddEntityToFolderRequest{\n\t\tEntityId: \"entity_id\",\n\t},\n)\n",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "endpoint_sandboxes.deploy_prompt": {
        "id": "endpoint_sandboxes.deploy_prompt",
        "namespace": [
          "subpackage_sandboxes"
        ],
        "displayName": "Deploy Prompt",
        "operationId": "deploy-prompt",
        "availability": "Beta",
        "method": "POST",
        "path": [
          {
            "type": "literal",
            "value": "/v1/sandboxes/"
          },
          {
            "type": "pathParameter",
            "value": "id"
          },
          {
            "type": "literal",
            "value": "/prompts/"
          },
          {
            "type": "pathParameter",
            "value": "prompt_variant_id"
          },
          {
            "type": "literal",
            "value": "/deploy"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Production",
        "environments": [
          {
            "id": "Production",
            "baseUrl": "https://api.vellum.ai"
          }
        ],
        "pathParameters": [
          {
            "key": "id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "A UUID string identifying this sandbox."
          },
          {
            "key": "prompt_variant_id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "An ID identifying the Prompt you'd like to deploy."
          }
        ],
        "requests": [
          {
            "contentType": "application/json",
            "body": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "prompt_deployment_id",
                  "valueShape": {
                    "type": "alias",
                    "value": {
                      "type": "optional",
                      "shape": {
                        "type": "alias",
                        "value": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "description": "The Vellum-generated ID of the Prompt Deployment you'd like to update. Cannot specify both this and prompt_deployment_name. Leave null to create a new Prompt Deployment."
                },
                {
                  "key": "prompt_deployment_name",
                  "valueShape": {
                    "type": "alias",
                    "value": {
                      "type": "optional",
                      "shape": {
                        "type": "alias",
                        "value": {
                          "type": "primitive",
                          "value": {
                            "type": "string",
                            "minLength": 1,
                            "maxLength": 1
                          }
                        }
                      }
                    }
                  },
                  "description": "The unique name of the Prompt Deployment you'd like to either create or update. Cannot specify both this and prompt_deployment_id. If provided and matches an existing Prompt Deployment, that Prompt Deployment will be updated. Otherwise, a new Prompt Deployment will be created."
                },
                {
                  "key": "label",
                  "valueShape": {
                    "type": "alias",
                    "value": {
                      "type": "optional",
                      "shape": {
                        "type": "alias",
                        "value": {
                          "type": "primitive",
                          "value": {
                            "type": "string",
                            "minLength": 1,
                            "maxLength": 1
                          }
                        }
                      }
                    }
                  },
                  "description": "In the event that a new Prompt Deployment is created, this will be the label it's given."
                },
                {
                  "key": "release_tags",
                  "valueShape": {
                    "type": "alias",
                    "value": {
                      "type": "optional",
                      "shape": {
                        "type": "alias",
                        "value": {
                          "type": "list",
                          "itemShape": {
                            "type": "alias",
                            "value": {
                              "type": "primitive",
                              "value": {
                                "type": "string"
                              }
                            }
                          }
                        }
                      }
                    }
                  },
                  "description": "Optionally provide the release tags that you'd like to be associated with the latest release of the created/updated Prompt Deployment."
                }
              ]
            }
          }
        ],
        "responses": [
          {
            "statusCode": 200,
            "body": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:DeploymentRead"
              }
            }
          }
        ],
        "examples": [
          {
            "path": "/v1/sandboxes/id/prompts/prompt_variant_id/deploy",
            "responseStatusCode": 200,
            "pathParameters": {
              "id": "id",
              "prompt_variant_id": "prompt_variant_id"
            },
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {}
            },
            "responseBody": {
              "type": "json",
              "value": {
                "id": "id",
                "created": "2024-01-15T09:30:00Z",
                "label": "label",
                "name": "name",
                "last_deployed_on": "2024-01-15T09:30:00Z",
                "input_variables": [
                  {
                    "id": "id",
                    "key": "key",
                    "type": "STRING",
                    "required": true,
                    "default": {
                      "type": "SEARCH_RESULTS"
                    }
                  }
                ],
                "last_deployed_history_item_id": "last_deployed_history_item_id",
                "active_model_version_ids": [
                  "active_model_version_ids"
                ],
                "status": "ACTIVE",
                "environment": "DEVELOPMENT",
                "description": "description"
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://api.vellum.ai/v1/sandboxes/id/prompts/prompt_variant_id/deploy \\\n     -H \"X_API_KEY: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{}'",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from vellum import Vellum\n\nclient = Vellum(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.sandboxes.deploy_prompt(\n    id=\"id\",\n    prompt_variant_id=\"prompt_variant_id\",\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { VellumClient } from \"vellum-ai\";\n\nconst client = new VellumClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.sandboxes.deployPrompt(\"id\", \"prompt_variant_id\");\n",
                  "generated": true
                }
              ],
              "go": [
                {
                  "language": "go",
                  "code": "import (\n\tcontext \"context\"\n\toption \"github.com/vellum-ai/vellum-client-go/option\"\n\tvellumclientgo \"github.com/vellum-ai/vellum-client-go\"\n\tvellumclientgoclient \"github.com/vellum-ai/vellum-client-go/client\"\n)\n\nclient := vellumclientgoclient.NewClient(\n\toption.WithApiKey(\n\t\t\"<YOUR_ApiKey>\",\n\t),\n)\nresponse, err := client.Sandboxes.DeployPrompt(\n\tcontext.TODO(),\n\t\"id\",\n\t\"prompt_variant_id\",\n\t&vellumclientgo.DeploySandboxPromptRequest{},\n)\n",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "endpoint_sandboxes.upsert_sandbox_scenario": {
        "id": "endpoint_sandboxes.upsert_sandbox_scenario",
        "namespace": [
          "subpackage_sandboxes"
        ],
        "displayName": "Upsert Sandbox Scenario",
        "operationId": "upsert-sandbox-scenario",
        "description": "Upserts a new scenario for a sandbox, keying off of the optionally provided scenario id.\n\nIf an id is provided and has a match, the scenario will be updated. If no id is provided or no match\nis found, a new scenario will be appended to the end.\n\nNote that a full replacement of the scenario is performed, so any fields not provided will be removed\nor overwritten with default values.",
        "availability": "Beta",
        "method": "POST",
        "path": [
          {
            "type": "literal",
            "value": "/v1/sandboxes/"
          },
          {
            "type": "pathParameter",
            "value": "id"
          },
          {
            "type": "literal",
            "value": "/scenarios"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Production",
        "environments": [
          {
            "id": "Production",
            "baseUrl": "https://api.vellum.ai"
          }
        ],
        "pathParameters": [
          {
            "key": "id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "A UUID string identifying this sandbox."
          }
        ],
        "requests": [
          {
            "contentType": "application/json",
            "body": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "label",
                  "valueShape": {
                    "type": "alias",
                    "value": {
                      "type": "optional",
                      "shape": {
                        "type": "alias",
                        "value": {
                          "type": "primitive",
                          "value": {
                            "type": "string",
                            "default": "Untitled Scenario"
                          }
                        }
                      }
                    }
                  }
                },
                {
                  "key": "inputs",
                  "valueShape": {
                    "type": "alias",
                    "value": {
                      "type": "list",
                      "itemShape": {
                        "type": "alias",
                        "value": {
                          "type": "id",
                          "id": "type_:NamedScenarioInputRequest"
                        }
                      }
                    }
                  },
                  "description": "The inputs for the scenario"
                },
                {
                  "key": "scenario_id",
                  "valueShape": {
                    "type": "alias",
                    "value": {
                      "type": "optional",
                      "shape": {
                        "type": "alias",
                        "value": {
                          "type": "primitive",
                          "value": {
                            "type": "string",
                            "minLength": 1,
                            "maxLength": 1
                          }
                        }
                      }
                    }
                  },
                  "description": "The id of the scenario to update. If none is provided, an id will be generated and a new scenario will be appended."
                }
              ]
            }
          }
        ],
        "responses": [
          {
            "statusCode": 200,
            "body": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:SandboxScenario"
              }
            }
          }
        ],
        "examples": [
          {
            "path": "/v1/sandboxes/id/scenarios",
            "responseStatusCode": 200,
            "name": "Basic Example",
            "pathParameters": {
              "id": "id"
            },
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {
                "inputs": [
                  {
                    "type": "CHAT_HISTORY",
                    "name": "var_1",
                    "value": [
                      {
                        "role": "SYSTEM"
                      }
                    ]
                  },
                  {
                    "type": "CHAT_HISTORY",
                    "name": "var_2",
                    "value": [
                      {
                        "role": "SYSTEM"
                      }
                    ]
                  }
                ],
                "label": "Scenario 1"
              }
            },
            "responseBody": {
              "type": "json",
              "value": {
                "inputs": [
                  {
                    "type": "CHAT_HISTORY",
                    "input_variable_id": "inputs",
                    "value": [
                      {
                        "role": "SYSTEM"
                      }
                    ]
                  }
                ],
                "id": "id",
                "label": "label"
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://api.vellum.ai/v1/sandboxes/id/scenarios \\\n     -H \"X_API_KEY: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n  \"inputs\": [\n    {\n      \"type\": \"CHAT_HISTORY\",\n      \"name\": \"var_1\",\n      \"value\": [\n        {\n          \"role\": \"SYSTEM\"\n        }\n      ]\n    },\n    {\n      \"type\": \"CHAT_HISTORY\",\n      \"name\": \"var_2\",\n      \"value\": [\n        {\n          \"role\": \"SYSTEM\"\n        }\n      ]\n    }\n  ],\n  \"label\": \"Scenario 1\"\n}'",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from vellum import NamedScenarioInputStringVariableValueRequest, Vellum\n\nclient = Vellum(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.sandboxes.upsert_sandbox_scenario(\n    id=\"id\",\n    label=\"Scenario 1\",\n    inputs=[\n        NamedScenarioInputStringVariableValueRequest(\n            value=\"Hello, world!\",\n            name=\"var_1\",\n        ),\n        NamedScenarioInputStringVariableValueRequest(\n            value=\"Why hello, there!\",\n            name=\"var_2\",\n        ),\n    ],\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { VellumClient } from \"vellum-ai\";\n\nconst client = new VellumClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.sandboxes.upsertSandboxScenario(\"id\", {\n    label: \"Scenario 1\",\n    inputs: [{\n            type: \"STRING\",\n            value: \"Hello, world!\",\n            name: \"var_1\"\n        }, {\n            type: \"STRING\",\n            value: \"Why hello, there!\",\n            name: \"var_2\"\n        }]\n});\n",
                  "generated": true
                }
              ],
              "go": [
                {
                  "language": "go",
                  "code": "import (\n\tcontext \"context\"\n\toption \"github.com/vellum-ai/vellum-client-go/option\"\n\tvellumclientgo \"github.com/vellum-ai/vellum-client-go\"\n\tvellumclientgoclient \"github.com/vellum-ai/vellum-client-go/client\"\n)\n\nclient := vellumclientgoclient.NewClient(\n\toption.WithApiKey(\n\t\t\"<YOUR_ApiKey>\",\n\t),\n)\nresponse, err := client.Sandboxes.UpsertSandboxScenario(\n\tcontext.TODO(),\n\t\"id\",\n\t&vellumclientgo.UpsertSandboxScenarioRequest{\n\t\tLabel: vellumclientgo.String(\n\t\t\t\"Scenario 1\",\n\t\t),\n\t\tInputs: []*vellumclientgo.NamedScenarioInputRequest{\n\t\t\t&vellumclientgo.NamedScenarioInputRequest{\n\t\t\t\tNamedScenarioInputStringVariableValueRequest: &vellumclientgo.NamedScenarioInputStringVariableValueRequest{\n\t\t\t\t\tValue: vellumclientgo.String(\n\t\t\t\t\t\t\"Hello, world!\",\n\t\t\t\t\t),\n\t\t\t\t\tName: \"var_1\",\n\t\t\t\t},\n\t\t\t},\n\t\t\t&vellumclientgo.NamedScenarioInputRequest{\n\t\t\t\tNamedScenarioInputStringVariableValueRequest: &vellumclientgo.NamedScenarioInputStringVariableValueRequest{\n\t\t\t\t\tValue: vellumclientgo.String(\n\t\t\t\t\t\t\"Why hello, there!\",\n\t\t\t\t\t),\n\t\t\t\t\tName: \"var_2\",\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t},\n)\n",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/v1/sandboxes/id/scenarios",
            "responseStatusCode": 200,
            "name": "Chat History Example",
            "pathParameters": {
              "id": "id"
            },
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {
                "inputs": [
                  {
                    "type": "CHAT_HISTORY",
                    "name": "chat_history",
                    "value": [
                      {
                        "role": "USER",
                        "text": "What's your favorite color?"
                      },
                      {
                        "role": "ASSISTANT",
                        "text": "AI's don't have a favorite color.... Yet."
                      }
                    ]
                  }
                ],
                "label": "Scenario 2"
              }
            },
            "responseBody": {
              "type": "json",
              "value": {
                "inputs": [
                  {
                    "type": "CHAT_HISTORY",
                    "input_variable_id": "inputs",
                    "value": [
                      {
                        "role": "SYSTEM"
                      }
                    ]
                  }
                ],
                "id": "id",
                "label": "label"
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://api.vellum.ai/v1/sandboxes/id/scenarios \\\n     -H \"X_API_KEY: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n  \"inputs\": [\n    {\n      \"type\": \"CHAT_HISTORY\",\n      \"name\": \"chat_history\",\n      \"value\": [\n        {\n          \"role\": \"USER\",\n          \"text\": \"What\\'s your favorite color?\"\n        },\n        {\n          \"role\": \"ASSISTANT\",\n          \"text\": \"AI\\'s don\\'t have a favorite color.... Yet.\"\n        }\n      ]\n    }\n  ],\n  \"label\": \"Scenario 2\"\n}'",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from vellum import (\n    ChatMessageRequest,\n    NamedScenarioInputChatHistoryVariableValueRequest,\n    Vellum,\n)\n\nclient = Vellum(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.sandboxes.upsert_sandbox_scenario(\n    id=\"id\",\n    label=\"Scenario 2\",\n    inputs=[\n        NamedScenarioInputChatHistoryVariableValueRequest(\n            value=[\n                ChatMessageRequest(\n                    text=\"What's your favorite color?\",\n                    role=\"USER\",\n                ),\n                ChatMessageRequest(\n                    text=\"AI's don't have a favorite color.... Yet.\",\n                    role=\"ASSISTANT\",\n                ),\n            ],\n            name=\"chat_history\",\n        )\n    ],\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { VellumClient } from \"vellum-ai\";\n\nconst client = new VellumClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.sandboxes.upsertSandboxScenario(\"id\", {\n    label: \"Scenario 2\",\n    inputs: [{\n            type: \"CHAT_HISTORY\",\n            value: [{\n                    text: \"What's your favorite color?\",\n                    role: \"USER\"\n                }, {\n                    text: \"AI's don't have a favorite color.... Yet.\",\n                    role: \"ASSISTANT\"\n                }],\n            name: \"chat_history\"\n        }]\n});\n",
                  "generated": true
                }
              ],
              "go": [
                {
                  "language": "go",
                  "code": "import (\n\tcontext \"context\"\n\toption \"github.com/vellum-ai/vellum-client-go/option\"\n\tvellumclientgo \"github.com/vellum-ai/vellum-client-go\"\n\tvellumclientgoclient \"github.com/vellum-ai/vellum-client-go/client\"\n)\n\nclient := vellumclientgoclient.NewClient(\n\toption.WithApiKey(\n\t\t\"<YOUR_ApiKey>\",\n\t),\n)\nresponse, err := client.Sandboxes.UpsertSandboxScenario(\n\tcontext.TODO(),\n\t\"id\",\n\t&vellumclientgo.UpsertSandboxScenarioRequest{\n\t\tLabel: vellumclientgo.String(\n\t\t\t\"Scenario 1\",\n\t\t),\n\t\tInputs: []*vellumclientgo.NamedScenarioInputRequest{\n\t\t\t&vellumclientgo.NamedScenarioInputRequest{\n\t\t\t\tNamedScenarioInputStringVariableValueRequest: &vellumclientgo.NamedScenarioInputStringVariableValueRequest{\n\t\t\t\t\tValue: vellumclientgo.String(\n\t\t\t\t\t\t\"Hello, world!\",\n\t\t\t\t\t),\n\t\t\t\t\tName: \"var_1\",\n\t\t\t\t},\n\t\t\t},\n\t\t\t&vellumclientgo.NamedScenarioInputRequest{\n\t\t\t\tNamedScenarioInputStringVariableValueRequest: &vellumclientgo.NamedScenarioInputStringVariableValueRequest{\n\t\t\t\t\tValue: vellumclientgo.String(\n\t\t\t\t\t\t\"Why hello, there!\",\n\t\t\t\t\t),\n\t\t\t\t\tName: \"var_2\",\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t},\n)\n",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "endpoint_sandboxes.delete_sandbox_scenario": {
        "id": "endpoint_sandboxes.delete_sandbox_scenario",
        "namespace": [
          "subpackage_sandboxes"
        ],
        "displayName": "Delete Sandbox Scenario",
        "operationId": "delete-sandbox-scenario",
        "description": "Deletes an existing scenario from a sandbox, keying off of the provided scenario id.",
        "availability": "Beta",
        "method": "DELETE",
        "path": [
          {
            "type": "literal",
            "value": "/v1/sandboxes/"
          },
          {
            "type": "pathParameter",
            "value": "id"
          },
          {
            "type": "literal",
            "value": "/scenarios/"
          },
          {
            "type": "pathParameter",
            "value": "scenario_id"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Production",
        "environments": [
          {
            "id": "Production",
            "baseUrl": "https://api.vellum.ai"
          }
        ],
        "pathParameters": [
          {
            "key": "id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "A UUID string identifying this sandbox."
          },
          {
            "key": "scenario_id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "An id identifying the scenario that you'd like to delete"
          }
        ],
        "requests": [],
        "responses": [],
        "examples": [
          {
            "path": "/v1/sandboxes/id/scenarios/scenario_id",
            "responseStatusCode": 204,
            "pathParameters": {
              "id": "id",
              "scenario_id": "scenario_id"
            },
            "queryParameters": {},
            "headers": {},
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X DELETE https://api.vellum.ai/v1/sandboxes/id/scenarios/scenario_id \\\n     -H \"X_API_KEY: <apiKey>\"",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from vellum import Vellum\n\nclient = Vellum(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.sandboxes.delete_sandbox_scenario(\n    id=\"id\",\n    scenario_id=\"scenario_id\",\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { VellumClient } from \"vellum-ai\";\n\nconst client = new VellumClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.sandboxes.deleteSandboxScenario(\"id\", \"scenario_id\");\n",
                  "generated": true
                }
              ],
              "go": [
                {
                  "language": "go",
                  "code": "import (\n\tcontext \"context\"\n\toption \"github.com/vellum-ai/vellum-client-go/option\"\n\tvellumclientgoclient \"github.com/vellum-ai/vellum-client-go/client\"\n)\n\nclient := vellumclientgoclient.NewClient(\n\toption.WithApiKey(\n\t\t\"<YOUR_ApiKey>\",\n\t),\n)\nerr := client.Sandboxes.DeleteSandboxScenario(\n\tcontext.TODO(),\n\t\"id\",\n\t\"scenario_id\",\n)\n",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "endpoint_testSuiteRuns.create": {
        "id": "endpoint_testSuiteRuns.create",
        "namespace": [
          "subpackage_testSuiteRuns"
        ],
        "displayName": "Create",
        "operationId": "create",
        "description": "Trigger a Test Suite and create a new Test Suite Run",
        "availability": "Beta",
        "method": "POST",
        "path": [
          {
            "type": "literal",
            "value": "/v1/test-suite-runs"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Production",
        "environments": [
          {
            "id": "Production",
            "baseUrl": "https://api.vellum.ai"
          }
        ],
        "requests": [
          {
            "contentType": "application/json",
            "body": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "test_suite_id",
                  "valueShape": {
                    "type": "alias",
                    "value": {
                      "type": "optional",
                      "shape": {
                        "type": "alias",
                        "value": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "description": "The ID of the Test Suite to run. Must provide either this or test_suite_id."
                },
                {
                  "key": "test_suite_name",
                  "valueShape": {
                    "type": "alias",
                    "value": {
                      "type": "optional",
                      "shape": {
                        "type": "alias",
                        "value": {
                          "type": "primitive",
                          "value": {
                            "type": "string",
                            "minLength": 1,
                            "maxLength": 1
                          }
                        }
                      }
                    }
                  },
                  "description": "The name of the Test Suite to run. Must provide either this or test_suite_id."
                },
                {
                  "key": "exec_config",
                  "valueShape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:TestSuiteRunExecConfigRequest"
                    }
                  },
                  "description": "Configuration that defines how the Test Suite should be run"
                }
              ]
            }
          }
        ],
        "responses": [
          {
            "statusCode": 200,
            "body": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:TestSuiteRunRead"
              }
            }
          }
        ],
        "examples": [
          {
            "path": "/v1/test-suite-runs",
            "responseStatusCode": 200,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {
                "exec_config": {
                  "type": "EXTERNAL",
                  "data": {
                    "executions": [
                      {
                        "outputs": [
                          {
                            "type": "ARRAY",
                            "name": "outputs"
                          }
                        ],
                        "test_case_id": "test_case_id"
                      }
                    ]
                  }
                }
              }
            },
            "responseBody": {
              "type": "json",
              "value": {
                "id": "id",
                "created": "2024-01-15T09:30:00Z",
                "test_suite": {
                  "id": "id",
                  "history_item_id": "history_item_id",
                  "label": "label"
                },
                "state": "QUEUED",
                "exec_config": {
                  "type": "EXTERNAL",
                  "data": {
                    "executions": [
                      {
                        "outputs": [
                          {
                            "type": "ARRAY",
                            "name": "outputs"
                          }
                        ],
                        "test_case_id": "test_case_id"
                      }
                    ]
                  },
                  "test_case_ids": [
                    "exec_config"
                  ]
                }
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://api.vellum.ai/v1/test-suite-runs \\\n     -H \"X_API_KEY: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n  \"exec_config\": {\n    \"type\": \"EXTERNAL\",\n    \"data\": {\n      \"executions\": [\n        {\n          \"outputs\": [\n            {\n              \"type\": \"ARRAY\",\n              \"name\": \"outputs\"\n            }\n          ],\n          \"test_case_id\": \"test_case_id\"\n        }\n      ]\n    }\n  }\n}'",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from vellum import (\n    TestSuiteRunDeploymentReleaseTagExecConfigDataRequest,\n    TestSuiteRunDeploymentReleaseTagExecConfigRequest,\n    Vellum,\n)\n\nclient = Vellum(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.test_suite_runs.create(\n    exec_config=TestSuiteRunDeploymentReleaseTagExecConfigRequest(\n        data=TestSuiteRunDeploymentReleaseTagExecConfigDataRequest(\n            deployment_id=\"deployment_id\",\n        ),\n    ),\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { VellumClient } from \"vellum-ai\";\n\nconst client = new VellumClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.testSuiteRuns.create({\n    execConfig: {\n        type: \"DEPLOYMENT_RELEASE_TAG\",\n        data: {\n            deploymentId: \"deployment_id\"\n        }\n    }\n});\n",
                  "generated": true
                }
              ],
              "go": [
                {
                  "language": "go",
                  "code": "import (\n\tcontext \"context\"\n\toption \"github.com/vellum-ai/vellum-client-go/option\"\n\tvellumclientgo \"github.com/vellum-ai/vellum-client-go\"\n\tvellumclientgoclient \"github.com/vellum-ai/vellum-client-go/client\"\n)\n\nclient := vellumclientgoclient.NewClient(\n\toption.WithApiKey(\n\t\t\"<YOUR_ApiKey>\",\n\t),\n)\nresponse, err := client.TestSuiteRuns.Create(\n\tcontext.TODO(),\n\t&vellumclientgo.TestSuiteRunCreateRequest{\n\t\tExecConfig: &vellumclientgo.TestSuiteRunExecConfigRequest{\n\t\t\tTestSuiteRunDeploymentReleaseTagExecConfigRequest: &vellumclientgo.TestSuiteRunDeploymentReleaseTagExecConfigRequest{\n\t\t\t\tData: &vellumclientgo.TestSuiteRunDeploymentReleaseTagExecConfigDataRequest{\n\t\t\t\t\tDeploymentId: \"deployment_id\",\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t},\n)\n",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "endpoint_testSuiteRuns.retrieve": {
        "id": "endpoint_testSuiteRuns.retrieve",
        "namespace": [
          "subpackage_testSuiteRuns"
        ],
        "displayName": "Retrieve",
        "operationId": "retrieve",
        "description": "Retrieve a specific Test Suite Run by ID",
        "availability": "Beta",
        "method": "GET",
        "path": [
          {
            "type": "literal",
            "value": "/v1/test-suite-runs/"
          },
          {
            "type": "pathParameter",
            "value": "id"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Production",
        "environments": [
          {
            "id": "Production",
            "baseUrl": "https://api.vellum.ai"
          }
        ],
        "pathParameters": [
          {
            "key": "id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "A UUID string identifying this test suite run."
          }
        ],
        "requests": [],
        "responses": [
          {
            "statusCode": 200,
            "body": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:TestSuiteRunRead"
              }
            }
          }
        ],
        "examples": [
          {
            "path": "/v1/test-suite-runs/id",
            "responseStatusCode": 200,
            "pathParameters": {
              "id": "id"
            },
            "queryParameters": {},
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "id": "id",
                "created": "2024-01-15T09:30:00Z",
                "test_suite": {
                  "id": "id",
                  "history_item_id": "history_item_id",
                  "label": "label"
                },
                "state": "QUEUED",
                "exec_config": {
                  "type": "EXTERNAL",
                  "data": {
                    "executions": [
                      {
                        "outputs": [
                          {
                            "type": "ARRAY",
                            "name": "outputs"
                          }
                        ],
                        "test_case_id": "test_case_id"
                      }
                    ]
                  },
                  "test_case_ids": [
                    "exec_config"
                  ]
                }
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl https://api.vellum.ai/v1/test-suite-runs/id \\\n     -H \"X_API_KEY: <apiKey>\"",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from vellum import Vellum\n\nclient = Vellum(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.test_suite_runs.retrieve(\n    id=\"id\",\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { VellumClient } from \"vellum-ai\";\n\nconst client = new VellumClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.testSuiteRuns.retrieve(\"id\");\n",
                  "generated": true
                }
              ],
              "go": [
                {
                  "language": "go",
                  "code": "import (\n\tcontext \"context\"\n\toption \"github.com/vellum-ai/vellum-client-go/option\"\n\tvellumclientgoclient \"github.com/vellum-ai/vellum-client-go/client\"\n)\n\nclient := vellumclientgoclient.NewClient(\n\toption.WithApiKey(\n\t\t\"<YOUR_ApiKey>\",\n\t),\n)\nresponse, err := client.TestSuiteRuns.Retrieve(\n\tcontext.TODO(),\n\t\"id\",\n)\n",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "endpoint_testSuiteRuns.listExecutions": {
        "id": "endpoint_testSuiteRuns.listExecutions",
        "namespace": [
          "subpackage_testSuiteRuns"
        ],
        "displayName": "List Executions",
        "operationId": "list-executions",
        "availability": "Beta",
        "method": "GET",
        "path": [
          {
            "type": "literal",
            "value": "/v1/test-suite-runs/"
          },
          {
            "type": "pathParameter",
            "value": "id"
          },
          {
            "type": "literal",
            "value": "/executions"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Production",
        "environments": [
          {
            "id": "Production",
            "baseUrl": "https://api.vellum.ai"
          }
        ],
        "pathParameters": [
          {
            "key": "id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "A UUID string identifying this test suite run."
          }
        ],
        "queryParameters": [
          {
            "key": "expand",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "description": "The response fields to expand for more information.\n\n- 'results.metric_results.metric_label' expands the metric label for each metric result.\n- 'results.metric_results.metric_definition' expands the metric definition for each metric result.\n- 'results.metric_results.metric_definition.name' expands the metric definition name for each metric result."
          },
          {
            "key": "limit",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                }
              }
            },
            "description": "Number of results to return per page."
          },
          {
            "key": "offset",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                }
              }
            },
            "description": "The initial index from which to return the results."
          }
        ],
        "requests": [],
        "responses": [
          {
            "statusCode": 200,
            "body": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:PaginatedTestSuiteRunExecutionList"
              }
            }
          }
        ],
        "examples": [
          {
            "path": "/v1/test-suite-runs/id/executions",
            "responseStatusCode": 200,
            "pathParameters": {
              "id": "id"
            },
            "queryParameters": {},
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "count": 123,
                "results": [
                  {
                    "id": "id",
                    "test_case_id": "test_case_id",
                    "outputs": [
                      {
                        "type": "ARRAY",
                        "name": "outputs",
                        "output_variable_id": "outputs"
                      }
                    ],
                    "metric_results": [
                      {
                        "metric_id": "metric_id",
                        "outputs": [
                          {
                            "type": "ERROR",
                            "name": "outputs",
                            "value": {
                              "message": "message",
                              "code": "INVALID_REQUEST"
                            }
                          }
                        ]
                      }
                    ]
                  }
                ],
                "next": "http://api.example.org/accounts/?offset=400&limit=100",
                "previous": "http://api.example.org/accounts/?offset=200&limit=100"
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl https://api.vellum.ai/v1/test-suite-runs/id/executions \\\n     -H \"X_API_KEY: <apiKey>\"",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from vellum import Vellum\n\nclient = Vellum(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.test_suite_runs.list_executions(\n    id=\"id\",\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { VellumClient } from \"vellum-ai\";\n\nconst client = new VellumClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.testSuiteRuns.listExecutions(\"id\");\n",
                  "generated": true
                }
              ],
              "go": [
                {
                  "language": "go",
                  "code": "import (\n\tcontext \"context\"\n\toption \"github.com/vellum-ai/vellum-client-go/option\"\n\tvellumclientgo \"github.com/vellum-ai/vellum-client-go\"\n\tvellumclientgoclient \"github.com/vellum-ai/vellum-client-go/client\"\n)\n\nclient := vellumclientgoclient.NewClient(\n\toption.WithApiKey(\n\t\t\"<YOUR_ApiKey>\",\n\t),\n)\nresponse, err := client.TestSuiteRuns.ListExecutions(\n\tcontext.TODO(),\n\t\"id\",\n\t&vellumclientgo.TestSuiteRunsListExecutionsRequest{},\n)\n",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "endpoint_testSuites.list_test_suite_test_cases": {
        "id": "endpoint_testSuites.list_test_suite_test_cases",
        "namespace": [
          "subpackage_testSuites"
        ],
        "displayName": "List Test Suite Test Cases",
        "operationId": "list-test-suite-test-cases",
        "description": "List the Test Cases associated with a Test Suite",
        "availability": "Beta",
        "method": "GET",
        "path": [
          {
            "type": "literal",
            "value": "/v1/test-suites/"
          },
          {
            "type": "pathParameter",
            "value": "id"
          },
          {
            "type": "literal",
            "value": "/test-cases"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Production",
        "environments": [
          {
            "id": "Production",
            "baseUrl": "https://api.vellum.ai"
          }
        ],
        "pathParameters": [
          {
            "key": "id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "Either the Test Suites' ID or its unique name"
          }
        ],
        "queryParameters": [
          {
            "key": "limit",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                }
              }
            },
            "description": "Number of results to return per page."
          },
          {
            "key": "offset",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                }
              }
            },
            "description": "The initial index from which to return the results."
          }
        ],
        "requests": [],
        "responses": [
          {
            "statusCode": 200,
            "body": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:PaginatedTestSuiteTestCaseList"
              }
            }
          }
        ],
        "examples": [
          {
            "path": "/v1/test-suites/id/test-cases",
            "responseStatusCode": 200,
            "pathParameters": {
              "id": "id"
            },
            "queryParameters": {},
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "count": 123,
                "results": [
                  {
                    "input_values": [
                      {
                        "type": "ARRAY",
                        "name": "input_values",
                        "variable_id": "input_values"
                      }
                    ],
                    "evaluation_values": [
                      {
                        "type": "ARRAY",
                        "name": "evaluation_values",
                        "variable_id": "evaluation_values"
                      }
                    ],
                    "id": "id",
                    "external_id": "external_id",
                    "label": "label"
                  }
                ],
                "next": "http://api.example.org/accounts/?offset=400&limit=100",
                "previous": "http://api.example.org/accounts/?offset=200&limit=100"
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl https://api.vellum.ai/v1/test-suites/id/test-cases \\\n     -H \"X_API_KEY: <apiKey>\"",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from vellum import Vellum\n\nclient = Vellum(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.test_suites.list_test_suite_test_cases(\n    id=\"id\",\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { VellumClient } from \"vellum-ai\";\n\nconst client = new VellumClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.testSuites.listTestSuiteTestCases(\"id\");\n",
                  "generated": true
                }
              ],
              "go": [
                {
                  "language": "go",
                  "code": "import (\n\tcontext \"context\"\n\toption \"github.com/vellum-ai/vellum-client-go/option\"\n\tvellumclientgo \"github.com/vellum-ai/vellum-client-go\"\n\tvellumclientgoclient \"github.com/vellum-ai/vellum-client-go/client\"\n)\n\nclient := vellumclientgoclient.NewClient(\n\toption.WithApiKey(\n\t\t\"<YOUR_ApiKey>\",\n\t),\n)\nresponse, err := client.TestSuites.ListTestSuiteTestCases(\n\tcontext.TODO(),\n\t\"id\",\n\t&vellumclientgo.ListTestSuiteTestCasesRequest{},\n)\n",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "endpoint_testSuites.upsert_test_suite_test_case": {
        "id": "endpoint_testSuites.upsert_test_suite_test_case",
        "namespace": [
          "subpackage_testSuites"
        ],
        "displayName": "Upsert Test Suite Test Case",
        "operationId": "upsert-test-suite-test-case",
        "description": "Upserts a new test case for a test suite, keying off of the optionally provided test case id.\n\nIf an id is provided and has a match, the test case will be updated. If no id is provided or no match\nis found, a new test case will be appended to the end.\n\nNote that a full replacement of the test case is performed, so any fields not provided will be removed\nor overwritten with default values.",
        "availability": "Beta",
        "method": "POST",
        "path": [
          {
            "type": "literal",
            "value": "/v1/test-suites/"
          },
          {
            "type": "pathParameter",
            "value": "id"
          },
          {
            "type": "literal",
            "value": "/test-cases"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Production",
        "environments": [
          {
            "id": "Production",
            "baseUrl": "https://api.vellum.ai"
          }
        ],
        "pathParameters": [
          {
            "key": "id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "Either the Test Suites' ID or its unique name"
          }
        ],
        "requests": [
          {
            "contentType": "application/json",
            "body": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:UpsertTestSuiteTestCaseRequest"
              }
            }
          }
        ],
        "responses": [
          {
            "statusCode": 200,
            "body": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:TestSuiteTestCase"
              }
            }
          }
        ],
        "examples": [
          {
            "path": "/v1/test-suites/id/test-cases",
            "responseStatusCode": 200,
            "pathParameters": {
              "id": "id"
            },
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {
                "input_values": [
                  {
                    "type": "ARRAY",
                    "name": "input_values"
                  }
                ],
                "evaluation_values": [
                  {
                    "type": "ARRAY",
                    "name": "evaluation_values"
                  }
                ]
              }
            },
            "responseBody": {
              "type": "json",
              "value": {
                "input_values": [
                  {
                    "type": "ARRAY",
                    "name": "input_values",
                    "variable_id": "input_values",
                    "value": [
                      {
                        "type": "SEARCH_RESULTS"
                      }
                    ]
                  }
                ],
                "evaluation_values": [
                  {
                    "type": "ARRAY",
                    "name": "evaluation_values",
                    "variable_id": "evaluation_values",
                    "value": [
                      {
                        "type": "SEARCH_RESULTS"
                      }
                    ]
                  }
                ],
                "id": "id",
                "external_id": "external_id",
                "label": "label"
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://api.vellum.ai/v1/test-suites/id/test-cases \\\n     -H \"X_API_KEY: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n  \"input_values\": [\n    {\n      \"type\": \"ARRAY\",\n      \"name\": \"input_values\"\n    }\n  ],\n  \"evaluation_values\": [\n    {\n      \"type\": \"ARRAY\",\n      \"name\": \"evaluation_values\"\n    }\n  ]\n}'",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from vellum import NamedTestCaseStringVariableValueRequest, Vellum\n\nclient = Vellum(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.test_suites.upsert_test_suite_test_case(\n    id_=\"id\",\n    input_values=[\n        NamedTestCaseStringVariableValueRequest(\n            name=\"name\",\n        )\n    ],\n    evaluation_values=[\n        NamedTestCaseStringVariableValueRequest(\n            name=\"name\",\n        )\n    ],\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { VellumClient } from \"vellum-ai\";\n\nconst client = new VellumClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.testSuites.upsertTestSuiteTestCase(\"id\", {\n    inputValues: [{\n            type: \"STRING\",\n            name: \"name\"\n        }],\n    evaluationValues: [{\n            type: \"STRING\",\n            name: \"name\"\n        }]\n});\n",
                  "generated": true
                }
              ],
              "go": [
                {
                  "language": "go",
                  "code": "import (\n\tcontext \"context\"\n\toption \"github.com/vellum-ai/vellum-client-go/option\"\n\tvellumclientgo \"github.com/vellum-ai/vellum-client-go\"\n\tvellumclientgoclient \"github.com/vellum-ai/vellum-client-go/client\"\n)\n\nclient := vellumclientgoclient.NewClient(\n\toption.WithApiKey(\n\t\t\"<YOUR_ApiKey>\",\n\t),\n)\nresponse, err := client.TestSuites.UpsertTestSuiteTestCase(\n\tcontext.TODO(),\n\t\"id\",\n\t&vellumclientgo.UpsertTestSuiteTestCaseRequest{\n\t\tInputValues: []*vellumclientgo.NamedTestCaseVariableValueRequest{\n\t\t\t&vellumclientgo.NamedTestCaseVariableValueRequest{\n\t\t\t\tNamedTestCaseStringVariableValueRequest: &vellumclientgo.NamedTestCaseStringVariableValueRequest{\n\t\t\t\t\tName: \"name\",\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t\tEvaluationValues: []*vellumclientgo.NamedTestCaseVariableValueRequest{\n\t\t\t&vellumclientgo.NamedTestCaseVariableValueRequest{\n\t\t\t\tNamedTestCaseStringVariableValueRequest: &vellumclientgo.NamedTestCaseStringVariableValueRequest{\n\t\t\t\t\tName: \"name\",\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t},\n)\n",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "endpoint_testSuites.test_suite_test_cases_bulk": {
        "id": "endpoint_testSuites.test_suite_test_cases_bulk",
        "namespace": [
          "subpackage_testSuites"
        ],
        "displayName": "Test Suite Test Cases Bulk",
        "operationId": "test-suite-test-cases-bulk",
        "description": "Created, replace, and delete Test Cases within the specified Test Suite in bulk",
        "availability": "Beta",
        "method": "POST",
        "path": [
          {
            "type": "literal",
            "value": "/v1/test-suites/"
          },
          {
            "type": "pathParameter",
            "value": "id"
          },
          {
            "type": "literal",
            "value": "/test-cases-bulk"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Production",
        "environments": [
          {
            "id": "Production",
            "baseUrl": "https://api.vellum.ai"
          }
        ],
        "pathParameters": [
          {
            "key": "id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "Either the Test Suites' ID or its unique name"
          }
        ],
        "requests": [
          {
            "contentType": "application/json",
            "body": {
              "type": "alias",
              "value": {
                "type": "list",
                "itemShape": {
                  "type": "alias",
                  "value": {
                    "type": "id",
                    "id": "type_:TestSuiteTestCaseBulkOperationRequest"
                  }
                }
              }
            }
          }
        ],
        "responses": [
          {
            "statusCode": 200,
            "body": {
              "type": "stream",
              "shape": {
                "type": "alias",
                "value": {
                  "type": "list",
                  "itemShape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:TestSuiteTestCaseBulkResult"
                    }
                  }
                }
              }
            }
          }
        ],
        "examples": [
          {
            "path": "/v1/test-suites/:id/test-cases-bulk",
            "responseStatusCode": 200,
            "pathParameters": {
              "id": ":id"
            },
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": [
                {
                  "type": "CREATE",
                  "data": {
                    "input_values": [
                      {
                        "type": "STRING",
                        "name": "string"
                      }
                    ],
                    "evaluation_values": [
                      {
                        "type": "STRING",
                        "name": "string"
                      }
                    ]
                  },
                  "id": "string"
                }
              ]
            },
            "responseBody": {
              "type": "stream",
              "value": [
                [
                  {
                    "type": "CREATED",
                    "id": "string",
                    "data": {
                      "id": "string"
                    }
                  }
                ],
                [
                  {
                    "type": "CREATED",
                    "id": "string",
                    "data": {
                      "id": "string"
                    }
                  }
                ]
              ]
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://api.vellum.ai/v1/test-suites/:id/test-cases-bulk \\\n     -H \"X_API_KEY: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '[\n  {\n    \"type\": \"CREATE\",\n    \"data\": {\n      \"input_values\": [\n        {\n          \"type\": \"STRING\",\n          \"name\": \"string\"\n        }\n      ],\n      \"evaluation_values\": [\n        {\n          \"type\": \"STRING\",\n          \"name\": \"string\"\n        }\n      ]\n    },\n    \"id\": \"string\"\n  }\n]'",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from vellum import (\n    CreateTestSuiteTestCaseRequest,\n    NamedTestCaseStringVariableValueRequest,\n    TestSuiteTestCaseCreateBulkOperationRequest,\n    Vellum,\n)\n\nclient = Vellum(\n    api_key=\"YOUR_API_KEY\",\n)\nresponse = client.test_suites.test_suite_test_cases_bulk(\n    id=\"string\",\n    request=[\n        TestSuiteTestCaseCreateBulkOperationRequest(\n            id=\"string\",\n            data=CreateTestSuiteTestCaseRequest(\n                label=\"string\",\n                input_values=[\n                    NamedTestCaseStringVariableValueRequest(\n                        value=\"string\",\n                        name=\"string\",\n                    )\n                ],\n                evaluation_values=[\n                    NamedTestCaseStringVariableValueRequest(\n                        value=\"string\",\n                        name=\"string\",\n                    )\n                ],\n                external_id=\"string\",\n            ),\n        )\n    ],\n)\nfor chunk in response:\n    yield chunk\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { VellumClient } from \"vellum-ai\";\n\nconst client = new VellumClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.testSuites.testSuiteTestCasesBulk(\"string\", [{\n        id: \"string\",\n        type: \"CREATE\",\n        data: {\n            label: \"string\",\n            inputValues: [{\n                    type: \"STRING\",\n                    value: \"string\",\n                    name: \"string\"\n                }],\n            evaluationValues: [{\n                    type: \"STRING\",\n                    value: \"string\",\n                    name: \"string\"\n                }],\n            externalId: \"string\"\n        }\n    }]);\n",
                  "generated": true
                }
              ],
              "go": [
                {
                  "language": "go",
                  "code": "import (\n\tcontext \"context\"\n\toption \"github.com/vellum-ai/vellum-client-go/option\"\n\tvellumclientgo \"github.com/vellum-ai/vellum-client-go\"\n\tvellumclientgoclient \"github.com/vellum-ai/vellum-client-go/client\"\n)\n\nclient := vellumclientgoclient.NewClient(\n\toption.WithApiKey(\n\t\t\"<YOUR_ApiKey>\",\n\t),\n)\nresponse, err := client.TestSuites.TestSuiteTestCasesBulk(\n\tcontext.TODO(),\n\t\"string\",\n\t[]*vellumclientgo.TestSuiteTestCaseBulkOperationRequest{\n\t\t&vellumclientgo.TestSuiteTestCaseBulkOperationRequest{\n\t\t\tTestSuiteTestCaseCreateBulkOperationRequest: &vellumclientgo.TestSuiteTestCaseCreateBulkOperationRequest{\n\t\t\t\tId: \"string\",\n\t\t\t\tData: &vellumclientgo.CreateTestSuiteTestCaseRequest{\n\t\t\t\t\tLabel: vellumclientgo.String(\n\t\t\t\t\t\t\"string\",\n\t\t\t\t\t),\n\t\t\t\t\tInputValues: []*vellumclientgo.NamedTestCaseVariableValueRequest{\n\t\t\t\t\t\t&vellumclientgo.NamedTestCaseVariableValueRequest{\n\t\t\t\t\t\t\tNamedTestCaseStringVariableValueRequest: &vellumclientgo.NamedTestCaseStringVariableValueRequest{\n\t\t\t\t\t\t\t\tValue: vellumclientgo.String(\n\t\t\t\t\t\t\t\t\t\"string\",\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\tName: \"string\",\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\tEvaluationValues: []*vellumclientgo.NamedTestCaseVariableValueRequest{\n\t\t\t\t\t\t&vellumclientgo.NamedTestCaseVariableValueRequest{\n\t\t\t\t\t\t\tNamedTestCaseStringVariableValueRequest: &vellumclientgo.NamedTestCaseStringVariableValueRequest{\n\t\t\t\t\t\t\t\tValue: vellumclientgo.String(\n\t\t\t\t\t\t\t\t\t\"string\",\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\tName: \"string\",\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\tExternalId: vellumclientgo.String(\n\t\t\t\t\t\t\"string\",\n\t\t\t\t\t),\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t},\n)\n",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "endpoint_testSuites.delete_test_suite_test_case": {
        "id": "endpoint_testSuites.delete_test_suite_test_case",
        "namespace": [
          "subpackage_testSuites"
        ],
        "displayName": "Delete Test Suite Test Case",
        "operationId": "delete-test-suite-test-case",
        "description": "Deletes an existing test case for a test suite, keying off of the test case id.",
        "availability": "Beta",
        "method": "DELETE",
        "path": [
          {
            "type": "literal",
            "value": "/v1/test-suites/"
          },
          {
            "type": "pathParameter",
            "value": "id"
          },
          {
            "type": "literal",
            "value": "/test-cases/"
          },
          {
            "type": "pathParameter",
            "value": "test_case_id"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Production",
        "environments": [
          {
            "id": "Production",
            "baseUrl": "https://api.vellum.ai"
          }
        ],
        "pathParameters": [
          {
            "key": "id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "Either the Test Suites' ID or its unique name"
          },
          {
            "key": "test_case_id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "An id identifying the test case that you'd like to delete"
          }
        ],
        "requests": [],
        "responses": [],
        "examples": [
          {
            "path": "/v1/test-suites/id/test-cases/test_case_id",
            "responseStatusCode": 204,
            "pathParameters": {
              "id": "id",
              "test_case_id": "test_case_id"
            },
            "queryParameters": {},
            "headers": {},
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X DELETE https://api.vellum.ai/v1/test-suites/id/test-cases/test_case_id \\\n     -H \"X_API_KEY: <apiKey>\"",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from vellum import Vellum\n\nclient = Vellum(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.test_suites.delete_test_suite_test_case(\n    id=\"id\",\n    test_case_id=\"test_case_id\",\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { VellumClient } from \"vellum-ai\";\n\nconst client = new VellumClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.testSuites.deleteTestSuiteTestCase(\"id\", \"test_case_id\");\n",
                  "generated": true
                }
              ],
              "go": [
                {
                  "language": "go",
                  "code": "import (\n\tcontext \"context\"\n\toption \"github.com/vellum-ai/vellum-client-go/option\"\n\tvellumclientgoclient \"github.com/vellum-ai/vellum-client-go/client\"\n)\n\nclient := vellumclientgoclient.NewClient(\n\toption.WithApiKey(\n\t\t\"<YOUR_ApiKey>\",\n\t),\n)\nerr := client.TestSuites.DeleteTestSuiteTestCase(\n\tcontext.TODO(),\n\t\"id\",\n\t\"test_case_id\",\n)\n",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "endpoint_workflowDeployments.list": {
        "id": "endpoint_workflowDeployments.list",
        "namespace": [
          "subpackage_workflowDeployments"
        ],
        "displayName": "List",
        "operationId": "list",
        "description": "Used to list all Workflow Deployments.",
        "availability": "Beta",
        "method": "GET",
        "path": [
          {
            "type": "literal",
            "value": "/v1/workflow-deployments"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Production",
        "environments": [
          {
            "id": "Production",
            "baseUrl": "https://api.vellum.ai"
          }
        ],
        "queryParameters": [
          {
            "key": "limit",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                }
              }
            },
            "description": "Number of results to return per page."
          },
          {
            "key": "offset",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                }
              }
            },
            "description": "The initial index from which to return the results."
          },
          {
            "key": "ordering",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "description": "Which field to use when ordering the results."
          },
          {
            "key": "status",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "id",
                    "id": "type_workflowDeployments:WorkflowDeploymentsListRequestStatus"
                  }
                }
              }
            },
            "description": "status"
          }
        ],
        "requests": [],
        "responses": [
          {
            "statusCode": 200,
            "body": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:PaginatedSlimWorkflowDeploymentList"
              }
            }
          }
        ],
        "examples": [
          {
            "path": "/v1/workflow-deployments",
            "responseStatusCode": 200,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "count": 123,
                "next": "http://api.example.org/accounts/?offset=400&limit=100",
                "previous": "http://api.example.org/accounts/?offset=200&limit=100",
                "results": [
                  {
                    "id": "id",
                    "name": "name",
                    "label": "label",
                    "created": "2024-01-15T09:30:00Z",
                    "last_deployed_on": "2024-01-15T09:30:00Z",
                    "input_variables": [
                      {
                        "id": "id",
                        "key": "key",
                        "type": "STRING"
                      }
                    ],
                    "output_variables": [
                      {
                        "id": "id",
                        "key": "key",
                        "type": "STRING"
                      }
                    ],
                    "status": "ACTIVE",
                    "environment": "DEVELOPMENT",
                    "description": "description"
                  }
                ]
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl https://api.vellum.ai/v1/workflow-deployments \\\n     -H \"X_API_KEY: <apiKey>\"",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from vellum import Vellum\n\nclient = Vellum(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.workflow_deployments.list()\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { VellumClient } from \"vellum-ai\";\n\nconst client = new VellumClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.workflowDeployments.list();\n",
                  "generated": true
                }
              ],
              "go": [
                {
                  "language": "go",
                  "code": "import (\n\tcontext \"context\"\n\toption \"github.com/vellum-ai/vellum-client-go/option\"\n\tvellumclientgo \"github.com/vellum-ai/vellum-client-go\"\n\tvellumclientgoclient \"github.com/vellum-ai/vellum-client-go/client\"\n)\n\nclient := vellumclientgoclient.NewClient(\n\toption.WithApiKey(\n\t\t\"<YOUR_ApiKey>\",\n\t),\n)\nresponse, err := client.WorkflowDeployments.List(\n\tcontext.TODO(),\n\t&vellumclientgo.WorkflowDeploymentsListRequest{},\n)\n",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "endpoint_workflowDeployments.retrieve": {
        "id": "endpoint_workflowDeployments.retrieve",
        "namespace": [
          "subpackage_workflowDeployments"
        ],
        "displayName": "Retrieve",
        "operationId": "retrieve",
        "description": "Used to retrieve a workflow deployment given its ID or name.",
        "availability": "Beta",
        "method": "GET",
        "path": [
          {
            "type": "literal",
            "value": "/v1/workflow-deployments/"
          },
          {
            "type": "pathParameter",
            "value": "id"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Production",
        "environments": [
          {
            "id": "Production",
            "baseUrl": "https://api.vellum.ai"
          }
        ],
        "pathParameters": [
          {
            "key": "id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "Either the Workflow Deployment's ID or its unique name"
          }
        ],
        "requests": [],
        "responses": [
          {
            "statusCode": 200,
            "body": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:WorkflowDeploymentRead"
              }
            }
          }
        ],
        "examples": [
          {
            "path": "/v1/workflow-deployments/id",
            "responseStatusCode": 200,
            "pathParameters": {
              "id": "id"
            },
            "queryParameters": {},
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "id": "id",
                "name": "name",
                "label": "label",
                "created": "2024-01-15T09:30:00Z",
                "last_deployed_on": "2024-01-15T09:30:00Z",
                "last_deployed_history_item_id": "last_deployed_history_item_id",
                "input_variables": [
                  {
                    "id": "id",
                    "key": "key",
                    "type": "STRING",
                    "required": true,
                    "default": {
                      "type": "SEARCH_RESULTS"
                    }
                  }
                ],
                "output_variables": [
                  {
                    "id": "id",
                    "key": "key",
                    "type": "STRING",
                    "required": true,
                    "default": {
                      "type": "SEARCH_RESULTS"
                    }
                  }
                ],
                "status": "ACTIVE",
                "environment": "DEVELOPMENT",
                "description": "description"
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl https://api.vellum.ai/v1/workflow-deployments/id \\\n     -H \"X_API_KEY: <apiKey>\"",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from vellum import Vellum\n\nclient = Vellum(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.workflow_deployments.retrieve(\n    id=\"id\",\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { VellumClient } from \"vellum-ai\";\n\nconst client = new VellumClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.workflowDeployments.retrieve(\"id\");\n",
                  "generated": true
                }
              ],
              "go": [
                {
                  "language": "go",
                  "code": "import (\n\tcontext \"context\"\n\toption \"github.com/vellum-ai/vellum-client-go/option\"\n\tvellumclientgoclient \"github.com/vellum-ai/vellum-client-go/client\"\n)\n\nclient := vellumclientgoclient.NewClient(\n\toption.WithApiKey(\n\t\t\"<YOUR_ApiKey>\",\n\t),\n)\nresponse, err := client.WorkflowDeployments.Retrieve(\n\tcontext.TODO(),\n\t\"id\",\n)\n",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "endpoint_workflowDeployments.retrieve_workflow_release_tag": {
        "id": "endpoint_workflowDeployments.retrieve_workflow_release_tag",
        "namespace": [
          "subpackage_workflowDeployments"
        ],
        "displayName": "Retrieve Workflow Release Tag",
        "operationId": "retrieve-workflow-release-tag",
        "description": "Retrieve a Workflow Release Tag by tag name, associated with a specified Workflow Deployment.",
        "availability": "Beta",
        "method": "GET",
        "path": [
          {
            "type": "literal",
            "value": "/v1/workflow-deployments/"
          },
          {
            "type": "pathParameter",
            "value": "id"
          },
          {
            "type": "literal",
            "value": "/release-tags/"
          },
          {
            "type": "pathParameter",
            "value": "name"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Production",
        "environments": [
          {
            "id": "Production",
            "baseUrl": "https://api.vellum.ai"
          }
        ],
        "pathParameters": [
          {
            "key": "id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "A UUID string identifying this workflow deployment."
          },
          {
            "key": "name",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "The name of the Release Tag associated with this Workflow Deployment that you'd like to retrieve."
          }
        ],
        "requests": [],
        "responses": [
          {
            "statusCode": 200,
            "body": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:WorkflowReleaseTagRead"
              }
            }
          }
        ],
        "examples": [
          {
            "path": "/v1/workflow-deployments/id/release-tags/name",
            "responseStatusCode": 200,
            "pathParameters": {
              "id": "id",
              "name": "name"
            },
            "queryParameters": {},
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "name": "name",
                "source": "SYSTEM",
                "history_item": {
                  "id": "id",
                  "timestamp": "2024-01-15T09:30:00Z"
                }
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl https://api.vellum.ai/v1/workflow-deployments/id/release-tags/name \\\n     -H \"X_API_KEY: <apiKey>\"",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from vellum import Vellum\n\nclient = Vellum(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.workflow_deployments.retrieve_workflow_release_tag(\n    id=\"id\",\n    name=\"name\",\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { VellumClient } from \"vellum-ai\";\n\nconst client = new VellumClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.workflowDeployments.retrieveWorkflowReleaseTag(\"id\", \"name\");\n",
                  "generated": true
                }
              ],
              "go": [
                {
                  "language": "go",
                  "code": "import (\n\tcontext \"context\"\n\toption \"github.com/vellum-ai/vellum-client-go/option\"\n\tvellumclientgoclient \"github.com/vellum-ai/vellum-client-go/client\"\n)\n\nclient := vellumclientgoclient.NewClient(\n\toption.WithApiKey(\n\t\t\"<YOUR_ApiKey>\",\n\t),\n)\nresponse, err := client.WorkflowDeployments.RetrieveWorkflowReleaseTag(\n\tcontext.TODO(),\n\t\"id\",\n\t\"name\",\n)\n",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "endpoint_workflowDeployments.update_workflow_release_tag": {
        "id": "endpoint_workflowDeployments.update_workflow_release_tag",
        "namespace": [
          "subpackage_workflowDeployments"
        ],
        "displayName": "Update Workflow Release Tag",
        "operationId": "update-workflow-release-tag",
        "description": "Updates an existing Release Tag associated with the specified Workflow Deployment.",
        "availability": "Beta",
        "method": "PATCH",
        "path": [
          {
            "type": "literal",
            "value": "/v1/workflow-deployments/"
          },
          {
            "type": "pathParameter",
            "value": "id"
          },
          {
            "type": "literal",
            "value": "/release-tags/"
          },
          {
            "type": "pathParameter",
            "value": "name"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Production",
        "environments": [
          {
            "id": "Production",
            "baseUrl": "https://api.vellum.ai"
          }
        ],
        "pathParameters": [
          {
            "key": "id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "A UUID string identifying this workflow deployment."
          },
          {
            "key": "name",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "The name of the Release Tag associated with this Workflow Deployment that you'd like to update."
          }
        ],
        "requests": [
          {
            "contentType": "application/json",
            "body": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "history_item_id",
                  "valueShape": {
                    "type": "alias",
                    "value": {
                      "type": "optional",
                      "shape": {
                        "type": "alias",
                        "value": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "description": "The ID of the Workflow Deployment History Item to tag"
                }
              ]
            }
          }
        ],
        "responses": [
          {
            "statusCode": 200,
            "body": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:WorkflowReleaseTagRead"
              }
            }
          }
        ],
        "examples": [
          {
            "path": "/v1/workflow-deployments/id/release-tags/name",
            "responseStatusCode": 200,
            "pathParameters": {
              "id": "id",
              "name": "name"
            },
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {}
            },
            "responseBody": {
              "type": "json",
              "value": {
                "name": "name",
                "source": "SYSTEM",
                "history_item": {
                  "id": "id",
                  "timestamp": "2024-01-15T09:30:00Z"
                }
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X PATCH https://api.vellum.ai/v1/workflow-deployments/id/release-tags/name \\\n     -H \"X_API_KEY: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{}'",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from vellum import Vellum\n\nclient = Vellum(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.workflow_deployments.update_workflow_release_tag(\n    id=\"id\",\n    name=\"name\",\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { VellumClient } from \"vellum-ai\";\n\nconst client = new VellumClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.workflowDeployments.updateWorkflowReleaseTag(\"id\", \"name\");\n",
                  "generated": true
                }
              ],
              "go": [
                {
                  "language": "go",
                  "code": "import (\n\tcontext \"context\"\n\toption \"github.com/vellum-ai/vellum-client-go/option\"\n\tvellumclientgo \"github.com/vellum-ai/vellum-client-go\"\n\tvellumclientgoclient \"github.com/vellum-ai/vellum-client-go/client\"\n)\n\nclient := vellumclientgoclient.NewClient(\n\toption.WithApiKey(\n\t\t\"<YOUR_ApiKey>\",\n\t),\n)\nresponse, err := client.WorkflowDeployments.UpdateWorkflowReleaseTag(\n\tcontext.TODO(),\n\t\"id\",\n\t\"name\",\n\t&vellumclientgo.PatchedWorkflowReleaseTagUpdateRequest{},\n)\n",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "endpoint_workflowSandboxes.deploy_workflow": {
        "id": "endpoint_workflowSandboxes.deploy_workflow",
        "namespace": [
          "subpackage_workflowSandboxes"
        ],
        "displayName": "Deploy Workflow",
        "operationId": "deploy-workflow",
        "availability": "Beta",
        "method": "POST",
        "path": [
          {
            "type": "literal",
            "value": "/v1/workflow-sandboxes/"
          },
          {
            "type": "pathParameter",
            "value": "id"
          },
          {
            "type": "literal",
            "value": "/workflows/"
          },
          {
            "type": "pathParameter",
            "value": "workflow_id"
          },
          {
            "type": "literal",
            "value": "/deploy"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Production",
        "environments": [
          {
            "id": "Production",
            "baseUrl": "https://api.vellum.ai"
          }
        ],
        "pathParameters": [
          {
            "key": "id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "A UUID string identifying this workflow sandbox."
          },
          {
            "key": "workflow_id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "An ID identifying the Workflow you'd like to deploy."
          }
        ],
        "requests": [
          {
            "contentType": "application/json",
            "body": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "workflow_deployment_id",
                  "valueShape": {
                    "type": "alias",
                    "value": {
                      "type": "optional",
                      "shape": {
                        "type": "alias",
                        "value": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "description": "The Vellum-generated ID of the Workflow Deployment you'd like to update. Cannot specify both this and workflow_deployment_name. Leave null to create a new Workflow Deployment."
                },
                {
                  "key": "workflow_deployment_name",
                  "valueShape": {
                    "type": "alias",
                    "value": {
                      "type": "optional",
                      "shape": {
                        "type": "alias",
                        "value": {
                          "type": "primitive",
                          "value": {
                            "type": "string",
                            "minLength": 1,
                            "maxLength": 1
                          }
                        }
                      }
                    }
                  },
                  "description": "The unique name of the Workflow Deployment you'd like to either create or update. Cannot specify both this and workflow_deployment_id. If provided and matches an existing Workflow Deployment, that Workflow Deployment will be updated. Otherwise, a new Prompt Deployment will be created."
                },
                {
                  "key": "label",
                  "valueShape": {
                    "type": "alias",
                    "value": {
                      "type": "optional",
                      "shape": {
                        "type": "alias",
                        "value": {
                          "type": "primitive",
                          "value": {
                            "type": "string",
                            "minLength": 1,
                            "maxLength": 1
                          }
                        }
                      }
                    }
                  },
                  "description": "In the event that a new Workflow Deployment is created, this will be the label it's given."
                },
                {
                  "key": "release_tags",
                  "valueShape": {
                    "type": "alias",
                    "value": {
                      "type": "optional",
                      "shape": {
                        "type": "alias",
                        "value": {
                          "type": "list",
                          "itemShape": {
                            "type": "alias",
                            "value": {
                              "type": "primitive",
                              "value": {
                                "type": "string"
                              }
                            }
                          }
                        }
                      }
                    }
                  },
                  "description": "Optionally provide the release tags that you'd like to be associated with the latest release of the created/updated Prompt Deployment."
                }
              ]
            }
          }
        ],
        "responses": [
          {
            "statusCode": 200,
            "body": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:WorkflowDeploymentRead"
              }
            }
          }
        ],
        "examples": [
          {
            "path": "/v1/workflow-sandboxes/id/workflows/workflow_id/deploy",
            "responseStatusCode": 200,
            "pathParameters": {
              "id": "id",
              "workflow_id": "workflow_id"
            },
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {}
            },
            "responseBody": {
              "type": "json",
              "value": {
                "id": "id",
                "name": "name",
                "label": "label",
                "created": "2024-01-15T09:30:00Z",
                "last_deployed_on": "2024-01-15T09:30:00Z",
                "last_deployed_history_item_id": "last_deployed_history_item_id",
                "input_variables": [
                  {
                    "id": "id",
                    "key": "key",
                    "type": "STRING",
                    "required": true,
                    "default": {
                      "type": "SEARCH_RESULTS"
                    }
                  }
                ],
                "output_variables": [
                  {
                    "id": "id",
                    "key": "key",
                    "type": "STRING",
                    "required": true,
                    "default": {
                      "type": "SEARCH_RESULTS"
                    }
                  }
                ],
                "status": "ACTIVE",
                "environment": "DEVELOPMENT",
                "description": "description"
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://api.vellum.ai/v1/workflow-sandboxes/id/workflows/workflow_id/deploy \\\n     -H \"X_API_KEY: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{}'",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from vellum import Vellum\n\nclient = Vellum(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.workflow_sandboxes.deploy_workflow(\n    id=\"id\",\n    workflow_id=\"workflow_id\",\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { VellumClient } from \"vellum-ai\";\n\nconst client = new VellumClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.workflowSandboxes.deployWorkflow(\"id\", \"workflow_id\");\n",
                  "generated": true
                }
              ],
              "go": [
                {
                  "language": "go",
                  "code": "import (\n\tcontext \"context\"\n\toption \"github.com/vellum-ai/vellum-client-go/option\"\n\tvellumclientgo \"github.com/vellum-ai/vellum-client-go\"\n\tvellumclientgoclient \"github.com/vellum-ai/vellum-client-go/client\"\n)\n\nclient := vellumclientgoclient.NewClient(\n\toption.WithApiKey(\n\t\t\"<YOUR_ApiKey>\",\n\t),\n)\nresponse, err := client.WorkflowSandboxes.DeployWorkflow(\n\tcontext.TODO(),\n\t\"id\",\n\t\"workflow_id\",\n\t&vellumclientgo.DeploySandboxWorkflowRequest{},\n)\n",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "endpoint_workspaceSecrets.retrieve": {
        "id": "endpoint_workspaceSecrets.retrieve",
        "namespace": [
          "subpackage_workspaceSecrets"
        ],
        "displayName": "Retrieve",
        "operationId": "retrieve",
        "description": "Used to retrieve a Workspace Secret given its ID or name.",
        "availability": "Beta",
        "method": "GET",
        "path": [
          {
            "type": "literal",
            "value": "/v1/workspace-secrets/"
          },
          {
            "type": "pathParameter",
            "value": "id"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Production",
        "environments": [
          {
            "id": "Production",
            "baseUrl": "https://api.vellum.ai"
          }
        ],
        "pathParameters": [
          {
            "key": "id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "Either the Workspace Secret's ID or its unique name"
          }
        ],
        "requests": [],
        "responses": [
          {
            "statusCode": 200,
            "body": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:WorkspaceSecretRead"
              }
            }
          }
        ],
        "examples": [
          {
            "path": "/v1/workspace-secrets/id",
            "responseStatusCode": 200,
            "pathParameters": {
              "id": "id"
            },
            "queryParameters": {},
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "id": "id",
                "modified": "2024-01-15T09:30:00Z",
                "name": "name",
                "label": "label",
                "secret_type": "USER_DEFINED"
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl https://api.vellum.ai/v1/workspace-secrets/id \\\n     -H \"X_API_KEY: <apiKey>\"",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from vellum import Vellum\n\nclient = Vellum(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.workspace_secrets.retrieve(\n    id=\"id\",\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { VellumClient } from \"vellum-ai\";\n\nconst client = new VellumClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.workspaceSecrets.retrieve(\"id\");\n",
                  "generated": true
                }
              ],
              "go": [
                {
                  "language": "go",
                  "code": "import (\n\tcontext \"context\"\n\toption \"github.com/vellum-ai/vellum-client-go/option\"\n\tvellumclientgoclient \"github.com/vellum-ai/vellum-client-go/client\"\n)\n\nclient := vellumclientgoclient.NewClient(\n\toption.WithApiKey(\n\t\t\"<YOUR_ApiKey>\",\n\t),\n)\nresponse, err := client.WorkspaceSecrets.Retrieve(\n\tcontext.TODO(),\n\t\"id\",\n)\n",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "endpoint_workspaceSecrets.partialUpdate": {
        "id": "endpoint_workspaceSecrets.partialUpdate",
        "namespace": [
          "subpackage_workspaceSecrets"
        ],
        "displayName": "Partial Update",
        "operationId": "partial-update",
        "description": "Used to update a Workspace Secret given its ID or name.",
        "availability": "Beta",
        "method": "PATCH",
        "path": [
          {
            "type": "literal",
            "value": "/v1/workspace-secrets/"
          },
          {
            "type": "pathParameter",
            "value": "id"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Production",
        "environments": [
          {
            "id": "Production",
            "baseUrl": "https://api.vellum.ai"
          }
        ],
        "pathParameters": [
          {
            "key": "id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "Either the Workspace Secret's ID or its unique name"
          }
        ],
        "requests": [
          {
            "contentType": "application/json",
            "body": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "label",
                  "valueShape": {
                    "type": "alias",
                    "value": {
                      "type": "optional",
                      "shape": {
                        "type": "alias",
                        "value": {
                          "type": "primitive",
                          "value": {
                            "type": "string",
                            "minLength": 1,
                            "maxLength": 1
                          }
                        }
                      }
                    }
                  }
                },
                {
                  "key": "value",
                  "valueShape": {
                    "type": "alias",
                    "value": {
                      "type": "optional",
                      "shape": {
                        "type": "alias",
                        "value": {
                          "type": "primitive",
                          "value": {
                            "type": "string",
                            "minLength": 1,
                            "maxLength": 1
                          }
                        }
                      }
                    }
                  }
                }
              ]
            }
          }
        ],
        "responses": [
          {
            "statusCode": 200,
            "body": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:WorkspaceSecretRead"
              }
            }
          }
        ],
        "examples": [
          {
            "path": "/v1/workspace-secrets/id",
            "responseStatusCode": 200,
            "pathParameters": {
              "id": "id"
            },
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {}
            },
            "responseBody": {
              "type": "json",
              "value": {
                "id": "id",
                "modified": "2024-01-15T09:30:00Z",
                "name": "name",
                "label": "label",
                "secret_type": "USER_DEFINED"
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X PATCH https://api.vellum.ai/v1/workspace-secrets/id \\\n     -H \"X_API_KEY: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{}'",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from vellum import Vellum\n\nclient = Vellum(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.workspace_secrets.partial_update(\n    id=\"id\",\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { VellumClient } from \"vellum-ai\";\n\nconst client = new VellumClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.workspaceSecrets.partialUpdate(\"id\");\n",
                  "generated": true
                }
              ],
              "go": [
                {
                  "language": "go",
                  "code": "import (\n\tcontext \"context\"\n\toption \"github.com/vellum-ai/vellum-client-go/option\"\n\tvellumclientgo \"github.com/vellum-ai/vellum-client-go\"\n\tvellumclientgoclient \"github.com/vellum-ai/vellum-client-go/client\"\n)\n\nclient := vellumclientgoclient.NewClient(\n\toption.WithApiKey(\n\t\t\"<YOUR_ApiKey>\",\n\t),\n)\nresponse, err := client.WorkspaceSecrets.PartialUpdate(\n\tcontext.TODO(),\n\t\"id\",\n\t&vellumclientgo.PatchedWorkspaceSecretUpdateRequest{},\n)\n",
                  "generated": true
                }
              ]
            }
          }
        ]
      }
    },
    "websockets": {},
    "webhooks": {},
    "types": {
      "type_deployments:DeploymentsListRequestStatus": {
        "name": "DeploymentsListRequestStatus",
        "shape": {
          "type": "enum",
          "values": [
            {
              "value": "ACTIVE"
            },
            {
              "value": "ARCHIVED"
            }
          ]
        }
      },
      "type_documentIndexes:DocumentIndexesListRequestStatus": {
        "name": "DocumentIndexesListRequestStatus",
        "shape": {
          "type": "enum",
          "values": [
            {
              "value": "ACTIVE"
            },
            {
              "value": "ARCHIVED"
            }
          ]
        }
      },
      "type_folderEntities:FolderEntitiesListRequestEntityStatus": {
        "name": "FolderEntitiesListRequestEntityStatus",
        "shape": {
          "type": "enum",
          "values": [
            {
              "value": "ACTIVE"
            },
            {
              "value": "ARCHIVED"
            }
          ]
        }
      },
      "type_workflowDeployments:WorkflowDeploymentsListRequestStatus": {
        "name": "WorkflowDeploymentsListRequestStatus",
        "shape": {
          "type": "enum",
          "values": [
            {
              "value": "ACTIVE"
            },
            {
              "value": "ARCHIVED"
            }
          ]
        }
      },
      "type_:AddOpenaiApiKeyEnum": {
        "name": "AddOpenaiApiKeyEnum",
        "description": "- `True` - True",
        "shape": {
          "type": "alias",
          "value": {
            "type": "primitive",
            "value": {
              "type": "boolean"
            }
          }
        }
      },
      "type_:ApiNodeResult": {
        "name": "ApiNodeResult",
        "description": "A Node Result Event emitted from an API Node.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "data",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:ApiNodeResultData"
                }
              }
            }
          ]
        }
      },
      "type_:ApiNodeResultData": {
        "name": "ApiNodeResultData",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "json",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "map",
                      "keyShape": {
                        "type": "alias",
                        "value": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      },
                      "valueShape": {
                        "type": "alias",
                        "value": {
                          "type": "unknown"
                        }
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "text_output_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "key": "text",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "json_output_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "key": "status_code_output_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "key": "status_code",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              }
            }
          ]
        }
      },
      "type_:ArrayChatMessageContent": {
        "name": "ArrayChatMessageContent",
        "description": "A list of chat message content items.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "value",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "list",
                  "itemShape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:ArrayChatMessageContentItem"
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_:ArrayChatMessageContentItem": {
        "name": "ArrayChatMessageContentItem",
        "shape": {
          "type": "discriminatedUnion",
          "discriminant": "type",
          "variants": [
            {
              "discriminantValue": "STRING",
              "extends": [
                "type_:StringChatMessageContent"
              ],
              "properties": []
            },
            {
              "discriminantValue": "FUNCTION_CALL",
              "extends": [
                "type_:FunctionCallChatMessageContent"
              ],
              "properties": []
            },
            {
              "discriminantValue": "IMAGE",
              "extends": [
                "type_:ImageChatMessageContent"
              ],
              "properties": []
            },
            {
              "discriminantValue": "AUDIO",
              "extends": [
                "type_:AudioChatMessageContent"
              ],
              "properties": []
            }
          ]
        }
      },
      "type_:ArrayChatMessageContentItemRequest": {
        "name": "ArrayChatMessageContentItemRequest",
        "shape": {
          "type": "discriminatedUnion",
          "discriminant": "type",
          "variants": [
            {
              "discriminantValue": "STRING",
              "extends": [
                "type_:StringChatMessageContentRequest"
              ],
              "properties": []
            },
            {
              "discriminantValue": "FUNCTION_CALL",
              "extends": [
                "type_:FunctionCallChatMessageContentRequest"
              ],
              "properties": []
            },
            {
              "discriminantValue": "IMAGE",
              "extends": [
                "type_:ImageChatMessageContentRequest"
              ],
              "properties": []
            },
            {
              "discriminantValue": "AUDIO",
              "extends": [
                "type_:AudioChatMessageContentRequest"
              ],
              "properties": []
            }
          ]
        }
      },
      "type_:ArrayChatMessageContentRequest": {
        "name": "ArrayChatMessageContentRequest",
        "description": "A list of chat message content items.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "value",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "list",
                  "itemShape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:ArrayChatMessageContentItemRequest"
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_:ArrayVariableValue": {
        "name": "ArrayVariableValue",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "value",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "list",
                      "itemShape": {
                        "type": "alias",
                        "value": {
                          "type": "id",
                          "id": "type_:ArrayVariableValueItem"
                        }
                      }
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_:ArrayVariableValueItem": {
        "name": "ArrayVariableValueItem",
        "shape": {
          "type": "discriminatedUnion",
          "discriminant": "type",
          "variants": [
            {
              "discriminantValue": "STRING",
              "extends": [
                "type_:StringVariableValue"
              ],
              "properties": []
            },
            {
              "discriminantValue": "NUMBER",
              "extends": [
                "type_:NumberVariableValue"
              ],
              "properties": []
            },
            {
              "discriminantValue": "JSON",
              "extends": [
                "type_:JsonVariableValue"
              ],
              "properties": []
            },
            {
              "discriminantValue": "ERROR",
              "extends": [
                "type_:ErrorVariableValue"
              ],
              "properties": []
            },
            {
              "discriminantValue": "FUNCTION_CALL",
              "extends": [
                "type_:FunctionCallVariableValue"
              ],
              "properties": []
            },
            {
              "discriminantValue": "IMAGE",
              "extends": [
                "type_:ImageVariableValue"
              ],
              "properties": []
            },
            {
              "discriminantValue": "CHAT_HISTORY",
              "extends": [
                "type_:ChatHistoryVariableValue"
              ],
              "properties": []
            },
            {
              "discriminantValue": "SEARCH_RESULTS",
              "extends": [
                "type_:SearchResultsVariableValue"
              ],
              "properties": []
            },
            {
              "discriminantValue": "ARRAY",
              "extends": [
                "type_:ArrayVariableValue"
              ],
              "properties": []
            }
          ]
        }
      },
      "type_:ArrayVellumValue": {
        "name": "ArrayVellumValue",
        "description": "A value representing an array of Vellum variable values.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "value",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "list",
                      "itemShape": {
                        "type": "alias",
                        "value": {
                          "type": "id",
                          "id": "type_:VellumValue"
                        }
                      }
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_:ArrayVellumValueRequest": {
        "name": "ArrayVellumValueRequest",
        "description": "A value representing an array of Vellum variable values.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "value",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "list",
                      "itemShape": {
                        "type": "alias",
                        "value": {
                          "type": "id",
                          "id": "type_:VellumValueRequest"
                        }
                      }
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_:AudioChatMessageContent": {
        "name": "AudioChatMessageContent",
        "description": "An audio value that is used in a chat message.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "value",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:VellumAudio"
                }
              }
            }
          ]
        }
      },
      "type_:AudioChatMessageContentRequest": {
        "name": "AudioChatMessageContentRequest",
        "description": "An audio value that is used in a chat message.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "value",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:VellumAudioRequest"
                }
              }
            }
          ]
        }
      },
      "type_:BasicVectorizerIntfloatMultilingualE5Large": {
        "name": "BasicVectorizerIntfloatMultilingualE5Large",
        "description": "Basic vectorizer for intfloat/multilingual-e5-large.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "config",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "map",
                      "keyShape": {
                        "type": "alias",
                        "value": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      },
                      "valueShape": {
                        "type": "alias",
                        "value": {
                          "type": "unknown"
                        }
                      }
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_:BasicVectorizerIntfloatMultilingualE5LargeRequest": {
        "name": "BasicVectorizerIntfloatMultilingualE5LargeRequest",
        "description": "Basic vectorizer for intfloat/multilingual-e5-large.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "config",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "map",
                      "keyShape": {
                        "type": "alias",
                        "value": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      },
                      "valueShape": {
                        "type": "alias",
                        "value": {
                          "type": "unknown"
                        }
                      }
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_:BasicVectorizerSentenceTransformersMultiQaMpnetBaseCosV1": {
        "name": "BasicVectorizerSentenceTransformersMultiQaMpnetBaseCosV1",
        "description": "Basic vectorizer for sentence-transformers/multi-qa-mpnet-base-cos-v1.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "config",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "map",
                      "keyShape": {
                        "type": "alias",
                        "value": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      },
                      "valueShape": {
                        "type": "alias",
                        "value": {
                          "type": "unknown"
                        }
                      }
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_:BasicVectorizerSentenceTransformersMultiQaMpnetBaseCosV1Request": {
        "name": "BasicVectorizerSentenceTransformersMultiQaMpnetBaseCosV1Request",
        "description": "Basic vectorizer for sentence-transformers/multi-qa-mpnet-base-cos-v1.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "config",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "map",
                      "keyShape": {
                        "type": "alias",
                        "value": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      },
                      "valueShape": {
                        "type": "alias",
                        "value": {
                          "type": "unknown"
                        }
                      }
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_:BasicVectorizerSentenceTransformersMultiQaMpnetBaseDotV1": {
        "name": "BasicVectorizerSentenceTransformersMultiQaMpnetBaseDotV1",
        "description": "Basic vectorizer for sentence-transformers/multi-qa-mpnet-base-dot-v1.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "config",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "map",
                      "keyShape": {
                        "type": "alias",
                        "value": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      },
                      "valueShape": {
                        "type": "alias",
                        "value": {
                          "type": "unknown"
                        }
                      }
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_:BasicVectorizerSentenceTransformersMultiQaMpnetBaseDotV1Request": {
        "name": "BasicVectorizerSentenceTransformersMultiQaMpnetBaseDotV1Request",
        "description": "Basic vectorizer for sentence-transformers/multi-qa-mpnet-base-dot-v1.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "config",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "map",
                      "keyShape": {
                        "type": "alias",
                        "value": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      },
                      "valueShape": {
                        "type": "alias",
                        "value": {
                          "type": "unknown"
                        }
                      }
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_:ChatHistoryInputRequest": {
        "name": "ChatHistoryInputRequest",
        "description": "A user input representing a list of chat messages",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "name",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 1
                  }
                }
              },
              "description": "The variable's name, as defined in the deployment."
            },
            {
              "key": "value",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "list",
                  "itemShape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:ChatMessageRequest"
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_:ChatHistoryVariableValue": {
        "name": "ChatHistoryVariableValue",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "value",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "list",
                      "itemShape": {
                        "type": "alias",
                        "value": {
                          "type": "id",
                          "id": "type_:ChatMessage"
                        }
                      }
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_:ChatHistoryVellumValue": {
        "name": "ChatHistoryVellumValue",
        "description": "A value representing Chat History.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "value",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "list",
                      "itemShape": {
                        "type": "alias",
                        "value": {
                          "type": "id",
                          "id": "type_:ChatMessage"
                        }
                      }
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_:ChatHistoryVellumValueRequest": {
        "name": "ChatHistoryVellumValueRequest",
        "description": "A value representing Chat History.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "value",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "list",
                      "itemShape": {
                        "type": "alias",
                        "value": {
                          "type": "id",
                          "id": "type_:ChatMessageRequest"
                        }
                      }
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_:ChatMessage": {
        "name": "ChatMessage",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "text",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "role",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:ChatMessageRole"
                }
              }
            },
            {
              "key": "content",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:ChatMessageContent"
                    }
                  }
                }
              }
            },
            {
              "key": "source",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "An optional identifier representing who or what generated this message."
            }
          ]
        }
      },
      "type_:ChatMessageContent": {
        "name": "ChatMessageContent",
        "shape": {
          "type": "discriminatedUnion",
          "discriminant": "type",
          "variants": [
            {
              "discriminantValue": "STRING",
              "extends": [
                "type_:StringChatMessageContent"
              ],
              "properties": []
            },
            {
              "discriminantValue": "FUNCTION_CALL",
              "extends": [
                "type_:FunctionCallChatMessageContent"
              ],
              "properties": []
            },
            {
              "discriminantValue": "ARRAY",
              "extends": [
                "type_:ArrayChatMessageContent"
              ],
              "properties": []
            },
            {
              "discriminantValue": "IMAGE",
              "extends": [
                "type_:ImageChatMessageContent"
              ],
              "properties": []
            },
            {
              "discriminantValue": "AUDIO",
              "extends": [
                "type_:AudioChatMessageContent"
              ],
              "properties": []
            }
          ]
        }
      },
      "type_:ChatMessageContentRequest": {
        "name": "ChatMessageContentRequest",
        "shape": {
          "type": "discriminatedUnion",
          "discriminant": "type",
          "variants": [
            {
              "discriminantValue": "STRING",
              "extends": [
                "type_:StringChatMessageContentRequest"
              ],
              "properties": []
            },
            {
              "discriminantValue": "FUNCTION_CALL",
              "extends": [
                "type_:FunctionCallChatMessageContentRequest"
              ],
              "properties": []
            },
            {
              "discriminantValue": "ARRAY",
              "extends": [
                "type_:ArrayChatMessageContentRequest"
              ],
              "properties": []
            },
            {
              "discriminantValue": "IMAGE",
              "extends": [
                "type_:ImageChatMessageContentRequest"
              ],
              "properties": []
            },
            {
              "discriminantValue": "AUDIO",
              "extends": [
                "type_:AudioChatMessageContentRequest"
              ],
              "properties": []
            }
          ]
        }
      },
      "type_:ChatMessageRequest": {
        "name": "ChatMessageRequest",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "text",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "role",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:ChatMessageRole"
                }
              }
            },
            {
              "key": "content",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:ChatMessageContentRequest"
                    }
                  }
                }
              }
            },
            {
              "key": "source",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "An optional identifier representing who or what generated this message."
            }
          ]
        }
      },
      "type_:ChatMessageRole": {
        "name": "ChatMessageRole",
        "description": "- `SYSTEM` - System\n- `ASSISTANT` - Assistant\n- `USER` - User\n- `FUNCTION` - Function",
        "shape": {
          "type": "enum",
          "values": [
            {
              "value": "SYSTEM"
            },
            {
              "value": "ASSISTANT"
            },
            {
              "value": "USER"
            },
            {
              "value": "FUNCTION"
            }
          ]
        }
      },
      "type_:CodeExecutionNodeArrayResult": {
        "name": "CodeExecutionNodeArrayResult",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "key": "value",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "list",
                      "itemShape": {
                        "type": "alias",
                        "value": {
                          "type": "id",
                          "id": "type_:VellumValue"
                        }
                      }
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_:CodeExecutionNodeChatHistoryResult": {
        "name": "CodeExecutionNodeChatHistoryResult",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "key": "value",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "list",
                      "itemShape": {
                        "type": "alias",
                        "value": {
                          "type": "id",
                          "id": "type_:ChatMessage"
                        }
                      }
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_:CodeExecutionNodeErrorResult": {
        "name": "CodeExecutionNodeErrorResult",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "key": "value",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:VellumError"
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_:CodeExecutionNodeFunctionCallResult": {
        "name": "CodeExecutionNodeFunctionCallResult",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "key": "value",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:FunctionCall"
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_:CodeExecutionNodeJsonResult": {
        "name": "CodeExecutionNodeJsonResult",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "key": "value",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "unknown"
                }
              }
            }
          ]
        }
      },
      "type_:CodeExecutionNodeNumberResult": {
        "name": "CodeExecutionNodeNumberResult",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "key": "value",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_:CodeExecutionNodeResult": {
        "name": "CodeExecutionNodeResult",
        "description": "A Node Result Event emitted from a Code Execution Node.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "data",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:CodeExecutionNodeResultData"
                }
              }
            }
          ]
        }
      },
      "type_:CodeExecutionNodeResultData": {
        "name": "CodeExecutionNodeResultData",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "output",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:CodeExecutionNodeResultOutput"
                }
              }
            },
            {
              "key": "log_output_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_:CodeExecutionNodeResultOutput": {
        "name": "CodeExecutionNodeResultOutput",
        "shape": {
          "type": "discriminatedUnion",
          "discriminant": "type",
          "variants": [
            {
              "discriminantValue": "STRING",
              "extends": [
                "type_:CodeExecutionNodeStringResult"
              ],
              "properties": []
            },
            {
              "discriminantValue": "NUMBER",
              "extends": [
                "type_:CodeExecutionNodeNumberResult"
              ],
              "properties": []
            },
            {
              "discriminantValue": "JSON",
              "extends": [
                "type_:CodeExecutionNodeJsonResult"
              ],
              "properties": []
            },
            {
              "discriminantValue": "CHAT_HISTORY",
              "extends": [
                "type_:CodeExecutionNodeChatHistoryResult"
              ],
              "properties": []
            },
            {
              "discriminantValue": "SEARCH_RESULTS",
              "extends": [
                "type_:CodeExecutionNodeSearchResultsResult"
              ],
              "properties": []
            },
            {
              "discriminantValue": "ERROR",
              "extends": [
                "type_:CodeExecutionNodeErrorResult"
              ],
              "properties": []
            },
            {
              "discriminantValue": "ARRAY",
              "extends": [
                "type_:CodeExecutionNodeArrayResult"
              ],
              "properties": []
            },
            {
              "discriminantValue": "FUNCTION_CALL",
              "extends": [
                "type_:CodeExecutionNodeFunctionCallResult"
              ],
              "properties": []
            }
          ]
        }
      },
      "type_:CodeExecutionNodeSearchResultsResult": {
        "name": "CodeExecutionNodeSearchResultsResult",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "key": "value",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "list",
                      "itemShape": {
                        "type": "alias",
                        "value": {
                          "type": "id",
                          "id": "type_:SearchResult"
                        }
                      }
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_:CodeExecutionNodeStringResult": {
        "name": "CodeExecutionNodeStringResult",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "key": "value",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_:CompilePromptDeploymentExpandMetaRequest": {
        "name": "CompilePromptDeploymentExpandMetaRequest",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "model_name",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean"
                      }
                    }
                  }
                }
              },
              "description": "If enabled, the response will include the model identifier representing the ML Model invoked by the Prompt."
            },
            {
              "key": "deployment_release_tag",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean"
                      }
                    }
                  }
                }
              },
              "description": "If enabled, the response will include the release tag of the Prompt Deployment."
            },
            {
              "key": "prompt_version_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean"
                      }
                    }
                  }
                }
              },
              "description": "If enabled, the response will include the ID of the Prompt Version backing the deployment."
            }
          ]
        }
      },
      "type_:CompilePromptMeta": {
        "name": "CompilePromptMeta",
        "description": "The subset of the metadata tracked by Vellum during Prompt Deployment compilation that the request opted into with `expand_meta`.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "model_name",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "deployment_release_tag",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "prompt_version_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_:ConditionCombinator": {
        "name": "ConditionCombinator",
        "description": "- `OR` - OR\n- `AND` - AND",
        "shape": {
          "type": "enum",
          "values": [
            {
              "value": "OR"
            },
            {
              "value": "AND"
            }
          ]
        }
      },
      "type_:ConditionalNodeResult": {
        "name": "ConditionalNodeResult",
        "description": "A Node Result Event emitted from a Conditional Node.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "data",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:ConditionalNodeResultData"
                }
              }
            }
          ]
        }
      },
      "type_:ConditionalNodeResultData": {
        "name": "ConditionalNodeResultData",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "source_handle_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_:CreateTestSuiteTestCaseRequest": {
        "name": "CreateTestSuiteTestCaseRequest",
        "description": "Information about the Test Case to create",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "label",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "A human-readable label used to convey the intention of this Test Case"
            },
            {
              "key": "input_values",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "list",
                  "itemShape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:NamedTestCaseVariableValueRequest"
                    }
                  }
                }
              },
              "description": "Values for each of the Test Case's input variables"
            },
            {
              "key": "evaluation_values",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "list",
                  "itemShape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:NamedTestCaseVariableValueRequest"
                    }
                  }
                }
              },
              "description": "Values for each of the Test Case's evaluation variables"
            },
            {
              "key": "external_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 1
                      }
                    }
                  }
                }
              },
              "description": "Optionally provide an ID that uniquely identifies this Test Case in your system. Useful for updating this Test Cases data after initial creation. Cannot be changed later."
            }
          ]
        }
      },
      "type_:DeploymentProviderPayloadResponsePayload": {
        "name": "DeploymentProviderPayloadResponsePayload",
        "shape": {
          "type": "undiscriminatedUnion",
          "variants": [
            {
              "shape": {
                "type": "alias",
                "value": {
                  "type": "map",
                  "keyShape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  },
                  "valueShape": {
                    "type": "alias",
                    "value": {
                      "type": "unknown"
                    }
                  }
                }
              }
            },
            {
              "shape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          ]
        }
      },
      "type_:DeploymentProviderPayloadResponse": {
        "name": "DeploymentProviderPayloadResponse",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "payload",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:DeploymentProviderPayloadResponsePayload"
                }
              }
            },
            {
              "key": "meta",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:CompilePromptMeta"
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_:DeploymentRead": {
        "name": "DeploymentRead",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "key": "created",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "datetime"
                  }
                }
              }
            },
            {
              "key": "label",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "A human-readable label for the deployment"
            },
            {
              "key": "name",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "A name that uniquely identifies this deployment within its workspace"
            },
            {
              "key": "status",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:EntityStatus"
                    }
                  }
                }
              },
              "description": "The current status of the deployment\n\n- `ACTIVE` - Active\n- `ARCHIVED` - Archived"
            },
            {
              "key": "environment",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:EnvironmentEnum"
                    }
                  }
                }
              },
              "description": "The environment this deployment is used in\n\n- `DEVELOPMENT` - Development\n- `STAGING` - Staging\n- `PRODUCTION` - Production"
            },
            {
              "key": "last_deployed_on",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "datetime"
                  }
                }
              }
            },
            {
              "key": "input_variables",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "list",
                  "itemShape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:VellumVariable"
                    }
                  }
                }
              }
            },
            {
              "key": "description",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "A human-readable description of the deployment"
            },
            {
              "key": "active_model_version_ids",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "list",
                  "itemShape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "Deprecated. The Prompt execution endpoints return a `prompt_version_id` that could be used instead.",
              "availability": "Deprecated"
            },
            {
              "key": "last_deployed_history_item_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "The ID of the history item associated with this Deployment's LATEST Release Tag"
            }
          ]
        }
      },
      "type_:DeploymentReleaseTagDeploymentHistoryItem": {
        "name": "DeploymentReleaseTagDeploymentHistoryItem",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "key": "timestamp",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "datetime"
                  }
                }
              }
            }
          ]
        }
      },
      "type_:DeploymentReleaseTagRead": {
        "name": "DeploymentReleaseTagRead",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "name",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "The name of the Release Tag"
            },
            {
              "key": "source",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:ReleaseTagSource"
                }
              },
              "description": "The source of how the Release Tag was originally created\n\n- `SYSTEM` - System\n- `USER` - User"
            },
            {
              "key": "history_item",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:DeploymentReleaseTagDeploymentHistoryItem"
                }
              },
              "description": "The Deployment History Item that this Release Tag is associated with"
            }
          ]
        }
      },
      "type_:DocumentDocumentToDocumentIndex": {
        "name": "DocumentDocumentToDocumentIndex",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "Vellum-generated ID that uniquely identifies this link."
            },
            {
              "key": "document_index_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "Vellum-generated ID that uniquely identifies the index this document is included in."
            },
            {
              "key": "indexing_state",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:IndexingStateEnum"
                    }
                  }
                }
              },
              "description": "An enum value representing where this document is along its indexing lifecycle for this index.\n\n- `AWAITING_PROCESSING` - Awaiting Processing\n- `QUEUED` - Queued\n- `INDEXING` - Indexing\n- `INDEXED` - Indexed\n- `FAILED` - Failed"
            }
          ]
        }
      },
      "type_:DocumentIndexChunking": {
        "name": "DocumentIndexChunking",
        "shape": {
          "type": "discriminatedUnion",
          "discriminant": "chunker_name",
          "variants": [
            {
              "discriminantValue": "reducto-chunker",
              "extends": [
                "type_:ReductoChunking"
              ],
              "properties": []
            },
            {
              "discriminantValue": "sentence-chunker",
              "extends": [
                "type_:SentenceChunking"
              ],
              "properties": []
            },
            {
              "discriminantValue": "token-overlapping-window-chunker",
              "extends": [
                "type_:TokenOverlappingWindowChunking"
              ],
              "properties": []
            }
          ]
        }
      },
      "type_:DocumentIndexChunkingRequest": {
        "name": "DocumentIndexChunkingRequest",
        "shape": {
          "type": "discriminatedUnion",
          "discriminant": "chunker_name",
          "variants": [
            {
              "discriminantValue": "reducto-chunker",
              "extends": [
                "type_:ReductoChunkingRequest"
              ],
              "properties": []
            },
            {
              "discriminantValue": "sentence-chunker",
              "extends": [
                "type_:SentenceChunkingRequest"
              ],
              "properties": []
            },
            {
              "discriminantValue": "token-overlapping-window-chunker",
              "extends": [
                "type_:TokenOverlappingWindowChunkingRequest"
              ],
              "properties": []
            }
          ]
        }
      },
      "type_:DocumentIndexIndexingConfig": {
        "name": "DocumentIndexIndexingConfig",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "vectorizer",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:IndexingConfigVectorizer"
                }
              }
            },
            {
              "key": "chunking",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:DocumentIndexChunking"
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_:DocumentIndexIndexingConfigRequest": {
        "name": "DocumentIndexIndexingConfigRequest",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "vectorizer",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:IndexingConfigVectorizerRequest"
                }
              }
            },
            {
              "key": "chunking",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:DocumentIndexChunkingRequest"
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_:DocumentIndexRead": {
        "name": "DocumentIndexRead",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "key": "created",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "datetime"
                  }
                }
              }
            },
            {
              "key": "label",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "A human-readable label for the document index"
            },
            {
              "key": "name",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "A name that uniquely identifies this index within its workspace"
            },
            {
              "key": "status",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:EntityStatus"
                    }
                  }
                }
              },
              "description": "The current status of the document index\n\n- `ACTIVE` - Active\n- `ARCHIVED` - Archived"
            },
            {
              "key": "environment",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:EnvironmentEnum"
                    }
                  }
                }
              },
              "description": "The environment this document index is used in\n\n- `DEVELOPMENT` - Development\n- `STAGING` - Staging\n- `PRODUCTION` - Production"
            },
            {
              "key": "indexing_config",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:DocumentIndexIndexingConfig"
                }
              }
            }
          ]
        }
      },
      "type_:DocumentRead": {
        "name": "DocumentRead",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "key": "external_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "The unique id of this document as it exists in the user's system."
            },
            {
              "key": "last_uploaded_at",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "datetime"
                  }
                }
              }
            },
            {
              "key": "label",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "A human-readable label for the document. Defaults to the originally uploaded file's file name."
            },
            {
              "key": "processing_state",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:ProcessingStateEnum"
                    }
                  }
                }
              },
              "description": "The current processing state of the document\n\n- `QUEUED` - Queued\n- `PROCESSING` - Processing\n- `PROCESSED` - Processed\n- `FAILED` - Failed"
            },
            {
              "key": "status",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:DocumentStatus"
                    }
                  }
                }
              },
              "description": "The current status of the document\n\n- `ACTIVE` - Active"
            },
            {
              "key": "original_file_url",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "processed_file_url",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "document_to_document_indexes",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "list",
                  "itemShape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:DocumentDocumentToDocumentIndex"
                    }
                  }
                }
              }
            },
            {
              "key": "metadata",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "map",
                      "keyShape": {
                        "type": "alias",
                        "value": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      },
                      "valueShape": {
                        "type": "alias",
                        "value": {
                          "type": "unknown"
                        }
                      }
                    }
                  }
                }
              },
              "description": "A previously supplied JSON object containing metadata that can be filtered on when searching."
            }
          ]
        }
      },
      "type_:DocumentStatus": {
        "name": "DocumentStatus",
        "description": "- `ACTIVE` - Active",
        "shape": {
          "type": "alias",
          "value": {
            "type": "literal",
            "value": {
              "type": "stringLiteral",
              "value": "ACTIVE"
            }
          }
        }
      },
      "type_:EntityStatus": {
        "name": "EntityStatus",
        "description": "- `ACTIVE` - Active\n- `ARCHIVED` - Archived",
        "shape": {
          "type": "enum",
          "values": [
            {
              "value": "ACTIVE"
            },
            {
              "value": "ARCHIVED"
            }
          ]
        }
      },
      "type_:EnvironmentEnum": {
        "name": "EnvironmentEnum",
        "description": "- `DEVELOPMENT` - Development\n- `STAGING` - Staging\n- `PRODUCTION` - Production",
        "shape": {
          "type": "enum",
          "values": [
            {
              "value": "DEVELOPMENT"
            },
            {
              "value": "STAGING"
            },
            {
              "value": "PRODUCTION"
            }
          ]
        }
      },
      "type_:ErrorVariableValue": {
        "name": "ErrorVariableValue",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "value",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:VellumError"
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_:ErrorVellumValue": {
        "name": "ErrorVellumValue",
        "description": "A value representing an Error.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "value",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:VellumError"
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_:ErrorVellumValueRequest": {
        "name": "ErrorVellumValueRequest",
        "description": "A value representing an Error.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "value",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:VellumErrorRequest"
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_:ExecutePromptApiErrorResponse": {
        "name": "ExecutePromptApiErrorResponse",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "detail",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "Details about why the request failed."
            }
          ]
        }
      },
      "type_:ExecutePromptEvent": {
        "name": "ExecutePromptEvent",
        "shape": {
          "type": "discriminatedUnion",
          "discriminant": "state",
          "variants": [
            {
              "discriminantValue": "INITIATED",
              "extends": [
                "type_:InitiatedExecutePromptEvent"
              ],
              "properties": []
            },
            {
              "discriminantValue": "STREAMING",
              "extends": [
                "type_:StreamingExecutePromptEvent"
              ],
              "properties": []
            },
            {
              "discriminantValue": "FULFILLED",
              "extends": [
                "type_:FulfilledExecutePromptEvent"
              ],
              "properties": []
            },
            {
              "discriminantValue": "REJECTED",
              "extends": [
                "type_:RejectedExecutePromptEvent"
              ],
              "properties": []
            }
          ]
        }
      },
      "type_:ExecutePromptResponse": {
        "name": "ExecutePromptResponse",
        "shape": {
          "type": "discriminatedUnion",
          "discriminant": "state",
          "variants": [
            {
              "discriminantValue": "FULFILLED",
              "extends": [
                "type_:FulfilledExecutePromptResponse"
              ],
              "properties": []
            },
            {
              "discriminantValue": "REJECTED",
              "extends": [
                "type_:RejectedExecutePromptResponse"
              ],
              "properties": []
            }
          ]
        }
      },
      "type_:ExecuteWorkflowErrorResponse": {
        "name": "ExecuteWorkflowErrorResponse",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "detail",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "Details about why the request failed."
            }
          ]
        }
      },
      "type_:ExecuteWorkflowResponse": {
        "name": "ExecuteWorkflowResponse",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "execution_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "key": "run_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "availability": "Deprecated"
            },
            {
              "key": "external_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "data",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:ExecuteWorkflowWorkflowResultEvent"
                }
              }
            }
          ]
        }
      },
      "type_:ExecuteWorkflowStreamErrorResponse": {
        "name": "ExecuteWorkflowStreamErrorResponse",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "detail",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "Details about why the request failed."
            }
          ]
        }
      },
      "type_:ExecuteWorkflowWorkflowResultEvent": {
        "name": "ExecuteWorkflowWorkflowResultEvent",
        "shape": {
          "type": "discriminatedUnion",
          "discriminant": "state",
          "variants": [
            {
              "discriminantValue": "FULFILLED",
              "extends": [
                "type_:FulfilledExecuteWorkflowWorkflowResultEvent"
              ],
              "properties": []
            },
            {
              "discriminantValue": "REJECTED",
              "extends": [
                "type_:RejectedExecuteWorkflowWorkflowResultEvent"
              ],
              "properties": []
            }
          ]
        }
      },
      "type_:ExecutionArrayVellumValue": {
        "name": "ExecutionArrayVellumValue",
        "description": "A value representing an array of Vellum variable values.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "The variable's uniquely identifying internal id."
            },
            {
              "key": "name",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "key": "value",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "list",
                      "itemShape": {
                        "type": "alias",
                        "value": {
                          "type": "id",
                          "id": "type_:VellumValue"
                        }
                      }
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_:ExecutionChatHistoryVellumValue": {
        "name": "ExecutionChatHistoryVellumValue",
        "description": "A value representing Chat History.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "The variable's uniquely identifying internal id."
            },
            {
              "key": "name",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "key": "value",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "list",
                      "itemShape": {
                        "type": "alias",
                        "value": {
                          "type": "id",
                          "id": "type_:ChatMessage"
                        }
                      }
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_:ExecutionErrorVellumValue": {
        "name": "ExecutionErrorVellumValue",
        "description": "A value representing an Error.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "The variable's uniquely identifying internal id."
            },
            {
              "key": "name",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "key": "value",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:VellumError"
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_:ExecutionFunctionCallVellumValue": {
        "name": "ExecutionFunctionCallVellumValue",
        "description": "A value representing a Function Call.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "The variable's uniquely identifying internal id."
            },
            {
              "key": "name",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "key": "value",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:FunctionCall"
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_:ExecutionJsonVellumValue": {
        "name": "ExecutionJsonVellumValue",
        "description": "A value representing a JSON object.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "The variable's uniquely identifying internal id."
            },
            {
              "key": "name",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "key": "value",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "unknown"
                }
              }
            }
          ]
        }
      },
      "type_:ExecutionNumberVellumValue": {
        "name": "ExecutionNumberVellumValue",
        "description": "A value representing a number.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "The variable's uniquely identifying internal id."
            },
            {
              "key": "name",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "key": "value",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_:ExecutionSearchResultsVellumValue": {
        "name": "ExecutionSearchResultsVellumValue",
        "description": "A value representing Search Results.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "The variable's uniquely identifying internal id."
            },
            {
              "key": "name",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "key": "value",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "list",
                      "itemShape": {
                        "type": "alias",
                        "value": {
                          "type": "id",
                          "id": "type_:SearchResult"
                        }
                      }
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_:ExecutionStringVellumValue": {
        "name": "ExecutionStringVellumValue",
        "description": "A value representing a string.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "The variable's uniquely identifying internal id."
            },
            {
              "key": "name",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "key": "value",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_:ExecutionVellumValue": {
        "name": "ExecutionVellumValue",
        "shape": {
          "type": "discriminatedUnion",
          "discriminant": "type",
          "variants": [
            {
              "discriminantValue": "STRING",
              "extends": [
                "type_:ExecutionStringVellumValue"
              ],
              "properties": []
            },
            {
              "discriminantValue": "NUMBER",
              "extends": [
                "type_:ExecutionNumberVellumValue"
              ],
              "properties": []
            },
            {
              "discriminantValue": "JSON",
              "extends": [
                "type_:ExecutionJsonVellumValue"
              ],
              "properties": []
            },
            {
              "discriminantValue": "CHAT_HISTORY",
              "extends": [
                "type_:ExecutionChatHistoryVellumValue"
              ],
              "properties": []
            },
            {
              "discriminantValue": "SEARCH_RESULTS",
              "extends": [
                "type_:ExecutionSearchResultsVellumValue"
              ],
              "properties": []
            },
            {
              "discriminantValue": "ERROR",
              "extends": [
                "type_:ExecutionErrorVellumValue"
              ],
              "properties": []
            },
            {
              "discriminantValue": "ARRAY",
              "extends": [
                "type_:ExecutionArrayVellumValue"
              ],
              "properties": []
            },
            {
              "discriminantValue": "FUNCTION_CALL",
              "extends": [
                "type_:ExecutionFunctionCallVellumValue"
              ],
              "properties": []
            }
          ]
        }
      },
      "type_:ExternalTestCaseExecution": {
        "name": "ExternalTestCaseExecution",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "outputs",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "list",
                  "itemShape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:NamedTestCaseVariableValue"
                    }
                  }
                }
              },
              "description": "The output values of a callable that was executed against a Test Case outside of Vellum"
            },
            {
              "key": "test_case_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          ]
        }
      },
      "type_:ExternalTestCaseExecutionRequest": {
        "name": "ExternalTestCaseExecutionRequest",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "outputs",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "list",
                  "itemShape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:NamedTestCaseVariableValueRequest"
                    }
                  }
                }
              },
              "description": "The output values of a callable that was executed against a Test Case outside of Vellum"
            },
            {
              "key": "test_case_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 1
                  }
                }
              }
            }
          ]
        }
      },
      "type_:FinishReasonEnum": {
        "name": "FinishReasonEnum",
        "description": "- `LENGTH` - LENGTH\n- `STOP` - STOP\n- `UNKNOWN` - UNKNOWN",
        "shape": {
          "type": "enum",
          "values": [
            {
              "value": "LENGTH"
            },
            {
              "value": "STOP"
            },
            {
              "value": "UNKNOWN"
            }
          ]
        }
      },
      "type_:FolderEntity": {
        "name": "FolderEntity",
        "shape": {
          "type": "discriminatedUnion",
          "discriminant": "type",
          "variants": [
            {
              "discriminantValue": "FOLDER",
              "extends": [
                "type_:FolderEntityFolder"
              ],
              "properties": []
            },
            {
              "discriminantValue": "PROMPT_SANDBOX",
              "extends": [
                "type_:FolderEntityPromptSandbox"
              ],
              "properties": []
            },
            {
              "discriminantValue": "WORKFLOW_SANDBOX",
              "extends": [
                "type_:FolderEntityWorkflowSandbox"
              ],
              "properties": []
            },
            {
              "discriminantValue": "DOCUMENT_INDEX",
              "extends": [
                "type_:FolderEntityDocumentIndex"
              ],
              "properties": []
            },
            {
              "discriminantValue": "TEST_SUITE",
              "extends": [
                "type_:FolderEntityTestSuite"
              ],
              "properties": []
            }
          ]
        }
      },
      "type_:FolderEntityDocumentIndex": {
        "name": "FolderEntityDocumentIndex",
        "description": "A slim representation of a Document Index, as it exists within a Folder.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "key": "data",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:FolderEntityDocumentIndexData"
                }
              }
            }
          ]
        }
      },
      "type_:FolderEntityDocumentIndexData": {
        "name": "FolderEntityDocumentIndexData",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "key": "label",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "key": "created",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "datetime"
                  }
                }
              }
            },
            {
              "key": "modified",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "datetime"
                  }
                }
              }
            },
            {
              "key": "status",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:EntityStatus"
                }
              }
            }
          ]
        }
      },
      "type_:FolderEntityFolder": {
        "name": "FolderEntityFolder",
        "description": "A slim representation of a Folder, as it exists within another Folder.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "key": "data",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:FolderEntityFolderData"
                }
              }
            }
          ]
        }
      },
      "type_:FolderEntityFolderData": {
        "name": "FolderEntityFolderData",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "key": "label",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "key": "created",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "datetime"
                  }
                }
              }
            },
            {
              "key": "modified",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "datetime"
                  }
                }
              }
            },
            {
              "key": "has_contents",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "boolean"
                  }
                }
              }
            }
          ]
        }
      },
      "type_:FolderEntityPromptSandbox": {
        "name": "FolderEntityPromptSandbox",
        "description": "A slim representation of a Prompt Sandbox, as it exists within a Folder.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "key": "data",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:FolderEntityPromptSandboxData"
                }
              }
            }
          ]
        }
      },
      "type_:FolderEntityPromptSandboxData": {
        "name": "FolderEntityPromptSandboxData",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "key": "label",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "key": "created",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "datetime"
                  }
                }
              }
            },
            {
              "key": "modified",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "datetime"
                  }
                }
              }
            },
            {
              "key": "status",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:EntityStatus"
                }
              }
            },
            {
              "key": "last_deployed_on",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "datetime"
                      }
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_:FolderEntityTestSuite": {
        "name": "FolderEntityTestSuite",
        "description": "A slim representation of a Test Suite, as it exists within a Folder.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "key": "data",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:FolderEntityTestSuiteData"
                }
              }
            }
          ]
        }
      },
      "type_:FolderEntityTestSuiteData": {
        "name": "FolderEntityTestSuiteData",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "key": "label",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "key": "created",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "datetime"
                  }
                }
              }
            },
            {
              "key": "modified",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "datetime"
                  }
                }
              }
            },
            {
              "key": "status",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:EntityStatus"
                }
              }
            }
          ]
        }
      },
      "type_:FolderEntityWorkflowSandbox": {
        "name": "FolderEntityWorkflowSandbox",
        "description": "A slim representation of a Workflow Sandbox, as it exists within a Folder.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "key": "data",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:FolderEntityWorkflowSandboxData"
                }
              }
            }
          ]
        }
      },
      "type_:FolderEntityWorkflowSandboxData": {
        "name": "FolderEntityWorkflowSandboxData",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "key": "label",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "key": "created",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "datetime"
                  }
                }
              }
            },
            {
              "key": "modified",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "datetime"
                  }
                }
              }
            },
            {
              "key": "status",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:EntityStatus"
                }
              }
            },
            {
              "key": "last_deployed_on",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "datetime"
                      }
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_:FulfilledEnum": {
        "name": "FulfilledEnum",
        "shape": {
          "type": "alias",
          "value": {
            "type": "literal",
            "value": {
              "type": "stringLiteral",
              "value": "FULFILLED"
            }
          }
        }
      },
      "type_:FulfilledExecutePromptEvent": {
        "name": "FulfilledExecutePromptEvent",
        "description": "The final data event returned indicating that the stream has ended and all final resolved values from the model can be found.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "outputs",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "list",
                  "itemShape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:PromptOutput"
                    }
                  }
                }
              }
            },
            {
              "key": "execution_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "key": "meta",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:FulfilledPromptExecutionMeta"
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_:FulfilledExecutePromptResponse": {
        "name": "FulfilledExecutePromptResponse",
        "description": "The successful response from the model containing all of the resolved values generated by the prompt.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "meta",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:PromptExecutionMeta"
                    }
                  }
                }
              }
            },
            {
              "key": "raw",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "map",
                      "keyShape": {
                        "type": "alias",
                        "value": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      },
                      "valueShape": {
                        "type": "alias",
                        "value": {
                          "type": "unknown"
                        }
                      }
                    }
                  }
                }
              },
              "description": "The subset of the raw response from the model that the request opted into with `expand_raw`."
            },
            {
              "key": "execution_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "The ID of the execution."
            },
            {
              "key": "outputs",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "list",
                  "itemShape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:PromptOutput"
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_:FulfilledExecuteWorkflowWorkflowResultEvent": {
        "name": "FulfilledExecuteWorkflowWorkflowResultEvent",
        "description": "The successful response from the Workflow execution containing the produced outputs.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "key": "ts",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "datetime"
                  }
                }
              }
            },
            {
              "key": "outputs",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "list",
                  "itemShape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:WorkflowOutput"
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_:FulfilledPromptExecutionMeta": {
        "name": "FulfilledPromptExecutionMeta",
        "description": "The subset of the metadata tracked by Vellum during prompt execution that the request opted into with `expand_meta`.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "latency",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "finish_reason",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:FinishReasonEnum"
                    }
                  }
                }
              }
            },
            {
              "key": "usage",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:MlModelUsage"
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_:FulfilledWorkflowNodeResultEvent": {
        "name": "FulfilledWorkflowNodeResultEvent",
        "description": "An event that indicates that the node has fulfilled its execution.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "key": "node_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "key": "node_result_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "key": "ts",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "datetime"
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "data",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:WorkflowNodeResultData"
                    }
                  }
                }
              }
            },
            {
              "key": "source_execution_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "output_values",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "list",
                  "itemShape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:NodeOutputCompiledValue"
                    }
                  }
                }
              }
            },
            {
              "key": "mocked",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean"
                      }
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_:FunctionCall": {
        "name": "FunctionCall",
        "description": "The final resolved function call value.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "arguments",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "map",
                  "keyShape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  },
                  "valueShape": {
                    "type": "alias",
                    "value": {
                      "type": "unknown"
                    }
                  }
                }
              }
            },
            {
              "key": "id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "name",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "key": "state",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:FulfilledEnum"
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_:FunctionCallChatMessageContent": {
        "name": "FunctionCallChatMessageContent",
        "description": "A function call value that is used in a chat message.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "value",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:FunctionCallChatMessageContentValue"
                }
              }
            }
          ]
        }
      },
      "type_:FunctionCallChatMessageContentRequest": {
        "name": "FunctionCallChatMessageContentRequest",
        "description": "A function call value that is used in a chat message.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "value",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:FunctionCallChatMessageContentValueRequest"
                }
              }
            }
          ]
        }
      },
      "type_:FunctionCallChatMessageContentValue": {
        "name": "FunctionCallChatMessageContentValue",
        "description": "The final resolved function call value.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "name",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "key": "arguments",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "map",
                  "keyShape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  },
                  "valueShape": {
                    "type": "alias",
                    "value": {
                      "type": "unknown"
                    }
                  }
                }
              }
            },
            {
              "key": "id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_:FunctionCallChatMessageContentValueRequest": {
        "name": "FunctionCallChatMessageContentValueRequest",
        "description": "The final resolved function call value.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "name",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 1
                  }
                }
              }
            },
            {
              "key": "arguments",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "map",
                  "keyShape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  },
                  "valueShape": {
                    "type": "alias",
                    "value": {
                      "type": "unknown"
                    }
                  }
                }
              }
            },
            {
              "key": "id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 1
                      }
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_:FunctionCallRequest": {
        "name": "FunctionCallRequest",
        "description": "The final resolved function call value.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "arguments",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "map",
                  "keyShape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  },
                  "valueShape": {
                    "type": "alias",
                    "value": {
                      "type": "unknown"
                    }
                  }
                }
              }
            },
            {
              "key": "id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 1
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "name",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 1
                  }
                }
              }
            },
            {
              "key": "state",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:FulfilledEnum"
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_:FunctionCallVariableValue": {
        "name": "FunctionCallVariableValue",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "value",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:FunctionCall"
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_:FunctionCallVellumValue": {
        "name": "FunctionCallVellumValue",
        "description": "A value representing a Function Call.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "value",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:FunctionCall"
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_:FunctionCallVellumValueRequest": {
        "name": "FunctionCallVellumValueRequest",
        "description": "A value representing a Function Call.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "value",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:FunctionCallRequest"
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_:GoogleVertexAiVectorizerConfig": {
        "name": "GoogleVertexAiVectorizerConfig",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "project_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "key": "region",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          ]
        }
      },
      "type_:GoogleVertexAiVectorizerConfigRequest": {
        "name": "GoogleVertexAiVectorizerConfigRequest",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "project_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 1
                  }
                }
              }
            },
            {
              "key": "region",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 1
                  }
                }
              }
            }
          ]
        }
      },
      "type_:GoogleVertexAiVectorizerTextEmbedding004": {
        "name": "GoogleVertexAiVectorizerTextEmbedding004",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "config",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:GoogleVertexAiVectorizerConfig"
                }
              }
            }
          ]
        }
      },
      "type_:GoogleVertexAiVectorizerTextEmbedding004Request": {
        "name": "GoogleVertexAiVectorizerTextEmbedding004Request",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "config",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:GoogleVertexAiVectorizerConfigRequest"
                }
              }
            }
          ]
        }
      },
      "type_:GoogleVertexAiVectorizerTextMultilingualEmbedding002": {
        "name": "GoogleVertexAiVectorizerTextMultilingualEmbedding002",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "config",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:GoogleVertexAiVectorizerConfig"
                }
              }
            }
          ]
        }
      },
      "type_:GoogleVertexAiVectorizerTextMultilingualEmbedding002Request": {
        "name": "GoogleVertexAiVectorizerTextMultilingualEmbedding002Request",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "config",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:GoogleVertexAiVectorizerConfigRequest"
                }
              }
            }
          ]
        }
      },
      "type_:HkunlpInstructorXlVectorizer": {
        "name": "HkunlpInstructorXlVectorizer",
        "description": "Vectorizer for hkunlp/instructor-xl.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "config",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:InstructorVectorizerConfig"
                }
              }
            }
          ]
        }
      },
      "type_:HkunlpInstructorXlVectorizerRequest": {
        "name": "HkunlpInstructorXlVectorizerRequest",
        "description": "Vectorizer for hkunlp/instructor-xl.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "config",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:InstructorVectorizerConfigRequest"
                }
              }
            }
          ]
        }
      },
      "type_:ImageChatMessageContent": {
        "name": "ImageChatMessageContent",
        "description": "An image value that is used in a chat message.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "value",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:VellumImage"
                }
              }
            }
          ]
        }
      },
      "type_:ImageChatMessageContentRequest": {
        "name": "ImageChatMessageContentRequest",
        "description": "An image value that is used in a chat message.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "value",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:VellumImageRequest"
                }
              }
            }
          ]
        }
      },
      "type_:ImageVariableValue": {
        "name": "ImageVariableValue",
        "description": "A base Vellum primitive value representing an image.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "value",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:VellumImage"
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_:ImageVellumValue": {
        "name": "ImageVellumValue",
        "description": "A base Vellum primitive value representing an image.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "value",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:VellumImage"
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_:ImageVellumValueRequest": {
        "name": "ImageVellumValueRequest",
        "description": "A base Vellum primitive value representing an image.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "value",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:VellumImageRequest"
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_:IndexingConfigVectorizer": {
        "name": "IndexingConfigVectorizer",
        "shape": {
          "type": "discriminatedUnion",
          "discriminant": "model_name",
          "variants": [
            {
              "discriminantValue": "text-embedding-3-small",
              "extends": [
                "type_:OpenAiVectorizerTextEmbedding3Small"
              ],
              "properties": []
            },
            {
              "discriminantValue": "text-embedding-3-large",
              "extends": [
                "type_:OpenAiVectorizerTextEmbedding3Large"
              ],
              "properties": []
            },
            {
              "discriminantValue": "text-embedding-ada-002",
              "extends": [
                "type_:OpenAiVectorizerTextEmbeddingAda002"
              ],
              "properties": []
            },
            {
              "discriminantValue": "intfloat/multilingual-e5-large",
              "extends": [
                "type_:BasicVectorizerIntfloatMultilingualE5Large"
              ],
              "properties": []
            },
            {
              "discriminantValue": "sentence-transformers/multi-qa-mpnet-base-cos-v1",
              "extends": [
                "type_:BasicVectorizerSentenceTransformersMultiQaMpnetBaseCosV1"
              ],
              "properties": []
            },
            {
              "discriminantValue": "sentence-transformers/multi-qa-mpnet-base-dot-v1",
              "extends": [
                "type_:BasicVectorizerSentenceTransformersMultiQaMpnetBaseDotV1"
              ],
              "properties": []
            },
            {
              "discriminantValue": "hkunlp/instructor-xl",
              "extends": [
                "type_:HkunlpInstructorXlVectorizer"
              ],
              "properties": []
            },
            {
              "discriminantValue": "text-embedding-004",
              "extends": [
                "type_:GoogleVertexAiVectorizerTextEmbedding004"
              ],
              "properties": []
            },
            {
              "discriminantValue": "text-multilingual-embedding-002",
              "extends": [
                "type_:GoogleVertexAiVectorizerTextMultilingualEmbedding002"
              ],
              "properties": []
            }
          ]
        }
      },
      "type_:IndexingConfigVectorizerRequest": {
        "name": "IndexingConfigVectorizerRequest",
        "shape": {
          "type": "discriminatedUnion",
          "discriminant": "model_name",
          "variants": [
            {
              "discriminantValue": "text-embedding-3-small",
              "extends": [
                "type_:OpenAiVectorizerTextEmbedding3SmallRequest"
              ],
              "properties": []
            },
            {
              "discriminantValue": "text-embedding-3-large",
              "extends": [
                "type_:OpenAiVectorizerTextEmbedding3LargeRequest"
              ],
              "properties": []
            },
            {
              "discriminantValue": "text-embedding-ada-002",
              "extends": [
                "type_:OpenAiVectorizerTextEmbeddingAda002Request"
              ],
              "properties": []
            },
            {
              "discriminantValue": "intfloat/multilingual-e5-large",
              "extends": [
                "type_:BasicVectorizerIntfloatMultilingualE5LargeRequest"
              ],
              "properties": []
            },
            {
              "discriminantValue": "sentence-transformers/multi-qa-mpnet-base-cos-v1",
              "extends": [
                "type_:BasicVectorizerSentenceTransformersMultiQaMpnetBaseCosV1Request"
              ],
              "properties": []
            },
            {
              "discriminantValue": "sentence-transformers/multi-qa-mpnet-base-dot-v1",
              "extends": [
                "type_:BasicVectorizerSentenceTransformersMultiQaMpnetBaseDotV1Request"
              ],
              "properties": []
            },
            {
              "discriminantValue": "hkunlp/instructor-xl",
              "extends": [
                "type_:HkunlpInstructorXlVectorizerRequest"
              ],
              "properties": []
            },
            {
              "discriminantValue": "text-embedding-004",
              "extends": [
                "type_:GoogleVertexAiVectorizerTextEmbedding004Request"
              ],
              "properties": []
            },
            {
              "discriminantValue": "text-multilingual-embedding-002",
              "extends": [
                "type_:GoogleVertexAiVectorizerTextMultilingualEmbedding002Request"
              ],
              "properties": []
            }
          ]
        }
      },
      "type_:IndexingStateEnum": {
        "name": "IndexingStateEnum",
        "description": "- `AWAITING_PROCESSING` - Awaiting Processing\n- `QUEUED` - Queued\n- `INDEXING` - Indexing\n- `INDEXED` - Indexed\n- `FAILED` - Failed",
        "shape": {
          "type": "enum",
          "values": [
            {
              "value": "AWAITING_PROCESSING"
            },
            {
              "value": "QUEUED"
            },
            {
              "value": "INDEXING"
            },
            {
              "value": "INDEXED"
            },
            {
              "value": "FAILED"
            }
          ]
        }
      },
      "type_:InitiatedExecutePromptEvent": {
        "name": "InitiatedExecutePromptEvent",
        "description": "The initial data returned indicating that the response from the model has returned and begun streaming.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "meta",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:InitiatedPromptExecutionMeta"
                    }
                  }
                }
              }
            },
            {
              "key": "execution_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          ]
        }
      },
      "type_:InitiatedPromptExecutionMeta": {
        "name": "InitiatedPromptExecutionMeta",
        "description": "The subset of the metadata tracked by Vellum during prompt execution that the request opted into with `expand_meta`.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "model_name",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "latency",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "deployment_release_tag",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "prompt_version_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_:InitiatedWorkflowNodeResultEvent": {
        "name": "InitiatedWorkflowNodeResultEvent",
        "description": "An event that indicates that the node has initiated its execution.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "key": "node_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "key": "node_result_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "key": "ts",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "datetime"
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "data",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:WorkflowNodeResultData"
                    }
                  }
                }
              }
            },
            {
              "key": "source_execution_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "input_values",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "list",
                      "itemShape": {
                        "type": "alias",
                        "value": {
                          "type": "id",
                          "id": "type_:NodeInputVariableCompiledValue"
                        }
                      }
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_:InstructorVectorizerConfig": {
        "name": "InstructorVectorizerConfig",
        "description": "Configuration for using an Instructor vectorizer.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "instruction_domain",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "key": "instruction_query_text_type",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "key": "instruction_document_text_type",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          ]
        }
      },
      "type_:InstructorVectorizerConfigRequest": {
        "name": "InstructorVectorizerConfigRequest",
        "description": "Configuration for using an Instructor vectorizer.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "instruction_domain",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "key": "instruction_query_text_type",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 1
                  }
                }
              }
            },
            {
              "key": "instruction_document_text_type",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 1
                  }
                }
              }
            }
          ]
        }
      },
      "type_:IterationStateEnum": {
        "name": "IterationStateEnum",
        "description": "- `INITIATED` - INITIATED\n- `FULFILLED` - FULFILLED\n- `REJECTED` - REJECTED",
        "shape": {
          "type": "enum",
          "values": [
            {
              "value": "INITIATED"
            },
            {
              "value": "FULFILLED"
            },
            {
              "value": "REJECTED"
            }
          ]
        }
      },
      "type_:JsonInputRequest": {
        "name": "JsonInputRequest",
        "description": "A user input representing a JSON object",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "name",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 1
                  }
                }
              },
              "description": "The variable's name"
            },
            {
              "key": "value",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "unknown"
                }
              }
            }
          ]
        }
      },
      "type_:JsonVariableValue": {
        "name": "JsonVariableValue",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "value",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "unknown"
                }
              }
            }
          ]
        }
      },
      "type_:JsonVellumValue": {
        "name": "JsonVellumValue",
        "description": "A value representing a JSON object.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "value",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "unknown"
                }
              }
            }
          ]
        }
      },
      "type_:JsonVellumValueRequest": {
        "name": "JsonVellumValueRequest",
        "description": "A value representing a JSON object.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "value",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "unknown"
                }
              }
            }
          ]
        }
      },
      "type_:LogicalOperator": {
        "name": "LogicalOperator",
        "description": "- `=` - EQUALS\n- `!=` - DOES_NOT_EQUAL\n- `<` - LESS_THAN\n- `>` - GREATER_THAN\n- `<=` - LESS_THAN_OR_EQUAL_TO\n- `>=` - GREATER_THAN_OR_EQUAL_TO\n- `contains` - CONTAINS\n- `beginsWith` - BEGINS_WITH\n- `endsWith` - ENDS_WITH\n- `doesNotContain` - DOES_NOT_CONTAIN\n- `doesNotBeginWith` - DOES_NOT_BEGIN_WITH\n- `doesNotEndWith` - DOES_NOT_END_WITH\n- `null` - NULL\n- `notNull` - NOT_NULL\n- `in` - IN\n- `notIn` - NOT_IN\n- `between` - BETWEEN\n- `notBetween` - NOT_BETWEEN\n- `blank` - BLANK\n- `notBlank` - NOT_BLANK",
        "shape": {
          "type": "enum",
          "values": [
            {
              "description": "Equals",
              "value": "="
            },
            {
              "description": "Does not equal",
              "value": "!="
            },
            {
              "description": "Less than",
              "value": "<"
            },
            {
              "description": "Greater than",
              "value": ">"
            },
            {
              "description": "Less than or equal to",
              "value": "<="
            },
            {
              "description": "Greater than or equal to",
              "value": ">="
            },
            {
              "description": "Contains",
              "value": "contains"
            },
            {
              "description": "Begins with",
              "value": "beginsWith"
            },
            {
              "description": "Ends with",
              "value": "endsWith"
            },
            {
              "description": "Does not contain",
              "value": "doesNotContain"
            },
            {
              "description": "Does not begin with",
              "value": "doesNotBeginWith"
            },
            {
              "description": "Does not end with",
              "value": "doesNotEndWith"
            },
            {
              "description": "Null",
              "value": "null"
            },
            {
              "description": "Not null",
              "value": "notNull"
            },
            {
              "description": "In",
              "value": "in"
            },
            {
              "description": "Not in",
              "value": "notIn"
            },
            {
              "description": "Between",
              "value": "between"
            },
            {
              "description": "Not between",
              "value": "notBetween"
            },
            {
              "value": "blank"
            },
            {
              "value": "notBlank"
            }
          ]
        }
      },
      "type_:MlModelUsage": {
        "name": "MlModelUsage",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "output_token_count",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "input_token_count",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "input_char_count",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "output_char_count",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "compute_nanos",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "cache_creation_input_tokens",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "cache_read_input_tokens",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_:MapNodeResult": {
        "name": "MapNodeResult",
        "description": "A Node Result Event emitted from a Map Node.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "data",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:MapNodeResultData"
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_:MapNodeResultData": {
        "name": "MapNodeResultData",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "execution_ids",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "list",
                  "itemShape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "iteration_state",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:IterationStateEnum"
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_:MergeNodeResult": {
        "name": "MergeNodeResult",
        "description": "A Node Result Event emitted from a Merge Node.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "data",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:MergeNodeResultData"
                }
              }
            }
          ]
        }
      },
      "type_:MergeNodeResultData": {
        "name": "MergeNodeResultData",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "paused_node_data",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "map",
                      "keyShape": {
                        "type": "alias",
                        "value": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      },
                      "valueShape": {
                        "type": "alias",
                        "value": {
                          "type": "unknown"
                        }
                      }
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_:MetadataFilterConfigRequest": {
        "name": "MetadataFilterConfigRequest",
        "description": "A deprecated pattern for filtering on metadata. Please use MetadataFilters instead.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "combinator",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:MetadataFilterRuleCombinator"
                    }
                  }
                }
              }
            },
            {
              "key": "negated",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean"
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "rules",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "list",
                      "itemShape": {
                        "type": "alias",
                        "value": {
                          "type": "id",
                          "id": "type_:MetadataFilterRuleRequest"
                        }
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "field",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 1
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "operator",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:LogicalOperator"
                    }
                  }
                }
              }
            },
            {
              "key": "value",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 1
                      }
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_:MetadataFilterRuleCombinator": {
        "name": "MetadataFilterRuleCombinator",
        "description": "- `and` - AND\n- `or` - OR",
        "shape": {
          "type": "enum",
          "values": [
            {
              "value": "and"
            },
            {
              "value": "or"
            }
          ]
        }
      },
      "type_:MetadataFilterRuleRequest": {
        "name": "MetadataFilterRuleRequest",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "combinator",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:MetadataFilterRuleCombinator"
                    }
                  }
                }
              }
            },
            {
              "key": "negated",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean"
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "rules",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "list",
                      "itemShape": {
                        "type": "alias",
                        "value": {
                          "type": "id",
                          "id": "type_:MetadataFilterRuleRequest"
                        }
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "field",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 1
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "operator",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:LogicalOperator"
                    }
                  }
                }
              }
            },
            {
              "key": "value",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 1
                      }
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_:MetadataFiltersRequest": {
        "name": "MetadataFiltersRequest",
        "shape": {
          "type": "undiscriminatedUnion",
          "variants": [
            {
              "displayName": "Metadata Filter Config Request",
              "shape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:MetadataFilterConfigRequest"
                }
              }
            },
            {
              "displayName": "Vellum Value Logical Expression Request",
              "shape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:VellumValueLogicalExpressionRequest"
                }
              }
            }
          ]
        }
      },
      "type_:MetricNodeResult": {
        "name": "MetricNodeResult",
        "description": "A Node Result Event emitted from a Metric Node.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": []
        }
      },
      "type_:NamedScenarioInputChatHistoryVariableValueRequest": {
        "name": "NamedScenarioInputChatHistoryVariableValueRequest",
        "description": "Named Prompt Sandbox Scenario input value that is of type CHAT_HISTORY",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "value",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "list",
                      "itemShape": {
                        "type": "alias",
                        "value": {
                          "type": "id",
                          "id": "type_:ChatMessageRequest"
                        }
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "name",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 1
                  }
                }
              }
            }
          ]
        }
      },
      "type_:NamedScenarioInputJsonVariableValueRequest": {
        "name": "NamedScenarioInputJsonVariableValueRequest",
        "description": "Named Prompt Sandbox Scenario input value that is of type JSON",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "value",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "unknown"
                }
              }
            },
            {
              "key": "name",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 1
                  }
                }
              }
            }
          ]
        }
      },
      "type_:NamedScenarioInputRequest": {
        "name": "NamedScenarioInputRequest",
        "shape": {
          "type": "discriminatedUnion",
          "discriminant": "type",
          "variants": [
            {
              "discriminantValue": "STRING",
              "extends": [
                "type_:NamedScenarioInputStringVariableValueRequest"
              ],
              "properties": []
            },
            {
              "discriminantValue": "JSON",
              "extends": [
                "type_:NamedScenarioInputJsonVariableValueRequest"
              ],
              "properties": []
            },
            {
              "discriminantValue": "CHAT_HISTORY",
              "extends": [
                "type_:NamedScenarioInputChatHistoryVariableValueRequest"
              ],
              "properties": []
            }
          ]
        }
      },
      "type_:NamedScenarioInputStringVariableValueRequest": {
        "name": "NamedScenarioInputStringVariableValueRequest",
        "description": "Named Prompt Sandbox Scenario input value that is of type STRING",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "value",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "name",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 1
                  }
                }
              }
            }
          ]
        }
      },
      "type_:NamedTestCaseArrayVariableValue": {
        "name": "NamedTestCaseArrayVariableValue",
        "description": "Named Test Case value that is of type ARRAY",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "value",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "list",
                      "itemShape": {
                        "type": "alias",
                        "value": {
                          "type": "id",
                          "id": "type_:VellumValue"
                        }
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "name",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          ]
        }
      },
      "type_:NamedTestCaseArrayVariableValueRequest": {
        "name": "NamedTestCaseArrayVariableValueRequest",
        "description": "Named Test Case value that is of type ARRAY",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "value",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "list",
                      "itemShape": {
                        "type": "alias",
                        "value": {
                          "type": "id",
                          "id": "type_:VellumValueRequest"
                        }
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "name",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 1
                  }
                }
              }
            }
          ]
        }
      },
      "type_:NamedTestCaseChatHistoryVariableValue": {
        "name": "NamedTestCaseChatHistoryVariableValue",
        "description": "Named Test Case value that is of type CHAT_HISTORY",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "value",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "list",
                      "itemShape": {
                        "type": "alias",
                        "value": {
                          "type": "id",
                          "id": "type_:ChatMessage"
                        }
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "name",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          ]
        }
      },
      "type_:NamedTestCaseChatHistoryVariableValueRequest": {
        "name": "NamedTestCaseChatHistoryVariableValueRequest",
        "description": "Named Test Case value that is of type CHAT_HISTORY",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "value",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "list",
                      "itemShape": {
                        "type": "alias",
                        "value": {
                          "type": "id",
                          "id": "type_:ChatMessageRequest"
                        }
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "name",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 1
                  }
                }
              }
            }
          ]
        }
      },
      "type_:NamedTestCaseErrorVariableValue": {
        "name": "NamedTestCaseErrorVariableValue",
        "description": "Named Test Case value that is of type ERROR",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "value",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:VellumError"
                    }
                  }
                }
              }
            },
            {
              "key": "name",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          ]
        }
      },
      "type_:NamedTestCaseErrorVariableValueRequest": {
        "name": "NamedTestCaseErrorVariableValueRequest",
        "description": "Named Test Case value that is of type ERROR",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "value",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:VellumErrorRequest"
                    }
                  }
                }
              }
            },
            {
              "key": "name",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 1
                  }
                }
              }
            }
          ]
        }
      },
      "type_:NamedTestCaseFunctionCallVariableValue": {
        "name": "NamedTestCaseFunctionCallVariableValue",
        "description": "Named Test Case value that is of type FUNCTION_CALL",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "value",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:FunctionCall"
                    }
                  }
                }
              }
            },
            {
              "key": "name",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          ]
        }
      },
      "type_:NamedTestCaseFunctionCallVariableValueRequest": {
        "name": "NamedTestCaseFunctionCallVariableValueRequest",
        "description": "Named Test Case value that is of type FUNCTION_CALL",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "value",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:FunctionCallRequest"
                    }
                  }
                }
              }
            },
            {
              "key": "name",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 1
                  }
                }
              }
            }
          ]
        }
      },
      "type_:NamedTestCaseJsonVariableValue": {
        "name": "NamedTestCaseJsonVariableValue",
        "description": "Named Test Case value that is of type JSON",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "value",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "unknown"
                }
              }
            },
            {
              "key": "name",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          ]
        }
      },
      "type_:NamedTestCaseJsonVariableValueRequest": {
        "name": "NamedTestCaseJsonVariableValueRequest",
        "description": "Named Test Case value that is of type JSON",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "value",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "unknown"
                }
              }
            },
            {
              "key": "name",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 1
                  }
                }
              }
            }
          ]
        }
      },
      "type_:NamedTestCaseNumberVariableValue": {
        "name": "NamedTestCaseNumberVariableValue",
        "description": "Named Test Case value that is of type NUMBER",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "value",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "name",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          ]
        }
      },
      "type_:NamedTestCaseNumberVariableValueRequest": {
        "name": "NamedTestCaseNumberVariableValueRequest",
        "description": "Named Test Case value that is of type NUMBER",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "value",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "name",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 1
                  }
                }
              }
            }
          ]
        }
      },
      "type_:NamedTestCaseSearchResultsVariableValue": {
        "name": "NamedTestCaseSearchResultsVariableValue",
        "description": "Named Test Case value that is of type SEARCH_RESULTS",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "value",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "list",
                      "itemShape": {
                        "type": "alias",
                        "value": {
                          "type": "id",
                          "id": "type_:SearchResult"
                        }
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "name",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          ]
        }
      },
      "type_:NamedTestCaseSearchResultsVariableValueRequest": {
        "name": "NamedTestCaseSearchResultsVariableValueRequest",
        "description": "Named Test Case value that is of type SEARCH_RESULTS",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "value",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "list",
                      "itemShape": {
                        "type": "alias",
                        "value": {
                          "type": "id",
                          "id": "type_:SearchResultRequest"
                        }
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "name",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 1
                  }
                }
              }
            }
          ]
        }
      },
      "type_:NamedTestCaseStringVariableValue": {
        "name": "NamedTestCaseStringVariableValue",
        "description": "Named Test Case value that is of type STRING",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "value",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "name",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          ]
        }
      },
      "type_:NamedTestCaseStringVariableValueRequest": {
        "name": "NamedTestCaseStringVariableValueRequest",
        "description": "Named Test Case value that is of type STRING",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "value",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "name",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 1
                  }
                }
              }
            }
          ]
        }
      },
      "type_:NamedTestCaseVariableValue": {
        "name": "NamedTestCaseVariableValue",
        "shape": {
          "type": "discriminatedUnion",
          "discriminant": "type",
          "variants": [
            {
              "discriminantValue": "STRING",
              "extends": [
                "type_:NamedTestCaseStringVariableValue"
              ],
              "properties": []
            },
            {
              "discriminantValue": "NUMBER",
              "extends": [
                "type_:NamedTestCaseNumberVariableValue"
              ],
              "properties": []
            },
            {
              "discriminantValue": "JSON",
              "extends": [
                "type_:NamedTestCaseJsonVariableValue"
              ],
              "properties": []
            },
            {
              "discriminantValue": "CHAT_HISTORY",
              "extends": [
                "type_:NamedTestCaseChatHistoryVariableValue"
              ],
              "properties": []
            },
            {
              "discriminantValue": "SEARCH_RESULTS",
              "extends": [
                "type_:NamedTestCaseSearchResultsVariableValue"
              ],
              "properties": []
            },
            {
              "discriminantValue": "ERROR",
              "extends": [
                "type_:NamedTestCaseErrorVariableValue"
              ],
              "properties": []
            },
            {
              "discriminantValue": "FUNCTION_CALL",
              "extends": [
                "type_:NamedTestCaseFunctionCallVariableValue"
              ],
              "properties": []
            },
            {
              "discriminantValue": "ARRAY",
              "extends": [
                "type_:NamedTestCaseArrayVariableValue"
              ],
              "properties": []
            }
          ]
        }
      },
      "type_:NamedTestCaseVariableValueRequest": {
        "name": "NamedTestCaseVariableValueRequest",
        "shape": {
          "type": "discriminatedUnion",
          "discriminant": "type",
          "variants": [
            {
              "discriminantValue": "STRING",
              "extends": [
                "type_:NamedTestCaseStringVariableValueRequest"
              ],
              "properties": []
            },
            {
              "discriminantValue": "NUMBER",
              "extends": [
                "type_:NamedTestCaseNumberVariableValueRequest"
              ],
              "properties": []
            },
            {
              "discriminantValue": "JSON",
              "extends": [
                "type_:NamedTestCaseJsonVariableValueRequest"
              ],
              "properties": []
            },
            {
              "discriminantValue": "CHAT_HISTORY",
              "extends": [
                "type_:NamedTestCaseChatHistoryVariableValueRequest"
              ],
              "properties": []
            },
            {
              "discriminantValue": "SEARCH_RESULTS",
              "extends": [
                "type_:NamedTestCaseSearchResultsVariableValueRequest"
              ],
              "properties": []
            },
            {
              "discriminantValue": "ERROR",
              "extends": [
                "type_:NamedTestCaseErrorVariableValueRequest"
              ],
              "properties": []
            },
            {
              "discriminantValue": "FUNCTION_CALL",
              "extends": [
                "type_:NamedTestCaseFunctionCallVariableValueRequest"
              ],
              "properties": []
            },
            {
              "discriminantValue": "ARRAY",
              "extends": [
                "type_:NamedTestCaseArrayVariableValueRequest"
              ],
              "properties": []
            }
          ]
        }
      },
      "type_:NodeInputCompiledArrayValue": {
        "name": "NodeInputCompiledArrayValue",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "node_input_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "key": "key",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "key": "value",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "list",
                      "itemShape": {
                        "type": "alias",
                        "value": {
                          "type": "id",
                          "id": "type_:VellumValue"
                        }
                      }
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_:NodeInputCompiledChatHistoryValue": {
        "name": "NodeInputCompiledChatHistoryValue",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "node_input_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "key": "key",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "key": "value",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "list",
                      "itemShape": {
                        "type": "alias",
                        "value": {
                          "type": "id",
                          "id": "type_:ChatMessage"
                        }
                      }
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_:NodeInputCompiledErrorValue": {
        "name": "NodeInputCompiledErrorValue",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "node_input_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "key": "key",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "key": "value",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:VellumError"
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_:NodeInputCompiledFunctionCallValue": {
        "name": "NodeInputCompiledFunctionCallValue",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "node_input_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "key": "key",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "key": "value",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:FunctionCall"
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_:NodeInputCompiledJsonValue": {
        "name": "NodeInputCompiledJsonValue",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "node_input_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "key": "key",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "key": "value",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "unknown"
                }
              }
            }
          ]
        }
      },
      "type_:NodeInputCompiledNumberValue": {
        "name": "NodeInputCompiledNumberValue",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "node_input_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "key": "key",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "key": "value",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_:NodeInputCompiledSearchResultsValue": {
        "name": "NodeInputCompiledSearchResultsValue",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "node_input_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "key": "key",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "key": "value",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "list",
                      "itemShape": {
                        "type": "alias",
                        "value": {
                          "type": "id",
                          "id": "type_:SearchResult"
                        }
                      }
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_:NodeInputCompiledStringValue": {
        "name": "NodeInputCompiledStringValue",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "node_input_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "key": "key",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "key": "value",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_:NodeInputVariableCompiledValue": {
        "name": "NodeInputVariableCompiledValue",
        "shape": {
          "type": "discriminatedUnion",
          "discriminant": "type",
          "variants": [
            {
              "discriminantValue": "STRING",
              "extends": [
                "type_:NodeInputCompiledStringValue"
              ],
              "properties": []
            },
            {
              "discriminantValue": "NUMBER",
              "extends": [
                "type_:NodeInputCompiledNumberValue"
              ],
              "properties": []
            },
            {
              "discriminantValue": "JSON",
              "extends": [
                "type_:NodeInputCompiledJsonValue"
              ],
              "properties": []
            },
            {
              "discriminantValue": "CHAT_HISTORY",
              "extends": [
                "type_:NodeInputCompiledChatHistoryValue"
              ],
              "properties": []
            },
            {
              "discriminantValue": "SEARCH_RESULTS",
              "extends": [
                "type_:NodeInputCompiledSearchResultsValue"
              ],
              "properties": []
            },
            {
              "discriminantValue": "ERROR",
              "extends": [
                "type_:NodeInputCompiledErrorValue"
              ],
              "properties": []
            },
            {
              "discriminantValue": "ARRAY",
              "extends": [
                "type_:NodeInputCompiledArrayValue"
              ],
              "properties": []
            },
            {
              "discriminantValue": "FUNCTION_CALL",
              "extends": [
                "type_:NodeInputCompiledFunctionCallValue"
              ],
              "properties": []
            }
          ]
        }
      },
      "type_:NodeOutputCompiledArrayValue": {
        "name": "NodeOutputCompiledArrayValue",
        "description": "An output returned by a node that is of type ARRAY.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "value",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "list",
                      "itemShape": {
                        "type": "alias",
                        "value": {
                          "type": "id",
                          "id": "type_:VellumValue"
                        }
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "node_output_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "key": "state",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:WorkflowNodeResultEventState"
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_:NodeOutputCompiledChatHistoryValue": {
        "name": "NodeOutputCompiledChatHistoryValue",
        "description": "An output returned by a node that is of type CHAT_HISTORY.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "value",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "list",
                      "itemShape": {
                        "type": "alias",
                        "value": {
                          "type": "id",
                          "id": "type_:ChatMessage"
                        }
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "node_output_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "key": "state",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:WorkflowNodeResultEventState"
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_:NodeOutputCompiledErrorValue": {
        "name": "NodeOutputCompiledErrorValue",
        "description": "An output returned by a node that is of type ERROR.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "value",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:VellumError"
                    }
                  }
                }
              }
            },
            {
              "key": "node_output_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "key": "state",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:WorkflowNodeResultEventState"
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_:NodeOutputCompiledFunctionCallValue": {
        "name": "NodeOutputCompiledFunctionCallValue",
        "description": "An output returned by a node that is of type FUNCTION_CALL.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "value",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:FunctionCall"
                    }
                  }
                }
              }
            },
            {
              "key": "node_output_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "key": "state",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:WorkflowNodeResultEventState"
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_:NodeOutputCompiledJsonValue": {
        "name": "NodeOutputCompiledJsonValue",
        "description": "An output returned by a node that is of type JSON.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "value",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "unknown"
                }
              }
            },
            {
              "key": "node_output_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "key": "state",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:WorkflowNodeResultEventState"
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_:NodeOutputCompiledNumberValue": {
        "name": "NodeOutputCompiledNumberValue",
        "description": "An output returned by a node that is of type NUMBER.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "value",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "node_output_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "key": "state",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:WorkflowNodeResultEventState"
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_:NodeOutputCompiledSearchResultsValue": {
        "name": "NodeOutputCompiledSearchResultsValue",
        "description": "An output returned by a node that is of type SEARCH_RESULTS.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "value",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "list",
                      "itemShape": {
                        "type": "alias",
                        "value": {
                          "type": "id",
                          "id": "type_:SearchResult"
                        }
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "node_output_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "key": "state",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:WorkflowNodeResultEventState"
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_:NodeOutputCompiledStringValue": {
        "name": "NodeOutputCompiledStringValue",
        "description": "An output returned by a node that is of type STRING.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "value",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "node_output_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "key": "state",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:WorkflowNodeResultEventState"
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_:NodeOutputCompiledValue": {
        "name": "NodeOutputCompiledValue",
        "shape": {
          "type": "discriminatedUnion",
          "discriminant": "type",
          "variants": [
            {
              "discriminantValue": "STRING",
              "extends": [
                "type_:NodeOutputCompiledStringValue"
              ],
              "properties": []
            },
            {
              "discriminantValue": "NUMBER",
              "extends": [
                "type_:NodeOutputCompiledNumberValue"
              ],
              "properties": []
            },
            {
              "discriminantValue": "JSON",
              "extends": [
                "type_:NodeOutputCompiledJsonValue"
              ],
              "properties": []
            },
            {
              "discriminantValue": "CHAT_HISTORY",
              "extends": [
                "type_:NodeOutputCompiledChatHistoryValue"
              ],
              "properties": []
            },
            {
              "discriminantValue": "SEARCH_RESULTS",
              "extends": [
                "type_:NodeOutputCompiledSearchResultsValue"
              ],
              "properties": []
            },
            {
              "discriminantValue": "ERROR",
              "extends": [
                "type_:NodeOutputCompiledErrorValue"
              ],
              "properties": []
            },
            {
              "discriminantValue": "ARRAY",
              "extends": [
                "type_:NodeOutputCompiledArrayValue"
              ],
              "properties": []
            },
            {
              "discriminantValue": "FUNCTION_CALL",
              "extends": [
                "type_:NodeOutputCompiledFunctionCallValue"
              ],
              "properties": []
            }
          ]
        }
      },
      "type_:NumberVariableValue": {
        "name": "NumberVariableValue",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "value",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_:NumberVellumValue": {
        "name": "NumberVellumValue",
        "description": "A value representing a number.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "value",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_:NumberVellumValueRequest": {
        "name": "NumberVellumValueRequest",
        "description": "A value representing a number.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "value",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_:OpenAiVectorizerConfig": {
        "name": "OpenAiVectorizerConfig",
        "description": "Configuration for using an OpenAI vectorizer.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "add_openai_api_key",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:AddOpenaiApiKeyEnum"
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_:OpenAiVectorizerConfigRequest": {
        "name": "OpenAiVectorizerConfigRequest",
        "description": "Configuration for using an OpenAI vectorizer.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "add_openai_api_key",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:AddOpenaiApiKeyEnum"
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_:OpenAiVectorizerTextEmbedding3Large": {
        "name": "OpenAiVectorizerTextEmbedding3Large",
        "description": "OpenAI vectorizer for text-embedding-3-large.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "config",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:OpenAiVectorizerConfig"
                }
              }
            }
          ]
        }
      },
      "type_:OpenAiVectorizerTextEmbedding3LargeRequest": {
        "name": "OpenAiVectorizerTextEmbedding3LargeRequest",
        "description": "OpenAI vectorizer for text-embedding-3-large.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "config",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:OpenAiVectorizerConfigRequest"
                }
              }
            }
          ]
        }
      },
      "type_:OpenAiVectorizerTextEmbedding3Small": {
        "name": "OpenAiVectorizerTextEmbedding3Small",
        "description": "OpenAI vectorizer for text-embedding-3-small.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "config",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:OpenAiVectorizerConfig"
                }
              }
            }
          ]
        }
      },
      "type_:OpenAiVectorizerTextEmbedding3SmallRequest": {
        "name": "OpenAiVectorizerTextEmbedding3SmallRequest",
        "description": "OpenAI vectorizer for text-embedding-3-small.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "config",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:OpenAiVectorizerConfigRequest"
                }
              }
            }
          ]
        }
      },
      "type_:OpenAiVectorizerTextEmbeddingAda002": {
        "name": "OpenAiVectorizerTextEmbeddingAda002",
        "description": "OpenAI vectorizer for text-embedding-ada-002.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "config",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:OpenAiVectorizerConfig"
                }
              }
            }
          ]
        }
      },
      "type_:OpenAiVectorizerTextEmbeddingAda002Request": {
        "name": "OpenAiVectorizerTextEmbeddingAda002Request",
        "description": "OpenAI vectorizer for text-embedding-ada-002.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "config",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:OpenAiVectorizerConfigRequest"
                }
              }
            }
          ]
        }
      },
      "type_:PaginatedDocumentIndexReadList": {
        "name": "PaginatedDocumentIndexReadList",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "count",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "next",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "previous",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "results",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "list",
                      "itemShape": {
                        "type": "alias",
                        "value": {
                          "type": "id",
                          "id": "type_:DocumentIndexRead"
                        }
                      }
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_:PaginatedFolderEntityList": {
        "name": "PaginatedFolderEntityList",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "count",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "next",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "previous",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "results",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "list",
                      "itemShape": {
                        "type": "alias",
                        "value": {
                          "type": "id",
                          "id": "type_:FolderEntity"
                        }
                      }
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_:PaginatedSlimDeploymentReadList": {
        "name": "PaginatedSlimDeploymentReadList",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "count",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "next",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "previous",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "results",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "list",
                      "itemShape": {
                        "type": "alias",
                        "value": {
                          "type": "id",
                          "id": "type_:SlimDeploymentRead"
                        }
                      }
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_:PaginatedSlimDocumentList": {
        "name": "PaginatedSlimDocumentList",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "count",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "next",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "previous",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "results",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "list",
                      "itemShape": {
                        "type": "alias",
                        "value": {
                          "type": "id",
                          "id": "type_:SlimDocument"
                        }
                      }
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_:PaginatedSlimWorkflowDeploymentList": {
        "name": "PaginatedSlimWorkflowDeploymentList",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "count",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "next",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "previous",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "results",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "list",
                      "itemShape": {
                        "type": "alias",
                        "value": {
                          "type": "id",
                          "id": "type_:SlimWorkflowDeployment"
                        }
                      }
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_:PaginatedTestSuiteRunExecutionList": {
        "name": "PaginatedTestSuiteRunExecutionList",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "count",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              }
            },
            {
              "key": "next",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "previous",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "results",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "list",
                  "itemShape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:TestSuiteRunExecution"
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_:PaginatedTestSuiteTestCaseList": {
        "name": "PaginatedTestSuiteTestCaseList",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "count",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              }
            },
            {
              "key": "next",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "previous",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "results",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "list",
                  "itemShape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:TestSuiteTestCase"
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_:PdfSearchResultMetaSource": {
        "name": "PdfSearchResultMetaSource",
        "description": "The source of a search result from a PDF document.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "start_page_num",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                }
              },
              "description": "The 1-indexed page number where the chunk starts in the document. Only available for supported chunking strategies and document types."
            },
            {
              "key": "end_page_num",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                }
              },
              "description": "The 1-indexed page number where the chunk ends in the document. Only available for supported chunking strategies and document types."
            }
          ]
        }
      },
      "type_:PdfSearchResultMetaSourceRequest": {
        "name": "PdfSearchResultMetaSourceRequest",
        "description": "The source of a search result from a PDF document.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "start_page_num",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                }
              },
              "description": "The 1-indexed page number where the chunk starts in the document. Only available for supported chunking strategies and document types."
            },
            {
              "key": "end_page_num",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                }
              },
              "description": "The 1-indexed page number where the chunk ends in the document. Only available for supported chunking strategies and document types."
            }
          ]
        }
      },
      "type_:Price": {
        "name": "Price",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "value",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "double"
                  }
                }
              }
            },
            {
              "key": "unit",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:UnitEnum"
                }
              }
            }
          ]
        }
      },
      "type_:ProcessingFailureReasonEnum": {
        "name": "ProcessingFailureReasonEnum",
        "description": "- `EXCEEDED_CHARACTER_LIMIT` - Exceeded Character Limit\n- `INVALID_FILE` - Invalid File",
        "shape": {
          "type": "enum",
          "values": [
            {
              "value": "EXCEEDED_CHARACTER_LIMIT"
            },
            {
              "value": "INVALID_FILE"
            }
          ]
        }
      },
      "type_:ProcessingStateEnum": {
        "name": "ProcessingStateEnum",
        "description": "- `QUEUED` - Queued\n- `PROCESSING` - Processing\n- `PROCESSED` - Processed\n- `FAILED` - Failed",
        "shape": {
          "type": "enum",
          "values": [
            {
              "value": "QUEUED"
            },
            {
              "value": "PROCESSING"
            },
            {
              "value": "PROCESSED"
            },
            {
              "value": "FAILED"
            }
          ]
        }
      },
      "type_:PromptDeploymentExpandMetaRequest": {
        "name": "PromptDeploymentExpandMetaRequest",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "model_name",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean"
                      }
                    }
                  }
                }
              },
              "description": "If enabled, the response will include the model identifier representing the ML Model invoked by the Prompt."
            },
            {
              "key": "usage",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean"
                      }
                    }
                  }
                }
              },
              "description": "If enabled, the response will include model host usage tracking. This may increase latency for some model hosts."
            },
            {
              "key": "cost",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean"
                      }
                    }
                  }
                }
              },
              "description": "If enabled, the response will include model host cost tracking. This may increase latency for some model hosts."
            },
            {
              "key": "finish_reason",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean"
                      }
                    }
                  }
                }
              },
              "description": "If enabled, the response will include the reason provided by the model for why the execution finished."
            },
            {
              "key": "latency",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean"
                      }
                    }
                  }
                }
              },
              "description": "If enabled, the response will include the time in nanoseconds it took to execute the Prompt Deployment."
            },
            {
              "key": "deployment_release_tag",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean"
                      }
                    }
                  }
                }
              },
              "description": "If enabled, the response will include the release tag of the Prompt Deployment."
            },
            {
              "key": "prompt_version_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean"
                      }
                    }
                  }
                }
              },
              "description": "If enabled, the response will include the ID of the Prompt Version backing the deployment."
            }
          ]
        }
      },
      "type_:PromptDeploymentInputRequest": {
        "name": "PromptDeploymentInputRequest",
        "shape": {
          "type": "discriminatedUnion",
          "discriminant": "type",
          "variants": [
            {
              "discriminantValue": "STRING",
              "extends": [
                "type_:StringInputRequest"
              ],
              "properties": []
            },
            {
              "discriminantValue": "JSON",
              "extends": [
                "type_:JsonInputRequest"
              ],
              "properties": []
            },
            {
              "discriminantValue": "CHAT_HISTORY",
              "extends": [
                "type_:ChatHistoryInputRequest"
              ],
              "properties": []
            }
          ]
        }
      },
      "type_:PromptExecutionMeta": {
        "name": "PromptExecutionMeta",
        "description": "The subset of the metadata tracked by Vellum during prompt execution that the request opted into with `expand_meta`.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "model_name",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "latency",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "deployment_release_tag",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "prompt_version_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "finish_reason",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:FinishReasonEnum"
                    }
                  }
                }
              }
            },
            {
              "key": "usage",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:MlModelUsage"
                    }
                  }
                }
              }
            },
            {
              "key": "cost",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:Price"
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_:PromptNodeExecutionMeta": {
        "name": "PromptNodeExecutionMeta",
        "description": "The subset of the metadata tracked by Vellum during prompt execution that the request opted into with `expand_meta`.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "usage",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:MlModelUsage"
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_:PromptNodeResult": {
        "name": "PromptNodeResult",
        "description": "A Node Result Event emitted from a Prompt Node.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "data",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:PromptNodeResultData"
                }
              }
            }
          ]
        }
      },
      "type_:PromptNodeResultData": {
        "name": "PromptNodeResultData",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "execution_meta",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:PromptNodeExecutionMeta"
                    }
                  }
                }
              }
            },
            {
              "key": "output_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "key": "array_output_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "execution_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "text",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "delta",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_:PromptOutput": {
        "name": "PromptOutput",
        "shape": {
          "type": "discriminatedUnion",
          "discriminant": "type",
          "variants": [
            {
              "discriminantValue": "STRING",
              "extends": [
                "type_:StringVellumValue"
              ],
              "properties": []
            },
            {
              "discriminantValue": "JSON",
              "extends": [
                "type_:JsonVellumValue"
              ],
              "properties": []
            },
            {
              "discriminantValue": "ERROR",
              "extends": [
                "type_:ErrorVellumValue"
              ],
              "properties": []
            },
            {
              "discriminantValue": "FUNCTION_CALL",
              "extends": [
                "type_:FunctionCallVellumValue"
              ],
              "properties": []
            }
          ]
        }
      },
      "type_:RawPromptExecutionOverridesRequest": {
        "name": "RawPromptExecutionOverridesRequest",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "body",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "map",
                      "keyShape": {
                        "type": "alias",
                        "value": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      },
                      "valueShape": {
                        "type": "alias",
                        "value": {
                          "type": "unknown"
                        }
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "headers",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "map",
                      "keyShape": {
                        "type": "alias",
                        "value": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      },
                      "valueShape": {
                        "type": "alias",
                        "value": {
                          "type": "optional",
                          "shape": {
                            "type": "alias",
                            "value": {
                              "type": "primitive",
                              "value": {
                                "type": "string"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              },
              "description": "The raw headers to send to the model host."
            },
            {
              "key": "url",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 1
                      }
                    }
                  }
                }
              },
              "description": "The raw URL to send to the model host."
            }
          ]
        }
      },
      "type_:ReductoChunkerConfig": {
        "name": "ReductoChunkerConfig",
        "description": "Configuration for Reducto chunking",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "character_limit",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "integer",
                        "minimum": 0,
                        "default": 1000
                      }
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_:ReductoChunkerConfigRequest": {
        "name": "ReductoChunkerConfigRequest",
        "description": "Configuration for Reducto chunking",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "character_limit",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "integer",
                        "minimum": 0,
                        "default": 1000
                      }
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_:ReductoChunking": {
        "name": "ReductoChunking",
        "description": "Reducto chunking",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "chunker_config",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:ReductoChunkerConfig"
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_:ReductoChunkingRequest": {
        "name": "ReductoChunkingRequest",
        "description": "Reducto chunking",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "chunker_config",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:ReductoChunkerConfigRequest"
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_:RejectedExecutePromptEvent": {
        "name": "RejectedExecutePromptEvent",
        "description": "The final data returned indicating an error occurred during the stream.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "error",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:VellumError"
                }
              }
            },
            {
              "key": "execution_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "key": "meta",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:RejectedPromptExecutionMeta"
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_:RejectedExecutePromptResponse": {
        "name": "RejectedExecutePromptResponse",
        "description": "The unsuccessful response from the model containing an error of what went wrong.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "meta",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:PromptExecutionMeta"
                    }
                  }
                }
              }
            },
            {
              "key": "raw",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "map",
                      "keyShape": {
                        "type": "alias",
                        "value": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      },
                      "valueShape": {
                        "type": "alias",
                        "value": {
                          "type": "unknown"
                        }
                      }
                    }
                  }
                }
              },
              "description": "The subset of the raw response from the model that the request opted into with `expand_raw`."
            },
            {
              "key": "execution_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "The ID of the execution."
            },
            {
              "key": "error",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:VellumError"
                }
              }
            }
          ]
        }
      },
      "type_:RejectedExecuteWorkflowWorkflowResultEvent": {
        "name": "RejectedExecuteWorkflowWorkflowResultEvent",
        "description": "The unsuccessful response from the Workflow execution containing an error specifying what went wrong.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "key": "ts",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "datetime"
                  }
                }
              }
            },
            {
              "key": "error",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:WorkflowEventError"
                }
              }
            }
          ]
        }
      },
      "type_:RejectedPromptExecutionMeta": {
        "name": "RejectedPromptExecutionMeta",
        "description": "The subset of the metadata tracked by Vellum during prompt execution that the request opted into with `expand_meta`.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "latency",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "finish_reason",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:FinishReasonEnum"
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_:RejectedWorkflowNodeResultEvent": {
        "name": "RejectedWorkflowNodeResultEvent",
        "description": "An event that indicates that the node has rejected its execution.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "key": "node_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "key": "node_result_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "key": "ts",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "datetime"
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "data",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:WorkflowNodeResultData"
                    }
                  }
                }
              }
            },
            {
              "key": "source_execution_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "error",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:WorkflowEventError"
                }
              }
            }
          ]
        }
      },
      "type_:ReleaseTagSource": {
        "name": "ReleaseTagSource",
        "description": "- `SYSTEM` - System\n- `USER` - User",
        "shape": {
          "type": "enum",
          "values": [
            {
              "value": "SYSTEM"
            },
            {
              "value": "USER"
            }
          ]
        }
      },
      "type_:ReplaceTestSuiteTestCaseRequest": {
        "name": "ReplaceTestSuiteTestCaseRequest",
        "description": "Information about the Test Case to replace",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "The Vellum-generated ID of the Test Case whose data you'd like to replace. Must specify either this or external_id."
            },
            {
              "key": "external_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 1
                      }
                    }
                  }
                }
              },
              "description": "The ID that was originally provided upon Test Case creation that uniquely identifies the Test Case whose data you'd like to replace. Must specify either this of id."
            },
            {
              "key": "label",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "A human-readable label used to convey the intention of this Test Case"
            },
            {
              "key": "input_values",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "list",
                  "itemShape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:NamedTestCaseVariableValueRequest"
                    }
                  }
                }
              },
              "description": "Values for each of the Test Case's input variables"
            },
            {
              "key": "evaluation_values",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "list",
                  "itemShape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:NamedTestCaseVariableValueRequest"
                    }
                  }
                }
              },
              "description": "Values for each of the Test Case's evaluation variables"
            }
          ]
        }
      },
      "type_:SandboxScenario": {
        "name": "SandboxScenario",
        "description": "Sandbox Scenario",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "label",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string",
                        "default": "Untitled Scenario"
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "inputs",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "list",
                  "itemShape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:ScenarioInput"
                    }
                  }
                }
              },
              "description": "The inputs for the scenario"
            },
            {
              "key": "id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "The id of the scenario"
            }
          ]
        }
      },
      "type_:ScenarioInput": {
        "name": "ScenarioInput",
        "shape": {
          "type": "discriminatedUnion",
          "discriminant": "type",
          "variants": [
            {
              "discriminantValue": "STRING",
              "extends": [
                "type_:ScenarioInputStringVariableValue"
              ],
              "properties": []
            },
            {
              "discriminantValue": "JSON",
              "extends": [
                "type_:ScenarioInputJsonVariableValue"
              ],
              "properties": []
            },
            {
              "discriminantValue": "CHAT_HISTORY",
              "extends": [
                "type_:ScenarioInputChatHistoryVariableValue"
              ],
              "properties": []
            }
          ]
        }
      },
      "type_:ScenarioInputChatHistoryVariableValue": {
        "name": "ScenarioInputChatHistoryVariableValue",
        "description": "Prompt Sandbox Scenario input value that is of type CHAT_HISTORY",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "value",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "list",
                      "itemShape": {
                        "type": "alias",
                        "value": {
                          "type": "id",
                          "id": "type_:ChatMessage"
                        }
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "input_variable_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          ]
        }
      },
      "type_:ScenarioInputJsonVariableValue": {
        "name": "ScenarioInputJsonVariableValue",
        "description": "Prompt Sandbox Scenario input value that is of type JSON",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "value",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "unknown"
                }
              }
            },
            {
              "key": "input_variable_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          ]
        }
      },
      "type_:ScenarioInputStringVariableValue": {
        "name": "ScenarioInputStringVariableValue",
        "description": "Prompt Sandbox Scenario input value that is of type STRING",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "value",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "input_variable_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          ]
        }
      },
      "type_:SearchErrorResponse": {
        "name": "SearchErrorResponse",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "detail",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "Details about why the request failed."
            }
          ]
        }
      },
      "type_:SearchFiltersRequest": {
        "name": "SearchFiltersRequest",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "external_ids",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "list",
                      "itemShape": {
                        "type": "alias",
                        "value": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              },
              "description": "The document external IDs to filter by"
            },
            {
              "key": "metadata",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:MetadataFiltersRequest"
                    }
                  }
                }
              },
              "description": "The metadata filters to apply to the search"
            }
          ]
        }
      },
      "type_:SearchNodeResult": {
        "name": "SearchNodeResult",
        "description": "A Node Result Event emitted from a Search Node.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "data",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:SearchNodeResultData"
                }
              }
            }
          ]
        }
      },
      "type_:SearchNodeResultData": {
        "name": "SearchNodeResultData",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "results_output_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "key": "results",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "list",
                  "itemShape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:SearchResult"
                    }
                  }
                }
              },
              "description": "The results of the search. Each result represents a chunk that matches the search query."
            },
            {
              "key": "text_output_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "key": "text",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_:SearchRequestOptionsRequest": {
        "name": "SearchRequestOptionsRequest",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "limit",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "integer",
                        "minimum": 1,
                        "maximum": 1000,
                        "default": 10
                      }
                    }
                  }
                }
              },
              "description": "The maximum number of results to return."
            },
            {
              "key": "weights",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:SearchWeightsRequest"
                    }
                  }
                }
              },
              "description": "The weights to use for the search. Must add up to 1.0."
            },
            {
              "key": "result_merging",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:SearchResultMergingRequest"
                    }
                  }
                }
              },
              "description": "The configuration for merging results."
            },
            {
              "key": "filters",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:SearchFiltersRequest"
                    }
                  }
                }
              },
              "description": "The filters to apply to the search."
            }
          ]
        }
      },
      "type_:SearchResponse": {
        "name": "SearchResponse",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "results",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "list",
                  "itemShape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:SearchResult"
                    }
                  }
                }
              },
              "description": "The results of the search. Each result represents a chunk that matches the search query."
            }
          ]
        }
      },
      "type_:SearchResult": {
        "name": "SearchResult",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "text",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "The text of the chunk that matched the search query."
            },
            {
              "key": "score",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "double"
                  }
                }
              },
              "description": "A score representing how well the chunk matches the search query."
            },
            {
              "key": "keywords",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "list",
                  "itemShape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "document",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:SearchResultDocument"
                }
              },
              "description": "The document that contains the chunk that matched the search query."
            },
            {
              "key": "meta",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:SearchResultMeta"
                    }
                  }
                }
              },
              "description": "Additional information about the search result."
            }
          ]
        }
      },
      "type_:SearchResultDocument": {
        "name": "SearchResultDocument",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "The ID of the document."
            },
            {
              "key": "label",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "The human-readable name for the document."
            },
            {
              "key": "external_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "The unique ID of the document as represented in an external system and specified when it was originally uploaded."
            },
            {
              "key": "metadata",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "map",
                      "keyShape": {
                        "type": "alias",
                        "value": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      },
                      "valueShape": {
                        "type": "alias",
                        "value": {
                          "type": "unknown"
                        }
                      }
                    }
                  }
                }
              },
              "description": "A previously supplied JSON object containing metadata that can be filtered on when searching."
            }
          ]
        }
      },
      "type_:SearchResultDocumentRequest": {
        "name": "SearchResultDocumentRequest",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "The ID of the document."
            },
            {
              "key": "label",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 1
                  }
                }
              },
              "description": "The human-readable name for the document."
            },
            {
              "key": "external_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 1
                      }
                    }
                  }
                }
              },
              "description": "The unique ID of the document as represented in an external system and specified when it was originally uploaded."
            },
            {
              "key": "metadata",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "map",
                      "keyShape": {
                        "type": "alias",
                        "value": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      },
                      "valueShape": {
                        "type": "alias",
                        "value": {
                          "type": "unknown"
                        }
                      }
                    }
                  }
                }
              },
              "description": "A previously supplied JSON object containing metadata that can be filtered on when searching."
            }
          ]
        }
      },
      "type_:SearchResultMergingRequest": {
        "name": "SearchResultMergingRequest",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "enabled",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean"
                      }
                    }
                  }
                }
              },
              "description": "Whether to enable merging results"
            }
          ]
        }
      },
      "type_:SearchResultMeta": {
        "name": "SearchResultMeta",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "source",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:SearchResultMetaSource"
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_:SearchResultMetaRequest": {
        "name": "SearchResultMetaRequest",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "source",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:SearchResultMetaSourceRequest"
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_:SearchResultMetaSource": {
        "name": "SearchResultMetaSource",
        "shape": {
          "type": "discriminatedUnion",
          "discriminant": "document_type",
          "variants": [
            {
              "discriminantValue": "PDF",
              "extends": [
                "type_:PdfSearchResultMetaSource"
              ],
              "properties": []
            }
          ]
        }
      },
      "type_:SearchResultMetaSourceRequest": {
        "name": "SearchResultMetaSourceRequest",
        "shape": {
          "type": "discriminatedUnion",
          "discriminant": "document_type",
          "variants": [
            {
              "discriminantValue": "PDF",
              "extends": [
                "type_:PdfSearchResultMetaSourceRequest"
              ],
              "properties": []
            }
          ]
        }
      },
      "type_:SearchResultRequest": {
        "name": "SearchResultRequest",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "text",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "The text of the chunk that matched the search query."
            },
            {
              "key": "score",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "double"
                  }
                }
              },
              "description": "A score representing how well the chunk matches the search query."
            },
            {
              "key": "keywords",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "list",
                  "itemShape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "document",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:SearchResultDocumentRequest"
                }
              },
              "description": "The document that contains the chunk that matched the search query."
            },
            {
              "key": "meta",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:SearchResultMetaRequest"
                    }
                  }
                }
              },
              "description": "Additional information about the search result."
            }
          ]
        }
      },
      "type_:SearchResultsVariableValue": {
        "name": "SearchResultsVariableValue",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "value",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "list",
                      "itemShape": {
                        "type": "alias",
                        "value": {
                          "type": "id",
                          "id": "type_:SearchResult"
                        }
                      }
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_:SearchResultsVellumValue": {
        "name": "SearchResultsVellumValue",
        "description": "A value representing Search Results.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "value",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "list",
                      "itemShape": {
                        "type": "alias",
                        "value": {
                          "type": "id",
                          "id": "type_:SearchResult"
                        }
                      }
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_:SearchResultsVellumValueRequest": {
        "name": "SearchResultsVellumValueRequest",
        "description": "A value representing Search Results.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "value",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "list",
                      "itemShape": {
                        "type": "alias",
                        "value": {
                          "type": "id",
                          "id": "type_:SearchResultRequest"
                        }
                      }
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_:SearchWeightsRequest": {
        "name": "SearchWeightsRequest",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "semantic_similarity",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "double",
                        "minimum": 0,
                        "maximum": 1,
                        "default": 0.8
                      }
                    }
                  }
                }
              },
              "description": "The relative weight to give to semantic similarity"
            },
            {
              "key": "keywords",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "double",
                        "minimum": 0,
                        "maximum": 1,
                        "default": 0.2
                      }
                    }
                  }
                }
              },
              "description": "The relative weight to give to keywords"
            }
          ]
        }
      },
      "type_:SecretTypeEnum": {
        "name": "SecretTypeEnum",
        "description": "- `USER_DEFINED` - User Defined\n- `HMAC` - Hmac\n- `INTERNAL_API_KEY` - Internal Api Key",
        "shape": {
          "type": "enum",
          "values": [
            {
              "value": "USER_DEFINED"
            },
            {
              "value": "HMAC"
            },
            {
              "value": "INTERNAL_API_KEY"
            }
          ]
        }
      },
      "type_:SentenceChunkerConfig": {
        "name": "SentenceChunkerConfig",
        "description": "Configuration for sentence chunking",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "character_limit",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "integer",
                        "minimum": 0,
                        "default": 1000
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "min_overlap_ratio",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "double",
                        "minimum": 0,
                        "maximum": 1,
                        "default": 0.5
                      }
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_:SentenceChunkerConfigRequest": {
        "name": "SentenceChunkerConfigRequest",
        "description": "Configuration for sentence chunking",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "character_limit",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "integer",
                        "minimum": 0,
                        "default": 1000
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "min_overlap_ratio",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "double",
                        "minimum": 0,
                        "maximum": 1,
                        "default": 0.5
                      }
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_:SentenceChunking": {
        "name": "SentenceChunking",
        "description": "Sentence chunking",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "chunker_config",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:SentenceChunkerConfig"
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_:SentenceChunkingRequest": {
        "name": "SentenceChunkingRequest",
        "description": "Sentence chunking",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "chunker_config",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:SentenceChunkerConfigRequest"
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_:SlimDeploymentRead": {
        "name": "SlimDeploymentRead",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "key": "created",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "datetime"
                  }
                }
              }
            },
            {
              "key": "label",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "A human-readable label for the deployment"
            },
            {
              "key": "name",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "A name that uniquely identifies this deployment within its workspace"
            },
            {
              "key": "status",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:EntityStatus"
                    }
                  }
                }
              },
              "description": "The current status of the deployment\n\n- `ACTIVE` - Active\n- `ARCHIVED` - Archived"
            },
            {
              "key": "environment",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:EnvironmentEnum"
                    }
                  }
                }
              },
              "description": "The environment this deployment is used in\n\n- `DEVELOPMENT` - Development\n- `STAGING` - Staging\n- `PRODUCTION` - Production"
            },
            {
              "key": "last_deployed_on",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "datetime"
                  }
                }
              }
            },
            {
              "key": "input_variables",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "list",
                  "itemShape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:VellumVariable"
                    }
                  }
                }
              }
            },
            {
              "key": "description",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "A human-readable description of the deployment"
            }
          ]
        }
      },
      "type_:SlimDocument": {
        "name": "SlimDocument",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "Vellum-generated ID that uniquely identifies this document."
            },
            {
              "key": "external_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "The external ID that was originally provided when uploading the document."
            },
            {
              "key": "last_uploaded_at",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "datetime"
                  }
                }
              },
              "description": "A timestamp representing when this document was most recently uploaded."
            },
            {
              "key": "label",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "Human-friendly name for this document."
            },
            {
              "key": "processing_state",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:ProcessingStateEnum"
                    }
                  }
                }
              },
              "description": "An enum value representing where this document is along its processing lifecycle. Note that this is different than its indexing lifecycle.\n\n- `QUEUED` - Queued\n- `PROCESSING` - Processing\n- `PROCESSED` - Processed\n- `FAILED` - Failed"
            },
            {
              "key": "processing_failure_reason",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:ProcessingFailureReasonEnum"
                    }
                  }
                }
              },
              "description": "An enum value representing why the document could not be processed. Is null unless processing_state is FAILED.\n\n- `EXCEEDED_CHARACTER_LIMIT` - Exceeded Character Limit\n- `INVALID_FILE` - Invalid File"
            },
            {
              "key": "status",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:DocumentStatus"
                    }
                  }
                }
              },
              "description": "The document's current status.\n\n- `ACTIVE` - Active"
            },
            {
              "key": "keywords",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "list",
                      "itemShape": {
                        "type": "alias",
                        "value": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              },
              "description": "A list of keywords associated with this document. Originally provided when uploading the document."
            },
            {
              "key": "metadata",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "map",
                      "keyShape": {
                        "type": "alias",
                        "value": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      },
                      "valueShape": {
                        "type": "alias",
                        "value": {
                          "type": "unknown"
                        }
                      }
                    }
                  }
                }
              },
              "description": "A previously supplied JSON object containing metadata that can be filtered on when searching."
            },
            {
              "key": "document_to_document_indexes",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "list",
                  "itemShape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:DocumentDocumentToDocumentIndex"
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_:SlimWorkflowDeployment": {
        "name": "SlimWorkflowDeployment",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "key": "name",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "A name that uniquely identifies this workflow deployment within its workspace"
            },
            {
              "key": "label",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "A human-readable label for the workflow deployment"
            },
            {
              "key": "status",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:EntityStatus"
                    }
                  }
                }
              },
              "description": "The current status of the workflow deployment\n\n- `ACTIVE` - Active\n- `ARCHIVED` - Archived"
            },
            {
              "key": "environment",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:EnvironmentEnum"
                    }
                  }
                }
              },
              "description": "The environment this workflow deployment is used in\n\n- `DEVELOPMENT` - Development\n- `STAGING` - Staging\n- `PRODUCTION` - Production"
            },
            {
              "key": "created",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "datetime"
                  }
                }
              }
            },
            {
              "key": "last_deployed_on",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "datetime"
                  }
                }
              }
            },
            {
              "key": "input_variables",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "list",
                  "itemShape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:VellumVariable"
                    }
                  }
                }
              },
              "description": "The input variables this Workflow Deployment expects to receive values for when it is executed."
            },
            {
              "key": "output_variables",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "list",
                  "itemShape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:VellumVariable"
                    }
                  }
                }
              },
              "description": "The output variables this Workflow Deployment will produce when it is executed."
            },
            {
              "key": "description",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "A human-readable description of the workflow deployment"
            }
          ]
        }
      },
      "type_:StreamingExecutePromptEvent": {
        "name": "StreamingExecutePromptEvent",
        "description": "The data returned for each delta during the prompt execution stream.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "output",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:PromptOutput"
                }
              }
            },
            {
              "key": "output_index",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              }
            },
            {
              "key": "execution_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "key": "meta",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:StreamingPromptExecutionMeta"
                    }
                  }
                }
              }
            },
            {
              "key": "raw",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "map",
                      "keyShape": {
                        "type": "alias",
                        "value": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      },
                      "valueShape": {
                        "type": "alias",
                        "value": {
                          "type": "unknown"
                        }
                      }
                    }
                  }
                }
              },
              "description": "The subset of the raw response from the model that the request opted into with `expand_raw`."
            }
          ]
        }
      },
      "type_:StreamingPromptExecutionMeta": {
        "name": "StreamingPromptExecutionMeta",
        "description": "The subset of the metadata tracked by Vellum during prompt execution that the request opted into with `expand_meta`.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "latency",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_:StreamingWorkflowNodeResultEvent": {
        "name": "StreamingWorkflowNodeResultEvent",
        "description": "An event that indicates that the node has execution is in progress.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "key": "node_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "key": "node_result_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "key": "ts",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "datetime"
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "data",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:WorkflowNodeResultData"
                    }
                  }
                }
              }
            },
            {
              "key": "source_execution_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "output",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:NodeOutputCompiledValue"
                    }
                  }
                }
              }
            },
            {
              "key": "output_index",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_:StringChatMessageContent": {
        "name": "StringChatMessageContent",
        "description": "A string value that is used in a chat message.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "value",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          ]
        }
      },
      "type_:StringChatMessageContentRequest": {
        "name": "StringChatMessageContentRequest",
        "description": "A string value that is used in a chat message.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "value",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          ]
        }
      },
      "type_:StringInputRequest": {
        "name": "StringInputRequest",
        "description": "A user input representing a string value",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "name",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 1
                  }
                }
              },
              "description": "The variable's name"
            },
            {
              "key": "value",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          ]
        }
      },
      "type_:StringVariableValue": {
        "name": "StringVariableValue",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "value",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_:StringVellumValue": {
        "name": "StringVellumValue",
        "description": "A value representing a string.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "value",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_:StringVellumValueRequest": {
        "name": "StringVellumValueRequest",
        "description": "A value representing a string.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "value",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_:SubmitCompletionActualRequest": {
        "name": "SubmitCompletionActualRequest",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 1
                      }
                    }
                  }
                }
              },
              "description": "The Vellum-generated ID of a previously generated completion. Must provide either this or external_id."
            },
            {
              "key": "external_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 1
                      }
                    }
                  }
                }
              },
              "description": "The external ID that was originally provided when generating the completion that you'd now like to submit actuals for. Must provide either this or id."
            },
            {
              "key": "text",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "Text representing what the completion _should_ have been."
            },
            {
              "key": "quality",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "double",
                        "minimum": 0,
                        "maximum": 1
                      }
                    }
                  }
                }
              },
              "description": "A number between 0 and 1 representing the quality of the completion. 0 is the worst, 1 is the best."
            },
            {
              "key": "timestamp",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "datetime"
                      }
                    }
                  }
                }
              },
              "description": "Optionally provide the timestamp representing when this feedback was collected. Used for reporting purposes."
            },
            {
              "key": "metadata",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "map",
                      "keyShape": {
                        "type": "alias",
                        "value": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      },
                      "valueShape": {
                        "type": "alias",
                        "value": {
                          "type": "unknown"
                        }
                      }
                    }
                  }
                }
              },
              "description": "Optionally provide additional metadata about the feedback submission."
            }
          ]
        }
      },
      "type_:SubmitCompletionActualsErrorResponse": {
        "name": "SubmitCompletionActualsErrorResponse",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "detail",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          ]
        }
      },
      "type_:SubmitWorkflowExecutionActualRequest": {
        "name": "SubmitWorkflowExecutionActualRequest",
        "shape": {
          "type": "discriminatedUnion",
          "discriminant": "output_type",
          "variants": [
            {
              "discriminantValue": "STRING",
              "extends": [
                "type_:WorkflowExecutionActualStringRequest"
              ],
              "properties": []
            },
            {
              "discriminantValue": "JSON",
              "extends": [
                "type_:WorkflowExecutionActualJsonRequest"
              ],
              "properties": []
            },
            {
              "discriminantValue": "CHAT_HISTORY",
              "extends": [
                "type_:WorkflowExecutionActualChatHistoryRequest"
              ],
              "properties": []
            }
          ]
        }
      },
      "type_:SubworkflowNodeResult": {
        "name": "SubworkflowNodeResult",
        "description": "A Node Result Event emitted from a Subworkflow Node.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "data",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:SubworkflowNodeResultData"
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_:SubworkflowNodeResultData": {
        "name": "SubworkflowNodeResultData",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "execution_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_:TemplatingNodeArrayResult": {
        "name": "TemplatingNodeArrayResult",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "key": "value",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "list",
                      "itemShape": {
                        "type": "alias",
                        "value": {
                          "type": "id",
                          "id": "type_:VellumValue"
                        }
                      }
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_:TemplatingNodeChatHistoryResult": {
        "name": "TemplatingNodeChatHistoryResult",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "key": "value",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "list",
                      "itemShape": {
                        "type": "alias",
                        "value": {
                          "type": "id",
                          "id": "type_:ChatMessage"
                        }
                      }
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_:TemplatingNodeErrorResult": {
        "name": "TemplatingNodeErrorResult",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "key": "value",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:VellumError"
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_:TemplatingNodeFunctionCallResult": {
        "name": "TemplatingNodeFunctionCallResult",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "key": "value",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:FunctionCall"
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_:TemplatingNodeJsonResult": {
        "name": "TemplatingNodeJsonResult",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "key": "value",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "unknown"
                }
              }
            }
          ]
        }
      },
      "type_:TemplatingNodeNumberResult": {
        "name": "TemplatingNodeNumberResult",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "key": "value",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_:TemplatingNodeResult": {
        "name": "TemplatingNodeResult",
        "description": "A Node Result Event emitted from a Templating Node.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "data",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:TemplatingNodeResultData"
                }
              }
            }
          ]
        }
      },
      "type_:TemplatingNodeResultData": {
        "name": "TemplatingNodeResultData",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "output",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:TemplatingNodeResultOutput"
                }
              }
            }
          ]
        }
      },
      "type_:TemplatingNodeResultOutput": {
        "name": "TemplatingNodeResultOutput",
        "shape": {
          "type": "discriminatedUnion",
          "discriminant": "type",
          "variants": [
            {
              "discriminantValue": "STRING",
              "extends": [
                "type_:TemplatingNodeStringResult"
              ],
              "properties": []
            },
            {
              "discriminantValue": "NUMBER",
              "extends": [
                "type_:TemplatingNodeNumberResult"
              ],
              "properties": []
            },
            {
              "discriminantValue": "JSON",
              "extends": [
                "type_:TemplatingNodeJsonResult"
              ],
              "properties": []
            },
            {
              "discriminantValue": "CHAT_HISTORY",
              "extends": [
                "type_:TemplatingNodeChatHistoryResult"
              ],
              "properties": []
            },
            {
              "discriminantValue": "SEARCH_RESULTS",
              "extends": [
                "type_:TemplatingNodeSearchResultsResult"
              ],
              "properties": []
            },
            {
              "discriminantValue": "ERROR",
              "extends": [
                "type_:TemplatingNodeErrorResult"
              ],
              "properties": []
            },
            {
              "discriminantValue": "ARRAY",
              "extends": [
                "type_:TemplatingNodeArrayResult"
              ],
              "properties": []
            },
            {
              "discriminantValue": "FUNCTION_CALL",
              "extends": [
                "type_:TemplatingNodeFunctionCallResult"
              ],
              "properties": []
            }
          ]
        }
      },
      "type_:TemplatingNodeSearchResultsResult": {
        "name": "TemplatingNodeSearchResultsResult",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "key": "value",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "list",
                      "itemShape": {
                        "type": "alias",
                        "value": {
                          "type": "id",
                          "id": "type_:SearchResult"
                        }
                      }
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_:TemplatingNodeStringResult": {
        "name": "TemplatingNodeStringResult",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "key": "value",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_:TerminalNodeArrayResult": {
        "name": "TerminalNodeArrayResult",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "name",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "The unique name given to the terminal node that produced this output."
            },
            {
              "key": "value",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "list",
                      "itemShape": {
                        "type": "alias",
                        "value": {
                          "type": "id",
                          "id": "type_:VellumValue"
                        }
                      }
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_:TerminalNodeChatHistoryResult": {
        "name": "TerminalNodeChatHistoryResult",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "name",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "The unique name given to the terminal node that produced this output."
            },
            {
              "key": "value",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "list",
                      "itemShape": {
                        "type": "alias",
                        "value": {
                          "type": "id",
                          "id": "type_:ChatMessage"
                        }
                      }
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_:TerminalNodeErrorResult": {
        "name": "TerminalNodeErrorResult",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "name",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "The unique name given to the terminal node that produced this output."
            },
            {
              "key": "value",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:VellumError"
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_:TerminalNodeFunctionCallResult": {
        "name": "TerminalNodeFunctionCallResult",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "name",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "The unique name given to the terminal node that produced this output."
            },
            {
              "key": "value",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:FunctionCall"
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_:TerminalNodeJsonResult": {
        "name": "TerminalNodeJsonResult",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "name",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "The unique name given to the terminal node that produced this output."
            },
            {
              "key": "value",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "unknown"
                }
              }
            }
          ]
        }
      },
      "type_:TerminalNodeNumberResult": {
        "name": "TerminalNodeNumberResult",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "name",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "The unique name given to the terminal node that produced this output."
            },
            {
              "key": "value",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_:TerminalNodeResult": {
        "name": "TerminalNodeResult",
        "description": "A Node Result Event emitted from a Terminal Node.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "data",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:TerminalNodeResultData"
                }
              }
            }
          ]
        }
      },
      "type_:TerminalNodeResultData": {
        "name": "TerminalNodeResultData",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "output",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:TerminalNodeResultOutput"
                }
              }
            }
          ]
        }
      },
      "type_:TerminalNodeResultOutput": {
        "name": "TerminalNodeResultOutput",
        "shape": {
          "type": "discriminatedUnion",
          "discriminant": "type",
          "variants": [
            {
              "discriminantValue": "STRING",
              "extends": [
                "type_:TerminalNodeStringResult"
              ],
              "properties": []
            },
            {
              "discriminantValue": "NUMBER",
              "extends": [
                "type_:TerminalNodeNumberResult"
              ],
              "properties": []
            },
            {
              "discriminantValue": "JSON",
              "extends": [
                "type_:TerminalNodeJsonResult"
              ],
              "properties": []
            },
            {
              "discriminantValue": "CHAT_HISTORY",
              "extends": [
                "type_:TerminalNodeChatHistoryResult"
              ],
              "properties": []
            },
            {
              "discriminantValue": "SEARCH_RESULTS",
              "extends": [
                "type_:TerminalNodeSearchResultsResult"
              ],
              "properties": []
            },
            {
              "discriminantValue": "ERROR",
              "extends": [
                "type_:TerminalNodeErrorResult"
              ],
              "properties": []
            },
            {
              "discriminantValue": "ARRAY",
              "extends": [
                "type_:TerminalNodeArrayResult"
              ],
              "properties": []
            },
            {
              "discriminantValue": "FUNCTION_CALL",
              "extends": [
                "type_:TerminalNodeFunctionCallResult"
              ],
              "properties": []
            }
          ]
        }
      },
      "type_:TerminalNodeSearchResultsResult": {
        "name": "TerminalNodeSearchResultsResult",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "name",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "The unique name given to the terminal node that produced this output."
            },
            {
              "key": "value",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "list",
                      "itemShape": {
                        "type": "alias",
                        "value": {
                          "type": "id",
                          "id": "type_:SearchResult"
                        }
                      }
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_:TerminalNodeStringResult": {
        "name": "TerminalNodeStringResult",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "name",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "The unique name given to the terminal node that produced this output."
            },
            {
              "key": "value",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_:TestCaseArrayVariableValue": {
        "name": "TestCaseArrayVariableValue",
        "description": "An Array value for a variable in a Test Case.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "variable_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "key": "name",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "key": "value",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "list",
                      "itemShape": {
                        "type": "alias",
                        "value": {
                          "type": "id",
                          "id": "type_:VellumValue"
                        }
                      }
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_:TestCaseChatHistoryVariableValue": {
        "name": "TestCaseChatHistoryVariableValue",
        "description": "A chat history value for a variable in a Test Case.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "variable_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "key": "name",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "key": "value",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "list",
                      "itemShape": {
                        "type": "alias",
                        "value": {
                          "type": "id",
                          "id": "type_:ChatMessage"
                        }
                      }
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_:TestCaseErrorVariableValue": {
        "name": "TestCaseErrorVariableValue",
        "description": "An error value for a variable in a Test Case.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "variable_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "key": "name",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "key": "value",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:VellumError"
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_:TestCaseFunctionCallVariableValue": {
        "name": "TestCaseFunctionCallVariableValue",
        "description": "A function call value for a variable in a Test Case.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "variable_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "key": "name",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "key": "value",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:FunctionCall"
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_:TestCaseJsonVariableValue": {
        "name": "TestCaseJsonVariableValue",
        "description": "A JSON value for a variable in a Test Case.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "variable_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "key": "name",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "key": "value",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "unknown"
                }
              }
            }
          ]
        }
      },
      "type_:TestCaseNumberVariableValue": {
        "name": "TestCaseNumberVariableValue",
        "description": "A numerical value for a variable in a Test Case.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "variable_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "key": "name",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "key": "value",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_:TestCaseSearchResultsVariableValue": {
        "name": "TestCaseSearchResultsVariableValue",
        "description": "A search results value for a variable in a Test Case.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "variable_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "key": "name",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "key": "value",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "list",
                      "itemShape": {
                        "type": "alias",
                        "value": {
                          "type": "id",
                          "id": "type_:SearchResult"
                        }
                      }
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_:TestCaseStringVariableValue": {
        "name": "TestCaseStringVariableValue",
        "description": "A string value for a variable in a Test Case.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "variable_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "key": "name",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "key": "value",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_:TestCaseVariableValue": {
        "name": "TestCaseVariableValue",
        "shape": {
          "type": "discriminatedUnion",
          "discriminant": "type",
          "variants": [
            {
              "discriminantValue": "STRING",
              "extends": [
                "type_:TestCaseStringVariableValue"
              ],
              "properties": []
            },
            {
              "discriminantValue": "NUMBER",
              "extends": [
                "type_:TestCaseNumberVariableValue"
              ],
              "properties": []
            },
            {
              "discriminantValue": "JSON",
              "extends": [
                "type_:TestCaseJsonVariableValue"
              ],
              "properties": []
            },
            {
              "discriminantValue": "CHAT_HISTORY",
              "extends": [
                "type_:TestCaseChatHistoryVariableValue"
              ],
              "properties": []
            },
            {
              "discriminantValue": "SEARCH_RESULTS",
              "extends": [
                "type_:TestCaseSearchResultsVariableValue"
              ],
              "properties": []
            },
            {
              "discriminantValue": "ERROR",
              "extends": [
                "type_:TestCaseErrorVariableValue"
              ],
              "properties": []
            },
            {
              "discriminantValue": "FUNCTION_CALL",
              "extends": [
                "type_:TestCaseFunctionCallVariableValue"
              ],
              "properties": []
            },
            {
              "discriminantValue": "ARRAY",
              "extends": [
                "type_:TestCaseArrayVariableValue"
              ],
              "properties": []
            }
          ]
        }
      },
      "type_:TestSuiteRunDeploymentReleaseTagExecConfig": {
        "name": "TestSuiteRunDeploymentReleaseTagExecConfig",
        "description": "Execution configuration for running a Test Suite against a Prompt Deployment",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "data",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:TestSuiteRunDeploymentReleaseTagExecConfigData"
                }
              }
            },
            {
              "key": "test_case_ids",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "list",
                      "itemShape": {
                        "type": "alias",
                        "value": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              },
              "description": "Optionally specify a subset of test case ids to run. If not provided, all test cases within the test suite will be run by default."
            }
          ]
        }
      },
      "type_:TestSuiteRunDeploymentReleaseTagExecConfigData": {
        "name": "TestSuiteRunDeploymentReleaseTagExecConfigData",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "deployment_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "The ID of the Prompt Deployment to run the Test Suite against."
            },
            {
              "key": "tag",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string",
                        "default": "LATEST"
                      }
                    }
                  }
                }
              },
              "description": "A tag identifying which release of the Prompt Deployment to run the Test Suite against. Useful for testing past versions of the Prompt Deployment"
            }
          ]
        }
      },
      "type_:TestSuiteRunDeploymentReleaseTagExecConfigDataRequest": {
        "name": "TestSuiteRunDeploymentReleaseTagExecConfigDataRequest",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "deployment_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "The ID of the Prompt Deployment to run the Test Suite against."
            },
            {
              "key": "tag",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 1,
                        "default": "LATEST"
                      }
                    }
                  }
                }
              },
              "description": "A tag identifying which release of the Prompt Deployment to run the Test Suite against. Useful for testing past versions of the Prompt Deployment"
            }
          ]
        }
      },
      "type_:TestSuiteRunDeploymentReleaseTagExecConfigRequest": {
        "name": "TestSuiteRunDeploymentReleaseTagExecConfigRequest",
        "description": "Execution configuration for running a Test Suite against a Prompt Deployment",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "data",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:TestSuiteRunDeploymentReleaseTagExecConfigDataRequest"
                }
              }
            },
            {
              "key": "test_case_ids",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "list",
                      "itemShape": {
                        "type": "alias",
                        "value": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              },
              "description": "Optionally specify a subset of test case ids to run. If not provided, all test cases within the test suite will be run by default."
            }
          ]
        }
      },
      "type_:TestSuiteRunExecConfig": {
        "name": "TestSuiteRunExecConfig",
        "shape": {
          "type": "discriminatedUnion",
          "discriminant": "type",
          "variants": [
            {
              "discriminantValue": "DEPLOYMENT_RELEASE_TAG",
              "extends": [
                "type_:TestSuiteRunDeploymentReleaseTagExecConfig"
              ],
              "properties": []
            },
            {
              "discriminantValue": "WORKFLOW_RELEASE_TAG",
              "extends": [
                "type_:TestSuiteRunWorkflowReleaseTagExecConfig"
              ],
              "properties": []
            },
            {
              "discriminantValue": "EXTERNAL",
              "extends": [
                "type_:TestSuiteRunExternalExecConfig"
              ],
              "properties": []
            }
          ]
        }
      },
      "type_:TestSuiteRunExecConfigRequest": {
        "name": "TestSuiteRunExecConfigRequest",
        "shape": {
          "type": "discriminatedUnion",
          "discriminant": "type",
          "variants": [
            {
              "discriminantValue": "DEPLOYMENT_RELEASE_TAG",
              "extends": [
                "type_:TestSuiteRunDeploymentReleaseTagExecConfigRequest"
              ],
              "properties": []
            },
            {
              "discriminantValue": "WORKFLOW_RELEASE_TAG",
              "extends": [
                "type_:TestSuiteRunWorkflowReleaseTagExecConfigRequest"
              ],
              "properties": []
            },
            {
              "discriminantValue": "EXTERNAL",
              "extends": [
                "type_:TestSuiteRunExternalExecConfigRequest"
              ],
              "properties": []
            }
          ]
        }
      },
      "type_:TestSuiteRunExecution": {
        "name": "TestSuiteRunExecution",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "key": "test_case_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "key": "outputs",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "list",
                  "itemShape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:TestSuiteRunExecutionOutput"
                    }
                  }
                }
              }
            },
            {
              "key": "metric_results",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "list",
                  "itemShape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:TestSuiteRunExecutionMetricResult"
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_:TestSuiteRunExecutionArrayOutput": {
        "name": "TestSuiteRunExecutionArrayOutput",
        "description": "Execution output of an entity evaluated during a Test Suite Run that is of type ARRAY",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "name",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "key": "value",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "list",
                      "itemShape": {
                        "type": "alias",
                        "value": {
                          "type": "id",
                          "id": "type_:VellumValue"
                        }
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "output_variable_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          ]
        }
      },
      "type_:TestSuiteRunExecutionChatHistoryOutput": {
        "name": "TestSuiteRunExecutionChatHistoryOutput",
        "description": "Execution output of an entity evaluated during a Test Suite Run that is of type CHAT_HISTORY",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "name",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "key": "value",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "list",
                      "itemShape": {
                        "type": "alias",
                        "value": {
                          "type": "id",
                          "id": "type_:ChatMessage"
                        }
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "output_variable_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          ]
        }
      },
      "type_:TestSuiteRunExecutionErrorOutput": {
        "name": "TestSuiteRunExecutionErrorOutput",
        "description": "Execution output of an entity evaluated during a Test Suite Run that is of type ERROR",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "name",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "key": "value",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:VellumError"
                    }
                  }
                }
              }
            },
            {
              "key": "output_variable_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          ]
        }
      },
      "type_:TestSuiteRunExecutionFunctionCallOutput": {
        "name": "TestSuiteRunExecutionFunctionCallOutput",
        "description": "Execution output of an entity evaluated during a Test Suite Run that is of type FUNCTION_CALL",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "name",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "key": "value",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:FunctionCall"
                    }
                  }
                }
              }
            },
            {
              "key": "output_variable_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          ]
        }
      },
      "type_:TestSuiteRunExecutionJsonOutput": {
        "name": "TestSuiteRunExecutionJsonOutput",
        "description": "Execution output of an entity evaluated during a Test Suite Run that is of type JSON",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "name",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "key": "value",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "unknown"
                }
              }
            },
            {
              "key": "output_variable_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          ]
        }
      },
      "type_:TestSuiteRunExecutionMetricDefinition": {
        "name": "TestSuiteRunExecutionMetricDefinition",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "label",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "name",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_:TestSuiteRunExecutionMetricResult": {
        "name": "TestSuiteRunExecutionMetricResult",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "metric_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "key": "outputs",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "list",
                  "itemShape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:TestSuiteRunMetricOutput"
                    }
                  }
                }
              }
            },
            {
              "key": "metric_label",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "metric_definition",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:TestSuiteRunExecutionMetricDefinition"
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_:TestSuiteRunExecutionNumberOutput": {
        "name": "TestSuiteRunExecutionNumberOutput",
        "description": "Execution output of an entity evaluated during a Test Suite Run that is of type NUMBER",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "name",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "key": "value",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "output_variable_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          ]
        }
      },
      "type_:TestSuiteRunExecutionOutput": {
        "name": "TestSuiteRunExecutionOutput",
        "shape": {
          "type": "discriminatedUnion",
          "discriminant": "type",
          "variants": [
            {
              "discriminantValue": "STRING",
              "extends": [
                "type_:TestSuiteRunExecutionStringOutput"
              ],
              "properties": []
            },
            {
              "discriminantValue": "NUMBER",
              "extends": [
                "type_:TestSuiteRunExecutionNumberOutput"
              ],
              "properties": []
            },
            {
              "discriminantValue": "JSON",
              "extends": [
                "type_:TestSuiteRunExecutionJsonOutput"
              ],
              "properties": []
            },
            {
              "discriminantValue": "CHAT_HISTORY",
              "extends": [
                "type_:TestSuiteRunExecutionChatHistoryOutput"
              ],
              "properties": []
            },
            {
              "discriminantValue": "SEARCH_RESULTS",
              "extends": [
                "type_:TestSuiteRunExecutionSearchResultsOutput"
              ],
              "properties": []
            },
            {
              "discriminantValue": "ERROR",
              "extends": [
                "type_:TestSuiteRunExecutionErrorOutput"
              ],
              "properties": []
            },
            {
              "discriminantValue": "FUNCTION_CALL",
              "extends": [
                "type_:TestSuiteRunExecutionFunctionCallOutput"
              ],
              "properties": []
            },
            {
              "discriminantValue": "ARRAY",
              "extends": [
                "type_:TestSuiteRunExecutionArrayOutput"
              ],
              "properties": []
            }
          ]
        }
      },
      "type_:TestSuiteRunExecutionSearchResultsOutput": {
        "name": "TestSuiteRunExecutionSearchResultsOutput",
        "description": "Execution output of an entity evaluated during a Test Suite Run that is of type SEARCH_RESULTS",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "name",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "key": "value",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "list",
                      "itemShape": {
                        "type": "alias",
                        "value": {
                          "type": "id",
                          "id": "type_:SearchResult"
                        }
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "output_variable_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          ]
        }
      },
      "type_:TestSuiteRunExecutionStringOutput": {
        "name": "TestSuiteRunExecutionStringOutput",
        "description": "Execution output of an entity evaluated during a Test Suite Run that is of type STRING",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "name",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "key": "value",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "output_variable_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          ]
        }
      },
      "type_:TestSuiteRunExternalExecConfig": {
        "name": "TestSuiteRunExternalExecConfig",
        "description": "Execution configuration for running a Vellum Test Suite against an external callable",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "data",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:TestSuiteRunExternalExecConfigData"
                }
              }
            },
            {
              "key": "test_case_ids",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "list",
                      "itemShape": {
                        "type": "alias",
                        "value": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              },
              "description": "Optionally specify a subset of test case ids to run. If not provided, all test cases within the test suite will be run by default."
            }
          ]
        }
      },
      "type_:TestSuiteRunExternalExecConfigData": {
        "name": "TestSuiteRunExternalExecConfigData",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "executions",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "list",
                  "itemShape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:ExternalTestCaseExecution"
                    }
                  }
                }
              },
              "description": "The executions of some callable external to Vellum whose outputs you would like to evaluate."
            }
          ]
        }
      },
      "type_:TestSuiteRunExternalExecConfigDataRequest": {
        "name": "TestSuiteRunExternalExecConfigDataRequest",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "executions",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "list",
                  "itemShape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:ExternalTestCaseExecutionRequest"
                    }
                  }
                }
              },
              "description": "The executions of some callable external to Vellum whose outputs you would like to evaluate."
            }
          ]
        }
      },
      "type_:TestSuiteRunExternalExecConfigRequest": {
        "name": "TestSuiteRunExternalExecConfigRequest",
        "description": "Execution configuration for running a Vellum Test Suite against an external callable",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "data",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:TestSuiteRunExternalExecConfigDataRequest"
                }
              }
            },
            {
              "key": "test_case_ids",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "list",
                      "itemShape": {
                        "type": "alias",
                        "value": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              },
              "description": "Optionally specify a subset of test case ids to run. If not provided, all test cases within the test suite will be run by default."
            }
          ]
        }
      },
      "type_:TestSuiteRunMetricErrorOutput": {
        "name": "TestSuiteRunMetricErrorOutput",
        "description": "Output for a test suite run metric that is of type ERROR",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "value",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:VellumError"
                }
              }
            },
            {
              "key": "name",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          ]
        }
      },
      "type_:TestSuiteRunMetricJsonOutput": {
        "name": "TestSuiteRunMetricJsonOutput",
        "description": "Output for a test suite run metric that is of type NUMBER",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "value",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "unknown"
                }
              }
            },
            {
              "key": "name",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          ]
        }
      },
      "type_:TestSuiteRunMetricNumberOutput": {
        "name": "TestSuiteRunMetricNumberOutput",
        "description": "Output for a test suite run metric that is of type NUMBER",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "value",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "name",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          ]
        }
      },
      "type_:TestSuiteRunMetricOutput": {
        "name": "TestSuiteRunMetricOutput",
        "shape": {
          "type": "discriminatedUnion",
          "discriminant": "type",
          "variants": [
            {
              "discriminantValue": "STRING",
              "extends": [
                "type_:TestSuiteRunMetricStringOutput"
              ],
              "properties": []
            },
            {
              "discriminantValue": "NUMBER",
              "extends": [
                "type_:TestSuiteRunMetricNumberOutput"
              ],
              "properties": []
            },
            {
              "discriminantValue": "JSON",
              "extends": [
                "type_:TestSuiteRunMetricJsonOutput"
              ],
              "properties": []
            },
            {
              "discriminantValue": "ERROR",
              "extends": [
                "type_:TestSuiteRunMetricErrorOutput"
              ],
              "properties": []
            }
          ]
        }
      },
      "type_:TestSuiteRunMetricStringOutput": {
        "name": "TestSuiteRunMetricStringOutput",
        "description": "Output for a test suite run metric that is of type STRING",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "value",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "name",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          ]
        }
      },
      "type_:TestSuiteRunRead": {
        "name": "TestSuiteRunRead",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "key": "created",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "datetime"
                  }
                }
              }
            },
            {
              "key": "test_suite",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:TestSuiteRunTestSuite"
                }
              }
            },
            {
              "key": "state",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:TestSuiteRunState"
                }
              },
              "description": "The current state of this run\n\n- `QUEUED` - Queued\n- `RUNNING` - Running\n- `COMPLETE` - Complete\n- `FAILED` - Failed\n- `CANCELLED` - Cancelled"
            },
            {
              "key": "exec_config",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:TestSuiteRunExecConfig"
                    }
                  }
                }
              },
              "description": "Configuration that defines how the Test Suite should be run"
            }
          ]
        }
      },
      "type_:TestSuiteRunState": {
        "name": "TestSuiteRunState",
        "description": "- `QUEUED` - Queued\n- `RUNNING` - Running\n- `COMPLETE` - Complete\n- `FAILED` - Failed\n- `CANCELLED` - Cancelled",
        "shape": {
          "type": "enum",
          "values": [
            {
              "value": "QUEUED"
            },
            {
              "value": "RUNNING"
            },
            {
              "value": "COMPLETE"
            },
            {
              "value": "FAILED"
            },
            {
              "value": "CANCELLED"
            }
          ]
        }
      },
      "type_:TestSuiteRunTestSuite": {
        "name": "TestSuiteRunTestSuite",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "key": "history_item_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "key": "label",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          ]
        }
      },
      "type_:TestSuiteRunWorkflowReleaseTagExecConfig": {
        "name": "TestSuiteRunWorkflowReleaseTagExecConfig",
        "description": "Execution configuration for running a Test Suite against a Workflow Deployment",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "data",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:TestSuiteRunWorkflowReleaseTagExecConfigData"
                }
              }
            },
            {
              "key": "test_case_ids",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "list",
                      "itemShape": {
                        "type": "alias",
                        "value": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              },
              "description": "Optionally specify a subset of test case ids to run. If not provided, all test cases within the test suite will be run by default."
            }
          ]
        }
      },
      "type_:TestSuiteRunWorkflowReleaseTagExecConfigData": {
        "name": "TestSuiteRunWorkflowReleaseTagExecConfigData",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "workflow_deployment_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "The ID of the Workflow Deployment to run the Test Suite against."
            },
            {
              "key": "tag",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string",
                        "default": "LATEST"
                      }
                    }
                  }
                }
              },
              "description": "A tag identifying which release of the Workflow Deployment to run the Test Suite against. Useful for testing past versions of the Workflow Deployment"
            }
          ]
        }
      },
      "type_:TestSuiteRunWorkflowReleaseTagExecConfigDataRequest": {
        "name": "TestSuiteRunWorkflowReleaseTagExecConfigDataRequest",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "workflow_deployment_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "The ID of the Workflow Deployment to run the Test Suite against."
            },
            {
              "key": "tag",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 1,
                        "default": "LATEST"
                      }
                    }
                  }
                }
              },
              "description": "A tag identifying which release of the Workflow Deployment to run the Test Suite against. Useful for testing past versions of the Workflow Deployment"
            }
          ]
        }
      },
      "type_:TestSuiteRunWorkflowReleaseTagExecConfigRequest": {
        "name": "TestSuiteRunWorkflowReleaseTagExecConfigRequest",
        "description": "Execution configuration for running a Test Suite against a Workflow Deployment",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "data",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:TestSuiteRunWorkflowReleaseTagExecConfigDataRequest"
                }
              }
            },
            {
              "key": "test_case_ids",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "list",
                      "itemShape": {
                        "type": "alias",
                        "value": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              },
              "description": "Optionally specify a subset of test case ids to run. If not provided, all test cases within the test suite will be run by default."
            }
          ]
        }
      },
      "type_:TestSuiteTestCase": {
        "name": "TestSuiteTestCase",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "external_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "label",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "input_values",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "list",
                  "itemShape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:TestCaseVariableValue"
                    }
                  }
                }
              }
            },
            {
              "key": "evaluation_values",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "list",
                  "itemShape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:TestCaseVariableValue"
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_:TestSuiteTestCaseBulkOperationRequest": {
        "name": "TestSuiteTestCaseBulkOperationRequest",
        "shape": {
          "type": "discriminatedUnion",
          "discriminant": "type",
          "variants": [
            {
              "discriminantValue": "CREATE",
              "extends": [
                "type_:TestSuiteTestCaseCreateBulkOperationRequest"
              ],
              "properties": []
            },
            {
              "discriminantValue": "REPLACE",
              "extends": [
                "type_:TestSuiteTestCaseReplaceBulkOperationRequest"
              ],
              "properties": []
            },
            {
              "discriminantValue": "UPSERT",
              "extends": [
                "type_:TestSuiteTestCaseUpsertBulkOperationRequest"
              ],
              "properties": []
            },
            {
              "discriminantValue": "DELETE",
              "extends": [
                "type_:TestSuiteTestCaseDeleteBulkOperationRequest"
              ],
              "properties": []
            }
          ]
        }
      },
      "type_:TestSuiteTestCaseBulkResult": {
        "name": "TestSuiteTestCaseBulkResult",
        "shape": {
          "type": "discriminatedUnion",
          "discriminant": "type",
          "variants": [
            {
              "discriminantValue": "CREATED",
              "extends": [
                "type_:TestSuiteTestCaseCreatedBulkResult"
              ],
              "properties": []
            },
            {
              "discriminantValue": "REPLACED",
              "extends": [
                "type_:TestSuiteTestCaseReplacedBulkResult"
              ],
              "properties": []
            },
            {
              "discriminantValue": "DELETED",
              "extends": [
                "type_:TestSuiteTestCaseDeletedBulkResult"
              ],
              "properties": []
            },
            {
              "discriminantValue": "REJECTED",
              "extends": [
                "type_:TestSuiteTestCaseRejectedBulkResult"
              ],
              "properties": []
            }
          ]
        }
      },
      "type_:TestSuiteTestCaseCreateBulkOperationRequest": {
        "name": "TestSuiteTestCaseCreateBulkOperationRequest",
        "description": "A bulk operation that represents the creation of a Test Case.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "An ID representing this specific operation. Can later be used to look up information about the operation's success in the response."
            },
            {
              "key": "data",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:CreateTestSuiteTestCaseRequest"
                }
              }
            }
          ]
        }
      },
      "type_:TestSuiteTestCaseCreatedBulkResult": {
        "name": "TestSuiteTestCaseCreatedBulkResult",
        "description": "The result of a bulk operation that created a Test Case.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "key": "data",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:TestSuiteTestCaseCreatedBulkResultData"
                }
              }
            }
          ]
        }
      },
      "type_:TestSuiteTestCaseCreatedBulkResultData": {
        "name": "TestSuiteTestCaseCreatedBulkResultData",
        "description": "Information about the Test Case that was created.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          ]
        }
      },
      "type_:TestSuiteTestCaseDeleteBulkOperationDataRequest": {
        "name": "TestSuiteTestCaseDeleteBulkOperationDataRequest",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 1
                  }
                }
              }
            }
          ]
        }
      },
      "type_:TestSuiteTestCaseDeleteBulkOperationRequest": {
        "name": "TestSuiteTestCaseDeleteBulkOperationRequest",
        "description": "A bulk operation that represents the deletion of a Test Case.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "An ID representing this specific operation. Can later be used to look up information about the operation's success in the response."
            },
            {
              "key": "data",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:TestSuiteTestCaseDeleteBulkOperationDataRequest"
                }
              },
              "description": "Information about the Test Case to delete"
            }
          ]
        }
      },
      "type_:TestSuiteTestCaseDeletedBulkResult": {
        "name": "TestSuiteTestCaseDeletedBulkResult",
        "description": "The result of a bulk operation that deleted a Test Case.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "An ID that maps back to one of the initially supplied operations. Can be used to determine the result of a given operation."
            },
            {
              "key": "data",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:TestSuiteTestCaseDeletedBulkResultData"
                }
              }
            }
          ]
        }
      },
      "type_:TestSuiteTestCaseDeletedBulkResultData": {
        "name": "TestSuiteTestCaseDeletedBulkResultData",
        "description": "Information about the Test Case that was deleted",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          ]
        }
      },
      "type_:TestSuiteTestCaseRejectedBulkResult": {
        "name": "TestSuiteTestCaseRejectedBulkResult",
        "description": "The result of a bulk operation that failed to operate on a Test Case.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "An ID that maps back to one of the initially supplied operations. Can be used to determine the result of a given operation."
            },
            {
              "key": "data",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "map",
                  "keyShape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  },
                  "valueShape": {
                    "type": "alias",
                    "value": {
                      "type": "unknown"
                    }
                  }
                }
              },
              "description": "Details about the error that occurred"
            }
          ]
        }
      },
      "type_:TestSuiteTestCaseReplaceBulkOperationRequest": {
        "name": "TestSuiteTestCaseReplaceBulkOperationRequest",
        "description": "A bulk operation that represents the replacing of a Test Case.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "An ID representing this specific operation. Can later be used to look up information about the operation's success in the response."
            },
            {
              "key": "data",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:ReplaceTestSuiteTestCaseRequest"
                }
              }
            }
          ]
        }
      },
      "type_:TestSuiteTestCaseReplacedBulkResult": {
        "name": "TestSuiteTestCaseReplacedBulkResult",
        "description": "The result of a bulk operation that replaced a Test Case.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "An ID that maps back to one of the initially supplied operations. Can be used to determine the result of a given operation."
            },
            {
              "key": "data",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:TestSuiteTestCaseReplacedBulkResultData"
                }
              }
            }
          ]
        }
      },
      "type_:TestSuiteTestCaseReplacedBulkResultData": {
        "name": "TestSuiteTestCaseReplacedBulkResultData",
        "description": "Information about the Test Case that was replaced",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          ]
        }
      },
      "type_:TestSuiteTestCaseUpsertBulkOperationRequest": {
        "name": "TestSuiteTestCaseUpsertBulkOperationRequest",
        "description": "A bulk operation that represents the upserting of a Test Case.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "An ID representing this specific operation. Can later be used to look up information about the operation's success in the response."
            },
            {
              "key": "data",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:UpsertTestSuiteTestCaseRequest"
                }
              }
            }
          ]
        }
      },
      "type_:TokenOverlappingWindowChunkerConfig": {
        "name": "TokenOverlappingWindowChunkerConfig",
        "description": "Configuration for token overlapping window chunking",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "token_limit",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "integer",
                        "minimum": 0,
                        "default": 250
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "overlap_ratio",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "double",
                        "minimum": 0,
                        "maximum": 1,
                        "default": 0.5
                      }
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_:TokenOverlappingWindowChunkerConfigRequest": {
        "name": "TokenOverlappingWindowChunkerConfigRequest",
        "description": "Configuration for token overlapping window chunking",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "token_limit",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "integer",
                        "minimum": 0,
                        "default": 250
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "overlap_ratio",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "double",
                        "minimum": 0,
                        "maximum": 1,
                        "default": 0.5
                      }
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_:TokenOverlappingWindowChunking": {
        "name": "TokenOverlappingWindowChunking",
        "description": "Token overlapping window chunking",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "chunker_config",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:TokenOverlappingWindowChunkerConfig"
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_:TokenOverlappingWindowChunkingRequest": {
        "name": "TokenOverlappingWindowChunkingRequest",
        "description": "Token overlapping window chunking",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "chunker_config",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:TokenOverlappingWindowChunkerConfigRequest"
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_:UnitEnum": {
        "name": "UnitEnum",
        "description": "- `USD` - USD",
        "shape": {
          "type": "alias",
          "value": {
            "type": "literal",
            "value": {
              "type": "stringLiteral",
              "value": "USD"
            }
          }
        }
      },
      "type_:UploadDocumentErrorResponse": {
        "name": "UploadDocumentErrorResponse",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "detail",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          ]
        }
      },
      "type_:UploadDocumentResponse": {
        "name": "UploadDocumentResponse",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "document_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "The ID of the newly created document."
            }
          ]
        }
      },
      "type_:UpsertTestSuiteTestCaseRequest": {
        "name": "UpsertTestSuiteTestCaseRequest",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "The Vellum-generated ID of an existing Test Case whose data you'd like to replace. If specified and no Test Case exists with this ID, a 404 will be returned."
            },
            {
              "key": "external_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 1
                      }
                    }
                  }
                }
              },
              "description": "An ID external to Vellum that uniquely identifies the Test Case that you'd like to create/update. If there's a match on a Test Case that was previously created with the same external_id, it will be updated. Otherwise, a new Test Case will be created with this value as its external_id. If no external_id is specified, then a new Test Case will always be created."
            },
            {
              "key": "label",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "A human-readable label used to convey the intention of this Test Case"
            },
            {
              "key": "input_values",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "list",
                  "itemShape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:NamedTestCaseVariableValueRequest"
                    }
                  }
                }
              },
              "description": "Values for each of the Test Case's input variables"
            },
            {
              "key": "evaluation_values",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "list",
                  "itemShape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:NamedTestCaseVariableValueRequest"
                    }
                  }
                }
              },
              "description": "Values for each of the Test Case's evaluation variables"
            }
          ]
        }
      },
      "type_:VellumAudio": {
        "name": "VellumAudio",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "src",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "key": "metadata",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "map",
                      "keyShape": {
                        "type": "alias",
                        "value": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      },
                      "valueShape": {
                        "type": "alias",
                        "value": {
                          "type": "unknown"
                        }
                      }
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_:VellumAudioRequest": {
        "name": "VellumAudioRequest",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "src",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 1
                  }
                }
              }
            },
            {
              "key": "metadata",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "map",
                      "keyShape": {
                        "type": "alias",
                        "value": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      },
                      "valueShape": {
                        "type": "alias",
                        "value": {
                          "type": "unknown"
                        }
                      }
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_:VellumError": {
        "name": "VellumError",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "message",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "key": "code",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:VellumErrorCodeEnum"
                }
              }
            }
          ]
        }
      },
      "type_:VellumErrorCodeEnum": {
        "name": "VellumErrorCodeEnum",
        "description": "- `INVALID_REQUEST` - INVALID_REQUEST\n- `PROVIDER_ERROR` - PROVIDER_ERROR\n- `REQUEST_TIMEOUT` - REQUEST_TIMEOUT\n- `INTERNAL_SERVER_ERROR` - INTERNAL_SERVER_ERROR\n- `USER_DEFINED_ERROR` - USER_DEFINED_ERROR",
        "shape": {
          "type": "enum",
          "values": [
            {
              "value": "INVALID_REQUEST"
            },
            {
              "value": "PROVIDER_ERROR"
            },
            {
              "value": "REQUEST_TIMEOUT"
            },
            {
              "value": "INTERNAL_SERVER_ERROR"
            },
            {
              "value": "USER_DEFINED_ERROR"
            }
          ]
        }
      },
      "type_:VellumErrorRequest": {
        "name": "VellumErrorRequest",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "message",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 1
                  }
                }
              }
            },
            {
              "key": "code",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:VellumErrorCodeEnum"
                }
              }
            }
          ]
        }
      },
      "type_:VellumImage": {
        "name": "VellumImage",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "src",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "key": "metadata",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "map",
                      "keyShape": {
                        "type": "alias",
                        "value": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      },
                      "valueShape": {
                        "type": "alias",
                        "value": {
                          "type": "unknown"
                        }
                      }
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_:VellumImageRequest": {
        "name": "VellumImageRequest",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "src",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 1
                  }
                }
              }
            },
            {
              "key": "metadata",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "map",
                      "keyShape": {
                        "type": "alias",
                        "value": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      },
                      "valueShape": {
                        "type": "alias",
                        "value": {
                          "type": "unknown"
                        }
                      }
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_:VellumValue": {
        "name": "VellumValue",
        "shape": {
          "type": "discriminatedUnion",
          "discriminant": "type",
          "variants": [
            {
              "discriminantValue": "STRING",
              "extends": [
                "type_:StringVellumValue"
              ],
              "properties": []
            },
            {
              "discriminantValue": "NUMBER",
              "extends": [
                "type_:NumberVellumValue"
              ],
              "properties": []
            },
            {
              "discriminantValue": "JSON",
              "extends": [
                "type_:JsonVellumValue"
              ],
              "properties": []
            },
            {
              "discriminantValue": "IMAGE",
              "extends": [
                "type_:ImageVellumValue"
              ],
              "properties": []
            },
            {
              "discriminantValue": "FUNCTION_CALL",
              "extends": [
                "type_:FunctionCallVellumValue"
              ],
              "properties": []
            },
            {
              "discriminantValue": "ERROR",
              "extends": [
                "type_:ErrorVellumValue"
              ],
              "properties": []
            },
            {
              "discriminantValue": "ARRAY",
              "extends": [
                "type_:ArrayVellumValue"
              ],
              "properties": []
            },
            {
              "discriminantValue": "CHAT_HISTORY",
              "extends": [
                "type_:ChatHistoryVellumValue"
              ],
              "properties": []
            },
            {
              "discriminantValue": "SEARCH_RESULTS",
              "extends": [
                "type_:SearchResultsVellumValue"
              ],
              "properties": []
            }
          ]
        }
      },
      "type_:VellumValueLogicalConditionGroupRequest": {
        "name": "VellumValueLogicalConditionGroupRequest",
        "description": "A higher-order condition that combines one or more basic conditions or other higher-order conditions.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "conditions",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "list",
                  "itemShape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:VellumValueLogicalExpressionRequest"
                    }
                  }
                }
              }
            },
            {
              "key": "combinator",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:ConditionCombinator"
                }
              }
            },
            {
              "key": "negated",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "boolean"
                  }
                }
              }
            }
          ]
        }
      },
      "type_:VellumValueLogicalConditionRequest": {
        "name": "VellumValueLogicalConditionRequest",
        "description": "A basic condition comparing two Vellum values.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "lhs_variable",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:VellumValueRequest"
                }
              }
            },
            {
              "key": "operator",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:LogicalOperator"
                }
              }
            },
            {
              "key": "rhs_variable",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:VellumValueRequest"
                }
              }
            }
          ]
        }
      },
      "type_:VellumValueLogicalExpressionRequest": {
        "name": "VellumValueLogicalExpressionRequest",
        "shape": {
          "type": "discriminatedUnion",
          "discriminant": "type",
          "variants": [
            {
              "discriminantValue": "LOGICAL_CONDITION",
              "extends": [
                "type_:VellumValueLogicalConditionRequest"
              ],
              "properties": []
            },
            {
              "discriminantValue": "LOGICAL_CONDITION_GROUP",
              "extends": [
                "type_:VellumValueLogicalConditionGroupRequest"
              ],
              "properties": []
            }
          ]
        }
      },
      "type_:VellumValueRequest": {
        "name": "VellumValueRequest",
        "shape": {
          "type": "discriminatedUnion",
          "discriminant": "type",
          "variants": [
            {
              "discriminantValue": "STRING",
              "extends": [
                "type_:StringVellumValueRequest"
              ],
              "properties": []
            },
            {
              "discriminantValue": "NUMBER",
              "extends": [
                "type_:NumberVellumValueRequest"
              ],
              "properties": []
            },
            {
              "discriminantValue": "JSON",
              "extends": [
                "type_:JsonVellumValueRequest"
              ],
              "properties": []
            },
            {
              "discriminantValue": "IMAGE",
              "extends": [
                "type_:ImageVellumValueRequest"
              ],
              "properties": []
            },
            {
              "discriminantValue": "FUNCTION_CALL",
              "extends": [
                "type_:FunctionCallVellumValueRequest"
              ],
              "properties": []
            },
            {
              "discriminantValue": "ERROR",
              "extends": [
                "type_:ErrorVellumValueRequest"
              ],
              "properties": []
            },
            {
              "discriminantValue": "ARRAY",
              "extends": [
                "type_:ArrayVellumValueRequest"
              ],
              "properties": []
            },
            {
              "discriminantValue": "CHAT_HISTORY",
              "extends": [
                "type_:ChatHistoryVellumValueRequest"
              ],
              "properties": []
            },
            {
              "discriminantValue": "SEARCH_RESULTS",
              "extends": [
                "type_:SearchResultsVellumValueRequest"
              ],
              "properties": []
            }
          ]
        }
      },
      "type_:VellumVariable": {
        "name": "VellumVariable",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "key": "key",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "key": "type",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:VellumVariableType"
                }
              }
            },
            {
              "key": "required",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean"
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "default",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:VellumValue"
                    }
                  }
                }
              }
            },
            {
              "key": "extensions",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:VellumVariableExtensions"
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_:VellumVariableExtensions": {
        "name": "VellumVariableExtensions",
        "description": "A set of fields with additional properties for use in Vellum Variables.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "color",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_:VellumVariableType": {
        "name": "VellumVariableType",
        "description": "- `STRING` - STRING\n- `NUMBER` - NUMBER\n- `JSON` - JSON\n- `CHAT_HISTORY` - CHAT_HISTORY\n- `SEARCH_RESULTS` - SEARCH_RESULTS\n- `ERROR` - ERROR\n- `ARRAY` - ARRAY\n- `FUNCTION_CALL` - FUNCTION_CALL\n- `IMAGE` - IMAGE\n- `AUDIO` - AUDIO\n- `NULL` - NULL",
        "shape": {
          "type": "enum",
          "values": [
            {
              "value": "STRING"
            },
            {
              "value": "NUMBER"
            },
            {
              "value": "JSON"
            },
            {
              "value": "CHAT_HISTORY"
            },
            {
              "value": "SEARCH_RESULTS"
            },
            {
              "value": "ERROR"
            },
            {
              "value": "ARRAY"
            },
            {
              "value": "FUNCTION_CALL"
            },
            {
              "value": "IMAGE"
            },
            {
              "value": "AUDIO"
            },
            {
              "value": "NULL"
            }
          ]
        }
      },
      "type_:WorkflowDeploymentRead": {
        "name": "WorkflowDeploymentRead",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "key": "name",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "A name that uniquely identifies this workflow deployment within its workspace"
            },
            {
              "key": "label",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "A human-readable label for the workflow deployment"
            },
            {
              "key": "status",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:EntityStatus"
                    }
                  }
                }
              },
              "description": "The current status of the workflow deployment\n\n- `ACTIVE` - Active\n- `ARCHIVED` - Archived"
            },
            {
              "key": "environment",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:EnvironmentEnum"
                    }
                  }
                }
              },
              "description": "The environment this workflow deployment is used in\n\n- `DEVELOPMENT` - Development\n- `STAGING` - Staging\n- `PRODUCTION` - Production"
            },
            {
              "key": "created",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "datetime"
                  }
                }
              }
            },
            {
              "key": "last_deployed_on",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "datetime"
                  }
                }
              }
            },
            {
              "key": "last_deployed_history_item_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "The ID of the history item associated with this Workflow Deployment's LATEST Release Tag"
            },
            {
              "key": "input_variables",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "list",
                  "itemShape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:VellumVariable"
                    }
                  }
                }
              },
              "description": "The input variables this Workflow Deployment expects to receive values for when it is executed."
            },
            {
              "key": "output_variables",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "list",
                  "itemShape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:VellumVariable"
                    }
                  }
                }
              },
              "description": "The output variables this Workflow Deployment produces values for when it's executed."
            },
            {
              "key": "description",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "A human-readable description of the workflow deployment"
            }
          ]
        }
      },
      "type_:WorkflowEventError": {
        "name": "WorkflowEventError",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "message",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "key": "code",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:WorkflowExecutionEventErrorCode"
                }
              }
            }
          ]
        }
      },
      "type_:WorkflowExecutionActualChatHistoryRequest": {
        "name": "WorkflowExecutionActualChatHistoryRequest",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "output_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "The Vellum-generated ID of a workflow output. Must provide either this or output_key. output_key is typically preferred."
            },
            {
              "key": "output_key",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 1
                      }
                    }
                  }
                }
              },
              "description": "The user-defined name of a workflow output. Must provide either this or output_id. Should correspond to the `Name` specified in a Final Output Node. Generally preferred over output_id."
            },
            {
              "key": "quality",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  }
                }
              },
              "description": "Optionally provide a decimal number between 0.0 and 1.0 (inclusive) representing the quality of the output. 0 is the worst, 1 is the best."
            },
            {
              "key": "metadata",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "map",
                      "keyShape": {
                        "type": "alias",
                        "value": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      },
                      "valueShape": {
                        "type": "alias",
                        "value": {
                          "type": "unknown"
                        }
                      }
                    }
                  }
                }
              },
              "description": "Optionally provide additional metadata about the feedback submission."
            },
            {
              "key": "timestamp",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  }
                }
              },
              "description": "Optionally provide the timestamp representing when this feedback was collected. Used for reporting purposes."
            },
            {
              "key": "desired_output_value",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "list",
                      "itemShape": {
                        "type": "alias",
                        "value": {
                          "type": "id",
                          "id": "type_:ChatMessageRequest"
                        }
                      }
                    }
                  }
                }
              },
              "description": "Optionally provide the value that the output ideally should have been."
            }
          ]
        }
      },
      "type_:WorkflowExecutionActualJsonRequest": {
        "name": "WorkflowExecutionActualJsonRequest",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "output_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "The Vellum-generated ID of a workflow output. Must provide either this or output_key. output_key is typically preferred."
            },
            {
              "key": "output_key",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 1
                      }
                    }
                  }
                }
              },
              "description": "The user-defined name of a workflow output. Must provide either this or output_id. Should correspond to the `Name` specified in a Final Output Node. Generally preferred over output_id."
            },
            {
              "key": "quality",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  }
                }
              },
              "description": "Optionally provide a decimal number between 0.0 and 1.0 (inclusive) representing the quality of the output. 0 is the worst, 1 is the best."
            },
            {
              "key": "metadata",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "map",
                      "keyShape": {
                        "type": "alias",
                        "value": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      },
                      "valueShape": {
                        "type": "alias",
                        "value": {
                          "type": "unknown"
                        }
                      }
                    }
                  }
                }
              },
              "description": "Optionally provide additional metadata about the feedback submission."
            },
            {
              "key": "timestamp",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  }
                }
              },
              "description": "Optionally provide the timestamp representing when this feedback was collected. Used for reporting purposes."
            },
            {
              "key": "desired_output_value",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "map",
                      "keyShape": {
                        "type": "alias",
                        "value": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      },
                      "valueShape": {
                        "type": "alias",
                        "value": {
                          "type": "unknown"
                        }
                      }
                    }
                  }
                }
              },
              "description": "Optionally provide the value that the output ideally should have been."
            }
          ]
        }
      },
      "type_:WorkflowExecutionActualStringRequest": {
        "name": "WorkflowExecutionActualStringRequest",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "output_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "The Vellum-generated ID of a workflow output. Must provide either this or output_key. output_key is typically preferred."
            },
            {
              "key": "output_key",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 1
                      }
                    }
                  }
                }
              },
              "description": "The user-defined name of a workflow output. Must provide either this or output_id. Should correspond to the `Name` specified in a Final Output Node. Generally preferred over output_id."
            },
            {
              "key": "quality",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  }
                }
              },
              "description": "Optionally provide a decimal number between 0.0 and 1.0 (inclusive) representing the quality of the output. 0 is the worst, 1 is the best."
            },
            {
              "key": "metadata",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "map",
                      "keyShape": {
                        "type": "alias",
                        "value": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      },
                      "valueShape": {
                        "type": "alias",
                        "value": {
                          "type": "unknown"
                        }
                      }
                    }
                  }
                }
              },
              "description": "Optionally provide additional metadata about the feedback submission."
            },
            {
              "key": "timestamp",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  }
                }
              },
              "description": "Optionally provide the timestamp representing when this feedback was collected. Used for reporting purposes."
            },
            {
              "key": "desired_output_value",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "Optionally provide the value that the output ideally should have been."
            }
          ]
        }
      },
      "type_:WorkflowExecutionEventErrorCode": {
        "name": "WorkflowExecutionEventErrorCode",
        "description": "- `WORKFLOW_INITIALIZATION` - WORKFLOW_INITIALIZATION\n- `WORKFLOW_CANCELLED` - WORKFLOW_CANCELLED\n- `NODE_EXECUTION_COUNT_LIMIT_REACHED` - NODE_EXECUTION_COUNT_LIMIT_REACHED\n- `INTERNAL_SERVER_ERROR` - INTERNAL_SERVER_ERROR\n- `NODE_EXECUTION` - NODE_EXECUTION\n- `LLM_PROVIDER` - LLM_PROVIDER\n- `INVALID_TEMPLATE` - INVALID_TEMPLATE\n- `USER_DEFINED_ERROR` - USER_DEFINED_ERROR",
        "shape": {
          "type": "enum",
          "values": [
            {
              "value": "WORKFLOW_INITIALIZATION"
            },
            {
              "value": "WORKFLOW_CANCELLED"
            },
            {
              "value": "NODE_EXECUTION_COUNT_LIMIT_REACHED"
            },
            {
              "value": "INTERNAL_SERVER_ERROR"
            },
            {
              "value": "NODE_EXECUTION"
            },
            {
              "value": "LLM_PROVIDER"
            },
            {
              "value": "INVALID_TEMPLATE"
            },
            {
              "value": "USER_DEFINED_ERROR"
            }
          ]
        }
      },
      "type_:WorkflowExecutionEventType": {
        "name": "WorkflowExecutionEventType",
        "description": "- `NODE` - NODE\n- `WORKFLOW` - WORKFLOW",
        "shape": {
          "type": "enum",
          "values": [
            {
              "value": "NODE"
            },
            {
              "value": "WORKFLOW"
            }
          ]
        }
      },
      "type_:WorkflowExecutionNodeResultEvent": {
        "name": "WorkflowExecutionNodeResultEvent",
        "description": "A NODE-level event emitted from the workflow's execution.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "execution_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "key": "run_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "external_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "data",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:WorkflowNodeResultEvent"
                }
              }
            }
          ]
        }
      },
      "type_:WorkflowExecutionWorkflowResultEvent": {
        "name": "WorkflowExecutionWorkflowResultEvent",
        "description": "A WORKFLOW-level event emitted from the workflow's execution.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "execution_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "key": "run_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "availability": "Deprecated"
            },
            {
              "key": "external_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "data",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:WorkflowResultEvent"
                }
              }
            }
          ]
        }
      },
      "type_:WorkflowExpandMetaRequest": {
        "name": "WorkflowExpandMetaRequest",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "usage",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean"
                      }
                    }
                  }
                }
              },
              "description": "If enabled, the Prompt Node FULFILLED events will include model host usage tracking. This may increase latency for some model hosts."
            }
          ]
        }
      },
      "type_:WorkflowNodeResultData": {
        "name": "WorkflowNodeResultData",
        "shape": {
          "type": "discriminatedUnion",
          "discriminant": "type",
          "variants": [
            {
              "discriminantValue": "PROMPT",
              "extends": [
                "type_:PromptNodeResult"
              ],
              "properties": []
            },
            {
              "discriminantValue": "SEARCH",
              "extends": [
                "type_:SearchNodeResult"
              ],
              "properties": []
            },
            {
              "discriminantValue": "TEMPLATING",
              "extends": [
                "type_:TemplatingNodeResult"
              ],
              "properties": []
            },
            {
              "discriminantValue": "CODE_EXECUTION",
              "extends": [
                "type_:CodeExecutionNodeResult"
              ],
              "properties": []
            },
            {
              "discriminantValue": "CONDITIONAL",
              "extends": [
                "type_:ConditionalNodeResult"
              ],
              "properties": []
            },
            {
              "discriminantValue": "API",
              "extends": [
                "type_:ApiNodeResult"
              ],
              "properties": []
            },
            {
              "discriminantValue": "TERMINAL",
              "extends": [
                "type_:TerminalNodeResult"
              ],
              "properties": []
            },
            {
              "discriminantValue": "MERGE",
              "extends": [
                "type_:MergeNodeResult"
              ],
              "properties": []
            },
            {
              "discriminantValue": "SUBWORKFLOW",
              "extends": [
                "type_:SubworkflowNodeResult"
              ],
              "properties": []
            },
            {
              "discriminantValue": "METRIC",
              "extends": [
                "type_:MetricNodeResult"
              ],
              "properties": []
            },
            {
              "discriminantValue": "MAP",
              "extends": [
                "type_:MapNodeResult"
              ],
              "properties": []
            }
          ]
        }
      },
      "type_:WorkflowNodeResultEvent": {
        "name": "WorkflowNodeResultEvent",
        "shape": {
          "type": "discriminatedUnion",
          "discriminant": "state",
          "variants": [
            {
              "discriminantValue": "INITIATED",
              "extends": [
                "type_:InitiatedWorkflowNodeResultEvent"
              ],
              "properties": []
            },
            {
              "discriminantValue": "STREAMING",
              "extends": [
                "type_:StreamingWorkflowNodeResultEvent"
              ],
              "properties": []
            },
            {
              "discriminantValue": "FULFILLED",
              "extends": [
                "type_:FulfilledWorkflowNodeResultEvent"
              ],
              "properties": []
            },
            {
              "discriminantValue": "REJECTED",
              "extends": [
                "type_:RejectedWorkflowNodeResultEvent"
              ],
              "properties": []
            }
          ]
        }
      },
      "type_:WorkflowNodeResultEventState": {
        "name": "WorkflowNodeResultEventState",
        "description": "- `INITIATED` - INITIATED\n- `STREAMING` - STREAMING\n- `FULFILLED` - FULFILLED\n- `REJECTED` - REJECTED",
        "shape": {
          "type": "enum",
          "values": [
            {
              "value": "INITIATED"
            },
            {
              "value": "STREAMING"
            },
            {
              "value": "FULFILLED"
            },
            {
              "value": "REJECTED"
            }
          ]
        }
      },
      "type_:WorkflowOutput": {
        "name": "WorkflowOutput",
        "shape": {
          "type": "discriminatedUnion",
          "discriminant": "type",
          "variants": [
            {
              "discriminantValue": "STRING",
              "extends": [
                "type_:WorkflowOutputString"
              ],
              "properties": []
            },
            {
              "discriminantValue": "NUMBER",
              "extends": [
                "type_:WorkflowOutputNumber"
              ],
              "properties": []
            },
            {
              "discriminantValue": "JSON",
              "extends": [
                "type_:WorkflowOutputJson"
              ],
              "properties": []
            },
            {
              "discriminantValue": "CHAT_HISTORY",
              "extends": [
                "type_:WorkflowOutputChatHistory"
              ],
              "properties": []
            },
            {
              "discriminantValue": "SEARCH_RESULTS",
              "extends": [
                "type_:WorkflowOutputSearchResults"
              ],
              "properties": []
            },
            {
              "discriminantValue": "ARRAY",
              "extends": [
                "type_:WorkflowOutputArray"
              ],
              "properties": []
            },
            {
              "discriminantValue": "ERROR",
              "extends": [
                "type_:WorkflowOutputError"
              ],
              "properties": []
            },
            {
              "discriminantValue": "FUNCTION_CALL",
              "extends": [
                "type_:WorkflowOutputFunctionCall"
              ],
              "properties": []
            },
            {
              "discriminantValue": "IMAGE",
              "extends": [
                "type_:WorkflowOutputImage"
              ],
              "properties": []
            }
          ]
        }
      },
      "type_:WorkflowOutputArray": {
        "name": "WorkflowOutputArray",
        "description": "An array output from a Workflow execution.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "key": "name",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "The output's name, as defined in the workflow"
            },
            {
              "key": "value",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "list",
                      "itemShape": {
                        "type": "alias",
                        "value": {
                          "type": "id",
                          "id": "type_:VellumValue"
                        }
                      }
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_:WorkflowOutputChatHistory": {
        "name": "WorkflowOutputChatHistory",
        "description": "A chat history output from a Workflow execution.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "key": "name",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "The output's name, as defined in the workflow"
            },
            {
              "key": "value",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "list",
                      "itemShape": {
                        "type": "alias",
                        "value": {
                          "type": "id",
                          "id": "type_:ChatMessage"
                        }
                      }
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_:WorkflowOutputError": {
        "name": "WorkflowOutputError",
        "description": "An error output from a Workflow execution.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "key": "name",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "The output's name, as defined in the workflow"
            },
            {
              "key": "value",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:VellumError"
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_:WorkflowOutputFunctionCall": {
        "name": "WorkflowOutputFunctionCall",
        "description": "A function call output from a Workflow execution.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "key": "name",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "The output's name, as defined in the workflow"
            },
            {
              "key": "value",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:FunctionCall"
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_:WorkflowOutputImage": {
        "name": "WorkflowOutputImage",
        "description": "An image output from a Workflow execution.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "key": "name",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "The output's name, as defined in the workflow"
            },
            {
              "key": "value",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:VellumImage"
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_:WorkflowOutputJson": {
        "name": "WorkflowOutputJson",
        "description": "A JSON output from a Workflow execution.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "key": "name",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "The output's name, as defined in the workflow"
            },
            {
              "key": "value",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "unknown"
                }
              }
            }
          ]
        }
      },
      "type_:WorkflowOutputNumber": {
        "name": "WorkflowOutputNumber",
        "description": "A number output from a Workflow execution.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "key": "name",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "The output's name, as defined in the workflow"
            },
            {
              "key": "value",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_:WorkflowOutputSearchResults": {
        "name": "WorkflowOutputSearchResults",
        "description": "A search results output from a Workflow execution.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "key": "name",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "The output's name, as defined in the workflow"
            },
            {
              "key": "value",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "list",
                      "itemShape": {
                        "type": "alias",
                        "value": {
                          "type": "id",
                          "id": "type_:SearchResult"
                        }
                      }
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_:WorkflowOutputString": {
        "name": "WorkflowOutputString",
        "description": "A string output from a Workflow execution.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "key": "name",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "The output's name, as defined in the workflow"
            },
            {
              "key": "value",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_:WorkflowReleaseTagRead": {
        "name": "WorkflowReleaseTagRead",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "name",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "The name of the Release Tag"
            },
            {
              "key": "source",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:ReleaseTagSource"
                }
              },
              "description": "The source of how the Release Tag was originally created\n\n- `SYSTEM` - System\n- `USER` - User"
            },
            {
              "key": "history_item",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:WorkflowReleaseTagWorkflowDeploymentHistoryItem"
                }
              },
              "description": "The Workflow Deployment History Item that this Release Tag is associated with"
            }
          ]
        }
      },
      "type_:WorkflowReleaseTagWorkflowDeploymentHistoryItem": {
        "name": "WorkflowReleaseTagWorkflowDeploymentHistoryItem",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "The ID of the Workflow Deployment History Item"
            },
            {
              "key": "timestamp",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "datetime"
                  }
                }
              },
              "description": "The timestamp representing when this History Item was created"
            }
          ]
        }
      },
      "type_:WorkflowRequestChatHistoryInputRequest": {
        "name": "WorkflowRequestChatHistoryInputRequest",
        "description": "The input for a chat history variable in a Workflow.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "name",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 1
                  }
                }
              },
              "description": "The variable's name, as defined in the Workflow."
            },
            {
              "key": "value",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "list",
                  "itemShape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:ChatMessageRequest"
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_:WorkflowRequestInputRequest": {
        "name": "WorkflowRequestInputRequest",
        "shape": {
          "type": "discriminatedUnion",
          "discriminant": "type",
          "variants": [
            {
              "discriminantValue": "STRING",
              "extends": [
                "type_:WorkflowRequestStringInputRequest"
              ],
              "properties": []
            },
            {
              "discriminantValue": "JSON",
              "extends": [
                "type_:WorkflowRequestJsonInputRequest"
              ],
              "properties": []
            },
            {
              "discriminantValue": "CHAT_HISTORY",
              "extends": [
                "type_:WorkflowRequestChatHistoryInputRequest"
              ],
              "properties": []
            },
            {
              "discriminantValue": "NUMBER",
              "extends": [
                "type_:WorkflowRequestNumberInputRequest"
              ],
              "properties": []
            }
          ]
        }
      },
      "type_:WorkflowRequestJsonInputRequest": {
        "name": "WorkflowRequestJsonInputRequest",
        "description": "The input for a JSON variable in a Workflow.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "name",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 1
                  }
                }
              },
              "description": "The variable's name, as defined in the Workflow."
            },
            {
              "key": "value",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "unknown"
                }
              }
            }
          ]
        }
      },
      "type_:WorkflowRequestNumberInputRequest": {
        "name": "WorkflowRequestNumberInputRequest",
        "description": "The input for a number variable in a Workflow.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "name",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 1
                  }
                }
              },
              "description": "The variable's name, as defined in the Workflow."
            },
            {
              "key": "value",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "double"
                  }
                }
              }
            }
          ]
        }
      },
      "type_:WorkflowRequestStringInputRequest": {
        "name": "WorkflowRequestStringInputRequest",
        "description": "The input for a string variable in a Workflow.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "name",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 1
                  }
                }
              },
              "description": "The variable's name, as defined in the Workflow."
            },
            {
              "key": "value",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          ]
        }
      },
      "type_:WorkflowResultEvent": {
        "name": "WorkflowResultEvent",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "key": "state",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:WorkflowNodeResultEventState"
                }
              }
            },
            {
              "key": "ts",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "datetime"
                  }
                }
              }
            },
            {
              "key": "output",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:WorkflowResultEventOutputData"
                    }
                  }
                }
              }
            },
            {
              "key": "error",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:WorkflowEventError"
                    }
                  }
                }
              }
            },
            {
              "key": "outputs",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "list",
                      "itemShape": {
                        "type": "alias",
                        "value": {
                          "type": "id",
                          "id": "type_:WorkflowOutput"
                        }
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "inputs",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "list",
                      "itemShape": {
                        "type": "alias",
                        "value": {
                          "type": "id",
                          "id": "type_:ExecutionVellumValue"
                        }
                      }
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_:WorkflowResultEventOutputData": {
        "name": "WorkflowResultEventOutputData",
        "shape": {
          "type": "discriminatedUnion",
          "discriminant": "type",
          "variants": [
            {
              "discriminantValue": "STRING",
              "extends": [
                "type_:WorkflowResultEventOutputDataString"
              ],
              "properties": []
            },
            {
              "discriminantValue": "NUMBER",
              "extends": [
                "type_:WorkflowResultEventOutputDataNumber"
              ],
              "properties": []
            },
            {
              "discriminantValue": "JSON",
              "extends": [
                "type_:WorkflowResultEventOutputDataJson"
              ],
              "properties": []
            },
            {
              "discriminantValue": "CHAT_HISTORY",
              "extends": [
                "type_:WorkflowResultEventOutputDataChatHistory"
              ],
              "properties": []
            },
            {
              "discriminantValue": "SEARCH_RESULTS",
              "extends": [
                "type_:WorkflowResultEventOutputDataSearchResults"
              ],
              "properties": []
            },
            {
              "discriminantValue": "ARRAY",
              "extends": [
                "type_:WorkflowResultEventOutputDataArray"
              ],
              "properties": []
            },
            {
              "discriminantValue": "FUNCTION_CALL",
              "extends": [
                "type_:WorkflowResultEventOutputDataFunctionCall"
              ],
              "properties": []
            },
            {
              "discriminantValue": "ERROR",
              "extends": [
                "type_:WorkflowResultEventOutputDataError"
              ],
              "properties": []
            }
          ]
        }
      },
      "type_:WorkflowResultEventOutputDataArray": {
        "name": "WorkflowResultEventOutputDataArray",
        "description": "An Array output returned from a Workflow execution.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "name",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "key": "state",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:WorkflowNodeResultEventState"
                }
              }
            },
            {
              "key": "node_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "key": "delta",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "The newly output string value. Only relevant for string outputs with a state of STREAMING."
            },
            {
              "key": "value",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "list",
                      "itemShape": {
                        "type": "alias",
                        "value": {
                          "type": "id",
                          "id": "type_:ArrayVariableValueItem"
                        }
                      }
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_:WorkflowResultEventOutputDataChatHistory": {
        "name": "WorkflowResultEventOutputDataChatHistory",
        "description": "A Chat History output streamed from a Workflow execution.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "name",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "key": "state",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:WorkflowNodeResultEventState"
                }
              }
            },
            {
              "key": "node_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "key": "delta",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "The newly output string value. Only relevant for string outputs with a state of STREAMING."
            },
            {
              "key": "value",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "list",
                      "itemShape": {
                        "type": "alias",
                        "value": {
                          "type": "id",
                          "id": "type_:ChatMessage"
                        }
                      }
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_:WorkflowResultEventOutputDataError": {
        "name": "WorkflowResultEventOutputDataError",
        "description": "An Error output streamed from a Workflow execution.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "name",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "key": "state",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:WorkflowNodeResultEventState"
                }
              }
            },
            {
              "key": "node_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "key": "delta",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "The newly output string value. Only relevant for string outputs with a state of STREAMING."
            },
            {
              "key": "value",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:VellumError"
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_:WorkflowResultEventOutputDataFunctionCall": {
        "name": "WorkflowResultEventOutputDataFunctionCall",
        "description": "A Function Call output returned from a Workflow execution.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "name",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "key": "state",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:WorkflowNodeResultEventState"
                }
              }
            },
            {
              "key": "node_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "key": "delta",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "The newly output string value. Only relevant for string outputs with a state of STREAMING."
            },
            {
              "key": "value",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:FunctionCall"
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_:WorkflowResultEventOutputDataJson": {
        "name": "WorkflowResultEventOutputDataJson",
        "description": "A JSON output streamed from a Workflow execution.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "name",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "key": "state",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:WorkflowNodeResultEventState"
                }
              }
            },
            {
              "key": "node_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "key": "delta",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "The newly output string value. Only relevant for string outputs with a state of STREAMING."
            },
            {
              "key": "value",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "unknown"
                }
              }
            }
          ]
        }
      },
      "type_:WorkflowResultEventOutputDataNumber": {
        "name": "WorkflowResultEventOutputDataNumber",
        "description": "A number output streamed from a Workflow execution.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "name",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "key": "state",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:WorkflowNodeResultEventState"
                }
              }
            },
            {
              "key": "node_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "key": "delta",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "The newly output string value. Only relevant for string outputs with a state of STREAMING."
            },
            {
              "key": "value",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_:WorkflowResultEventOutputDataSearchResults": {
        "name": "WorkflowResultEventOutputDataSearchResults",
        "description": "A Search Results output streamed from a Workflow execution.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "name",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "key": "state",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:WorkflowNodeResultEventState"
                }
              }
            },
            {
              "key": "node_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "key": "delta",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "The newly output string value. Only relevant for string outputs with a state of STREAMING."
            },
            {
              "key": "value",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "list",
                      "itemShape": {
                        "type": "alias",
                        "value": {
                          "type": "id",
                          "id": "type_:SearchResult"
                        }
                      }
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_:WorkflowResultEventOutputDataString": {
        "name": "WorkflowResultEventOutputDataString",
        "description": "A string output streamed from a Workflow execution.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "name",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "key": "state",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:WorkflowNodeResultEventState"
                }
              }
            },
            {
              "key": "node_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "key": "delta",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "The newly output string value, meant to be concatenated with all previous. Will be non-null for events of state STREAMING."
            },
            {
              "key": "value",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "The entire string value. Will be non-null for events of state FULFILLED."
            }
          ]
        }
      },
      "type_:WorkflowStreamEvent": {
        "name": "WorkflowStreamEvent",
        "shape": {
          "type": "discriminatedUnion",
          "discriminant": "type",
          "variants": [
            {
              "discriminantValue": "WORKFLOW",
              "extends": [
                "type_:WorkflowExecutionWorkflowResultEvent"
              ],
              "properties": []
            },
            {
              "discriminantValue": "NODE",
              "extends": [
                "type_:WorkflowExecutionNodeResultEvent"
              ],
              "properties": []
            }
          ]
        }
      },
      "type_:WorkspaceSecretRead": {
        "name": "WorkspaceSecretRead",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "key": "modified",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "datetime"
                  }
                }
              }
            },
            {
              "key": "name",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "key": "label",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "key": "secret_type",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:SecretTypeEnum"
                }
              }
            }
          ]
        }
      }
    },
    "subpackages": {
      "subpackage_deployments": {
        "id": "subpackage_deployments",
        "name": "deployments"
      },
      "subpackage_documentIndexes": {
        "id": "subpackage_documentIndexes",
        "name": "documentIndexes"
      },
      "subpackage_documents": {
        "id": "subpackage_documents",
        "name": "documents"
      },
      "subpackage_folderEntities": {
        "id": "subpackage_folderEntities",
        "name": "folderEntities"
      },
      "subpackage_sandboxes": {
        "id": "subpackage_sandboxes",
        "name": "sandboxes"
      },
      "subpackage_testSuiteRuns": {
        "id": "subpackage_testSuiteRuns",
        "name": "testSuiteRuns"
      },
      "subpackage_testSuites": {
        "id": "subpackage_testSuites",
        "name": "testSuites"
      },
      "subpackage_workflowDeployments": {
        "id": "subpackage_workflowDeployments",
        "name": "workflowDeployments"
      },
      "subpackage_workflowSandboxes": {
        "id": "subpackage_workflowSandboxes",
        "name": "workflowSandboxes"
      },
      "subpackage_workspaceSecrets": {
        "id": "subpackage_workspaceSecrets",
        "name": "workspaceSecrets"
      }
    },
    "auths": {
      "default": {
        "type": "header",
        "headerWireValue": "X_API_KEY",
        "nameOverride": "apiKey"
      }
    }
  }
]