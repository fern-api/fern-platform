[
  {
    "id": "e810f56e-df97-4af2-bdaa-659077e1948e",
    "endpoints": {
      "endpoint_batch.list-jobs": {
        "id": "endpoint_batch.list-jobs",
        "namespace": [
          "subpackage_batch"
        ],
        "description": "Sort and filter jobs.",
        "method": "GET",
        "path": [
          {
            "type": "literal",
            "value": "/v0/batch/jobs"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.hume.ai"
          }
        ],
        "queryParameters": [
          {
            "key": "limit",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                }
              }
            },
            "description": "The maximum number of jobs to include in the response."
          },
          {
            "key": "status",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "id",
                    "id": "type_:Status"
                  }
                }
              }
            },
            "description": "Include only jobs with these statuses."
          },
          {
            "key": "when",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "id",
                    "id": "type_:When"
                  }
                }
              }
            },
            "description": "Include only jobs that were created before or after `timestamp_ms`."
          },
          {
            "key": "timestamp_ms",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                }
              }
            },
            "description": "Defaults to the current date and time. See `when`."
          },
          {
            "key": "sort_by",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "id",
                    "id": "type_:SortBy"
                  }
                }
              }
            },
            "description": "The job timestamp to sort by."
          },
          {
            "key": "direction",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "id",
                    "id": "type_:Direction"
                  }
                }
              }
            },
            "description": "The sort direction."
          },
          {
            "key": "type",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "id",
                    "id": "type_:Type"
                  }
                }
              }
            },
            "description": "Include only jobs of these types."
          }
        ],
        "response": {
          "statusCode": 200,
          "body": {
            "type": "alias",
            "value": {
              "type": "list",
              "itemShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:UnionJob"
                }
              }
            }
          }
        },
        "examples": [
          {
            "path": "/v0/batch/jobs",
            "responseStatusCode": 200,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": [
                {
                  "type": "INFERENCE",
                  "job_id": "job_id",
                  "request": {
                    "files": [
                      {
                        "md5sum": "md5sum",
                        "filename": "filename",
                        "content_type": "content_type"
                      }
                    ],
                    "models": {
                      "face": {
                        "fps_pred": 3,
                        "prob_threshold": 0.99,
                        "identify_faces": false,
                        "min_face_size": 60,
                        "facs": null,
                        "descriptions": null,
                        "save_faces": false
                      },
                      "burst": {},
                      "prosody": {
                        "granularity": "utterance",
                        "window": null,
                        "identify_speakers": false
                      },
                      "language": {
                        "granularity": "word",
                        "sentiment": null,
                        "toxicity": null,
                        "identify_speakers": false
                      },
                      "ner": {
                        "identify_speakers": false
                      },
                      "facemesh": {}
                    },
                    "urls": [
                      "https://hume-tutorials.s3.amazonaws.com/faces.zip"
                    ],
                    "registry_files": [],
                    "text": [],
                    "callback_url": null,
                    "notify": true
                  },
                  "state": {
                    "status": "COMPLETED",
                    "created_timestamp_ms": 1712587158717,
                    "ended_timestamp_ms": 1712587159274,
                    "num_errors": 0,
                    "num_predictions": 10,
                    "started_timestamp_ms": 1712587158800
                  },
                  "user_id": "user_id"
                }
              ]
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl https://api.hume.ai/v0/batch/jobs \\\n     -H \"X-Hume-Api-Key: <apiKey>\"",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumeClient } from \"hume\";\n\nconst hume = new HumeClient({ apiKey: \"YOUR_API_KEY\" });\nawait hume.expressionMeasurement.batch.listJobs();\n",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "endpoint_batch.start-inference-job": {
        "id": "endpoint_batch.start-inference-job",
        "namespace": [
          "subpackage_batch"
        ],
        "description": "Start a new measurement inference job.",
        "method": "POST",
        "path": [
          {
            "type": "literal",
            "value": "/v0/batch/jobs"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.hume.ai"
          }
        ],
        "request": {
          "contentType": "application/json",
          "body": {
            "type": "alias",
            "value": {
              "type": "id",
              "id": "type_:InferenceBaseRequest"
            }
          }
        },
        "response": {
          "statusCode": 200,
          "body": {
            "type": "alias",
            "value": {
              "type": "id",
              "id": "type_:JobId"
            }
          }
        },
        "examples": [
          {
            "path": "/v0/batch/jobs",
            "responseStatusCode": 200,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {
                "urls": [
                  "https://hume-tutorials.s3.amazonaws.com/faces.zip"
                ],
                "notify": true
              }
            },
            "responseBody": {
              "type": "json",
              "value": {
                "job_id": "job_id"
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://api.hume.ai/v0/batch/jobs \\\n     -H \"X-Hume-Api-Key: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n  \"urls\": [\n    \"https://hume-tutorials.s3.amazonaws.com/faces.zip\"\n  ],\n  \"notify\": true\n}'",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumeClient } from \"hume\";\n\nconst hume = new HumeClient({ apiKey: \"YOUR_API_KEY\" });\nawait hume.expressionMeasurement.batch.startInferenceJob({\n    urls: [\"https://hume-tutorials.s3.amazonaws.com/faces.zip\"],\n    notify: true\n});\n",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "endpoint_batch.get-job-details": {
        "id": "endpoint_batch.get-job-details",
        "namespace": [
          "subpackage_batch"
        ],
        "description": "Get the request details and state of a given job.",
        "method": "GET",
        "path": [
          {
            "type": "literal",
            "value": "/v0/batch/jobs/"
          },
          {
            "type": "pathParameter",
            "value": "id"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.hume.ai"
          }
        ],
        "pathParameters": [
          {
            "key": "id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "response": {
          "statusCode": 200,
          "body": {
            "type": "alias",
            "value": {
              "type": "id",
              "id": "type_:UnionJob"
            }
          }
        },
        "examples": [
          {
            "path": "/v0/batch/jobs/job_id",
            "responseStatusCode": 200,
            "name": "Embedding Generation",
            "pathParameters": {
              "id": "job_id"
            },
            "queryParameters": {},
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "type": "EMBEDDING_GENERATION",
                "job_id": "string",
                "request": {
                  "registry_file_details": [
                    {
                      "file_id": "string",
                      "file_url": "string"
                    }
                  ]
                },
                "state": {
                  "status": "QUEUED",
                  "created_timestamp_ms": 0
                },
                "user_id": "string"
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl https://api.hume.ai/v0/batch/jobs/job_id \\\n     -H \"X-Hume-Api-Key: <apiKey>\"",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumeClient } from \"hume\";\n\nconst hume = new HumeClient({ apiKey: \"YOUR_API_KEY\" });\nawait hume.expressionMeasurement.batch.getJobDetails(\"job_id\");\n",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/v0/batch/jobs/job_id",
            "responseStatusCode": 200,
            "name": "Inference",
            "pathParameters": {
              "id": "job_id"
            },
            "queryParameters": {},
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "type": "INFERENCE",
                "job_id": "job_id",
                "request": {
                  "files": [],
                  "models": {
                    "face": {
                      "fps_pred": 3,
                      "prob_threshold": 0.99,
                      "identify_faces": false,
                      "min_face_size": 60,
                      "facs": null,
                      "descriptions": null,
                      "save_faces": false
                    },
                    "burst": {},
                    "prosody": {
                      "granularity": "utterance",
                      "window": null,
                      "identify_speakers": false
                    },
                    "language": {
                      "granularity": "word",
                      "sentiment": null,
                      "toxicity": null,
                      "identify_speakers": false
                    },
                    "ner": {
                      "identify_speakers": false
                    },
                    "facemesh": {}
                  },
                  "urls": [
                    "https://hume-tutorials.s3.amazonaws.com/faces.zip"
                  ],
                  "registry_files": [],
                  "text": [],
                  "callback_url": null,
                  "notify": true
                },
                "state": {
                  "status": "COMPLETED",
                  "created_timestamp_ms": 1712590457884,
                  "ended_timestamp_ms": 1712590462252,
                  "num_errors": 0,
                  "num_predictions": 10,
                  "started_timestamp_ms": 1712590457995
                },
                "user_id": "user_id"
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl https://api.hume.ai/v0/batch/jobs/job_id \\\n     -H \"X-Hume-Api-Key: <apiKey>\"",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumeClient } from \"hume\";\n\nconst hume = new HumeClient({ apiKey: \"YOUR_API_KEY\" });\nawait hume.expressionMeasurement.batch.getJobDetails(\"job_id\");\n",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "endpoint_batch.get-job-predictions": {
        "id": "endpoint_batch.get-job-predictions",
        "namespace": [
          "subpackage_batch"
        ],
        "description": "Get the JSON predictions of a completed measurement or custom models inference job.",
        "method": "GET",
        "path": [
          {
            "type": "literal",
            "value": "/v0/batch/jobs/"
          },
          {
            "type": "pathParameter",
            "value": "id"
          },
          {
            "type": "literal",
            "value": "/predictions"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.hume.ai"
          }
        ],
        "pathParameters": [
          {
            "key": "id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "response": {
          "statusCode": 200,
          "body": {
            "type": "alias",
            "value": {
              "type": "list",
              "itemShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:UnionPredictResult"
                }
              }
            }
          }
        },
        "examples": [
          {
            "path": "/v0/batch/jobs/job_id/predictions",
            "responseStatusCode": 200,
            "pathParameters": {
              "id": "job_id"
            },
            "queryParameters": {},
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": [
                {
                  "source": {
                    "type": "url",
                    "url": "https://hume-tutorials.s3.amazonaws.com/faces.zip"
                  },
                  "results": {
                    "predictions": [
                      {
                        "file": "faces/100.jpg",
                        "models": {
                          "face": {
                            "metadata": null,
                            "grouped_predictions": [
                              {
                                "id": "unknown",
                                "predictions": [
                                  {
                                    "frame": 0,
                                    "time": 0,
                                    "prob": 0.9994111061096191,
                                    "box": {
                                      "x": 1187.885986328125,
                                      "y": 1397.697509765625,
                                      "w": 1401.668701171875,
                                      "h": 1961.424560546875
                                    },
                                    "emotions": [
                                      {
                                        "name": "Admiration",
                                        "score": 0.10722749680280685
                                      },
                                      {
                                        "name": "Adoration",
                                        "score": 0.06395940482616425
                                      },
                                      {
                                        "name": "Aesthetic Appreciation",
                                        "score": 0.05811462551355362
                                      },
                                      {
                                        "name": "Amusement",
                                        "score": 0.14187128841876984
                                      },
                                      {
                                        "name": "Anger",
                                        "score": 0.02804684266448021
                                      },
                                      {
                                        "name": "Anxiety",
                                        "score": 0.2713485360145569
                                      },
                                      {
                                        "name": "Awe",
                                        "score": 0.33812594413757324
                                      },
                                      {
                                        "name": "Awkwardness",
                                        "score": 0.1745193600654602
                                      },
                                      {
                                        "name": "Boredom",
                                        "score": 0.23600080609321594
                                      },
                                      {
                                        "name": "Calmness",
                                        "score": 0.18988418579101562
                                      },
                                      {
                                        "name": "Concentration",
                                        "score": 0.44288986921310425
                                      },
                                      {
                                        "name": "Confusion",
                                        "score": 0.39346569776535034
                                      },
                                      {
                                        "name": "Contemplation",
                                        "score": 0.31002455949783325
                                      },
                                      {
                                        "name": "Contempt",
                                        "score": 0.048870109021663666
                                      },
                                      {
                                        "name": "Contentment",
                                        "score": 0.0579497292637825
                                      },
                                      {
                                        "name": "Craving",
                                        "score": 0.06544201076030731
                                      },
                                      {
                                        "name": "Desire",
                                        "score": 0.05526508390903473
                                      },
                                      {
                                        "name": "Determination",
                                        "score": 0.08590991795063019
                                      },
                                      {
                                        "name": "Disappointment",
                                        "score": 0.19508258998394012
                                      },
                                      {
                                        "name": "Disgust",
                                        "score": 0.031529419124126434
                                      },
                                      {
                                        "name": "Distress",
                                        "score": 0.23210826516151428
                                      },
                                      {
                                        "name": "Doubt",
                                        "score": 0.3284550905227661
                                      },
                                      {
                                        "name": "Ecstasy",
                                        "score": 0.040716782212257385
                                      },
                                      {
                                        "name": "Embarrassment",
                                        "score": 0.1467227339744568
                                      },
                                      {
                                        "name": "Empathic Pain",
                                        "score": 0.07633581757545471
                                      },
                                      {
                                        "name": "Entrancement",
                                        "score": 0.16245244443416595
                                      },
                                      {
                                        "name": "Envy",
                                        "score": 0.03267110139131546
                                      },
                                      {
                                        "name": "Excitement",
                                        "score": 0.10656816512346268
                                      },
                                      {
                                        "name": "Fear",
                                        "score": 0.3115977346897125
                                      },
                                      {
                                        "name": "Guilt",
                                        "score": 0.11615975946187973
                                      },
                                      {
                                        "name": "Horror",
                                        "score": 0.19795553386211395
                                      },
                                      {
                                        "name": "Interest",
                                        "score": 0.3136432468891144
                                      },
                                      {
                                        "name": "Joy",
                                        "score": 0.06285581737756729
                                      },
                                      {
                                        "name": "Love",
                                        "score": 0.06339752674102783
                                      },
                                      {
                                        "name": "Nostalgia",
                                        "score": 0.05866732448339462
                                      },
                                      {
                                        "name": "Pain",
                                        "score": 0.07684041559696198
                                      },
                                      {
                                        "name": "Pride",
                                        "score": 0.026822954416275024
                                      },
                                      {
                                        "name": "Realization",
                                        "score": 0.30000734329223633
                                      },
                                      {
                                        "name": "Relief",
                                        "score": 0.04414166510105133
                                      },
                                      {
                                        "name": "Romance",
                                        "score": 0.042728863656520844
                                      },
                                      {
                                        "name": "Sadness",
                                        "score": 0.14773206412792206
                                      },
                                      {
                                        "name": "Satisfaction",
                                        "score": 0.05902980640530586
                                      },
                                      {
                                        "name": "Shame",
                                        "score": 0.08103451132774353
                                      },
                                      {
                                        "name": "Surprise (negative)",
                                        "score": 0.25518184900283813
                                      },
                                      {
                                        "name": "Surprise (positive)",
                                        "score": 0.28845661878585815
                                      },
                                      {
                                        "name": "Sympathy",
                                        "score": 0.062488824129104614
                                      },
                                      {
                                        "name": "Tiredness",
                                        "score": 0.1559651643037796
                                      },
                                      {
                                        "name": "Triumph",
                                        "score": 0.01955239288508892
                                      }
                                    ],
                                    "facs": null,
                                    "descriptions": null
                                  }
                                ]
                              }
                            ]
                          }
                        }
                      }
                    ],
                    "errors": []
                  }
                }
              ]
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl https://api.hume.ai/v0/batch/jobs/job_id/predictions \\\n     -H \"X-Hume-Api-Key: <apiKey>\"",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumeClient } from \"hume\";\n\nconst hume = new HumeClient({ apiKey: \"YOUR_API_KEY\" });\nawait hume.expressionMeasurement.batch.getJobPredictions(\"job_id\");\n",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "endpoint_batch.get-job-artifacts": {
        "id": "endpoint_batch.get-job-artifacts",
        "namespace": [
          "subpackage_batch"
        ],
        "description": "Get the artifacts ZIP of a completed measurement or custom models inference job.",
        "method": "GET",
        "path": [
          {
            "type": "literal",
            "value": "/v0/batch/jobs/"
          },
          {
            "type": "pathParameter",
            "value": "id"
          },
          {
            "type": "literal",
            "value": "/artifacts"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.hume.ai"
          }
        ],
        "pathParameters": [
          {
            "key": "id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "response": {
          "statusCode": 200,
          "body": {
            "type": "fileDownload"
          }
        },
        "examples": [
          {
            "path": "/v0/batch/jobs/:id/artifacts",
            "responseStatusCode": 200,
            "pathParameters": {
              "id": ":id"
            },
            "queryParameters": {},
            "headers": {},
            "responseBody": {
              "type": "filename",
              "value": "<filename>"
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl https://api.hume.ai/v0/batch/jobs/:id/artifacts \\\n     -H \"X-Hume-Api-Key: <apiKey>\"",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumeClient } from \"hume\";\n\nconst hume = new HumeClient({ apiKey: \"YOUR_API_KEY\" });\nawait hume.expressionMeasurement.batch.getJobArtifacts(\"string\");\n",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "endpoint_batch.start-inference-job-from-local-file": {
        "id": "endpoint_batch.start-inference-job-from-local-file",
        "namespace": [
          "subpackage_batch"
        ],
        "description": "Start a new batch inference job.",
        "method": "POST",
        "path": [
          {
            "type": "literal",
            "value": "/v0/batch/jobs"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.hume.ai"
          }
        ],
        "request": {
          "contentType": "multipart/form-data",
          "body": {
            "type": "formData",
            "fields": [
              {
                "type": "property",
                "key": "json",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "id": "type_:InferenceBaseRequest"
                      }
                    }
                  }
                }
              },
              {
                "type": "files",
                "key": "file",
                "isOptional": false
              }
            ]
          }
        },
        "response": {
          "statusCode": 200,
          "body": {
            "type": "alias",
            "value": {
              "type": "id",
              "id": "type_:JobId"
            }
          }
        },
        "examples": [
          {
            "path": "/v0/batch/jobs",
            "responseStatusCode": 200,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "form",
              "value": {
                "json": {
                  "type": "json"
                },
                "file": {
                  "type": "filenames",
                  "value": []
                }
              }
            },
            "responseBody": {
              "type": "json",
              "value": {
                "job_id": "job_id"
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://api.hume.ai/v0/batch/jobs \\\n     -H \"X-Hume-Api-Key: <apiKey>\" \\\n     -H \"Content-Type: multipart/form-data\"",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumeClient } from \"hume\";\n\nconst hume = new HumeClient({ apiKey: \"YOUR_API_KEY\" });\nawait hume.expressionMeasurement.batch.startInferenceJob({\n    urls: [\"https://hume-tutorials.s3.amazonaws.com/faces.zip\"],\n    notify: true\n});\n",
                  "generated": true
                }
              ]
            }
          }
        ]
      }
    },
    "websockets": {
      "subpackage_stream.stream": {
        "id": "subpackage_stream.stream",
        "namespace": [
          "subpackage_stream"
        ],
        "path": [
          {
            "type": "literal",
            "value": "/v0/stream/models"
          }
        ],
        "messages": [
          {
            "type": "subscribe",
            "origin": "server",
            "body": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_stream:SubscribeEvent"
              }
            }
          },
          {
            "type": "publish",
            "origin": "client",
            "body": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_stream:StreamData"
              }
            }
          }
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "wss://api.hume.ai"
          }
        ],
        "requestHeaders": [
          {
            "key": "X-Hume-Api-Key",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "examples": [
          {
            "path": "/v0/stream/models",
            "pathParameters": {},
            "queryParameters": {},
            "requestHeaders": {},
            "messages": [
              {
                "type": "publish",
                "body": {}
              },
              {
                "type": "subscribe",
                "body": {}
              }
            ]
          }
        ]
      }
    },
    "webhooks": {},
    "types": {
      "type_stream:StreamBurstJobDetails": {
        "name": "StreamBurstJobDetails",
        "description": "If the job_details flag was set in the request, details about the current streaming job will be returned in the response body.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "job_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "ID of the current streaming job."
            }
          ]
        }
      },
      "type_stream:StreamBurstBurstPredictionsItem": {
        "name": "StreamBurstBurstPredictionsItem",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "time",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:TimeRange"
                    }
                  }
                }
              }
            },
            {
              "key": "emotions",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:EmotionEmbedding"
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_stream:StreamBurstBurst": {
        "name": "StreamBurstBurst",
        "description": "Response for the vocal burst emotion model.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "predictions",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "list",
                      "itemShape": {
                        "type": "alias",
                        "value": {
                          "type": "id",
                          "id": "type_stream:StreamBurstBurstPredictionsItem"
                        }
                      }
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_stream:StreamBurstFacePredictionsItem": {
        "name": "StreamBurstFacePredictionsItem",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "frame",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  }
                }
              },
              "description": "Frame number"
            },
            {
              "key": "time",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  }
                }
              },
              "description": "Time in seconds when face detection occurred."
            },
            {
              "key": "bbox",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:BoundingBox"
                    }
                  }
                }
              }
            },
            {
              "key": "prob",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  }
                }
              },
              "description": "The predicted probability that a detected face was actually a face."
            },
            {
              "key": "face_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "Identifier for a face. Not that this defaults to `unknown` unless face identification is enabled in the face model configuration."
            },
            {
              "key": "emotions",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:EmotionEmbedding"
                    }
                  }
                }
              }
            },
            {
              "key": "facs",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:EmotionEmbedding"
                    }
                  }
                }
              }
            },
            {
              "key": "descriptions",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:EmotionEmbedding"
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_stream:StreamBurstFace": {
        "name": "StreamBurstFace",
        "description": "Response for the facial expression emotion model.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "predictions",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "list",
                      "itemShape": {
                        "type": "alias",
                        "value": {
                          "type": "id",
                          "id": "type_stream:StreamBurstFacePredictionsItem"
                        }
                      }
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_stream:StreamBurstFacemeshPredictionsItem": {
        "name": "StreamBurstFacemeshPredictionsItem",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "emotions",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:EmotionEmbedding"
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_stream:StreamBurstFacemesh": {
        "name": "StreamBurstFacemesh",
        "description": "Response for the facemesh emotion model.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "predictions",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "list",
                      "itemShape": {
                        "type": "alias",
                        "value": {
                          "type": "id",
                          "id": "type_stream:StreamBurstFacemeshPredictionsItem"
                        }
                      }
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_stream:StreamBurstLanguagePredictionsItem": {
        "name": "StreamBurstLanguagePredictionsItem",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "text",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "A segment of text (like a word or a sentence)."
            },
            {
              "key": "position",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:TextPosition"
                    }
                  }
                }
              }
            },
            {
              "key": "emotions",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:EmotionEmbedding"
                    }
                  }
                }
              }
            },
            {
              "key": "sentiment",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:Sentiment"
                    }
                  }
                }
              }
            },
            {
              "key": "toxicity",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:Toxicity"
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_stream:StreamBurstLanguage": {
        "name": "StreamBurstLanguage",
        "description": "Response for the language emotion model.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "predictions",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "list",
                      "itemShape": {
                        "type": "alias",
                        "value": {
                          "type": "id",
                          "id": "type_stream:StreamBurstLanguagePredictionsItem"
                        }
                      }
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_stream:StreamBurstProsodyPredictionsItem": {
        "name": "StreamBurstProsodyPredictionsItem",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "time",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:TimeRange"
                    }
                  }
                }
              }
            },
            {
              "key": "emotions",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:EmotionEmbedding"
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_stream:StreamBurstProsody": {
        "name": "StreamBurstProsody",
        "description": "Response for the speech prosody emotion model.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "predictions",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "list",
                      "itemShape": {
                        "type": "alias",
                        "value": {
                          "type": "id",
                          "id": "type_stream:StreamBurstProsodyPredictionsItem"
                        }
                      }
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_stream:StreamBurst": {
        "name": "StreamBurst",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "payload_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "If a payload ID was passed in the request, the same payload ID will be sent back in the response body."
            },
            {
              "key": "job_details",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_stream:StreamBurstJobDetails"
                    }
                  }
                }
              },
              "description": "If the job_details flag was set in the request, details about the current streaming job will be returned in the response body."
            },
            {
              "key": "burst",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_stream:StreamBurstBurst"
                    }
                  }
                }
              },
              "description": "Response for the vocal burst emotion model."
            },
            {
              "key": "face",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_stream:StreamBurstFace"
                    }
                  }
                }
              },
              "description": "Response for the facial expression emotion model."
            },
            {
              "key": "facemesh",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_stream:StreamBurstFacemesh"
                    }
                  }
                }
              },
              "description": "Response for the facemesh emotion model."
            },
            {
              "key": "language",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_stream:StreamBurstLanguage"
                    }
                  }
                }
              },
              "description": "Response for the language emotion model."
            },
            {
              "key": "prosody",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_stream:StreamBurstProsody"
                    }
                  }
                }
              },
              "description": "Response for the speech prosody emotion model."
            }
          ]
        }
      },
      "type_stream:StreamErrorJobDetails": {
        "name": "StreamErrorJobDetails",
        "description": "If the job_details flag was set in the request, details about the current streaming job will be returned in the response body.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "job_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "ID of the current streaming job."
            }
          ]
        }
      },
      "type_stream:StreamError": {
        "name": "StreamError",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "error",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "Error message text."
            },
            {
              "key": "code",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "Unique identifier for the error."
            },
            {
              "key": "payload_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "If a payload ID was passed in the request, the same payload ID will be sent back in the response body."
            },
            {
              "key": "job_details",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_stream:StreamErrorJobDetails"
                    }
                  }
                }
              },
              "description": "If the job_details flag was set in the request, details about the current streaming job will be returned in the response body."
            }
          ]
        }
      },
      "type_stream:StreamJobDetailsJobDetails": {
        "name": "StreamJobDetailsJobDetails",
        "description": "If the job_details flag was set in the request, details about the current streaming job will be returned in the response body.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "job_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "ID of the current streaming job."
            }
          ]
        }
      },
      "type_stream:StreamJobDetails": {
        "name": "StreamJobDetails",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "warning",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "Warning message text."
            },
            {
              "key": "code",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "Unique identifier for the error."
            },
            {
              "key": "payload_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "If a payload ID was passed in the request, the same payload ID will be sent back in the response body."
            },
            {
              "key": "job_details",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_stream:StreamJobDetailsJobDetails"
                    }
                  }
                }
              },
              "description": "If the job_details flag was set in the request, details about the current streaming job will be returned in the response body."
            }
          ]
        }
      },
      "type_stream:SubscribeEvent": {
        "name": "SubscribeEvent",
        "shape": {
          "type": "undiscriminatedUnion",
          "variants": [
            {
              "displayName": "Stream Burst",
              "shape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_stream:StreamBurst"
                }
              }
            },
            {
              "displayName": "Stream Error",
              "shape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_stream:StreamError"
                }
              }
            },
            {
              "displayName": "Stream Job Details",
              "shape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_stream:StreamJobDetails"
                }
              }
            }
          ]
        }
      },
      "type_stream:StreamDataModelsFace": {
        "name": "StreamDataModelsFace",
        "description": "Configuration for the facial expression emotion model.\n\nNote: Using the `reset_stream` parameter does not have any effect on face identification. A single face identifier cache is maintained over a full session whether `reset_stream` is used or not.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "facs",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "map",
                      "keyShape": {
                        "type": "alias",
                        "value": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      },
                      "valueShape": {
                        "type": "alias",
                        "value": {
                          "type": "unknown"
                        }
                      }
                    }
                  }
                }
              },
              "description": "Configuration for FACS predictions. If missing or null, no FACS predictions will be generated."
            },
            {
              "key": "descriptions",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "map",
                      "keyShape": {
                        "type": "alias",
                        "value": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      },
                      "valueShape": {
                        "type": "alias",
                        "value": {
                          "type": "unknown"
                        }
                      }
                    }
                  }
                }
              },
              "description": "Configuration for Descriptions predictions. If missing or null, no Descriptions predictions will be generated."
            },
            {
              "key": "identify_faces",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean"
                      }
                    }
                  }
                }
              },
              "description": "Whether to return identifiers for faces across frames. If true, unique identifiers will be assigned to face bounding boxes to differentiate different faces. If false, all faces will be tagged with an \"unknown\" ID."
            },
            {
              "key": "fps_pred",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "double",
                        "default": 3
                      }
                    }
                  }
                }
              },
              "description": "Number of frames per second to process. Other frames will be omitted from the response."
            },
            {
              "key": "prob_threshold",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "double",
                        "default": 3
                      }
                    }
                  }
                }
              },
              "description": "Face detection probability threshold. Faces detected with a probability less than this threshold will be omitted from the response."
            },
            {
              "key": "min_face_size",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "double",
                        "default": 3
                      }
                    }
                  }
                }
              },
              "description": "Minimum bounding box side length in pixels to treat as a face. Faces detected with a bounding box side length in pixels less than this threshold will be omitted from the response."
            }
          ]
        }
      },
      "type_stream:StreamDataModelsLanguage": {
        "name": "StreamDataModelsLanguage",
        "description": "Configuration for the language emotion model.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "sentiment",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "map",
                      "keyShape": {
                        "type": "alias",
                        "value": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      },
                      "valueShape": {
                        "type": "alias",
                        "value": {
                          "type": "unknown"
                        }
                      }
                    }
                  }
                }
              },
              "description": "Configuration for sentiment predictions. If missing or null, no sentiment predictions will be generated."
            },
            {
              "key": "toxicity",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "map",
                      "keyShape": {
                        "type": "alias",
                        "value": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      },
                      "valueShape": {
                        "type": "alias",
                        "value": {
                          "type": "unknown"
                        }
                      }
                    }
                  }
                }
              },
              "description": "Configuration for toxicity predictions. If missing or null, no toxicity predictions will be generated."
            },
            {
              "key": "granularity",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "The granularity at which to generate predictions. Values are `word`, `sentence`, `utterance`, or `passage`. To get a single prediction for the entire text of your streaming payload use `passage`. Default value is `word`."
            }
          ]
        }
      },
      "type_stream:StreamDataModels": {
        "name": "StreamDataModels",
        "description": "Configuration used to specify which models should be used and with what settings.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "burst",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "map",
                      "keyShape": {
                        "type": "alias",
                        "value": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      },
                      "valueShape": {
                        "type": "alias",
                        "value": {
                          "type": "unknown"
                        }
                      }
                    }
                  }
                }
              },
              "description": "Configuration for the vocal burst emotion model.\n\nNote: Model configuration is not currently available in streaming.\n\nPlease use the default configuration by passing an empty object `{}`."
            },
            {
              "key": "face",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_stream:StreamDataModelsFace"
                    }
                  }
                }
              },
              "description": "Configuration for the facial expression emotion model.\n\nNote: Using the `reset_stream` parameter does not have any effect on face identification. A single face identifier cache is maintained over a full session whether `reset_stream` is used or not."
            },
            {
              "key": "facemesh",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "map",
                      "keyShape": {
                        "type": "alias",
                        "value": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      },
                      "valueShape": {
                        "type": "alias",
                        "value": {
                          "type": "unknown"
                        }
                      }
                    }
                  }
                }
              },
              "description": "Configuration for the facemesh emotion model.\n\nNote: Model configuration is not currently available in streaming.\n\nPlease use the default configuration by passing an empty object `{}`."
            },
            {
              "key": "language",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_stream:StreamDataModelsLanguage"
                    }
                  }
                }
              },
              "description": "Configuration for the language emotion model."
            },
            {
              "key": "prosody",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "map",
                      "keyShape": {
                        "type": "alias",
                        "value": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      },
                      "valueShape": {
                        "type": "alias",
                        "value": {
                          "type": "unknown"
                        }
                      }
                    }
                  }
                }
              },
              "description": "Configuration for the speech prosody emotion model.\n\nNote: Model configuration is not currently available in streaming.\n\nPlease use the default configuration by passing an empty object `{}`."
            }
          ]
        }
      },
      "type_stream:StreamData": {
        "name": "StreamData",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "data",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "models",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_stream:StreamDataModels"
                    }
                  }
                }
              },
              "description": "Configuration used to specify which models should be used and with what settings."
            },
            {
              "key": "stream_window_ms",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "double",
                        "minimum": 500,
                        "maximum": 10000,
                        "default": 5000
                      }
                    }
                  }
                }
              },
              "description": "Length in milliseconds of streaming sliding window.\n\nExtending the length of this window will prepend media context from past payloads into the current payload.\n\nFor example, if on the first payload you send 500ms of data and on the second payload you send an additional 500ms of data, a window of at least 1000ms will allow the model to process all 1000ms of stream data.\n\nA window of 600ms would append the full 500ms of the second payload to the last 100ms of the first payload.\n\nNote: This feature is currently only supported for audio data and audio models. For other file types and models this parameter will be ignored."
            },
            {
              "key": "reset_stream",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean"
                      }
                    }
                  }
                }
              },
              "description": "Whether to reset the streaming sliding window before processing the current payload.\n\nIf this parameter is set to `true` then past context will be deleted before processing the current payload.\n\nUse reset_stream when one audio file is done being processed and you do not want context to leak across files."
            },
            {
              "key": "raw_text",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean"
                      }
                    }
                  }
                }
              },
              "description": "Set to `true` to enable the data parameter to be parsed as raw text rather than base64 encoded bytes.\nThis parameter is useful if you want to send text to be processed by the language model, but it cannot be used with other file types like audio, image, or video."
            },
            {
              "key": "job_details",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean"
                      }
                    }
                  }
                }
              },
              "description": "Set to `true` to get details about the job.\n\nThis parameter can be set in the same payload as data or it can be set without data and models configuration to get the job details between payloads.\n\nThis parameter is useful to get the unique job ID."
            },
            {
              "key": "payload_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "Pass an arbitrary string as the payload ID and get it back at the top level of the socket response.\n\nThis can be useful if you have multiple requests running asynchronously and want to disambiguate responses as they are received."
            }
          ]
        }
      },
      "type_:Alternative": {
        "name": "Alternative",
        "shape": {
          "type": "alias",
          "value": {
            "type": "literal",
            "value": {
              "type": "stringLiteral",
              "value": "language_only"
            }
          }
        }
      },
      "type_:Bcp47Tag": {
        "name": "Bcp47Tag",
        "shape": {
          "type": "enum",
          "values": [
            {
              "value": "zh"
            },
            {
              "value": "da"
            },
            {
              "value": "nl"
            },
            {
              "value": "en"
            },
            {
              "value": "en-AU"
            },
            {
              "value": "en-IN"
            },
            {
              "value": "en-NZ"
            },
            {
              "value": "en-GB"
            },
            {
              "value": "fr"
            },
            {
              "value": "fr-CA"
            },
            {
              "value": "de"
            },
            {
              "value": "hi"
            },
            {
              "value": "hi-Latn"
            },
            {
              "value": "id"
            },
            {
              "value": "it"
            },
            {
              "value": "ja"
            },
            {
              "value": "ko"
            },
            {
              "value": "no"
            },
            {
              "value": "pl"
            },
            {
              "value": "pt"
            },
            {
              "value": "pt-BR"
            },
            {
              "value": "pt-PT"
            },
            {
              "value": "ru"
            },
            {
              "value": "es"
            },
            {
              "value": "es-419"
            },
            {
              "value": "sv"
            },
            {
              "value": "ta"
            },
            {
              "value": "tr"
            },
            {
              "value": "uk"
            }
          ]
        }
      },
      "type_:BoundingBox": {
        "name": "BoundingBox",
        "description": "A bounding box around a face.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "x",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "double",
                        "minimum": 0
                      }
                    }
                  }
                }
              },
              "description": "x-coordinate of bounding box top left corner."
            },
            {
              "key": "y",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "double",
                        "minimum": 0
                      }
                    }
                  }
                }
              },
              "description": "y-coordinate of bounding box top left corner."
            },
            {
              "key": "w",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "double",
                        "minimum": 0
                      }
                    }
                  }
                }
              },
              "description": "Bounding box width."
            },
            {
              "key": "h",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "double",
                        "minimum": 0
                      }
                    }
                  }
                }
              },
              "description": "Bounding box height."
            }
          ]
        }
      },
      "type_:BurstPrediction": {
        "name": "BurstPrediction",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "time",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:TimeInterval"
                }
              }
            },
            {
              "key": "emotions",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "list",
                  "itemShape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:EmotionScore"
                    }
                  }
                }
              },
              "description": "A high-dimensional embedding in emotion space."
            },
            {
              "key": "descriptions",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "list",
                  "itemShape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:DescriptionsScore"
                    }
                  }
                }
              },
              "description": "Modality-specific descriptive features and their scores."
            }
          ]
        }
      },
      "type_:Classification": {
        "name": "Classification",
        "shape": {
          "type": "alias",
          "value": {
            "type": "map",
            "keyShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "unknown"
              }
            }
          }
        }
      },
      "type_:CompletedEmbeddingGeneration": {
        "name": "CompletedEmbeddingGeneration",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "created_timestamp_ms",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              },
              "description": "When this job was created (Unix timestamp in milliseconds)."
            },
            {
              "key": "started_timestamp_ms",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              },
              "description": "When this job started (Unix timestamp in milliseconds)."
            },
            {
              "key": "ended_timestamp_ms",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              },
              "description": "When this job ended (Unix timestamp in milliseconds)."
            }
          ]
        }
      },
      "type_:CompletedInference": {
        "name": "CompletedInference",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "created_timestamp_ms",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              },
              "description": "When this job was created (Unix timestamp in milliseconds)."
            },
            {
              "key": "started_timestamp_ms",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              },
              "description": "When this job started (Unix timestamp in milliseconds)."
            },
            {
              "key": "ended_timestamp_ms",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              },
              "description": "When this job ended (Unix timestamp in milliseconds)."
            },
            {
              "key": "num_predictions",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              },
              "description": "The number of predictions that were generated by this job."
            },
            {
              "key": "num_errors",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              },
              "description": "The number of errors that occurred while running this job."
            }
          ]
        }
      },
      "type_:CompletedTlInference": {
        "name": "CompletedTlInference",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "created_timestamp_ms",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              },
              "description": "When this job was created (Unix timestamp in milliseconds)."
            },
            {
              "key": "started_timestamp_ms",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              },
              "description": "When this job started (Unix timestamp in milliseconds)."
            },
            {
              "key": "ended_timestamp_ms",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              },
              "description": "When this job ended (Unix timestamp in milliseconds)."
            },
            {
              "key": "num_predictions",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              },
              "description": "The number of predictions that were generated by this job."
            },
            {
              "key": "num_errors",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              },
              "description": "The number of errors that occurred while running this job."
            }
          ]
        }
      },
      "type_:CompletedTraining": {
        "name": "CompletedTraining",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "created_timestamp_ms",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              },
              "description": "When this job was created (Unix timestamp in milliseconds)."
            },
            {
              "key": "started_timestamp_ms",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              },
              "description": "When this job started (Unix timestamp in milliseconds)."
            },
            {
              "key": "ended_timestamp_ms",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              },
              "description": "When this job ended (Unix timestamp in milliseconds)."
            },
            {
              "key": "custom_model",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:TrainingCustomModel"
                }
              }
            },
            {
              "key": "alternatives",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "map",
                      "keyShape": {
                        "type": "alias",
                        "value": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      },
                      "valueShape": {
                        "type": "alias",
                        "value": {
                          "type": "id",
                          "id": "type_:TrainingCustomModel"
                        }
                      }
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_:CustomModelPrediction": {
        "name": "CustomModelPrediction",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "output",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "map",
                  "keyShape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  },
                  "valueShape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "error",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "key": "task_type",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          ]
        }
      },
      "type_:CustomModelRequest": {
        "name": "CustomModelRequest",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "name",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "key": "description",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "tags",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "list",
                      "itemShape": {
                        "type": "alias",
                        "value": {
                          "type": "id",
                          "id": "type_:Tag"
                        }
                      }
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_:Dataset": {
        "name": "Dataset",
        "shape": {
          "type": "undiscriminatedUnion",
          "variants": [
            {
              "displayName": "Dataset Id",
              "shape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:DatasetId"
                }
              }
            },
            {
              "displayName": "Dataset Version Id",
              "shape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:DatasetVersionId"
                }
              }
            }
          ]
        }
      },
      "type_:DatasetId": {
        "name": "DatasetId",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          ]
        }
      },
      "type_:DatasetVersionId": {
        "name": "DatasetVersionId",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "version_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          ]
        }
      },
      "type_:DescriptionsScore": {
        "name": "DescriptionsScore",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "name",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "Name of the descriptive feature being expressed."
            },
            {
              "key": "score",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "Embedding value for the descriptive feature being expressed."
            }
          ]
        }
      },
      "type_:Direction": {
        "name": "Direction",
        "shape": {
          "type": "enum",
          "values": [
            {
              "value": "asc"
            },
            {
              "value": "desc"
            }
          ]
        }
      },
      "type_:EmbeddingGenerationBaseRequest": {
        "name": "EmbeddingGenerationBaseRequest",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "registry_file_details",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "list",
                      "itemShape": {
                        "type": "alias",
                        "value": {
                          "type": "id",
                          "id": "type_:RegistryFileDetail"
                        }
                      }
                    }
                  }
                }
              },
              "description": "File ID and File URL pairs for an asset registry file"
            }
          ]
        }
      },
      "type_:EmotionScore": {
        "name": "EmotionScore",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "name",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "Name of the emotion being expressed."
            },
            {
              "key": "score",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "double"
                  }
                }
              },
              "description": "Embedding value for the emotion being expressed."
            }
          ]
        }
      },
      "type_:Error": {
        "name": "Error",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "message",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "An error message."
            },
            {
              "key": "file",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "A file path relative to the top level source URL or file."
            }
          ]
        }
      },
      "type_:EvaluationArgs": {
        "name": "EvaluationArgs",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "validation",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:ValidationArgs"
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_:Face": {
        "name": "Face",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "fps_pred",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "double",
                        "default": 3
                      }
                    }
                  }
                }
              },
              "description": "Number of frames per second to process. Other frames will be omitted from the response. Set to `0` to process every frame."
            },
            {
              "key": "prob_threshold",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "double",
                        "minimum": 0,
                        "maximum": 1,
                        "default": 0.99
                      }
                    }
                  }
                }
              },
              "description": "Face detection probability threshold. Faces detected with a probability less than this threshold will be omitted from the response."
            },
            {
              "key": "identify_faces",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean"
                      }
                    }
                  }
                }
              },
              "description": "Whether to return identifiers for faces across frames. If `true`, unique identifiers will be assigned to face bounding boxes to differentiate different faces. If `false`, all faces will be tagged with an `unknown` ID."
            },
            {
              "key": "min_face_size",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "integer",
                        "minimum": 10,
                        "default": 60
                      }
                    }
                  }
                }
              },
              "description": "Minimum bounding box side length in pixels to treat as a face. Faces detected with a bounding box side length in pixels less than this threshold will be omitted from the response."
            },
            {
              "key": "facs",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:Unconfigurable"
                    }
                  }
                }
              }
            },
            {
              "key": "descriptions",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:Unconfigurable"
                    }
                  }
                }
              }
            },
            {
              "key": "save_faces",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean"
                      }
                    }
                  }
                }
              },
              "description": "Whether to extract and save the detected faces in the artifacts zip created by each job."
            }
          ]
        }
      },
      "type_:FacePrediction": {
        "name": "FacePrediction",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "frame",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              },
              "description": "Frame number"
            },
            {
              "key": "time",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "double"
                  }
                }
              },
              "description": "Time in seconds when face detection occurred."
            },
            {
              "key": "prob",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "double"
                  }
                }
              },
              "description": "The predicted probability that a detected face was actually a face."
            },
            {
              "key": "box",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:BoundingBox"
                }
              }
            },
            {
              "key": "emotions",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "list",
                  "itemShape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:EmotionScore"
                    }
                  }
                }
              },
              "description": "A high-dimensional embedding in emotion space."
            },
            {
              "key": "facs",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "list",
                      "itemShape": {
                        "type": "alias",
                        "value": {
                          "type": "id",
                          "id": "type_:FacsScore"
                        }
                      }
                    }
                  }
                }
              },
              "description": "FACS 2.0 features and their scores."
            },
            {
              "key": "descriptions",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "list",
                      "itemShape": {
                        "type": "alias",
                        "value": {
                          "type": "id",
                          "id": "type_:DescriptionsScore"
                        }
                      }
                    }
                  }
                }
              },
              "description": "Modality-specific descriptive features and their scores."
            }
          ]
        }
      },
      "type_:FacemeshPrediction": {
        "name": "FacemeshPrediction",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "emotions",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "list",
                  "itemShape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:EmotionScore"
                    }
                  }
                }
              },
              "description": "A high-dimensional embedding in emotion space."
            }
          ]
        }
      },
      "type_:FacsScore": {
        "name": "FacsScore",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "name",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "Name of the FACS 2.0 feature being expressed."
            },
            {
              "key": "score",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "Embedding value for the FACS 2.0 feature being expressed."
            }
          ]
        }
      },
      "type_:Failed": {
        "name": "Failed",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "created_timestamp_ms",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              },
              "description": "When this job was created (Unix timestamp in milliseconds)."
            },
            {
              "key": "started_timestamp_ms",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              },
              "description": "When this job started (Unix timestamp in milliseconds)."
            },
            {
              "key": "ended_timestamp_ms",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              },
              "description": "When this job ended (Unix timestamp in milliseconds)."
            },
            {
              "key": "message",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "An error message."
            }
          ]
        }
      },
      "type_:File": {
        "name": "File",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "filename",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "The name of the file."
            },
            {
              "key": "content_type",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "The content type of the file."
            },
            {
              "key": "md5sum",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "The MD5 checksum of the file."
            }
          ]
        }
      },
      "type_:Granularity": {
        "name": "Granularity",
        "description": "The granularity at which to generate predictions. `utterance` corresponds to a natural pause or break in conversation, while `conversational_turn` corresponds to a change in speaker.",
        "shape": {
          "type": "enum",
          "values": [
            {
              "value": "word"
            },
            {
              "value": "sentence"
            },
            {
              "value": "utterance"
            },
            {
              "value": "conversational_turn"
            }
          ]
        }
      },
      "type_:GroupedPredictionsBurstPrediction": {
        "name": "GroupedPredictionsBurstPrediction",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "An automatically generated label to identify individuals in your media file. Will be `unknown` if you have chosen to disable identification, or if the model is unable to distinguish between individuals."
            },
            {
              "key": "predictions",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "list",
                  "itemShape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:BurstPrediction"
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_:GroupedPredictionsFacePrediction": {
        "name": "GroupedPredictionsFacePrediction",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "An automatically generated label to identify individuals in your media file. Will be `unknown` if you have chosen to disable identification, or if the model is unable to distinguish between individuals."
            },
            {
              "key": "predictions",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "list",
                  "itemShape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:FacePrediction"
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_:GroupedPredictionsFacemeshPrediction": {
        "name": "GroupedPredictionsFacemeshPrediction",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "An automatically generated label to identify individuals in your media file. Will be `unknown` if you have chosen to disable identification, or if the model is unable to distinguish between individuals."
            },
            {
              "key": "predictions",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "list",
                  "itemShape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:FacemeshPrediction"
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_:GroupedPredictionsLanguagePrediction": {
        "name": "GroupedPredictionsLanguagePrediction",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "An automatically generated label to identify individuals in your media file. Will be `unknown` if you have chosen to disable identification, or if the model is unable to distinguish between individuals."
            },
            {
              "key": "predictions",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "list",
                  "itemShape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:LanguagePrediction"
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_:GroupedPredictionsNerPrediction": {
        "name": "GroupedPredictionsNerPrediction",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "An automatically generated label to identify individuals in your media file. Will be `unknown` if you have chosen to disable identification, or if the model is unable to distinguish between individuals."
            },
            {
              "key": "predictions",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "list",
                  "itemShape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:NerPrediction"
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_:GroupedPredictionsProsodyPrediction": {
        "name": "GroupedPredictionsProsodyPrediction",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "An automatically generated label to identify individuals in your media file. Will be `unknown` if you have chosen to disable identification, or if the model is unable to distinguish between individuals."
            },
            {
              "key": "predictions",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "list",
                  "itemShape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:ProsodyPrediction"
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_:InProgress": {
        "name": "InProgress",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "created_timestamp_ms",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              },
              "description": "When this job was created (Unix timestamp in milliseconds)."
            },
            {
              "key": "started_timestamp_ms",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              },
              "description": "When this job started (Unix timestamp in milliseconds)."
            }
          ]
        }
      },
      "type_:InferenceBaseRequest": {
        "name": "InferenceBaseRequest",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "models",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:Models"
                    }
                  }
                }
              }
            },
            {
              "key": "transcription",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:Transcription"
                    }
                  }
                }
              }
            },
            {
              "key": "urls",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "list",
                      "itemShape": {
                        "type": "alias",
                        "value": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              },
              "description": "URLs to the media files to be processed. Each must be a valid public URL to a media file (see recommended input filetypes) or an archive (`.zip`, `.tar.gz`, `.tar.bz2`, `.tar.xz`) of media files.\n\nIf you wish to supply more than 100 URLs, consider providing them as an archive (`.zip`, `.tar.gz`, `.tar.bz2`, `.tar.xz`)."
            },
            {
              "key": "registry_files",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "list",
                      "itemShape": {
                        "type": "alias",
                        "value": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              },
              "description": "List of File IDs corresponding to the files in the asset registry."
            },
            {
              "key": "text",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "list",
                      "itemShape": {
                        "type": "alias",
                        "value": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              },
              "description": "Text to supply directly to our language and NER models."
            },
            {
              "key": "callback_url",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "If provided, a `POST` request will be made to the URL with the generated predictions on completion or the error message on failure."
            },
            {
              "key": "notify",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean"
                      }
                    }
                  }
                }
              },
              "description": "Whether to send an email notification to the user upon job completion/failure."
            }
          ]
        }
      },
      "type_:InferencePrediction": {
        "name": "InferencePrediction",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "file",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "A file path relative to the top level source URL or file."
            },
            {
              "key": "models",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:ModelsPredictions"
                }
              }
            }
          ]
        }
      },
      "type_:InferenceRequest": {
        "name": "InferenceRequest",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "models",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:Models"
                    }
                  }
                }
              }
            },
            {
              "key": "transcription",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:Transcription"
                    }
                  }
                }
              }
            },
            {
              "key": "urls",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "list",
                      "itemShape": {
                        "type": "alias",
                        "value": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              },
              "description": "URLs to the media files to be processed. Each must be a valid public URL to a media file (see recommended input filetypes) or an archive (`.zip`, `.tar.gz`, `.tar.bz2`, `.tar.xz`) of media files.\n\nIf you wish to supply more than 100 URLs, consider providing them as an archive (`.zip`, `.tar.gz`, `.tar.bz2`, `.tar.xz`)."
            },
            {
              "key": "registry_files",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "list",
                      "itemShape": {
                        "type": "alias",
                        "value": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              },
              "description": "List of File IDs corresponding to the files in the asset registry."
            },
            {
              "key": "text",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "list",
                      "itemShape": {
                        "type": "alias",
                        "value": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              },
              "description": "Text to supply directly to our language and NER models."
            },
            {
              "key": "callback_url",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "If provided, a `POST` request will be made to the URL with the generated predictions on completion or the error message on failure."
            },
            {
              "key": "notify",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean"
                      }
                    }
                  }
                }
              },
              "description": "Whether to send an email notification to the user upon job completion/failure."
            },
            {
              "key": "files",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "list",
                  "itemShape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:File"
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_:InferenceResults": {
        "name": "InferenceResults",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "predictions",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "list",
                  "itemShape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:InferencePrediction"
                    }
                  }
                }
              }
            },
            {
              "key": "errors",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "list",
                  "itemShape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:Error"
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_:InferenceSourcePredictResult": {
        "name": "InferenceSourcePredictResult",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "source",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:Source"
                }
              }
            },
            {
              "key": "results",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:InferenceResults"
                    }
                  }
                }
              }
            },
            {
              "key": "error",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "An error message."
            }
          ]
        }
      },
      "type_:JobEmbeddingGeneration": {
        "name": "JobEmbeddingGeneration",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "job_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "The ID associated with this job."
            },
            {
              "key": "user_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "key": "request",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:EmbeddingGenerationBaseRequest"
                }
              }
            },
            {
              "key": "state",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:StateEmbeddingGeneration"
                }
              }
            }
          ]
        }
      },
      "type_:JobInference": {
        "name": "JobInference",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "job_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "The ID associated with this job."
            },
            {
              "key": "user_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "key": "request",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:InferenceRequest"
                }
              }
            },
            {
              "key": "state",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:StateInference"
                }
              }
            }
          ]
        }
      },
      "type_:JobTlInference": {
        "name": "JobTlInference",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "job_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "The ID associated with this job."
            },
            {
              "key": "user_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "key": "request",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:TlInferenceBaseRequest"
                }
              }
            },
            {
              "key": "state",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:StateTlInference"
                }
              }
            }
          ]
        }
      },
      "type_:JobTraining": {
        "name": "JobTraining",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "job_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "The ID associated with this job."
            },
            {
              "key": "user_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "key": "request",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:TrainingBaseRequest"
                }
              }
            },
            {
              "key": "state",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:StateTraining"
                }
              }
            }
          ]
        }
      },
      "type_:JobId": {
        "name": "JobId",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "job_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "The ID of the started job."
            }
          ]
        }
      },
      "type_:Language": {
        "name": "Language",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "granularity",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:Granularity"
                    }
                  }
                }
              }
            },
            {
              "key": "sentiment",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:Unconfigurable"
                    }
                  }
                }
              }
            },
            {
              "key": "toxicity",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:Unconfigurable"
                    }
                  }
                }
              }
            },
            {
              "key": "identify_speakers",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean"
                      }
                    }
                  }
                }
              },
              "description": "Whether to return identifiers for speakers over time. If `true`, unique identifiers will be assigned to spoken words to differentiate different speakers. If `false`, all speakers will be tagged with an `unknown` ID."
            }
          ]
        }
      },
      "type_:LanguagePrediction": {
        "name": "LanguagePrediction",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "text",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "A segment of text (like a word or a sentence)."
            },
            {
              "key": "position",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:PositionInterval"
                }
              }
            },
            {
              "key": "time",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:TimeInterval"
                    }
                  }
                }
              }
            },
            {
              "key": "confidence",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  }
                }
              },
              "description": "Value between `0.0` and `1.0` that indicates our transcription model's relative confidence in this text."
            },
            {
              "key": "speaker_confidence",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  }
                }
              },
              "description": "Value between `0.0` and `1.0` that indicates our transcription model's relative confidence that this text was spoken by this speaker."
            },
            {
              "key": "emotions",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "list",
                  "itemShape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:EmotionScore"
                    }
                  }
                }
              },
              "description": "A high-dimensional embedding in emotion space."
            },
            {
              "key": "sentiment",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "list",
                      "itemShape": {
                        "type": "alias",
                        "value": {
                          "type": "id",
                          "id": "type_:SentimentScore"
                        }
                      }
                    }
                  }
                }
              },
              "description": "Sentiment predictions returned as a distribution. This model predicts the probability that a given text could be interpreted as having each sentiment level from `1` (negative) to `9` (positive).\n\nCompared to returning one estimate of sentiment, this enables a more nuanced analysis of a text's meaning. For example, a text with very neutral sentiment would have an average rating of `5`. But also a text that could be interpreted as having very positive sentiment or very negative sentiment would also have an average rating of `5`. The average sentiment is less informative than the distribution over sentiment, so this API returns a value for each sentiment level."
            },
            {
              "key": "toxicity",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "list",
                      "itemShape": {
                        "type": "alias",
                        "value": {
                          "type": "id",
                          "id": "type_:ToxicityScore"
                        }
                      }
                    }
                  }
                }
              },
              "description": "Toxicity predictions returned as probabilities that the text can be classified into the following categories: `toxic`, `severe_toxic`, `obscene`, `threat`, `insult`, and `identity_hate`."
            }
          ]
        }
      },
      "type_:Models": {
        "name": "Models",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "face",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:Face"
                    }
                  }
                }
              }
            },
            {
              "key": "burst",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:Unconfigurable"
                    }
                  }
                }
              }
            },
            {
              "key": "prosody",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:Prosody"
                    }
                  }
                }
              }
            },
            {
              "key": "language",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:Language"
                    }
                  }
                }
              }
            },
            {
              "key": "ner",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:Ner"
                    }
                  }
                }
              }
            },
            {
              "key": "facemesh",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:Unconfigurable"
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_:ModelsPredictions": {
        "name": "ModelsPredictions",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "face",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:PredictionsOptionalNullFacePrediction"
                    }
                  }
                }
              }
            },
            {
              "key": "burst",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:PredictionsOptionalNullBurstPrediction"
                    }
                  }
                }
              }
            },
            {
              "key": "prosody",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:PredictionsOptionalTranscriptionMetadataProsodyPrediction"
                    }
                  }
                }
              }
            },
            {
              "key": "language",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:PredictionsOptionalTranscriptionMetadataLanguagePrediction"
                    }
                  }
                }
              }
            },
            {
              "key": "ner",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:PredictionsOptionalTranscriptionMetadataNerPrediction"
                    }
                  }
                }
              }
            },
            {
              "key": "facemesh",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:PredictionsOptionalNullFacemeshPrediction"
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_:Ner": {
        "name": "Ner",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "identify_speakers",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean"
                      }
                    }
                  }
                }
              },
              "description": "Whether to return identifiers for speakers over time. If `true`, unique identifiers will be assigned to spoken words to differentiate different speakers. If `false`, all speakers will be tagged with an `unknown` ID."
            }
          ]
        }
      },
      "type_:NerPrediction": {
        "name": "NerPrediction",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "entity",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "The recognized topic or entity."
            },
            {
              "key": "position",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:PositionInterval"
                }
              }
            },
            {
              "key": "entity_confidence",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "double"
                  }
                }
              },
              "description": "Our NER model's relative confidence in the recognized topic or entity."
            },
            {
              "key": "support",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "double"
                  }
                }
              },
              "description": "A measure of how often the entity is linked to by other entities."
            },
            {
              "key": "uri",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "A URL which provides more information about the recognized topic or entity."
            },
            {
              "key": "link_word",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "The specific word to which the emotion predictions are linked."
            },
            {
              "key": "time",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:TimeInterval"
                    }
                  }
                }
              }
            },
            {
              "key": "confidence",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  }
                }
              },
              "description": "Value between `0.0` and `1.0` that indicates our transcription model's relative confidence in this text."
            },
            {
              "key": "speaker_confidence",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  }
                }
              },
              "description": "Value between `0.0` and `1.0` that indicates our transcription model's relative confidence that this text was spoken by this speaker."
            },
            {
              "key": "emotions",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "list",
                  "itemShape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:EmotionScore"
                    }
                  }
                }
              },
              "description": "A high-dimensional embedding in emotion space."
            }
          ]
        }
      },
      "type_:Null": {
        "name": "Null",
        "description": "No associated metadata for this model. Value will be `null`.",
        "shape": {
          "type": "alias",
          "value": {
            "type": "map",
            "keyShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "unknown"
              }
            }
          }
        }
      },
      "type_:PositionInterval": {
        "name": "PositionInterval",
        "description": "Position of a segment of text within a larger document, measured in characters. Uses zero-based indexing. The beginning index is inclusive and the end index is exclusive.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "begin",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              },
              "description": "The index of the first character in the text segment, inclusive."
            },
            {
              "key": "end",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              },
              "description": "The index of the last character in the text segment, exclusive."
            }
          ]
        }
      },
      "type_:PredictionsOptionalNullBurstPrediction": {
        "name": "PredictionsOptionalNullBurstPrediction",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "metadata",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:Null"
                    }
                  }
                }
              }
            },
            {
              "key": "grouped_predictions",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "list",
                  "itemShape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:GroupedPredictionsBurstPrediction"
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_:PredictionsOptionalNullFacePrediction": {
        "name": "PredictionsOptionalNullFacePrediction",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "metadata",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:Null"
                    }
                  }
                }
              }
            },
            {
              "key": "grouped_predictions",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "list",
                  "itemShape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:GroupedPredictionsFacePrediction"
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_:PredictionsOptionalNullFacemeshPrediction": {
        "name": "PredictionsOptionalNullFacemeshPrediction",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "metadata",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:Null"
                    }
                  }
                }
              }
            },
            {
              "key": "grouped_predictions",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "list",
                  "itemShape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:GroupedPredictionsFacemeshPrediction"
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_:PredictionsOptionalTranscriptionMetadataLanguagePrediction": {
        "name": "PredictionsOptionalTranscriptionMetadataLanguagePrediction",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "metadata",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:TranscriptionMetadata"
                    }
                  }
                }
              }
            },
            {
              "key": "grouped_predictions",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "list",
                  "itemShape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:GroupedPredictionsLanguagePrediction"
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_:PredictionsOptionalTranscriptionMetadataNerPrediction": {
        "name": "PredictionsOptionalTranscriptionMetadataNerPrediction",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "metadata",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:TranscriptionMetadata"
                    }
                  }
                }
              }
            },
            {
              "key": "grouped_predictions",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "list",
                  "itemShape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:GroupedPredictionsNerPrediction"
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_:PredictionsOptionalTranscriptionMetadataProsodyPrediction": {
        "name": "PredictionsOptionalTranscriptionMetadataProsodyPrediction",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "metadata",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:TranscriptionMetadata"
                    }
                  }
                }
              }
            },
            {
              "key": "grouped_predictions",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "list",
                  "itemShape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:GroupedPredictionsProsodyPrediction"
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_:Prosody": {
        "name": "Prosody",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "granularity",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:Granularity"
                    }
                  }
                }
              }
            },
            {
              "key": "window",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:Window"
                    }
                  }
                }
              }
            },
            {
              "key": "identify_speakers",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean"
                      }
                    }
                  }
                }
              },
              "description": "Whether to return identifiers for speakers over time. If `true`, unique identifiers will be assigned to spoken words to differentiate different speakers. If `false`, all speakers will be tagged with an `unknown` ID."
            }
          ]
        }
      },
      "type_:ProsodyPrediction": {
        "name": "ProsodyPrediction",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "text",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "A segment of text (like a word or a sentence)."
            },
            {
              "key": "time",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:TimeInterval"
                }
              }
            },
            {
              "key": "confidence",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  }
                }
              },
              "description": "Value between `0.0` and `1.0` that indicates our transcription model's relative confidence in this text."
            },
            {
              "key": "speaker_confidence",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  }
                }
              },
              "description": "Value between `0.0` and `1.0` that indicates our transcription model's relative confidence that this text was spoken by this speaker."
            },
            {
              "key": "emotions",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "list",
                  "itemShape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:EmotionScore"
                    }
                  }
                }
              },
              "description": "A high-dimensional embedding in emotion space."
            }
          ]
        }
      },
      "type_:Queued": {
        "name": "Queued",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "created_timestamp_ms",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              },
              "description": "When this job was created (Unix timestamp in milliseconds)."
            }
          ]
        }
      },
      "type_:RegistryFileDetail": {
        "name": "RegistryFileDetail",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "file_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "File ID in the Asset Registry"
            },
            {
              "key": "file_url",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "URL to the file in the Asset Registry"
            }
          ]
        }
      },
      "type_:Regression": {
        "name": "Regression",
        "shape": {
          "type": "alias",
          "value": {
            "type": "map",
            "keyShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "unknown"
              }
            }
          }
        }
      },
      "type_:SentimentScore": {
        "name": "SentimentScore",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "name",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "Level of sentiment, ranging from `1` (negative) to `9` (positive)"
            },
            {
              "key": "score",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "Prediction for this level of sentiment"
            }
          ]
        }
      },
      "type_:SortBy": {
        "name": "SortBy",
        "shape": {
          "type": "enum",
          "values": [
            {
              "value": "created"
            },
            {
              "value": "started"
            },
            {
              "value": "ended"
            }
          ]
        }
      },
      "type_:Source": {
        "name": "Source",
        "shape": {
          "type": "discriminatedUnion",
          "discriminant": "type",
          "variants": [
            {
              "discriminantValue": "url",
              "extends": [
                "type_:SourceUrl"
              ],
              "properties": []
            },
            {
              "discriminantValue": "file",
              "extends": [
                "type_:SourceFile"
              ],
              "properties": []
            },
            {
              "discriminantValue": "text",
              "extends": [
                "type_:SourceTextSource"
              ],
              "properties": []
            }
          ]
        }
      },
      "type_:SourceFile": {
        "name": "SourceFile",
        "shape": {
          "type": "object",
          "extends": [
            "type_:File"
          ],
          "properties": []
        }
      },
      "type_:SourceTextSource": {
        "name": "SourceTextSource",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": []
        }
      },
      "type_:SourceUrl": {
        "name": "SourceUrl",
        "shape": {
          "type": "object",
          "extends": [
            "type_:Url"
          ],
          "properties": []
        }
      },
      "type_:Url": {
        "name": "Url",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "url",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "The URL of the source media file."
            }
          ]
        }
      },
      "type_:StateEmbeddingGeneration": {
        "name": "StateEmbeddingGeneration",
        "shape": {
          "type": "discriminatedUnion",
          "discriminant": "status",
          "variants": [
            {
              "discriminantValue": "QUEUED",
              "extends": [
                "type_:StateEmbeddingGenerationQueued"
              ],
              "properties": []
            },
            {
              "discriminantValue": "IN_PROGRESS",
              "extends": [
                "type_:StateEmbeddingGenerationInProgress"
              ],
              "properties": []
            },
            {
              "discriminantValue": "COMPLETED",
              "extends": [
                "type_:StateEmbeddingGenerationCompletedEmbeddingGeneration"
              ],
              "properties": []
            },
            {
              "discriminantValue": "FAILED",
              "extends": [
                "type_:StateEmbeddingGenerationFailed"
              ],
              "properties": []
            }
          ]
        }
      },
      "type_:StateEmbeddingGenerationCompletedEmbeddingGeneration": {
        "name": "StateEmbeddingGenerationCompletedEmbeddingGeneration",
        "shape": {
          "type": "object",
          "extends": [
            "type_:CompletedEmbeddingGeneration"
          ],
          "properties": []
        }
      },
      "type_:StateEmbeddingGenerationFailed": {
        "name": "StateEmbeddingGenerationFailed",
        "shape": {
          "type": "object",
          "extends": [
            "type_:Failed"
          ],
          "properties": []
        }
      },
      "type_:StateEmbeddingGenerationInProgress": {
        "name": "StateEmbeddingGenerationInProgress",
        "shape": {
          "type": "object",
          "extends": [
            "type_:InProgress"
          ],
          "properties": []
        }
      },
      "type_:StateEmbeddingGenerationQueued": {
        "name": "StateEmbeddingGenerationQueued",
        "shape": {
          "type": "object",
          "extends": [
            "type_:Queued"
          ],
          "properties": []
        }
      },
      "type_:StateInference": {
        "name": "StateInference",
        "shape": {
          "type": "discriminatedUnion",
          "discriminant": "status",
          "variants": [
            {
              "discriminantValue": "QUEUED",
              "extends": [
                "type_:StateInferenceQueued"
              ],
              "properties": []
            },
            {
              "discriminantValue": "IN_PROGRESS",
              "extends": [
                "type_:StateInferenceInProgress"
              ],
              "properties": []
            },
            {
              "discriminantValue": "COMPLETED",
              "extends": [
                "type_:StateInferenceCompletedInference"
              ],
              "properties": []
            },
            {
              "discriminantValue": "FAILED",
              "extends": [
                "type_:StateInferenceFailed"
              ],
              "properties": []
            }
          ]
        }
      },
      "type_:StateInferenceCompletedInference": {
        "name": "StateInferenceCompletedInference",
        "shape": {
          "type": "object",
          "extends": [
            "type_:CompletedInference"
          ],
          "properties": []
        }
      },
      "type_:StateInferenceFailed": {
        "name": "StateInferenceFailed",
        "shape": {
          "type": "object",
          "extends": [
            "type_:Failed"
          ],
          "properties": []
        }
      },
      "type_:StateInferenceInProgress": {
        "name": "StateInferenceInProgress",
        "shape": {
          "type": "object",
          "extends": [
            "type_:InProgress"
          ],
          "properties": []
        }
      },
      "type_:StateInferenceQueued": {
        "name": "StateInferenceQueued",
        "shape": {
          "type": "object",
          "extends": [
            "type_:Queued"
          ],
          "properties": []
        }
      },
      "type_:StateTlInference": {
        "name": "StateTlInference",
        "shape": {
          "type": "discriminatedUnion",
          "discriminant": "status",
          "variants": [
            {
              "discriminantValue": "QUEUED",
              "extends": [
                "type_:StateTlInferenceQueued"
              ],
              "properties": []
            },
            {
              "discriminantValue": "IN_PROGRESS",
              "extends": [
                "type_:StateTlInferenceInProgress"
              ],
              "properties": []
            },
            {
              "discriminantValue": "COMPLETED",
              "extends": [
                "type_:StateTlInferenceCompletedTlInference"
              ],
              "properties": []
            },
            {
              "discriminantValue": "FAILED",
              "extends": [
                "type_:StateTlInferenceFailed"
              ],
              "properties": []
            }
          ]
        }
      },
      "type_:StateTlInferenceCompletedTlInference": {
        "name": "StateTlInferenceCompletedTlInference",
        "shape": {
          "type": "object",
          "extends": [
            "type_:CompletedTlInference"
          ],
          "properties": []
        }
      },
      "type_:StateTlInferenceFailed": {
        "name": "StateTlInferenceFailed",
        "shape": {
          "type": "object",
          "extends": [
            "type_:Failed"
          ],
          "properties": []
        }
      },
      "type_:StateTlInferenceInProgress": {
        "name": "StateTlInferenceInProgress",
        "shape": {
          "type": "object",
          "extends": [
            "type_:InProgress"
          ],
          "properties": []
        }
      },
      "type_:StateTlInferenceQueued": {
        "name": "StateTlInferenceQueued",
        "shape": {
          "type": "object",
          "extends": [
            "type_:Queued"
          ],
          "properties": []
        }
      },
      "type_:StateTraining": {
        "name": "StateTraining",
        "shape": {
          "type": "discriminatedUnion",
          "discriminant": "status",
          "variants": [
            {
              "discriminantValue": "QUEUED",
              "extends": [
                "type_:StateTrainingQueued"
              ],
              "properties": []
            },
            {
              "discriminantValue": "IN_PROGRESS",
              "extends": [
                "type_:StateTrainingInProgress"
              ],
              "properties": []
            },
            {
              "discriminantValue": "COMPLETED",
              "extends": [
                "type_:StateTrainingCompletedTraining"
              ],
              "properties": []
            },
            {
              "discriminantValue": "FAILED",
              "extends": [
                "type_:StateTrainingFailed"
              ],
              "properties": []
            }
          ]
        }
      },
      "type_:StateTrainingCompletedTraining": {
        "name": "StateTrainingCompletedTraining",
        "shape": {
          "type": "object",
          "extends": [
            "type_:CompletedTraining"
          ],
          "properties": []
        }
      },
      "type_:StateTrainingFailed": {
        "name": "StateTrainingFailed",
        "shape": {
          "type": "object",
          "extends": [
            "type_:Failed"
          ],
          "properties": []
        }
      },
      "type_:StateTrainingInProgress": {
        "name": "StateTrainingInProgress",
        "shape": {
          "type": "object",
          "extends": [
            "type_:InProgress"
          ],
          "properties": []
        }
      },
      "type_:StateTrainingQueued": {
        "name": "StateTrainingQueued",
        "shape": {
          "type": "object",
          "extends": [
            "type_:Queued"
          ],
          "properties": []
        }
      },
      "type_:Status": {
        "name": "Status",
        "shape": {
          "type": "enum",
          "values": [
            {
              "value": "QUEUED"
            },
            {
              "value": "IN_PROGRESS"
            },
            {
              "value": "COMPLETED"
            },
            {
              "value": "FAILED"
            }
          ]
        }
      },
      "type_:TlInferencePrediction": {
        "name": "TlInferencePrediction",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "file",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "A file path relative to the top level source URL or file."
            },
            {
              "key": "file_type",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "key": "custom_models",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "map",
                  "keyShape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  },
                  "valueShape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:CustomModelPrediction"
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_:TlInferenceResults": {
        "name": "TlInferenceResults",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "predictions",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "list",
                  "itemShape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:TlInferencePrediction"
                    }
                  }
                }
              }
            },
            {
              "key": "errors",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "list",
                  "itemShape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:Error"
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_:TlInferenceSourcePredictResult": {
        "name": "TlInferenceSourcePredictResult",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "source",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:Source"
                }
              }
            },
            {
              "key": "results",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:TlInferenceResults"
                    }
                  }
                }
              }
            },
            {
              "key": "error",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "An error message."
            }
          ]
        }
      },
      "type_:Tag": {
        "name": "Tag",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "key",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "key": "value",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          ]
        }
      },
      "type_:Target": {
        "name": "Target",
        "shape": {
          "type": "undiscriminatedUnion",
          "variants": [
            {
              "shape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              }
            },
            {
              "shape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "double"
                  }
                }
              }
            },
            {
              "shape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          ]
        }
      },
      "type_:Task": {
        "name": "Task",
        "shape": {
          "type": "discriminatedUnion",
          "discriminant": "type",
          "variants": [
            {
              "discriminantValue": "classification",
              "extends": [
                "type_:TaskClassification"
              ],
              "properties": []
            },
            {
              "discriminantValue": "regression",
              "extends": [
                "type_:TaskRegression"
              ],
              "properties": []
            }
          ]
        }
      },
      "type_:TaskClassification": {
        "name": "TaskClassification",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": []
        }
      },
      "type_:TaskRegression": {
        "name": "TaskRegression",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": []
        }
      },
      "type_:TextSource": {
        "name": "TextSource",
        "shape": {
          "type": "alias",
          "value": {
            "type": "map",
            "keyShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "unknown"
              }
            }
          }
        }
      },
      "type_:TimeInterval": {
        "name": "TimeInterval",
        "description": "A time range with a beginning and end, measured in seconds.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "begin",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "double"
                  }
                }
              },
              "description": "Beginning of time range in seconds."
            },
            {
              "key": "end",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "double"
                  }
                }
              },
              "description": "End of time range in seconds."
            }
          ]
        }
      },
      "type_:TlInferenceBaseRequest": {
        "name": "TlInferenceBaseRequest",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "custom_model",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:CustomModel"
                }
              }
            },
            {
              "key": "urls",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "list",
                      "itemShape": {
                        "type": "alias",
                        "value": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              },
              "description": "URLs to the media files to be processed. Each must be a valid public URL to a media file (see recommended input filetypes) or an archive (`.zip`, `.tar.gz`, `.tar.bz2`, `.tar.xz`) of media files.\n\nIf you wish to supply more than 100 URLs, consider providing them as an archive (`.zip`, `.tar.gz`, `.tar.bz2`, `.tar.xz`)."
            },
            {
              "key": "registry_files",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "list",
                      "itemShape": {
                        "type": "alias",
                        "value": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              },
              "description": "List of File IDs corresponding to the files in the asset registry."
            },
            {
              "key": "callback_url",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "If provided, a `POST` request will be made to the URL with the generated predictions on completion or the error message on failure."
            },
            {
              "key": "notify",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean"
                      }
                    }
                  }
                }
              },
              "description": "Whether to send an email notification to the user upon job completion/failure."
            }
          ]
        }
      },
      "type_:CustomModel": {
        "name": "CustomModel",
        "shape": {
          "type": "undiscriminatedUnion",
          "variants": [
            {
              "displayName": "Custom Model Id",
              "shape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:CustomModelId"
                }
              }
            },
            {
              "displayName": "Custom Model Version Id",
              "shape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:CustomModelVersionId"
                }
              }
            }
          ]
        }
      },
      "type_:CustomModelId": {
        "name": "CustomModelId",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          ]
        }
      },
      "type_:CustomModelVersionId": {
        "name": "CustomModelVersionId",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "version_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          ]
        }
      },
      "type_:ToxicityScore": {
        "name": "ToxicityScore",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "name",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "Category of toxicity."
            },
            {
              "key": "score",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "Prediction for this category of toxicity"
            }
          ]
        }
      },
      "type_:TrainingBaseRequest": {
        "name": "TrainingBaseRequest",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "custom_model",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:CustomModelRequest"
                }
              }
            },
            {
              "key": "dataset",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:Dataset"
                }
              }
            },
            {
              "key": "target_feature",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string",
                        "default": "label"
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "task",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:Task"
                    }
                  }
                }
              }
            },
            {
              "key": "evaluation",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:EvaluationArgs"
                    }
                  }
                }
              }
            },
            {
              "key": "alternatives",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "list",
                      "itemShape": {
                        "type": "alias",
                        "value": {
                          "type": "id",
                          "id": "type_:Alternative"
                        }
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "callback_url",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "notify",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean"
                      }
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_:TrainingCustomModel": {
        "name": "TrainingCustomModel",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "key": "version_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_:Transcription": {
        "name": "Transcription",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "language",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:Bcp47Tag"
                    }
                  }
                }
              }
            },
            {
              "key": "identify_speakers",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean"
                      }
                    }
                  }
                }
              },
              "description": "Whether to return identifiers for speakers over time. If `true`, unique identifiers will be assigned to spoken words to differentiate different speakers. If `false`, all speakers will be tagged with an `unknown` ID."
            },
            {
              "key": "confidence_threshold",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "double",
                        "minimum": 0,
                        "maximum": 1,
                        "default": 0.5
                      }
                    }
                  }
                }
              },
              "description": "Transcript confidence threshold. Transcripts generated with a confidence less than this threshold will be considered invalid and not used as an input for model inference."
            }
          ]
        }
      },
      "type_:TranscriptionMetadata": {
        "name": "TranscriptionMetadata",
        "description": "Transcription metadata for your media file.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "confidence",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "double"
                  }
                }
              },
              "description": "Value between `0.0` and `1.0` indicating our transcription model's relative confidence in the transcription of your media file."
            },
            {
              "key": "detected_language",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:Bcp47Tag"
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_:Type": {
        "name": "Type",
        "shape": {
          "type": "enum",
          "values": [
            {
              "value": "EMBEDDING_GENERATION"
            },
            {
              "value": "INFERENCE"
            },
            {
              "value": "TL_INFERENCE"
            },
            {
              "value": "TRAINING"
            }
          ]
        }
      },
      "type_:Unconfigurable": {
        "name": "Unconfigurable",
        "description": "To include predictions for this model type, set this field to `{}`. It is currently not configurable further.",
        "shape": {
          "type": "alias",
          "value": {
            "type": "map",
            "keyShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "unknown"
              }
            }
          }
        }
      },
      "type_:UnionJob": {
        "name": "UnionJob",
        "shape": {
          "type": "discriminatedUnion",
          "discriminant": "type",
          "variants": [
            {
              "discriminantValue": "EMBEDDING_GENERATION",
              "extends": [
                "type_:UnionJobJobEmbeddingGeneration"
              ],
              "properties": []
            },
            {
              "discriminantValue": "INFERENCE",
              "extends": [
                "type_:UnionJobJobInference"
              ],
              "properties": []
            },
            {
              "discriminantValue": "TL_INFERENCE",
              "extends": [
                "type_:UnionJobJobTlInference"
              ],
              "properties": []
            },
            {
              "discriminantValue": "TRAINING",
              "extends": [
                "type_:UnionJobJobTraining"
              ],
              "properties": []
            }
          ]
        }
      },
      "type_:UnionJobJobEmbeddingGeneration": {
        "name": "UnionJobJobEmbeddingGeneration",
        "shape": {
          "type": "object",
          "extends": [
            "type_:JobEmbeddingGeneration"
          ],
          "properties": []
        }
      },
      "type_:UnionJobJobInference": {
        "name": "UnionJobJobInference",
        "shape": {
          "type": "object",
          "extends": [
            "type_:JobInference"
          ],
          "properties": []
        }
      },
      "type_:UnionJobJobTlInference": {
        "name": "UnionJobJobTlInference",
        "shape": {
          "type": "object",
          "extends": [
            "type_:JobTlInference"
          ],
          "properties": []
        }
      },
      "type_:UnionJobJobTraining": {
        "name": "UnionJobJobTraining",
        "shape": {
          "type": "object",
          "extends": [
            "type_:JobTraining"
          ],
          "properties": []
        }
      },
      "type_:UnionPredictResult": {
        "name": "UnionPredictResult",
        "shape": {
          "type": "undiscriminatedUnion",
          "variants": [
            {
              "displayName": "Inference Source Predict Result",
              "shape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:InferenceSourcePredictResult"
                }
              }
            },
            {
              "displayName": "Tl Inference Source Predict Result",
              "shape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:TlInferenceSourcePredictResult"
                }
              }
            }
          ]
        }
      },
      "type_:ValidationArgs": {
        "name": "ValidationArgs",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "positive_label",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:Target"
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_:When": {
        "name": "When",
        "shape": {
          "type": "enum",
          "values": [
            {
              "value": "created_before"
            },
            {
              "value": "created_after"
            }
          ]
        }
      },
      "type_:Window": {
        "name": "Window",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "length",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "double",
                        "minimum": 0.5,
                        "default": 4
                      }
                    }
                  }
                }
              },
              "description": "The length of the sliding window."
            },
            {
              "key": "step",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "double",
                        "minimum": 0.5,
                        "default": 1
                      }
                    }
                  }
                }
              },
              "description": "The step size of the sliding window."
            }
          ]
        }
      },
      "type_:EmotionEmbeddingItem": {
        "name": "EmotionEmbeddingItem",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "name",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "Name of the emotion being expressed."
            },
            {
              "key": "score",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  }
                }
              },
              "description": "Embedding value for the emotion being expressed."
            }
          ]
        }
      },
      "type_:EmotionEmbedding": {
        "name": "EmotionEmbedding",
        "description": "A high-dimensional embedding in emotion space.",
        "shape": {
          "type": "alias",
          "value": {
            "type": "list",
            "itemShape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:EmotionEmbeddingItem"
              }
            }
          }
        }
      },
      "type_:TimeRange": {
        "name": "TimeRange",
        "description": "A time range with a beginning and end, measured in seconds.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "begin",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "double",
                        "minimum": 0
                      }
                    }
                  }
                }
              },
              "description": "Beginning of time range in seconds."
            },
            {
              "key": "end",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "double",
                        "minimum": 0
                      }
                    }
                  }
                }
              },
              "description": "End of time range in seconds."
            }
          ]
        }
      },
      "type_:TextPosition": {
        "name": "TextPosition",
        "description": "Position of a segment of text within a larger document, measured in characters. Uses zero-based indexing. The beginning index is inclusive and the end index is exclusive.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "begin",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "double",
                        "minimum": 0
                      }
                    }
                  }
                }
              },
              "description": "The index of the first character in the text segment, inclusive."
            },
            {
              "key": "end",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "double",
                        "minimum": 0
                      }
                    }
                  }
                }
              },
              "description": "The index of the last character in the text segment, exclusive."
            }
          ]
        }
      },
      "type_:SentimentItem": {
        "name": "SentimentItem",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "name",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "Level of sentiment, ranging from 1 (negative) to 9 (positive)"
            },
            {
              "key": "score",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  }
                }
              },
              "description": "Prediction for this level of sentiment"
            }
          ]
        }
      },
      "type_:Sentiment": {
        "name": "Sentiment",
        "description": "Sentiment predictions returned as a distribution. This model predicts the probability that a given text could be interpreted as having each sentiment level from 1 (negative) to 9 (positive).\n\nCompared to returning one estimate of sentiment, this enables a more nuanced analysis of a text's meaning. For example, a text with very neutral sentiment would have an average rating of 5. But also a text that could be interpreted as having very positive sentiment or very negative sentiment would also have an average rating of 5. The average sentiment is less informative than the distribution over sentiment, so this API returns a value for each sentiment level.",
        "shape": {
          "type": "alias",
          "value": {
            "type": "list",
            "itemShape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:SentimentItem"
              }
            }
          }
        }
      },
      "type_:ToxicityItem": {
        "name": "ToxicityItem",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "name",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "Category of toxicity."
            },
            {
              "key": "score",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  }
                }
              },
              "description": "Prediction for this category of toxicity"
            }
          ]
        }
      },
      "type_:Toxicity": {
        "name": "Toxicity",
        "description": "Toxicity predictions returned as probabilities that the text can be classified into the following categories: toxic, severe_toxic, obscene, threat, insult, and identity_hate.",
        "shape": {
          "type": "alias",
          "value": {
            "type": "list",
            "itemShape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:ToxicityItem"
              }
            }
          }
        }
      }
    },
    "subpackages": {
      "subpackage_batch": {
        "id": "subpackage_batch",
        "name": "batch"
      },
      "subpackage_stream": {
        "id": "subpackage_stream",
        "name": "stream"
      }
    },
    "auths": {
      "default": {
        "type": "header",
        "headerWireValue": "X-Hume-Api-Key",
        "nameOverride": "apiKey"
      }
    }
  },
  {
    "id": "bcb7826e-ffd6-4440-b3de-6bf37440c3e2",
    "endpoints": {
      "endpoint_files.list-files": {
        "id": "endpoint_files.list-files",
        "namespace": [
          "subpackage_files"
        ],
        "description": "Returns 200 if successful",
        "method": "GET",
        "path": [
          {
            "type": "literal",
            "value": "/v0/registry/files"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.hume.ai"
          }
        ],
        "queryParameters": [
          {
            "key": "page_number",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                }
              }
            },
            "description": "Index of the first result"
          },
          {
            "key": "page_size",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                }
              }
            },
            "description": "Maximum number of results"
          },
          {
            "key": "shared_assets",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "boolean"
                    }
                  }
                }
              }
            },
            "description": "`True` Will show all assets owned by you and shared with you. `False` Will show only your assets. Default: `False`"
          }
        ],
        "response": {
          "statusCode": 200,
          "body": {
            "type": "alias",
            "value": {
              "type": "id",
              "id": "type_:FilePage"
            }
          }
        },
        "examples": [
          {
            "path": "/v0/registry/files",
            "responseStatusCode": 200,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "content": [
                  {
                    "file": {
                      "id": "id",
                      "user_id": "user_id",
                      "data_type": "data_type",
                      "is_sanitized": true,
                      "is_owned_by_reader": true
                    },
                    "attributes": [
                      {
                        "name": "name",
                        "value": "value"
                      }
                    ]
                  }
                ],
                "pageable": {
                  "offset": 1,
                  "sort": {
                    "empty": true,
                    "sorted": true,
                    "unsorted": true
                  },
                  "paged": true,
                  "unpaged": true,
                  "page_number": 1,
                  "page_size": 1
                },
                "total": 1,
                "last": true,
                "total_elements": 1,
                "total_pages": 1,
                "size": 1,
                "number": 1,
                "sort": {
                  "empty": true,
                  "sorted": true,
                  "unsorted": true
                },
                "first": true,
                "number_of_elements": 1,
                "empty": true
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl https://api.hume.ai/v0/registry/files \\\n     -H \"X-Hume-Api-Key: <apiKey>\"",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumeClient } from \"hume\";\n\nconst hume = new HumeClient({ apiKey: \"YOUR_API_KEY\" });\nawait hume.customModels.files.listFiles();\n",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "endpoint_files.create-files": {
        "id": "endpoint_files.create-files",
        "namespace": [
          "subpackage_files"
        ],
        "description": "Returns 201 if successful",
        "method": "POST",
        "path": [
          {
            "type": "literal",
            "value": "/v0/registry/files"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.hume.ai"
          }
        ],
        "request": {
          "contentType": "application/json",
          "body": {
            "type": "alias",
            "value": {
              "type": "list",
              "itemShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:FileWithAttributesInput"
                }
              }
            }
          }
        },
        "response": {
          "statusCode": 200,
          "body": {
            "type": "alias",
            "value": {
              "type": "list",
              "itemShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:FileWithAttributes"
                }
              }
            }
          }
        },
        "examples": [
          {
            "path": "/v0/registry/files",
            "responseStatusCode": 200,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": [
                {
                  "file": {
                    "name": "name",
                    "hume_storage": true,
                    "data_type": "data_type"
                  }
                }
              ]
            },
            "responseBody": {
              "type": "json",
              "value": [
                {
                  "file": {
                    "id": "id",
                    "user_id": "user_id",
                    "data_type": "data_type",
                    "is_sanitized": true,
                    "is_owned_by_reader": true,
                    "name": "name",
                    "uri": "uri",
                    "upload_uri": "upload_uri",
                    "thumbnail_uri": "thumbnail_uri",
                    "created_on": 1,
                    "modified_on": 1,
                    "metadata": {
                      "metadata": {}
                    },
                    "hume_storage": true,
                    "hume_storage_upload_timestamp": 1,
                    "is_linked_to_publicly_shared": true,
                    "is_linked_to_hume_model": true
                  },
                  "attributes": [
                    {
                      "name": "name",
                      "value": "value"
                    }
                  ]
                }
              ]
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://api.hume.ai/v0/registry/files \\\n     -H \"X-Hume-Api-Key: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '[\n  {\n    \"file\": {\n      \"name\": \"name\",\n      \"hume_storage\": true,\n      \"data_type\": \"data_type\"\n    }\n  }\n]'",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumeClient } from \"hume\";\n\nconst hume = new HumeClient({ apiKey: \"YOUR_API_KEY\" });\nawait hume.customModels.files.createFiles([{\n        file: {\n            name: \"name\",\n            humeStorage: true,\n            dataType: \"data_type\"\n        }\n    }]);\n",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "endpoint_files.upload-file": {
        "id": "endpoint_files.upload-file",
        "namespace": [
          "subpackage_files"
        ],
        "description": "Upload a file synchronously. Returns 201 if successful. Files must have a name. Files must specify Content-Type. Request bodies, and therefore files, are limited to 100MB",
        "method": "POST",
        "path": [
          {
            "type": "literal",
            "value": "/v0/registry/files/upload"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.hume.ai"
          }
        ],
        "request": {
          "contentType": "multipart/form-data",
          "body": {
            "type": "formData",
            "fields": [
              {
                "type": "file",
                "key": "file",
                "isOptional": false
              },
              {
                "type": "file",
                "key": "attributes",
                "isOptional": true
              }
            ]
          }
        },
        "response": {
          "statusCode": 200,
          "body": {
            "type": "alias",
            "value": {
              "type": "id",
              "id": "type_:FileWithAttributes"
            }
          }
        },
        "examples": [
          {
            "path": "/v0/registry/files/upload",
            "responseStatusCode": 200,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "form",
              "value": {
                "file": {
                  "type": "filename",
                  "value": "<file1>"
                },
                "attributes": {
                  "type": "filename",
                  "value": "<file1>"
                }
              }
            },
            "responseBody": {
              "type": "json",
              "value": {
                "file": {
                  "id": "id",
                  "user_id": "user_id",
                  "data_type": "data_type",
                  "is_sanitized": true,
                  "is_owned_by_reader": true,
                  "name": "name",
                  "uri": "uri",
                  "upload_uri": "upload_uri",
                  "thumbnail_uri": "thumbnail_uri",
                  "created_on": 1,
                  "modified_on": 1,
                  "metadata": {
                    "metadata": {}
                  },
                  "hume_storage": true,
                  "hume_storage_upload_timestamp": 1,
                  "is_linked_to_publicly_shared": true,
                  "is_linked_to_hume_model": true
                },
                "attributes": [
                  {
                    "name": "name",
                    "value": "value"
                  }
                ]
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://api.hume.ai/v0/registry/files/upload \\\n     -H \"X-Hume-Api-Key: <apiKey>\" \\\n     -H \"Content-Type: multipart/form-data\" \\\n     -F file=@<file1> \\\n     -F attributes=@<file1>",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumeClient } from \"hume\";\nimport * as fs from \"fs\";\n\nconst hume = new HumeClient({ apiKey: \"YOUR_API_KEY\" });\nawait hume.customModels.files.uploadFile(fs.createReadStream(\"/path/to/your/file\"), fs.createReadStream(\"/path/to/your/file\"));\n",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "endpoint_files.get-file": {
        "id": "endpoint_files.get-file",
        "namespace": [
          "subpackage_files"
        ],
        "description": "Returns 200 if successful",
        "method": "GET",
        "path": [
          {
            "type": "literal",
            "value": "/v0/registry/files/"
          },
          {
            "type": "pathParameter",
            "value": "id"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.hume.ai"
          }
        ],
        "pathParameters": [
          {
            "key": "id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "Hume-generated ID of a File"
          }
        ],
        "response": {
          "statusCode": 200,
          "body": {
            "type": "alias",
            "value": {
              "type": "id",
              "id": "type_:FileWithAttributes"
            }
          }
        },
        "examples": [
          {
            "path": "/v0/registry/files/id",
            "responseStatusCode": 200,
            "pathParameters": {
              "id": "id"
            },
            "queryParameters": {},
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "file": {
                  "id": "id",
                  "user_id": "user_id",
                  "data_type": "data_type",
                  "is_sanitized": true,
                  "is_owned_by_reader": true,
                  "name": "name",
                  "uri": "uri",
                  "upload_uri": "upload_uri",
                  "thumbnail_uri": "thumbnail_uri",
                  "created_on": 1,
                  "modified_on": 1,
                  "metadata": {
                    "metadata": {}
                  },
                  "hume_storage": true,
                  "hume_storage_upload_timestamp": 1,
                  "is_linked_to_publicly_shared": true,
                  "is_linked_to_hume_model": true
                },
                "attributes": [
                  {
                    "name": "name",
                    "value": "value"
                  }
                ]
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl https://api.hume.ai/v0/registry/files/id \\\n     -H \"X-Hume-Api-Key: <apiKey>\"",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumeClient } from \"hume\";\n\nconst hume = new HumeClient({ apiKey: \"YOUR_API_KEY\" });\nawait hume.customModels.files.getFile(\"id\");\n",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "endpoint_files.delete-file": {
        "id": "endpoint_files.delete-file",
        "namespace": [
          "subpackage_files"
        ],
        "description": "Returns 204 if successful",
        "method": "DELETE",
        "path": [
          {
            "type": "literal",
            "value": "/v0/registry/files/"
          },
          {
            "type": "pathParameter",
            "value": "id"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.hume.ai"
          }
        ],
        "pathParameters": [
          {
            "key": "id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "Hume-generated ID of a File"
          }
        ],
        "examples": [
          {
            "path": "/v0/registry/files/id",
            "responseStatusCode": 204,
            "pathParameters": {
              "id": "id"
            },
            "queryParameters": {},
            "headers": {},
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X DELETE https://api.hume.ai/v0/registry/files/id \\\n     -H \"X-Hume-Api-Key: <apiKey>\"",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumeClient } from \"hume\";\n\nconst hume = new HumeClient({ apiKey: \"YOUR_API_KEY\" });\nawait hume.customModels.files.deleteFile(\"id\");\n",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "endpoint_files.update-file-name": {
        "id": "endpoint_files.update-file-name",
        "namespace": [
          "subpackage_files"
        ],
        "description": "Returns 200 if successful",
        "method": "PATCH",
        "path": [
          {
            "type": "literal",
            "value": "/v0/registry/files/"
          },
          {
            "type": "pathParameter",
            "value": "id"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.hume.ai"
          }
        ],
        "pathParameters": [
          {
            "key": "id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "Hume-generated ID of a File"
          }
        ],
        "queryParameters": [
          {
            "key": "name",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "New File name"
          }
        ],
        "response": {
          "statusCode": 200,
          "body": {
            "type": "alias",
            "value": {
              "type": "id",
              "id": "type_:FileWithAttributes"
            }
          }
        },
        "examples": [
          {
            "path": "/v0/registry/files/id",
            "responseStatusCode": 200,
            "pathParameters": {
              "id": "id"
            },
            "queryParameters": {
              "name": "name"
            },
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "file": {
                  "id": "id",
                  "user_id": "user_id",
                  "data_type": "data_type",
                  "is_sanitized": true,
                  "is_owned_by_reader": true,
                  "name": "name",
                  "uri": "uri",
                  "upload_uri": "upload_uri",
                  "thumbnail_uri": "thumbnail_uri",
                  "created_on": 1,
                  "modified_on": 1,
                  "metadata": {
                    "metadata": {}
                  },
                  "hume_storage": true,
                  "hume_storage_upload_timestamp": 1,
                  "is_linked_to_publicly_shared": true,
                  "is_linked_to_hume_model": true
                },
                "attributes": [
                  {
                    "name": "name",
                    "value": "value"
                  }
                ]
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X PATCH \"https://api.hume.ai/v0/registry/files/id?name=name\" \\\n     -H \"X-Hume-Api-Key: <apiKey>\"",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumeClient } from \"hume\";\n\nconst hume = new HumeClient({ apiKey: \"YOUR_API_KEY\" });\nawait hume.customModels.files.updateFileName(\"id\", {\n    name: \"name\"\n});\n",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "endpoint_files.get-file-predictions": {
        "id": "endpoint_files.get-file-predictions",
        "namespace": [
          "subpackage_files"
        ],
        "description": "Returns 200 if successful",
        "method": "GET",
        "path": [
          {
            "type": "literal",
            "value": "/v0/registry/files/"
          },
          {
            "type": "pathParameter",
            "value": "id"
          },
          {
            "type": "literal",
            "value": "/predictions"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.hume.ai"
          }
        ],
        "pathParameters": [
          {
            "key": "id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "Hume-generated ID of a File"
          }
        ],
        "examples": [
          {
            "path": "/v0/registry/files/id/predictions",
            "responseStatusCode": 204,
            "pathParameters": {
              "id": "id"
            },
            "queryParameters": {},
            "headers": {},
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl https://api.hume.ai/v0/registry/files/id/predictions \\\n     -H \"X-Hume-Api-Key: <apiKey>\"",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumeClient } from \"hume\";\n\nconst hume = new HumeClient({ apiKey: \"YOUR_API_KEY\" });\nawait hume.customModels.files.getFilePredictions(\"id\");\n",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "endpoint_datasets.list-datasets": {
        "id": "endpoint_datasets.list-datasets",
        "namespace": [
          "subpackage_datasets"
        ],
        "description": "Returns 200 if successful",
        "method": "GET",
        "path": [
          {
            "type": "literal",
            "value": "/v0/registry/datasets"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.hume.ai"
          }
        ],
        "queryParameters": [
          {
            "key": "name",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "description": "Dataset name to be queried"
          },
          {
            "key": "page_number",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                }
              }
            },
            "description": "Index of the first result"
          },
          {
            "key": "page_size",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                }
              }
            },
            "description": "Maximum number of results"
          },
          {
            "key": "shared_assets",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "boolean"
                    }
                  }
                }
              }
            },
            "description": "`True` Will show all assets owned by you and shared with you. `False` Will show only your assets. Default: `False`"
          }
        ],
        "response": {
          "statusCode": 200,
          "body": {
            "type": "alias",
            "value": {
              "type": "id",
              "id": "type_:DatasetPage"
            }
          }
        },
        "examples": [
          {
            "path": "/v0/registry/datasets",
            "responseStatusCode": 200,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "content": [
                  {
                    "name": "name",
                    "id": "id",
                    "latest_version": {
                      "id": "id",
                      "user_id": "user_id",
                      "labels_file_uri": "labels_file_uri",
                      "feature_types": {
                        "feature_types": "CATEGORICAL"
                      },
                      "dataset_id": "dataset_id",
                      "dataset_version": 1,
                      "created_on": 1
                    },
                    "modified_on": 1,
                    "metadata": {
                      "metadata": {}
                    }
                  }
                ],
                "pageable": {
                  "offset": 1,
                  "sort": {
                    "empty": true,
                    "sorted": true,
                    "unsorted": true
                  },
                  "paged": true,
                  "unpaged": true,
                  "page_number": 1,
                  "page_size": 1
                },
                "total": 1,
                "last": true,
                "total_elements": 1,
                "total_pages": 1,
                "size": 1,
                "number": 1,
                "sort": {
                  "empty": true,
                  "sorted": true,
                  "unsorted": true
                },
                "first": true,
                "number_of_elements": 1,
                "empty": true
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl https://api.hume.ai/v0/registry/datasets \\\n     -H \"X-Hume-Api-Key: <apiKey>\"",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumeClient } from \"hume\";\n\nconst hume = new HumeClient({ apiKey: \"YOUR_API_KEY\" });\nawait hume.customModels.datasets.listDatasets();\n",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "endpoint_datasets.create-dataset": {
        "id": "endpoint_datasets.create-dataset",
        "namespace": [
          "subpackage_datasets"
        ],
        "description": "Returns 201 if successful",
        "method": "POST",
        "path": [
          {
            "type": "literal",
            "value": "/v0/registry/datasets"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.hume.ai"
          }
        ],
        "request": {
          "contentType": "multipart/form-data",
          "body": {
            "type": "formData",
            "fields": [
              {
                "type": "property",
                "key": "name",
                "description": "Name of the Dataset to be created",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              },
              {
                "type": "file",
                "key": "feature_types",
                "isOptional": true
              },
              {
                "type": "file",
                "key": "labels_file",
                "isOptional": false
              }
            ]
          }
        },
        "response": {
          "statusCode": 200,
          "body": {
            "type": "alias",
            "value": {
              "type": "id",
              "id": "type_:ReturnDataset"
            }
          }
        },
        "examples": [
          {
            "path": "/v0/registry/datasets",
            "responseStatusCode": 200,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "form",
              "value": {
                "name": {
                  "type": "json",
                  "value": "name"
                },
                "feature_types": {
                  "type": "filename",
                  "value": "<file1>"
                },
                "labels_file": {
                  "type": "filename",
                  "value": "<file1>"
                }
              }
            },
            "responseBody": {
              "type": "json",
              "value": {
                "name": "name",
                "id": "id",
                "latest_version": {
                  "id": "id",
                  "user_id": "user_id",
                  "labels_file_uri": "labels_file_uri",
                  "feature_types": {
                    "feature_types": "CATEGORICAL"
                  },
                  "dataset_id": "dataset_id",
                  "dataset_version": 1,
                  "created_on": 1
                },
                "modified_on": 1,
                "metadata": {
                  "metadata": {
                    "metadata": {
                      "key": "value"
                    }
                  }
                }
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://api.hume.ai/v0/registry/datasets \\\n     -H \"X-Hume-Api-Key: <apiKey>\" \\\n     -H \"Content-Type: multipart/form-data\" \\\n     -F name=\"name\" \\\n     -F feature_types=@<file1> \\\n     -F labels_file=@<file1>",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumeClient } from \"hume\";\nimport * as fs from \"fs\";\n\nconst hume = new HumeClient({ apiKey: \"YOUR_API_KEY\" });\nawait hume.customModels.datasets.createDataset(fs.createReadStream(\"/path/to/your/file\"), fs.createReadStream(\"/path/to/your/file\"), {\n    name: \"name\"\n});\n",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "endpoint_datasets.get-dataset": {
        "id": "endpoint_datasets.get-dataset",
        "namespace": [
          "subpackage_datasets"
        ],
        "description": "Returns 200 if successful",
        "method": "GET",
        "path": [
          {
            "type": "literal",
            "value": "/v0/registry/datasets/"
          },
          {
            "type": "pathParameter",
            "value": "id"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.hume.ai"
          }
        ],
        "pathParameters": [
          {
            "key": "id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "Hume-generated ID of a Dataset"
          }
        ],
        "response": {
          "statusCode": 200,
          "body": {
            "type": "alias",
            "value": {
              "type": "id",
              "id": "type_:ReturnDataset"
            }
          }
        },
        "examples": [
          {
            "path": "/v0/registry/datasets/id",
            "responseStatusCode": 200,
            "pathParameters": {
              "id": "id"
            },
            "queryParameters": {},
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "name": "name",
                "id": "id",
                "latest_version": {
                  "id": "id",
                  "user_id": "user_id",
                  "labels_file_uri": "labels_file_uri",
                  "feature_types": {
                    "feature_types": "CATEGORICAL"
                  },
                  "dataset_id": "dataset_id",
                  "dataset_version": 1,
                  "created_on": 1
                },
                "modified_on": 1,
                "metadata": {
                  "metadata": {
                    "metadata": {
                      "key": "value"
                    }
                  }
                }
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl https://api.hume.ai/v0/registry/datasets/id \\\n     -H \"X-Hume-Api-Key: <apiKey>\"",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumeClient } from \"hume\";\n\nconst hume = new HumeClient({ apiKey: \"YOUR_API_KEY\" });\nawait hume.customModels.datasets.getDataset(\"id\");\n",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "endpoint_datasets.create-dataset-version": {
        "id": "endpoint_datasets.create-dataset-version",
        "namespace": [
          "subpackage_datasets"
        ],
        "description": "Returns 200 if successful",
        "method": "POST",
        "path": [
          {
            "type": "literal",
            "value": "/v0/registry/datasets/"
          },
          {
            "type": "pathParameter",
            "value": "id"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.hume.ai"
          }
        ],
        "pathParameters": [
          {
            "key": "id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "Hume-generated ID of a Dataset"
          }
        ],
        "request": {
          "contentType": "multipart/form-data",
          "body": {
            "type": "formData",
            "fields": [
              {
                "type": "file",
                "key": "feature_types",
                "isOptional": true
              },
              {
                "type": "file",
                "key": "labels_file",
                "isOptional": false
              }
            ]
          }
        },
        "response": {
          "statusCode": 200,
          "body": {
            "type": "alias",
            "value": {
              "type": "list",
              "itemShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:ReturnDataset"
                }
              }
            }
          }
        },
        "examples": [
          {
            "path": "/v0/registry/datasets/id",
            "responseStatusCode": 200,
            "pathParameters": {
              "id": "id"
            },
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "form",
              "value": {
                "feature_types": {
                  "type": "filename",
                  "value": "<file1>"
                },
                "labels_file": {
                  "type": "filename",
                  "value": "<file1>"
                }
              }
            },
            "responseBody": {
              "type": "json",
              "value": [
                {
                  "name": "name",
                  "id": "id",
                  "latest_version": {
                    "id": "id",
                    "user_id": "user_id",
                    "labels_file_uri": "labels_file_uri",
                    "feature_types": {
                      "feature_types": "CATEGORICAL"
                    },
                    "dataset_id": "dataset_id",
                    "dataset_version": 1,
                    "created_on": 1
                  },
                  "modified_on": 1,
                  "metadata": {
                    "metadata": {}
                  }
                }
              ]
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://api.hume.ai/v0/registry/datasets/id \\\n     -H \"X-Hume-Api-Key: <apiKey>\" \\\n     -H \"Content-Type: multipart/form-data\" \\\n     -F feature_types=@<file1> \\\n     -F labels_file=@<file1>",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumeClient } from \"hume\";\nimport * as fs from \"fs\";\n\nconst hume = new HumeClient({ apiKey: \"YOUR_API_KEY\" });\nawait hume.customModels.datasets.createDatasetVersion(fs.createReadStream(\"/path/to/your/file\"), fs.createReadStream(\"/path/to/your/file\"), \"id\");\n",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "endpoint_datasets.delete-dataset": {
        "id": "endpoint_datasets.delete-dataset",
        "namespace": [
          "subpackage_datasets"
        ],
        "description": "Returns 204 if successful",
        "method": "DELETE",
        "path": [
          {
            "type": "literal",
            "value": "/v0/registry/datasets/"
          },
          {
            "type": "pathParameter",
            "value": "id"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.hume.ai"
          }
        ],
        "pathParameters": [
          {
            "key": "id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "Hume-generated ID of a Dataset"
          }
        ],
        "examples": [
          {
            "path": "/v0/registry/datasets/id",
            "responseStatusCode": 204,
            "pathParameters": {
              "id": "id"
            },
            "queryParameters": {},
            "headers": {},
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X DELETE https://api.hume.ai/v0/registry/datasets/id \\\n     -H \"X-Hume-Api-Key: <apiKey>\"",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumeClient } from \"hume\";\n\nconst hume = new HumeClient({ apiKey: \"YOUR_API_KEY\" });\nawait hume.customModels.datasets.deleteDataset(\"id\");\n",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "endpoint_datasets.list-dataset-versions": {
        "id": "endpoint_datasets.list-dataset-versions",
        "namespace": [
          "subpackage_datasets"
        ],
        "description": "Returns 200 if successful",
        "method": "GET",
        "path": [
          {
            "type": "literal",
            "value": "/v0/registry/datasets/"
          },
          {
            "type": "pathParameter",
            "value": "id"
          },
          {
            "type": "literal",
            "value": "/versions"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.hume.ai"
          }
        ],
        "pathParameters": [
          {
            "key": "id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "Hume-generated ID of a Dataset"
          }
        ],
        "queryParameters": [
          {
            "key": "page_number",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                }
              }
            },
            "description": "Index of the first result"
          },
          {
            "key": "page_size",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                }
              }
            },
            "description": "Maximum number of results"
          },
          {
            "key": "shared_assets",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "boolean"
                    }
                  }
                }
              }
            },
            "description": "`True` Will show all assets owned by you and shared with you. `False` Will show only your assets. Default: `False`"
          }
        ],
        "response": {
          "statusCode": 200,
          "body": {
            "type": "alias",
            "value": {
              "type": "id",
              "id": "type_:DatasetVersionPage"
            }
          }
        },
        "examples": [
          {
            "path": "/v0/registry/datasets/id/versions",
            "responseStatusCode": 200,
            "pathParameters": {
              "id": "id"
            },
            "queryParameters": {},
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "content": [
                  {
                    "id": "id",
                    "user_id": "user_id",
                    "labels_file_uri": "labels_file_uri",
                    "feature_types": {
                      "feature_types": "CATEGORICAL"
                    },
                    "dataset_id": "dataset_id",
                    "dataset_version": 1,
                    "created_on": 1
                  }
                ],
                "pageable": {
                  "offset": 1,
                  "sort": {
                    "empty": true,
                    "sorted": true,
                    "unsorted": true
                  },
                  "paged": true,
                  "unpaged": true,
                  "page_number": 1,
                  "page_size": 1
                },
                "total": 1,
                "last": true,
                "total_elements": 1,
                "total_pages": 1,
                "size": 1,
                "number": 1,
                "sort": {
                  "empty": true,
                  "sorted": true,
                  "unsorted": true
                },
                "first": true,
                "number_of_elements": 1,
                "empty": true
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl https://api.hume.ai/v0/registry/datasets/id/versions \\\n     -H \"X-Hume-Api-Key: <apiKey>\"",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumeClient } from \"hume\";\n\nconst hume = new HumeClient({ apiKey: \"YOUR_API_KEY\" });\nawait hume.customModels.datasets.listDatasetVersions(\"id\");\n",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "endpoint_datasets.list-dataset-files": {
        "id": "endpoint_datasets.list-dataset-files",
        "namespace": [
          "subpackage_datasets"
        ],
        "description": "Returns 200 if successful",
        "method": "GET",
        "path": [
          {
            "type": "literal",
            "value": "/v0/registry/datasets/"
          },
          {
            "type": "pathParameter",
            "value": "id"
          },
          {
            "type": "literal",
            "value": "/files"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.hume.ai"
          }
        ],
        "pathParameters": [
          {
            "key": "id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "Hume-generated ID of a Dataset"
          }
        ],
        "queryParameters": [
          {
            "key": "page_number",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                }
              }
            },
            "description": "Index of the first result"
          },
          {
            "key": "page_size",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                }
              }
            },
            "description": "Maximum number of results"
          },
          {
            "key": "shared_assets",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "boolean"
                    }
                  }
                }
              }
            },
            "description": "`True` Will show all assets owned by you and shared with you. `False` Will show only your assets. Default: `False`"
          }
        ],
        "response": {
          "statusCode": 200,
          "body": {
            "type": "alias",
            "value": {
              "type": "list",
              "itemShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:FilePage"
                }
              }
            }
          }
        },
        "examples": [
          {
            "path": "/v0/registry/datasets/id/files",
            "responseStatusCode": 200,
            "pathParameters": {
              "id": "id"
            },
            "queryParameters": {},
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": [
                {
                  "content": [
                    {
                      "file": {
                        "id": "id",
                        "user_id": "user_id",
                        "data_type": "data_type",
                        "is_sanitized": true,
                        "is_owned_by_reader": true
                      }
                    }
                  ],
                  "pageable": {
                    "offset": 1,
                    "paged": true,
                    "unpaged": true,
                    "page_number": 1,
                    "page_size": 1
                  },
                  "total": 1,
                  "last": true,
                  "total_elements": 1,
                  "total_pages": 1,
                  "size": 1,
                  "number": 1,
                  "sort": {
                    "empty": true,
                    "sorted": true,
                    "unsorted": true
                  },
                  "first": true,
                  "number_of_elements": 1,
                  "empty": true
                }
              ]
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl https://api.hume.ai/v0/registry/datasets/id/files \\\n     -H \"X-Hume-Api-Key: <apiKey>\"",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumeClient } from \"hume\";\n\nconst hume = new HumeClient({ apiKey: \"YOUR_API_KEY\" });\nawait hume.customModels.datasets.listDatasetFiles(\"id\");\n",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "endpoint_datasets.get-dataset-version": {
        "id": "endpoint_datasets.get-dataset-version",
        "namespace": [
          "subpackage_datasets"
        ],
        "description": "Returns 200 if successful",
        "method": "GET",
        "path": [
          {
            "type": "literal",
            "value": "/v0/registry/datasets/version/"
          },
          {
            "type": "pathParameter",
            "value": "id"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.hume.ai"
          }
        ],
        "pathParameters": [
          {
            "key": "id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "Hume-generated ID of a Dataset version"
          }
        ],
        "response": {
          "statusCode": 200,
          "body": {
            "type": "alias",
            "value": {
              "type": "id",
              "id": "type_:DatasetLabels"
            }
          }
        },
        "examples": [
          {
            "path": "/v0/registry/datasets/version/id",
            "responseStatusCode": 200,
            "pathParameters": {
              "id": "id"
            },
            "queryParameters": {},
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "id": "id",
                "user_id": "user_id",
                "labels_file_uri": "labels_file_uri",
                "feature_type_json_uri": "feature_type_json_uri",
                "dataset_id": "dataset_id",
                "dataset_version": 1,
                "created_on": 1,
                "is_most_recent_version": true
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl https://api.hume.ai/v0/registry/datasets/version/id \\\n     -H \"X-Hume-Api-Key: <apiKey>\"",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumeClient } from \"hume\";\n\nconst hume = new HumeClient({ apiKey: \"YOUR_API_KEY\" });\nawait hume.customModels.datasets.getDatasetVersion(\"id\");\n",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "endpoint_datasets.list-dataset-version-files": {
        "id": "endpoint_datasets.list-dataset-version-files",
        "namespace": [
          "subpackage_datasets"
        ],
        "description": "Returns 200 if successful",
        "method": "GET",
        "path": [
          {
            "type": "literal",
            "value": "/v0/registry/datasets/version/"
          },
          {
            "type": "pathParameter",
            "value": "id"
          },
          {
            "type": "literal",
            "value": "/files"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.hume.ai"
          }
        ],
        "pathParameters": [
          {
            "key": "id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "Hume-generated ID of a Dataset version"
          }
        ],
        "queryParameters": [
          {
            "key": "page_number",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                }
              }
            },
            "description": "Index of the first result"
          },
          {
            "key": "page_size",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                }
              }
            },
            "description": "Maximum number of results"
          },
          {
            "key": "shared_assets",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "boolean"
                    }
                  }
                }
              }
            },
            "description": "`True` Will show all assets owned by you and shared with you. `False` Will show only your assets. Default: `False`"
          }
        ],
        "response": {
          "statusCode": 200,
          "body": {
            "type": "alias",
            "value": {
              "type": "list",
              "itemShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:FilePage"
                }
              }
            }
          }
        },
        "examples": [
          {
            "path": "/v0/registry/datasets/version/id/files",
            "responseStatusCode": 200,
            "pathParameters": {
              "id": "id"
            },
            "queryParameters": {},
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": [
                {
                  "content": [
                    {
                      "file": {
                        "id": "id",
                        "user_id": "user_id",
                        "data_type": "data_type",
                        "is_sanitized": true,
                        "is_owned_by_reader": true
                      }
                    }
                  ],
                  "pageable": {
                    "offset": 1,
                    "paged": true,
                    "unpaged": true,
                    "page_number": 1,
                    "page_size": 1
                  },
                  "total": 1,
                  "last": true,
                  "total_elements": 1,
                  "total_pages": 1,
                  "size": 1,
                  "number": 1,
                  "sort": {
                    "empty": true,
                    "sorted": true,
                    "unsorted": true
                  },
                  "first": true,
                  "number_of_elements": 1,
                  "empty": true
                }
              ]
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl https://api.hume.ai/v0/registry/datasets/version/id/files \\\n     -H \"X-Hume-Api-Key: <apiKey>\"",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumeClient } from \"hume\";\n\nconst hume = new HumeClient({ apiKey: \"YOUR_API_KEY\" });\nawait hume.customModels.datasets.listDatasetVersionFiles(\"id\");\n",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "endpoint_models.list-models": {
        "id": "endpoint_models.list-models",
        "namespace": [
          "subpackage_models"
        ],
        "description": "Returns 200 if successful",
        "method": "GET",
        "path": [
          {
            "type": "literal",
            "value": "/v0/registry/models"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.hume.ai"
          }
        ],
        "queryParameters": [
          {
            "key": "name",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "description": "Model name to be queried"
          },
          {
            "key": "page_number",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                }
              }
            },
            "description": "Index of the first result"
          },
          {
            "key": "page_size",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                }
              }
            },
            "description": "Maximum number of results"
          },
          {
            "key": "shared_assets",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "boolean"
                    }
                  }
                }
              }
            },
            "description": "`True` Will show all assets owned by you and shared with you. `False` Will show only your assets. Default: `False`"
          }
        ],
        "response": {
          "statusCode": 200,
          "body": {
            "type": "alias",
            "value": {
              "type": "id",
              "id": "type_:ModelPage"
            }
          }
        },
        "examples": [
          {
            "path": "/v0/registry/models",
            "responseStatusCode": 200,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "content": [
                  {
                    "id": "id",
                    "name": "name",
                    "created_on": 1,
                    "modified_on": 1,
                    "total_stars": 1,
                    "model_is_starred_by_user": true,
                    "archived": true,
                    "is_publicly_shared": true,
                    "latest_version": {
                      "id": "id",
                      "model_id": "model_id",
                      "user_id": "user_id",
                      "version": "version",
                      "source_uri": "source_uri",
                      "dataset_version_id": "dataset_version_id",
                      "created_on": 1
                    }
                  }
                ],
                "pageable": {
                  "offset": 1,
                  "sort": {
                    "empty": true,
                    "sorted": true,
                    "unsorted": true
                  },
                  "paged": true,
                  "unpaged": true,
                  "page_number": 1,
                  "page_size": 1
                },
                "total": 1,
                "last": true,
                "total_elements": 1,
                "total_pages": 1,
                "size": 1,
                "number": 1,
                "sort": {
                  "empty": true,
                  "sorted": true,
                  "unsorted": true
                },
                "first": true,
                "number_of_elements": 1,
                "empty": true
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl https://api.hume.ai/v0/registry/models \\\n     -H \"X-Hume-Api-Key: <apiKey>\"",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumeClient } from \"hume\";\n\nconst hume = new HumeClient({ apiKey: \"YOUR_API_KEY\" });\nawait hume.customModels.models.listModels();\n",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "endpoint_models.get-model-details": {
        "id": "endpoint_models.get-model-details",
        "namespace": [
          "subpackage_models"
        ],
        "description": "Returns 200 if successful",
        "method": "GET",
        "path": [
          {
            "type": "literal",
            "value": "/v0/registry/models/"
          },
          {
            "type": "pathParameter",
            "value": "id"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.hume.ai"
          }
        ],
        "pathParameters": [
          {
            "key": "id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "Hume-generated ID of a Model"
          }
        ],
        "response": {
          "statusCode": 200,
          "body": {
            "type": "alias",
            "value": {
              "type": "id",
              "id": "type_:ExternalModel"
            }
          }
        },
        "examples": [
          {
            "path": "/v0/registry/models/id",
            "responseStatusCode": 200,
            "pathParameters": {
              "id": "id"
            },
            "queryParameters": {},
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "id": "id",
                "name": "name",
                "created_on": 1,
                "modified_on": 1,
                "total_stars": 1,
                "model_is_starred_by_user": true,
                "archived": true,
                "is_publicly_shared": true,
                "latest_version": {
                  "id": "id",
                  "model_id": "model_id",
                  "user_id": "user_id",
                  "version": "version",
                  "source_uri": "source_uri",
                  "dataset_version_id": "dataset_version_id",
                  "created_on": 1,
                  "metadata": {
                    "metadata": {}
                  },
                  "description": "description",
                  "tags": [
                    {
                      "key": "key",
                      "value": "value"
                    }
                  ],
                  "file_type": "video",
                  "target_feature": "target_feature",
                  "task_type": "task_type",
                  "training_job_id": "training_job_id"
                }
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl https://api.hume.ai/v0/registry/models/id \\\n     -H \"X-Hume-Api-Key: <apiKey>\"",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumeClient } from \"hume\";\n\nconst hume = new HumeClient({ apiKey: \"YOUR_API_KEY\" });\nawait hume.customModels.models.getModelDetails(\"id\");\n",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "endpoint_models.update-model-name": {
        "id": "endpoint_models.update-model-name",
        "namespace": [
          "subpackage_models"
        ],
        "description": "Returns 200 if successful",
        "method": "PATCH",
        "path": [
          {
            "type": "literal",
            "value": "/v0/registry/models/"
          },
          {
            "type": "pathParameter",
            "value": "id"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.hume.ai"
          }
        ],
        "pathParameters": [
          {
            "key": "id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "Hume-generated ID of a Model"
          }
        ],
        "queryParameters": [
          {
            "key": "name",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "New Model name"
          }
        ],
        "response": {
          "statusCode": 200,
          "body": {
            "type": "alias",
            "value": {
              "type": "id",
              "id": "type_:ExternalModel"
            }
          }
        },
        "examples": [
          {
            "path": "/v0/registry/models/id",
            "responseStatusCode": 200,
            "pathParameters": {
              "id": "id"
            },
            "queryParameters": {
              "name": "name"
            },
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "id": "id",
                "name": "name",
                "created_on": 1,
                "modified_on": 1,
                "total_stars": 1,
                "model_is_starred_by_user": true,
                "archived": true,
                "is_publicly_shared": true,
                "latest_version": {
                  "id": "id",
                  "model_id": "model_id",
                  "user_id": "user_id",
                  "version": "version",
                  "source_uri": "source_uri",
                  "dataset_version_id": "dataset_version_id",
                  "created_on": 1,
                  "metadata": {
                    "metadata": {}
                  },
                  "description": "description",
                  "tags": [
                    {
                      "key": "key",
                      "value": "value"
                    }
                  ],
                  "file_type": "video",
                  "target_feature": "target_feature",
                  "task_type": "task_type",
                  "training_job_id": "training_job_id"
                }
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X PATCH \"https://api.hume.ai/v0/registry/models/id?name=name\" \\\n     -H \"X-Hume-Api-Key: <apiKey>\"",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumeClient } from \"hume\";\n\nconst hume = new HumeClient({ apiKey: \"YOUR_API_KEY\" });\nawait hume.customModels.models.updateModelName(\"id\", {\n    name: \"name\"\n});\n",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "endpoint_models.list-model-versions": {
        "id": "endpoint_models.list-model-versions",
        "namespace": [
          "subpackage_models"
        ],
        "description": "Returns 200 if successful",
        "method": "GET",
        "path": [
          {
            "type": "literal",
            "value": "/v0/registry/models/version"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.hume.ai"
          }
        ],
        "queryParameters": [
          {
            "key": "id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "description": "Hume-generated Model Version IDs to be queried"
          },
          {
            "key": "name",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "description": "Model version name to be queried"
          },
          {
            "key": "version",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "description": "Model version number to be queried"
          },
          {
            "key": "shared_assets",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "boolean"
                    }
                  }
                }
              }
            },
            "description": "`True` Will show all assets owned by you and shared with you. `False` Will show only your assets. Default: `False`"
          }
        ],
        "response": {
          "statusCode": 200,
          "body": {
            "type": "alias",
            "value": {
              "type": "list",
              "itemShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:ExternalModelVersion"
                }
              }
            }
          }
        },
        "examples": [
          {
            "path": "/v0/registry/models/version",
            "responseStatusCode": 200,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": [
                {
                  "id": "id",
                  "model_id": "model_id",
                  "user_id": "user_id",
                  "version": "version",
                  "source_uri": "source_uri",
                  "dataset_version_id": "dataset_version_id",
                  "created_on": 1,
                  "metadata": {
                    "metadata": {}
                  },
                  "description": "description",
                  "tags": [
                    {
                      "key": "key",
                      "value": "value"
                    }
                  ],
                  "file_type": "video",
                  "target_feature": "target_feature",
                  "task_type": "task_type",
                  "training_job_id": "training_job_id"
                }
              ]
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl https://api.hume.ai/v0/registry/models/version \\\n     -H \"X-Hume-Api-Key: <apiKey>\"",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumeClient } from \"hume\";\n\nconst hume = new HumeClient({ apiKey: \"YOUR_API_KEY\" });\nawait hume.customModels.models.listModelVersions();\n",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "endpoint_models.get-model-version": {
        "id": "endpoint_models.get-model-version",
        "namespace": [
          "subpackage_models"
        ],
        "description": "Returns 200 if successful",
        "method": "GET",
        "path": [
          {
            "type": "literal",
            "value": "/v0/registry/models/version/"
          },
          {
            "type": "pathParameter",
            "value": "id"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.hume.ai"
          }
        ],
        "pathParameters": [
          {
            "key": "id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "Hume-generated ID of a Model version"
          }
        ],
        "queryParameters": [
          {
            "key": "shared_assets",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "boolean"
                    }
                  }
                }
              }
            },
            "description": "`True` Will show all assets owned by you and shared with you. `False` Will show only your assets. Default: `False`"
          }
        ],
        "response": {
          "statusCode": 200,
          "body": {
            "type": "alias",
            "value": {
              "type": "id",
              "id": "type_:ExternalModelVersion"
            }
          }
        },
        "examples": [
          {
            "path": "/v0/registry/models/version/id",
            "responseStatusCode": 200,
            "pathParameters": {
              "id": "id"
            },
            "queryParameters": {},
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "id": "id",
                "model_id": "model_id",
                "user_id": "user_id",
                "version": "version",
                "source_uri": "source_uri",
                "dataset_version_id": "dataset_version_id",
                "created_on": 1,
                "metadata": {
                  "metadata": {
                    "metadata": {
                      "key": "value"
                    }
                  }
                },
                "description": "description",
                "tags": [
                  {
                    "key": "key",
                    "value": "value"
                  }
                ],
                "file_type": "video",
                "target_feature": "target_feature",
                "task_type": "task_type",
                "training_job_id": "training_job_id"
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl https://api.hume.ai/v0/registry/models/version/id \\\n     -H \"X-Hume-Api-Key: <apiKey>\"",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumeClient } from \"hume\";\n\nconst hume = new HumeClient({ apiKey: \"YOUR_API_KEY\" });\nawait hume.customModels.models.getModelVersion(\"id\");\n",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "endpoint_models.update-model-description": {
        "id": "endpoint_models.update-model-description",
        "namespace": [
          "subpackage_models"
        ],
        "description": "Returns 200 if successful",
        "method": "PATCH",
        "path": [
          {
            "type": "literal",
            "value": "/v0/registry/models/version/"
          },
          {
            "type": "pathParameter",
            "value": "id"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.hume.ai"
          }
        ],
        "pathParameters": [
          {
            "key": "id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "Hume-generated ID of a Model Version"
          }
        ],
        "request": {
          "contentType": "application/json",
          "body": {
            "type": "alias",
            "value": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          }
        },
        "response": {
          "statusCode": 200,
          "body": {
            "type": "alias",
            "value": {
              "type": "id",
              "id": "type_:ExternalModelVersion"
            }
          }
        },
        "examples": [
          {
            "path": "/v0/registry/models/version/id",
            "responseStatusCode": 200,
            "pathParameters": {
              "id": "id"
            },
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": "string"
            },
            "responseBody": {
              "type": "json",
              "value": {
                "id": "id",
                "model_id": "model_id",
                "user_id": "user_id",
                "version": "version",
                "source_uri": "source_uri",
                "dataset_version_id": "dataset_version_id",
                "created_on": 1,
                "metadata": {
                  "metadata": {
                    "metadata": {
                      "key": "value"
                    }
                  }
                },
                "description": "description",
                "tags": [
                  {
                    "key": "key",
                    "value": "value"
                  }
                ],
                "file_type": "video",
                "target_feature": "target_feature",
                "task_type": "task_type",
                "training_job_id": "training_job_id"
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X PATCH https://api.hume.ai/v0/registry/models/version/id \\\n     -H \"X-Hume-Api-Key: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d \"string\"",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumeClient } from \"hume\";\n\nconst hume = new HumeClient({ apiKey: \"YOUR_API_KEY\" });\nawait hume.customModels.models.updateModelDescription(\"id\", \"string\");\n",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "endpoint_jobs.start-training-job": {
        "id": "endpoint_jobs.start-training-job",
        "namespace": [
          "subpackage_jobs"
        ],
        "description": "Start a new custom models training job.",
        "method": "POST",
        "path": [
          {
            "type": "literal",
            "value": "/v0/registry/v0/batch/jobs/tl/train"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.hume.ai"
          }
        ],
        "request": {
          "contentType": "application/json",
          "body": {
            "type": "alias",
            "value": {
              "type": "id",
              "id": "type_:TrainingBaseRequest"
            }
          }
        },
        "response": {
          "statusCode": 200,
          "body": {
            "type": "alias",
            "value": {
              "type": "id",
              "id": "type_:JobId"
            }
          }
        },
        "examples": [
          {
            "path": "/v0/registry/v0/batch/jobs/tl/train",
            "responseStatusCode": 200,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {
                "custom_model": {
                  "name": "name"
                },
                "dataset": {
                  "id": "id"
                }
              }
            },
            "responseBody": {
              "type": "json",
              "value": {
                "job_id": "job_id"
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://api.hume.ai/v0/registry/v0/batch/jobs/tl/train \\\n     -H \"X-Hume-Api-Key: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n  \"custom_model\": {\n    \"name\": \"name\"\n  },\n  \"dataset\": {\n    \"id\": \"id\"\n  }\n}'",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumeClient } from \"hume\";\n\nconst hume = new HumeClient({ apiKey: \"YOUR_API_KEY\" });\nawait hume.customModels.jobs.startTrainingJob({\n    customModel: {\n        name: \"name\"\n    },\n    dataset: {\n        id: \"id\"\n    }\n});\n",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "endpoint_jobs.start-custom-models-inference-job": {
        "id": "endpoint_jobs.start-custom-models-inference-job",
        "namespace": [
          "subpackage_jobs"
        ],
        "description": "Start a new custom models inference job.",
        "method": "POST",
        "path": [
          {
            "type": "literal",
            "value": "/v0/registry/v0/batch/jobs/tl/inference"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.hume.ai"
          }
        ],
        "request": {
          "contentType": "application/json",
          "body": {
            "type": "alias",
            "value": {
              "type": "id",
              "id": "type_:TlInferenceBaseRequest"
            }
          }
        },
        "response": {
          "statusCode": 200,
          "body": {
            "type": "alias",
            "value": {
              "type": "id",
              "id": "type_:JobId"
            }
          }
        },
        "examples": [
          {
            "path": "/v0/registry/v0/batch/jobs/tl/inference",
            "responseStatusCode": 200,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {
                "custom_model": {
                  "id": "id"
                }
              }
            },
            "responseBody": {
              "type": "json",
              "value": {
                "job_id": "job_id"
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://api.hume.ai/v0/registry/v0/batch/jobs/tl/inference \\\n     -H \"X-Hume-Api-Key: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n  \"custom_model\": {\n    \"id\": \"id\"\n  }\n}'",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumeClient } from \"hume\";\n\nconst hume = new HumeClient({ apiKey: \"YOUR_API_KEY\" });\nawait hume.customModels.jobs.startCustomModelsInferenceJob({\n    customModel: {\n        id: \"id\"\n    }\n});\n",
                  "generated": true
                }
              ]
            }
          }
        ]
      }
    },
    "websockets": {},
    "webhooks": {},
    "types": {
      "type_:AttributeFilter": {
        "name": "AttributeFilter",
        "description": "List of Attributes",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "name",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "Attribute name (key)"
            },
            {
              "key": "value",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "Attribute description (value)"
            }
          ]
        }
      },
      "type_:FileInput": {
        "name": "FileInput",
        "description": "File details",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "name",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "File name"
            },
            {
              "key": "uri",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "File URI"
            },
            {
              "key": "hume_storage",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "boolean"
                  }
                }
              },
              "description": "Flag which denotes whether the file is stored with Hume"
            },
            {
              "key": "data_type",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "File type: video, audio, video_no_audio, image, text, or mediapipe_facemesh"
            }
          ]
        }
      },
      "type_:FileWithAttributesInput": {
        "name": "FileWithAttributesInput",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "file",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:FileInput"
                }
              }
            },
            {
              "key": "attributes",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "list",
                      "itemShape": {
                        "type": "alias",
                        "value": {
                          "type": "id",
                          "id": "type_:AttributeFilter"
                        }
                      }
                    }
                  }
                }
              },
              "description": "List of Attributes"
            }
          ]
        }
      },
      "type_:AuthorizedFile": {
        "name": "AuthorizedFile",
        "description": "File details",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "Hume-generated File ID"
            },
            {
              "key": "name",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "File name"
            },
            {
              "key": "uri",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "File URI"
            },
            {
              "key": "upload_uri",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "File upload URI"
            },
            {
              "key": "thumbnail_uri",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "File thumbnail URI"
            },
            {
              "key": "user_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "Hume-generated User ID"
            },
            {
              "key": "data_type",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "File type: video, audio, video_no_audio, image, text, or mediapipe_facemesh"
            },
            {
              "key": "created_on",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                }
              },
              "description": "Created date and time"
            },
            {
              "key": "modified_on",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                }
              },
              "description": "Updated date and time"
            },
            {
              "key": "metadata",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "map",
                      "keyShape": {
                        "type": "alias",
                        "value": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      },
                      "valueShape": {
                        "type": "alias",
                        "value": {
                          "type": "map",
                          "keyShape": {
                            "type": "alias",
                            "value": {
                              "type": "primitive",
                              "value": {
                                "type": "string"
                              }
                            }
                          },
                          "valueShape": {
                            "type": "alias",
                            "value": {
                              "type": "unknown"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              },
              "description": "Additional details as key, value pairs"
            },
            {
              "key": "hume_storage",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean"
                      }
                    }
                  }
                }
              },
              "description": "Flag which denotes whether the file is stored with Hume"
            },
            {
              "key": "hume_storage_upload_timestamp",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                }
              },
              "description": "Timestamp denoting when the file was uploaded to Hume"
            },
            {
              "key": "is_sanitized",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "boolean"
                  }
                }
              },
              "description": "Indicates whether this file has been sanitized for sharing"
            },
            {
              "key": "is_owned_by_reader",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "boolean"
                  }
                }
              },
              "description": "Indicates whether this file is owned by the current file reader"
            },
            {
              "key": "is_linked_to_publicly_shared",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean"
                      }
                    }
                  }
                }
              },
              "description": "Indicates whether this file is linked to a model that is publicly shared"
            },
            {
              "key": "is_linked_to_hume_model",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean"
                      }
                    }
                  }
                }
              },
              "description": "Indicates whether this file is linked to a Hume-owned model that is publicly shared"
            }
          ]
        }
      },
      "type_:FileWithAttributes": {
        "name": "FileWithAttributes",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "file",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:AuthorizedFile"
                }
              }
            },
            {
              "key": "attributes",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "list",
                      "itemShape": {
                        "type": "alias",
                        "value": {
                          "type": "id",
                          "id": "type_:AttributeFilter"
                        }
                      }
                    }
                  }
                }
              },
              "description": "List of Attributes"
            }
          ]
        }
      },
      "type_:Unit": {
        "name": "Unit",
        "shape": {
          "type": "alias",
          "value": {
            "type": "map",
            "keyShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "unknown"
              }
            }
          }
        }
      },
      "type_:DatasetVersionFeatureTypesValue": {
        "name": "DatasetVersionFeatureTypesValue",
        "description": "Feature types of label mapped to feature type",
        "shape": {
          "type": "enum",
          "values": [
            {
              "value": "CATEGORICAL"
            },
            {
              "value": "NUMERIC"
            },
            {
              "value": "TEXT"
            },
            {
              "value": "DATETIME"
            },
            {
              "value": "UNDEFINED"
            }
          ]
        }
      },
      "type_:DatasetVersion": {
        "name": "DatasetVersion",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "Hume-generated Dataset version ID"
            },
            {
              "key": "user_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "Hume-generated User ID"
            },
            {
              "key": "labels_file_uri",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "Dataset Labels file URI"
            },
            {
              "key": "feature_types",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "map",
                  "keyShape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  },
                  "valueShape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:DatasetVersionFeatureTypesValue"
                    }
                  }
                }
              },
              "description": "Feature types of label mapped to feature type"
            },
            {
              "key": "dataset_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "Hume-generated Dataset ID of the parent Dataset"
            },
            {
              "key": "dataset_version",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              },
              "description": "Dataset version number"
            },
            {
              "key": "created_on",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              },
              "description": "Created date and time"
            }
          ]
        }
      },
      "type_:ReturnDataset": {
        "name": "ReturnDataset",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "Hume-generated Dataset ID"
            },
            {
              "key": "name",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "Dataset name"
            },
            {
              "key": "latest_version",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:DatasetVersion"
                    }
                  }
                }
              }
            },
            {
              "key": "modified_on",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                }
              },
              "description": "Updated date and time"
            },
            {
              "key": "metadata",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "map",
                      "keyShape": {
                        "type": "alias",
                        "value": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      },
                      "valueShape": {
                        "type": "alias",
                        "value": {
                          "type": "map",
                          "keyShape": {
                            "type": "alias",
                            "value": {
                              "type": "primitive",
                              "value": {
                                "type": "string"
                              }
                            }
                          },
                          "valueShape": {
                            "type": "alias",
                            "value": {
                              "type": "unknown"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              },
              "description": "Additional details as key, value pairs"
            }
          ]
        }
      },
      "type_:DatasetLabelsFileUriInputFeatureTypesValue": {
        "name": "DatasetLabelsFileUriInputFeatureTypesValue",
        "description": "Feature types as key, value pairs",
        "shape": {
          "type": "enum",
          "values": [
            {
              "value": "CATEGORICAL"
            },
            {
              "value": "NUMERIC"
            },
            {
              "value": "TEXT"
            },
            {
              "value": "DATETIME"
            },
            {
              "value": "UNDEFINED"
            }
          ]
        }
      },
      "type_:DatasetLabelsFileUriInput": {
        "name": "DatasetLabelsFileUriInput",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "name",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "Dataset name"
            },
            {
              "key": "labels_file_uri",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "URI of a Labels File"
            },
            {
              "key": "feature_types",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "map",
                  "keyShape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  },
                  "valueShape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:DatasetLabelsFileUriInputFeatureTypesValue"
                    }
                  }
                }
              },
              "description": "Feature types as key, value pairs"
            }
          ]
        }
      },
      "type_:ExternalModel": {
        "name": "ExternalModel",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "Hume-generated Model ID"
            },
            {
              "key": "name",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "Model name"
            },
            {
              "key": "created_on",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              },
              "description": "Created date and time"
            },
            {
              "key": "modified_on",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              },
              "description": "Updated date and time"
            },
            {
              "key": "total_stars",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              },
              "description": "Total stars on this model"
            },
            {
              "key": "model_is_starred_by_user",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "boolean"
                  }
                }
              },
              "description": "Model is starred by this user"
            },
            {
              "key": "archived",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "boolean"
                  }
                }
              },
              "description": "Model is archived."
            },
            {
              "key": "latest_version",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:ExternalModelVersion"
                    }
                  }
                }
              }
            },
            {
              "key": "is_publicly_shared",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "boolean"
                  }
                }
              },
              "description": "Model is shared publicly"
            }
          ]
        }
      },
      "type_:ExternalModelVersionFileType": {
        "name": "ExternalModelVersionFileType",
        "description": "File type: video, audio, video_no_audio, image, text, or mediapipe_facemesh",
        "shape": {
          "type": "enum",
          "values": [
            {
              "value": "video"
            },
            {
              "value": "audio"
            },
            {
              "value": "video_no_audio"
            },
            {
              "value": "image"
            },
            {
              "value": "text"
            },
            {
              "value": "mediapipe_facemesh"
            }
          ]
        }
      },
      "type_:ExternalModelVersion": {
        "name": "ExternalModelVersion",
        "description": "Latest Model version number",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "Hume-generated Model version ID"
            },
            {
              "key": "model_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "Hume-generated Model ID of the parent Model"
            },
            {
              "key": "user_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "Hume-generated User ID"
            },
            {
              "key": "version",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "Model version number"
            },
            {
              "key": "source_uri",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "Model version's source file URI"
            },
            {
              "key": "dataset_version_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "Hume-generated Dataset version ID for the Dataset version the Model version was trained on"
            },
            {
              "key": "created_on",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              },
              "description": "Created date and time"
            },
            {
              "key": "metadata",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "map",
                      "keyShape": {
                        "type": "alias",
                        "value": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      },
                      "valueShape": {
                        "type": "alias",
                        "value": {
                          "type": "map",
                          "keyShape": {
                            "type": "alias",
                            "value": {
                              "type": "primitive",
                              "value": {
                                "type": "string"
                              }
                            }
                          },
                          "valueShape": {
                            "type": "alias",
                            "value": {
                              "type": "unknown"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              },
              "description": "Additional details as key, value pairs"
            },
            {
              "key": "description",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "Model version description"
            },
            {
              "key": "tags",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "list",
                      "itemShape": {
                        "type": "alias",
                        "value": {
                          "type": "id",
                          "id": "type_:ExternalModelVersionTag"
                        }
                      }
                    }
                  }
                }
              },
              "description": "List of Tags associated with the Model version"
            },
            {
              "key": "file_type",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:ExternalModelVersionFileType"
                    }
                  }
                }
              },
              "description": "File type: video, audio, video_no_audio, image, text, or mediapipe_facemesh"
            },
            {
              "key": "target_feature",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "Target feature, the feature the model was trained against"
            },
            {
              "key": "task_type",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "Type of the task used to train"
            },
            {
              "key": "training_job_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "ID of the batch training job"
            }
          ]
        }
      },
      "type_:ExternalModelVersionTag": {
        "name": "ExternalModelVersionTag",
        "description": "List of Tags associated with the Model version",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "key",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "Tag name (key)"
            },
            {
              "key": "value",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "Tag description (value)"
            }
          ]
        }
      },
      "type_:ModelPage": {
        "name": "ModelPage",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "content",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "list",
                      "itemShape": {
                        "type": "alias",
                        "value": {
                          "type": "id",
                          "id": "type_:ExternalModel"
                        }
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "pageable",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:PageableObject"
                    }
                  }
                }
              }
            },
            {
              "key": "total",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "last",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean"
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "total_elements",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "total_pages",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "size",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "number",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "sort",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:SortObject"
                    }
                  }
                }
              }
            },
            {
              "key": "first",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean"
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "number_of_elements",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "empty",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean"
                      }
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_:PageableObject": {
        "name": "PageableObject",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "offset",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "sort",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:SortObject"
                    }
                  }
                }
              }
            },
            {
              "key": "paged",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean"
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "unpaged",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean"
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "page_number",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "page_size",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_:SortObject": {
        "name": "SortObject",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "empty",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean"
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "sorted",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean"
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "unsorted",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean"
                      }
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_:JsonObject": {
        "name": "JsonObject",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "empty",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean"
                      }
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_:FilePage": {
        "name": "FilePage",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "content",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "list",
                      "itemShape": {
                        "type": "alias",
                        "value": {
                          "type": "id",
                          "id": "type_:FileWithAttributes"
                        }
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "pageable",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:PageableObject"
                    }
                  }
                }
              }
            },
            {
              "key": "total",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "last",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean"
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "total_elements",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "total_pages",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "size",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "number",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "sort",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:SortObject"
                    }
                  }
                }
              }
            },
            {
              "key": "first",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean"
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "number_of_elements",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "empty",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean"
                      }
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_:DatasetPage": {
        "name": "DatasetPage",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "content",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "list",
                      "itemShape": {
                        "type": "alias",
                        "value": {
                          "type": "id",
                          "id": "type_:ReturnDataset"
                        }
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "pageable",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:PageableObject"
                    }
                  }
                }
              }
            },
            {
              "key": "total",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "last",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean"
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "total_elements",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "total_pages",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "size",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "number",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "sort",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:SortObject"
                    }
                  }
                }
              }
            },
            {
              "key": "first",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean"
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "number_of_elements",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "empty",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean"
                      }
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_:DatasetVersionPage": {
        "name": "DatasetVersionPage",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "content",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "list",
                      "itemShape": {
                        "type": "alias",
                        "value": {
                          "type": "id",
                          "id": "type_:DatasetVersion"
                        }
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "pageable",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:PageableObject"
                    }
                  }
                }
              }
            },
            {
              "key": "total",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "last",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean"
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "total_elements",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "total_pages",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "size",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "number",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "sort",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:SortObject"
                    }
                  }
                }
              }
            },
            {
              "key": "first",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean"
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "number_of_elements",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "empty",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean"
                      }
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_:DatasetLabels": {
        "name": "DatasetLabels",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "Hume-generated Dataset version ID"
            },
            {
              "key": "user_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "Hume-generated User ID"
            },
            {
              "key": "labels_file_uri",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "Dataset Labels file URI"
            },
            {
              "key": "feature_type_json_uri",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "Feature types json file URI"
            },
            {
              "key": "dataset_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "Hume-generated Dataset ID"
            },
            {
              "key": "dataset_version",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              },
              "description": "Dataset version number"
            },
            {
              "key": "created_on",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              },
              "description": "Created date and time"
            },
            {
              "key": "is_most_recent_version",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "boolean"
                  }
                }
              },
              "description": "Boolean indicating that this is the most recent version"
            }
          ]
        }
      },
      "type_:Alternative": {
        "name": "Alternative",
        "shape": {
          "type": "alias",
          "value": {
            "type": "literal",
            "value": {
              "type": "stringLiteral",
              "value": "language_only"
            }
          }
        }
      },
      "type_:Bcp47Tag": {
        "name": "Bcp47Tag",
        "shape": {
          "type": "enum",
          "values": [
            {
              "value": "zh"
            },
            {
              "value": "da"
            },
            {
              "value": "nl"
            },
            {
              "value": "en"
            },
            {
              "value": "en-AU"
            },
            {
              "value": "en-IN"
            },
            {
              "value": "en-NZ"
            },
            {
              "value": "en-GB"
            },
            {
              "value": "fr"
            },
            {
              "value": "fr-CA"
            },
            {
              "value": "de"
            },
            {
              "value": "hi"
            },
            {
              "value": "hi-Latn"
            },
            {
              "value": "id"
            },
            {
              "value": "it"
            },
            {
              "value": "ja"
            },
            {
              "value": "ko"
            },
            {
              "value": "no"
            },
            {
              "value": "pl"
            },
            {
              "value": "pt"
            },
            {
              "value": "pt-BR"
            },
            {
              "value": "pt-PT"
            },
            {
              "value": "ru"
            },
            {
              "value": "es"
            },
            {
              "value": "es-419"
            },
            {
              "value": "sv"
            },
            {
              "value": "ta"
            },
            {
              "value": "tr"
            },
            {
              "value": "uk"
            }
          ]
        }
      },
      "type_:BoundingBox": {
        "name": "BoundingBox",
        "description": "A bounding box around a face.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "x",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "double"
                  }
                }
              },
              "description": "x-coordinate of bounding box top left corner."
            },
            {
              "key": "y",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "double"
                  }
                }
              },
              "description": "y-coordinate of bounding box top left corner."
            },
            {
              "key": "w",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "double"
                  }
                }
              },
              "description": "Bounding box width."
            },
            {
              "key": "h",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "double"
                  }
                }
              },
              "description": "Bounding box height."
            }
          ]
        }
      },
      "type_:BurstPrediction": {
        "name": "BurstPrediction",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "time",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:TimeInterval"
                }
              }
            },
            {
              "key": "emotions",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "list",
                  "itemShape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:EmotionScore"
                    }
                  }
                }
              },
              "description": "A high-dimensional embedding in emotion space."
            },
            {
              "key": "descriptions",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "list",
                  "itemShape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:DescriptionsScore"
                    }
                  }
                }
              },
              "description": "Modality-specific descriptive features and their scores."
            }
          ]
        }
      },
      "type_:Classification": {
        "name": "Classification",
        "shape": {
          "type": "alias",
          "value": {
            "type": "map",
            "keyShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "unknown"
              }
            }
          }
        }
      },
      "type_:CompletedEmbeddingGeneration": {
        "name": "CompletedEmbeddingGeneration",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "created_timestamp_ms",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              },
              "description": "When this job was created (Unix timestamp in milliseconds)."
            },
            {
              "key": "started_timestamp_ms",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              },
              "description": "When this job started (Unix timestamp in milliseconds)."
            },
            {
              "key": "ended_timestamp_ms",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              },
              "description": "When this job ended (Unix timestamp in milliseconds)."
            }
          ]
        }
      },
      "type_:CompletedInference": {
        "name": "CompletedInference",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "created_timestamp_ms",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              },
              "description": "When this job was created (Unix timestamp in milliseconds)."
            },
            {
              "key": "started_timestamp_ms",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              },
              "description": "When this job started (Unix timestamp in milliseconds)."
            },
            {
              "key": "ended_timestamp_ms",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              },
              "description": "When this job ended (Unix timestamp in milliseconds)."
            },
            {
              "key": "num_predictions",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              },
              "description": "The number of predictions that were generated by this job."
            },
            {
              "key": "num_errors",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              },
              "description": "The number of errors that occurred while running this job."
            }
          ]
        }
      },
      "type_:CompletedTlInference": {
        "name": "CompletedTlInference",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "created_timestamp_ms",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              },
              "description": "When this job was created (Unix timestamp in milliseconds)."
            },
            {
              "key": "started_timestamp_ms",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              },
              "description": "When this job started (Unix timestamp in milliseconds)."
            },
            {
              "key": "ended_timestamp_ms",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              },
              "description": "When this job ended (Unix timestamp in milliseconds)."
            },
            {
              "key": "num_predictions",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              },
              "description": "The number of predictions that were generated by this job."
            },
            {
              "key": "num_errors",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              },
              "description": "The number of errors that occurred while running this job."
            }
          ]
        }
      },
      "type_:CompletedTraining": {
        "name": "CompletedTraining",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "created_timestamp_ms",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              },
              "description": "When this job was created (Unix timestamp in milliseconds)."
            },
            {
              "key": "started_timestamp_ms",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              },
              "description": "When this job started (Unix timestamp in milliseconds)."
            },
            {
              "key": "ended_timestamp_ms",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              },
              "description": "When this job ended (Unix timestamp in milliseconds)."
            },
            {
              "key": "custom_model",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:TrainingCustomModel"
                }
              }
            },
            {
              "key": "alternatives",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "map",
                      "keyShape": {
                        "type": "alias",
                        "value": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      },
                      "valueShape": {
                        "type": "alias",
                        "value": {
                          "type": "id",
                          "id": "type_:TrainingCustomModel"
                        }
                      }
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_:CustomModelPrediction": {
        "name": "CustomModelPrediction",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "output",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "map",
                  "keyShape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  },
                  "valueShape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "error",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "key": "task_type",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          ]
        }
      },
      "type_:CustomModelRequest": {
        "name": "CustomModelRequest",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "name",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "key": "description",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "tags",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "list",
                      "itemShape": {
                        "type": "alias",
                        "value": {
                          "type": "id",
                          "id": "type_:Tag"
                        }
                      }
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_:Dataset": {
        "name": "Dataset",
        "shape": {
          "type": "undiscriminatedUnion",
          "variants": [
            {
              "displayName": "Dataset Id",
              "shape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:DatasetId"
                }
              }
            },
            {
              "displayName": "Dataset Version Id",
              "shape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:DatasetVersionId"
                }
              }
            }
          ]
        }
      },
      "type_:DatasetId": {
        "name": "DatasetId",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          ]
        }
      },
      "type_:DatasetVersionId": {
        "name": "DatasetVersionId",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "version_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          ]
        }
      },
      "type_:DescriptionsScore": {
        "name": "DescriptionsScore",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "name",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "Name of the descriptive feature being expressed."
            },
            {
              "key": "score",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "Embedding value for the descriptive feature being expressed."
            }
          ]
        }
      },
      "type_:Direction": {
        "name": "Direction",
        "shape": {
          "type": "enum",
          "values": [
            {
              "value": "asc"
            },
            {
              "value": "desc"
            }
          ]
        }
      },
      "type_:EmbeddingGenerationBaseRequest": {
        "name": "EmbeddingGenerationBaseRequest",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "registry_file_details",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "list",
                      "itemShape": {
                        "type": "alias",
                        "value": {
                          "type": "id",
                          "id": "type_:RegistryFileDetail"
                        }
                      }
                    }
                  }
                }
              },
              "description": "File ID and File URL pairs for an asset registry file"
            }
          ]
        }
      },
      "type_:EmotionScore": {
        "name": "EmotionScore",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "name",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "Name of the emotion being expressed."
            },
            {
              "key": "score",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "double"
                  }
                }
              },
              "description": "Embedding value for the emotion being expressed."
            }
          ]
        }
      },
      "type_:Error": {
        "name": "Error",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "message",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "An error message."
            },
            {
              "key": "file",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "A file path relative to the top level source URL or file."
            }
          ]
        }
      },
      "type_:EvaluationArgs": {
        "name": "EvaluationArgs",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "validation",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:ValidationArgs"
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_:Face": {
        "name": "Face",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "fps_pred",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "double",
                        "default": 3
                      }
                    }
                  }
                }
              },
              "description": "Number of frames per second to process. Other frames will be omitted from the response. Set to `0` to process every frame."
            },
            {
              "key": "prob_threshold",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "double",
                        "minimum": 0,
                        "maximum": 1,
                        "default": 0.99
                      }
                    }
                  }
                }
              },
              "description": "Face detection probability threshold. Faces detected with a probability less than this threshold will be omitted from the response."
            },
            {
              "key": "identify_faces",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean"
                      }
                    }
                  }
                }
              },
              "description": "Whether to return identifiers for faces across frames. If `true`, unique identifiers will be assigned to face bounding boxes to differentiate different faces. If `false`, all faces will be tagged with an `unknown` ID."
            },
            {
              "key": "min_face_size",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "integer",
                        "minimum": 10,
                        "default": 60
                      }
                    }
                  }
                }
              },
              "description": "Minimum bounding box side length in pixels to treat as a face. Faces detected with a bounding box side length in pixels less than this threshold will be omitted from the response."
            },
            {
              "key": "facs",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:Unconfigurable"
                    }
                  }
                }
              }
            },
            {
              "key": "descriptions",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:Unconfigurable"
                    }
                  }
                }
              }
            },
            {
              "key": "save_faces",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean"
                      }
                    }
                  }
                }
              },
              "description": "Whether to extract and save the detected faces in the artifacts zip created by each job."
            }
          ]
        }
      },
      "type_:FacePrediction": {
        "name": "FacePrediction",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "frame",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              },
              "description": "Frame number"
            },
            {
              "key": "time",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "double"
                  }
                }
              },
              "description": "Time in seconds when face detection occurred."
            },
            {
              "key": "prob",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "double"
                  }
                }
              },
              "description": "The predicted probability that a detected face was actually a face."
            },
            {
              "key": "box",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:BoundingBox"
                }
              }
            },
            {
              "key": "emotions",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "list",
                  "itemShape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:EmotionScore"
                    }
                  }
                }
              },
              "description": "A high-dimensional embedding in emotion space."
            },
            {
              "key": "facs",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "list",
                      "itemShape": {
                        "type": "alias",
                        "value": {
                          "type": "id",
                          "id": "type_:FacsScore"
                        }
                      }
                    }
                  }
                }
              },
              "description": "FACS 2.0 features and their scores."
            },
            {
              "key": "descriptions",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "list",
                      "itemShape": {
                        "type": "alias",
                        "value": {
                          "type": "id",
                          "id": "type_:DescriptionsScore"
                        }
                      }
                    }
                  }
                }
              },
              "description": "Modality-specific descriptive features and their scores."
            }
          ]
        }
      },
      "type_:FacemeshPrediction": {
        "name": "FacemeshPrediction",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "emotions",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "list",
                  "itemShape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:EmotionScore"
                    }
                  }
                }
              },
              "description": "A high-dimensional embedding in emotion space."
            }
          ]
        }
      },
      "type_:FacsScore": {
        "name": "FacsScore",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "name",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "Name of the FACS 2.0 feature being expressed."
            },
            {
              "key": "score",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "Embedding value for the FACS 2.0 feature being expressed."
            }
          ]
        }
      },
      "type_:Failed": {
        "name": "Failed",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "created_timestamp_ms",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              },
              "description": "When this job was created (Unix timestamp in milliseconds)."
            },
            {
              "key": "started_timestamp_ms",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              },
              "description": "When this job started (Unix timestamp in milliseconds)."
            },
            {
              "key": "ended_timestamp_ms",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              },
              "description": "When this job ended (Unix timestamp in milliseconds)."
            },
            {
              "key": "message",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "An error message."
            }
          ]
        }
      },
      "type_:File": {
        "name": "File",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "filename",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "The name of the file."
            },
            {
              "key": "content_type",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "The content type of the file."
            },
            {
              "key": "md5sum",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "The MD5 checksum of the file."
            }
          ]
        }
      },
      "type_:Granularity": {
        "name": "Granularity",
        "description": "The granularity at which to generate predictions. `utterance` corresponds to a natural pause or break in conversation, while `conversational_turn` corresponds to a change in speaker.",
        "shape": {
          "type": "enum",
          "values": [
            {
              "value": "word"
            },
            {
              "value": "sentence"
            },
            {
              "value": "utterance"
            },
            {
              "value": "conversational_turn"
            }
          ]
        }
      },
      "type_:GroupedPredictionsBurstPrediction": {
        "name": "GroupedPredictionsBurstPrediction",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "An automatically generated label to identify individuals in your media file. Will be `unknown` if you have chosen to disable identification, or if the model is unable to distinguish between individuals."
            },
            {
              "key": "predictions",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "list",
                  "itemShape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:BurstPrediction"
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_:GroupedPredictionsFacePrediction": {
        "name": "GroupedPredictionsFacePrediction",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "An automatically generated label to identify individuals in your media file. Will be `unknown` if you have chosen to disable identification, or if the model is unable to distinguish between individuals."
            },
            {
              "key": "predictions",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "list",
                  "itemShape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:FacePrediction"
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_:GroupedPredictionsFacemeshPrediction": {
        "name": "GroupedPredictionsFacemeshPrediction",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "An automatically generated label to identify individuals in your media file. Will be `unknown` if you have chosen to disable identification, or if the model is unable to distinguish between individuals."
            },
            {
              "key": "predictions",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "list",
                  "itemShape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:FacemeshPrediction"
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_:GroupedPredictionsLanguagePrediction": {
        "name": "GroupedPredictionsLanguagePrediction",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "An automatically generated label to identify individuals in your media file. Will be `unknown` if you have chosen to disable identification, or if the model is unable to distinguish between individuals."
            },
            {
              "key": "predictions",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "list",
                  "itemShape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:LanguagePrediction"
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_:GroupedPredictionsNerPrediction": {
        "name": "GroupedPredictionsNerPrediction",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "An automatically generated label to identify individuals in your media file. Will be `unknown` if you have chosen to disable identification, or if the model is unable to distinguish between individuals."
            },
            {
              "key": "predictions",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "list",
                  "itemShape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:NerPrediction"
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_:GroupedPredictionsProsodyPrediction": {
        "name": "GroupedPredictionsProsodyPrediction",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "An automatically generated label to identify individuals in your media file. Will be `unknown` if you have chosen to disable identification, or if the model is unable to distinguish between individuals."
            },
            {
              "key": "predictions",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "list",
                  "itemShape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:ProsodyPrediction"
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_:InProgress": {
        "name": "InProgress",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "created_timestamp_ms",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              },
              "description": "When this job was created (Unix timestamp in milliseconds)."
            },
            {
              "key": "started_timestamp_ms",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              },
              "description": "When this job started (Unix timestamp in milliseconds)."
            }
          ]
        }
      },
      "type_:InferenceBaseRequest": {
        "name": "InferenceBaseRequest",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "models",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:Models"
                    }
                  }
                }
              }
            },
            {
              "key": "transcription",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:Transcription"
                    }
                  }
                }
              }
            },
            {
              "key": "urls",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "list",
                      "itemShape": {
                        "type": "alias",
                        "value": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              },
              "description": "URLs to the media files to be processed. Each must be a valid public URL to a media file (see recommended input filetypes) or an archive (`.zip`, `.tar.gz`, `.tar.bz2`, `.tar.xz`) of media files.\n\nIf you wish to supply more than 100 URLs, consider providing them as an archive (`.zip`, `.tar.gz`, `.tar.bz2`, `.tar.xz`)."
            },
            {
              "key": "registry_files",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "list",
                      "itemShape": {
                        "type": "alias",
                        "value": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              },
              "description": "List of File IDs corresponding to the files in the asset registry."
            },
            {
              "key": "text",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "list",
                      "itemShape": {
                        "type": "alias",
                        "value": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              },
              "description": "Text to supply directly to our language and NER models."
            },
            {
              "key": "callback_url",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "If provided, a `POST` request will be made to the URL with the generated predictions on completion or the error message on failure."
            },
            {
              "key": "notify",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean"
                      }
                    }
                  }
                }
              },
              "description": "Whether to send an email notification to the user upon job completion/failure."
            }
          ]
        }
      },
      "type_:InferencePrediction": {
        "name": "InferencePrediction",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "file",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "A file path relative to the top level source URL or file."
            },
            {
              "key": "models",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:ModelsPredictions"
                }
              }
            }
          ]
        }
      },
      "type_:InferenceRequest": {
        "name": "InferenceRequest",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "models",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:Models"
                    }
                  }
                }
              }
            },
            {
              "key": "transcription",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:Transcription"
                    }
                  }
                }
              }
            },
            {
              "key": "urls",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "list",
                      "itemShape": {
                        "type": "alias",
                        "value": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              },
              "description": "URLs to the media files to be processed. Each must be a valid public URL to a media file (see recommended input filetypes) or an archive (`.zip`, `.tar.gz`, `.tar.bz2`, `.tar.xz`) of media files.\n\nIf you wish to supply more than 100 URLs, consider providing them as an archive (`.zip`, `.tar.gz`, `.tar.bz2`, `.tar.xz`)."
            },
            {
              "key": "registry_files",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "list",
                      "itemShape": {
                        "type": "alias",
                        "value": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              },
              "description": "List of File IDs corresponding to the files in the asset registry."
            },
            {
              "key": "text",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "list",
                      "itemShape": {
                        "type": "alias",
                        "value": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              },
              "description": "Text to supply directly to our language and NER models."
            },
            {
              "key": "callback_url",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "If provided, a `POST` request will be made to the URL with the generated predictions on completion or the error message on failure."
            },
            {
              "key": "notify",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean"
                      }
                    }
                  }
                }
              },
              "description": "Whether to send an email notification to the user upon job completion/failure."
            },
            {
              "key": "files",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "list",
                  "itemShape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:File"
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_:InferenceResults": {
        "name": "InferenceResults",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "predictions",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "list",
                  "itemShape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:InferencePrediction"
                    }
                  }
                }
              }
            },
            {
              "key": "errors",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "list",
                  "itemShape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:Error"
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_:InferenceSourcePredictResult": {
        "name": "InferenceSourcePredictResult",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "source",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:Source"
                }
              }
            },
            {
              "key": "results",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:InferenceResults"
                    }
                  }
                }
              }
            },
            {
              "key": "error",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "An error message."
            }
          ]
        }
      },
      "type_:JobEmbeddingGeneration": {
        "name": "JobEmbeddingGeneration",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "job_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "The ID associated with this job."
            },
            {
              "key": "user_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "key": "request",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:EmbeddingGenerationBaseRequest"
                }
              }
            },
            {
              "key": "state",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:StateEmbeddingGeneration"
                }
              }
            }
          ]
        }
      },
      "type_:JobInference": {
        "name": "JobInference",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "job_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "The ID associated with this job."
            },
            {
              "key": "user_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "key": "request",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:InferenceRequest"
                }
              }
            },
            {
              "key": "state",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:StateInference"
                }
              }
            }
          ]
        }
      },
      "type_:JobTlInference": {
        "name": "JobTlInference",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "job_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "The ID associated with this job."
            },
            {
              "key": "user_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "key": "request",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:TlInferenceBaseRequest"
                }
              }
            },
            {
              "key": "state",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:StateTlInference"
                }
              }
            }
          ]
        }
      },
      "type_:JobTraining": {
        "name": "JobTraining",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "job_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "The ID associated with this job."
            },
            {
              "key": "user_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "key": "request",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:TrainingBaseRequest"
                }
              }
            },
            {
              "key": "state",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:StateTraining"
                }
              }
            }
          ]
        }
      },
      "type_:JobId": {
        "name": "JobId",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "job_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "The ID of the started job."
            }
          ]
        }
      },
      "type_:Language": {
        "name": "Language",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "granularity",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:Granularity"
                    }
                  }
                }
              }
            },
            {
              "key": "sentiment",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:Unconfigurable"
                    }
                  }
                }
              }
            },
            {
              "key": "toxicity",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:Unconfigurable"
                    }
                  }
                }
              }
            },
            {
              "key": "identify_speakers",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean"
                      }
                    }
                  }
                }
              },
              "description": "Whether to return identifiers for speakers over time. If `true`, unique identifiers will be assigned to spoken words to differentiate different speakers. If `false`, all speakers will be tagged with an `unknown` ID."
            }
          ]
        }
      },
      "type_:LanguagePrediction": {
        "name": "LanguagePrediction",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "text",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "A segment of text (like a word or a sentence)."
            },
            {
              "key": "position",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:PositionInterval"
                }
              }
            },
            {
              "key": "time",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:TimeInterval"
                    }
                  }
                }
              }
            },
            {
              "key": "confidence",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  }
                }
              },
              "description": "Value between `0.0` and `1.0` that indicates our transcription model's relative confidence in this text."
            },
            {
              "key": "speaker_confidence",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  }
                }
              },
              "description": "Value between `0.0` and `1.0` that indicates our transcription model's relative confidence that this text was spoken by this speaker."
            },
            {
              "key": "emotions",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "list",
                  "itemShape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:EmotionScore"
                    }
                  }
                }
              },
              "description": "A high-dimensional embedding in emotion space."
            },
            {
              "key": "sentiment",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "list",
                      "itemShape": {
                        "type": "alias",
                        "value": {
                          "type": "id",
                          "id": "type_:SentimentScore"
                        }
                      }
                    }
                  }
                }
              },
              "description": "Sentiment predictions returned as a distribution. This model predicts the probability that a given text could be interpreted as having each sentiment level from `1` (negative) to `9` (positive).\n\nCompared to returning one estimate of sentiment, this enables a more nuanced analysis of a text's meaning. For example, a text with very neutral sentiment would have an average rating of `5`. But also a text that could be interpreted as having very positive sentiment or very negative sentiment would also have an average rating of `5`. The average sentiment is less informative than the distribution over sentiment, so this API returns a value for each sentiment level."
            },
            {
              "key": "toxicity",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "list",
                      "itemShape": {
                        "type": "alias",
                        "value": {
                          "type": "id",
                          "id": "type_:ToxicityScore"
                        }
                      }
                    }
                  }
                }
              },
              "description": "Toxicity predictions returned as probabilities that the text can be classified into the following categories: `toxic`, `severe_toxic`, `obscene`, `threat`, `insult`, and `identity_hate`."
            }
          ]
        }
      },
      "type_:Models": {
        "name": "Models",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "face",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:Face"
                    }
                  }
                }
              }
            },
            {
              "key": "burst",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:Unconfigurable"
                    }
                  }
                }
              }
            },
            {
              "key": "prosody",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:Prosody"
                    }
                  }
                }
              }
            },
            {
              "key": "language",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:Language"
                    }
                  }
                }
              }
            },
            {
              "key": "ner",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:Ner"
                    }
                  }
                }
              }
            },
            {
              "key": "facemesh",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:Unconfigurable"
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_:ModelsPredictions": {
        "name": "ModelsPredictions",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "face",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:PredictionsOptionalNullFacePrediction"
                    }
                  }
                }
              }
            },
            {
              "key": "burst",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:PredictionsOptionalNullBurstPrediction"
                    }
                  }
                }
              }
            },
            {
              "key": "prosody",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:PredictionsOptionalTranscriptionMetadataProsodyPrediction"
                    }
                  }
                }
              }
            },
            {
              "key": "language",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:PredictionsOptionalTranscriptionMetadataLanguagePrediction"
                    }
                  }
                }
              }
            },
            {
              "key": "ner",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:PredictionsOptionalTranscriptionMetadataNerPrediction"
                    }
                  }
                }
              }
            },
            {
              "key": "facemesh",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:PredictionsOptionalNullFacemeshPrediction"
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_:Ner": {
        "name": "Ner",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "identify_speakers",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean"
                      }
                    }
                  }
                }
              },
              "description": "Whether to return identifiers for speakers over time. If `true`, unique identifiers will be assigned to spoken words to differentiate different speakers. If `false`, all speakers will be tagged with an `unknown` ID."
            }
          ]
        }
      },
      "type_:NerPrediction": {
        "name": "NerPrediction",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "entity",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "The recognized topic or entity."
            },
            {
              "key": "position",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:PositionInterval"
                }
              }
            },
            {
              "key": "entity_confidence",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "double"
                  }
                }
              },
              "description": "Our NER model's relative confidence in the recognized topic or entity."
            },
            {
              "key": "support",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "double"
                  }
                }
              },
              "description": "A measure of how often the entity is linked to by other entities."
            },
            {
              "key": "uri",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "A URL which provides more information about the recognized topic or entity."
            },
            {
              "key": "link_word",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "The specific word to which the emotion predictions are linked."
            },
            {
              "key": "time",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:TimeInterval"
                    }
                  }
                }
              }
            },
            {
              "key": "confidence",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  }
                }
              },
              "description": "Value between `0.0` and `1.0` that indicates our transcription model's relative confidence in this text."
            },
            {
              "key": "speaker_confidence",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  }
                }
              },
              "description": "Value between `0.0` and `1.0` that indicates our transcription model's relative confidence that this text was spoken by this speaker."
            },
            {
              "key": "emotions",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "list",
                  "itemShape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:EmotionScore"
                    }
                  }
                }
              },
              "description": "A high-dimensional embedding in emotion space."
            }
          ]
        }
      },
      "type_:Null": {
        "name": "Null",
        "description": "No associated metadata for this model. Value will be `null`.",
        "shape": {
          "type": "alias",
          "value": {
            "type": "map",
            "keyShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "unknown"
              }
            }
          }
        }
      },
      "type_:PositionInterval": {
        "name": "PositionInterval",
        "description": "Position of a segment of text within a larger document, measured in characters. Uses zero-based indexing. The beginning index is inclusive and the end index is exclusive.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "begin",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              },
              "description": "The index of the first character in the text segment, inclusive."
            },
            {
              "key": "end",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              },
              "description": "The index of the last character in the text segment, exclusive."
            }
          ]
        }
      },
      "type_:PredictionsOptionalNullBurstPrediction": {
        "name": "PredictionsOptionalNullBurstPrediction",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "metadata",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:Null"
                    }
                  }
                }
              }
            },
            {
              "key": "grouped_predictions",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "list",
                  "itemShape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:GroupedPredictionsBurstPrediction"
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_:PredictionsOptionalNullFacePrediction": {
        "name": "PredictionsOptionalNullFacePrediction",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "metadata",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:Null"
                    }
                  }
                }
              }
            },
            {
              "key": "grouped_predictions",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "list",
                  "itemShape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:GroupedPredictionsFacePrediction"
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_:PredictionsOptionalNullFacemeshPrediction": {
        "name": "PredictionsOptionalNullFacemeshPrediction",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "metadata",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:Null"
                    }
                  }
                }
              }
            },
            {
              "key": "grouped_predictions",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "list",
                  "itemShape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:GroupedPredictionsFacemeshPrediction"
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_:PredictionsOptionalTranscriptionMetadataLanguagePrediction": {
        "name": "PredictionsOptionalTranscriptionMetadataLanguagePrediction",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "metadata",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:TranscriptionMetadata"
                    }
                  }
                }
              }
            },
            {
              "key": "grouped_predictions",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "list",
                  "itemShape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:GroupedPredictionsLanguagePrediction"
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_:PredictionsOptionalTranscriptionMetadataNerPrediction": {
        "name": "PredictionsOptionalTranscriptionMetadataNerPrediction",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "metadata",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:TranscriptionMetadata"
                    }
                  }
                }
              }
            },
            {
              "key": "grouped_predictions",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "list",
                  "itemShape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:GroupedPredictionsNerPrediction"
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_:PredictionsOptionalTranscriptionMetadataProsodyPrediction": {
        "name": "PredictionsOptionalTranscriptionMetadataProsodyPrediction",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "metadata",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:TranscriptionMetadata"
                    }
                  }
                }
              }
            },
            {
              "key": "grouped_predictions",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "list",
                  "itemShape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:GroupedPredictionsProsodyPrediction"
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_:Prosody": {
        "name": "Prosody",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "granularity",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:Granularity"
                    }
                  }
                }
              }
            },
            {
              "key": "window",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:Window"
                    }
                  }
                }
              }
            },
            {
              "key": "identify_speakers",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean"
                      }
                    }
                  }
                }
              },
              "description": "Whether to return identifiers for speakers over time. If `true`, unique identifiers will be assigned to spoken words to differentiate different speakers. If `false`, all speakers will be tagged with an `unknown` ID."
            }
          ]
        }
      },
      "type_:ProsodyPrediction": {
        "name": "ProsodyPrediction",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "text",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "A segment of text (like a word or a sentence)."
            },
            {
              "key": "time",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:TimeInterval"
                }
              }
            },
            {
              "key": "confidence",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  }
                }
              },
              "description": "Value between `0.0` and `1.0` that indicates our transcription model's relative confidence in this text."
            },
            {
              "key": "speaker_confidence",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  }
                }
              },
              "description": "Value between `0.0` and `1.0` that indicates our transcription model's relative confidence that this text was spoken by this speaker."
            },
            {
              "key": "emotions",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "list",
                  "itemShape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:EmotionScore"
                    }
                  }
                }
              },
              "description": "A high-dimensional embedding in emotion space."
            }
          ]
        }
      },
      "type_:Queued": {
        "name": "Queued",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "created_timestamp_ms",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              },
              "description": "When this job was created (Unix timestamp in milliseconds)."
            }
          ]
        }
      },
      "type_:RegistryFileDetail": {
        "name": "RegistryFileDetail",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "file_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "File ID in the Asset Registry"
            },
            {
              "key": "file_url",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "URL to the file in the Asset Registry"
            }
          ]
        }
      },
      "type_:Regression": {
        "name": "Regression",
        "shape": {
          "type": "alias",
          "value": {
            "type": "map",
            "keyShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "unknown"
              }
            }
          }
        }
      },
      "type_:SentimentScore": {
        "name": "SentimentScore",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "name",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "Level of sentiment, ranging from `1` (negative) to `9` (positive)"
            },
            {
              "key": "score",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "Prediction for this level of sentiment"
            }
          ]
        }
      },
      "type_:SortBy": {
        "name": "SortBy",
        "shape": {
          "type": "enum",
          "values": [
            {
              "value": "created"
            },
            {
              "value": "started"
            },
            {
              "value": "ended"
            }
          ]
        }
      },
      "type_:Source": {
        "name": "Source",
        "shape": {
          "type": "discriminatedUnion",
          "discriminant": "type",
          "variants": [
            {
              "discriminantValue": "url",
              "extends": [
                "type_:SourceUrl"
              ],
              "properties": []
            },
            {
              "discriminantValue": "file",
              "extends": [
                "type_:SourceFile"
              ],
              "properties": []
            },
            {
              "discriminantValue": "text",
              "extends": [
                "type_:SourceTextSource"
              ],
              "properties": []
            }
          ]
        }
      },
      "type_:SourceFile": {
        "name": "SourceFile",
        "shape": {
          "type": "object",
          "extends": [
            "type_:File"
          ],
          "properties": []
        }
      },
      "type_:SourceTextSource": {
        "name": "SourceTextSource",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": []
        }
      },
      "type_:SourceUrl": {
        "name": "SourceUrl",
        "shape": {
          "type": "object",
          "extends": [
            "type_:Url"
          ],
          "properties": []
        }
      },
      "type_:Url": {
        "name": "Url",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "url",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "The URL of the source media file."
            }
          ]
        }
      },
      "type_:StateEmbeddingGeneration": {
        "name": "StateEmbeddingGeneration",
        "shape": {
          "type": "discriminatedUnion",
          "discriminant": "status",
          "variants": [
            {
              "discriminantValue": "QUEUED",
              "extends": [
                "type_:StateEmbeddingGenerationQueued"
              ],
              "properties": []
            },
            {
              "discriminantValue": "IN_PROGRESS",
              "extends": [
                "type_:StateEmbeddingGenerationInProgress"
              ],
              "properties": []
            },
            {
              "discriminantValue": "COMPLETED",
              "extends": [
                "type_:StateEmbeddingGenerationCompletedEmbeddingGeneration"
              ],
              "properties": []
            },
            {
              "discriminantValue": "FAILED",
              "extends": [
                "type_:StateEmbeddingGenerationFailed"
              ],
              "properties": []
            }
          ]
        }
      },
      "type_:StateEmbeddingGenerationCompletedEmbeddingGeneration": {
        "name": "StateEmbeddingGenerationCompletedEmbeddingGeneration",
        "shape": {
          "type": "object",
          "extends": [
            "type_:CompletedEmbeddingGeneration"
          ],
          "properties": []
        }
      },
      "type_:StateEmbeddingGenerationFailed": {
        "name": "StateEmbeddingGenerationFailed",
        "shape": {
          "type": "object",
          "extends": [
            "type_:Failed"
          ],
          "properties": []
        }
      },
      "type_:StateEmbeddingGenerationInProgress": {
        "name": "StateEmbeddingGenerationInProgress",
        "shape": {
          "type": "object",
          "extends": [
            "type_:InProgress"
          ],
          "properties": []
        }
      },
      "type_:StateEmbeddingGenerationQueued": {
        "name": "StateEmbeddingGenerationQueued",
        "shape": {
          "type": "object",
          "extends": [
            "type_:Queued"
          ],
          "properties": []
        }
      },
      "type_:StateInference": {
        "name": "StateInference",
        "shape": {
          "type": "discriminatedUnion",
          "discriminant": "status",
          "variants": [
            {
              "discriminantValue": "QUEUED",
              "extends": [
                "type_:StateInferenceQueued"
              ],
              "properties": []
            },
            {
              "discriminantValue": "IN_PROGRESS",
              "extends": [
                "type_:StateInferenceInProgress"
              ],
              "properties": []
            },
            {
              "discriminantValue": "COMPLETED",
              "extends": [
                "type_:StateInferenceCompletedInference"
              ],
              "properties": []
            },
            {
              "discriminantValue": "FAILED",
              "extends": [
                "type_:StateInferenceFailed"
              ],
              "properties": []
            }
          ]
        }
      },
      "type_:StateInferenceCompletedInference": {
        "name": "StateInferenceCompletedInference",
        "shape": {
          "type": "object",
          "extends": [
            "type_:CompletedInference"
          ],
          "properties": []
        }
      },
      "type_:StateInferenceFailed": {
        "name": "StateInferenceFailed",
        "shape": {
          "type": "object",
          "extends": [
            "type_:Failed"
          ],
          "properties": []
        }
      },
      "type_:StateInferenceInProgress": {
        "name": "StateInferenceInProgress",
        "shape": {
          "type": "object",
          "extends": [
            "type_:InProgress"
          ],
          "properties": []
        }
      },
      "type_:StateInferenceQueued": {
        "name": "StateInferenceQueued",
        "shape": {
          "type": "object",
          "extends": [
            "type_:Queued"
          ],
          "properties": []
        }
      },
      "type_:StateTlInference": {
        "name": "StateTlInference",
        "shape": {
          "type": "discriminatedUnion",
          "discriminant": "status",
          "variants": [
            {
              "discriminantValue": "QUEUED",
              "extends": [
                "type_:StateTlInferenceQueued"
              ],
              "properties": []
            },
            {
              "discriminantValue": "IN_PROGRESS",
              "extends": [
                "type_:StateTlInferenceInProgress"
              ],
              "properties": []
            },
            {
              "discriminantValue": "COMPLETED",
              "extends": [
                "type_:StateTlInferenceCompletedTlInference"
              ],
              "properties": []
            },
            {
              "discriminantValue": "FAILED",
              "extends": [
                "type_:StateTlInferenceFailed"
              ],
              "properties": []
            }
          ]
        }
      },
      "type_:StateTlInferenceCompletedTlInference": {
        "name": "StateTlInferenceCompletedTlInference",
        "shape": {
          "type": "object",
          "extends": [
            "type_:CompletedTlInference"
          ],
          "properties": []
        }
      },
      "type_:StateTlInferenceFailed": {
        "name": "StateTlInferenceFailed",
        "shape": {
          "type": "object",
          "extends": [
            "type_:Failed"
          ],
          "properties": []
        }
      },
      "type_:StateTlInferenceInProgress": {
        "name": "StateTlInferenceInProgress",
        "shape": {
          "type": "object",
          "extends": [
            "type_:InProgress"
          ],
          "properties": []
        }
      },
      "type_:StateTlInferenceQueued": {
        "name": "StateTlInferenceQueued",
        "shape": {
          "type": "object",
          "extends": [
            "type_:Queued"
          ],
          "properties": []
        }
      },
      "type_:StateTraining": {
        "name": "StateTraining",
        "shape": {
          "type": "discriminatedUnion",
          "discriminant": "status",
          "variants": [
            {
              "discriminantValue": "QUEUED",
              "extends": [
                "type_:StateTrainingQueued"
              ],
              "properties": []
            },
            {
              "discriminantValue": "IN_PROGRESS",
              "extends": [
                "type_:StateTrainingInProgress"
              ],
              "properties": []
            },
            {
              "discriminantValue": "COMPLETED",
              "extends": [
                "type_:StateTrainingCompletedTraining"
              ],
              "properties": []
            },
            {
              "discriminantValue": "FAILED",
              "extends": [
                "type_:StateTrainingFailed"
              ],
              "properties": []
            }
          ]
        }
      },
      "type_:StateTrainingCompletedTraining": {
        "name": "StateTrainingCompletedTraining",
        "shape": {
          "type": "object",
          "extends": [
            "type_:CompletedTraining"
          ],
          "properties": []
        }
      },
      "type_:StateTrainingFailed": {
        "name": "StateTrainingFailed",
        "shape": {
          "type": "object",
          "extends": [
            "type_:Failed"
          ],
          "properties": []
        }
      },
      "type_:StateTrainingInProgress": {
        "name": "StateTrainingInProgress",
        "shape": {
          "type": "object",
          "extends": [
            "type_:InProgress"
          ],
          "properties": []
        }
      },
      "type_:StateTrainingQueued": {
        "name": "StateTrainingQueued",
        "shape": {
          "type": "object",
          "extends": [
            "type_:Queued"
          ],
          "properties": []
        }
      },
      "type_:Status": {
        "name": "Status",
        "shape": {
          "type": "enum",
          "values": [
            {
              "value": "QUEUED"
            },
            {
              "value": "IN_PROGRESS"
            },
            {
              "value": "COMPLETED"
            },
            {
              "value": "FAILED"
            }
          ]
        }
      },
      "type_:TlInferencePrediction": {
        "name": "TlInferencePrediction",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "file",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "A file path relative to the top level source URL or file."
            },
            {
              "key": "file_type",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "key": "custom_models",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "map",
                  "keyShape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  },
                  "valueShape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:CustomModelPrediction"
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_:TlInferenceResults": {
        "name": "TlInferenceResults",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "predictions",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "list",
                  "itemShape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:TlInferencePrediction"
                    }
                  }
                }
              }
            },
            {
              "key": "errors",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "list",
                  "itemShape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:Error"
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_:TlInferenceSourcePredictResult": {
        "name": "TlInferenceSourcePredictResult",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "source",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:Source"
                }
              }
            },
            {
              "key": "results",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:TlInferenceResults"
                    }
                  }
                }
              }
            },
            {
              "key": "error",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "An error message."
            }
          ]
        }
      },
      "type_:Tag": {
        "name": "Tag",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "key",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "key": "value",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          ]
        }
      },
      "type_:Target": {
        "name": "Target",
        "shape": {
          "type": "undiscriminatedUnion",
          "variants": [
            {
              "shape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              }
            },
            {
              "shape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "double"
                  }
                }
              }
            },
            {
              "shape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          ]
        }
      },
      "type_:Task": {
        "name": "Task",
        "shape": {
          "type": "discriminatedUnion",
          "discriminant": "type",
          "variants": [
            {
              "discriminantValue": "classification",
              "extends": [
                "type_:TaskClassification"
              ],
              "properties": []
            },
            {
              "discriminantValue": "regression",
              "extends": [
                "type_:TaskRegression"
              ],
              "properties": []
            }
          ]
        }
      },
      "type_:TaskClassification": {
        "name": "TaskClassification",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": []
        }
      },
      "type_:TaskRegression": {
        "name": "TaskRegression",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": []
        }
      },
      "type_:TextSource": {
        "name": "TextSource",
        "shape": {
          "type": "alias",
          "value": {
            "type": "map",
            "keyShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "unknown"
              }
            }
          }
        }
      },
      "type_:TimeInterval": {
        "name": "TimeInterval",
        "description": "A time range with a beginning and end, measured in seconds.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "begin",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "double"
                  }
                }
              },
              "description": "Beginning of time range in seconds."
            },
            {
              "key": "end",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "double"
                  }
                }
              },
              "description": "End of time range in seconds."
            }
          ]
        }
      },
      "type_:TlInferenceBaseRequest": {
        "name": "TlInferenceBaseRequest",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "custom_model",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:CustomModel"
                }
              }
            },
            {
              "key": "urls",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "list",
                      "itemShape": {
                        "type": "alias",
                        "value": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              },
              "description": "URLs to the media files to be processed. Each must be a valid public URL to a media file (see recommended input filetypes) or an archive (`.zip`, `.tar.gz`, `.tar.bz2`, `.tar.xz`) of media files.\n\nIf you wish to supply more than 100 URLs, consider providing them as an archive (`.zip`, `.tar.gz`, `.tar.bz2`, `.tar.xz`)."
            },
            {
              "key": "registry_files",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "list",
                      "itemShape": {
                        "type": "alias",
                        "value": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              },
              "description": "List of File IDs corresponding to the files in the asset registry."
            },
            {
              "key": "callback_url",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "If provided, a `POST` request will be made to the URL with the generated predictions on completion or the error message on failure."
            },
            {
              "key": "notify",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean"
                      }
                    }
                  }
                }
              },
              "description": "Whether to send an email notification to the user upon job completion/failure."
            }
          ]
        }
      },
      "type_:CustomModel": {
        "name": "CustomModel",
        "shape": {
          "type": "undiscriminatedUnion",
          "variants": [
            {
              "displayName": "Custom Model Id",
              "shape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:CustomModelId"
                }
              }
            },
            {
              "displayName": "Custom Model Version Id",
              "shape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:CustomModelVersionId"
                }
              }
            }
          ]
        }
      },
      "type_:CustomModelId": {
        "name": "CustomModelId",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          ]
        }
      },
      "type_:CustomModelVersionId": {
        "name": "CustomModelVersionId",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "version_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          ]
        }
      },
      "type_:ToxicityScore": {
        "name": "ToxicityScore",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "name",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "Category of toxicity."
            },
            {
              "key": "score",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "Prediction for this category of toxicity"
            }
          ]
        }
      },
      "type_:TrainingBaseRequest": {
        "name": "TrainingBaseRequest",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "custom_model",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:CustomModelRequest"
                }
              }
            },
            {
              "key": "dataset",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:Dataset"
                }
              }
            },
            {
              "key": "target_feature",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string",
                        "default": "label"
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "task",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:Task"
                    }
                  }
                }
              }
            },
            {
              "key": "evaluation",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:EvaluationArgs"
                    }
                  }
                }
              }
            },
            {
              "key": "alternatives",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "list",
                      "itemShape": {
                        "type": "alias",
                        "value": {
                          "type": "id",
                          "id": "type_:Alternative"
                        }
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "callback_url",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "notify",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean"
                      }
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_:TrainingCustomModel": {
        "name": "TrainingCustomModel",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "key": "version_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_:Transcription": {
        "name": "Transcription",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "language",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:Bcp47Tag"
                    }
                  }
                }
              }
            },
            {
              "key": "identify_speakers",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean"
                      }
                    }
                  }
                }
              },
              "description": "Whether to return identifiers for speakers over time. If `true`, unique identifiers will be assigned to spoken words to differentiate different speakers. If `false`, all speakers will be tagged with an `unknown` ID."
            },
            {
              "key": "confidence_threshold",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "double",
                        "minimum": 0,
                        "maximum": 1,
                        "default": 0.5
                      }
                    }
                  }
                }
              },
              "description": "Transcript confidence threshold. Transcripts generated with a confidence less than this threshold will be considered invalid and not used as an input for model inference."
            }
          ]
        }
      },
      "type_:TranscriptionMetadata": {
        "name": "TranscriptionMetadata",
        "description": "Transcription metadata for your media file.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "confidence",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "double"
                  }
                }
              },
              "description": "Value between `0.0` and `1.0` indicating our transcription model's relative confidence in the transcription of your media file."
            },
            {
              "key": "detected_language",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:Bcp47Tag"
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_:Type": {
        "name": "Type",
        "shape": {
          "type": "enum",
          "values": [
            {
              "value": "EMBEDDING_GENERATION"
            },
            {
              "value": "INFERENCE"
            },
            {
              "value": "TL_INFERENCE"
            },
            {
              "value": "TRAINING"
            }
          ]
        }
      },
      "type_:Unconfigurable": {
        "name": "Unconfigurable",
        "description": "To include predictions for this model type, set this field to `{}`. It is currently not configurable further.",
        "shape": {
          "type": "alias",
          "value": {
            "type": "map",
            "keyShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "unknown"
              }
            }
          }
        }
      },
      "type_:UnionJob": {
        "name": "UnionJob",
        "shape": {
          "type": "discriminatedUnion",
          "discriminant": "type",
          "variants": [
            {
              "discriminantValue": "EMBEDDING_GENERATION",
              "extends": [
                "type_:UnionJobJobEmbeddingGeneration"
              ],
              "properties": []
            },
            {
              "discriminantValue": "INFERENCE",
              "extends": [
                "type_:UnionJobJobInference"
              ],
              "properties": []
            },
            {
              "discriminantValue": "TL_INFERENCE",
              "extends": [
                "type_:UnionJobJobTlInference"
              ],
              "properties": []
            },
            {
              "discriminantValue": "TRAINING",
              "extends": [
                "type_:UnionJobJobTraining"
              ],
              "properties": []
            }
          ]
        }
      },
      "type_:UnionJobJobEmbeddingGeneration": {
        "name": "UnionJobJobEmbeddingGeneration",
        "shape": {
          "type": "object",
          "extends": [
            "type_:JobEmbeddingGeneration"
          ],
          "properties": []
        }
      },
      "type_:UnionJobJobInference": {
        "name": "UnionJobJobInference",
        "shape": {
          "type": "object",
          "extends": [
            "type_:JobInference"
          ],
          "properties": []
        }
      },
      "type_:UnionJobJobTlInference": {
        "name": "UnionJobJobTlInference",
        "shape": {
          "type": "object",
          "extends": [
            "type_:JobTlInference"
          ],
          "properties": []
        }
      },
      "type_:UnionJobJobTraining": {
        "name": "UnionJobJobTraining",
        "shape": {
          "type": "object",
          "extends": [
            "type_:JobTraining"
          ],
          "properties": []
        }
      },
      "type_:UnionPredictResult": {
        "name": "UnionPredictResult",
        "shape": {
          "type": "undiscriminatedUnion",
          "variants": [
            {
              "displayName": "Inference Source Predict Result",
              "shape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:InferenceSourcePredictResult"
                }
              }
            },
            {
              "displayName": "Tl Inference Source Predict Result",
              "shape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:TlInferenceSourcePredictResult"
                }
              }
            }
          ]
        }
      },
      "type_:ValidationArgs": {
        "name": "ValidationArgs",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "positive_label",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:Target"
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_:When": {
        "name": "When",
        "shape": {
          "type": "enum",
          "values": [
            {
              "value": "created_before"
            },
            {
              "value": "created_after"
            }
          ]
        }
      },
      "type_:Window": {
        "name": "Window",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "length",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "double",
                        "minimum": 0.5,
                        "default": 4
                      }
                    }
                  }
                }
              },
              "description": "The length of the sliding window."
            },
            {
              "key": "step",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "double",
                        "minimum": 0.5,
                        "default": 1
                      }
                    }
                  }
                }
              },
              "description": "The step size of the sliding window."
            }
          ]
        }
      }
    },
    "subpackages": {
      "subpackage_files": {
        "id": "subpackage_files",
        "name": "files"
      },
      "subpackage_datasets": {
        "id": "subpackage_datasets",
        "name": "datasets"
      },
      "subpackage_models": {
        "id": "subpackage_models",
        "name": "models"
      },
      "subpackage_jobs": {
        "id": "subpackage_jobs",
        "name": "jobs"
      }
    },
    "auths": {
      "default": {
        "type": "header",
        "headerWireValue": "X-Hume-Api-Key",
        "nameOverride": "apiKey"
      }
    }
  },
  {
    "id": "8b03e44c-d4e2-4613-a138-e25b8c65c3cb",
    "endpoints": {
      "endpoint_tools.list-tools": {
        "id": "endpoint_tools.list-tools",
        "namespace": [
          "subpackage_tools"
        ],
        "method": "GET",
        "path": [
          {
            "type": "literal",
            "value": "/v0/evi/tools"
          }
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.hume.ai"
          }
        ],
        "queryParameters": [
          {
            "key": "page_number",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                }
              }
            },
            "description": "The page number of the results to return."
          },
          {
            "key": "page_size",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                }
              }
            },
            "description": "The maximum number of results to include per page."
          },
          {
            "key": "restrict_to_most_recent",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "boolean"
                    }
                  }
                }
              }
            },
            "description": "Only include the most recent version of each tool in the list."
          }
        ],
        "response": {
          "statusCode": 200,
          "body": {
            "type": "alias",
            "value": {
              "type": "id",
              "id": "type_:ReturnPagedUserDefinedTools"
            }
          }
        },
        "examples": [
          {
            "path": "/v0/evi/tools",
            "responseStatusCode": 200,
            "pathParameters": {},
            "queryParameters": {
              "page_number": 0,
              "page_size": 2
            },
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "page_number": 0,
                "page_size": 2,
                "tools_page": [
                  {
                    "tool_type": "FUNCTION",
                    "id": "d20827af-5d8d-4f66-b6b9-ce2e3e1ea2b2",
                    "version": 0,
                    "version_type": "FIXED",
                    "name": "get_current_location",
                    "created_on": 1715267200693,
                    "modified_on": 1715267200693,
                    "parameters": "{ \"type\": \"object\", \"properties\": { \"location\": { \"type\": \"string\", \"description\": \"The city and state, e.g. San Francisco, CA\" }}, \"required\": [\"location\"] }",
                    "version_description": "Fetches user's current location.",
                    "fallback_content": "Unable to fetch location.",
                    "description": "Fetches user's current location."
                  },
                  {
                    "tool_type": "FUNCTION",
                    "id": "4442f3ea-9038-40e3-a2ce-1522b7de770f",
                    "version": 0,
                    "version_type": "FIXED",
                    "name": "get_current_weather",
                    "created_on": 1715266126705,
                    "modified_on": 1715266126705,
                    "parameters": "{ \"type\": \"object\", \"properties\": { \"location\": { \"type\": \"string\", \"description\": \"The city and state, e.g. San Francisco, CA\" }, \"format\": { \"type\": \"string\", \"enum\": [\"celsius\", \"fahrenheit\"], \"description\": \"The temperature unit to use. Infer this from the users location.\" } }, \"required\": [\"location\", \"format\"] }",
                    "version_description": "Fetches current weather and uses celsius or fahrenheit based on location of user.",
                    "fallback_content": "Unable to fetch location.",
                    "description": "Fetches current weather and uses celsius or fahrenheit based on location of user."
                  }
                ]
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -G https://api.hume.ai/v0/evi/tools \\\n     -d page_number=0 \\\n     -d page_size=2",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumeClient } from \"hume\";\n\nconst hume = new HumeClient({ apiKey: \"YOUR_API_KEY\" });\nawait hume.empathicVoice.tools.listTools({\n    pageNumber: 0,\n    pageSize: 2\n});\n",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "endpoint_tools.create-tool": {
        "id": "endpoint_tools.create-tool",
        "namespace": [
          "subpackage_tools"
        ],
        "method": "POST",
        "path": [
          {
            "type": "literal",
            "value": "/v0/evi/tools"
          }
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.hume.ai"
          }
        ],
        "request": {
          "contentType": "application/json",
          "body": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "name",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                "description": "Name applied to all versions of a particular Tool."
              },
              {
                "key": "version_description",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "description": "Description that is appended to a specific version of a Tool."
              },
              {
                "key": "description",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "description": "Text describing what the tool does."
              },
              {
                "key": "parameters",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                "description": "Stringified JSON defining the parameters used by this version of the Tool."
              },
              {
                "key": "fallback_content",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "description": "Text to use if the tool fails to generate content."
              }
            ]
          }
        },
        "response": {
          "statusCode": 200,
          "body": {
            "type": "alias",
            "value": {
              "type": "optional",
              "shape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:ReturnUserDefinedTool"
                }
              }
            }
          }
        },
        "examples": [
          {
            "path": "/v0/evi/tools",
            "responseStatusCode": 200,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {
                "name": "get_current_weather",
                "parameters": "{ \"type\": \"object\", \"properties\": { \"location\": { \"type\": \"string\", \"description\": \"The city and state, e.g. San Francisco, CA\" }, \"format\": { \"type\": \"string\", \"enum\": [\"celsius\", \"fahrenheit\"], \"description\": \"The temperature unit to use. Infer this from the users location.\" } }, \"required\": [\"location\", \"format\"] }",
                "version_description": "Fetches current weather and uses celsius or fahrenheit based on location of user.",
                "description": "This tool is for getting the current weather.",
                "fallback_content": "Unable to fetch current weather."
              }
            },
            "responseBody": {
              "type": "json",
              "value": {
                "tool_type": "FUNCTION",
                "id": "aa9b71c4-723c-47ff-9f83-1a1829e74376",
                "version": 0,
                "version_type": "FIXED",
                "name": "get_current_weather",
                "created_on": 1715275452390,
                "modified_on": 1715275452390,
                "parameters": "{ \"type\": \"object\", \"properties\": { \"location\": { \"type\": \"string\", \"description\": \"The city and state, e.g. San Francisco, CA\" }, \"format\": { \"type\": \"string\", \"enum\": [\"celsius\", \"fahrenheit\"], \"description\": \"The temperature unit to use. Infer this from the users location.\" } }, \"required\": [\"location\", \"format\"] }",
                "version_description": "Fetches current weather and uses celsius or fahrenheit based on location of user.",
                "fallback_content": "Unable to fetch current weather.",
                "description": "This tool is for getting the current weather."
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://api.hume.ai/v0/evi/tools \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n  \"name\": \"get_current_weather\",\n  \"parameters\": \"{ \\\"type\\\": \\\"object\\\", \\\"properties\\\": { \\\"location\\\": { \\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"The city and state, e.g. San Francisco, CA\\\" }, \\\"format\\\": { \\\"type\\\": \\\"string\\\", \\\"enum\\\": [\\\"celsius\\\", \\\"fahrenheit\\\"], \\\"description\\\": \\\"The temperature unit to use. Infer this from the users location.\\\" } }, \\\"required\\\": [\\\"location\\\", \\\"format\\\"] }\",\n  \"version_description\": \"Fetches current weather and uses celsius or fahrenheit based on location of user.\",\n  \"description\": \"This tool is for getting the current weather.\",\n  \"fallback_content\": \"Unable to fetch current weather.\"\n}'",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumeClient } from \"hume\";\n\nconst hume = new HumeClient({ apiKey: \"YOUR_API_KEY\" });\nawait hume.empathicVoice.tools.createTool({\n    name: \"get_current_weather\",\n    parameters: \"{ \\\"type\\\": \\\"object\\\", \\\"properties\\\": { \\\"location\\\": { \\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"The city and state, e.g. San Francisco, CA\\\" }, \\\"format\\\": { \\\"type\\\": \\\"string\\\", \\\"enum\\\": [\\\"celsius\\\", \\\"fahrenheit\\\"], \\\"description\\\": \\\"The temperature unit to use. Infer this from the users location.\\\" } }, \\\"required\\\": [\\\"location\\\", \\\"format\\\"] }\",\n    versionDescription: \"Fetches current weather and uses celsius or fahrenheit based on location of user.\",\n    description: \"This tool is for getting the current weather.\",\n    fallbackContent: \"Unable to fetch current weather.\"\n});\n",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "endpoint_tools.list-tool-versions": {
        "id": "endpoint_tools.list-tool-versions",
        "namespace": [
          "subpackage_tools"
        ],
        "method": "GET",
        "path": [
          {
            "type": "literal",
            "value": "/v0/evi/tools/"
          },
          {
            "type": "pathParameter",
            "value": "id"
          }
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.hume.ai"
          }
        ],
        "pathParameters": [
          {
            "key": "id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "Identifier for a tool. Formatted as a UUID."
          }
        ],
        "queryParameters": [
          {
            "key": "page_number",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                }
              }
            },
            "description": "The page number of the results to return."
          },
          {
            "key": "page_size",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                }
              }
            },
            "description": "The maximum number of results to include per page."
          },
          {
            "key": "restrict_to_most_recent",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "boolean"
                    }
                  }
                }
              }
            },
            "description": "Only include the most recent version of each tool in the list."
          }
        ],
        "response": {
          "statusCode": 200,
          "body": {
            "type": "alias",
            "value": {
              "type": "id",
              "id": "type_:ReturnPagedUserDefinedTools"
            }
          }
        },
        "examples": [
          {
            "path": "/v0/evi/tools/00183a3f-79ba-413d-9f3b-609864268bea",
            "responseStatusCode": 200,
            "pathParameters": {
              "id": "00183a3f-79ba-413d-9f3b-609864268bea"
            },
            "queryParameters": {},
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "page_number": 0,
                "page_size": 10,
                "tools_page": [
                  {
                    "tool_type": "FUNCTION",
                    "id": "00183a3f-79ba-413d-9f3b-609864268bea",
                    "version": 1,
                    "version_type": "FIXED",
                    "name": "get_current_weather",
                    "created_on": 1715277014228,
                    "modified_on": 1715277602313,
                    "parameters": "{ \"type\": \"object\", \"properties\": { \"location\": { \"type\": \"string\", \"description\": \"The city and state, e.g. San Francisco, CA\" }, \"format\": { \"type\": \"string\", \"enum\": [\"celsius\", \"fahrenheit\", \"kelvin\"], \"description\": \"The temperature unit to use. Infer this from the users location.\" } }, \"required\": [\"location\", \"format\"] }",
                    "version_description": "Fetches current weather and uses celsius, fahrenheit, or kelvin based on location of user.",
                    "fallback_content": "Unable to fetch current weather.",
                    "description": "This tool is for getting the current weather."
                  }
                ]
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl https://api.hume.ai/v0/evi/tools/00183a3f-79ba-413d-9f3b-609864268bea",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumeClient } from \"hume\";\n\nconst hume = new HumeClient({ apiKey: \"YOUR_API_KEY\" });\nawait hume.empathicVoice.tools.listToolVersions(\"00183a3f-79ba-413d-9f3b-609864268bea\");\n",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "endpoint_tools.create-tool-version": {
        "id": "endpoint_tools.create-tool-version",
        "namespace": [
          "subpackage_tools"
        ],
        "method": "POST",
        "path": [
          {
            "type": "literal",
            "value": "/v0/evi/tools/"
          },
          {
            "type": "pathParameter",
            "value": "id"
          }
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.hume.ai"
          }
        ],
        "pathParameters": [
          {
            "key": "id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "Identifier for a tool. Formatted as a UUID."
          }
        ],
        "request": {
          "contentType": "application/json",
          "body": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "version_description",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "description": "Description that is appended to a specific version of a Tool."
              },
              {
                "key": "description",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "description": "Text describing what the tool does."
              },
              {
                "key": "parameters",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                "description": "Stringified JSON defining the parameters used by this version of the Tool."
              },
              {
                "key": "fallback_content",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "description": "Text to use if the tool fails to generate content."
              }
            ]
          }
        },
        "response": {
          "statusCode": 200,
          "body": {
            "type": "alias",
            "value": {
              "type": "optional",
              "shape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:ReturnUserDefinedTool"
                }
              }
            }
          }
        },
        "examples": [
          {
            "path": "/v0/evi/tools/00183a3f-79ba-413d-9f3b-609864268bea",
            "responseStatusCode": 200,
            "pathParameters": {
              "id": "00183a3f-79ba-413d-9f3b-609864268bea"
            },
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {
                "parameters": "{ \"type\": \"object\", \"properties\": { \"location\": { \"type\": \"string\", \"description\": \"The city and state, e.g. San Francisco, CA\" }, \"format\": { \"type\": \"string\", \"enum\": [\"celsius\", \"fahrenheit\", \"kelvin\"], \"description\": \"The temperature unit to use. Infer this from the users location.\" } }, \"required\": [\"location\", \"format\"] }",
                "version_description": "Fetches current weather and uses celsius, fahrenheit, or kelvin based on location of user.",
                "description": "This tool is for getting the current weather.",
                "fallback_content": "Unable to fetch current weather."
              }
            },
            "responseBody": {
              "type": "json",
              "value": {
                "tool_type": "FUNCTION",
                "id": "00183a3f-79ba-413d-9f3b-609864268bea",
                "version": 1,
                "version_type": "FIXED",
                "name": "get_current_weather",
                "created_on": 1715277014228,
                "modified_on": 1715277602313,
                "parameters": "{ \"type\": \"object\", \"properties\": { \"location\": { \"type\": \"string\", \"description\": \"The city and state, e.g. San Francisco, CA\" }, \"format\": { \"type\": \"string\", \"enum\": [\"celsius\", \"fahrenheit\", \"kelvin\"], \"description\": \"The temperature unit to use. Infer this from the users location.\" } }, \"required\": [\"location\", \"format\"] }",
                "version_description": "Fetches current weather and uses celsius, fahrenheit, or kelvin based on location of user.",
                "fallback_content": "Unable to fetch current weather.",
                "description": "This tool is for getting the current weather."
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://api.hume.ai/v0/evi/tools/00183a3f-79ba-413d-9f3b-609864268bea \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n  \"parameters\": \"{ \\\"type\\\": \\\"object\\\", \\\"properties\\\": { \\\"location\\\": { \\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"The city and state, e.g. San Francisco, CA\\\" }, \\\"format\\\": { \\\"type\\\": \\\"string\\\", \\\"enum\\\": [\\\"celsius\\\", \\\"fahrenheit\\\", \\\"kelvin\\\"], \\\"description\\\": \\\"The temperature unit to use. Infer this from the users location.\\\" } }, \\\"required\\\": [\\\"location\\\", \\\"format\\\"] }\",\n  \"version_description\": \"Fetches current weather and uses celsius, fahrenheit, or kelvin based on location of user.\",\n  \"description\": \"This tool is for getting the current weather.\",\n  \"fallback_content\": \"Unable to fetch current weather.\"\n}'",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumeClient } from \"hume\";\n\nconst hume = new HumeClient({ apiKey: \"YOUR_API_KEY\" });\nawait hume.empathicVoice.tools.createToolVersion(\"00183a3f-79ba-413d-9f3b-609864268bea\", {\n    parameters: \"{ \\\"type\\\": \\\"object\\\", \\\"properties\\\": { \\\"location\\\": { \\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"The city and state, e.g. San Francisco, CA\\\" }, \\\"format\\\": { \\\"type\\\": \\\"string\\\", \\\"enum\\\": [\\\"celsius\\\", \\\"fahrenheit\\\", \\\"kelvin\\\"], \\\"description\\\": \\\"The temperature unit to use. Infer this from the users location.\\\" } }, \\\"required\\\": [\\\"location\\\", \\\"format\\\"] }\",\n    versionDescription: \"Fetches current weather and uses celsius, fahrenheit, or kelvin based on location of user.\",\n    fallbackContent: \"Unable to fetch current weather.\",\n    description: \"This tool is for getting the current weather.\"\n});\n",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "endpoint_tools.delete-tool": {
        "id": "endpoint_tools.delete-tool",
        "namespace": [
          "subpackage_tools"
        ],
        "method": "DELETE",
        "path": [
          {
            "type": "literal",
            "value": "/v0/evi/tools/"
          },
          {
            "type": "pathParameter",
            "value": "id"
          }
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.hume.ai"
          }
        ],
        "pathParameters": [
          {
            "key": "id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "Identifier for a tool. Formatted as a UUID."
          }
        ],
        "examples": [
          {
            "path": "/v0/evi/tools/00183a3f-79ba-413d-9f3b-609864268bea",
            "responseStatusCode": 204,
            "pathParameters": {
              "id": "00183a3f-79ba-413d-9f3b-609864268bea"
            },
            "queryParameters": {},
            "headers": {},
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X DELETE https://api.hume.ai/v0/evi/tools/00183a3f-79ba-413d-9f3b-609864268bea",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumeClient } from \"hume\";\n\nconst hume = new HumeClient({ apiKey: \"YOUR_API_KEY\" });\nawait hume.empathicVoice.tools.deleteTool(\"00183a3f-79ba-413d-9f3b-609864268bea\");\n",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "endpoint_tools.update-tool-name": {
        "id": "endpoint_tools.update-tool-name",
        "namespace": [
          "subpackage_tools"
        ],
        "method": "PATCH",
        "path": [
          {
            "type": "literal",
            "value": "/v0/evi/tools/"
          },
          {
            "type": "pathParameter",
            "value": "id"
          }
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.hume.ai"
          }
        ],
        "pathParameters": [
          {
            "key": "id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "Identifier for a tool. Formatted as a UUID."
          }
        ],
        "request": {
          "contentType": "application/json",
          "body": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "name",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                "description": "Name applied to all versions of a particular Tool."
              }
            ]
          }
        },
        "examples": [
          {
            "path": "/v0/evi/tools/00183a3f-79ba-413d-9f3b-609864268bea",
            "responseStatusCode": 204,
            "pathParameters": {
              "id": "00183a3f-79ba-413d-9f3b-609864268bea"
            },
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {
                "name": "get_current_temperature"
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X PATCH https://api.hume.ai/v0/evi/tools/00183a3f-79ba-413d-9f3b-609864268bea \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n  \"name\": \"get_current_temperature\"\n}'",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumeClient } from \"hume\";\n\nconst hume = new HumeClient({ apiKey: \"YOUR_API_KEY\" });\nawait hume.empathicVoice.tools.updateToolName(\"00183a3f-79ba-413d-9f3b-609864268bea\", {\n    name: \"get_current_temperature\"\n});\n",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "endpoint_tools.get-tool-version": {
        "id": "endpoint_tools.get-tool-version",
        "namespace": [
          "subpackage_tools"
        ],
        "method": "GET",
        "path": [
          {
            "type": "literal",
            "value": "/v0/evi/tools/"
          },
          {
            "type": "pathParameter",
            "value": "id"
          },
          {
            "type": "literal",
            "value": "/version/"
          },
          {
            "type": "pathParameter",
            "value": "version"
          }
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.hume.ai"
          }
        ],
        "pathParameters": [
          {
            "key": "id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "Identifier for a tool. Formatted as a UUID."
          },
          {
            "key": "version",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            },
            "description": "Version number for a tool. Version numbers should be integers."
          }
        ],
        "response": {
          "statusCode": 200,
          "body": {
            "type": "alias",
            "value": {
              "type": "optional",
              "shape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:ReturnUserDefinedTool"
                }
              }
            }
          }
        },
        "examples": [
          {
            "path": "/v0/evi/tools/00183a3f-79ba-413d-9f3b-609864268bea/version/1",
            "responseStatusCode": 200,
            "pathParameters": {
              "id": "00183a3f-79ba-413d-9f3b-609864268bea",
              "version": 1
            },
            "queryParameters": {},
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "tool_type": "FUNCTION",
                "id": "00183a3f-79ba-413d-9f3b-609864268bea",
                "version": 1,
                "version_type": "FIXED",
                "name": "string",
                "created_on": 1715277014228,
                "modified_on": 1715277602313,
                "parameters": "{ \"type\": \"object\", \"properties\": { \"location\": { \"type\": \"string\", \"description\": \"The city and state, e.g. San Francisco, CA\" }, \"format\": { \"type\": \"string\", \"enum\": [\"celsius\", \"fahrenheit\", \"kelvin\"], \"description\": \"The temperature unit to use. Infer this from the users location.\" } }, \"required\": [\"location\", \"format\"] }",
                "version_description": "Fetches current weather and uses celsius, fahrenheit, or kelvin based on location of user.",
                "fallback_content": "Unable to fetch current weather.",
                "description": "This tool is for getting the current weather."
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl https://api.hume.ai/v0/evi/tools/00183a3f-79ba-413d-9f3b-609864268bea/version/1",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumeClient } from \"hume\";\n\nconst hume = new HumeClient({ apiKey: \"YOUR_API_KEY\" });\nawait hume.empathicVoice.tools.getToolVersion(\"00183a3f-79ba-413d-9f3b-609864268bea\", 1);\n",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "endpoint_tools.delete-tool-version": {
        "id": "endpoint_tools.delete-tool-version",
        "namespace": [
          "subpackage_tools"
        ],
        "method": "DELETE",
        "path": [
          {
            "type": "literal",
            "value": "/v0/evi/tools/"
          },
          {
            "type": "pathParameter",
            "value": "id"
          },
          {
            "type": "literal",
            "value": "/version/"
          },
          {
            "type": "pathParameter",
            "value": "version"
          }
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.hume.ai"
          }
        ],
        "pathParameters": [
          {
            "key": "id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "Identifier for a tool. Formatted as a UUID."
          },
          {
            "key": "version",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            },
            "description": "Version number for a tool. Version numbers should be integers."
          }
        ],
        "examples": [
          {
            "path": "/v0/evi/tools/00183a3f-79ba-413d-9f3b-609864268bea/version/1",
            "responseStatusCode": 204,
            "pathParameters": {
              "id": "00183a3f-79ba-413d-9f3b-609864268bea",
              "version": 1
            },
            "queryParameters": {},
            "headers": {},
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X DELETE https://api.hume.ai/v0/evi/tools/00183a3f-79ba-413d-9f3b-609864268bea/version/1",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumeClient } from \"hume\";\n\nconst hume = new HumeClient({ apiKey: \"YOUR_API_KEY\" });\nawait hume.empathicVoice.tools.deleteToolVersion(\"00183a3f-79ba-413d-9f3b-609864268bea\", 1);\n",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "endpoint_tools.update-tool-description": {
        "id": "endpoint_tools.update-tool-description",
        "namespace": [
          "subpackage_tools"
        ],
        "method": "PATCH",
        "path": [
          {
            "type": "literal",
            "value": "/v0/evi/tools/"
          },
          {
            "type": "pathParameter",
            "value": "id"
          },
          {
            "type": "literal",
            "value": "/version/"
          },
          {
            "type": "pathParameter",
            "value": "version"
          }
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.hume.ai"
          }
        ],
        "pathParameters": [
          {
            "key": "id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "Identifier for a tool. Formatted as a UUID."
          },
          {
            "key": "version",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            },
            "description": "Version number for a tool. Version numbers should be integers."
          }
        ],
        "request": {
          "contentType": "application/json",
          "body": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "version_description",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "description": "Description that is appended to a specific version of a Tool."
              }
            ]
          }
        },
        "response": {
          "statusCode": 200,
          "body": {
            "type": "alias",
            "value": {
              "type": "optional",
              "shape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:ReturnUserDefinedTool"
                }
              }
            }
          }
        },
        "examples": [
          {
            "path": "/v0/evi/tools/00183a3f-79ba-413d-9f3b-609864268bea/version/1",
            "responseStatusCode": 200,
            "pathParameters": {
              "id": "00183a3f-79ba-413d-9f3b-609864268bea",
              "version": 1
            },
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {
                "version_description": "Fetches current temperature, precipitation, wind speed, AQI, and other weather conditions. Uses Celsius, Fahrenheit, or kelvin depending on user's region."
              }
            },
            "responseBody": {
              "type": "json",
              "value": {
                "tool_type": "FUNCTION",
                "id": "00183a3f-79ba-413d-9f3b-609864268bea",
                "version": 1,
                "version_type": "FIXED",
                "name": "string",
                "created_on": 1715277014228,
                "modified_on": 1715277602313,
                "parameters": "{ \"type\": \"object\", \"properties\": { \"location\": { \"type\": \"string\", \"description\": \"The city and state, e.g. San Francisco, CA\" }, \"format\": { \"type\": \"string\", \"enum\": [\"celsius\", \"fahrenheit\", \"kelvin\"], \"description\": \"The temperature unit to use. Infer this from the users location.\" } }, \"required\": [\"location\", \"format\"] }",
                "version_description": "Fetches current temperature, precipitation, wind speed, AQI, and other weather conditions. Uses Celsius, Fahrenheit, or kelvin depending on user's region.",
                "fallback_content": "Unable to fetch current weather.",
                "description": "This tool is for getting the current weather."
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X PATCH https://api.hume.ai/v0/evi/tools/00183a3f-79ba-413d-9f3b-609864268bea/version/1 \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n  \"version_description\": \"Fetches current temperature, precipitation, wind speed, AQI, and other weather conditions. Uses Celsius, Fahrenheit, or kelvin depending on user\\'s region.\"\n}'",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumeClient } from \"hume\";\n\nconst hume = new HumeClient({ apiKey: \"YOUR_API_KEY\" });\nawait hume.empathicVoice.tools.updateToolDescription(\"00183a3f-79ba-413d-9f3b-609864268bea\", 1, {\n    versionDescription: \"Fetches current temperature, precipitation, wind speed, AQI, and other weather conditions. Uses Celsius, Fahrenheit, or kelvin depending on user's region.\"\n});\n",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "endpoint_prompts.list-prompts": {
        "id": "endpoint_prompts.list-prompts",
        "namespace": [
          "subpackage_prompts"
        ],
        "method": "GET",
        "path": [
          {
            "type": "literal",
            "value": "/v0/evi/prompts"
          }
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.hume.ai"
          }
        ],
        "queryParameters": [
          {
            "key": "page_number",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                }
              }
            },
            "description": "The page number of the results to return."
          },
          {
            "key": "page_size",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                }
              }
            },
            "description": "The maximum number of results to include per page."
          },
          {
            "key": "restrict_to_most_recent",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "boolean"
                    }
                  }
                }
              }
            },
            "description": "Only include the most recent version of each prompt in the list."
          }
        ],
        "response": {
          "statusCode": 200,
          "body": {
            "type": "alias",
            "value": {
              "type": "id",
              "id": "type_:ReturnPagedPrompts"
            }
          }
        },
        "examples": [
          {
            "path": "/v0/evi/prompts",
            "responseStatusCode": 200,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "page_number": 1,
                "page_size": 1,
                "prompts_page": [
                  {
                    "id": "id",
                    "version": 1,
                    "version_type": "version_type",
                    "name": "name",
                    "created_on": 1,
                    "modified_on": 1,
                    "text": "text",
                    "version_description": "version_description"
                  }
                ]
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl https://api.hume.ai/v0/evi/prompts",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumeClient } from \"hume\";\n\nconst hume = new HumeClient({ apiKey: \"YOUR_API_KEY\" });\nawait hume.empathicVoice.prompts.listPrompts();\n",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "endpoint_prompts.create-prompt": {
        "id": "endpoint_prompts.create-prompt",
        "namespace": [
          "subpackage_prompts"
        ],
        "method": "POST",
        "path": [
          {
            "type": "literal",
            "value": "/v0/evi/prompts"
          }
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.hume.ai"
          }
        ],
        "request": {
          "contentType": "application/json",
          "body": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "name",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                "description": "Name applied to all versions of a particular Prompt."
              },
              {
                "key": "version_description",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "description": "Description that is appended to a specific version of a Prompt."
              },
              {
                "key": "text",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                "description": "Text used for this version of the Prompt."
              }
            ]
          }
        },
        "response": {
          "statusCode": 200,
          "body": {
            "type": "alias",
            "value": {
              "type": "optional",
              "shape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:ReturnPrompt"
                }
              }
            }
          }
        },
        "examples": [
          {
            "path": "/v0/evi/prompts",
            "responseStatusCode": 200,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {
                "name": "name",
                "text": "text"
              }
            },
            "responseBody": {
              "type": "json",
              "value": {
                "id": "id",
                "version": 1,
                "version_type": "version_type",
                "name": "name",
                "created_on": 1,
                "modified_on": 1,
                "text": "text",
                "version_description": "version_description"
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://api.hume.ai/v0/evi/prompts \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n  \"name\": \"name\",\n  \"text\": \"text\"\n}'",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumeClient } from \"hume\";\n\nconst hume = new HumeClient({ apiKey: \"YOUR_API_KEY\" });\nawait hume.empathicVoice.prompts.createPrompt({\n    name: \"name\",\n    text: \"text\"\n});\n",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "endpoint_prompts.list-prompt-versions": {
        "id": "endpoint_prompts.list-prompt-versions",
        "namespace": [
          "subpackage_prompts"
        ],
        "method": "GET",
        "path": [
          {
            "type": "literal",
            "value": "/v0/evi/prompts/"
          },
          {
            "type": "pathParameter",
            "value": "id"
          }
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.hume.ai"
          }
        ],
        "pathParameters": [
          {
            "key": "id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "Identifier for a tool. Formatted as a UUID."
          }
        ],
        "queryParameters": [
          {
            "key": "page_number",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                }
              }
            },
            "description": "The page number of the results to return."
          },
          {
            "key": "page_size",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                }
              }
            },
            "description": "The maximum number of results to include per page."
          },
          {
            "key": "restrict_to_most_recent",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "boolean"
                    }
                  }
                }
              }
            },
            "description": "Only include the most recent version of each prompt in the list."
          }
        ],
        "response": {
          "statusCode": 200,
          "body": {
            "type": "alias",
            "value": {
              "type": "id",
              "id": "type_:ReturnPagedPrompts"
            }
          }
        },
        "examples": [
          {
            "path": "/v0/evi/prompts/id",
            "responseStatusCode": 200,
            "pathParameters": {
              "id": "id"
            },
            "queryParameters": {},
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "page_number": 1,
                "page_size": 1,
                "prompts_page": [
                  {
                    "id": "id",
                    "version": 1,
                    "version_type": "version_type",
                    "name": "name",
                    "created_on": 1,
                    "modified_on": 1,
                    "text": "text",
                    "version_description": "version_description"
                  }
                ]
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl https://api.hume.ai/v0/evi/prompts/id",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumeClient } from \"hume\";\n\nconst hume = new HumeClient({ apiKey: \"YOUR_API_KEY\" });\nawait hume.empathicVoice.prompts.listPromptVersions(\"id\");\n",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "endpoint_prompts.create-prompt-verison": {
        "id": "endpoint_prompts.create-prompt-verison",
        "namespace": [
          "subpackage_prompts"
        ],
        "method": "POST",
        "path": [
          {
            "type": "literal",
            "value": "/v0/evi/prompts/"
          },
          {
            "type": "pathParameter",
            "value": "id"
          }
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.hume.ai"
          }
        ],
        "pathParameters": [
          {
            "key": "id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "Identifier for a prompt. Formatted as a UUID."
          }
        ],
        "request": {
          "contentType": "application/json",
          "body": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "version_description",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "description": "Description that is appended to a specific version of a Prompt."
              },
              {
                "key": "text",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                "description": "Text used for this version of the Prompt."
              }
            ]
          }
        },
        "response": {
          "statusCode": 200,
          "body": {
            "type": "alias",
            "value": {
              "type": "optional",
              "shape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:ReturnPrompt"
                }
              }
            }
          }
        },
        "examples": [
          {
            "path": "/v0/evi/prompts/id",
            "responseStatusCode": 200,
            "pathParameters": {
              "id": "id"
            },
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {
                "text": "text"
              }
            },
            "responseBody": {
              "type": "json",
              "value": {
                "id": "id",
                "version": 1,
                "version_type": "version_type",
                "name": "name",
                "created_on": 1,
                "modified_on": 1,
                "text": "text",
                "version_description": "version_description"
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://api.hume.ai/v0/evi/prompts/id \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n  \"text\": \"text\"\n}'",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumeClient } from \"hume\";\n\nconst hume = new HumeClient({ apiKey: \"YOUR_API_KEY\" });\nawait hume.empathicVoice.prompts.createPromptVerison(\"id\", {\n    text: \"text\"\n});\n",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "endpoint_prompts.delete-prompt": {
        "id": "endpoint_prompts.delete-prompt",
        "namespace": [
          "subpackage_prompts"
        ],
        "method": "DELETE",
        "path": [
          {
            "type": "literal",
            "value": "/v0/evi/prompts/"
          },
          {
            "type": "pathParameter",
            "value": "id"
          }
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.hume.ai"
          }
        ],
        "pathParameters": [
          {
            "key": "id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "Identifier for a prompt. Formatted as a UUID."
          }
        ],
        "examples": [
          {
            "path": "/v0/evi/prompts/id",
            "responseStatusCode": 204,
            "pathParameters": {
              "id": "id"
            },
            "queryParameters": {},
            "headers": {},
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X DELETE https://api.hume.ai/v0/evi/prompts/id",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumeClient } from \"hume\";\n\nconst hume = new HumeClient({ apiKey: \"YOUR_API_KEY\" });\nawait hume.empathicVoice.prompts.deletePrompt(\"id\");\n",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "endpoint_prompts.update-prompt-name": {
        "id": "endpoint_prompts.update-prompt-name",
        "namespace": [
          "subpackage_prompts"
        ],
        "method": "PATCH",
        "path": [
          {
            "type": "literal",
            "value": "/v0/evi/prompts/"
          },
          {
            "type": "pathParameter",
            "value": "id"
          }
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.hume.ai"
          }
        ],
        "pathParameters": [
          {
            "key": "id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "Identifier for a prompt. Formatted as a UUID."
          }
        ],
        "request": {
          "contentType": "application/json",
          "body": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "name",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                "description": "Name applied to all versions of a particular Prompt."
              }
            ]
          }
        },
        "examples": [
          {
            "path": "/v0/evi/prompts/:id",
            "responseStatusCode": 200,
            "pathParameters": {
              "id": ":id"
            },
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {
                "name": "string"
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X PATCH https://api.hume.ai/v0/evi/prompts/:id \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n  \"name\": \"string\"\n}'",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumeClient } from \"hume\";\n\nconst hume = new HumeClient({ apiKey: \"YOUR_API_KEY\" });\nawait hume.empathicVoice.prompts.updatePromptName(\"string\", {\n    name: \"string\"\n});\n",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "endpoint_prompts.get-prompt-version": {
        "id": "endpoint_prompts.get-prompt-version",
        "namespace": [
          "subpackage_prompts"
        ],
        "method": "GET",
        "path": [
          {
            "type": "literal",
            "value": "/v0/evi/prompts/"
          },
          {
            "type": "pathParameter",
            "value": "id"
          },
          {
            "type": "literal",
            "value": "/version/"
          },
          {
            "type": "pathParameter",
            "value": "version"
          }
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.hume.ai"
          }
        ],
        "pathParameters": [
          {
            "key": "id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "Identifier for a prompt. Formatted as a UUID."
          },
          {
            "key": "version",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            },
            "description": "Version number for a prompt. Version numbers should be integers."
          }
        ],
        "response": {
          "statusCode": 200,
          "body": {
            "type": "alias",
            "value": {
              "type": "optional",
              "shape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:ReturnPrompt"
                }
              }
            }
          }
        },
        "examples": [
          {
            "path": "/v0/evi/prompts/id/version/1",
            "responseStatusCode": 200,
            "pathParameters": {
              "id": "id",
              "version": 1
            },
            "queryParameters": {},
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "id": "id",
                "version": 1,
                "version_type": "version_type",
                "name": "name",
                "created_on": 1,
                "modified_on": 1,
                "text": "text",
                "version_description": "version_description"
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl https://api.hume.ai/v0/evi/prompts/id/version/1",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumeClient } from \"hume\";\n\nconst hume = new HumeClient({ apiKey: \"YOUR_API_KEY\" });\nawait hume.empathicVoice.prompts.getPromptVersion(\"id\", 1);\n",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "endpoint_prompts.delete-prompt-version": {
        "id": "endpoint_prompts.delete-prompt-version",
        "namespace": [
          "subpackage_prompts"
        ],
        "method": "DELETE",
        "path": [
          {
            "type": "literal",
            "value": "/v0/evi/prompts/"
          },
          {
            "type": "pathParameter",
            "value": "id"
          },
          {
            "type": "literal",
            "value": "/version/"
          },
          {
            "type": "pathParameter",
            "value": "version"
          }
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.hume.ai"
          }
        ],
        "pathParameters": [
          {
            "key": "id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "Identifier for a prompt. Formatted as a UUID."
          },
          {
            "key": "version",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            },
            "description": "Version number for a prompt. Version numbers should be integers."
          }
        ],
        "examples": [
          {
            "path": "/v0/evi/prompts/id/version/1",
            "responseStatusCode": 204,
            "pathParameters": {
              "id": "id",
              "version": 1
            },
            "queryParameters": {},
            "headers": {},
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X DELETE https://api.hume.ai/v0/evi/prompts/id/version/1",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumeClient } from \"hume\";\n\nconst hume = new HumeClient({ apiKey: \"YOUR_API_KEY\" });\nawait hume.empathicVoice.prompts.deletePromptVersion(\"id\", 1);\n",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "endpoint_prompts.update-prompt-description": {
        "id": "endpoint_prompts.update-prompt-description",
        "namespace": [
          "subpackage_prompts"
        ],
        "method": "PATCH",
        "path": [
          {
            "type": "literal",
            "value": "/v0/evi/prompts/"
          },
          {
            "type": "pathParameter",
            "value": "id"
          },
          {
            "type": "literal",
            "value": "/version/"
          },
          {
            "type": "pathParameter",
            "value": "version"
          }
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.hume.ai"
          }
        ],
        "pathParameters": [
          {
            "key": "id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "Identifier for a prompt. Formatted as a UUID."
          },
          {
            "key": "version",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            },
            "description": "Version number for a prompt. Version numbers should be integers."
          }
        ],
        "request": {
          "contentType": "application/json",
          "body": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "version_description",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "description": "Description that is appended to a specific version of a Prompt."
              }
            ]
          }
        },
        "response": {
          "statusCode": 200,
          "body": {
            "type": "alias",
            "value": {
              "type": "optional",
              "shape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:ReturnPrompt"
                }
              }
            }
          }
        },
        "examples": [
          {
            "path": "/v0/evi/prompts/id/version/1",
            "responseStatusCode": 200,
            "pathParameters": {
              "id": "id",
              "version": 1
            },
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {}
            },
            "responseBody": {
              "type": "json",
              "value": {
                "id": "id",
                "version": 1,
                "version_type": "version_type",
                "name": "name",
                "created_on": 1,
                "modified_on": 1,
                "text": "text",
                "version_description": "version_description"
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X PATCH https://api.hume.ai/v0/evi/prompts/id/version/1 \\\n     -H \"Content-Type: application/json\" \\\n     -d '{}'",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumeClient } from \"hume\";\n\nconst hume = new HumeClient({ apiKey: \"YOUR_API_KEY\" });\nawait hume.empathicVoice.prompts.updatePromptDescription(\"id\", 1);\n",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "endpoint_configs.list-configs": {
        "id": "endpoint_configs.list-configs",
        "namespace": [
          "subpackage_configs"
        ],
        "method": "GET",
        "path": [
          {
            "type": "literal",
            "value": "/v0/evi/configs"
          }
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.hume.ai"
          }
        ],
        "queryParameters": [
          {
            "key": "page_number",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                }
              }
            },
            "description": "The page number of the results to return."
          },
          {
            "key": "page_size",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                }
              }
            },
            "description": "The maximum number of results to include per page."
          },
          {
            "key": "restrict_to_most_recent",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "boolean"
                    }
                  }
                }
              }
            },
            "description": "Only include the most recent version of each config in the list."
          }
        ],
        "response": {
          "statusCode": 200,
          "body": {
            "type": "alias",
            "value": {
              "type": "id",
              "id": "type_:ReturnPagedConfigs"
            }
          }
        },
        "examples": [
          {
            "path": "/v0/evi/configs",
            "responseStatusCode": 200,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "page_number": 1,
                "page_size": 1,
                "configs_page": [
                  {
                    "id": "id",
                    "version": 1,
                    "version_description": "version_description",
                    "name": "name",
                    "created_on": 1,
                    "modified_on": 1,
                    "prompt": {
                      "id": "id",
                      "version": 1,
                      "version_type": "version_type",
                      "name": "name",
                      "created_on": 1,
                      "modified_on": 1,
                      "text": "text"
                    },
                    "voice": {
                      "provider": "provider",
                      "name": "name"
                    }
                  }
                ]
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl https://api.hume.ai/v0/evi/configs",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumeClient } from \"hume\";\n\nconst hume = new HumeClient({ apiKey: \"YOUR_API_KEY\" });\nawait hume.empathicVoice.configs.listConfigs();\n",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "endpoint_configs.create-config": {
        "id": "endpoint_configs.create-config",
        "namespace": [
          "subpackage_configs"
        ],
        "method": "POST",
        "path": [
          {
            "type": "literal",
            "value": "/v0/evi/configs"
          }
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.hume.ai"
          }
        ],
        "request": {
          "contentType": "application/json",
          "body": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "name",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                "description": "Name applied to all versions of a particular Config."
              },
              {
                "key": "version_description",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "description": "Description that is appended to a specific version of a Config."
              },
              {
                "key": "prompt",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "id": "type_:PostedPromptSpec"
                      }
                    }
                  }
                }
              },
              {
                "key": "voice",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "id": "type_:PostedVoice"
                      }
                    }
                  }
                }
              },
              {
                "key": "language_model",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "id": "type_:PostedLanguageModel"
                      }
                    }
                  }
                }
              },
              {
                "key": "tools",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "list",
                        "itemShape": {
                          "type": "alias",
                          "value": {
                            "type": "optional",
                            "shape": {
                              "type": "alias",
                              "value": {
                                "type": "id",
                                "id": "type_:PostedUserDefinedToolSpec"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "description": "Tool specification for a Config."
              },
              {
                "key": "builtin_tools",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "list",
                        "itemShape": {
                          "type": "alias",
                          "value": {
                            "type": "optional",
                            "shape": {
                              "type": "alias",
                              "value": {
                                "type": "id",
                                "id": "type_:PostedBuiltinTool"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "description": "Built-in tool specification for a Config."
              }
            ]
          }
        },
        "response": {
          "statusCode": 200,
          "body": {
            "type": "alias",
            "value": {
              "type": "id",
              "id": "type_:ReturnConfig"
            }
          }
        },
        "examples": [
          {
            "path": "/v0/evi/configs",
            "responseStatusCode": 200,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {
                "name": "name"
              }
            },
            "responseBody": {
              "type": "json",
              "value": {
                "id": "id",
                "version": 1,
                "version_description": "version_description",
                "name": "name",
                "created_on": 1,
                "modified_on": 1,
                "prompt": {
                  "id": "id",
                  "version": 1,
                  "version_type": "version_type",
                  "name": "name",
                  "created_on": 1,
                  "modified_on": 1,
                  "text": "text",
                  "version_description": "version_description"
                },
                "voice": {
                  "provider": "provider",
                  "name": "name"
                },
                "language_model": {
                  "model_provider": "model_provider",
                  "model_resource": "model_resource",
                  "temperature": 1.1
                },
                "tools": [
                  {
                    "tool_type": "tool_type",
                    "id": "id",
                    "version": 1,
                    "version_type": "version_type",
                    "name": "name",
                    "created_on": 1,
                    "modified_on": 1,
                    "parameters": "parameters",
                    "version_description": "version_description",
                    "fallback_content": "fallback_content",
                    "description": "description"
                  }
                ],
                "builtin_tools": [
                  {
                    "tool_type": "tool_type",
                    "name": "name",
                    "fallback_content": "fallback_content"
                  }
                ]
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://api.hume.ai/v0/evi/configs \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n  \"name\": \"name\"\n}'",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumeClient } from \"hume\";\n\nconst hume = new HumeClient({ apiKey: \"YOUR_API_KEY\" });\nawait hume.empathicVoice.configs.createConfig({\n    name: \"name\"\n});\n",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "endpoint_configs.list-config-versions": {
        "id": "endpoint_configs.list-config-versions",
        "namespace": [
          "subpackage_configs"
        ],
        "method": "GET",
        "path": [
          {
            "type": "literal",
            "value": "/v0/evi/configs/"
          },
          {
            "type": "pathParameter",
            "value": "id"
          }
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.hume.ai"
          }
        ],
        "pathParameters": [
          {
            "key": "id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "Identifier for a config. Formatted as a UUID."
          }
        ],
        "queryParameters": [
          {
            "key": "page_number",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                }
              }
            },
            "description": "The page number of the results to return."
          },
          {
            "key": "page_size",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                }
              }
            },
            "description": "The maximum number of results to include per page."
          },
          {
            "key": "restrict_to_most_recent",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "boolean"
                    }
                  }
                }
              }
            },
            "description": "Only include the most recent version of each config in the list."
          }
        ],
        "response": {
          "statusCode": 200,
          "body": {
            "type": "alias",
            "value": {
              "type": "id",
              "id": "type_:ReturnPagedConfigs"
            }
          }
        },
        "examples": [
          {
            "path": "/v0/evi/configs/id",
            "responseStatusCode": 200,
            "pathParameters": {
              "id": "id"
            },
            "queryParameters": {},
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "page_number": 1,
                "page_size": 1,
                "configs_page": [
                  {
                    "id": "id",
                    "version": 1,
                    "version_description": "version_description",
                    "name": "name",
                    "created_on": 1,
                    "modified_on": 1,
                    "prompt": {
                      "id": "id",
                      "version": 1,
                      "version_type": "version_type",
                      "name": "name",
                      "created_on": 1,
                      "modified_on": 1,
                      "text": "text"
                    },
                    "voice": {
                      "provider": "provider",
                      "name": "name"
                    }
                  }
                ]
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl https://api.hume.ai/v0/evi/configs/id",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumeClient } from \"hume\";\n\nconst hume = new HumeClient({ apiKey: \"YOUR_API_KEY\" });\nawait hume.empathicVoice.configs.listConfigVersions(\"id\");\n",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "endpoint_configs.create-config-version": {
        "id": "endpoint_configs.create-config-version",
        "namespace": [
          "subpackage_configs"
        ],
        "method": "POST",
        "path": [
          {
            "type": "literal",
            "value": "/v0/evi/configs/"
          },
          {
            "type": "pathParameter",
            "value": "id"
          }
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.hume.ai"
          }
        ],
        "pathParameters": [
          {
            "key": "id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "Identifier for a config. Formatted as a UUID."
          }
        ],
        "request": {
          "contentType": "application/json",
          "body": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "version_description",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "description": "Description that is appended to a specific version of a Config."
              },
              {
                "key": "prompt",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "id": "type_:PostedPromptSpec"
                      }
                    }
                  }
                }
              },
              {
                "key": "voice",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "id": "type_:PostedVoice"
                      }
                    }
                  }
                }
              },
              {
                "key": "language_model",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "id": "type_:PostedLanguageModel"
                      }
                    }
                  }
                }
              },
              {
                "key": "tools",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "list",
                        "itemShape": {
                          "type": "alias",
                          "value": {
                            "type": "optional",
                            "shape": {
                              "type": "alias",
                              "value": {
                                "type": "id",
                                "id": "type_:PostedUserDefinedToolSpec"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "description": "Tool specification for a Config."
              },
              {
                "key": "builtin_tools",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "list",
                        "itemShape": {
                          "type": "alias",
                          "value": {
                            "type": "optional",
                            "shape": {
                              "type": "alias",
                              "value": {
                                "type": "id",
                                "id": "type_:PostedBuiltinTool"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "description": "Built-in tool specification for a Config."
              }
            ]
          }
        },
        "response": {
          "statusCode": 200,
          "body": {
            "type": "alias",
            "value": {
              "type": "id",
              "id": "type_:ReturnConfig"
            }
          }
        },
        "examples": [
          {
            "path": "/v0/evi/configs/id",
            "responseStatusCode": 200,
            "pathParameters": {
              "id": "id"
            },
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {}
            },
            "responseBody": {
              "type": "json",
              "value": {
                "id": "id",
                "version": 1,
                "version_description": "version_description",
                "name": "name",
                "created_on": 1,
                "modified_on": 1,
                "prompt": {
                  "id": "id",
                  "version": 1,
                  "version_type": "version_type",
                  "name": "name",
                  "created_on": 1,
                  "modified_on": 1,
                  "text": "text",
                  "version_description": "version_description"
                },
                "voice": {
                  "provider": "provider",
                  "name": "name"
                },
                "language_model": {
                  "model_provider": "model_provider",
                  "model_resource": "model_resource",
                  "temperature": 1.1
                },
                "tools": [
                  {
                    "tool_type": "tool_type",
                    "id": "id",
                    "version": 1,
                    "version_type": "version_type",
                    "name": "name",
                    "created_on": 1,
                    "modified_on": 1,
                    "parameters": "parameters",
                    "version_description": "version_description",
                    "fallback_content": "fallback_content",
                    "description": "description"
                  }
                ],
                "builtin_tools": [
                  {
                    "tool_type": "tool_type",
                    "name": "name",
                    "fallback_content": "fallback_content"
                  }
                ]
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://api.hume.ai/v0/evi/configs/id \\\n     -H \"Content-Type: application/json\" \\\n     -d '{}'",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumeClient } from \"hume\";\n\nconst hume = new HumeClient({ apiKey: \"YOUR_API_KEY\" });\nawait hume.empathicVoice.configs.createConfigVersion(\"id\");\n",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "endpoint_configs.delete-config": {
        "id": "endpoint_configs.delete-config",
        "namespace": [
          "subpackage_configs"
        ],
        "method": "DELETE",
        "path": [
          {
            "type": "literal",
            "value": "/v0/evi/configs/"
          },
          {
            "type": "pathParameter",
            "value": "id"
          }
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.hume.ai"
          }
        ],
        "pathParameters": [
          {
            "key": "id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "Identifier for a config. Formatted as a UUID."
          }
        ],
        "examples": [
          {
            "path": "/v0/evi/configs/id",
            "responseStatusCode": 204,
            "pathParameters": {
              "id": "id"
            },
            "queryParameters": {},
            "headers": {},
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X DELETE https://api.hume.ai/v0/evi/configs/id",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumeClient } from \"hume\";\n\nconst hume = new HumeClient({ apiKey: \"YOUR_API_KEY\" });\nawait hume.empathicVoice.configs.deleteConfig(\"id\");\n",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "endpoint_configs.update-config-name": {
        "id": "endpoint_configs.update-config-name",
        "namespace": [
          "subpackage_configs"
        ],
        "method": "PATCH",
        "path": [
          {
            "type": "literal",
            "value": "/v0/evi/configs/"
          },
          {
            "type": "pathParameter",
            "value": "id"
          }
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.hume.ai"
          }
        ],
        "pathParameters": [
          {
            "key": "id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "Identifier for a config. Formatted as a UUID."
          }
        ],
        "request": {
          "contentType": "application/json",
          "body": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "name",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                "description": "Name applied to all versions of a particular Config."
              }
            ]
          }
        },
        "examples": [
          {
            "path": "/v0/evi/configs/:id",
            "responseStatusCode": 200,
            "pathParameters": {
              "id": ":id"
            },
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {
                "name": "string"
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X PATCH https://api.hume.ai/v0/evi/configs/:id \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n  \"name\": \"string\"\n}'",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumeClient } from \"hume\";\n\nconst hume = new HumeClient({ apiKey: \"YOUR_API_KEY\" });\nawait hume.empathicVoice.configs.updateConfigName(\"string\", {\n    name: \"string\"\n});\n",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "endpoint_configs.get-config-version": {
        "id": "endpoint_configs.get-config-version",
        "namespace": [
          "subpackage_configs"
        ],
        "method": "GET",
        "path": [
          {
            "type": "literal",
            "value": "/v0/evi/configs/"
          },
          {
            "type": "pathParameter",
            "value": "id"
          },
          {
            "type": "literal",
            "value": "/version/"
          },
          {
            "type": "pathParameter",
            "value": "version"
          }
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.hume.ai"
          }
        ],
        "pathParameters": [
          {
            "key": "id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "Identifier for a config. Formatted as a UUID."
          },
          {
            "key": "version",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            },
            "description": "Version number for a config. Version numbers should be integers."
          }
        ],
        "response": {
          "statusCode": 200,
          "body": {
            "type": "alias",
            "value": {
              "type": "id",
              "id": "type_:ReturnConfig"
            }
          }
        },
        "examples": [
          {
            "path": "/v0/evi/configs/id/version/1",
            "responseStatusCode": 200,
            "pathParameters": {
              "id": "id",
              "version": 1
            },
            "queryParameters": {},
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "id": "id",
                "version": 1,
                "version_description": "version_description",
                "name": "name",
                "created_on": 1,
                "modified_on": 1,
                "prompt": {
                  "id": "id",
                  "version": 1,
                  "version_type": "version_type",
                  "name": "name",
                  "created_on": 1,
                  "modified_on": 1,
                  "text": "text",
                  "version_description": "version_description"
                },
                "voice": {
                  "provider": "provider",
                  "name": "name"
                },
                "language_model": {
                  "model_provider": "model_provider",
                  "model_resource": "model_resource",
                  "temperature": 1.1
                },
                "tools": [
                  {
                    "tool_type": "tool_type",
                    "id": "id",
                    "version": 1,
                    "version_type": "version_type",
                    "name": "name",
                    "created_on": 1,
                    "modified_on": 1,
                    "parameters": "parameters",
                    "version_description": "version_description",
                    "fallback_content": "fallback_content",
                    "description": "description"
                  }
                ],
                "builtin_tools": [
                  {
                    "tool_type": "tool_type",
                    "name": "name",
                    "fallback_content": "fallback_content"
                  }
                ]
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl https://api.hume.ai/v0/evi/configs/id/version/1",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumeClient } from \"hume\";\n\nconst hume = new HumeClient({ apiKey: \"YOUR_API_KEY\" });\nawait hume.empathicVoice.configs.getConfigVersion(\"id\", 1);\n",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "endpoint_configs.delete-config-version": {
        "id": "endpoint_configs.delete-config-version",
        "namespace": [
          "subpackage_configs"
        ],
        "method": "DELETE",
        "path": [
          {
            "type": "literal",
            "value": "/v0/evi/configs/"
          },
          {
            "type": "pathParameter",
            "value": "id"
          },
          {
            "type": "literal",
            "value": "/version/"
          },
          {
            "type": "pathParameter",
            "value": "version"
          }
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.hume.ai"
          }
        ],
        "pathParameters": [
          {
            "key": "id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "Identifier for a config. Formatted as a UUID."
          },
          {
            "key": "version",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            },
            "description": "Version number for a config. Version numbers should be integers."
          }
        ],
        "examples": [
          {
            "path": "/v0/evi/configs/id/version/1",
            "responseStatusCode": 204,
            "pathParameters": {
              "id": "id",
              "version": 1
            },
            "queryParameters": {},
            "headers": {},
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X DELETE https://api.hume.ai/v0/evi/configs/id/version/1",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumeClient } from \"hume\";\n\nconst hume = new HumeClient({ apiKey: \"YOUR_API_KEY\" });\nawait hume.empathicVoice.configs.deleteConfigVersion(\"id\", 1);\n",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "endpoint_configs.update-config-description": {
        "id": "endpoint_configs.update-config-description",
        "namespace": [
          "subpackage_configs"
        ],
        "method": "PATCH",
        "path": [
          {
            "type": "literal",
            "value": "/v0/evi/configs/"
          },
          {
            "type": "pathParameter",
            "value": "id"
          },
          {
            "type": "literal",
            "value": "/version/"
          },
          {
            "type": "pathParameter",
            "value": "version"
          }
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.hume.ai"
          }
        ],
        "pathParameters": [
          {
            "key": "id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "Identifier for a config. Formatted as a UUID."
          },
          {
            "key": "version",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            },
            "description": "Version number for a config. Version numbers should be integers."
          }
        ],
        "request": {
          "contentType": "application/json",
          "body": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "version_description",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "description": "Description that is appended to a specific version of a Config."
              }
            ]
          }
        },
        "response": {
          "statusCode": 200,
          "body": {
            "type": "alias",
            "value": {
              "type": "id",
              "id": "type_:ReturnConfig"
            }
          }
        },
        "examples": [
          {
            "path": "/v0/evi/configs/id/version/1",
            "responseStatusCode": 200,
            "pathParameters": {
              "id": "id",
              "version": 1
            },
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {}
            },
            "responseBody": {
              "type": "json",
              "value": {
                "id": "id",
                "version": 1,
                "version_description": "version_description",
                "name": "name",
                "created_on": 1,
                "modified_on": 1,
                "prompt": {
                  "id": "id",
                  "version": 1,
                  "version_type": "version_type",
                  "name": "name",
                  "created_on": 1,
                  "modified_on": 1,
                  "text": "text",
                  "version_description": "version_description"
                },
                "voice": {
                  "provider": "provider",
                  "name": "name"
                },
                "language_model": {
                  "model_provider": "model_provider",
                  "model_resource": "model_resource",
                  "temperature": 1.1
                },
                "tools": [
                  {
                    "tool_type": "tool_type",
                    "id": "id",
                    "version": 1,
                    "version_type": "version_type",
                    "name": "name",
                    "created_on": 1,
                    "modified_on": 1,
                    "parameters": "parameters",
                    "version_description": "version_description",
                    "fallback_content": "fallback_content",
                    "description": "description"
                  }
                ],
                "builtin_tools": [
                  {
                    "tool_type": "tool_type",
                    "name": "name",
                    "fallback_content": "fallback_content"
                  }
                ]
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X PATCH https://api.hume.ai/v0/evi/configs/id/version/1 \\\n     -H \"Content-Type: application/json\" \\\n     -d '{}'",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumeClient } from \"hume\";\n\nconst hume = new HumeClient({ apiKey: \"YOUR_API_KEY\" });\nawait hume.empathicVoice.configs.updateConfigDescription(\"id\", 1);\n",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "endpoint_chats.list-chats": {
        "id": "endpoint_chats.list-chats",
        "namespace": [
          "subpackage_chats"
        ],
        "method": "GET",
        "path": [
          {
            "type": "literal",
            "value": "/v0/evi/chats"
          }
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.hume.ai"
          }
        ],
        "queryParameters": [
          {
            "key": "page_number",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                }
              }
            },
            "description": "The page number of the results to return."
          },
          {
            "key": "page_size",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                }
              }
            },
            "description": "The maximum number of results to include per page."
          }
        ],
        "response": {
          "statusCode": 200,
          "body": {
            "type": "alias",
            "value": {
              "type": "id",
              "id": "type_:ReturnPagedChats"
            }
          }
        },
        "examples": [
          {
            "path": "/v0/evi/chats",
            "responseStatusCode": 200,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "page_number": 1,
                "page_size": 1,
                "chats_page": [
                  {
                    "id": "id",
                    "chat_group_id": "chat_group_id",
                    "status": "status",
                    "start_timestamp": 1,
                    "tag": "tag",
                    "end_timestamp": 1,
                    "event_count": 1,
                    "metadata": "metadata",
                    "config": {
                      "id": "id"
                    }
                  }
                ]
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl https://api.hume.ai/v0/evi/chats",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumeClient } from \"hume\";\n\nconst hume = new HumeClient({ apiKey: \"YOUR_API_KEY\" });\nawait hume.empathicVoice.chats.listChats();\n",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "endpoint_chats.list-chat-events": {
        "id": "endpoint_chats.list-chat-events",
        "namespace": [
          "subpackage_chats"
        ],
        "method": "GET",
        "path": [
          {
            "type": "literal",
            "value": "/v0/evi/chats/"
          },
          {
            "type": "pathParameter",
            "value": "id"
          }
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.hume.ai"
          }
        ],
        "pathParameters": [
          {
            "key": "id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "Identifier for a chat. Formatted as a UUID."
          }
        ],
        "queryParameters": [
          {
            "key": "page_size",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                }
              }
            },
            "description": "The maximum number of results to include per page."
          },
          {
            "key": "page_number",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                }
              }
            },
            "description": "The page number of the results to return."
          }
        ],
        "response": {
          "statusCode": 200,
          "body": {
            "type": "alias",
            "value": {
              "type": "id",
              "id": "type_:ReturnChatPagedEvents"
            }
          }
        },
        "examples": [
          {
            "path": "/v0/evi/chats/id",
            "responseStatusCode": 200,
            "pathParameters": {
              "id": "id"
            },
            "queryParameters": {},
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "id": "id",
                "chat_group_id": "chat_group_id",
                "status": "status",
                "start_timestamp": 1,
                "events_page": [
                  {
                    "id": "id",
                    "chat_id": "chat_id",
                    "timestamp": 1,
                    "role": "role",
                    "type": "type",
                    "message_text": "message_text",
                    "emotion_features": "emotion_features",
                    "metadata": "metadata"
                  }
                ],
                "page_number": 1,
                "page_size": 1,
                "tag": "tag",
                "end_timestamp": 1,
                "metadata": "metadata",
                "config": {
                  "id": "id",
                  "version": 1
                }
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl https://api.hume.ai/v0/evi/chats/id",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumeClient } from \"hume\";\n\nconst hume = new HumeClient({ apiKey: \"YOUR_API_KEY\" });\nawait hume.empathicVoice.chats.listChatEvents(\"id\");\n",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "endpoint_chatGroups.list-chat-groups": {
        "id": "endpoint_chatGroups.list-chat-groups",
        "namespace": [
          "subpackage_chatGroups"
        ],
        "method": "GET",
        "path": [
          {
            "type": "literal",
            "value": "/v0/evi/chat_groups"
          }
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.hume.ai"
          }
        ],
        "queryParameters": [
          {
            "key": "page_number",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                }
              }
            },
            "description": "The page number of the results to return."
          },
          {
            "key": "page_size",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                }
              }
            },
            "description": "The maximum number of results to include per page."
          }
        ],
        "response": {
          "statusCode": 200,
          "body": {
            "type": "alias",
            "value": {
              "type": "id",
              "id": "type_:ReturnPagedChatGroups"
            }
          }
        },
        "examples": [
          {
            "path": "/v0/evi/chat_groups",
            "responseStatusCode": 200,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "page_number": 1,
                "page_size": 1,
                "chat_groups_page": [
                  {
                    "id": "id",
                    "first_start_timestamp": 1,
                    "most_recent_start_timestamp": 1,
                    "num_chats": 1,
                    "most_recent_chat_id": "most_recent_chat_id",
                    "active": true
                  }
                ]
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl https://api.hume.ai/v0/evi/chat_groups",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumeClient } from \"hume\";\n\nconst hume = new HumeClient({ apiKey: \"YOUR_API_KEY\" });\nawait hume.empathicVoice.chatGroups.listChatGroups();\n",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "endpoint_chatGroups.list-chat-group-events": {
        "id": "endpoint_chatGroups.list-chat-group-events",
        "namespace": [
          "subpackage_chatGroups"
        ],
        "method": "GET",
        "path": [
          {
            "type": "literal",
            "value": "/v0/evi/chat_groups/"
          },
          {
            "type": "pathParameter",
            "value": "id"
          },
          {
            "type": "literal",
            "value": "/events"
          }
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.hume.ai"
          }
        ],
        "pathParameters": [
          {
            "key": "id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "Identifier for a chat. Formatted as a UUID."
          }
        ],
        "queryParameters": [
          {
            "key": "page_size",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                }
              }
            },
            "description": "The maximum number of results to include per page."
          },
          {
            "key": "page_number",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                }
              }
            },
            "description": "The page number of the results to return."
          },
          {
            "key": "ascending_order",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "boolean"
                    }
                  }
                }
              }
            },
            "description": "Boolean to indicate if the results should be paginated in chronological order or reverse-chronological order. Defaults to true."
          }
        ],
        "response": {
          "statusCode": 200,
          "body": {
            "type": "alias",
            "value": {
              "type": "id",
              "id": "type_:ReturnChatGroupPagedEvents"
            }
          }
        },
        "examples": [
          {
            "path": "/v0/evi/chat_groups/id/events",
            "responseStatusCode": 200,
            "pathParameters": {
              "id": "id"
            },
            "queryParameters": {},
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "id": "id",
                "page_number": 1,
                "page_size": 1,
                "pagination_direction": "pagination_direction",
                "events_page": [
                  {
                    "id": "id",
                    "chat_id": "chat_id",
                    "timestamp": 1,
                    "role": "role",
                    "type": "type",
                    "message_text": "message_text",
                    "emotion_features": "emotion_features",
                    "metadata": "metadata"
                  }
                ]
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl https://api.hume.ai/v0/evi/chat_groups/id/events",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumeClient } from \"hume\";\n\nconst hume = new HumeClient({ apiKey: \"YOUR_API_KEY\" });\nawait hume.empathicVoice.chatGroups.listChatGroupEvents(\"id\");\n",
                  "generated": true
                }
              ]
            }
          }
        ]
      }
    },
    "websockets": {
      "subpackage_chat.chat": {
        "id": "subpackage_chat.chat",
        "namespace": [
          "subpackage_chat"
        ],
        "path": [
          {
            "type": "literal",
            "value": "/v0/evi/chat"
          }
        ],
        "messages": [
          {
            "type": "subscribe",
            "origin": "server",
            "body": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_chat:SubscribeEvent"
              }
            }
          },
          {
            "type": "publish",
            "origin": "client",
            "body": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_chat:PublishEvent"
              }
            }
          }
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "wss://api.hume.ai"
          }
        ],
        "queryParameters": [
          {
            "key": "access_token",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "description": "Access token used for authenticating the client."
          },
          {
            "key": "config_id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "description": "The unique identifier for the EVI configuration to be used."
          },
          {
            "key": "config_version",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                }
              }
            },
            "description": "The version number of the specified EVI configuration to be used."
          },
          {
            "key": "resumed_chat_group_id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "description": "The unique identifier for a chat group. Used to resume a previous chat."
          }
        ],
        "examples": [
          {
            "path": "/v0/evi/chat",
            "pathParameters": {},
            "queryParameters": {},
            "requestHeaders": {},
            "messages": [
              {
                "type": "publish",
                "body": {
                  "data": "data",
                  "type": "audio_input"
                }
              },
              {
                "type": "subscribe",
                "body": {
                  "type": "assistant_end"
                }
              }
            ]
          }
        ]
      }
    },
    "webhooks": {},
    "types": {
      "type_chat:SubscribeEvent": {
        "name": "SubscribeEvent",
        "shape": {
          "type": "undiscriminatedUnion",
          "variants": [
            {
              "displayName": "Assistant End",
              "shape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:AssistantEnd"
                }
              }
            },
            {
              "displayName": "Assistant Message",
              "shape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:AssistantMessage"
                }
              }
            },
            {
              "displayName": "Audio Output",
              "shape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:AudioOutput"
                }
              }
            },
            {
              "displayName": "Chat Metadata",
              "shape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:ChatMetadata"
                }
              }
            },
            {
              "displayName": "Web Socket Error",
              "shape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:WebSocketError"
                }
              }
            },
            {
              "displayName": "User Interruption",
              "shape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:UserInterruption"
                }
              }
            },
            {
              "displayName": "User Message",
              "shape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:UserMessage"
                }
              }
            },
            {
              "displayName": "Tool Call Message",
              "shape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:ToolCallMessage"
                }
              }
            },
            {
              "displayName": "Tool Response Message",
              "shape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:ToolResponseMessage"
                }
              }
            },
            {
              "displayName": "Tool Error Message",
              "shape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:ToolErrorMessage"
                }
              }
            }
          ]
        }
      },
      "type_chat:PublishEvent": {
        "name": "PublishEvent",
        "shape": {
          "type": "undiscriminatedUnion",
          "variants": [
            {
              "displayName": "Audio Input",
              "shape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:AudioInput"
                }
              }
            },
            {
              "displayName": "Session Settings",
              "shape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:SessionSettings"
                }
              }
            },
            {
              "displayName": "User Input",
              "shape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:UserInput"
                }
              }
            },
            {
              "displayName": "Assistant Input",
              "shape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:AssistantInput"
                }
              }
            },
            {
              "displayName": "Tool Response Message",
              "shape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:ToolResponseMessage"
                }
              }
            },
            {
              "displayName": "Tool Error Message",
              "shape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:ToolErrorMessage"
                }
              }
            },
            {
              "displayName": "Pause Assistant Message",
              "shape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:PauseAssistantMessage"
                }
              }
            },
            {
              "displayName": "Resume Assistant Message",
              "shape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:ResumeAssistantMessage"
                }
              }
            }
          ]
        }
      },
      "type_:ReturnUserDefinedTool": {
        "name": "ReturnUserDefinedTool",
        "description": "A specific tool version returned from the server",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "tool_type",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "Type of Tool. Values from the ToolType enum."
            },
            {
              "key": "id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "Identifier for a Tool. Formatted as a UUID."
            },
            {
              "key": "version",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              },
              "description": "Version number for a Tool. Version numbers should be integers. The combination of configId and version number is unique."
            },
            {
              "key": "version_type",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "Inidicates whether this tool is using a fixed version number or auto-updating to the latest version. Values from the VersionType enum."
            },
            {
              "key": "version_description",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "Description that is appended to a specific version of a Tool."
            },
            {
              "key": "name",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "Name applied to all versions of a particular Tool."
            },
            {
              "key": "created_on",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              },
              "description": "The timestamp when the first version of this tool was created."
            },
            {
              "key": "modified_on",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              },
              "description": "The timestamp when this version of the tool was created."
            },
            {
              "key": "fallback_content",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "Text to use if the tool fails to generate content."
            },
            {
              "key": "description",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "Text describing what the tool does."
            },
            {
              "key": "parameters",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "Stringified JSON defining the parameters used by this version of the Tool."
            }
          ]
        }
      },
      "type_:ReturnPrompt": {
        "name": "ReturnPrompt",
        "description": "A specific prompt version returned from the server",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "Identifier for a Prompt. Formatted as a UUID."
            },
            {
              "key": "version",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              },
              "description": "Version number for a Prompt. Version numbers should be integers. The combination of configId and version number is unique."
            },
            {
              "key": "version_type",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "Inidicates whether this prompt is using a fixed version number or auto-updating to the latest version. Values from the VersionType enum."
            },
            {
              "key": "version_description",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "Description that is appended to a specific version of a Prompt."
            },
            {
              "key": "name",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "Name applied to all versions of a particular Prompt."
            },
            {
              "key": "created_on",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              },
              "description": "The timestamp when the first version of this prompt was created."
            },
            {
              "key": "modified_on",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              },
              "description": "The timestamp when this version of the prompt was created."
            },
            {
              "key": "text",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "Text used for this version of the Prompt."
            }
          ]
        }
      },
      "type_:PostedBuiltinTool": {
        "name": "PostedBuiltinTool",
        "description": "A configuration of a built-in tool to be posted to the server",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "name",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "Name applied to all versions of a particular Tool."
            },
            {
              "key": "fallback_content",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "Text to use if the tool fails to generate content."
            }
          ]
        }
      },
      "type_:PostedLanguageModelModelProvider": {
        "name": "PostedLanguageModelModelProvider",
        "description": "The provider of this model. Based on the enum modelProvider.",
        "shape": {
          "type": "enum",
          "values": [
            {
              "value": "OPEN_AI"
            },
            {
              "value": "CUSTOM_LANGUAGE_MODEL"
            },
            {
              "value": "ANTHROPIC"
            },
            {
              "value": "FIREWORKS"
            },
            {
              "value": "GROQ"
            }
          ]
        }
      },
      "type_:PostedLanguageModel": {
        "name": "PostedLanguageModel",
        "description": "A LanguageModel to be posted to the server",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "model_provider",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:PostedLanguageModelModelProvider"
                    }
                  }
                }
              },
              "description": "The provider of this model. Based on the enum modelProvider."
            },
            {
              "key": "model_resource",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "String that specifies the model to use with modelProvider."
            },
            {
              "key": "temperature",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  }
                }
              },
              "description": "Model temperature."
            }
          ]
        }
      },
      "type_:PostedPromptSpec": {
        "name": "PostedPromptSpec",
        "description": "A specific prompt identifier to be posted to the server",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "Identifier for a Prompt. Formatted as a UUID."
            },
            {
              "key": "version",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                }
              },
              "description": "Version number for a Prompt. Version numbers should be integers. The combination of configId and version number is unique."
            }
          ]
        }
      },
      "type_:PostedUserDefinedToolSpec": {
        "name": "PostedUserDefinedToolSpec",
        "description": "A specific tool identifier to be posted to the server",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "Identifier for a Tool. Formatted as a UUID."
            },
            {
              "key": "version",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                }
              },
              "description": "Version number for a Tool. Version numbers should be integers. The combination of configId and version number is unique."
            }
          ]
        }
      },
      "type_:PostedVoiceName": {
        "name": "PostedVoiceName",
        "description": "String with the name of the voice to use.",
        "shape": {
          "type": "enum",
          "values": [
            {
              "value": "ITO"
            },
            {
              "value": "DACHER"
            }
          ]
        }
      },
      "type_:PostedVoice": {
        "name": "PostedVoice",
        "description": "A Voice specification posted to the server",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "provider",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "literal",
                      "value": {
                        "type": "stringLiteral",
                        "value": "HUME_AI"
                      }
                    }
                  }
                }
              },
              "description": "The provider of the voice to use."
            },
            {
              "key": "name",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:PostedVoiceName"
                }
              },
              "description": "String with the name of the voice to use."
            }
          ]
        }
      },
      "type_:ReturnBuiltinTool": {
        "name": "ReturnBuiltinTool",
        "description": "A specific builtin tool version returned from the server",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "tool_type",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "Type of Tool. Values from the ToolType enum."
            },
            {
              "key": "name",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "Name applied to all versions of a particular Tool."
            },
            {
              "key": "fallback_content",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "Text to use if the tool fails to generate content."
            }
          ]
        }
      },
      "type_:ReturnConfig": {
        "name": "ReturnConfig",
        "description": "A specific config version returned from the server",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "Identifier for a Config. Formatted as a UUID."
            },
            {
              "key": "version",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                }
              },
              "description": "Version number for a Config. Version numbers should be integers. The combination of configId and version number is unique."
            },
            {
              "key": "version_description",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "Description that is appended to a specific version of a Config."
            },
            {
              "key": "name",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "Name applied to all versions of a particular Config."
            },
            {
              "key": "created_on",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                }
              },
              "description": "The timestamp when the first version of this config was created."
            },
            {
              "key": "modified_on",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                }
              },
              "description": "The timestamp when this version of the config was created."
            },
            {
              "key": "prompt",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:ReturnPrompt"
                    }
                  }
                }
              }
            },
            {
              "key": "voice",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:ReturnVoice"
                    }
                  }
                }
              }
            },
            {
              "key": "language_model",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:ReturnLanguageModel"
                    }
                  }
                }
              }
            },
            {
              "key": "tools",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "list",
                      "itemShape": {
                        "type": "alias",
                        "value": {
                          "type": "optional",
                          "shape": {
                            "type": "alias",
                            "value": {
                              "type": "id",
                              "id": "type_:ReturnUserDefinedTool"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              },
              "description": "List of user-defined tools associated with this config."
            },
            {
              "key": "builtin_tools",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "list",
                      "itemShape": {
                        "type": "alias",
                        "value": {
                          "type": "optional",
                          "shape": {
                            "type": "alias",
                            "value": {
                              "type": "id",
                              "id": "type_:ReturnBuiltinTool"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              },
              "description": "List of built-in tools associated with this config"
            }
          ]
        }
      },
      "type_:ReturnLanguageModel": {
        "name": "ReturnLanguageModel",
        "description": "A specific LanguageModel",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "model_provider",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "The provider of this model. Based on the enum modelProvider."
            },
            {
              "key": "model_resource",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "String that specifies the model to use with modelProvider."
            },
            {
              "key": "temperature",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  }
                }
              },
              "description": "Model temperature."
            }
          ]
        }
      },
      "type_:ReturnVoice": {
        "name": "ReturnVoice",
        "description": "A specific voice specification",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "provider",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "The provider of the voice to use. Based on the enum VoiceProvider."
            },
            {
              "key": "name",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "String with the name of the voice to use."
            }
          ]
        }
      },
      "type_:ReturnPagedUserDefinedTools": {
        "name": "ReturnPagedUserDefinedTools",
        "description": "A paginated list of user defined tool versions returned from the server",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "page_number",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              },
              "description": "The page number of the returned results."
            },
            {
              "key": "page_size",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              },
              "description": "The number of results returned per page."
            },
            {
              "key": "tools_page",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "list",
                  "itemShape": {
                    "type": "alias",
                    "value": {
                      "type": "optional",
                      "shape": {
                        "type": "alias",
                        "value": {
                          "type": "id",
                          "id": "type_:ReturnUserDefinedTool"
                        }
                      }
                    }
                  }
                }
              },
              "description": "List of tools returned for the specified page number and page size."
            }
          ]
        }
      },
      "type_:ReturnPagedPrompts": {
        "name": "ReturnPagedPrompts",
        "description": "A paginated list of prompt versions returned from the server",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "page_number",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              },
              "description": "The page number of the returned results."
            },
            {
              "key": "page_size",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              },
              "description": "The number of results returned per page."
            },
            {
              "key": "prompts_page",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "list",
                  "itemShape": {
                    "type": "alias",
                    "value": {
                      "type": "optional",
                      "shape": {
                        "type": "alias",
                        "value": {
                          "type": "id",
                          "id": "type_:ReturnPrompt"
                        }
                      }
                    }
                  }
                }
              },
              "description": "List of prompts returned for the specified page number and page size."
            }
          ]
        }
      },
      "type_:ReturnPagedConfigs": {
        "name": "ReturnPagedConfigs",
        "description": "A paginated list of config versions returned from the server",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "page_number",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                }
              },
              "description": "The page number of the returned results."
            },
            {
              "key": "page_size",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                }
              },
              "description": "The number of results returned per page."
            },
            {
              "key": "configs_page",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "list",
                      "itemShape": {
                        "type": "alias",
                        "value": {
                          "type": "id",
                          "id": "type_:ReturnConfig"
                        }
                      }
                    }
                  }
                }
              },
              "description": "List of prompts returned for the specified page number and page size."
            }
          ]
        }
      },
      "type_:ReturnChat": {
        "name": "ReturnChat",
        "description": "A description of chat and its status",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "Identifier for a chat. Formatted as a UUID."
            },
            {
              "key": "chat_group_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "Identifier for the chat group. Any chat resumed from this chat will have the same chat_group_id. Formatted as a UUID."
            },
            {
              "key": "tag",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "Optional tag applied to this chat used to group chats by user, application, etc."
            },
            {
              "key": "status",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "The status of the chat. Values from the ChatStatus enum."
            },
            {
              "key": "start_timestamp",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              },
              "description": "The timestamp when the chat started, formatted as a Unix epoch milliseconds."
            },
            {
              "key": "end_timestamp",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                }
              },
              "description": "The timestamp when the chat ended, formatted as a Unix epoch milliseconds."
            },
            {
              "key": "event_count",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                }
              },
              "description": "The total number of events currently in this chat."
            },
            {
              "key": "metadata",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "Stringified JSON with additional metadata about the chat."
            },
            {
              "key": "config",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:ReturnConfigSpec"
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_:ReturnConfigSpec": {
        "name": "ReturnConfigSpec",
        "description": "An id/version number for a specific config version",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "Identifier for a Config. Formatted as a UUID."
            },
            {
              "key": "version",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                }
              },
              "description": "Version number for a Config. Version numbers should be integers. The combination of configId and version number is unique."
            }
          ]
        }
      },
      "type_:ReturnPagedChats": {
        "name": "ReturnPagedChats",
        "description": "A paginated list of chats returned from the server",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "page_number",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              },
              "description": "The page number of the returned results."
            },
            {
              "key": "page_size",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              },
              "description": "The number of results returned per page."
            },
            {
              "key": "chats_page",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "list",
                  "itemShape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:ReturnChat"
                    }
                  }
                }
              },
              "description": "List of chats and their metadata returned for the specified page number and page size."
            }
          ]
        }
      },
      "type_:ReturnChatEvent": {
        "name": "ReturnChatEvent",
        "description": "A description of a single event in a chat returned from the server",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "Identifier for a chat event. Formatted as a UUID."
            },
            {
              "key": "chat_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "Identifier for the chat this event occurred in. Formatted as a UUID."
            },
            {
              "key": "timestamp",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              },
              "description": "The timestamp when the chat event occurred, formatted as a Unix epoch milliseconds."
            },
            {
              "key": "role",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "The role of the user who generated the chat event. Values from the Role enum."
            },
            {
              "key": "type",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "The type of chat event. Values from the ChatEventType enum."
            },
            {
              "key": "message_text",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "The text of the chat message, either transcribed from speaker audio or generated by the agent."
            },
            {
              "key": "emotion_features",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "Stringified JSON with data about emotional content/prosody of the event."
            },
            {
              "key": "metadata",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "Stringified JSON with additional metadata about the chat event."
            }
          ]
        }
      },
      "type_:ReturnChatPagedEvents": {
        "name": "ReturnChatPagedEvents",
        "description": "A description of chat status with a paginated list of chat events returned from the server",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "Identifier for a chat. Formatted as a UUID."
            },
            {
              "key": "chat_group_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "Identifier for the chat group. Any chat resumed from this chat will have the same chat_group_id. Formatted as a UUID."
            },
            {
              "key": "tag",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "Optional tag applied to this chat used to group chats by user, application, etc."
            },
            {
              "key": "status",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "The status of the chat. Values from the ChatStatus enum."
            },
            {
              "key": "start_timestamp",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              },
              "description": "The timestamp when the chat started, formatted as a Unix epoch milliseconds."
            },
            {
              "key": "end_timestamp",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                }
              },
              "description": "The timestamp when the chat ended, formatted as a Unix epoch milliseconds."
            },
            {
              "key": "events_page",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "list",
                  "itemShape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:ReturnChatEvent"
                    }
                  }
                }
              },
              "description": "List of chat events with the specified page number and page size."
            },
            {
              "key": "metadata",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "Stringified JSON with additional metadata about the chat."
            },
            {
              "key": "page_number",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              },
              "description": "The page number of the returned results."
            },
            {
              "key": "page_size",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              },
              "description": "The number of results returned per page."
            },
            {
              "key": "config",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:ReturnConfigSpec"
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_:ReturnActiveChatCount": {
        "name": "ReturnActiveChatCount",
        "description": "A description of current chat chat sessions for a user",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "timestamp",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              },
              "description": "The timestamp for when chat status was measured. Formatted as a Unix epoch milliseconds."
            },
            {
              "key": "total_user_active_chats",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              },
              "description": "The total number of active chats for this user."
            },
            {
              "key": "max_allowed_active_chats",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                }
              },
              "description": "The maximum number of concurrent active chats for this user."
            },
            {
              "key": "more_active_chats_allowed",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "boolean"
                  }
                }
              },
              "description": "Boolean indicating if the user is allowed to start more chats."
            },
            {
              "key": "per_tag",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "list",
                      "itemShape": {
                        "type": "alias",
                        "value": {
                          "type": "optional",
                          "shape": {
                            "type": "alias",
                            "value": {
                              "type": "id",
                              "id": "type_:ReturnActiveChatCountPerTag"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              },
              "description": "Optional List of chat counts per tag."
            }
          ]
        }
      },
      "type_:ReturnActiveChatCountPerTag": {
        "name": "ReturnActiveChatCountPerTag",
        "description": "A description of current chat chat sessions per tag",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "tag",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "User tag applied to a chat."
            },
            {
              "key": "total_tag_active_chats",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              },
              "description": "The total number of active chats for this user with the specified tag."
            }
          ]
        }
      },
      "type_:ReturnChatGroupPagedEvents": {
        "name": "ReturnChatGroupPagedEvents",
        "description": "A paginated list of chat events that occurred across chats in this chat_group from the server",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "Identifier for the chat group. Any chat resumed from this chat will have the same chat_group_id. Formatted as a UUID."
            },
            {
              "key": "page_number",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              },
              "description": "The page number of the returned results."
            },
            {
              "key": "page_size",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              },
              "description": "The number of results returned per page."
            },
            {
              "key": "pagination_direction",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "The direction of the pagination (ASC or DESC)."
            },
            {
              "key": "events_page",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "list",
                  "itemShape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:ReturnChatEvent"
                    }
                  }
                }
              },
              "description": "List of chat_events returned for the specified page number and page size."
            }
          ]
        }
      },
      "type_:ReturnChatGroupPagedChats": {
        "name": "ReturnChatGroupPagedChats",
        "description": "A description of chat_group and its status with a paginated list of each chat in the chat_group",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "Identifier for the chat group. Any chat resumed from this chat will have the same chat_group_id. Formatted as a UUID."
            },
            {
              "key": "first_start_timestamp",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              },
              "description": "The timestamp when the first chat in this chat group started, formatted as a Unix epoch milliseconds."
            },
            {
              "key": "most_recent_start_timestamp",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              },
              "description": "The timestamp when the most recent chat in this chat group started, formatted as a Unix epoch milliseconds."
            },
            {
              "key": "num_chats",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              },
              "description": "The total number of chats in this chat group."
            },
            {
              "key": "page_number",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              },
              "description": "The page number of the returned results."
            },
            {
              "key": "page_size",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              },
              "description": "The number of results returned per page."
            },
            {
              "key": "chats_page",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "list",
                  "itemShape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:ReturnChat"
                    }
                  }
                }
              },
              "description": "List of chats and their metadata returned for the specified page number and page size."
            },
            {
              "key": "active",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean"
                      }
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_:ReturnChatGroup": {
        "name": "ReturnChatGroup",
        "description": "A description of chat_group and its status",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "Identifier for the chat group. Any chat resumed from this chat will have the same chat_group_id. Formatted as a UUID."
            },
            {
              "key": "first_start_timestamp",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              },
              "description": "The timestamp when the first chat in this chat group started, formatted as a Unix epoch milliseconds."
            },
            {
              "key": "most_recent_start_timestamp",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              },
              "description": "The timestamp when the most recent chat in this chat group started, formatted as a Unix epoch milliseconds."
            },
            {
              "key": "most_recent_chat_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "The chat_id of the most recent chat in this chat group. Formatted as a UUID."
            },
            {
              "key": "num_chats",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              },
              "description": "The total number of chats in this chat group."
            },
            {
              "key": "active",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean"
                      }
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_:ReturnPagedChatGroups": {
        "name": "ReturnPagedChatGroups",
        "description": "A paginated list of chat_groups returned from the server",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "page_number",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              },
              "description": "The page number of the returned results."
            },
            {
              "key": "page_size",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              },
              "description": "The number of results returned per page."
            },
            {
              "key": "chat_groups_page",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "list",
                  "itemShape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:ReturnChatGroup"
                    }
                  }
                }
              },
              "description": "List of chat_groups and their metadata returned for the specified page number and page size."
            }
          ]
        }
      },
      "type_:AssistantEnd": {
        "name": "AssistantEnd",
        "description": "When provided, the output is an assistant end message.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "custom_session_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "type",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "literal",
                  "value": {
                    "type": "stringLiteral",
                    "value": "assistant_end"
                  }
                }
              },
              "description": "The type of message sent through the socket; for an Assistant End message, this must be 'assistant_end'."
            }
          ]
        }
      },
      "type_:AssistantInput": {
        "name": "AssistantInput",
        "description": "When provided, the input is spoken by EVI.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "custom_session_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "text",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "Text to be synthesized."
            },
            {
              "key": "type",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "literal",
                  "value": {
                    "type": "stringLiteral",
                    "value": "assistant_input"
                  }
                }
              },
              "description": "The type of message sent through the socket; for an Assistant Input message, this must be 'assistant_input'."
            }
          ]
        }
      },
      "type_:AssistantMessage": {
        "name": "AssistantMessage",
        "description": "When provided, the output is an assistant message.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "custom_session_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "from_text",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "boolean"
                  }
                }
              },
              "description": "Indicates if this message was constructed from a text input message."
            },
            {
              "key": "id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "ID of the assistant message."
            },
            {
              "key": "message",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:ChatMessage"
                }
              },
              "description": "Transcript of the message."
            },
            {
              "key": "models",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:Inference"
                }
              },
              "description": "Inference model results."
            },
            {
              "key": "type",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "literal",
                  "value": {
                    "type": "stringLiteral",
                    "value": "assistant_message"
                  }
                }
              },
              "description": "The type of message sent through the socket; for an Assistant Message, this must be 'assistant_message'."
            }
          ]
        }
      },
      "type_:AudioConfiguration": {
        "name": "AudioConfiguration",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "channels",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              },
              "description": "Number of channels."
            },
            {
              "key": "encoding",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:Encoding"
                }
              },
              "description": "Audio encoding."
            },
            {
              "key": "sample_rate",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              },
              "description": "Audio sample rate."
            }
          ]
        }
      },
      "type_:AudioInput": {
        "name": "AudioInput",
        "description": "When provided, the input is audio.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "custom_session_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "data",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "Base64 encoded audio input."
            },
            {
              "key": "type",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "literal",
                  "value": {
                    "type": "stringLiteral",
                    "value": "audio_input"
                  }
                }
              },
              "description": "The type of message sent through the socket; for an Audio Input message, this must be 'audio_input'."
            }
          ]
        }
      },
      "type_:AudioOutput": {
        "name": "AudioOutput",
        "description": "When provided, the output is audio.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "custom_session_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "data",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "Base64 encoded audio output."
            },
            {
              "key": "id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "ID of the audio output."
            },
            {
              "key": "type",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "literal",
                  "value": {
                    "type": "stringLiteral",
                    "value": "audio_output"
                  }
                }
              },
              "description": "The type of message sent through the socket; for an Audio Output message, this must be 'audio_output'."
            }
          ]
        }
      },
      "type_:BuiltInTool": {
        "name": "BuiltInTool",
        "shape": {
          "type": "alias",
          "value": {
            "type": "literal",
            "value": {
              "type": "stringLiteral",
              "value": "web_search"
            }
          }
        }
      },
      "type_:BuiltinToolConfig": {
        "name": "BuiltinToolConfig",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "fallback_content",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "name",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:BuiltInTool"
                }
              }
            }
          ]
        }
      },
      "type_:ChatMessageToolResult": {
        "name": "ChatMessageToolResult",
        "description": "Function call response from client.",
        "shape": {
          "type": "undiscriminatedUnion",
          "variants": [
            {
              "displayName": "Tool Response Message",
              "shape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:ToolResponseMessage"
                }
              }
            },
            {
              "displayName": "Tool Error Message",
              "shape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:ToolErrorMessage"
                }
              }
            }
          ]
        }
      },
      "type_:ChatMessage": {
        "name": "ChatMessage",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "content",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "role",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:Role"
                }
              },
              "description": "Role of who is providing the message."
            },
            {
              "key": "tool_call",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:ToolCallMessage"
                    }
                  }
                }
              }
            },
            {
              "key": "tool_result",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:ChatMessageToolResult"
                    }
                  }
                }
              },
              "description": "Function call response from client."
            }
          ]
        }
      },
      "type_:ChatMetadata": {
        "name": "ChatMetadata",
        "description": "When provided, the output is a chat metadata message.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "chat_group_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "ID of the chat group. Used to resume a chat."
            },
            {
              "key": "chat_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "ID of the chat."
            },
            {
              "key": "custom_session_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "type",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "literal",
                  "value": {
                    "type": "stringLiteral",
                    "value": "chat_metadata"
                  }
                }
              },
              "description": "The type of message sent through the socket; for a Chat Metadata message, this must be 'chat_metadata'."
            }
          ]
        }
      },
      "type_:Context": {
        "name": "Context",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "text",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "User context to inject."
            },
            {
              "key": "type",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:ContextType"
                    }
                  }
                }
              },
              "description": "The persistence level of the injected context."
            }
          ]
        }
      },
      "type_:ContextType": {
        "name": "ContextType",
        "shape": {
          "type": "enum",
          "values": [
            {
              "value": "editable"
            },
            {
              "value": "persistent"
            },
            {
              "value": "temporary"
            }
          ]
        }
      },
      "type_:EmotionScores": {
        "name": "EmotionScores",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "Admiration",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "double"
                  }
                }
              }
            },
            {
              "key": "Adoration",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "double"
                  }
                }
              }
            },
            {
              "key": "Aesthetic Appreciation",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "double"
                  }
                }
              }
            },
            {
              "key": "Amusement",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "double"
                  }
                }
              }
            },
            {
              "key": "Anger",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "double"
                  }
                }
              }
            },
            {
              "key": "Anxiety",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "double"
                  }
                }
              }
            },
            {
              "key": "Awe",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "double"
                  }
                }
              }
            },
            {
              "key": "Awkwardness",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "double"
                  }
                }
              }
            },
            {
              "key": "Boredom",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "double"
                  }
                }
              }
            },
            {
              "key": "Calmness",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "double"
                  }
                }
              }
            },
            {
              "key": "Concentration",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "double"
                  }
                }
              }
            },
            {
              "key": "Confusion",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "double"
                  }
                }
              }
            },
            {
              "key": "Contemplation",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "double"
                  }
                }
              }
            },
            {
              "key": "Contempt",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "double"
                  }
                }
              }
            },
            {
              "key": "Contentment",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "double"
                  }
                }
              }
            },
            {
              "key": "Craving",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "double"
                  }
                }
              }
            },
            {
              "key": "Desire",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "double"
                  }
                }
              }
            },
            {
              "key": "Determination",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "double"
                  }
                }
              }
            },
            {
              "key": "Disappointment",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "double"
                  }
                }
              }
            },
            {
              "key": "Disgust",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "double"
                  }
                }
              }
            },
            {
              "key": "Distress",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "double"
                  }
                }
              }
            },
            {
              "key": "Doubt",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "double"
                  }
                }
              }
            },
            {
              "key": "Ecstasy",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "double"
                  }
                }
              }
            },
            {
              "key": "Embarrassment",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "double"
                  }
                }
              }
            },
            {
              "key": "Empathic Pain",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "double"
                  }
                }
              }
            },
            {
              "key": "Entrancement",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "double"
                  }
                }
              }
            },
            {
              "key": "Envy",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "double"
                  }
                }
              }
            },
            {
              "key": "Excitement",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "double"
                  }
                }
              }
            },
            {
              "key": "Fear",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "double"
                  }
                }
              }
            },
            {
              "key": "Guilt",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "double"
                  }
                }
              }
            },
            {
              "key": "Horror",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "double"
                  }
                }
              }
            },
            {
              "key": "Interest",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "double"
                  }
                }
              }
            },
            {
              "key": "Joy",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "double"
                  }
                }
              }
            },
            {
              "key": "Love",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "double"
                  }
                }
              }
            },
            {
              "key": "Nostalgia",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "double"
                  }
                }
              }
            },
            {
              "key": "Pain",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "double"
                  }
                }
              }
            },
            {
              "key": "Pride",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "double"
                  }
                }
              }
            },
            {
              "key": "Realization",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "double"
                  }
                }
              }
            },
            {
              "key": "Relief",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "double"
                  }
                }
              }
            },
            {
              "key": "Romance",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "double"
                  }
                }
              }
            },
            {
              "key": "Sadness",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "double"
                  }
                }
              }
            },
            {
              "key": "Satisfaction",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "double"
                  }
                }
              }
            },
            {
              "key": "Shame",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "double"
                  }
                }
              }
            },
            {
              "key": "Surprise (negative)",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "double"
                  }
                }
              }
            },
            {
              "key": "Surprise (positive)",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "double"
                  }
                }
              }
            },
            {
              "key": "Sympathy",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "double"
                  }
                }
              }
            },
            {
              "key": "Tiredness",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "double"
                  }
                }
              }
            },
            {
              "key": "Triumph",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "double"
                  }
                }
              }
            }
          ]
        }
      },
      "type_:Encoding": {
        "name": "Encoding",
        "shape": {
          "type": "alias",
          "value": {
            "type": "literal",
            "value": {
              "type": "stringLiteral",
              "value": "linear16"
            }
          }
        }
      },
      "type_:WebSocketError": {
        "name": "WebSocketError",
        "description": "When provided, the output is an error message.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "code",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "Error code."
            },
            {
              "key": "custom_session_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "message",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "Error message."
            },
            {
              "key": "slug",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "Error slug."
            },
            {
              "key": "type",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "literal",
                  "value": {
                    "type": "stringLiteral",
                    "value": "error"
                  }
                }
              },
              "description": "The type of message sent through the socket; for a Web Socket Error message, this must be 'error'."
            }
          ]
        }
      },
      "type_:ErrorLevel": {
        "name": "ErrorLevel",
        "shape": {
          "type": "alias",
          "value": {
            "type": "literal",
            "value": {
              "type": "stringLiteral",
              "value": "warn"
            }
          }
        }
      },
      "type_:Inference": {
        "name": "Inference",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "prosody",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:ProsodyInference"
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_:MillisecondInterval": {
        "name": "MillisecondInterval",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "begin",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              },
              "description": "Start time of the interval in milliseconds."
            },
            {
              "key": "end",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              },
              "description": "End time of the interval in milliseconds."
            }
          ]
        }
      },
      "type_:PauseAssistantMessage": {
        "name": "PauseAssistantMessage",
        "description": "Pause responses from EVI. Chat history is still saved and sent after resuming.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "custom_session_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "type",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "literal",
                      "value": {
                        "type": "stringLiteral",
                        "value": "pause_assistant_message"
                      }
                    }
                  }
                }
              },
              "description": "The type of message sent through the socket; for a Pause Assistant message, this must be 'pause_assistant_message'."
            }
          ]
        }
      },
      "type_:ProsodyInference": {
        "name": "ProsodyInference",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "scores",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:EmotionScores"
                }
              }
            }
          ]
        }
      },
      "type_:ResumeAssistantMessage": {
        "name": "ResumeAssistantMessage",
        "description": "Resume responses from EVI. Chat history sent while paused will now be sent.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "custom_session_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "type",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "literal",
                      "value": {
                        "type": "stringLiteral",
                        "value": "resume_assistant_message"
                      }
                    }
                  }
                }
              },
              "description": "The type of message sent through the socket; for a Resume Assistant message, this must be 'resume_assistant_message'."
            }
          ]
        }
      },
      "type_:Role": {
        "name": "Role",
        "shape": {
          "type": "enum",
          "values": [
            {
              "value": "assistant"
            },
            {
              "value": "system"
            },
            {
              "value": "user"
            },
            {
              "value": "all"
            },
            {
              "value": "tool"
            }
          ]
        }
      },
      "type_:SessionSettings": {
        "name": "SessionSettings",
        "description": "Settings for this chat session.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "audio",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:AudioConfiguration"
                    }
                  }
                }
              }
            },
            {
              "key": "builtin_tools",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "list",
                      "itemShape": {
                        "type": "alias",
                        "value": {
                          "type": "id",
                          "id": "type_:BuiltinToolConfig"
                        }
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "custom_session_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "language_model_api_key",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "system_prompt",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "tools",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "list",
                      "itemShape": {
                        "type": "alias",
                        "value": {
                          "type": "id",
                          "id": "type_:Tool"
                        }
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "type",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "literal",
                  "value": {
                    "type": "stringLiteral",
                    "value": "session_settings"
                  }
                }
              },
              "description": "The type of message sent through the socket; for a Session Settings message, this must be 'session_settings'."
            }
          ]
        }
      },
      "type_:Tool": {
        "name": "Tool",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "description",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "fallback_content",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "name",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "Name of the tool."
            },
            {
              "key": "parameters",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "Parameters of the tool. Is a stringified JSON schema."
            },
            {
              "key": "type",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:ToolType"
                }
              },
              "description": "Type of tool."
            }
          ]
        }
      },
      "type_:ToolCallMessage": {
        "name": "ToolCallMessage",
        "description": "When provided, the output is a tool call.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "custom_session_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "name",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "Name of the tool called."
            },
            {
              "key": "parameters",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "Parameters of the tool call. Is a stringified JSON schema."
            },
            {
              "key": "response_required",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "boolean"
                  }
                }
              },
              "description": "Whether a response is required from the developer."
            },
            {
              "key": "tool_call_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "ID of the tool call."
            },
            {
              "key": "tool_type",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:ToolType"
                }
              },
              "description": "Type of tool called, either 'builtin' or 'function'."
            },
            {
              "key": "type",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "literal",
                      "value": {
                        "type": "stringLiteral",
                        "value": "tool_call"
                      }
                    }
                  }
                }
              },
              "description": "The type of message sent through the socket; for a Tool Call message, this must be 'tool_call'."
            }
          ]
        }
      },
      "type_:ToolErrorMessage": {
        "name": "ToolErrorMessage",
        "description": "When provided, the output is a function call error.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "code",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "content",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "custom_session_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "error",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "Error message from the tool call, not exposed to the LLM or user."
            },
            {
              "key": "level",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:ErrorLevel"
                    }
                  }
                }
              }
            },
            {
              "key": "tool_call_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "ID of the tool call."
            },
            {
              "key": "tool_type",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:ToolType"
                    }
                  }
                }
              }
            },
            {
              "key": "type",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "literal",
                      "value": {
                        "type": "stringLiteral",
                        "value": "tool_error"
                      }
                    }
                  }
                }
              },
              "description": "The type of message sent through the socket; for a Tool Error message, this must be 'tool_error'."
            }
          ]
        }
      },
      "type_:ToolResponseMessage": {
        "name": "ToolResponseMessage",
        "description": "When provided, the output is a function call response.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "content",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "Return value of the tool call."
            },
            {
              "key": "custom_session_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "tool_call_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "ID of the tool call."
            },
            {
              "key": "tool_name",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "tool_type",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:ToolType"
                    }
                  }
                }
              }
            },
            {
              "key": "type",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "literal",
                      "value": {
                        "type": "stringLiteral",
                        "value": "tool_response"
                      }
                    }
                  }
                }
              },
              "description": "The type of message sent through the socket; for a Tool Response message, this must be ‘tool_response’."
            }
          ]
        }
      },
      "type_:ToolType": {
        "name": "ToolType",
        "shape": {
          "type": "enum",
          "values": [
            {
              "value": "builtin"
            },
            {
              "value": "function"
            }
          ]
        }
      },
      "type_:UserInput": {
        "name": "UserInput",
        "description": "User text to insert into the conversation.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "custom_session_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "text",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "User text to insert into the conversation."
            },
            {
              "key": "type",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "literal",
                  "value": {
                    "type": "stringLiteral",
                    "value": "user_input"
                  }
                }
              },
              "description": "The type of message sent through the socket; for a User Input message, this must be ‘user_input’."
            }
          ]
        }
      },
      "type_:UserInterruption": {
        "name": "UserInterruption",
        "description": "When provided, the output is an interruption.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "custom_session_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "time",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              },
              "description": "Unix timestamp of the detected user interruption."
            },
            {
              "key": "type",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "literal",
                  "value": {
                    "type": "stringLiteral",
                    "value": "user_interruption"
                  }
                }
              },
              "description": "The type of message sent through the socket; for a User Interruption message, this must be 'user_interruption'."
            }
          ]
        }
      },
      "type_:UserMessage": {
        "name": "UserMessage",
        "description": "When provided, the output is a user message.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "custom_session_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "from_text",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "boolean"
                  }
                }
              },
              "description": "Indicates if this message was constructed from a text input message."
            },
            {
              "key": "message",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:ChatMessage"
                }
              },
              "description": "Transcript of the message."
            },
            {
              "key": "models",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:Inference"
                }
              },
              "description": "Inference model results."
            },
            {
              "key": "time",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:MillisecondInterval"
                }
              },
              "description": "Start and End time of user message."
            },
            {
              "key": "type",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "literal",
                  "value": {
                    "type": "stringLiteral",
                    "value": "user_message"
                  }
                }
              }
            }
          ]
        }
      },
      "type_:TtsInput": {
        "name": "TtsInput",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "type",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "literal",
                      "value": {
                        "type": "stringLiteral",
                        "value": "tts"
                      }
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_:TextInput": {
        "name": "TextInput",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "type",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "literal",
                      "value": {
                        "type": "stringLiteral",
                        "value": "text_input"
                      }
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_:FunctionCallResponseInput": {
        "name": "FunctionCallResponseInput",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "type",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "literal",
                      "value": {
                        "type": "stringLiteral",
                        "value": "function_call_response"
                      }
                    }
                  }
                }
              }
            }
          ]
        }
      }
    },
    "subpackages": {
      "subpackage_tools": {
        "id": "subpackage_tools",
        "name": "tools"
      },
      "subpackage_prompts": {
        "id": "subpackage_prompts",
        "name": "prompts"
      },
      "subpackage_configs": {
        "id": "subpackage_configs",
        "name": "configs"
      },
      "subpackage_chats": {
        "id": "subpackage_chats",
        "name": "chats"
      },
      "subpackage_chatGroups": {
        "id": "subpackage_chatGroups",
        "name": "chatGroups"
      },
      "subpackage_chat": {
        "id": "subpackage_chat",
        "name": "chat"
      }
    },
    "auths": {
      "default": {
        "type": "header",
        "headerWireValue": "X-Hume-Api-Key",
        "nameOverride": "apiKey"
      }
    }
  }
]