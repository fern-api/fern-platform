[
  {
    "id": "869ccf90-2c73-42af-9c3f-94ddd28c5256",
    "endpoints": {
      "endpoint_files.list-files": {
        "id": "endpoint_files.list-files",
        "namespace": [
          "subpackage_files"
        ],
        "description": "Returns 200 if successful",
        "method": "GET",
        "path": [
          {
            "type": "literal",
            "value": "/v0/registry/files"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.hume.ai"
          }
        ],
        "queryParameters": [
          {
            "key": "page_number",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                }
              }
            },
            "description": "Index of the first result"
          },
          {
            "key": "page_size",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                }
              }
            },
            "description": "Maximum number of results"
          },
          {
            "key": "shared_assets",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "boolean",
                      "default": false
                    }
                  }
                }
              }
            },
            "description": "`True` Will show all assets owned by you and shared with you. `False` Will show only your assets. Default: `False`"
          }
        ],
        "requests": [],
        "responses": [
          {
            "description": "Success",
            "statusCode": 200,
            "body": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:FilePage"
              }
            }
          }
        ],
        "examples": [
          {
            "path": "/v0/registry/files",
            "responseStatusCode": 200,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "content": [
                  {
                    "file": {
                      "id": "id",
                      "user_id": "user_id",
                      "data_type": "data_type",
                      "is_sanitized": true,
                      "is_owned_by_reader": true
                    },
                    "attributes": [
                      {
                        "name": "name",
                        "value": "value"
                      }
                    ]
                  }
                ],
                "pageable": {
                  "offset": 1000000,
                  "sort": {
                    "empty": true,
                    "sorted": true,
                    "unsorted": true
                  },
                  "paged": true,
                  "unpaged": true,
                  "page_number": 1,
                  "page_size": 1
                },
                "total": 1000000,
                "last": true,
                "total_elements": 1000000,
                "total_pages": 1,
                "size": 1,
                "number": 1,
                "sort": {
                  "empty": true,
                  "sorted": true,
                  "unsorted": true
                },
                "first": true,
                "number_of_elements": 1,
                "empty": true
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl https://api.hume.ai/v0/registry/files \\\n     -H \"X-Hume-Api-Key: <apiKey>\"",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "endpoint_files.create-files": {
        "id": "endpoint_files.create-files",
        "namespace": [
          "subpackage_files"
        ],
        "description": "Returns 201 if successful",
        "method": "POST",
        "path": [
          {
            "type": "literal",
            "value": "/v0/registry/files"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.hume.ai"
          }
        ],
        "requests": [
          {
            "description": "List of Files with Attributes to be created",
            "contentType": "application/json",
            "body": {
              "type": "alias",
              "value": {
                "type": "list",
                "itemShape": {
                  "type": "alias",
                  "value": {
                    "type": "id",
                    "id": "type_:FileWithAttributesInput"
                  }
                }
              }
            }
          }
        ],
        "responses": [
          {
            "description": "Success",
            "statusCode": 200,
            "body": {
              "type": "alias",
              "value": {
                "type": "list",
                "itemShape": {
                  "type": "alias",
                  "value": {
                    "type": "id",
                    "id": "type_:FileWithAttributes"
                  }
                }
              }
            }
          }
        ],
        "examples": [
          {
            "path": "/v0/registry/files",
            "responseStatusCode": 200,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": [
                {
                  "file": {
                    "name": "name",
                    "hume_storage": true,
                    "data_type": "data_type"
                  }
                }
              ]
            },
            "responseBody": {
              "type": "json",
              "value": [
                {
                  "file": {
                    "id": "id",
                    "user_id": "user_id",
                    "data_type": "data_type",
                    "is_sanitized": true,
                    "is_owned_by_reader": true,
                    "name": "name",
                    "uri": "uri",
                    "upload_uri": "upload_uri",
                    "thumbnail_uri": "thumbnail_uri",
                    "created_on": 1000000,
                    "modified_on": 1000000,
                    "metadata": {
                      "key": {
                        "key": "value"
                      }
                    },
                    "hume_storage": true,
                    "hume_storage_upload_timestamp": 1000000,
                    "is_linked_to_publicly_shared": true,
                    "is_linked_to_hume_model": true
                  },
                  "attributes": [
                    {
                      "name": "name",
                      "value": "value"
                    }
                  ]
                }
              ]
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://api.hume.ai/v0/registry/files \\\n     -H \"X-Hume-Api-Key: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '[\n  {\n    \"file\": {\n      \"name\": \"name\",\n      \"hume_storage\": true,\n      \"data_type\": \"data_type\"\n    }\n  }\n]'",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "endpoint_files.upload-file": {
        "id": "endpoint_files.upload-file",
        "namespace": [
          "subpackage_files"
        ],
        "description": "Upload a file synchronously. Returns 201 if successful. Files must have a name. Files must specify Content-Type. Request bodies, and therefore files, are limited to 100MB",
        "method": "POST",
        "path": [
          {
            "type": "literal",
            "value": "/v0/registry/files/upload"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.hume.ai"
          }
        ],
        "requests": [
          {
            "contentType": "multipart/form-data",
            "body": {
              "type": "formData",
              "fields": [
                {
                  "type": "file",
                  "key": "file",
                  "isOptional": false
                },
                {
                  "type": "file",
                  "key": "attributes",
                  "isOptional": true
                }
              ]
            }
          }
        ],
        "responses": [
          {
            "description": "Success",
            "statusCode": 200,
            "body": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:FileWithAttributes"
              }
            }
          }
        ],
        "examples": [
          {
            "path": "/v0/registry/files/upload",
            "responseStatusCode": 200,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "form",
              "value": {
                "file": {
                  "type": "filename",
                  "value": "<filename1>"
                }
              }
            },
            "responseBody": {
              "type": "json",
              "value": {
                "file": {
                  "id": "string",
                  "user_id": "string",
                  "data_type": "string",
                  "is_sanitized": true,
                  "is_owned_by_reader": true,
                  "name": "string",
                  "uri": "string",
                  "upload_uri": "string",
                  "thumbnail_uri": "string",
                  "created_on": 99999,
                  "modified_on": 99999,
                  "metadata": {
                    "string": {
                      "string": {}
                    }
                  },
                  "hume_storage": true,
                  "hume_storage_upload_timestamp": 99999,
                  "is_linked_to_publicly_shared": true,
                  "is_linked_to_hume_model": true
                },
                "attributes": [
                  {
                    "name": "string",
                    "value": "string"
                  }
                ]
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://api.hume.ai/v0/registry/files/upload \\\n     -H \"X-Hume-Api-Key: <apiKey>\" \\\n     -H \"Content-Type: multipart/form-data\" \\\n     -F file=@<filename1>",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "endpoint_files.get-file": {
        "id": "endpoint_files.get-file",
        "namespace": [
          "subpackage_files"
        ],
        "description": "Returns 200 if successful",
        "method": "GET",
        "path": [
          {
            "type": "literal",
            "value": "/v0/registry/files/"
          },
          {
            "type": "pathParameter",
            "value": "id"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.hume.ai"
          }
        ],
        "pathParameters": [
          {
            "key": "id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "Hume-generated ID of a File"
          }
        ],
        "requests": [],
        "responses": [
          {
            "description": "Success",
            "statusCode": 200,
            "body": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:FileWithAttributes"
              }
            }
          }
        ],
        "examples": [
          {
            "path": "/v0/registry/files/id",
            "responseStatusCode": 200,
            "pathParameters": {
              "id": "id"
            },
            "queryParameters": {},
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "file": {
                  "id": "id",
                  "user_id": "user_id",
                  "data_type": "data_type",
                  "is_sanitized": true,
                  "is_owned_by_reader": true,
                  "name": "name",
                  "uri": "uri",
                  "upload_uri": "upload_uri",
                  "thumbnail_uri": "thumbnail_uri",
                  "created_on": 1000000,
                  "modified_on": 1000000,
                  "metadata": {
                    "key": {
                      "key": "value"
                    }
                  },
                  "hume_storage": true,
                  "hume_storage_upload_timestamp": 1000000,
                  "is_linked_to_publicly_shared": true,
                  "is_linked_to_hume_model": true
                },
                "attributes": [
                  {
                    "name": "name",
                    "value": "value"
                  }
                ]
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl https://api.hume.ai/v0/registry/files/id \\\n     -H \"X-Hume-Api-Key: <apiKey>\"",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "endpoint_files.delete-file": {
        "id": "endpoint_files.delete-file",
        "namespace": [
          "subpackage_files"
        ],
        "description": "Returns 204 if successful",
        "method": "DELETE",
        "path": [
          {
            "type": "literal",
            "value": "/v0/registry/files/"
          },
          {
            "type": "pathParameter",
            "value": "id"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.hume.ai"
          }
        ],
        "pathParameters": [
          {
            "key": "id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "Hume-generated ID of a File"
          }
        ],
        "requests": [],
        "responses": [
          {
            "description": "Success",
            "statusCode": 200,
            "body": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:Unit"
              }
            }
          }
        ],
        "examples": [
          {
            "path": "/v0/registry/files/id",
            "responseStatusCode": 200,
            "pathParameters": {
              "id": "id"
            },
            "queryParameters": {},
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "key": "value"
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X DELETE https://api.hume.ai/v0/registry/files/id \\\n     -H \"X-Hume-Api-Key: <apiKey>\"",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "endpoint_files.update-file-name": {
        "id": "endpoint_files.update-file-name",
        "namespace": [
          "subpackage_files"
        ],
        "description": "Returns 200 if successful",
        "method": "PATCH",
        "path": [
          {
            "type": "literal",
            "value": "/v0/registry/files/"
          },
          {
            "type": "pathParameter",
            "value": "id"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.hume.ai"
          }
        ],
        "pathParameters": [
          {
            "key": "id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "Hume-generated ID of a File"
          }
        ],
        "queryParameters": [
          {
            "key": "name",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "New File name"
          }
        ],
        "requests": [],
        "responses": [
          {
            "description": "Success",
            "statusCode": 200,
            "body": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:FileWithAttributes"
              }
            }
          }
        ],
        "examples": [
          {
            "path": "/v0/registry/files/id",
            "responseStatusCode": 200,
            "pathParameters": {
              "id": "id"
            },
            "queryParameters": {
              "name": "name"
            },
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "file": {
                  "id": "id",
                  "user_id": "user_id",
                  "data_type": "data_type",
                  "is_sanitized": true,
                  "is_owned_by_reader": true,
                  "name": "name",
                  "uri": "uri",
                  "upload_uri": "upload_uri",
                  "thumbnail_uri": "thumbnail_uri",
                  "created_on": 1000000,
                  "modified_on": 1000000,
                  "metadata": {
                    "key": {
                      "key": "value"
                    }
                  },
                  "hume_storage": true,
                  "hume_storage_upload_timestamp": 1000000,
                  "is_linked_to_publicly_shared": true,
                  "is_linked_to_hume_model": true
                },
                "attributes": [
                  {
                    "name": "name",
                    "value": "value"
                  }
                ]
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X PATCH \"https://api.hume.ai/v0/registry/files/id?name=name\" \\\n     -H \"X-Hume-Api-Key: <apiKey>\"",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "endpoint_files.get-file-predictions": {
        "id": "endpoint_files.get-file-predictions",
        "namespace": [
          "subpackage_files"
        ],
        "description": "Returns 200 if successful",
        "method": "GET",
        "path": [
          {
            "type": "literal",
            "value": "/v0/registry/files/"
          },
          {
            "type": "pathParameter",
            "value": "id"
          },
          {
            "type": "literal",
            "value": "/predictions"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.hume.ai"
          }
        ],
        "pathParameters": [
          {
            "key": "id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "Hume-generated ID of a File"
          }
        ],
        "requests": [],
        "responses": [
          {
            "description": "Success",
            "statusCode": 200,
            "body": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "examples": [
          {
            "path": "/v0/registry/files/id/predictions",
            "responseStatusCode": 200,
            "pathParameters": {
              "id": "id"
            },
            "queryParameters": {},
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": "string"
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl https://api.hume.ai/v0/registry/files/id/predictions \\\n     -H \"X-Hume-Api-Key: <apiKey>\"",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "endpoint_datasets.list-datasets": {
        "id": "endpoint_datasets.list-datasets",
        "namespace": [
          "subpackage_datasets"
        ],
        "description": "Returns 200 if successful",
        "method": "GET",
        "path": [
          {
            "type": "literal",
            "value": "/v0/registry/datasets"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.hume.ai"
          }
        ],
        "queryParameters": [
          {
            "key": "name",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "description": "Dataset name to be queried"
          },
          {
            "key": "page_number",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                }
              }
            },
            "description": "Index of the first result"
          },
          {
            "key": "page_size",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                }
              }
            },
            "description": "Maximum number of results"
          },
          {
            "key": "shared_assets",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "boolean",
                      "default": false
                    }
                  }
                }
              }
            },
            "description": "`True` Will show all assets owned by you and shared with you. `False` Will show only your assets. Default: `False`"
          }
        ],
        "requests": [],
        "responses": [
          {
            "description": "Success",
            "statusCode": 200,
            "body": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:DatasetPage"
              }
            }
          }
        ],
        "examples": [
          {
            "path": "/v0/registry/datasets",
            "responseStatusCode": 200,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "content": [
                  {
                    "name": "name",
                    "id": "id",
                    "latest_version": {
                      "id": "id",
                      "user_id": "user_id",
                      "labels_file_uri": "labels_file_uri",
                      "feature_types": {
                        "key": "CATEGORICAL"
                      },
                      "dataset_id": "dataset_id",
                      "dataset_version": 1,
                      "created_on": 1000000
                    },
                    "modified_on": 1,
                    "metadata": {
                      "key": {
                        "key": "value"
                      }
                    }
                  }
                ],
                "pageable": {
                  "offset": 1000000,
                  "sort": {
                    "empty": true,
                    "sorted": true,
                    "unsorted": true
                  },
                  "paged": true,
                  "unpaged": true,
                  "page_number": 1,
                  "page_size": 1
                },
                "total": 1000000,
                "last": true,
                "total_elements": 1000000,
                "total_pages": 1,
                "size": 1,
                "number": 1,
                "sort": {
                  "empty": true,
                  "sorted": true,
                  "unsorted": true
                },
                "first": true,
                "number_of_elements": 1,
                "empty": true
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl https://api.hume.ai/v0/registry/datasets \\\n     -H \"X-Hume-Api-Key: <apiKey>\"",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "endpoint_datasets.create-dataset": {
        "id": "endpoint_datasets.create-dataset",
        "namespace": [
          "subpackage_datasets"
        ],
        "description": "Returns 201 if successful",
        "method": "POST",
        "path": [
          {
            "type": "literal",
            "value": "/v0/registry/datasets"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.hume.ai"
          }
        ],
        "requests": [
          {
            "contentType": "multipart/form-data",
            "body": {
              "type": "formData",
              "fields": [
                {
                  "type": "property",
                  "key": "name",
                  "description": "Name of the Dataset to be created",
                  "valueShape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "type": "file",
                  "key": "feature_types",
                  "isOptional": true
                },
                {
                  "type": "file",
                  "key": "labels_file",
                  "isOptional": false
                }
              ]
            }
          }
        ],
        "responses": [
          {
            "description": "Success",
            "statusCode": 200,
            "body": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:ReturnDataset"
              }
            }
          }
        ],
        "examples": [
          {
            "path": "/v0/registry/datasets",
            "responseStatusCode": 200,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "form",
              "value": {
                "name": {
                  "type": "json",
                  "value": "string"
                },
                "labels_file": {
                  "type": "filename",
                  "value": "<filename1>"
                }
              }
            },
            "responseBody": {
              "type": "json",
              "value": {
                "name": "string",
                "id": "string",
                "latest_version": {
                  "id": "string",
                  "user_id": "string",
                  "labels_file_uri": "string",
                  "feature_types": {
                    "string": "CATEGORICAL"
                  },
                  "dataset_id": "string",
                  "dataset_version": 0,
                  "created_on": 99999
                },
                "modified_on": 0,
                "metadata": {
                  "string": {
                    "string": {}
                  }
                }
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://api.hume.ai/v0/registry/datasets \\\n     -H \"X-Hume-Api-Key: <apiKey>\" \\\n     -H \"Content-Type: multipart/form-data\" \\\n     -F name=\"string\" \\\n     -F labels_file=@<filename1>",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "endpoint_datasets.get-dataset": {
        "id": "endpoint_datasets.get-dataset",
        "namespace": [
          "subpackage_datasets"
        ],
        "description": "Returns 200 if successful",
        "method": "GET",
        "path": [
          {
            "type": "literal",
            "value": "/v0/registry/datasets/"
          },
          {
            "type": "pathParameter",
            "value": "id"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.hume.ai"
          }
        ],
        "pathParameters": [
          {
            "key": "id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "Hume-generated ID of a Dataset"
          }
        ],
        "requests": [],
        "responses": [
          {
            "description": "Success",
            "statusCode": 200,
            "body": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:ReturnDataset"
              }
            }
          }
        ],
        "examples": [
          {
            "path": "/v0/registry/datasets/id",
            "responseStatusCode": 200,
            "pathParameters": {
              "id": "id"
            },
            "queryParameters": {},
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "name": "name",
                "id": "id",
                "latest_version": {
                  "id": "id",
                  "user_id": "user_id",
                  "labels_file_uri": "labels_file_uri",
                  "feature_types": {
                    "key": "CATEGORICAL"
                  },
                  "dataset_id": "dataset_id",
                  "dataset_version": 1,
                  "created_on": 1000000
                },
                "modified_on": 1,
                "metadata": {
                  "key": {
                    "key": "value"
                  }
                }
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl https://api.hume.ai/v0/registry/datasets/id \\\n     -H \"X-Hume-Api-Key: <apiKey>\"",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "endpoint_datasets.create-dataset-version": {
        "id": "endpoint_datasets.create-dataset-version",
        "namespace": [
          "subpackage_datasets"
        ],
        "description": "Returns 200 if successful",
        "method": "POST",
        "path": [
          {
            "type": "literal",
            "value": "/v0/registry/datasets/"
          },
          {
            "type": "pathParameter",
            "value": "id"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.hume.ai"
          }
        ],
        "pathParameters": [
          {
            "key": "id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "Hume-generated ID of a Dataset"
          }
        ],
        "requests": [
          {
            "contentType": "multipart/form-data",
            "body": {
              "type": "formData",
              "fields": [
                {
                  "type": "file",
                  "key": "feature_types",
                  "isOptional": true
                },
                {
                  "type": "file",
                  "key": "labels_file",
                  "isOptional": false
                }
              ]
            }
          }
        ],
        "responses": [
          {
            "description": "Success",
            "statusCode": 200,
            "body": {
              "type": "alias",
              "value": {
                "type": "list",
                "itemShape": {
                  "type": "alias",
                  "value": {
                    "type": "id",
                    "id": "type_:ReturnDataset"
                  }
                }
              }
            }
          }
        ],
        "examples": [
          {
            "path": "/v0/registry/datasets/:id",
            "responseStatusCode": 200,
            "pathParameters": {
              "id": ":id"
            },
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "form",
              "value": {
                "labels_file": {
                  "type": "filename",
                  "value": "<filename1>"
                }
              }
            },
            "responseBody": {
              "type": "json",
              "value": [
                {
                  "name": "string",
                  "id": "string",
                  "latest_version": {
                    "id": "string",
                    "user_id": "string",
                    "labels_file_uri": "string",
                    "feature_types": {
                      "string": "CATEGORICAL"
                    },
                    "dataset_id": "string",
                    "dataset_version": 0,
                    "created_on": 99999
                  },
                  "modified_on": 0,
                  "metadata": {
                    "string": {
                      "string": {}
                    }
                  }
                }
              ]
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://api.hume.ai/v0/registry/datasets/:id \\\n     -H \"X-Hume-Api-Key: <apiKey>\" \\\n     -H \"Content-Type: multipart/form-data\" \\\n     -F labels_file=@<filename1>",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "endpoint_datasets.delete-dataset": {
        "id": "endpoint_datasets.delete-dataset",
        "namespace": [
          "subpackage_datasets"
        ],
        "description": "Returns 204 if successful",
        "method": "DELETE",
        "path": [
          {
            "type": "literal",
            "value": "/v0/registry/datasets/"
          },
          {
            "type": "pathParameter",
            "value": "id"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.hume.ai"
          }
        ],
        "pathParameters": [
          {
            "key": "id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "Hume-generated ID of a Dataset"
          }
        ],
        "requests": [],
        "responses": [
          {
            "description": "Success",
            "statusCode": 200,
            "body": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:Unit"
              }
            }
          }
        ],
        "examples": [
          {
            "path": "/v0/registry/datasets/id",
            "responseStatusCode": 200,
            "pathParameters": {
              "id": "id"
            },
            "queryParameters": {},
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "key": "value"
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X DELETE https://api.hume.ai/v0/registry/datasets/id \\\n     -H \"X-Hume-Api-Key: <apiKey>\"",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "endpoint_datasets.list-dataset-versions": {
        "id": "endpoint_datasets.list-dataset-versions",
        "namespace": [
          "subpackage_datasets"
        ],
        "description": "Returns 200 if successful",
        "method": "GET",
        "path": [
          {
            "type": "literal",
            "value": "/v0/registry/datasets/"
          },
          {
            "type": "pathParameter",
            "value": "id"
          },
          {
            "type": "literal",
            "value": "/versions"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.hume.ai"
          }
        ],
        "pathParameters": [
          {
            "key": "id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "Hume-generated ID of a Dataset"
          }
        ],
        "queryParameters": [
          {
            "key": "page_number",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                }
              }
            },
            "description": "Index of the first result"
          },
          {
            "key": "page_size",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                }
              }
            },
            "description": "Maximum number of results"
          },
          {
            "key": "shared_assets",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "boolean",
                      "default": false
                    }
                  }
                }
              }
            },
            "description": "`True` Will show all assets owned by you and shared with you. `False` Will show only your assets. Default: `False`"
          }
        ],
        "requests": [],
        "responses": [
          {
            "description": "Success",
            "statusCode": 200,
            "body": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:DatasetVersionPage"
              }
            }
          }
        ],
        "examples": [
          {
            "path": "/v0/registry/datasets/id/versions",
            "responseStatusCode": 200,
            "pathParameters": {
              "id": "id"
            },
            "queryParameters": {},
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "content": [
                  {
                    "id": "id",
                    "user_id": "user_id",
                    "labels_file_uri": "labels_file_uri",
                    "feature_types": {
                      "key": "CATEGORICAL"
                    },
                    "dataset_id": "dataset_id",
                    "dataset_version": 1,
                    "created_on": 1000000
                  }
                ],
                "pageable": {
                  "offset": 1000000,
                  "sort": {
                    "empty": true,
                    "sorted": true,
                    "unsorted": true
                  },
                  "paged": true,
                  "unpaged": true,
                  "page_number": 1,
                  "page_size": 1
                },
                "total": 1000000,
                "last": true,
                "total_elements": 1000000,
                "total_pages": 1,
                "size": 1,
                "number": 1,
                "sort": {
                  "empty": true,
                  "sorted": true,
                  "unsorted": true
                },
                "first": true,
                "number_of_elements": 1,
                "empty": true
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl https://api.hume.ai/v0/registry/datasets/id/versions \\\n     -H \"X-Hume-Api-Key: <apiKey>\"",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "endpoint_datasets.list-dataset-files": {
        "id": "endpoint_datasets.list-dataset-files",
        "namespace": [
          "subpackage_datasets"
        ],
        "description": "Returns 200 if successful",
        "method": "GET",
        "path": [
          {
            "type": "literal",
            "value": "/v0/registry/datasets/"
          },
          {
            "type": "pathParameter",
            "value": "id"
          },
          {
            "type": "literal",
            "value": "/files"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.hume.ai"
          }
        ],
        "pathParameters": [
          {
            "key": "id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "Hume-generated ID of a Dataset"
          }
        ],
        "queryParameters": [
          {
            "key": "page_number",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                }
              }
            },
            "description": "Index of the first result"
          },
          {
            "key": "page_size",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                }
              }
            },
            "description": "Maximum number of results"
          },
          {
            "key": "shared_assets",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "boolean",
                      "default": false
                    }
                  }
                }
              }
            },
            "description": "`True` Will show all assets owned by you and shared with you. `False` Will show only your assets. Default: `False`"
          }
        ],
        "requests": [],
        "responses": [
          {
            "description": "Success",
            "statusCode": 200,
            "body": {
              "type": "alias",
              "value": {
                "type": "list",
                "itemShape": {
                  "type": "alias",
                  "value": {
                    "type": "id",
                    "id": "type_:FilePage"
                  }
                }
              }
            }
          }
        ],
        "examples": [
          {
            "path": "/v0/registry/datasets/id/files",
            "responseStatusCode": 200,
            "pathParameters": {
              "id": "id"
            },
            "queryParameters": {},
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": [
                {
                  "content": [
                    {
                      "file": {
                        "id": "id",
                        "user_id": "user_id",
                        "data_type": "data_type",
                        "is_sanitized": true,
                        "is_owned_by_reader": true
                      }
                    }
                  ],
                  "pageable": {
                    "offset": 1000000,
                    "paged": true,
                    "unpaged": true,
                    "page_number": 1,
                    "page_size": 1
                  },
                  "total": 1000000,
                  "last": true,
                  "total_elements": 1000000,
                  "total_pages": 1,
                  "size": 1,
                  "number": 1,
                  "sort": {
                    "empty": true,
                    "sorted": true,
                    "unsorted": true
                  },
                  "first": true,
                  "number_of_elements": 1,
                  "empty": true
                }
              ]
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl https://api.hume.ai/v0/registry/datasets/id/files \\\n     -H \"X-Hume-Api-Key: <apiKey>\"",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "endpoint_datasets.get-dataset-version": {
        "id": "endpoint_datasets.get-dataset-version",
        "namespace": [
          "subpackage_datasets"
        ],
        "description": "Returns 200 if successful",
        "method": "GET",
        "path": [
          {
            "type": "literal",
            "value": "/v0/registry/datasets/version/"
          },
          {
            "type": "pathParameter",
            "value": "id"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.hume.ai"
          }
        ],
        "pathParameters": [
          {
            "key": "id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "Hume-generated ID of a Dataset version"
          }
        ],
        "requests": [],
        "responses": [
          {
            "description": "Success",
            "statusCode": 200,
            "body": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:DatasetLabels"
              }
            }
          }
        ],
        "examples": [
          {
            "path": "/v0/registry/datasets/version/id",
            "responseStatusCode": 200,
            "pathParameters": {
              "id": "id"
            },
            "queryParameters": {},
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "id": "id",
                "user_id": "user_id",
                "labels_file_uri": "labels_file_uri",
                "feature_type_json_uri": "feature_type_json_uri",
                "dataset_id": "dataset_id",
                "dataset_version": 1,
                "created_on": 1000000,
                "is_most_recent_version": true
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl https://api.hume.ai/v0/registry/datasets/version/id \\\n     -H \"X-Hume-Api-Key: <apiKey>\"",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "endpoint_datasets.list-dataset-version-files": {
        "id": "endpoint_datasets.list-dataset-version-files",
        "namespace": [
          "subpackage_datasets"
        ],
        "description": "Returns 200 if successful",
        "method": "GET",
        "path": [
          {
            "type": "literal",
            "value": "/v0/registry/datasets/version/"
          },
          {
            "type": "pathParameter",
            "value": "id"
          },
          {
            "type": "literal",
            "value": "/files"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.hume.ai"
          }
        ],
        "pathParameters": [
          {
            "key": "id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "Hume-generated ID of a Dataset version"
          }
        ],
        "queryParameters": [
          {
            "key": "page_number",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                }
              }
            },
            "description": "Index of the first result"
          },
          {
            "key": "page_size",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                }
              }
            },
            "description": "Maximum number of results"
          },
          {
            "key": "shared_assets",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "boolean",
                      "default": false
                    }
                  }
                }
              }
            },
            "description": "`True` Will show all assets owned by you and shared with you. `False` Will show only your assets. Default: `False`"
          }
        ],
        "requests": [],
        "responses": [
          {
            "description": "Success",
            "statusCode": 200,
            "body": {
              "type": "alias",
              "value": {
                "type": "list",
                "itemShape": {
                  "type": "alias",
                  "value": {
                    "type": "id",
                    "id": "type_:FilePage"
                  }
                }
              }
            }
          }
        ],
        "examples": [
          {
            "path": "/v0/registry/datasets/version/id/files",
            "responseStatusCode": 200,
            "pathParameters": {
              "id": "id"
            },
            "queryParameters": {},
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": [
                {
                  "content": [
                    {
                      "file": {
                        "id": "id",
                        "user_id": "user_id",
                        "data_type": "data_type",
                        "is_sanitized": true,
                        "is_owned_by_reader": true
                      }
                    }
                  ],
                  "pageable": {
                    "offset": 1000000,
                    "paged": true,
                    "unpaged": true,
                    "page_number": 1,
                    "page_size": 1
                  },
                  "total": 1000000,
                  "last": true,
                  "total_elements": 1000000,
                  "total_pages": 1,
                  "size": 1,
                  "number": 1,
                  "sort": {
                    "empty": true,
                    "sorted": true,
                    "unsorted": true
                  },
                  "first": true,
                  "number_of_elements": 1,
                  "empty": true
                }
              ]
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl https://api.hume.ai/v0/registry/datasets/version/id/files \\\n     -H \"X-Hume-Api-Key: <apiKey>\"",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "endpoint_models.list-models": {
        "id": "endpoint_models.list-models",
        "namespace": [
          "subpackage_models"
        ],
        "description": "Returns 200 if successful",
        "method": "GET",
        "path": [
          {
            "type": "literal",
            "value": "/v0/registry/models"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.hume.ai"
          }
        ],
        "queryParameters": [
          {
            "key": "name",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "description": "Model name to be queried"
          },
          {
            "key": "page_number",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                }
              }
            },
            "description": "Index of the first result"
          },
          {
            "key": "page_size",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                }
              }
            },
            "description": "Maximum number of results"
          },
          {
            "key": "shared_assets",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "boolean",
                      "default": false
                    }
                  }
                }
              }
            },
            "description": "`True` Will show all assets owned by you and shared with you. `False` Will show only your assets. Default: `False`"
          }
        ],
        "requests": [],
        "responses": [
          {
            "description": "Success",
            "statusCode": 200,
            "body": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:ModelPage"
              }
            }
          }
        ],
        "examples": [
          {
            "path": "/v0/registry/models",
            "responseStatusCode": 200,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "content": [
                  {
                    "id": "id",
                    "name": "name",
                    "created_on": 1000000,
                    "modified_on": 1000000,
                    "total_stars": 1000000,
                    "model_is_starred_by_user": true,
                    "archived": true,
                    "is_publicly_shared": true,
                    "latest_version": {
                      "id": "id",
                      "model_id": "model_id",
                      "user_id": "user_id",
                      "version": "version",
                      "source_uri": "source_uri",
                      "dataset_version_id": "dataset_version_id",
                      "created_on": 1000000
                    }
                  }
                ],
                "pageable": {
                  "offset": 1000000,
                  "sort": {
                    "empty": true,
                    "sorted": true,
                    "unsorted": true
                  },
                  "paged": true,
                  "unpaged": true,
                  "page_number": 1,
                  "page_size": 1
                },
                "total": 1000000,
                "last": true,
                "total_elements": 1000000,
                "total_pages": 1,
                "size": 1,
                "number": 1,
                "sort": {
                  "empty": true,
                  "sorted": true,
                  "unsorted": true
                },
                "first": true,
                "number_of_elements": 1,
                "empty": true
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl https://api.hume.ai/v0/registry/models \\\n     -H \"X-Hume-Api-Key: <apiKey>\"",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "endpoint_models.get-model-details": {
        "id": "endpoint_models.get-model-details",
        "namespace": [
          "subpackage_models"
        ],
        "description": "Returns 200 if successful",
        "method": "GET",
        "path": [
          {
            "type": "literal",
            "value": "/v0/registry/models/"
          },
          {
            "type": "pathParameter",
            "value": "id"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.hume.ai"
          }
        ],
        "pathParameters": [
          {
            "key": "id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "Hume-generated ID of a Model"
          }
        ],
        "requests": [],
        "responses": [
          {
            "description": "Success",
            "statusCode": 200,
            "body": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:ExternalModel"
              }
            }
          }
        ],
        "examples": [
          {
            "path": "/v0/registry/models/id",
            "responseStatusCode": 200,
            "pathParameters": {
              "id": "id"
            },
            "queryParameters": {},
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "id": "id",
                "name": "name",
                "created_on": 1000000,
                "modified_on": 1000000,
                "total_stars": 1000000,
                "model_is_starred_by_user": true,
                "archived": true,
                "is_publicly_shared": true,
                "latest_version": {
                  "id": "id",
                  "model_id": "model_id",
                  "user_id": "user_id",
                  "version": "version",
                  "source_uri": "source_uri",
                  "dataset_version_id": "dataset_version_id",
                  "created_on": 1000000,
                  "metadata": {
                    "key": {
                      "key": "value"
                    }
                  },
                  "description": "description",
                  "tags": [
                    {
                      "key": "key",
                      "value": "value"
                    }
                  ],
                  "file_type": "video",
                  "target_feature": "target_feature",
                  "task_type": "task_type",
                  "training_job_id": "training_job_id"
                }
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl https://api.hume.ai/v0/registry/models/id \\\n     -H \"X-Hume-Api-Key: <apiKey>\"",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "endpoint_models.update-model-name": {
        "id": "endpoint_models.update-model-name",
        "namespace": [
          "subpackage_models"
        ],
        "description": "Returns 200 if successful",
        "method": "PATCH",
        "path": [
          {
            "type": "literal",
            "value": "/v0/registry/models/"
          },
          {
            "type": "pathParameter",
            "value": "id"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.hume.ai"
          }
        ],
        "pathParameters": [
          {
            "key": "id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "Hume-generated ID of a Model"
          }
        ],
        "queryParameters": [
          {
            "key": "name",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "New Model name"
          }
        ],
        "requests": [],
        "responses": [
          {
            "description": "Success",
            "statusCode": 200,
            "body": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:ExternalModel"
              }
            }
          }
        ],
        "examples": [
          {
            "path": "/v0/registry/models/id",
            "responseStatusCode": 200,
            "pathParameters": {
              "id": "id"
            },
            "queryParameters": {
              "name": "name"
            },
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "id": "id",
                "name": "name",
                "created_on": 1000000,
                "modified_on": 1000000,
                "total_stars": 1000000,
                "model_is_starred_by_user": true,
                "archived": true,
                "is_publicly_shared": true,
                "latest_version": {
                  "id": "id",
                  "model_id": "model_id",
                  "user_id": "user_id",
                  "version": "version",
                  "source_uri": "source_uri",
                  "dataset_version_id": "dataset_version_id",
                  "created_on": 1000000,
                  "metadata": {
                    "key": {
                      "key": "value"
                    }
                  },
                  "description": "description",
                  "tags": [
                    {
                      "key": "key",
                      "value": "value"
                    }
                  ],
                  "file_type": "video",
                  "target_feature": "target_feature",
                  "task_type": "task_type",
                  "training_job_id": "training_job_id"
                }
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X PATCH \"https://api.hume.ai/v0/registry/models/id?name=name\" \\\n     -H \"X-Hume-Api-Key: <apiKey>\"",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "endpoint_models.list-model-versions": {
        "id": "endpoint_models.list-model-versions",
        "namespace": [
          "subpackage_models"
        ],
        "description": "Returns 200 if successful",
        "method": "GET",
        "path": [
          {
            "type": "literal",
            "value": "/v0/registry/models/version"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.hume.ai"
          }
        ],
        "queryParameters": [
          {
            "key": "id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "description": "Hume-generated Model Version IDs to be queried"
          },
          {
            "key": "name",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "description": "Model version name to be queried"
          },
          {
            "key": "version",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "description": "Model version number to be queried"
          },
          {
            "key": "shared_assets",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "boolean",
                      "default": false
                    }
                  }
                }
              }
            },
            "description": "`True` Will show all assets owned by you and shared with you. `False` Will show only your assets. Default: `False`"
          }
        ],
        "requests": [],
        "responses": [
          {
            "description": "Success",
            "statusCode": 200,
            "body": {
              "type": "alias",
              "value": {
                "type": "list",
                "itemShape": {
                  "type": "alias",
                  "value": {
                    "type": "id",
                    "id": "type_:ExternalModelVersion"
                  }
                }
              }
            }
          }
        ],
        "examples": [
          {
            "path": "/v0/registry/models/version",
            "responseStatusCode": 200,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": [
                {
                  "id": "id",
                  "model_id": "model_id",
                  "user_id": "user_id",
                  "version": "version",
                  "source_uri": "source_uri",
                  "dataset_version_id": "dataset_version_id",
                  "created_on": 1000000,
                  "metadata": {
                    "key": {
                      "key": "value"
                    }
                  },
                  "description": "description",
                  "tags": [
                    {
                      "key": "key",
                      "value": "value"
                    }
                  ],
                  "file_type": "video",
                  "target_feature": "target_feature",
                  "task_type": "task_type",
                  "training_job_id": "training_job_id"
                }
              ]
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl https://api.hume.ai/v0/registry/models/version \\\n     -H \"X-Hume-Api-Key: <apiKey>\"",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "endpoint_models.get-model-version": {
        "id": "endpoint_models.get-model-version",
        "namespace": [
          "subpackage_models"
        ],
        "description": "Returns 200 if successful",
        "method": "GET",
        "path": [
          {
            "type": "literal",
            "value": "/v0/registry/models/version/"
          },
          {
            "type": "pathParameter",
            "value": "id"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.hume.ai"
          }
        ],
        "pathParameters": [
          {
            "key": "id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "Hume-generated ID of a Model version"
          }
        ],
        "queryParameters": [
          {
            "key": "shared_assets",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "boolean",
                      "default": false
                    }
                  }
                }
              }
            },
            "description": "`True` Will show all assets owned by you and shared with you. `False` Will show only your assets. Default: `False`"
          }
        ],
        "requests": [],
        "responses": [
          {
            "description": "Success",
            "statusCode": 200,
            "body": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:ExternalModelVersion"
              }
            }
          }
        ],
        "examples": [
          {
            "path": "/v0/registry/models/version/id",
            "responseStatusCode": 200,
            "pathParameters": {
              "id": "id"
            },
            "queryParameters": {},
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "id": "id",
                "model_id": "model_id",
                "user_id": "user_id",
                "version": "version",
                "source_uri": "source_uri",
                "dataset_version_id": "dataset_version_id",
                "created_on": 1000000,
                "metadata": {
                  "key": {
                    "key": "value"
                  }
                },
                "description": "description",
                "tags": [
                  {
                    "key": "key",
                    "value": "value"
                  }
                ],
                "file_type": "video",
                "target_feature": "target_feature",
                "task_type": "task_type",
                "training_job_id": "training_job_id"
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl https://api.hume.ai/v0/registry/models/version/id \\\n     -H \"X-Hume-Api-Key: <apiKey>\"",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "endpoint_models.update-model-description": {
        "id": "endpoint_models.update-model-description",
        "namespace": [
          "subpackage_models"
        ],
        "description": "Returns 200 if successful",
        "method": "PATCH",
        "path": [
          {
            "type": "literal",
            "value": "/v0/registry/models/version/"
          },
          {
            "type": "pathParameter",
            "value": "id"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.hume.ai"
          }
        ],
        "pathParameters": [
          {
            "key": "id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "Hume-generated ID of a Model Version"
          }
        ],
        "requests": [
          {
            "contentType": "application/json",
            "body": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": [
          {
            "description": "Success",
            "statusCode": 200,
            "body": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:ExternalModelVersion"
              }
            }
          }
        ],
        "examples": [
          {
            "path": "/v0/registry/models/version/id",
            "responseStatusCode": 200,
            "pathParameters": {
              "id": "id"
            },
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": "string"
            },
            "responseBody": {
              "type": "json",
              "value": {
                "id": "id",
                "model_id": "model_id",
                "user_id": "user_id",
                "version": "version",
                "source_uri": "source_uri",
                "dataset_version_id": "dataset_version_id",
                "created_on": 1000000,
                "metadata": {
                  "key": {
                    "key": "value"
                  }
                },
                "description": "description",
                "tags": [
                  {
                    "key": "key",
                    "value": "value"
                  }
                ],
                "file_type": "video",
                "target_feature": "target_feature",
                "task_type": "task_type",
                "training_job_id": "training_job_id"
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X PATCH https://api.hume.ai/v0/registry/models/version/id \\\n     -H \"X-Hume-Api-Key: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d \"string\"",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "endpoint_jobs.start-training-job": {
        "id": "endpoint_jobs.start-training-job",
        "namespace": [
          "subpackage_jobs"
        ],
        "description": "Start a new custom models training job.",
        "method": "POST",
        "path": [
          {
            "type": "literal",
            "value": "/v0/registry/v0/batch/jobs/tl/train"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.hume.ai"
          }
        ],
        "requests": [
          {
            "contentType": "application/json; charset=utf-8",
            "body": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:TrainingBaseRequest"
              }
            }
          }
        ],
        "responses": [
          {
            "description": "",
            "statusCode": 200,
            "body": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:JobId"
              }
            }
          }
        ],
        "examples": [
          {
            "path": "/v0/registry/v0/batch/jobs/tl/train",
            "responseStatusCode": 200,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {
                "custom_model": {
                  "name": "name"
                },
                "dataset": {
                  "id": "id"
                }
              }
            },
            "responseBody": {
              "type": "json",
              "value": {
                "job_id": "job_id"
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://api.hume.ai/v0/registry/v0/batch/jobs/tl/train \\\n     -H \"X-Hume-Api-Key: <apiKey>\" \\\n     -H \"Content-Type: application/json; charset=utf-8\" \\\n     -d '{\n  \"custom_model\": {\n    \"name\": \"name\"\n  },\n  \"dataset\": {\n    \"id\": \"id\"\n  }\n}'",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "endpoint_jobs.start-custom-models-inference-job": {
        "id": "endpoint_jobs.start-custom-models-inference-job",
        "namespace": [
          "subpackage_jobs"
        ],
        "description": "Start a new custom models inference job.",
        "method": "POST",
        "path": [
          {
            "type": "literal",
            "value": "/v0/registry/v0/batch/jobs/tl/inference"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.hume.ai"
          }
        ],
        "requests": [
          {
            "contentType": "application/json; charset=utf-8",
            "body": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:TlInferenceBaseRequest"
              }
            }
          }
        ],
        "responses": [
          {
            "description": "",
            "statusCode": 200,
            "body": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:JobId"
              }
            }
          }
        ],
        "examples": [
          {
            "path": "/v0/registry/v0/batch/jobs/tl/inference",
            "responseStatusCode": 200,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {
                "custom_model": {
                  "id": "id"
                }
              }
            },
            "responseBody": {
              "type": "json",
              "value": {
                "job_id": "job_id"
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://api.hume.ai/v0/registry/v0/batch/jobs/tl/inference \\\n     -H \"X-Hume-Api-Key: <apiKey>\" \\\n     -H \"Content-Type: application/json; charset=utf-8\" \\\n     -d '{\n  \"custom_model\": {\n    \"id\": \"id\"\n  }\n}'",
                  "generated": true
                }
              ]
            }
          }
        ]
      }
    },
    "websockets": {},
    "webhooks": {},
    "types": {
      "type_:AttributeFilter": {
        "name": "AttributeFilter",
        "description": "List of Attributes",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "name",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "Attribute name (key)"
            },
            {
              "key": "value",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "Attribute description (value)"
            }
          ],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_:FileInput": {
        "name": "FileInput",
        "description": "File details",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "name",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "File name"
            },
            {
              "key": "uri",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "File URI"
            },
            {
              "key": "hume_storage",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "boolean",
                    "default": false
                  }
                }
              },
              "description": "Flag which denotes whether the file is stored with Hume"
            },
            {
              "key": "data_type",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "File type: video, audio, video_no_audio, image, text, or mediapipe_facemesh"
            }
          ],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_:FileWithAttributesInput": {
        "name": "FileWithAttributesInput",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "file",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:FileInput"
                }
              }
            },
            {
              "key": "attributes",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "list",
                      "itemShape": {
                        "type": "alias",
                        "value": {
                          "type": "id",
                          "id": "type_:AttributeFilter"
                        }
                      }
                    }
                  }
                }
              },
              "description": "List of Attributes"
            }
          ],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_:AuthorizedFile": {
        "name": "AuthorizedFile",
        "description": "File details",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "Hume-generated File ID"
            },
            {
              "key": "name",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "File name"
            },
            {
              "key": "uri",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "File URI"
            },
            {
              "key": "upload_uri",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "File upload URI"
            },
            {
              "key": "thumbnail_uri",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "File thumbnail URI"
            },
            {
              "key": "user_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "Hume-generated User ID"
            },
            {
              "key": "data_type",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "File type: video, audio, video_no_audio, image, text, or mediapipe_facemesh"
            },
            {
              "key": "created_on",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "long",
                        "default": 0
                      }
                    }
                  }
                }
              },
              "description": "Created date and time"
            },
            {
              "key": "modified_on",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "long",
                        "default": 0
                      }
                    }
                  }
                }
              },
              "description": "Updated date and time"
            },
            {
              "key": "metadata",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "map",
                      "keyShape": {
                        "type": "alias",
                        "value": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      },
                      "valueShape": {
                        "type": "alias",
                        "value": {
                          "type": "map",
                          "keyShape": {
                            "type": "alias",
                            "value": {
                              "type": "primitive",
                              "value": {
                                "type": "string"
                              }
                            }
                          },
                          "valueShape": {
                            "type": "alias",
                            "value": {
                              "type": "unknown"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              },
              "description": "Additional details as key, value pairs"
            },
            {
              "key": "hume_storage",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean",
                        "default": false
                      }
                    }
                  }
                }
              },
              "description": "Flag which denotes whether the file is stored with Hume"
            },
            {
              "key": "hume_storage_upload_timestamp",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "long",
                        "default": 0
                      }
                    }
                  }
                }
              },
              "description": "Timestamp denoting when the file was uploaded to Hume"
            },
            {
              "key": "is_sanitized",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "boolean",
                    "default": false
                  }
                }
              },
              "description": "Indicates whether this file has been sanitized for sharing"
            },
            {
              "key": "is_owned_by_reader",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "boolean",
                    "default": false
                  }
                }
              },
              "description": "Indicates whether this file is owned by the current file reader"
            },
            {
              "key": "is_linked_to_publicly_shared",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean",
                        "default": false
                      }
                    }
                  }
                }
              },
              "description": "Indicates whether this file is linked to a model that is publicly shared"
            },
            {
              "key": "is_linked_to_hume_model",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean",
                        "default": false
                      }
                    }
                  }
                }
              },
              "description": "Indicates whether this file is linked to a Hume-owned model that is publicly shared"
            }
          ],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_:FileWithAttributes": {
        "name": "FileWithAttributes",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "file",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:AuthorizedFile"
                }
              }
            },
            {
              "key": "attributes",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "list",
                      "itemShape": {
                        "type": "alias",
                        "value": {
                          "type": "id",
                          "id": "type_:AttributeFilter"
                        }
                      }
                    }
                  }
                }
              },
              "description": "List of Attributes"
            }
          ],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_:Unit": {
        "name": "Unit",
        "shape": {
          "type": "alias",
          "value": {
            "type": "map",
            "keyShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "unknown"
              }
            }
          }
        }
      },
      "type_:DatasetVersionFeatureTypesValue": {
        "name": "DatasetVersionFeatureTypesValue",
        "description": "Feature types of label mapped to feature type",
        "shape": {
          "type": "enum",
          "values": [
            {
              "value": "CATEGORICAL"
            },
            {
              "value": "NUMERIC"
            },
            {
              "value": "TEXT"
            },
            {
              "value": "DATETIME"
            },
            {
              "value": "UNDEFINED"
            }
          ]
        }
      },
      "type_:DatasetVersion": {
        "name": "DatasetVersion",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "Hume-generated Dataset version ID"
            },
            {
              "key": "user_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "Hume-generated User ID"
            },
            {
              "key": "labels_file_uri",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "Dataset Labels file URI"
            },
            {
              "key": "feature_types",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "map",
                  "keyShape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  },
                  "valueShape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:DatasetVersionFeatureTypesValue"
                    }
                  }
                }
              },
              "description": "Feature types of label mapped to feature type"
            },
            {
              "key": "dataset_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "Hume-generated Dataset ID of the parent Dataset"
            },
            {
              "key": "dataset_version",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              },
              "description": "Dataset version number"
            },
            {
              "key": "created_on",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "long",
                    "default": 0
                  }
                }
              },
              "description": "Created date and time"
            }
          ],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_:ReturnDataset": {
        "name": "ReturnDataset",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "Hume-generated Dataset ID"
            },
            {
              "key": "name",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "Dataset name"
            },
            {
              "key": "latest_version",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:DatasetVersion"
                    }
                  }
                }
              }
            },
            {
              "key": "modified_on",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                }
              },
              "description": "Updated date and time"
            },
            {
              "key": "metadata",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "map",
                      "keyShape": {
                        "type": "alias",
                        "value": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      },
                      "valueShape": {
                        "type": "alias",
                        "value": {
                          "type": "map",
                          "keyShape": {
                            "type": "alias",
                            "value": {
                              "type": "primitive",
                              "value": {
                                "type": "string"
                              }
                            }
                          },
                          "valueShape": {
                            "type": "alias",
                            "value": {
                              "type": "unknown"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              },
              "description": "Additional details as key, value pairs"
            }
          ],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_:DatasetLabelsFileUriInputFeatureTypesValue": {
        "name": "DatasetLabelsFileUriInputFeatureTypesValue",
        "description": "Feature types as key, value pairs",
        "shape": {
          "type": "enum",
          "values": [
            {
              "value": "CATEGORICAL"
            },
            {
              "value": "NUMERIC"
            },
            {
              "value": "TEXT"
            },
            {
              "value": "DATETIME"
            },
            {
              "value": "UNDEFINED"
            }
          ]
        }
      },
      "type_:DatasetLabelsFileUriInput": {
        "name": "DatasetLabelsFileUriInput",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "name",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "Dataset name"
            },
            {
              "key": "labels_file_uri",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "URI of a Labels File"
            },
            {
              "key": "feature_types",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "map",
                  "keyShape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  },
                  "valueShape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:DatasetLabelsFileUriInputFeatureTypesValue"
                    }
                  }
                }
              },
              "description": "Feature types as key, value pairs"
            }
          ],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_:ExternalModel": {
        "name": "ExternalModel",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "Hume-generated Model ID"
            },
            {
              "key": "name",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "Model name"
            },
            {
              "key": "created_on",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "long",
                    "default": 0
                  }
                }
              },
              "description": "Created date and time"
            },
            {
              "key": "modified_on",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "long",
                    "default": 0
                  }
                }
              },
              "description": "Updated date and time"
            },
            {
              "key": "total_stars",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "long",
                    "default": 0
                  }
                }
              },
              "description": "Total stars on this model"
            },
            {
              "key": "model_is_starred_by_user",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "boolean",
                    "default": false
                  }
                }
              },
              "description": "Model is starred by this user"
            },
            {
              "key": "archived",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "boolean",
                    "default": false
                  }
                }
              },
              "description": "Model is archived."
            },
            {
              "key": "latest_version",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:ExternalModelVersion"
                    }
                  }
                }
              }
            },
            {
              "key": "is_publicly_shared",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "boolean",
                    "default": false
                  }
                }
              },
              "description": "Model is shared publicly"
            }
          ],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_:ExternalModelVersionFileType": {
        "name": "ExternalModelVersionFileType",
        "description": "File type: video, audio, video_no_audio, image, text, or mediapipe_facemesh",
        "shape": {
          "type": "enum",
          "values": [
            {
              "value": "video"
            },
            {
              "value": "audio"
            },
            {
              "value": "video_no_audio"
            },
            {
              "value": "image"
            },
            {
              "value": "text"
            },
            {
              "value": "mediapipe_facemesh"
            }
          ]
        }
      },
      "type_:ExternalModelVersion": {
        "name": "ExternalModelVersion",
        "description": "Latest Model version number",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "Hume-generated Model version ID"
            },
            {
              "key": "model_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "Hume-generated Model ID of the parent Model"
            },
            {
              "key": "user_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "Hume-generated User ID"
            },
            {
              "key": "version",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "Model version number"
            },
            {
              "key": "source_uri",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "Model version's source file URI"
            },
            {
              "key": "dataset_version_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "Hume-generated Dataset version ID for the Dataset version the Model version was trained on"
            },
            {
              "key": "created_on",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "long",
                    "default": 0
                  }
                }
              },
              "description": "Created date and time"
            },
            {
              "key": "metadata",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "map",
                      "keyShape": {
                        "type": "alias",
                        "value": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      },
                      "valueShape": {
                        "type": "alias",
                        "value": {
                          "type": "map",
                          "keyShape": {
                            "type": "alias",
                            "value": {
                              "type": "primitive",
                              "value": {
                                "type": "string"
                              }
                            }
                          },
                          "valueShape": {
                            "type": "alias",
                            "value": {
                              "type": "unknown"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              },
              "description": "Additional details as key, value pairs"
            },
            {
              "key": "description",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "Model version description"
            },
            {
              "key": "tags",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "list",
                      "itemShape": {
                        "type": "alias",
                        "value": {
                          "type": "id",
                          "id": "type_:ExternalModelVersionTag"
                        }
                      }
                    }
                  }
                }
              },
              "description": "List of Tags associated with the Model version"
            },
            {
              "key": "file_type",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:ExternalModelVersionFileType"
                    }
                  }
                }
              },
              "description": "File type: video, audio, video_no_audio, image, text, or mediapipe_facemesh"
            },
            {
              "key": "target_feature",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "Target feature, the feature the model was trained against"
            },
            {
              "key": "task_type",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "Type of the task used to train"
            },
            {
              "key": "training_job_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "ID of the batch training job"
            }
          ],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_:ExternalModelVersionTag": {
        "name": "ExternalModelVersionTag",
        "description": "List of Tags associated with the Model version",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "key",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "Tag name (key)"
            },
            {
              "key": "value",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "Tag description (value)"
            }
          ],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_:ModelPage": {
        "name": "ModelPage",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "content",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "list",
                      "itemShape": {
                        "type": "alias",
                        "value": {
                          "type": "id",
                          "id": "type_:ExternalModel"
                        }
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "pageable",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:PageableObject"
                    }
                  }
                }
              }
            },
            {
              "key": "total",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "long",
                        "default": 0
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "last",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean",
                        "default": false
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "total_elements",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "long",
                        "default": 0
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "total_pages",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "size",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "number",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "sort",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:SortObject"
                    }
                  }
                }
              }
            },
            {
              "key": "first",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean",
                        "default": false
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "number_of_elements",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "empty",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean",
                        "default": false
                      }
                    }
                  }
                }
              }
            }
          ],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_:PageableObject": {
        "name": "PageableObject",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "offset",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "long",
                        "default": 0
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "sort",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:SortObject"
                    }
                  }
                }
              }
            },
            {
              "key": "paged",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean",
                        "default": false
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "unpaged",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean",
                        "default": false
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "page_number",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "page_size",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                }
              }
            }
          ],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_:SortObject": {
        "name": "SortObject",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "empty",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean",
                        "default": false
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "sorted",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean",
                        "default": false
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "unsorted",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean",
                        "default": false
                      }
                    }
                  }
                }
              }
            }
          ],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_:JsonObject": {
        "name": "JsonObject",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "empty",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean",
                        "default": false
                      }
                    }
                  }
                }
              }
            }
          ],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_:FilePage": {
        "name": "FilePage",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "content",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "list",
                      "itemShape": {
                        "type": "alias",
                        "value": {
                          "type": "id",
                          "id": "type_:FileWithAttributes"
                        }
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "pageable",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:PageableObject"
                    }
                  }
                }
              }
            },
            {
              "key": "total",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "long",
                        "default": 0
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "last",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean",
                        "default": false
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "total_elements",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "long",
                        "default": 0
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "total_pages",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "size",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "number",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "sort",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:SortObject"
                    }
                  }
                }
              }
            },
            {
              "key": "first",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean",
                        "default": false
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "number_of_elements",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "empty",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean",
                        "default": false
                      }
                    }
                  }
                }
              }
            }
          ],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_:DatasetPage": {
        "name": "DatasetPage",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "content",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "list",
                      "itemShape": {
                        "type": "alias",
                        "value": {
                          "type": "id",
                          "id": "type_:ReturnDataset"
                        }
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "pageable",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:PageableObject"
                    }
                  }
                }
              }
            },
            {
              "key": "total",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "long",
                        "default": 0
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "last",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean",
                        "default": false
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "total_elements",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "long",
                        "default": 0
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "total_pages",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "size",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "number",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "sort",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:SortObject"
                    }
                  }
                }
              }
            },
            {
              "key": "first",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean",
                        "default": false
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "number_of_elements",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "empty",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean",
                        "default": false
                      }
                    }
                  }
                }
              }
            }
          ],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_:DatasetVersionPage": {
        "name": "DatasetVersionPage",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "content",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "list",
                      "itemShape": {
                        "type": "alias",
                        "value": {
                          "type": "id",
                          "id": "type_:DatasetVersion"
                        }
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "pageable",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:PageableObject"
                    }
                  }
                }
              }
            },
            {
              "key": "total",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "long",
                        "default": 0
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "last",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean",
                        "default": false
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "total_elements",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "long",
                        "default": 0
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "total_pages",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "size",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "number",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "sort",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:SortObject"
                    }
                  }
                }
              }
            },
            {
              "key": "first",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean",
                        "default": false
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "number_of_elements",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "empty",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean",
                        "default": false
                      }
                    }
                  }
                }
              }
            }
          ],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_:DatasetLabels": {
        "name": "DatasetLabels",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "Hume-generated Dataset version ID"
            },
            {
              "key": "user_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "Hume-generated User ID"
            },
            {
              "key": "labels_file_uri",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "Dataset Labels file URI"
            },
            {
              "key": "feature_type_json_uri",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "Feature types json file URI"
            },
            {
              "key": "dataset_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "Hume-generated Dataset ID"
            },
            {
              "key": "dataset_version",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              },
              "description": "Dataset version number"
            },
            {
              "key": "created_on",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "long",
                    "default": 0
                  }
                }
              },
              "description": "Created date and time"
            },
            {
              "key": "is_most_recent_version",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "boolean",
                    "default": false
                  }
                }
              },
              "description": "Boolean indicating that this is the most recent version"
            }
          ],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_:Alternative": {
        "name": "Alternative",
        "shape": {
          "type": "alias",
          "value": {
            "type": "literal",
            "value": {
              "type": "stringLiteral",
              "value": "language_only"
            }
          }
        }
      },
      "type_:Bcp47Tag": {
        "name": "Bcp47Tag",
        "shape": {
          "type": "enum",
          "values": [
            {
              "value": "zh"
            },
            {
              "value": "da"
            },
            {
              "value": "nl"
            },
            {
              "value": "en"
            },
            {
              "value": "en-AU"
            },
            {
              "value": "en-IN"
            },
            {
              "value": "en-NZ"
            },
            {
              "value": "en-GB"
            },
            {
              "value": "fr"
            },
            {
              "value": "fr-CA"
            },
            {
              "value": "de"
            },
            {
              "value": "hi"
            },
            {
              "value": "hi-Latn"
            },
            {
              "value": "id"
            },
            {
              "value": "it"
            },
            {
              "value": "ja"
            },
            {
              "value": "ko"
            },
            {
              "value": "no"
            },
            {
              "value": "pl"
            },
            {
              "value": "pt"
            },
            {
              "value": "pt-BR"
            },
            {
              "value": "pt-PT"
            },
            {
              "value": "ru"
            },
            {
              "value": "es"
            },
            {
              "value": "es-419"
            },
            {
              "value": "sv"
            },
            {
              "value": "ta"
            },
            {
              "value": "tr"
            },
            {
              "value": "uk"
            }
          ]
        }
      },
      "type_:BoundingBox": {
        "name": "BoundingBox",
        "description": "A bounding box around a face.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "x",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "double"
                  }
                }
              },
              "description": "x-coordinate of bounding box top left corner."
            },
            {
              "key": "y",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "double"
                  }
                }
              },
              "description": "y-coordinate of bounding box top left corner."
            },
            {
              "key": "w",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "double"
                  }
                }
              },
              "description": "Bounding box width."
            },
            {
              "key": "h",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "double"
                  }
                }
              },
              "description": "Bounding box height."
            }
          ],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_:BurstPrediction": {
        "name": "BurstPrediction",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "time",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:TimeInterval"
                }
              }
            },
            {
              "key": "emotions",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "list",
                  "itemShape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:EmotionScore"
                    }
                  }
                }
              },
              "description": "A high-dimensional embedding in emotion space."
            },
            {
              "key": "descriptions",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "list",
                  "itemShape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:DescriptionsScore"
                    }
                  }
                }
              },
              "description": "Modality-specific descriptive features and their scores."
            }
          ],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_:Classification": {
        "name": "Classification",
        "shape": {
          "type": "alias",
          "value": {
            "type": "map",
            "keyShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "unknown"
              }
            }
          }
        }
      },
      "type_:CompletedEmbeddingGeneration": {
        "name": "CompletedEmbeddingGeneration",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "created_timestamp_ms",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "long",
                    "default": 0
                  }
                }
              },
              "description": "When this job was created (Unix timestamp in milliseconds)."
            },
            {
              "key": "started_timestamp_ms",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "long",
                    "default": 0
                  }
                }
              },
              "description": "When this job started (Unix timestamp in milliseconds)."
            },
            {
              "key": "ended_timestamp_ms",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "long",
                    "default": 0
                  }
                }
              },
              "description": "When this job ended (Unix timestamp in milliseconds)."
            }
          ],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_:CompletedInference": {
        "name": "CompletedInference",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "created_timestamp_ms",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "long",
                    "default": 0
                  }
                }
              },
              "description": "When this job was created (Unix timestamp in milliseconds)."
            },
            {
              "key": "started_timestamp_ms",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "long",
                    "default": 0
                  }
                }
              },
              "description": "When this job started (Unix timestamp in milliseconds)."
            },
            {
              "key": "ended_timestamp_ms",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "long",
                    "default": 0
                  }
                }
              },
              "description": "When this job ended (Unix timestamp in milliseconds)."
            },
            {
              "key": "num_predictions",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "uint64"
                  }
                }
              },
              "description": "The number of predictions that were generated by this job."
            },
            {
              "key": "num_errors",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "uint64"
                  }
                }
              },
              "description": "The number of errors that occurred while running this job."
            }
          ],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_:CompletedTlInference": {
        "name": "CompletedTlInference",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "created_timestamp_ms",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "long",
                    "default": 0
                  }
                }
              },
              "description": "When this job was created (Unix timestamp in milliseconds)."
            },
            {
              "key": "started_timestamp_ms",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "long",
                    "default": 0
                  }
                }
              },
              "description": "When this job started (Unix timestamp in milliseconds)."
            },
            {
              "key": "ended_timestamp_ms",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "long",
                    "default": 0
                  }
                }
              },
              "description": "When this job ended (Unix timestamp in milliseconds)."
            },
            {
              "key": "num_predictions",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "uint64"
                  }
                }
              },
              "description": "The number of predictions that were generated by this job."
            },
            {
              "key": "num_errors",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "uint64"
                  }
                }
              },
              "description": "The number of errors that occurred while running this job."
            }
          ],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_:CompletedTraining": {
        "name": "CompletedTraining",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "created_timestamp_ms",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "long",
                    "default": 0
                  }
                }
              },
              "description": "When this job was created (Unix timestamp in milliseconds)."
            },
            {
              "key": "started_timestamp_ms",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "long",
                    "default": 0
                  }
                }
              },
              "description": "When this job started (Unix timestamp in milliseconds)."
            },
            {
              "key": "ended_timestamp_ms",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "long",
                    "default": 0
                  }
                }
              },
              "description": "When this job ended (Unix timestamp in milliseconds)."
            },
            {
              "key": "custom_model",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:TrainingCustomModel"
                }
              }
            },
            {
              "key": "alternatives",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "map",
                      "keyShape": {
                        "type": "alias",
                        "value": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      },
                      "valueShape": {
                        "type": "alias",
                        "value": {
                          "type": "id",
                          "id": "type_:TrainingCustomModel"
                        }
                      }
                    }
                  }
                }
              }
            }
          ],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_:CustomModelPrediction": {
        "name": "CustomModelPrediction",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "output",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "map",
                  "keyShape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  },
                  "valueShape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "error",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "key": "task_type",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          ],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_:CustomModelRequest": {
        "name": "CustomModelRequest",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "name",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "key": "description",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "tags",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "list",
                      "itemShape": {
                        "type": "alias",
                        "value": {
                          "type": "id",
                          "id": "type_:Tag"
                        }
                      }
                    }
                  }
                }
              }
            }
          ],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_:Dataset": {
        "name": "Dataset",
        "shape": {
          "type": "undiscriminatedUnion",
          "variants": [
            {
              "displayName": "Dataset ID",
              "shape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:DatasetId"
                }
              }
            },
            {
              "displayName": "Dataset Version ID",
              "shape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:DatasetVersionId"
                }
              }
            }
          ]
        }
      },
      "type_:DatasetId": {
        "name": "DatasetId",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          ],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_:DatasetVersionId": {
        "name": "DatasetVersionId",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "version_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          ],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_:DescriptionsScore": {
        "name": "DescriptionsScore",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "name",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "Name of the descriptive feature being expressed."
            },
            {
              "key": "score",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "Embedding value for the descriptive feature being expressed."
            }
          ],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_:Direction": {
        "name": "Direction",
        "shape": {
          "type": "enum",
          "values": [
            {
              "value": "asc"
            },
            {
              "value": "desc"
            }
          ]
        }
      },
      "type_:EmbeddingGenerationBaseRequest": {
        "name": "EmbeddingGenerationBaseRequest",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "registry_file_details",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "list",
                      "itemShape": {
                        "type": "alias",
                        "value": {
                          "type": "id",
                          "id": "type_:RegistryFileDetail"
                        }
                      }
                    }
                  }
                }
              },
              "description": "File ID and File URL pairs for an asset registry file"
            }
          ],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_:EmotionScore": {
        "name": "EmotionScore",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "name",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "Name of the emotion being expressed."
            },
            {
              "key": "score",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "double"
                  }
                }
              },
              "description": "Embedding value for the emotion being expressed."
            }
          ],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_:Error": {
        "name": "Error",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "message",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "An error message."
            },
            {
              "key": "file",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "A file path relative to the top level source URL or file."
            }
          ],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_:EvaluationArgs": {
        "name": "EvaluationArgs",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "validation",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:ValidationArgs"
                    }
                  }
                }
              }
            }
          ],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_:Face": {
        "name": "Face",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "fps_pred",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "double",
                        "default": 3
                      }
                    }
                  }
                }
              },
              "description": "Number of frames per second to process. Other frames will be omitted from the response. Set to `0` to process every frame."
            },
            {
              "key": "prob_threshold",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "double",
                        "minimum": 0,
                        "maximum": 1,
                        "default": 0.99
                      }
                    }
                  }
                }
              },
              "description": "Face detection probability threshold. Faces detected with a probability less than this threshold will be omitted from the response."
            },
            {
              "key": "identify_faces",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean",
                        "default": false
                      }
                    }
                  }
                }
              },
              "description": "Whether to return identifiers for faces across frames. If `true`, unique identifiers will be assigned to face bounding boxes to differentiate different faces. If `false`, all faces will be tagged with an `unknown` ID."
            },
            {
              "key": "min_face_size",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "uint64"
                      }
                    }
                  }
                }
              },
              "description": "Minimum bounding box side length in pixels to treat as a face. Faces detected with a bounding box side length in pixels less than this threshold will be omitted from the response."
            },
            {
              "key": "facs",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:Unconfigurable"
                    }
                  }
                }
              }
            },
            {
              "key": "descriptions",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:Unconfigurable"
                    }
                  }
                }
              }
            },
            {
              "key": "save_faces",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean",
                        "default": false
                      }
                    }
                  }
                }
              },
              "description": "Whether to extract and save the detected faces in the artifacts zip created by each job."
            }
          ],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_:FacePrediction": {
        "name": "FacePrediction",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "frame",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "uint64"
                  }
                }
              },
              "description": "Frame number"
            },
            {
              "key": "time",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "double"
                  }
                }
              },
              "description": "Time in seconds when face detection occurred."
            },
            {
              "key": "prob",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "double"
                  }
                }
              },
              "description": "The predicted probability that a detected face was actually a face."
            },
            {
              "key": "box",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:BoundingBox"
                }
              }
            },
            {
              "key": "emotions",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "list",
                  "itemShape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:EmotionScore"
                    }
                  }
                }
              },
              "description": "A high-dimensional embedding in emotion space."
            },
            {
              "key": "facs",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "list",
                      "itemShape": {
                        "type": "alias",
                        "value": {
                          "type": "id",
                          "id": "type_:FacsScore"
                        }
                      }
                    }
                  }
                }
              },
              "description": "FACS 2.0 features and their scores."
            },
            {
              "key": "descriptions",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "list",
                      "itemShape": {
                        "type": "alias",
                        "value": {
                          "type": "id",
                          "id": "type_:DescriptionsScore"
                        }
                      }
                    }
                  }
                }
              },
              "description": "Modality-specific descriptive features and their scores."
            }
          ],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_:FacemeshPrediction": {
        "name": "FacemeshPrediction",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "emotions",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "list",
                  "itemShape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:EmotionScore"
                    }
                  }
                }
              },
              "description": "A high-dimensional embedding in emotion space."
            }
          ],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_:FacsScore": {
        "name": "FacsScore",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "name",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "Name of the FACS 2.0 feature being expressed."
            },
            {
              "key": "score",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "Embedding value for the FACS 2.0 feature being expressed."
            }
          ],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_:Failed": {
        "name": "Failed",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "created_timestamp_ms",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "long",
                    "default": 0
                  }
                }
              },
              "description": "When this job was created (Unix timestamp in milliseconds)."
            },
            {
              "key": "started_timestamp_ms",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "long",
                    "default": 0
                  }
                }
              },
              "description": "When this job started (Unix timestamp in milliseconds)."
            },
            {
              "key": "ended_timestamp_ms",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "long",
                    "default": 0
                  }
                }
              },
              "description": "When this job ended (Unix timestamp in milliseconds)."
            },
            {
              "key": "message",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "An error message."
            }
          ],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_:File": {
        "name": "File",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "filename",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "The name of the file."
            },
            {
              "key": "content_type",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "The content type of the file."
            },
            {
              "key": "md5sum",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "The MD5 checksum of the file."
            }
          ],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_:Granularity": {
        "name": "Granularity",
        "description": "The granularity at which to generate predictions. `utterance` corresponds to a natural pause or break in conversation, while `conversational_turn` corresponds to a change in speaker.",
        "shape": {
          "type": "enum",
          "values": [
            {
              "value": "word"
            },
            {
              "value": "sentence"
            },
            {
              "value": "utterance"
            },
            {
              "value": "conversational_turn"
            }
          ]
        }
      },
      "type_:GroupedPredictionsBurstPrediction": {
        "name": "GroupedPredictionsBurstPrediction",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "An automatically generated label to identify individuals in your media file. Will be `unknown` if you have chosen to disable identification, or if the model is unable to distinguish between individuals."
            },
            {
              "key": "predictions",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "list",
                  "itemShape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:BurstPrediction"
                    }
                  }
                }
              }
            }
          ],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_:GroupedPredictionsFacePrediction": {
        "name": "GroupedPredictionsFacePrediction",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "An automatically generated label to identify individuals in your media file. Will be `unknown` if you have chosen to disable identification, or if the model is unable to distinguish between individuals."
            },
            {
              "key": "predictions",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "list",
                  "itemShape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:FacePrediction"
                    }
                  }
                }
              }
            }
          ],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_:GroupedPredictionsFacemeshPrediction": {
        "name": "GroupedPredictionsFacemeshPrediction",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "An automatically generated label to identify individuals in your media file. Will be `unknown` if you have chosen to disable identification, or if the model is unable to distinguish between individuals."
            },
            {
              "key": "predictions",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "list",
                  "itemShape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:FacemeshPrediction"
                    }
                  }
                }
              }
            }
          ],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_:GroupedPredictionsLanguagePrediction": {
        "name": "GroupedPredictionsLanguagePrediction",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "An automatically generated label to identify individuals in your media file. Will be `unknown` if you have chosen to disable identification, or if the model is unable to distinguish between individuals."
            },
            {
              "key": "predictions",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "list",
                  "itemShape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:LanguagePrediction"
                    }
                  }
                }
              }
            }
          ],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_:GroupedPredictionsNerPrediction": {
        "name": "GroupedPredictionsNerPrediction",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "An automatically generated label to identify individuals in your media file. Will be `unknown` if you have chosen to disable identification, or if the model is unable to distinguish between individuals."
            },
            {
              "key": "predictions",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "list",
                  "itemShape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:NerPrediction"
                    }
                  }
                }
              }
            }
          ],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_:GroupedPredictionsProsodyPrediction": {
        "name": "GroupedPredictionsProsodyPrediction",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "An automatically generated label to identify individuals in your media file. Will be `unknown` if you have chosen to disable identification, or if the model is unable to distinguish between individuals."
            },
            {
              "key": "predictions",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "list",
                  "itemShape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:ProsodyPrediction"
                    }
                  }
                }
              }
            }
          ],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_:InProgress": {
        "name": "InProgress",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "created_timestamp_ms",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "long",
                    "default": 0
                  }
                }
              },
              "description": "When this job was created (Unix timestamp in milliseconds)."
            },
            {
              "key": "started_timestamp_ms",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "long",
                    "default": 0
                  }
                }
              },
              "description": "When this job started (Unix timestamp in milliseconds)."
            }
          ],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_:InferenceBaseRequest": {
        "name": "InferenceBaseRequest",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "models",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:Models"
                    }
                  }
                }
              }
            },
            {
              "key": "transcription",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:Transcription"
                    }
                  }
                }
              }
            },
            {
              "key": "urls",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "list",
                      "itemShape": {
                        "type": "alias",
                        "value": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              },
              "description": "URLs to the media files to be processed. Each must be a valid public URL to a media file (see recommended input filetypes) or an archive (`.zip`, `.tar.gz`, `.tar.bz2`, `.tar.xz`) of media files.\n\nIf you wish to supply more than 100 URLs, consider providing them as an archive (`.zip`, `.tar.gz`, `.tar.bz2`, `.tar.xz`)."
            },
            {
              "key": "registry_files",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "list",
                      "itemShape": {
                        "type": "alias",
                        "value": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              },
              "description": "List of File IDs corresponding to the files in the asset registry."
            },
            {
              "key": "text",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "list",
                      "itemShape": {
                        "type": "alias",
                        "value": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              },
              "description": "Text to supply directly to our language and NER models."
            },
            {
              "key": "callback_url",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "If provided, a `POST` request will be made to the URL with the generated predictions on completion or the error message on failure."
            },
            {
              "key": "notify",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean",
                        "default": false
                      }
                    }
                  }
                }
              },
              "description": "Whether to send an email notification to the user upon job completion/failure."
            }
          ],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_:InferencePrediction": {
        "name": "InferencePrediction",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "file",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "A file path relative to the top level source URL or file."
            },
            {
              "key": "models",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:ModelsPredictions"
                }
              }
            }
          ],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_:InferenceRequest": {
        "name": "InferenceRequest",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "models",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:Models"
                    }
                  }
                }
              }
            },
            {
              "key": "transcription",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:Transcription"
                    }
                  }
                }
              }
            },
            {
              "key": "urls",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "list",
                      "itemShape": {
                        "type": "alias",
                        "value": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              },
              "description": "URLs to the media files to be processed. Each must be a valid public URL to a media file (see recommended input filetypes) or an archive (`.zip`, `.tar.gz`, `.tar.bz2`, `.tar.xz`) of media files.\n\nIf you wish to supply more than 100 URLs, consider providing them as an archive (`.zip`, `.tar.gz`, `.tar.bz2`, `.tar.xz`)."
            },
            {
              "key": "registry_files",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "list",
                      "itemShape": {
                        "type": "alias",
                        "value": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              },
              "description": "List of File IDs corresponding to the files in the asset registry."
            },
            {
              "key": "text",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "list",
                      "itemShape": {
                        "type": "alias",
                        "value": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              },
              "description": "Text to supply directly to our language and NER models."
            },
            {
              "key": "callback_url",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "If provided, a `POST` request will be made to the URL with the generated predictions on completion or the error message on failure."
            },
            {
              "key": "notify",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean",
                        "default": false
                      }
                    }
                  }
                }
              },
              "description": "Whether to send an email notification to the user upon job completion/failure."
            },
            {
              "key": "files",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "list",
                  "itemShape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:File"
                    }
                  }
                }
              }
            }
          ],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_:InferenceResults": {
        "name": "InferenceResults",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "predictions",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "list",
                  "itemShape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:InferencePrediction"
                    }
                  }
                }
              }
            },
            {
              "key": "errors",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "list",
                  "itemShape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:Error"
                    }
                  }
                }
              }
            }
          ],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_:InferenceSourcePredictResult": {
        "name": "InferenceSourcePredictResult",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "source",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:Source"
                }
              }
            },
            {
              "key": "results",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:InferenceResults"
                    }
                  }
                }
              }
            },
            {
              "key": "error",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "An error message."
            }
          ],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_:JobEmbeddingGeneration": {
        "name": "JobEmbeddingGeneration",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "job_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "The ID associated with this job."
            },
            {
              "key": "user_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "key": "request",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:EmbeddingGenerationBaseRequest"
                }
              }
            },
            {
              "key": "state",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:StateEmbeddingGeneration"
                }
              }
            }
          ],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_:JobInference": {
        "name": "JobInference",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "job_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "The ID associated with this job."
            },
            {
              "key": "user_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "key": "request",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:InferenceRequest"
                }
              }
            },
            {
              "key": "state",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:StateInference"
                }
              }
            }
          ],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_:JobTlInference": {
        "name": "JobTlInference",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "job_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "The ID associated with this job."
            },
            {
              "key": "user_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "key": "request",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:TlInferenceBaseRequest"
                }
              }
            },
            {
              "key": "state",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:StateTlInference"
                }
              }
            }
          ],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_:JobTraining": {
        "name": "JobTraining",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "job_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "The ID associated with this job."
            },
            {
              "key": "user_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "key": "request",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:TrainingBaseRequest"
                }
              }
            },
            {
              "key": "state",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:StateTraining"
                }
              }
            }
          ],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_:JobId": {
        "name": "JobId",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "job_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "The ID of the started job."
            }
          ],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_:Language": {
        "name": "Language",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "granularity",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:Granularity"
                    }
                  }
                }
              }
            },
            {
              "key": "sentiment",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:Unconfigurable"
                    }
                  }
                }
              }
            },
            {
              "key": "toxicity",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:Unconfigurable"
                    }
                  }
                }
              }
            },
            {
              "key": "identify_speakers",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean",
                        "default": false
                      }
                    }
                  }
                }
              },
              "description": "Whether to return identifiers for speakers over time. If `true`, unique identifiers will be assigned to spoken words to differentiate different speakers. If `false`, all speakers will be tagged with an `unknown` ID."
            }
          ],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_:LanguagePrediction": {
        "name": "LanguagePrediction",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "text",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "A segment of text (like a word or a sentence)."
            },
            {
              "key": "position",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:PositionInterval"
                }
              }
            },
            {
              "key": "time",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:TimeInterval"
                    }
                  }
                }
              }
            },
            {
              "key": "confidence",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  }
                }
              },
              "description": "Value between `0.0` and `1.0` that indicates our transcription model's relative confidence in this text."
            },
            {
              "key": "speaker_confidence",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  }
                }
              },
              "description": "Value between `0.0` and `1.0` that indicates our transcription model's relative confidence that this text was spoken by this speaker."
            },
            {
              "key": "emotions",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "list",
                  "itemShape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:EmotionScore"
                    }
                  }
                }
              },
              "description": "A high-dimensional embedding in emotion space."
            },
            {
              "key": "sentiment",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "list",
                      "itemShape": {
                        "type": "alias",
                        "value": {
                          "type": "id",
                          "id": "type_:SentimentScore"
                        }
                      }
                    }
                  }
                }
              },
              "description": "Sentiment predictions returned as a distribution. This model predicts the probability that a given text could be interpreted as having each sentiment level from `1` (negative) to `9` (positive).\n\nCompared to returning one estimate of sentiment, this enables a more nuanced analysis of a text's meaning. For example, a text with very neutral sentiment would have an average rating of `5`. But also a text that could be interpreted as having very positive sentiment or very negative sentiment would also have an average rating of `5`. The average sentiment is less informative than the distribution over sentiment, so this API returns a value for each sentiment level."
            },
            {
              "key": "toxicity",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "list",
                      "itemShape": {
                        "type": "alias",
                        "value": {
                          "type": "id",
                          "id": "type_:ToxicityScore"
                        }
                      }
                    }
                  }
                }
              },
              "description": "Toxicity predictions returned as probabilities that the text can be classified into the following categories: `toxic`, `severe_toxic`, `obscene`, `threat`, `insult`, and `identity_hate`."
            }
          ],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_:Models": {
        "name": "Models",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "face",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:Face"
                    }
                  }
                }
              }
            },
            {
              "key": "burst",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:Unconfigurable"
                    }
                  }
                }
              }
            },
            {
              "key": "prosody",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:Prosody"
                    }
                  }
                }
              }
            },
            {
              "key": "language",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:Language"
                    }
                  }
                }
              }
            },
            {
              "key": "ner",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:Ner"
                    }
                  }
                }
              }
            },
            {
              "key": "facemesh",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:Unconfigurable"
                    }
                  }
                }
              }
            }
          ],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_:ModelsPredictions": {
        "name": "ModelsPredictions",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "face",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:PredictionsOptionalNullFacePrediction"
                    }
                  }
                }
              }
            },
            {
              "key": "burst",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:PredictionsOptionalNullBurstPrediction"
                    }
                  }
                }
              }
            },
            {
              "key": "prosody",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:PredictionsOptionalTranscriptionMetadataProsodyPrediction"
                    }
                  }
                }
              }
            },
            {
              "key": "language",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:PredictionsOptionalTranscriptionMetadataLanguagePrediction"
                    }
                  }
                }
              }
            },
            {
              "key": "ner",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:PredictionsOptionalTranscriptionMetadataNerPrediction"
                    }
                  }
                }
              }
            },
            {
              "key": "facemesh",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:PredictionsOptionalNullFacemeshPrediction"
                    }
                  }
                }
              }
            }
          ],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_:Ner": {
        "name": "Ner",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "identify_speakers",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean",
                        "default": false
                      }
                    }
                  }
                }
              },
              "description": "Whether to return identifiers for speakers over time. If `true`, unique identifiers will be assigned to spoken words to differentiate different speakers. If `false`, all speakers will be tagged with an `unknown` ID."
            }
          ],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_:NerPrediction": {
        "name": "NerPrediction",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "entity",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "The recognized topic or entity."
            },
            {
              "key": "position",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:PositionInterval"
                }
              }
            },
            {
              "key": "entity_confidence",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "double"
                  }
                }
              },
              "description": "Our NER model's relative confidence in the recognized topic or entity."
            },
            {
              "key": "support",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "double"
                  }
                }
              },
              "description": "A measure of how often the entity is linked to by other entities."
            },
            {
              "key": "uri",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "A URL which provides more information about the recognized topic or entity."
            },
            {
              "key": "link_word",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "The specific word to which the emotion predictions are linked."
            },
            {
              "key": "time",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:TimeInterval"
                    }
                  }
                }
              }
            },
            {
              "key": "confidence",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  }
                }
              },
              "description": "Value between `0.0` and `1.0` that indicates our transcription model's relative confidence in this text."
            },
            {
              "key": "speaker_confidence",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  }
                }
              },
              "description": "Value between `0.0` and `1.0` that indicates our transcription model's relative confidence that this text was spoken by this speaker."
            },
            {
              "key": "emotions",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "list",
                  "itemShape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:EmotionScore"
                    }
                  }
                }
              },
              "description": "A high-dimensional embedding in emotion space."
            }
          ],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_:Null": {
        "name": "Null",
        "description": "No associated metadata for this model. Value will be `null`.",
        "shape": {
          "type": "alias",
          "value": {
            "type": "map",
            "keyShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "unknown"
              }
            }
          }
        }
      },
      "type_:PositionInterval": {
        "name": "PositionInterval",
        "description": "Position of a segment of text within a larger document, measured in characters. Uses zero-based indexing. The beginning index is inclusive and the end index is exclusive.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "begin",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "uint64"
                  }
                }
              },
              "description": "The index of the first character in the text segment, inclusive."
            },
            {
              "key": "end",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "uint64"
                  }
                }
              },
              "description": "The index of the last character in the text segment, exclusive."
            }
          ],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_:PredictionsOptionalNullBurstPrediction": {
        "name": "PredictionsOptionalNullBurstPrediction",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "metadata",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:Null"
                    }
                  }
                }
              }
            },
            {
              "key": "grouped_predictions",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "list",
                  "itemShape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:GroupedPredictionsBurstPrediction"
                    }
                  }
                }
              }
            }
          ],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_:PredictionsOptionalNullFacePrediction": {
        "name": "PredictionsOptionalNullFacePrediction",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "metadata",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:Null"
                    }
                  }
                }
              }
            },
            {
              "key": "grouped_predictions",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "list",
                  "itemShape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:GroupedPredictionsFacePrediction"
                    }
                  }
                }
              }
            }
          ],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_:PredictionsOptionalNullFacemeshPrediction": {
        "name": "PredictionsOptionalNullFacemeshPrediction",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "metadata",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:Null"
                    }
                  }
                }
              }
            },
            {
              "key": "grouped_predictions",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "list",
                  "itemShape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:GroupedPredictionsFacemeshPrediction"
                    }
                  }
                }
              }
            }
          ],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_:PredictionsOptionalTranscriptionMetadataLanguagePrediction": {
        "name": "PredictionsOptionalTranscriptionMetadataLanguagePrediction",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "metadata",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:TranscriptionMetadata"
                    }
                  }
                }
              }
            },
            {
              "key": "grouped_predictions",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "list",
                  "itemShape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:GroupedPredictionsLanguagePrediction"
                    }
                  }
                }
              }
            }
          ],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_:PredictionsOptionalTranscriptionMetadataNerPrediction": {
        "name": "PredictionsOptionalTranscriptionMetadataNerPrediction",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "metadata",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:TranscriptionMetadata"
                    }
                  }
                }
              }
            },
            {
              "key": "grouped_predictions",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "list",
                  "itemShape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:GroupedPredictionsNerPrediction"
                    }
                  }
                }
              }
            }
          ],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_:PredictionsOptionalTranscriptionMetadataProsodyPrediction": {
        "name": "PredictionsOptionalTranscriptionMetadataProsodyPrediction",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "metadata",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:TranscriptionMetadata"
                    }
                  }
                }
              }
            },
            {
              "key": "grouped_predictions",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "list",
                  "itemShape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:GroupedPredictionsProsodyPrediction"
                    }
                  }
                }
              }
            }
          ],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_:Prosody": {
        "name": "Prosody",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "granularity",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:Granularity"
                    }
                  }
                }
              }
            },
            {
              "key": "window",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:Window"
                    }
                  }
                }
              }
            },
            {
              "key": "identify_speakers",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean",
                        "default": false
                      }
                    }
                  }
                }
              },
              "description": "Whether to return identifiers for speakers over time. If `true`, unique identifiers will be assigned to spoken words to differentiate different speakers. If `false`, all speakers will be tagged with an `unknown` ID."
            }
          ],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_:ProsodyPrediction": {
        "name": "ProsodyPrediction",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "text",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "A segment of text (like a word or a sentence)."
            },
            {
              "key": "time",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:TimeInterval"
                }
              }
            },
            {
              "key": "confidence",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  }
                }
              },
              "description": "Value between `0.0` and `1.0` that indicates our transcription model's relative confidence in this text."
            },
            {
              "key": "speaker_confidence",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  }
                }
              },
              "description": "Value between `0.0` and `1.0` that indicates our transcription model's relative confidence that this text was spoken by this speaker."
            },
            {
              "key": "emotions",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "list",
                  "itemShape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:EmotionScore"
                    }
                  }
                }
              },
              "description": "A high-dimensional embedding in emotion space."
            }
          ],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_:Queued": {
        "name": "Queued",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "created_timestamp_ms",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "long",
                    "default": 0
                  }
                }
              },
              "description": "When this job was created (Unix timestamp in milliseconds)."
            }
          ],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_:RegistryFileDetail": {
        "name": "RegistryFileDetail",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "file_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "File ID in the Asset Registry"
            },
            {
              "key": "file_url",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "URL to the file in the Asset Registry"
            }
          ],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_:Regression": {
        "name": "Regression",
        "shape": {
          "type": "alias",
          "value": {
            "type": "map",
            "keyShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "unknown"
              }
            }
          }
        }
      },
      "type_:SentimentScore": {
        "name": "SentimentScore",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "name",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "Level of sentiment, ranging from `1` (negative) to `9` (positive)"
            },
            {
              "key": "score",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "Prediction for this level of sentiment"
            }
          ],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_:SortBy": {
        "name": "SortBy",
        "shape": {
          "type": "enum",
          "values": [
            {
              "value": "created"
            },
            {
              "value": "started"
            },
            {
              "value": "ended"
            }
          ]
        }
      },
      "type_:Source": {
        "name": "Source",
        "shape": {
          "type": "discriminatedUnion",
          "discriminant": "type",
          "variants": [
            {
              "discriminantValue": "url",
              "extends": [
                "type_:SourceUrl"
              ],
              "properties": []
            },
            {
              "discriminantValue": "file",
              "extends": [
                "type_:SourceFile"
              ],
              "properties": []
            },
            {
              "discriminantValue": "text",
              "extends": [
                "type_:SourceTextSource"
              ],
              "properties": []
            }
          ]
        }
      },
      "type_:SourceFile": {
        "name": "SourceFile",
        "shape": {
          "type": "object",
          "extends": [
            "type_:File"
          ],
          "properties": [],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_:SourceTextSource": {
        "name": "SourceTextSource",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_:SourceUrl": {
        "name": "SourceUrl",
        "shape": {
          "type": "object",
          "extends": [
            "type_:Url"
          ],
          "properties": [],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_:Url": {
        "name": "Url",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "url",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "The URL of the source media file."
            }
          ],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_:StateEmbeddingGeneration": {
        "name": "StateEmbeddingGeneration",
        "shape": {
          "type": "discriminatedUnion",
          "discriminant": "status",
          "variants": [
            {
              "discriminantValue": "QUEUED",
              "extends": [
                "type_:StateEmbeddingGenerationQueued"
              ],
              "properties": []
            },
            {
              "discriminantValue": "IN_PROGRESS",
              "extends": [
                "type_:StateEmbeddingGenerationInProgress"
              ],
              "properties": []
            },
            {
              "discriminantValue": "COMPLETED",
              "extends": [
                "type_:StateEmbeddingGenerationCompletedEmbeddingGeneration"
              ],
              "properties": []
            },
            {
              "discriminantValue": "FAILED",
              "extends": [
                "type_:StateEmbeddingGenerationFailed"
              ],
              "properties": []
            }
          ]
        }
      },
      "type_:StateEmbeddingGenerationCompletedEmbeddingGeneration": {
        "name": "StateEmbeddingGenerationCompletedEmbeddingGeneration",
        "shape": {
          "type": "object",
          "extends": [
            "type_:CompletedEmbeddingGeneration"
          ],
          "properties": [],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_:StateEmbeddingGenerationFailed": {
        "name": "StateEmbeddingGenerationFailed",
        "shape": {
          "type": "object",
          "extends": [
            "type_:Failed"
          ],
          "properties": [],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_:StateEmbeddingGenerationInProgress": {
        "name": "StateEmbeddingGenerationInProgress",
        "shape": {
          "type": "object",
          "extends": [
            "type_:InProgress"
          ],
          "properties": [],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_:StateEmbeddingGenerationQueued": {
        "name": "StateEmbeddingGenerationQueued",
        "shape": {
          "type": "object",
          "extends": [
            "type_:Queued"
          ],
          "properties": [],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_:StateInference": {
        "name": "StateInference",
        "shape": {
          "type": "discriminatedUnion",
          "discriminant": "status",
          "variants": [
            {
              "discriminantValue": "QUEUED",
              "extends": [
                "type_:StateInferenceQueued"
              ],
              "properties": []
            },
            {
              "discriminantValue": "IN_PROGRESS",
              "extends": [
                "type_:StateInferenceInProgress"
              ],
              "properties": []
            },
            {
              "discriminantValue": "COMPLETED",
              "extends": [
                "type_:StateInferenceCompletedInference"
              ],
              "properties": []
            },
            {
              "discriminantValue": "FAILED",
              "extends": [
                "type_:StateInferenceFailed"
              ],
              "properties": []
            }
          ]
        }
      },
      "type_:StateInferenceCompletedInference": {
        "name": "StateInferenceCompletedInference",
        "shape": {
          "type": "object",
          "extends": [
            "type_:CompletedInference"
          ],
          "properties": [],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_:StateInferenceFailed": {
        "name": "StateInferenceFailed",
        "shape": {
          "type": "object",
          "extends": [
            "type_:Failed"
          ],
          "properties": [],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_:StateInferenceInProgress": {
        "name": "StateInferenceInProgress",
        "shape": {
          "type": "object",
          "extends": [
            "type_:InProgress"
          ],
          "properties": [],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_:StateInferenceQueued": {
        "name": "StateInferenceQueued",
        "shape": {
          "type": "object",
          "extends": [
            "type_:Queued"
          ],
          "properties": [],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_:StateTlInference": {
        "name": "StateTlInference",
        "shape": {
          "type": "discriminatedUnion",
          "discriminant": "status",
          "variants": [
            {
              "discriminantValue": "QUEUED",
              "extends": [
                "type_:StateTlInferenceQueued"
              ],
              "properties": []
            },
            {
              "discriminantValue": "IN_PROGRESS",
              "extends": [
                "type_:StateTlInferenceInProgress"
              ],
              "properties": []
            },
            {
              "discriminantValue": "COMPLETED",
              "extends": [
                "type_:StateTlInferenceCompletedTlInference"
              ],
              "properties": []
            },
            {
              "discriminantValue": "FAILED",
              "extends": [
                "type_:StateTlInferenceFailed"
              ],
              "properties": []
            }
          ]
        }
      },
      "type_:StateTlInferenceCompletedTlInference": {
        "name": "StateTlInferenceCompletedTlInference",
        "shape": {
          "type": "object",
          "extends": [
            "type_:CompletedTlInference"
          ],
          "properties": [],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_:StateTlInferenceFailed": {
        "name": "StateTlInferenceFailed",
        "shape": {
          "type": "object",
          "extends": [
            "type_:Failed"
          ],
          "properties": [],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_:StateTlInferenceInProgress": {
        "name": "StateTlInferenceInProgress",
        "shape": {
          "type": "object",
          "extends": [
            "type_:InProgress"
          ],
          "properties": [],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_:StateTlInferenceQueued": {
        "name": "StateTlInferenceQueued",
        "shape": {
          "type": "object",
          "extends": [
            "type_:Queued"
          ],
          "properties": [],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_:StateTraining": {
        "name": "StateTraining",
        "shape": {
          "type": "discriminatedUnion",
          "discriminant": "status",
          "variants": [
            {
              "discriminantValue": "QUEUED",
              "extends": [
                "type_:StateTrainingQueued"
              ],
              "properties": []
            },
            {
              "discriminantValue": "IN_PROGRESS",
              "extends": [
                "type_:StateTrainingInProgress"
              ],
              "properties": []
            },
            {
              "discriminantValue": "COMPLETED",
              "extends": [
                "type_:StateTrainingCompletedTraining"
              ],
              "properties": []
            },
            {
              "discriminantValue": "FAILED",
              "extends": [
                "type_:StateTrainingFailed"
              ],
              "properties": []
            }
          ]
        }
      },
      "type_:StateTrainingCompletedTraining": {
        "name": "StateTrainingCompletedTraining",
        "shape": {
          "type": "object",
          "extends": [
            "type_:CompletedTraining"
          ],
          "properties": [],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_:StateTrainingFailed": {
        "name": "StateTrainingFailed",
        "shape": {
          "type": "object",
          "extends": [
            "type_:Failed"
          ],
          "properties": [],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_:StateTrainingInProgress": {
        "name": "StateTrainingInProgress",
        "shape": {
          "type": "object",
          "extends": [
            "type_:InProgress"
          ],
          "properties": [],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_:StateTrainingQueued": {
        "name": "StateTrainingQueued",
        "shape": {
          "type": "object",
          "extends": [
            "type_:Queued"
          ],
          "properties": [],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_:Status": {
        "name": "Status",
        "shape": {
          "type": "enum",
          "values": [
            {
              "value": "QUEUED"
            },
            {
              "value": "IN_PROGRESS"
            },
            {
              "value": "COMPLETED"
            },
            {
              "value": "FAILED"
            }
          ]
        }
      },
      "type_:TlInferencePrediction": {
        "name": "TlInferencePrediction",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "file",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "A file path relative to the top level source URL or file."
            },
            {
              "key": "file_type",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "key": "custom_models",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "map",
                  "keyShape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  },
                  "valueShape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:CustomModelPrediction"
                    }
                  }
                }
              }
            }
          ],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_:TlInferenceResults": {
        "name": "TlInferenceResults",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "predictions",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "list",
                  "itemShape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:TlInferencePrediction"
                    }
                  }
                }
              }
            },
            {
              "key": "errors",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "list",
                  "itemShape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:Error"
                    }
                  }
                }
              }
            }
          ],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_:TlInferenceSourcePredictResult": {
        "name": "TlInferenceSourcePredictResult",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "source",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:Source"
                }
              }
            },
            {
              "key": "results",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:TlInferenceResults"
                    }
                  }
                }
              }
            },
            {
              "key": "error",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "An error message."
            }
          ],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_:Tag": {
        "name": "Tag",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "key",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "key": "value",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          ],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_:Target": {
        "name": "Target",
        "shape": {
          "type": "undiscriminatedUnion",
          "variants": [
            {
              "shape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "long",
                    "default": 0
                  }
                }
              }
            },
            {
              "shape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "double"
                  }
                }
              }
            },
            {
              "shape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          ]
        }
      },
      "type_:Task": {
        "name": "Task",
        "shape": {
          "type": "discriminatedUnion",
          "discriminant": "type",
          "variants": [
            {
              "discriminantValue": "classification",
              "extends": [
                "type_:TaskClassification"
              ],
              "properties": []
            },
            {
              "discriminantValue": "regression",
              "extends": [
                "type_:TaskRegression"
              ],
              "properties": []
            }
          ]
        }
      },
      "type_:TaskClassification": {
        "name": "TaskClassification",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_:TaskRegression": {
        "name": "TaskRegression",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_:TextSource": {
        "name": "TextSource",
        "shape": {
          "type": "alias",
          "value": {
            "type": "map",
            "keyShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "unknown"
              }
            }
          }
        }
      },
      "type_:TimeInterval": {
        "name": "TimeInterval",
        "description": "A time range with a beginning and end, measured in seconds.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "begin",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "double"
                  }
                }
              },
              "description": "Beginning of time range in seconds."
            },
            {
              "key": "end",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "double"
                  }
                }
              },
              "description": "End of time range in seconds."
            }
          ],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_:TlInferenceBaseRequest": {
        "name": "TlInferenceBaseRequest",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "custom_model",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:CustomModel"
                }
              }
            },
            {
              "key": "urls",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "list",
                      "itemShape": {
                        "type": "alias",
                        "value": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              },
              "description": "URLs to the media files to be processed. Each must be a valid public URL to a media file (see recommended input filetypes) or an archive (`.zip`, `.tar.gz`, `.tar.bz2`, `.tar.xz`) of media files.\n\nIf you wish to supply more than 100 URLs, consider providing them as an archive (`.zip`, `.tar.gz`, `.tar.bz2`, `.tar.xz`)."
            },
            {
              "key": "registry_files",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "list",
                      "itemShape": {
                        "type": "alias",
                        "value": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              },
              "description": "List of File IDs corresponding to the files in the asset registry."
            },
            {
              "key": "callback_url",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "If provided, a `POST` request will be made to the URL with the generated predictions on completion or the error message on failure."
            },
            {
              "key": "notify",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean",
                        "default": false
                      }
                    }
                  }
                }
              },
              "description": "Whether to send an email notification to the user upon job completion/failure."
            }
          ],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_:CustomModel": {
        "name": "CustomModel",
        "shape": {
          "type": "undiscriminatedUnion",
          "variants": [
            {
              "displayName": "Custom Model ID",
              "shape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:CustomModelId"
                }
              }
            },
            {
              "displayName": "Custom Model Version ID",
              "shape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:CustomModelVersionId"
                }
              }
            }
          ]
        }
      },
      "type_:CustomModelId": {
        "name": "CustomModelId",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          ],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_:CustomModelVersionId": {
        "name": "CustomModelVersionId",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "version_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          ],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_:ToxicityScore": {
        "name": "ToxicityScore",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "name",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "Category of toxicity."
            },
            {
              "key": "score",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "Prediction for this category of toxicity"
            }
          ],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_:TrainingBaseRequest": {
        "name": "TrainingBaseRequest",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "custom_model",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:CustomModelRequest"
                }
              }
            },
            {
              "key": "dataset",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:Dataset"
                }
              }
            },
            {
              "key": "target_feature",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string",
                        "default": "label"
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "task",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:Task"
                    }
                  }
                }
              }
            },
            {
              "key": "evaluation",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:EvaluationArgs"
                    }
                  }
                }
              }
            },
            {
              "key": "alternatives",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "list",
                      "itemShape": {
                        "type": "alias",
                        "value": {
                          "type": "id",
                          "id": "type_:Alternative"
                        }
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "callback_url",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "notify",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean",
                        "default": false
                      }
                    }
                  }
                }
              }
            }
          ],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_:TrainingCustomModel": {
        "name": "TrainingCustomModel",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "key": "version_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          ],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_:Transcription": {
        "name": "Transcription",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "language",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:Bcp47Tag"
                    }
                  }
                }
              }
            },
            {
              "key": "identify_speakers",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean",
                        "default": false
                      }
                    }
                  }
                }
              },
              "description": "Whether to return identifiers for speakers over time. If `true`, unique identifiers will be assigned to spoken words to differentiate different speakers. If `false`, all speakers will be tagged with an `unknown` ID."
            },
            {
              "key": "confidence_threshold",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "double",
                        "minimum": 0,
                        "maximum": 1,
                        "default": 0.5
                      }
                    }
                  }
                }
              },
              "description": "Transcript confidence threshold. Transcripts generated with a confidence less than this threshold will be considered invalid and not used as an input for model inference."
            }
          ],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_:TranscriptionMetadata": {
        "name": "TranscriptionMetadata",
        "description": "Transcription metadata for your media file.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "confidence",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "double"
                  }
                }
              },
              "description": "Value between `0.0` and `1.0` indicating our transcription model's relative confidence in the transcription of your media file."
            },
            {
              "key": "detected_language",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:Bcp47Tag"
                    }
                  }
                }
              }
            }
          ],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_:Type": {
        "name": "Type",
        "shape": {
          "type": "enum",
          "values": [
            {
              "value": "EMBEDDING_GENERATION"
            },
            {
              "value": "INFERENCE"
            },
            {
              "value": "TL_INFERENCE"
            },
            {
              "value": "TRAINING"
            }
          ]
        }
      },
      "type_:Unconfigurable": {
        "name": "Unconfigurable",
        "description": "To include predictions for this model type, set this field to `{}`. It is currently not configurable further.",
        "shape": {
          "type": "alias",
          "value": {
            "type": "map",
            "keyShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "unknown"
              }
            }
          }
        }
      },
      "type_:UnionJob": {
        "name": "UnionJob",
        "shape": {
          "type": "alias",
          "value": {
            "type": "id",
            "id": "type_:UnionJobJobInference"
          }
        }
      },
      "type_:UnionJobJobEmbeddingGeneration": {
        "name": "UnionJobJobEmbeddingGeneration",
        "shape": {
          "type": "object",
          "extends": [
            "type_:JobEmbeddingGeneration"
          ],
          "properties": [
            {
              "key": "type",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          ],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_:UnionJobJobInference": {
        "name": "UnionJobJobInference",
        "shape": {
          "type": "object",
          "extends": [
            "type_:JobInference"
          ],
          "properties": [
            {
              "key": "type",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "Denotes the job type.\n\nJobs created with the Expression Measurement API will have this field set to `INFERENCE`."
            }
          ],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_:UnionJobJobTlInference": {
        "name": "UnionJobJobTlInference",
        "shape": {
          "type": "object",
          "extends": [
            "type_:JobTlInference"
          ],
          "properties": [
            {
              "key": "type",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          ],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_:UnionJobJobTraining": {
        "name": "UnionJobJobTraining",
        "shape": {
          "type": "object",
          "extends": [
            "type_:JobTraining"
          ],
          "properties": [
            {
              "key": "type",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          ],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_:UnionPredictResult": {
        "name": "UnionPredictResult",
        "shape": {
          "type": "alias",
          "value": {
            "type": "id",
            "id": "type_:InferenceSourcePredictResult"
          }
        }
      },
      "type_:ValidationArgs": {
        "name": "ValidationArgs",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "positive_label",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:Target"
                    }
                  }
                }
              }
            }
          ],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_:When": {
        "name": "When",
        "shape": {
          "type": "enum",
          "values": [
            {
              "value": "created_before"
            },
            {
              "value": "created_after"
            }
          ]
        }
      },
      "type_:Window": {
        "name": "Window",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "length",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "double",
                        "minimum": 0.5,
                        "default": 4
                      }
                    }
                  }
                }
              },
              "description": "The length of the sliding window."
            },
            {
              "key": "step",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "double",
                        "minimum": 0.5,
                        "default": 1
                      }
                    }
                  }
                }
              },
              "description": "The step size of the sliding window."
            }
          ],
          "extraProperties": {
            "type": "unknown"
          }
        }
      }
    },
    "subpackages": {
      "subpackage_files": {
        "id": "subpackage_files",
        "name": "files"
      },
      "subpackage_datasets": {
        "id": "subpackage_datasets",
        "name": "datasets"
      },
      "subpackage_models": {
        "id": "subpackage_models",
        "name": "models"
      },
      "subpackage_jobs": {
        "id": "subpackage_jobs",
        "name": "jobs"
      }
    },
    "auths": {
      "default": {
        "type": "header",
        "headerWireValue": "X-Hume-Api-Key",
        "nameOverride": "apiKey"
      }
    }
  },
  {
    "id": "a14d3798-e567-4432-a6b3-2fa8a50954c7",
    "endpoints": {
      "endpoint_batch.list-jobs": {
        "id": "endpoint_batch.list-jobs",
        "namespace": [
          "subpackage_batch"
        ],
        "description": "Sort and filter jobs.",
        "method": "GET",
        "path": [
          {
            "type": "literal",
            "value": "/v0/batch/jobs"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.hume.ai"
          }
        ],
        "queryParameters": [
          {
            "key": "limit",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                }
              }
            },
            "description": "The maximum number of jobs to include in the response."
          },
          {
            "key": "status",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "id",
                    "id": "type_batch:Status"
                  }
                }
              }
            },
            "description": "Include only jobs of this status in the response. There are four possible statuses:\n\n- `QUEUED`: The job has been received and is waiting to be processed.\n\n- `IN_PROGRESS`: The job is currently being processed.\n\n- `COMPLETED`: The job has finished processing.\n\n- `FAILED`: The job encountered an error and could not be completed successfully."
          },
          {
            "key": "when",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "id",
                    "id": "type_batch:When"
                  }
                }
              }
            },
            "description": "Specify whether to include jobs created before or after a given `timestamp_ms`."
          },
          {
            "key": "timestamp_ms",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "long",
                      "default": 0
                    }
                  }
                }
              }
            },
            "description": "Provide a timestamp in milliseconds to filter jobs.\n\nWhen combined with the `when` parameter, you can filter jobs before or after the given timestamp. Defaults to the current Unix timestamp if one is not provided."
          },
          {
            "key": "sort_by",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "id",
                    "id": "type_batch:SortBy"
                  }
                }
              }
            },
            "description": "Specify which timestamp to sort the jobs by.\n\n- `created`: Sort jobs by the time of creation, indicated by `created_timestamp_ms`.\n\n- `started`: Sort jobs by the time processing started, indicated by `started_timestamp_ms`.\n\n- `ended`: Sort jobs by the time processing ended, indicated by `ended_timestamp_ms`."
          },
          {
            "key": "direction",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "id",
                    "id": "type_batch:Direction"
                  }
                }
              }
            },
            "description": "Specify the order in which to sort the jobs. Defaults to descending order.\n\n- `asc`: Sort in ascending order (chronological, with the oldest records first).\n\n- `desc`: Sort in descending order (reverse-chronological, with the newest records first)."
          }
        ],
        "requests": [],
        "responses": [
          {
            "description": "",
            "statusCode": 200,
            "body": {
              "type": "alias",
              "value": {
                "type": "list",
                "itemShape": {
                  "type": "alias",
                  "value": {
                    "type": "id",
                    "id": "type_batch:UnionJob"
                  }
                }
              }
            }
          }
        ],
        "examples": [
          {
            "path": "/v0/batch/jobs",
            "responseStatusCode": 200,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": [
                {
                  "job_id": "job_id",
                  "request": {
                    "files": [
                      {
                        "md5sum": "md5sum",
                        "filename": "filename",
                        "content_type": "content_type"
                      }
                    ],
                    "models": {
                      "face": {
                        "fps_pred": 3,
                        "prob_threshold": 0.99,
                        "identify_faces": false,
                        "min_face_size": 60,
                        "save_faces": false
                      },
                      "burst": {},
                      "prosody": {
                        "granularity": "utterance",
                        "identify_speakers": false
                      },
                      "language": {
                        "granularity": "word",
                        "identify_speakers": false
                      },
                      "ner": {
                        "identify_speakers": false
                      },
                      "facemesh": {}
                    },
                    "urls": [
                      "https://hume-tutorials.s3.amazonaws.com/faces.zip"
                    ],
                    "text": [],
                    "notify": true
                  },
                  "state": {
                    "status": "COMPLETED",
                    "created_timestamp_ms": 1712587158717,
                    "ended_timestamp_ms": 1712587159274,
                    "num_errors": 0,
                    "num_predictions": 10,
                    "started_timestamp_ms": 1712587158800
                  },
                  "type": "INFERENCE"
                }
              ]
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl https://api.hume.ai/v0/batch/jobs \\\n     -H \"X-Hume-Api-Key: <apiKey>\"",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from hume import HumeClient\n\nclient = HumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.expression_measurement.batch.list_jobs()\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumeClient } from \"hume\";\n\nconst client = new HumeClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.expressionMeasurement.batch.listJobs();\n",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "endpoint_batch.start-inference-job": {
        "id": "endpoint_batch.start-inference-job",
        "namespace": [
          "subpackage_batch"
        ],
        "description": "Start a new measurement inference job.",
        "method": "POST",
        "path": [
          {
            "type": "literal",
            "value": "/v0/batch/jobs"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.hume.ai"
          }
        ],
        "requests": [
          {
            "contentType": "application/json",
            "body": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_batch:InferenceBaseRequest"
              }
            }
          }
        ],
        "responses": [
          {
            "description": "",
            "statusCode": 200,
            "body": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_batch:JobId"
              }
            }
          }
        ],
        "examples": [
          {
            "path": "/v0/batch/jobs",
            "responseStatusCode": 200,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {
                "urls": [
                  "https://hume-tutorials.s3.amazonaws.com/faces.zip"
                ],
                "notify": true
              }
            },
            "responseBody": {
              "type": "json",
              "value": {
                "job_id": "job_id"
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://api.hume.ai/v0/batch/jobs \\\n     -H \"X-Hume-Api-Key: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n  \"urls\": [\n    \"https://hume-tutorials.s3.amazonaws.com/faces.zip\"\n  ],\n  \"notify\": true\n}'",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from hume import HumeClient\n\nclient = HumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.expression_measurement.batch.start_inference_job(\n    urls=[\"https://hume-tutorials.s3.amazonaws.com/faces.zip\"],\n    notify=True,\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumeClient } from \"hume\";\n\nconst client = new HumeClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.expressionMeasurement.batch.startInferenceJob({\n    urls: [\"https://hume-tutorials.s3.amazonaws.com/faces.zip\"],\n    notify: true\n});\n",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "endpoint_batch.get-job-details": {
        "id": "endpoint_batch.get-job-details",
        "namespace": [
          "subpackage_batch"
        ],
        "description": "Get the request details and state of a given job.",
        "method": "GET",
        "path": [
          {
            "type": "literal",
            "value": "/v0/batch/jobs/"
          },
          {
            "type": "pathParameter",
            "value": "id"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.hume.ai"
          }
        ],
        "pathParameters": [
          {
            "key": "id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "The unique identifier for the job."
          }
        ],
        "requests": [],
        "responses": [
          {
            "description": "",
            "statusCode": 200,
            "body": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_batch:UnionJob"
              }
            }
          }
        ],
        "examples": [
          {
            "path": "/v0/batch/jobs/job_id",
            "responseStatusCode": 200,
            "name": "Inference",
            "pathParameters": {
              "id": "job_id"
            },
            "queryParameters": {},
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "job_id": "job_id",
                "request": {
                  "files": [],
                  "models": {
                    "face": {
                      "fps_pred": 3,
                      "prob_threshold": 0.99,
                      "identify_faces": false,
                      "min_face_size": 60,
                      "save_faces": false
                    },
                    "burst": {},
                    "prosody": {
                      "granularity": "utterance",
                      "identify_speakers": false
                    },
                    "language": {
                      "granularity": "word",
                      "identify_speakers": false
                    },
                    "ner": {
                      "identify_speakers": false
                    },
                    "facemesh": {}
                  },
                  "urls": [
                    "https://hume-tutorials.s3.amazonaws.com/faces.zip"
                  ],
                  "text": [],
                  "notify": true
                },
                "state": {
                  "status": "COMPLETED",
                  "created_timestamp_ms": 1712590457884,
                  "ended_timestamp_ms": 1712590462252,
                  "num_errors": 0,
                  "num_predictions": 10,
                  "started_timestamp_ms": 1712590457995
                },
                "type": "INFERENCE"
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl https://api.hume.ai/v0/batch/jobs/job_id \\\n     -H \"X-Hume-Api-Key: <apiKey>\"",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from hume import HumeClient\n\nclient = HumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.expression_measurement.batch.get_job_details(\n    id=\"job_id\",\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumeClient } from \"hume\";\n\nconst client = new HumeClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.expressionMeasurement.batch.getJobDetails(\"job_id\");\n",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "endpoint_batch.get-job-predictions": {
        "id": "endpoint_batch.get-job-predictions",
        "namespace": [
          "subpackage_batch"
        ],
        "description": "Get the JSON predictions of a completed inference job.",
        "method": "GET",
        "path": [
          {
            "type": "literal",
            "value": "/v0/batch/jobs/"
          },
          {
            "type": "pathParameter",
            "value": "id"
          },
          {
            "type": "literal",
            "value": "/predictions"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.hume.ai"
          }
        ],
        "pathParameters": [
          {
            "key": "id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "The unique identifier for the job."
          }
        ],
        "requests": [],
        "responses": [
          {
            "description": "",
            "statusCode": 200,
            "body": {
              "type": "alias",
              "value": {
                "type": "list",
                "itemShape": {
                  "type": "alias",
                  "value": {
                    "type": "id",
                    "id": "type_batch:UnionPredictResult"
                  }
                }
              }
            }
          }
        ],
        "examples": [
          {
            "path": "/v0/batch/jobs/job_id/predictions",
            "responseStatusCode": 200,
            "pathParameters": {
              "id": "job_id"
            },
            "queryParameters": {},
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": [
                {
                  "source": {
                    "type": "url",
                    "url": "https://hume-tutorials.s3.amazonaws.com/faces.zip"
                  },
                  "results": {
                    "predictions": [
                      {
                        "file": "faces/100.jpg",
                        "models": {
                          "face": {
                            "grouped_predictions": [
                              {
                                "id": "unknown",
                                "predictions": [
                                  {
                                    "frame": 0,
                                    "time": 0,
                                    "prob": 0.9994111061096191,
                                    "box": {
                                      "x": 1187.885986328125,
                                      "y": 1397.697509765625,
                                      "w": 1401.668701171875,
                                      "h": 1961.424560546875
                                    },
                                    "emotions": [
                                      {
                                        "name": "Admiration",
                                        "score": 0.10722749680280685
                                      },
                                      {
                                        "name": "Adoration",
                                        "score": 0.06395940482616425
                                      },
                                      {
                                        "name": "Aesthetic Appreciation",
                                        "score": 0.05811462551355362
                                      },
                                      {
                                        "name": "Amusement",
                                        "score": 0.14187128841876984
                                      },
                                      {
                                        "name": "Anger",
                                        "score": 0.02804684266448021
                                      },
                                      {
                                        "name": "Anxiety",
                                        "score": 0.2713485360145569
                                      },
                                      {
                                        "name": "Awe",
                                        "score": 0.33812594413757324
                                      },
                                      {
                                        "name": "Awkwardness",
                                        "score": 0.1745193600654602
                                      },
                                      {
                                        "name": "Boredom",
                                        "score": 0.23600080609321594
                                      },
                                      {
                                        "name": "Calmness",
                                        "score": 0.18988418579101562
                                      },
                                      {
                                        "name": "Concentration",
                                        "score": 0.44288986921310425
                                      },
                                      {
                                        "name": "Confusion",
                                        "score": 0.39346569776535034
                                      },
                                      {
                                        "name": "Contemplation",
                                        "score": 0.31002455949783325
                                      },
                                      {
                                        "name": "Contempt",
                                        "score": 0.048870109021663666
                                      },
                                      {
                                        "name": "Contentment",
                                        "score": 0.0579497292637825
                                      },
                                      {
                                        "name": "Craving",
                                        "score": 0.06544201076030731
                                      },
                                      {
                                        "name": "Desire",
                                        "score": 0.05526508390903473
                                      },
                                      {
                                        "name": "Determination",
                                        "score": 0.08590991795063019
                                      },
                                      {
                                        "name": "Disappointment",
                                        "score": 0.19508258998394012
                                      },
                                      {
                                        "name": "Disgust",
                                        "score": 0.031529419124126434
                                      },
                                      {
                                        "name": "Distress",
                                        "score": 0.23210826516151428
                                      },
                                      {
                                        "name": "Doubt",
                                        "score": 0.3284550905227661
                                      },
                                      {
                                        "name": "Ecstasy",
                                        "score": 0.040716782212257385
                                      },
                                      {
                                        "name": "Embarrassment",
                                        "score": 0.1467227339744568
                                      },
                                      {
                                        "name": "Empathic Pain",
                                        "score": 0.07633581757545471
                                      },
                                      {
                                        "name": "Entrancement",
                                        "score": 0.16245244443416595
                                      },
                                      {
                                        "name": "Envy",
                                        "score": 0.03267110139131546
                                      },
                                      {
                                        "name": "Excitement",
                                        "score": 0.10656816512346268
                                      },
                                      {
                                        "name": "Fear",
                                        "score": 0.3115977346897125
                                      },
                                      {
                                        "name": "Guilt",
                                        "score": 0.11615975946187973
                                      },
                                      {
                                        "name": "Horror",
                                        "score": 0.19795553386211395
                                      },
                                      {
                                        "name": "Interest",
                                        "score": 0.3136432468891144
                                      },
                                      {
                                        "name": "Joy",
                                        "score": 0.06285581737756729
                                      },
                                      {
                                        "name": "Love",
                                        "score": 0.06339752674102783
                                      },
                                      {
                                        "name": "Nostalgia",
                                        "score": 0.05866732448339462
                                      },
                                      {
                                        "name": "Pain",
                                        "score": 0.07684041559696198
                                      },
                                      {
                                        "name": "Pride",
                                        "score": 0.026822954416275024
                                      },
                                      {
                                        "name": "Realization",
                                        "score": 0.30000734329223633
                                      },
                                      {
                                        "name": "Relief",
                                        "score": 0.04414166510105133
                                      },
                                      {
                                        "name": "Romance",
                                        "score": 0.042728863656520844
                                      },
                                      {
                                        "name": "Sadness",
                                        "score": 0.14773206412792206
                                      },
                                      {
                                        "name": "Satisfaction",
                                        "score": 0.05902980640530586
                                      },
                                      {
                                        "name": "Shame",
                                        "score": 0.08103451132774353
                                      },
                                      {
                                        "name": "Surprise (negative)",
                                        "score": 0.25518184900283813
                                      },
                                      {
                                        "name": "Surprise (positive)",
                                        "score": 0.28845661878585815
                                      },
                                      {
                                        "name": "Sympathy",
                                        "score": 0.062488824129104614
                                      },
                                      {
                                        "name": "Tiredness",
                                        "score": 0.1559651643037796
                                      },
                                      {
                                        "name": "Triumph",
                                        "score": 0.01955239288508892
                                      }
                                    ]
                                  }
                                ]
                              }
                            ]
                          }
                        }
                      }
                    ],
                    "errors": []
                  }
                }
              ]
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl https://api.hume.ai/v0/batch/jobs/job_id/predictions \\\n     -H \"X-Hume-Api-Key: <apiKey>\"",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from hume import HumeClient\n\nclient = HumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.expression_measurement.batch.get_job_predictions(\n    id=\"job_id\",\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumeClient } from \"hume\";\n\nconst client = new HumeClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.expressionMeasurement.batch.getJobPredictions(\"job_id\");\n",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "endpoint_batch.get-job-artifacts": {
        "id": "endpoint_batch.get-job-artifacts",
        "namespace": [
          "subpackage_batch"
        ],
        "description": "Get the artifacts ZIP of a completed inference job.",
        "method": "GET",
        "path": [
          {
            "type": "literal",
            "value": "/v0/batch/jobs/"
          },
          {
            "type": "pathParameter",
            "value": "id"
          },
          {
            "type": "literal",
            "value": "/artifacts"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.hume.ai"
          }
        ],
        "pathParameters": [
          {
            "key": "id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "The unique identifier for the job."
          }
        ],
        "requests": [],
        "responses": [
          {
            "description": "",
            "statusCode": 200,
            "body": {
              "type": "fileDownload"
            }
          }
        ],
        "examples": [
          {
            "path": "/v0/batch/jobs/id/artifacts",
            "responseStatusCode": 204,
            "pathParameters": {
              "id": "id"
            },
            "queryParameters": {},
            "headers": {},
            "responseBody": {
              "type": "filename",
              "value": "<bytes>"
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl https://api.hume.ai/v0/batch/jobs/id/artifacts \\\n     -H \"X-Hume-Api-Key: <apiKey>\"",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "endpoint_batch.start-inference-job-from-local-file": {
        "id": "endpoint_batch.start-inference-job-from-local-file",
        "namespace": [
          "subpackage_batch"
        ],
        "description": "Start a new batch inference job.",
        "method": "POST",
        "path": [
          {
            "type": "literal",
            "value": "/v0/batch/jobs"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.hume.ai"
          }
        ],
        "requests": [
          {
            "contentType": "multipart/form-data",
            "body": {
              "type": "formData",
              "fields": [
                {
                  "type": "property",
                  "key": "json",
                  "description": "Stringified JSON object containing the inference job configuration.",
                  "valueShape": {
                    "type": "alias",
                    "value": {
                      "type": "optional",
                      "shape": {
                        "type": "alias",
                        "value": {
                          "type": "id",
                          "id": "type_batch:InferenceBaseRequest"
                        }
                      }
                    }
                  }
                },
                {
                  "type": "files",
                  "key": "file",
                  "isOptional": false
                }
              ]
            }
          }
        ],
        "responses": [
          {
            "description": "",
            "statusCode": 200,
            "body": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_batch:JobId"
              }
            }
          }
        ],
        "examples": [
          {
            "path": "/v0/batch/jobs",
            "responseStatusCode": 200,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "form",
              "value": {
                "json": {
                  "type": "json"
                },
                "file": {
                  "type": "filenames",
                  "value": [
                    "<filename1>",
                    "<filename2>"
                  ]
                }
              }
            },
            "responseBody": {
              "type": "json",
              "value": {
                "job_id": "string"
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://api.hume.ai/v0/batch/jobs \\\n     -H \"X-Hume-Api-Key: <apiKey>\" \\\n     -H \"Content-Type: multipart/form-data\" \\\n     -F \"file[]\"=@<filename1> \\\n     -F \"file[]\"=@<filename2>",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from hume import HumeClient\n\nclient = HumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.expression_measurement.batch.start_inference_job(\n    urls=[\"https://hume-tutorials.s3.amazonaws.com/faces.zip\"],\n    notify=True,\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumeClient } from \"hume\";\n\nconst client = new HumeClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.expressionMeasurement.batch.startInferenceJob({\n    urls: [\"https://hume-tutorials.s3.amazonaws.com/faces.zip\"],\n    notify: true\n});\n",
                  "generated": true
                }
              ]
            }
          }
        ]
      }
    },
    "websockets": {
      "subpackage_stream.Stream": {
        "id": "subpackage_stream.Stream",
        "namespace": [
          "subpackage_stream"
        ],
        "path": [
          {
            "type": "literal",
            "value": "/v0/stream/models"
          }
        ],
        "messages": [
          {
            "type": "subscribe",
            "origin": "server",
            "body": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_stream:SubscribeEvent"
              }
            }
          },
          {
            "type": "publish",
            "origin": "client",
            "body": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_stream:StreamModelsEndpointPayload"
              }
            }
          }
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "wss://api.hume.ai"
          }
        ],
        "requestHeaders": [
          {
            "key": "X-Hume-Api-Key",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "examples": [
          {
            "path": "/v0/stream/models",
            "pathParameters": {},
            "queryParameters": {},
            "requestHeaders": {},
            "messages": [
              {
                "type": "publish",
                "body": {}
              },
              {
                "type": "subscribe",
                "body": {}
              }
            ]
          }
        ]
      }
    },
    "webhooks": {},
    "types": {
      "type_batch:Alternative": {
        "name": "Alternative",
        "shape": {
          "type": "alias",
          "value": {
            "type": "literal",
            "value": {
              "type": "stringLiteral",
              "value": "language_only"
            }
          }
        }
      },
      "type_batch:Bcp47Tag": {
        "name": "Bcp47Tag",
        "shape": {
          "type": "enum",
          "values": [
            {
              "value": "zh"
            },
            {
              "value": "da"
            },
            {
              "value": "nl"
            },
            {
              "value": "en"
            },
            {
              "value": "en-AU"
            },
            {
              "value": "en-IN"
            },
            {
              "value": "en-NZ"
            },
            {
              "value": "en-GB"
            },
            {
              "value": "fr"
            },
            {
              "value": "fr-CA"
            },
            {
              "value": "de"
            },
            {
              "value": "hi"
            },
            {
              "value": "hi-Latn"
            },
            {
              "value": "id"
            },
            {
              "value": "it"
            },
            {
              "value": "ja"
            },
            {
              "value": "ko"
            },
            {
              "value": "no"
            },
            {
              "value": "pl"
            },
            {
              "value": "pt"
            },
            {
              "value": "pt-BR"
            },
            {
              "value": "pt-PT"
            },
            {
              "value": "ru"
            },
            {
              "value": "es"
            },
            {
              "value": "es-419"
            },
            {
              "value": "sv"
            },
            {
              "value": "ta"
            },
            {
              "value": "tr"
            },
            {
              "value": "uk"
            }
          ]
        }
      },
      "type_batch:BoundingBox": {
        "name": "BoundingBox",
        "description": "A bounding box around a face.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "x",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "double"
                  }
                }
              },
              "description": "x-coordinate of bounding box top left corner."
            },
            {
              "key": "y",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "double"
                  }
                }
              },
              "description": "y-coordinate of bounding box top left corner."
            },
            {
              "key": "w",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "double"
                  }
                }
              },
              "description": "Bounding box width."
            },
            {
              "key": "h",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "double"
                  }
                }
              },
              "description": "Bounding box height."
            }
          ],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_batch:BurstPrediction": {
        "name": "BurstPrediction",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "time",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_batch:TimeInterval"
                }
              }
            },
            {
              "key": "emotions",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "list",
                  "itemShape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_batch:EmotionScore"
                    }
                  }
                }
              },
              "description": "A high-dimensional embedding in emotion space."
            },
            {
              "key": "descriptions",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "list",
                  "itemShape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_batch:DescriptionsScore"
                    }
                  }
                }
              },
              "description": "Modality-specific descriptive features and their scores."
            }
          ],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_batch:Classification": {
        "name": "Classification",
        "shape": {
          "type": "alias",
          "value": {
            "type": "map",
            "keyShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "unknown"
              }
            }
          }
        }
      },
      "type_batch:CompletedEmbeddingGeneration": {
        "name": "CompletedEmbeddingGeneration",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "created_timestamp_ms",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "long",
                    "default": 0
                  }
                }
              },
              "description": "When this job was created (Unix timestamp in milliseconds)."
            },
            {
              "key": "started_timestamp_ms",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "long",
                    "default": 0
                  }
                }
              },
              "description": "When this job started (Unix timestamp in milliseconds)."
            },
            {
              "key": "ended_timestamp_ms",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "long",
                    "default": 0
                  }
                }
              },
              "description": "When this job ended (Unix timestamp in milliseconds)."
            }
          ],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_batch:CompletedInference": {
        "name": "CompletedInference",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "created_timestamp_ms",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "long",
                    "default": 0
                  }
                }
              },
              "description": "When this job was created (Unix timestamp in milliseconds)."
            },
            {
              "key": "started_timestamp_ms",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "long",
                    "default": 0
                  }
                }
              },
              "description": "When this job started (Unix timestamp in milliseconds)."
            },
            {
              "key": "ended_timestamp_ms",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "long",
                    "default": 0
                  }
                }
              },
              "description": "When this job ended (Unix timestamp in milliseconds)."
            },
            {
              "key": "num_predictions",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "uint64"
                  }
                }
              },
              "description": "The number of predictions that were generated by this job."
            },
            {
              "key": "num_errors",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "uint64"
                  }
                }
              },
              "description": "The number of errors that occurred while running this job."
            }
          ],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_batch:CompletedTlInference": {
        "name": "CompletedTlInference",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "created_timestamp_ms",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "long",
                    "default": 0
                  }
                }
              },
              "description": "When this job was created (Unix timestamp in milliseconds)."
            },
            {
              "key": "started_timestamp_ms",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "long",
                    "default": 0
                  }
                }
              },
              "description": "When this job started (Unix timestamp in milliseconds)."
            },
            {
              "key": "ended_timestamp_ms",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "long",
                    "default": 0
                  }
                }
              },
              "description": "When this job ended (Unix timestamp in milliseconds)."
            },
            {
              "key": "num_predictions",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "uint64"
                  }
                }
              },
              "description": "The number of predictions that were generated by this job."
            },
            {
              "key": "num_errors",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "uint64"
                  }
                }
              },
              "description": "The number of errors that occurred while running this job."
            }
          ],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_batch:CompletedTraining": {
        "name": "CompletedTraining",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "created_timestamp_ms",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "long",
                    "default": 0
                  }
                }
              },
              "description": "When this job was created (Unix timestamp in milliseconds)."
            },
            {
              "key": "started_timestamp_ms",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "long",
                    "default": 0
                  }
                }
              },
              "description": "When this job started (Unix timestamp in milliseconds)."
            },
            {
              "key": "ended_timestamp_ms",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "long",
                    "default": 0
                  }
                }
              },
              "description": "When this job ended (Unix timestamp in milliseconds)."
            },
            {
              "key": "custom_model",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_batch:TrainingCustomModel"
                }
              }
            },
            {
              "key": "alternatives",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "map",
                      "keyShape": {
                        "type": "alias",
                        "value": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      },
                      "valueShape": {
                        "type": "alias",
                        "value": {
                          "type": "id",
                          "id": "type_batch:TrainingCustomModel"
                        }
                      }
                    }
                  }
                }
              }
            }
          ],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_batch:CustomModelPrediction": {
        "name": "CustomModelPrediction",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "output",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "map",
                  "keyShape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  },
                  "valueShape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "error",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "key": "task_type",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          ],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_batch:CustomModelRequest": {
        "name": "CustomModelRequest",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "name",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "key": "description",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "tags",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "list",
                      "itemShape": {
                        "type": "alias",
                        "value": {
                          "type": "id",
                          "id": "type_batch:Tag"
                        }
                      }
                    }
                  }
                }
              }
            }
          ],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_batch:Dataset": {
        "name": "Dataset",
        "shape": {
          "type": "undiscriminatedUnion",
          "variants": [
            {
              "displayName": "Dataset ID",
              "shape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_batch:DatasetId"
                }
              }
            },
            {
              "displayName": "Dataset Version ID",
              "shape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_batch:DatasetVersionId"
                }
              }
            }
          ]
        }
      },
      "type_batch:DatasetId": {
        "name": "DatasetId",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          ],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_batch:DatasetVersionId": {
        "name": "DatasetVersionId",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "version_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          ],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_batch:DescriptionsScore": {
        "name": "DescriptionsScore",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "name",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "Name of the descriptive feature being expressed."
            },
            {
              "key": "score",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "double",
                    "minimum": 2.2250738585072014e-308,
                    "maximum": 1.7976931348623157e+308,
                    "default": 0
                  }
                }
              },
              "description": "Embedding value for the descriptive feature being expressed."
            }
          ],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_batch:Direction": {
        "name": "Direction",
        "shape": {
          "type": "enum",
          "values": [
            {
              "value": "asc"
            },
            {
              "value": "desc"
            }
          ]
        }
      },
      "type_batch:EmbeddingGenerationBaseRequest": {
        "name": "EmbeddingGenerationBaseRequest",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "registry_file_details",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "list",
                      "itemShape": {
                        "type": "alias",
                        "value": {
                          "type": "id",
                          "id": "type_batch:RegistryFileDetail"
                        }
                      }
                    }
                  }
                }
              },
              "description": "File ID and File URL pairs for an asset registry file"
            }
          ],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_batch:EmotionScore": {
        "name": "EmotionScore",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "name",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "Name of the emotion being expressed."
            },
            {
              "key": "score",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "double",
                    "minimum": 2.2250738585072014e-308,
                    "maximum": 1.7976931348623157e+308,
                    "default": 0
                  }
                }
              },
              "description": "Embedding value for the emotion being expressed."
            }
          ],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_batch:Error": {
        "name": "Error",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "message",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "An error message."
            },
            {
              "key": "file",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "A file path relative to the top level source URL or file."
            }
          ],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_batch:EvaluationArgs": {
        "name": "EvaluationArgs",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "validation",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_batch:ValidationArgs"
                    }
                  }
                }
              }
            }
          ],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_batch:Face": {
        "name": "Face",
        "description": "The Facial Emotional Expression model analyzes human facial expressions in images and videos. Results will be provided per frame for video files.\n\nRecommended input file types: `.png`, `.jpeg`, `.mp4`",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "fps_pred",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "double",
                        "default": 3
                      }
                    }
                  }
                }
              },
              "description": "Number of frames per second to process. Other frames will be omitted from the response. Set to `0` to process every frame."
            },
            {
              "key": "prob_threshold",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "double",
                        "minimum": 0,
                        "maximum": 1,
                        "default": 0.99
                      }
                    }
                  }
                }
              },
              "description": "Face detection probability threshold. Faces detected with a probability less than this threshold will be omitted from the response."
            },
            {
              "key": "identify_faces",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean",
                        "default": false
                      }
                    }
                  }
                }
              },
              "description": "Whether to return identifiers for faces across frames. If `true`, unique identifiers will be assigned to face bounding boxes to differentiate different faces. If `false`, all faces will be tagged with an `unknown` ID."
            },
            {
              "key": "min_face_size",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "uint64"
                      }
                    }
                  }
                }
              },
              "description": "Minimum bounding box side length in pixels to treat as a face. Faces detected with a bounding box side length in pixels less than this threshold will be omitted from the response."
            },
            {
              "key": "facs",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_batch:Unconfigurable"
                    }
                  }
                }
              }
            },
            {
              "key": "descriptions",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_batch:Unconfigurable"
                    }
                  }
                }
              }
            },
            {
              "key": "save_faces",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean",
                        "default": false
                      }
                    }
                  }
                }
              },
              "description": "Whether to extract and save the detected faces in the artifacts zip created by each job."
            }
          ],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_batch:FacePrediction": {
        "name": "FacePrediction",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "frame",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "uint64"
                  }
                }
              },
              "description": "Frame number"
            },
            {
              "key": "time",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "double"
                  }
                }
              },
              "description": "Time in seconds when face detection occurred."
            },
            {
              "key": "prob",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "double"
                  }
                }
              },
              "description": "The predicted probability that a detected face was actually a face."
            },
            {
              "key": "box",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_batch:BoundingBox"
                }
              }
            },
            {
              "key": "emotions",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "list",
                  "itemShape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_batch:EmotionScore"
                    }
                  }
                }
              },
              "description": "A high-dimensional embedding in emotion space."
            },
            {
              "key": "facs",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "list",
                      "itemShape": {
                        "type": "alias",
                        "value": {
                          "type": "id",
                          "id": "type_batch:FacsScore"
                        }
                      }
                    }
                  }
                }
              },
              "description": "FACS 2.0 features and their scores."
            },
            {
              "key": "descriptions",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "list",
                      "itemShape": {
                        "type": "alias",
                        "value": {
                          "type": "id",
                          "id": "type_batch:DescriptionsScore"
                        }
                      }
                    }
                  }
                }
              },
              "description": "Modality-specific descriptive features and their scores."
            }
          ],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_batch:FacemeshPrediction": {
        "name": "FacemeshPrediction",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "emotions",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "list",
                  "itemShape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_batch:EmotionScore"
                    }
                  }
                }
              },
              "description": "A high-dimensional embedding in emotion space."
            }
          ],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_batch:FacsScore": {
        "name": "FacsScore",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "name",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "Name of the FACS 2.0 feature being expressed."
            },
            {
              "key": "score",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "double",
                    "minimum": 2.2250738585072014e-308,
                    "maximum": 1.7976931348623157e+308,
                    "default": 0
                  }
                }
              },
              "description": "Embedding value for the FACS 2.0 feature being expressed."
            }
          ],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_batch:Failed": {
        "name": "Failed",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "created_timestamp_ms",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "long",
                    "default": 0
                  }
                }
              },
              "description": "When this job was created (Unix timestamp in milliseconds)."
            },
            {
              "key": "started_timestamp_ms",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "long",
                    "default": 0
                  }
                }
              },
              "description": "When this job started (Unix timestamp in milliseconds)."
            },
            {
              "key": "ended_timestamp_ms",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "long",
                    "default": 0
                  }
                }
              },
              "description": "When this job ended (Unix timestamp in milliseconds)."
            },
            {
              "key": "message",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "An error message."
            }
          ],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_batch:File": {
        "name": "File",
        "description": "The list of files submitted for analysis.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "filename",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "The name of the file."
            },
            {
              "key": "content_type",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "The content type of the file."
            },
            {
              "key": "md5sum",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "The MD5 checksum of the file."
            }
          ],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_batch:Granularity": {
        "name": "Granularity",
        "description": "The granularity at which to generate predictions. The `granularity` field is ignored if transcription is not enabled or if the `window` field has been set.\n\n- `word`: At the word level, our model provides a separate output for each word, offering the most granular insight into emotional expression during speech.\n\n- `sentence`: At the sentence level of granularity, we annotate the emotional tone of each spoken sentence with our Prosody and Emotional Language models.\n\n- `utterance`: Utterance-level granularity is between word- and sentence-level. It takes into account natural pauses or breaks in speech, providing more rapidly updated measures of emotional expression within a flowing conversation. For text inputs, utterance-level granularity will produce results identical to sentence-level granularity.\n\n- `conversational_turn`: Conversational turn-level granularity provides a distinct output for each change in speaker. It captures the full sequence of words and sentences spoken uninterrupted by each person. This approach provides a higher-level view of the emotional dynamics in a multi-participant dialogue. For text inputs, specifying conversational turn-level granularity for our Emotional Language model will produce results for the entire passage.",
        "shape": {
          "type": "enum",
          "values": [
            {
              "value": "word"
            },
            {
              "value": "sentence"
            },
            {
              "value": "utterance"
            },
            {
              "value": "conversational_turn"
            }
          ]
        }
      },
      "type_batch:GroupedPredictionsBurstPrediction": {
        "name": "GroupedPredictionsBurstPrediction",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "An automatically generated label to identify individuals in your media file. Will be `unknown` if you have chosen to disable identification, or if the model is unable to distinguish between individuals."
            },
            {
              "key": "predictions",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "list",
                  "itemShape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_batch:BurstPrediction"
                    }
                  }
                }
              }
            }
          ],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_batch:GroupedPredictionsFacePrediction": {
        "name": "GroupedPredictionsFacePrediction",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "An automatically generated label to identify individuals in your media file. Will be `unknown` if you have chosen to disable identification, or if the model is unable to distinguish between individuals."
            },
            {
              "key": "predictions",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "list",
                  "itemShape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_batch:FacePrediction"
                    }
                  }
                }
              }
            }
          ],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_batch:GroupedPredictionsFacemeshPrediction": {
        "name": "GroupedPredictionsFacemeshPrediction",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "An automatically generated label to identify individuals in your media file. Will be `unknown` if you have chosen to disable identification, or if the model is unable to distinguish between individuals."
            },
            {
              "key": "predictions",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "list",
                  "itemShape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_batch:FacemeshPrediction"
                    }
                  }
                }
              }
            }
          ],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_batch:GroupedPredictionsLanguagePrediction": {
        "name": "GroupedPredictionsLanguagePrediction",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "An automatically generated label to identify individuals in your media file. Will be `unknown` if you have chosen to disable identification, or if the model is unable to distinguish between individuals."
            },
            {
              "key": "predictions",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "list",
                  "itemShape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_batch:LanguagePrediction"
                    }
                  }
                }
              }
            }
          ],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_batch:GroupedPredictionsNerPrediction": {
        "name": "GroupedPredictionsNerPrediction",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "An automatically generated label to identify individuals in your media file. Will be `unknown` if you have chosen to disable identification, or if the model is unable to distinguish between individuals."
            },
            {
              "key": "predictions",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "list",
                  "itemShape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_batch:NerPrediction"
                    }
                  }
                }
              }
            }
          ],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_batch:GroupedPredictionsProsodyPrediction": {
        "name": "GroupedPredictionsProsodyPrediction",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "An automatically generated label to identify individuals in your media file. Will be `unknown` if you have chosen to disable identification, or if the model is unable to distinguish between individuals."
            },
            {
              "key": "predictions",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "list",
                  "itemShape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_batch:ProsodyPrediction"
                    }
                  }
                }
              }
            }
          ],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_batch:InProgress": {
        "name": "InProgress",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "created_timestamp_ms",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "long",
                    "default": 0
                  }
                }
              },
              "description": "When this job was created (Unix timestamp in milliseconds)."
            },
            {
              "key": "started_timestamp_ms",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "long",
                    "default": 0
                  }
                }
              },
              "description": "When this job started (Unix timestamp in milliseconds)."
            }
          ],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_batch:InferenceBaseRequest": {
        "name": "InferenceBaseRequest",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "models",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_batch:Models"
                    }
                  }
                }
              },
              "description": "Specify the models to use for inference.\n\nIf this field is not explicitly set, then all models will run by default."
            },
            {
              "key": "transcription",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_batch:Transcription"
                    }
                  }
                }
              }
            },
            {
              "key": "urls",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "list",
                      "itemShape": {
                        "type": "alias",
                        "value": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              },
              "description": "URLs to the media files to be processed. Each must be a valid public URL to a media file (see recommended input filetypes) or an archive (`.zip`, `.tar.gz`, `.tar.bz2`, `.tar.xz`) of media files.\n\nIf you wish to supply more than 100 URLs, consider providing them as an archive (`.zip`, `.tar.gz`, `.tar.bz2`, `.tar.xz`)."
            },
            {
              "key": "text",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "list",
                      "itemShape": {
                        "type": "alias",
                        "value": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              },
              "description": "Text supplied directly to our Emotional Language and NER models for analysis."
            },
            {
              "key": "callback_url",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "If provided, a `POST` request will be made to the URL with the generated predictions on completion or the error message on failure."
            },
            {
              "key": "notify",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean",
                        "default": false
                      }
                    }
                  }
                }
              },
              "description": "Whether to send an email notification to the user upon job completion/failure."
            }
          ],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_batch:InferencePrediction": {
        "name": "InferencePrediction",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "file",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "A file path relative to the top level source URL or file."
            },
            {
              "key": "models",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_batch:ModelsPredictions"
                }
              }
            }
          ],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_batch:InferenceRequest": {
        "name": "InferenceRequest",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "models",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_batch:Models"
                    }
                  }
                }
              }
            },
            {
              "key": "transcription",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_batch:Transcription"
                    }
                  }
                }
              }
            },
            {
              "key": "urls",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "list",
                      "itemShape": {
                        "type": "alias",
                        "value": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              },
              "description": "URLs to the media files to be processed. Each must be a valid public URL to a media file (see recommended input filetypes) or an archive (`.zip`, `.tar.gz`, `.tar.bz2`, `.tar.xz`) of media files.\n\nIf you wish to supply more than 100 URLs, consider providing them as an archive (`.zip`, `.tar.gz`, `.tar.bz2`, `.tar.xz`)."
            },
            {
              "key": "text",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "list",
                      "itemShape": {
                        "type": "alias",
                        "value": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              },
              "description": "Text to supply directly to our language and NER models."
            },
            {
              "key": "callback_url",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "If provided, a `POST` request will be made to the URL with the generated predictions on completion or the error message on failure."
            },
            {
              "key": "notify",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean",
                        "default": false
                      }
                    }
                  }
                }
              },
              "description": "Whether to send an email notification to the user upon job completion/failure."
            },
            {
              "key": "files",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "list",
                  "itemShape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_batch:File"
                    }
                  }
                }
              }
            }
          ],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_batch:InferenceResults": {
        "name": "InferenceResults",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "predictions",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "list",
                  "itemShape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_batch:InferencePrediction"
                    }
                  }
                }
              }
            },
            {
              "key": "errors",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "list",
                  "itemShape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_batch:Error"
                    }
                  }
                }
              }
            }
          ],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_batch:InferenceSourcePredictResult": {
        "name": "InferenceSourcePredictResult",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "source",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_batch:Source"
                }
              }
            },
            {
              "key": "results",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_batch:InferenceResults"
                    }
                  }
                }
              }
            },
            {
              "key": "error",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "An error message."
            }
          ],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_batch:JobEmbeddingGeneration": {
        "name": "JobEmbeddingGeneration",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "job_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "The ID associated with this job."
            },
            {
              "key": "user_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "key": "request",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_batch:EmbeddingGenerationBaseRequest"
                }
              }
            },
            {
              "key": "state",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_batch:StateEmbeddingGeneration"
                }
              }
            }
          ],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_batch:JobInference": {
        "name": "JobInference",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "job_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "The ID associated with this job."
            },
            {
              "key": "request",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_batch:InferenceRequest"
                }
              },
              "description": "The request that initiated the job."
            },
            {
              "key": "state",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_batch:StateInference"
                }
              },
              "description": "The current state of the job."
            }
          ],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_batch:JobTlInference": {
        "name": "JobTlInference",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "job_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "The ID associated with this job."
            },
            {
              "key": "user_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "key": "request",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_batch:TlInferenceBaseRequest"
                }
              }
            },
            {
              "key": "state",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_batch:StateTlInference"
                }
              }
            }
          ],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_batch:JobTraining": {
        "name": "JobTraining",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "job_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "The ID associated with this job."
            },
            {
              "key": "user_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "key": "request",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_batch:TrainingBaseRequest"
                }
              }
            },
            {
              "key": "state",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_batch:StateTraining"
                }
              }
            }
          ],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_batch:JobId": {
        "name": "JobId",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "job_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "The ID of the started job."
            }
          ],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_batch:Language": {
        "name": "Language",
        "description": "The Emotional Language model analyzes passages of text. This also supports audio and video files by transcribing and then directly analyzing the transcribed text.\n\nRecommended input filetypes: `.txt`, `.mp3`, `.wav`, `.mp4`",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "granularity",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_batch:Granularity"
                    }
                  }
                }
              }
            },
            {
              "key": "sentiment",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_batch:Unconfigurable"
                    }
                  }
                }
              }
            },
            {
              "key": "toxicity",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_batch:Unconfigurable"
                    }
                  }
                }
              }
            },
            {
              "key": "identify_speakers",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean",
                        "default": false
                      }
                    }
                  }
                }
              },
              "description": "Whether to return identifiers for speakers over time. If `true`, unique identifiers will be assigned to spoken words to differentiate different speakers. If `false`, all speakers will be tagged with an `unknown` ID."
            }
          ],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_batch:LanguagePrediction": {
        "name": "LanguagePrediction",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "text",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "A segment of text (like a word or a sentence)."
            },
            {
              "key": "position",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_batch:PositionInterval"
                }
              }
            },
            {
              "key": "time",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_batch:TimeInterval"
                    }
                  }
                }
              }
            },
            {
              "key": "confidence",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  }
                }
              },
              "description": "Value between `0.0` and `1.0` that indicates our transcription model's relative confidence in this text."
            },
            {
              "key": "speaker_confidence",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  }
                }
              },
              "description": "Value between `0.0` and `1.0` that indicates our transcription model's relative confidence that this text was spoken by this speaker."
            },
            {
              "key": "emotions",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "list",
                  "itemShape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_batch:EmotionScore"
                    }
                  }
                }
              },
              "description": "A high-dimensional embedding in emotion space."
            },
            {
              "key": "sentiment",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "list",
                      "itemShape": {
                        "type": "alias",
                        "value": {
                          "type": "id",
                          "id": "type_batch:SentimentScore"
                        }
                      }
                    }
                  }
                }
              },
              "description": "Sentiment predictions returned as a distribution. This model predicts the probability that a given text could be interpreted as having each sentiment level from `1` (negative) to `9` (positive).\n\nCompared to returning one estimate of sentiment, this enables a more nuanced analysis of a text's meaning. For example, a text with very neutral sentiment would have an average rating of `5`. But also a text that could be interpreted as having very positive sentiment or very negative sentiment would also have an average rating of `5`. The average sentiment is less informative than the distribution over sentiment, so this API returns a value for each sentiment level."
            },
            {
              "key": "toxicity",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "list",
                      "itemShape": {
                        "type": "alias",
                        "value": {
                          "type": "id",
                          "id": "type_batch:ToxicityScore"
                        }
                      }
                    }
                  }
                }
              },
              "description": "Toxicity predictions returned as probabilities that the text can be classified into the following categories: `toxic`, `severe_toxic`, `obscene`, `threat`, `insult`, and `identity_hate`."
            }
          ],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_batch:Models": {
        "name": "Models",
        "description": "The models used for inference.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "face",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_batch:Face"
                    }
                  }
                }
              }
            },
            {
              "key": "burst",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_batch:Unconfigurable"
                    }
                  }
                }
              }
            },
            {
              "key": "prosody",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_batch:Prosody"
                    }
                  }
                }
              }
            },
            {
              "key": "language",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_batch:Language"
                    }
                  }
                }
              }
            },
            {
              "key": "ner",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_batch:Ner"
                    }
                  }
                }
              }
            },
            {
              "key": "facemesh",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_batch:Unconfigurable"
                    }
                  }
                }
              }
            }
          ],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_batch:ModelsPredictions": {
        "name": "ModelsPredictions",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "face",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_batch:PredictionsOptionalNullFacePrediction"
                    }
                  }
                }
              }
            },
            {
              "key": "burst",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_batch:PredictionsOptionalNullBurstPrediction"
                    }
                  }
                }
              }
            },
            {
              "key": "prosody",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_batch:PredictionsOptionalTranscriptionMetadataProsodyPrediction"
                    }
                  }
                }
              }
            },
            {
              "key": "language",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_batch:PredictionsOptionalTranscriptionMetadataLanguagePrediction"
                    }
                  }
                }
              }
            },
            {
              "key": "ner",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_batch:PredictionsOptionalTranscriptionMetadataNerPrediction"
                    }
                  }
                }
              }
            },
            {
              "key": "facemesh",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_batch:PredictionsOptionalNullFacemeshPrediction"
                    }
                  }
                }
              }
            }
          ],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_batch:Ner": {
        "name": "Ner",
        "description": "The NER (Named-entity Recognition) model identifies real-world objects and concepts in passages of text. This also supports audio and video files by transcribing and then directly analyzing the transcribed text.\n\nRecommended input filetypes: `.txt`, `.mp3`, `.wav`, `.mp4`",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "identify_speakers",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean",
                        "default": false
                      }
                    }
                  }
                }
              },
              "description": "Whether to return identifiers for speakers over time. If `true`, unique identifiers will be assigned to spoken words to differentiate different speakers. If `false`, all speakers will be tagged with an `unknown` ID."
            }
          ],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_batch:NerPrediction": {
        "name": "NerPrediction",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "entity",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "The recognized topic or entity."
            },
            {
              "key": "position",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_batch:PositionInterval"
                }
              }
            },
            {
              "key": "entity_confidence",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "double"
                  }
                }
              },
              "description": "Our NER model's relative confidence in the recognized topic or entity."
            },
            {
              "key": "support",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "double"
                  }
                }
              },
              "description": "A measure of how often the entity is linked to by other entities."
            },
            {
              "key": "uri",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "A URL which provides more information about the recognized topic or entity."
            },
            {
              "key": "link_word",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "The specific word to which the emotion predictions are linked."
            },
            {
              "key": "time",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_batch:TimeInterval"
                    }
                  }
                }
              }
            },
            {
              "key": "confidence",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  }
                }
              },
              "description": "Value between `0.0` and `1.0` that indicates our transcription model's relative confidence in this text."
            },
            {
              "key": "speaker_confidence",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  }
                }
              },
              "description": "Value between `0.0` and `1.0` that indicates our transcription model's relative confidence that this text was spoken by this speaker."
            },
            {
              "key": "emotions",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "list",
                  "itemShape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_batch:EmotionScore"
                    }
                  }
                }
              },
              "description": "A high-dimensional embedding in emotion space."
            }
          ],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_batch:Null": {
        "name": "Null",
        "description": "No associated metadata for this model. Value will be `null`.",
        "shape": {
          "type": "alias",
          "value": {
            "type": "map",
            "keyShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "unknown"
              }
            }
          }
        }
      },
      "type_batch:PositionInterval": {
        "name": "PositionInterval",
        "description": "Position of a segment of text within a larger document, measured in characters. Uses zero-based indexing. The beginning index is inclusive and the end index is exclusive.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "begin",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "uint64"
                  }
                }
              },
              "description": "The index of the first character in the text segment, inclusive."
            },
            {
              "key": "end",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "uint64"
                  }
                }
              },
              "description": "The index of the last character in the text segment, exclusive."
            }
          ],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_batch:PredictionsOptionalNullBurstPrediction": {
        "name": "PredictionsOptionalNullBurstPrediction",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "metadata",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_batch:Null"
                    }
                  }
                }
              }
            },
            {
              "key": "grouped_predictions",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "list",
                  "itemShape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_batch:GroupedPredictionsBurstPrediction"
                    }
                  }
                }
              }
            }
          ],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_batch:PredictionsOptionalNullFacePrediction": {
        "name": "PredictionsOptionalNullFacePrediction",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "metadata",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_batch:Null"
                    }
                  }
                }
              }
            },
            {
              "key": "grouped_predictions",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "list",
                  "itemShape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_batch:GroupedPredictionsFacePrediction"
                    }
                  }
                }
              }
            }
          ],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_batch:PredictionsOptionalNullFacemeshPrediction": {
        "name": "PredictionsOptionalNullFacemeshPrediction",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "metadata",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_batch:Null"
                    }
                  }
                }
              }
            },
            {
              "key": "grouped_predictions",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "list",
                  "itemShape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_batch:GroupedPredictionsFacemeshPrediction"
                    }
                  }
                }
              }
            }
          ],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_batch:PredictionsOptionalTranscriptionMetadataLanguagePrediction": {
        "name": "PredictionsOptionalTranscriptionMetadataLanguagePrediction",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "metadata",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_batch:TranscriptionMetadata"
                    }
                  }
                }
              }
            },
            {
              "key": "grouped_predictions",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "list",
                  "itemShape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_batch:GroupedPredictionsLanguagePrediction"
                    }
                  }
                }
              }
            }
          ],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_batch:PredictionsOptionalTranscriptionMetadataNerPrediction": {
        "name": "PredictionsOptionalTranscriptionMetadataNerPrediction",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "metadata",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_batch:TranscriptionMetadata"
                    }
                  }
                }
              }
            },
            {
              "key": "grouped_predictions",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "list",
                  "itemShape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_batch:GroupedPredictionsNerPrediction"
                    }
                  }
                }
              }
            }
          ],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_batch:PredictionsOptionalTranscriptionMetadataProsodyPrediction": {
        "name": "PredictionsOptionalTranscriptionMetadataProsodyPrediction",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "metadata",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_batch:TranscriptionMetadata"
                    }
                  }
                }
              }
            },
            {
              "key": "grouped_predictions",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "list",
                  "itemShape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_batch:GroupedPredictionsProsodyPrediction"
                    }
                  }
                }
              }
            }
          ],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_batch:Prosody": {
        "name": "Prosody",
        "description": "The Speech Prosody model analyzes the intonation, stress, and rhythm of spoken word.\n\nRecommended input file types: `.wav`, `.mp3`, `.mp4`",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "granularity",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_batch:Granularity"
                    }
                  }
                }
              }
            },
            {
              "key": "window",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_batch:Window"
                    }
                  }
                }
              }
            },
            {
              "key": "identify_speakers",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean",
                        "default": false
                      }
                    }
                  }
                }
              },
              "description": "Whether to return identifiers for speakers over time. If `true`, unique identifiers will be assigned to spoken words to differentiate different speakers. If `false`, all speakers will be tagged with an `unknown` ID."
            }
          ],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_batch:ProsodyPrediction": {
        "name": "ProsodyPrediction",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "text",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "A segment of text (like a word or a sentence)."
            },
            {
              "key": "time",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_batch:TimeInterval"
                }
              }
            },
            {
              "key": "confidence",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  }
                }
              },
              "description": "Value between `0.0` and `1.0` that indicates our transcription model's relative confidence in this text."
            },
            {
              "key": "speaker_confidence",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  }
                }
              },
              "description": "Value between `0.0` and `1.0` that indicates our transcription model's relative confidence that this text was spoken by this speaker."
            },
            {
              "key": "emotions",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "list",
                  "itemShape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_batch:EmotionScore"
                    }
                  }
                }
              },
              "description": "A high-dimensional embedding in emotion space."
            }
          ],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_batch:Queued": {
        "name": "Queued",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "created_timestamp_ms",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "long",
                    "default": 0
                  }
                }
              },
              "description": "When this job was created (Unix timestamp in milliseconds)."
            }
          ],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_batch:RegistryFileDetail": {
        "name": "RegistryFileDetail",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "file_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "File ID in the Asset Registry"
            },
            {
              "key": "file_url",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "URL to the file in the Asset Registry"
            }
          ],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_batch:Regression": {
        "name": "Regression",
        "shape": {
          "type": "alias",
          "value": {
            "type": "map",
            "keyShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "unknown"
              }
            }
          }
        }
      },
      "type_batch:SentimentScore": {
        "name": "SentimentScore",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "name",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "Level of sentiment, ranging from `1` (negative) to `9` (positive)"
            },
            {
              "key": "score",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "double",
                    "minimum": 2.2250738585072014e-308,
                    "maximum": 1.7976931348623157e+308,
                    "default": 0
                  }
                }
              },
              "description": "Prediction for this level of sentiment"
            }
          ],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_batch:SortBy": {
        "name": "SortBy",
        "shape": {
          "type": "enum",
          "values": [
            {
              "value": "created"
            },
            {
              "value": "started"
            },
            {
              "value": "ended"
            }
          ]
        }
      },
      "type_batch:Source": {
        "name": "Source",
        "shape": {
          "type": "discriminatedUnion",
          "discriminant": "type",
          "variants": [
            {
              "discriminantValue": "url",
              "extends": [
                "type_batch:SourceUrl"
              ],
              "properties": []
            },
            {
              "discriminantValue": "file",
              "extends": [
                "type_batch:SourceFile"
              ],
              "properties": []
            },
            {
              "discriminantValue": "text",
              "extends": [
                "type_batch:SourceTextSource"
              ],
              "properties": []
            }
          ]
        }
      },
      "type_batch:SourceFile": {
        "name": "SourceFile",
        "shape": {
          "type": "object",
          "extends": [
            "type_batch:File"
          ],
          "properties": [],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_batch:SourceTextSource": {
        "name": "SourceTextSource",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_batch:SourceUrl": {
        "name": "SourceUrl",
        "shape": {
          "type": "object",
          "extends": [
            "type_batch:Url"
          ],
          "properties": [],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_batch:Url": {
        "name": "Url",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "url",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "The URL of the source media file."
            }
          ],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_batch:StateEmbeddingGeneration": {
        "name": "StateEmbeddingGeneration",
        "shape": {
          "type": "discriminatedUnion",
          "discriminant": "status",
          "variants": [
            {
              "discriminantValue": "QUEUED",
              "extends": [
                "type_batch:StateEmbeddingGenerationQueued"
              ],
              "properties": []
            },
            {
              "discriminantValue": "IN_PROGRESS",
              "extends": [
                "type_batch:StateEmbeddingGenerationInProgress"
              ],
              "properties": []
            },
            {
              "discriminantValue": "COMPLETED",
              "extends": [
                "type_batch:StateEmbeddingGenerationCompletedEmbeddingGeneration"
              ],
              "properties": []
            },
            {
              "discriminantValue": "FAILED",
              "extends": [
                "type_batch:StateEmbeddingGenerationFailed"
              ],
              "properties": []
            }
          ]
        }
      },
      "type_batch:StateEmbeddingGenerationCompletedEmbeddingGeneration": {
        "name": "StateEmbeddingGenerationCompletedEmbeddingGeneration",
        "shape": {
          "type": "object",
          "extends": [
            "type_batch:CompletedEmbeddingGeneration"
          ],
          "properties": [],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_batch:StateEmbeddingGenerationFailed": {
        "name": "StateEmbeddingGenerationFailed",
        "shape": {
          "type": "object",
          "extends": [
            "type_batch:Failed"
          ],
          "properties": [],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_batch:StateEmbeddingGenerationInProgress": {
        "name": "StateEmbeddingGenerationInProgress",
        "shape": {
          "type": "object",
          "extends": [
            "type_batch:InProgress"
          ],
          "properties": [],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_batch:StateEmbeddingGenerationQueued": {
        "name": "StateEmbeddingGenerationQueued",
        "shape": {
          "type": "object",
          "extends": [
            "type_batch:Queued"
          ],
          "properties": [],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_batch:StateInference": {
        "name": "StateInference",
        "shape": {
          "type": "discriminatedUnion",
          "discriminant": "status",
          "variants": [
            {
              "discriminantValue": "QUEUED",
              "extends": [
                "type_batch:QueuedState"
              ],
              "properties": []
            },
            {
              "discriminantValue": "IN_PROGRESS",
              "extends": [
                "type_batch:InProgressState"
              ],
              "properties": []
            },
            {
              "discriminantValue": "COMPLETED",
              "extends": [
                "type_batch:CompletedState"
              ],
              "properties": []
            },
            {
              "discriminantValue": "FAILED",
              "extends": [
                "type_batch:FailedState"
              ],
              "properties": []
            }
          ]
        }
      },
      "type_batch:CompletedState": {
        "name": "CompletedState",
        "shape": {
          "type": "object",
          "extends": [
            "type_batch:CompletedInference"
          ],
          "properties": [],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_batch:FailedState": {
        "name": "FailedState",
        "shape": {
          "type": "object",
          "extends": [
            "type_batch:Failed"
          ],
          "properties": [],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_batch:InProgressState": {
        "name": "InProgressState",
        "shape": {
          "type": "object",
          "extends": [
            "type_batch:InProgress"
          ],
          "properties": [],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_batch:QueuedState": {
        "name": "QueuedState",
        "shape": {
          "type": "object",
          "extends": [
            "type_batch:Queued"
          ],
          "properties": [],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_batch:StateTlInference": {
        "name": "StateTlInference",
        "shape": {
          "type": "discriminatedUnion",
          "discriminant": "status",
          "variants": [
            {
              "discriminantValue": "QUEUED",
              "extends": [
                "type_batch:StateTlInferenceQueued"
              ],
              "properties": []
            },
            {
              "discriminantValue": "IN_PROGRESS",
              "extends": [
                "type_batch:StateTlInferenceInProgress"
              ],
              "properties": []
            },
            {
              "discriminantValue": "COMPLETED",
              "extends": [
                "type_batch:StateTlInferenceCompletedTlInference"
              ],
              "properties": []
            },
            {
              "discriminantValue": "FAILED",
              "extends": [
                "type_batch:StateTlInferenceFailed"
              ],
              "properties": []
            }
          ]
        }
      },
      "type_batch:StateTlInferenceCompletedTlInference": {
        "name": "StateTlInferenceCompletedTlInference",
        "shape": {
          "type": "object",
          "extends": [
            "type_batch:CompletedTlInference"
          ],
          "properties": [],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_batch:StateTlInferenceFailed": {
        "name": "StateTlInferenceFailed",
        "shape": {
          "type": "object",
          "extends": [
            "type_batch:Failed"
          ],
          "properties": [],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_batch:StateTlInferenceInProgress": {
        "name": "StateTlInferenceInProgress",
        "shape": {
          "type": "object",
          "extends": [
            "type_batch:InProgress"
          ],
          "properties": [],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_batch:StateTlInferenceQueued": {
        "name": "StateTlInferenceQueued",
        "shape": {
          "type": "object",
          "extends": [
            "type_batch:Queued"
          ],
          "properties": [],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_batch:StateTraining": {
        "name": "StateTraining",
        "shape": {
          "type": "discriminatedUnion",
          "discriminant": "status",
          "variants": [
            {
              "discriminantValue": "QUEUED",
              "extends": [
                "type_batch:StateTrainingQueued"
              ],
              "properties": []
            },
            {
              "discriminantValue": "IN_PROGRESS",
              "extends": [
                "type_batch:StateTrainingInProgress"
              ],
              "properties": []
            },
            {
              "discriminantValue": "COMPLETED",
              "extends": [
                "type_batch:StateTrainingCompletedTraining"
              ],
              "properties": []
            },
            {
              "discriminantValue": "FAILED",
              "extends": [
                "type_batch:StateTrainingFailed"
              ],
              "properties": []
            }
          ]
        }
      },
      "type_batch:StateTrainingCompletedTraining": {
        "name": "StateTrainingCompletedTraining",
        "shape": {
          "type": "object",
          "extends": [
            "type_batch:CompletedTraining"
          ],
          "properties": [],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_batch:StateTrainingFailed": {
        "name": "StateTrainingFailed",
        "shape": {
          "type": "object",
          "extends": [
            "type_batch:Failed"
          ],
          "properties": [],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_batch:StateTrainingInProgress": {
        "name": "StateTrainingInProgress",
        "shape": {
          "type": "object",
          "extends": [
            "type_batch:InProgress"
          ],
          "properties": [],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_batch:StateTrainingQueued": {
        "name": "StateTrainingQueued",
        "shape": {
          "type": "object",
          "extends": [
            "type_batch:Queued"
          ],
          "properties": [],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_batch:Status": {
        "name": "Status",
        "shape": {
          "type": "enum",
          "values": [
            {
              "value": "QUEUED"
            },
            {
              "value": "IN_PROGRESS"
            },
            {
              "value": "COMPLETED"
            },
            {
              "value": "FAILED"
            }
          ]
        }
      },
      "type_batch:TlInferencePrediction": {
        "name": "TlInferencePrediction",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "file",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "A file path relative to the top level source URL or file."
            },
            {
              "key": "file_type",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "key": "custom_models",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "map",
                  "keyShape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  },
                  "valueShape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_batch:CustomModelPrediction"
                    }
                  }
                }
              }
            }
          ],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_batch:TlInferenceResults": {
        "name": "TlInferenceResults",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "predictions",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "list",
                  "itemShape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_batch:TlInferencePrediction"
                    }
                  }
                }
              }
            },
            {
              "key": "errors",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "list",
                  "itemShape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_batch:Error"
                    }
                  }
                }
              }
            }
          ],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_batch:TlInferenceSourcePredictResult": {
        "name": "TlInferenceSourcePredictResult",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "source",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_batch:Source"
                }
              }
            },
            {
              "key": "results",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_batch:TlInferenceResults"
                    }
                  }
                }
              }
            },
            {
              "key": "error",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "An error message."
            }
          ],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_batch:Tag": {
        "name": "Tag",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "key",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "key": "value",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          ],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_batch:Target": {
        "name": "Target",
        "shape": {
          "type": "undiscriminatedUnion",
          "variants": [
            {
              "shape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "long",
                    "default": 0
                  }
                }
              }
            },
            {
              "shape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "double"
                  }
                }
              }
            },
            {
              "shape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          ]
        }
      },
      "type_batch:Task": {
        "name": "Task",
        "shape": {
          "type": "discriminatedUnion",
          "discriminant": "type",
          "variants": [
            {
              "discriminantValue": "classification",
              "extends": [
                "type_batch:TaskClassification"
              ],
              "properties": []
            },
            {
              "discriminantValue": "regression",
              "extends": [
                "type_batch:TaskRegression"
              ],
              "properties": []
            }
          ]
        }
      },
      "type_batch:TaskClassification": {
        "name": "TaskClassification",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_batch:TaskRegression": {
        "name": "TaskRegression",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_batch:TextSource": {
        "name": "TextSource",
        "shape": {
          "type": "alias",
          "value": {
            "type": "map",
            "keyShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "unknown"
              }
            }
          }
        }
      },
      "type_batch:TimeInterval": {
        "name": "TimeInterval",
        "description": "A time range with a beginning and end, measured in seconds.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "begin",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "double"
                  }
                }
              },
              "description": "Beginning of time range in seconds."
            },
            {
              "key": "end",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "double"
                  }
                }
              },
              "description": "End of time range in seconds."
            }
          ],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_batch:TlInferenceBaseRequest": {
        "name": "TlInferenceBaseRequest",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "custom_model",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_batch:CustomModel"
                }
              }
            },
            {
              "key": "urls",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "list",
                      "itemShape": {
                        "type": "alias",
                        "value": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              },
              "description": "URLs to the media files to be processed. Each must be a valid public URL to a media file (see recommended input filetypes) or an archive (`.zip`, `.tar.gz`, `.tar.bz2`, `.tar.xz`) of media files.\n\nIf you wish to supply more than 100 URLs, consider providing them as an archive (`.zip`, `.tar.gz`, `.tar.bz2`, `.tar.xz`)."
            },
            {
              "key": "callback_url",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "If provided, a `POST` request will be made to the URL with the generated predictions on completion or the error message on failure."
            },
            {
              "key": "notify",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean",
                        "default": false
                      }
                    }
                  }
                }
              },
              "description": "Whether to send an email notification to the user upon job completion/failure."
            }
          ],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_batch:CustomModel": {
        "name": "CustomModel",
        "shape": {
          "type": "undiscriminatedUnion",
          "variants": [
            {
              "displayName": "Custom Model ID",
              "shape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_batch:CustomModelId"
                }
              }
            },
            {
              "displayName": "Custom Model Version ID",
              "shape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_batch:CustomModelVersionId"
                }
              }
            }
          ]
        }
      },
      "type_batch:CustomModelId": {
        "name": "CustomModelId",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          ],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_batch:CustomModelVersionId": {
        "name": "CustomModelVersionId",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "version_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          ],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_batch:ToxicityScore": {
        "name": "ToxicityScore",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "name",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "Category of toxicity."
            },
            {
              "key": "score",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "double",
                    "minimum": 2.2250738585072014e-308,
                    "maximum": 1.7976931348623157e+308,
                    "default": 0
                  }
                }
              },
              "description": "Prediction for this category of toxicity"
            }
          ],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_batch:TrainingBaseRequest": {
        "name": "TrainingBaseRequest",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "custom_model",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_batch:CustomModelRequest"
                }
              }
            },
            {
              "key": "dataset",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_batch:Dataset"
                }
              }
            },
            {
              "key": "target_feature",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string",
                        "default": "label"
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "task",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_batch:Task"
                    }
                  }
                }
              }
            },
            {
              "key": "evaluation",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_batch:EvaluationArgs"
                    }
                  }
                }
              }
            },
            {
              "key": "alternatives",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "list",
                      "itemShape": {
                        "type": "alias",
                        "value": {
                          "type": "id",
                          "id": "type_batch:Alternative"
                        }
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "callback_url",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "notify",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean",
                        "default": false
                      }
                    }
                  }
                }
              }
            }
          ],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_batch:TrainingCustomModel": {
        "name": "TrainingCustomModel",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "key": "version_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          ],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_batch:Transcription": {
        "name": "Transcription",
        "description": "Transcription-related configuration options.\n\nTo disable transcription, explicitly set this field to `null`.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "language",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_batch:Bcp47Tag"
                    }
                  }
                }
              },
              "description": "By default, we use an automated language detection method for our Speech Prosody, Language, and NER models. However, if you know what language is being spoken in your media samples, you can specify it via its BCP-47 tag and potentially obtain more accurate results.\n\nYou can specify any of the following languages:\n\n- Chinese: `zh`\n- Danish: `da`\n- Dutch: `nl`\n- English: `en`\n- English (Australia): `en-AU`\n- English (India): `en-IN`\n- English (New Zealand): `en-NZ`\n- English (United Kingdom): `en-GB`\n- French: `fr`\n- French (Canada): `fr-CA`\n- German: `de`\n- Hindi: `hi`\n- Hindi (Roman Script): `hi-Latn`\n- Indonesian: `id`\n- Italian: `it`\n- Japanese: `ja`\n- Korean: `ko`\n- Norwegian: `no`\n- Polish: `pl`\n- Portuguese: `pt`\n- Portuguese (Brazil): `pt-BR`\n- Portuguese (Portugal): `pt-PT`\n- Russian: `ru`\n- Spanish: `es`\n- Spanish (Latin America): `es-419`\n- Swedish: `sv`\n- Tamil: `ta`\n- Turkish: `tr`\n- Ukrainian: `uk`"
            },
            {
              "key": "identify_speakers",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean",
                        "default": false
                      }
                    }
                  }
                }
              },
              "description": "Whether to return identifiers for speakers over time. If `true`, unique identifiers will be assigned to spoken words to differentiate different speakers. If `false`, all speakers will be tagged with an `unknown` ID."
            },
            {
              "key": "confidence_threshold",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "double",
                        "minimum": 0,
                        "maximum": 1,
                        "default": 0.5
                      }
                    }
                  }
                }
              },
              "description": "Transcript confidence threshold. Transcripts generated with a confidence less than this threshold will be considered invalid and not used as an input for model inference."
            }
          ],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_batch:TranscriptionMetadata": {
        "name": "TranscriptionMetadata",
        "description": "Transcription metadata for your media file.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "confidence",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "double"
                  }
                }
              },
              "description": "Value between `0.0` and `1.0` indicating our transcription model's relative confidence in the transcription of your media file."
            },
            {
              "key": "detected_language",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_batch:Bcp47Tag"
                    }
                  }
                }
              }
            }
          ],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_batch:Type": {
        "name": "Type",
        "shape": {
          "type": "enum",
          "values": [
            {
              "value": "EMBEDDING_GENERATION"
            },
            {
              "value": "INFERENCE"
            },
            {
              "value": "TL_INFERENCE"
            },
            {
              "value": "TRAINING"
            }
          ]
        }
      },
      "type_batch:Unconfigurable": {
        "name": "Unconfigurable",
        "description": "To include predictions for this model type, set this field to `{}`. It is currently not configurable further.",
        "shape": {
          "type": "alias",
          "value": {
            "type": "map",
            "keyShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "unknown"
              }
            }
          }
        }
      },
      "type_batch:UnionJob": {
        "name": "UnionJob",
        "shape": {
          "type": "alias",
          "value": {
            "type": "id",
            "id": "type_batch:InferenceJob"
          }
        }
      },
      "type_batch:EmbeddingGenerationJob": {
        "name": "EmbeddingGenerationJob",
        "shape": {
          "type": "object",
          "extends": [
            "type_batch:JobEmbeddingGeneration"
          ],
          "properties": [
            {
              "key": "type",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          ],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_batch:InferenceJob": {
        "name": "InferenceJob",
        "shape": {
          "type": "object",
          "extends": [
            "type_batch:JobInference"
          ],
          "properties": [
            {
              "key": "type",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "Denotes the job type.\n\nJobs created with the Expression Measurement API will have this field set to `INFERENCE`."
            }
          ],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_batch:CustomModelsInferenceJob": {
        "name": "CustomModelsInferenceJob",
        "shape": {
          "type": "object",
          "extends": [
            "type_batch:JobTlInference"
          ],
          "properties": [
            {
              "key": "type",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          ],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_batch:CustomModelsTrainingJob": {
        "name": "CustomModelsTrainingJob",
        "shape": {
          "type": "object",
          "extends": [
            "type_batch:JobTraining"
          ],
          "properties": [
            {
              "key": "type",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          ],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_batch:UnionPredictResult": {
        "name": "UnionPredictResult",
        "shape": {
          "type": "alias",
          "value": {
            "type": "id",
            "id": "type_batch:InferenceSourcePredictResult"
          }
        }
      },
      "type_batch:ValidationArgs": {
        "name": "ValidationArgs",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "positive_label",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_batch:Target"
                    }
                  }
                }
              }
            }
          ],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_batch:When": {
        "name": "When",
        "shape": {
          "type": "enum",
          "values": [
            {
              "value": "created_before"
            },
            {
              "value": "created_after"
            }
          ]
        }
      },
      "type_batch:Window": {
        "name": "Window",
        "description": "Generate predictions based on time.\n\nSetting the `window` field allows for a 'sliding window' approach, where a fixed-size window moves across the audio or video file in defined steps. This enables continuous analysis of prosody within subsets of the file, providing dynamic and localized insights into emotional expression.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "length",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "double",
                        "minimum": 0.5,
                        "default": 4
                      }
                    }
                  }
                }
              },
              "description": "The length of the sliding window."
            },
            {
              "key": "step",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "double",
                        "minimum": 0.5,
                        "default": 1
                      }
                    }
                  }
                }
              },
              "description": "The step size of the sliding window."
            }
          ],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_stream:StreamModelPredictionsJobDetails": {
        "name": "StreamModelPredictionsJobDetails",
        "description": "If the job_details flag was set in the request, details about the current streaming job will be returned in the response body.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "job_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "ID of the current streaming job."
            }
          ],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_stream:StreamModelPredictionsBurstPredictionsItem": {
        "name": "StreamModelPredictionsBurstPredictionsItem",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "time",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_stream:TimeRange"
                    }
                  }
                }
              }
            },
            {
              "key": "emotions",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_stream:EmotionEmbedding"
                    }
                  }
                }
              }
            }
          ],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_stream:StreamModelPredictionsBurst": {
        "name": "StreamModelPredictionsBurst",
        "description": "Response for the vocal burst emotion model.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "predictions",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "list",
                      "itemShape": {
                        "type": "alias",
                        "value": {
                          "type": "id",
                          "id": "type_stream:StreamModelPredictionsBurstPredictionsItem"
                        }
                      }
                    }
                  }
                }
              }
            }
          ],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_stream:StreamModelPredictionsFacePredictionsItem": {
        "name": "StreamModelPredictionsFacePredictionsItem",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "frame",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  }
                }
              },
              "description": "Frame number"
            },
            {
              "key": "time",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  }
                }
              },
              "description": "Time in seconds when face detection occurred."
            },
            {
              "key": "bbox",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_stream:StreamBoundingBox"
                    }
                  }
                }
              }
            },
            {
              "key": "prob",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  }
                }
              },
              "description": "The predicted probability that a detected face was actually a face."
            },
            {
              "key": "face_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "Identifier for a face. Not that this defaults to `unknown` unless face identification is enabled in the face model configuration."
            },
            {
              "key": "emotions",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_stream:EmotionEmbedding"
                    }
                  }
                }
              }
            },
            {
              "key": "facs",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_stream:EmotionEmbedding"
                    }
                  }
                }
              }
            },
            {
              "key": "descriptions",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_stream:EmotionEmbedding"
                    }
                  }
                }
              }
            }
          ],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_stream:StreamModelPredictionsFace": {
        "name": "StreamModelPredictionsFace",
        "description": "Response for the facial expression emotion model.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "predictions",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "list",
                      "itemShape": {
                        "type": "alias",
                        "value": {
                          "type": "id",
                          "id": "type_stream:StreamModelPredictionsFacePredictionsItem"
                        }
                      }
                    }
                  }
                }
              }
            }
          ],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_stream:StreamModelPredictionsFacemeshPredictionsItem": {
        "name": "StreamModelPredictionsFacemeshPredictionsItem",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "emotions",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_stream:EmotionEmbedding"
                    }
                  }
                }
              }
            }
          ],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_stream:StreamModelPredictionsFacemesh": {
        "name": "StreamModelPredictionsFacemesh",
        "description": "Response for the facemesh emotion model.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "predictions",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "list",
                      "itemShape": {
                        "type": "alias",
                        "value": {
                          "type": "id",
                          "id": "type_stream:StreamModelPredictionsFacemeshPredictionsItem"
                        }
                      }
                    }
                  }
                }
              }
            }
          ],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_stream:StreamModelPredictionsLanguagePredictionsItem": {
        "name": "StreamModelPredictionsLanguagePredictionsItem",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "text",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "A segment of text (like a word or a sentence)."
            },
            {
              "key": "position",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_stream:TextPosition"
                    }
                  }
                }
              }
            },
            {
              "key": "emotions",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_stream:EmotionEmbedding"
                    }
                  }
                }
              }
            },
            {
              "key": "sentiment",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_stream:Sentiment"
                    }
                  }
                }
              }
            },
            {
              "key": "toxicity",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_stream:Toxicity"
                    }
                  }
                }
              }
            }
          ],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_stream:StreamModelPredictionsLanguage": {
        "name": "StreamModelPredictionsLanguage",
        "description": "Response for the language emotion model.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "predictions",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "list",
                      "itemShape": {
                        "type": "alias",
                        "value": {
                          "type": "id",
                          "id": "type_stream:StreamModelPredictionsLanguagePredictionsItem"
                        }
                      }
                    }
                  }
                }
              }
            }
          ],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_stream:StreamModelPredictionsProsodyPredictionsItem": {
        "name": "StreamModelPredictionsProsodyPredictionsItem",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "time",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_stream:TimeRange"
                    }
                  }
                }
              }
            },
            {
              "key": "emotions",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_stream:EmotionEmbedding"
                    }
                  }
                }
              }
            }
          ],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_stream:StreamModelPredictionsProsody": {
        "name": "StreamModelPredictionsProsody",
        "description": "Response for the speech prosody emotion model.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "predictions",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "list",
                      "itemShape": {
                        "type": "alias",
                        "value": {
                          "type": "id",
                          "id": "type_stream:StreamModelPredictionsProsodyPredictionsItem"
                        }
                      }
                    }
                  }
                }
              }
            }
          ],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_stream:StreamModelPredictions": {
        "name": "StreamModelPredictions",
        "description": "Model predictions",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "payload_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "If a payload ID was passed in the request, the same payload ID will be sent back in the response body."
            },
            {
              "key": "job_details",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_stream:StreamModelPredictionsJobDetails"
                    }
                  }
                }
              },
              "description": "If the job_details flag was set in the request, details about the current streaming job will be returned in the response body."
            },
            {
              "key": "burst",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_stream:StreamModelPredictionsBurst"
                    }
                  }
                }
              },
              "description": "Response for the vocal burst emotion model."
            },
            {
              "key": "face",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_stream:StreamModelPredictionsFace"
                    }
                  }
                }
              },
              "description": "Response for the facial expression emotion model."
            },
            {
              "key": "facemesh",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_stream:StreamModelPredictionsFacemesh"
                    }
                  }
                }
              },
              "description": "Response for the facemesh emotion model."
            },
            {
              "key": "language",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_stream:StreamModelPredictionsLanguage"
                    }
                  }
                }
              },
              "description": "Response for the language emotion model."
            },
            {
              "key": "prosody",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_stream:StreamModelPredictionsProsody"
                    }
                  }
                }
              },
              "description": "Response for the speech prosody emotion model."
            }
          ],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_stream:JobDetails": {
        "name": "JobDetails",
        "description": "If the job_details flag was set in the request, details about the current streaming job will be returned in the response body.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "job_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "ID of the current streaming job."
            }
          ],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_stream:StreamErrorMessage": {
        "name": "StreamErrorMessage",
        "description": "Error message",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "error",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "Error message text."
            },
            {
              "key": "code",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "Unique identifier for the error."
            },
            {
              "key": "payload_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "If a payload ID was passed in the request, the same payload ID will be sent back in the response body."
            },
            {
              "key": "job_details",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_stream:JobDetails"
                    }
                  }
                }
              },
              "description": "If the job_details flag was set in the request, details about the current streaming job will be returned in the response body."
            }
          ],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_stream:StreamWarningMessageJobDetails": {
        "name": "StreamWarningMessageJobDetails",
        "description": "If the job_details flag was set in the request, details about the current streaming job will be returned in the response body.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "job_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "ID of the current streaming job."
            }
          ],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_stream:StreamWarningMessage": {
        "name": "StreamWarningMessage",
        "description": "Warning message",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "warning",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "Warning message text."
            },
            {
              "key": "code",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "Unique identifier for the error."
            },
            {
              "key": "payload_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "If a payload ID was passed in the request, the same payload ID will be sent back in the response body."
            },
            {
              "key": "job_details",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_stream:StreamWarningMessageJobDetails"
                    }
                  }
                }
              },
              "description": "If the job_details flag was set in the request, details about the current streaming job will be returned in the response body."
            }
          ],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_stream:SubscribeEvent": {
        "name": "SubscribeEvent",
        "shape": {
          "type": "undiscriminatedUnion",
          "variants": [
            {
              "displayName": "Stream Model Predictions",
              "shape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_stream:StreamModelPredictions"
                }
              },
              "description": "Model predictions"
            },
            {
              "displayName": "Stream Error Message",
              "shape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_stream:StreamErrorMessage"
                }
              },
              "description": "Error message"
            },
            {
              "displayName": "Stream Warning Message",
              "shape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_stream:StreamWarningMessage"
                }
              },
              "description": "Warning message"
            }
          ]
        }
      },
      "type_stream:StreamFace": {
        "name": "StreamFace",
        "description": "Configuration for the facial expression emotion model.\n\nNote: Using the `reset_stream` parameter does not have any effect on face identification. A single face identifier cache is maintained over a full session whether `reset_stream` is used or not.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "facs",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "map",
                      "keyShape": {
                        "type": "alias",
                        "value": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      },
                      "valueShape": {
                        "type": "alias",
                        "value": {
                          "type": "unknown"
                        }
                      }
                    }
                  }
                }
              },
              "description": "Configuration for FACS predictions. If missing or null, no FACS predictions will be generated."
            },
            {
              "key": "descriptions",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "map",
                      "keyShape": {
                        "type": "alias",
                        "value": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      },
                      "valueShape": {
                        "type": "alias",
                        "value": {
                          "type": "unknown"
                        }
                      }
                    }
                  }
                }
              },
              "description": "Configuration for Descriptions predictions. If missing or null, no Descriptions predictions will be generated."
            },
            {
              "key": "identify_faces",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean",
                        "default": false
                      }
                    }
                  }
                }
              },
              "description": "Whether to return identifiers for faces across frames. If true, unique identifiers will be assigned to face bounding boxes to differentiate different faces. If false, all faces will be tagged with an \"unknown\" ID."
            },
            {
              "key": "fps_pred",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "double",
                        "default": 3
                      }
                    }
                  }
                }
              },
              "description": "Number of frames per second to process. Other frames will be omitted from the response."
            },
            {
              "key": "prob_threshold",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "double",
                        "default": 3
                      }
                    }
                  }
                }
              },
              "description": "Face detection probability threshold. Faces detected with a probability less than this threshold will be omitted from the response."
            },
            {
              "key": "min_face_size",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "double",
                        "default": 3
                      }
                    }
                  }
                }
              },
              "description": "Minimum bounding box side length in pixels to treat as a face. Faces detected with a bounding box side length in pixels less than this threshold will be omitted from the response."
            }
          ],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_stream:StreamLanguage": {
        "name": "StreamLanguage",
        "description": "Configuration for the language emotion model.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "sentiment",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "map",
                      "keyShape": {
                        "type": "alias",
                        "value": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      },
                      "valueShape": {
                        "type": "alias",
                        "value": {
                          "type": "unknown"
                        }
                      }
                    }
                  }
                }
              },
              "description": "Configuration for sentiment predictions. If missing or null, no sentiment predictions will be generated."
            },
            {
              "key": "toxicity",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "map",
                      "keyShape": {
                        "type": "alias",
                        "value": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      },
                      "valueShape": {
                        "type": "alias",
                        "value": {
                          "type": "unknown"
                        }
                      }
                    }
                  }
                }
              },
              "description": "Configuration for toxicity predictions. If missing or null, no toxicity predictions will be generated."
            },
            {
              "key": "granularity",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "The granularity at which to generate predictions. Values are `word`, `sentence`, `utterance`, or `passage`. To get a single prediction for the entire text of your streaming payload use `passage`. Default value is `word`."
            }
          ],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_stream:Config": {
        "name": "Config",
        "description": "Configuration used to specify which models should be used and with what settings.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "burst",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "map",
                      "keyShape": {
                        "type": "alias",
                        "value": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      },
                      "valueShape": {
                        "type": "alias",
                        "value": {
                          "type": "unknown"
                        }
                      }
                    }
                  }
                }
              },
              "description": "Configuration for the vocal burst emotion model.\n\nNote: Model configuration is not currently available in streaming.\n\nPlease use the default configuration by passing an empty object `{}`."
            },
            {
              "key": "face",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_stream:StreamFace"
                    }
                  }
                }
              },
              "description": "Configuration for the facial expression emotion model.\n\nNote: Using the `reset_stream` parameter does not have any effect on face identification. A single face identifier cache is maintained over a full session whether `reset_stream` is used or not."
            },
            {
              "key": "facemesh",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "map",
                      "keyShape": {
                        "type": "alias",
                        "value": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      },
                      "valueShape": {
                        "type": "alias",
                        "value": {
                          "type": "unknown"
                        }
                      }
                    }
                  }
                }
              },
              "description": "Configuration for the facemesh emotion model.\n\nNote: Model configuration is not currently available in streaming.\n\nPlease use the default configuration by passing an empty object `{}`."
            },
            {
              "key": "language",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_stream:StreamLanguage"
                    }
                  }
                }
              },
              "description": "Configuration for the language emotion model."
            },
            {
              "key": "prosody",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "map",
                      "keyShape": {
                        "type": "alias",
                        "value": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      },
                      "valueShape": {
                        "type": "alias",
                        "value": {
                          "type": "unknown"
                        }
                      }
                    }
                  }
                }
              },
              "description": "Configuration for the speech prosody emotion model.\n\nNote: Model configuration is not currently available in streaming.\n\nPlease use the default configuration by passing an empty object `{}`."
            }
          ],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_stream:StreamModelsEndpointPayload": {
        "name": "StreamModelsEndpointPayload",
        "description": "Models endpoint payload",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "data",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "models",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_stream:Config"
                    }
                  }
                }
              },
              "description": "Configuration used to specify which models should be used and with what settings."
            },
            {
              "key": "stream_window_ms",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "double",
                        "minimum": 500,
                        "maximum": 10000,
                        "default": 5000
                      }
                    }
                  }
                }
              },
              "description": "Length in milliseconds of streaming sliding window.\n\nExtending the length of this window will prepend media context from past payloads into the current payload.\n\nFor example, if on the first payload you send 500ms of data and on the second payload you send an additional 500ms of data, a window of at least 1000ms will allow the model to process all 1000ms of stream data.\n\nA window of 600ms would append the full 500ms of the second payload to the last 100ms of the first payload.\n\nNote: This feature is currently only supported for audio data and audio models. For other file types and models this parameter will be ignored."
            },
            {
              "key": "reset_stream",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean",
                        "default": false
                      }
                    }
                  }
                }
              },
              "description": "Whether to reset the streaming sliding window before processing the current payload.\n\nIf this parameter is set to `true` then past context will be deleted before processing the current payload.\n\nUse reset_stream when one audio file is done being processed and you do not want context to leak across files."
            },
            {
              "key": "raw_text",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean",
                        "default": false
                      }
                    }
                  }
                }
              },
              "description": "Set to `true` to enable the data parameter to be parsed as raw text rather than base64 encoded bytes.\nThis parameter is useful if you want to send text to be processed by the language model, but it cannot be used with other file types like audio, image, or video."
            },
            {
              "key": "job_details",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean",
                        "default": false
                      }
                    }
                  }
                }
              },
              "description": "Set to `true` to get details about the job.\n\nThis parameter can be set in the same payload as data or it can be set without data and models configuration to get the job details between payloads.\n\nThis parameter is useful to get the unique job ID."
            },
            {
              "key": "payload_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "Pass an arbitrary string as the payload ID and get it back at the top level of the socket response.\n\nThis can be useful if you have multiple requests running asynchronously and want to disambiguate responses as they are received."
            }
          ],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_stream:EmotionEmbeddingItem": {
        "name": "EmotionEmbeddingItem",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "name",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "Name of the emotion being expressed."
            },
            {
              "key": "score",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  }
                }
              },
              "description": "Embedding value for the emotion being expressed."
            }
          ],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_stream:EmotionEmbedding": {
        "name": "EmotionEmbedding",
        "description": "A high-dimensional embedding in emotion space.",
        "shape": {
          "type": "alias",
          "value": {
            "type": "list",
            "itemShape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_stream:EmotionEmbeddingItem"
              }
            }
          }
        }
      },
      "type_stream:StreamBoundingBox": {
        "name": "StreamBoundingBox",
        "description": "A bounding box around a face.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "x",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "double",
                        "minimum": 0
                      }
                    }
                  }
                }
              },
              "description": "x-coordinate of bounding box top left corner."
            },
            {
              "key": "y",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "double",
                        "minimum": 0
                      }
                    }
                  }
                }
              },
              "description": "y-coordinate of bounding box top left corner."
            },
            {
              "key": "w",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "double",
                        "minimum": 0
                      }
                    }
                  }
                }
              },
              "description": "Bounding box width."
            },
            {
              "key": "h",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "double",
                        "minimum": 0
                      }
                    }
                  }
                }
              },
              "description": "Bounding box height."
            }
          ],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_stream:TimeRange": {
        "name": "TimeRange",
        "description": "A time range with a beginning and end, measured in seconds.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "begin",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "double",
                        "minimum": 0
                      }
                    }
                  }
                }
              },
              "description": "Beginning of time range in seconds."
            },
            {
              "key": "end",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "double",
                        "minimum": 0
                      }
                    }
                  }
                }
              },
              "description": "End of time range in seconds."
            }
          ],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_stream:TextPosition": {
        "name": "TextPosition",
        "description": "Position of a segment of text within a larger document, measured in characters. Uses zero-based indexing. The beginning index is inclusive and the end index is exclusive.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "begin",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "double",
                        "minimum": 0
                      }
                    }
                  }
                }
              },
              "description": "The index of the first character in the text segment, inclusive."
            },
            {
              "key": "end",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "double",
                        "minimum": 0
                      }
                    }
                  }
                }
              },
              "description": "The index of the last character in the text segment, exclusive."
            }
          ],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_stream:SentimentItem": {
        "name": "SentimentItem",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "name",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "Level of sentiment, ranging from 1 (negative) to 9 (positive)"
            },
            {
              "key": "score",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  }
                }
              },
              "description": "Prediction for this level of sentiment"
            }
          ],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_stream:Sentiment": {
        "name": "Sentiment",
        "description": "Sentiment predictions returned as a distribution. This model predicts the probability that a given text could be interpreted as having each sentiment level from 1 (negative) to 9 (positive).\n\nCompared to returning one estimate of sentiment, this enables a more nuanced analysis of a text's meaning. For example, a text with very neutral sentiment would have an average rating of 5. But also a text that could be interpreted as having very positive sentiment or very negative sentiment would also have an average rating of 5. The average sentiment is less informative than the distribution over sentiment, so this API returns a value for each sentiment level.",
        "shape": {
          "type": "alias",
          "value": {
            "type": "list",
            "itemShape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_stream:SentimentItem"
              }
            }
          }
        }
      },
      "type_stream:ToxicityItem": {
        "name": "ToxicityItem",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "name",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "Category of toxicity."
            },
            {
              "key": "score",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  }
                }
              },
              "description": "Prediction for this category of toxicity"
            }
          ],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_stream:Toxicity": {
        "name": "Toxicity",
        "description": "Toxicity predictions returned as probabilities that the text can be classified into the following categories: toxic, severe_toxic, obscene, threat, insult, and identity_hate.",
        "shape": {
          "type": "alias",
          "value": {
            "type": "list",
            "itemShape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_stream:ToxicityItem"
              }
            }
          }
        }
      }
    },
    "subpackages": {
      "subpackage_batch": {
        "id": "subpackage_batch",
        "name": "batch"
      },
      "subpackage_stream": {
        "id": "subpackage_stream",
        "name": "stream"
      }
    },
    "auths": {
      "default": {
        "type": "header",
        "headerWireValue": "X-Hume-Api-Key",
        "nameOverride": "apiKey"
      }
    }
  },
  {
    "id": "ef70bbc1-c431-4ffd-b24b-e8c845ed1d5c",
    "endpoints": {
      "endpoint_tools.list-tools": {
        "id": "endpoint_tools.list-tools",
        "namespace": [
          "subpackage_tools"
        ],
        "description": "Fetches a paginated list of **Tools**.\n\nRefer to our [tool use](/docs/empathic-voice-interface-evi/tool-use#function-calling) guide for comprehensive instructions on defining and integrating tools into EVI.",
        "method": "GET",
        "path": [
          {
            "type": "literal",
            "value": "/v0/evi/tools"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.hume.ai"
          }
        ],
        "queryParameters": [
          {
            "key": "page_number",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                }
              }
            },
            "description": "Specifies the page number to retrieve, enabling pagination.\n\nThis parameter uses zero-based indexing. For example, setting `page_number` to 0 retrieves the first page of results (items 0-9 if `page_size` is 10), setting `page_number` to 1 retrieves the second page (items 10-19), and so on. Defaults to 0, which retrieves the first page."
          },
          {
            "key": "page_size",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                }
              }
            },
            "description": "Specifies the maximum number of results to include per page, enabling pagination. The value must be between 1 and 100, inclusive.\n\nFor example, if `page_size` is set to 10, each page will include up to 10 items. Defaults to 10."
          },
          {
            "key": "restrict_to_most_recent",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "boolean",
                      "default": false
                    }
                  }
                }
              }
            },
            "description": "By default, `restrict_to_most_recent` is set to true, returning only the latest version of each tool. To include all versions of each tool in the list, set `restrict_to_most_recent` to false."
          },
          {
            "key": "name",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "description": "Filter to only include tools with name."
          }
        ],
        "requests": [],
        "responses": [
          {
            "description": "Success",
            "statusCode": 200,
            "body": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:ReturnPagedUserDefinedTools"
              }
            }
          }
        ],
        "errors": [
          {
            "description": "Bad Request",
            "name": "Tools List Tools Request Bad Request Error",
            "statusCode": 400,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:ErrorResponse"
              }
            },
            "examples": [
              {
                "responseBody": {
                  "type": "json",
                  "value": {}
                }
              }
            ]
          }
        ],
        "examples": [
          {
            "path": "/v0/evi/tools",
            "responseStatusCode": 200,
            "pathParameters": {},
            "queryParameters": {
              "page_number": 0,
              "page_size": 2
            },
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "page_number": 0,
                "page_size": 2,
                "total_pages": 1,
                "tools_page": [
                  {
                    "tool_type": "FUNCTION",
                    "id": "d20827af-5d8d-4f66-b6b9-ce2e3e1ea2b2",
                    "version": 0,
                    "version_type": "FIXED",
                    "name": "get_current_location",
                    "created_on": 1715267200693,
                    "modified_on": 1715267200693,
                    "parameters": "{ \"type\": \"object\", \"properties\": { \"location\": { \"type\": \"string\", \"description\": \"The city and state, e.g. San Francisco, CA\" }}, \"required\": [\"location\"] }",
                    "version_description": "Fetches user's current location.",
                    "fallback_content": "Unable to fetch location.",
                    "description": "Fetches user's current location."
                  },
                  {
                    "tool_type": "FUNCTION",
                    "id": "4442f3ea-9038-40e3-a2ce-1522b7de770f",
                    "version": 0,
                    "version_type": "FIXED",
                    "name": "get_current_weather",
                    "created_on": 1715266126705,
                    "modified_on": 1715266126705,
                    "parameters": "{ \"type\": \"object\", \"properties\": { \"location\": { \"type\": \"string\", \"description\": \"The city and state, e.g. San Francisco, CA\" }, \"format\": { \"type\": \"string\", \"enum\": [\"celsius\", \"fahrenheit\"], \"description\": \"The temperature unit to use. Infer this from the users location.\" } }, \"required\": [\"location\", \"format\"] }",
                    "version_description": "Fetches current weather and uses celsius or fahrenheit based on location of user.",
                    "fallback_content": "Unable to fetch location.",
                    "description": "Fetches current weather and uses celsius or fahrenheit based on location of user."
                  }
                ]
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -G https://api.hume.ai/v0/evi/tools \\\n     -H \"X-Hume-Api-Key: <apiKey>\" \\\n     -d page_number=0 \\\n     -d page_size=2",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from hume import HumeClient\n\nclient = HumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\nresponse = client.empathic_voice.tools.list_tools(\n    page_number=0,\n    page_size=2,\n)\nfor item in response:\n    yield item\n# alternatively, you can paginate page-by-page\nfor page in response.iter_pages():\n    yield page\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumeClient } from \"hume\";\n\nconst client = new HumeClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.empathicVoice.tools.listTools({\n    pageNumber: 0,\n    pageSize: 2\n});\n",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/v0/evi/tools",
            "responseStatusCode": 400,
            "pathParameters": {},
            "queryParameters": {
              "page_number": 0,
              "page_size": 0
            },
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "error": "string",
                "message": "string"
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -G https://api.hume.ai/v0/evi/tools \\\n     -H \"X-Hume-Api-Key: <apiKey>\" \\\n     -d page_number=0 \\\n     -d page_size=0",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from hume import HumeClient\n\nclient = HumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\nresponse = client.empathic_voice.tools.list_tools(\n    page_number=0,\n    page_size=2,\n)\nfor item in response:\n    yield item\n# alternatively, you can paginate page-by-page\nfor page in response.iter_pages():\n    yield page\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumeClient } from \"hume\";\n\nconst client = new HumeClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.empathicVoice.tools.listTools({\n    pageNumber: 0,\n    pageSize: 2\n});\n",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "endpoint_tools.create-tool": {
        "id": "endpoint_tools.create-tool",
        "namespace": [
          "subpackage_tools"
        ],
        "description": "Creates a **Tool** that can be added to an [EVI configuration](/reference/empathic-voice-interface-evi/configs/create-config).\n\nRefer to our [tool use](/docs/empathic-voice-interface-evi/tool-use#function-calling) guide for comprehensive instructions on defining and integrating tools into EVI.",
        "method": "POST",
        "path": [
          {
            "type": "literal",
            "value": "/v0/evi/tools"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.hume.ai"
          }
        ],
        "requests": [
          {
            "contentType": "application/json",
            "body": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "name",
                  "valueShape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  },
                  "description": "Name applied to all versions of a particular Tool."
                },
                {
                  "key": "version_description",
                  "valueShape": {
                    "type": "alias",
                    "value": {
                      "type": "optional",
                      "shape": {
                        "type": "alias",
                        "value": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "description": "An optional description of the Tool version."
                },
                {
                  "key": "description",
                  "valueShape": {
                    "type": "alias",
                    "value": {
                      "type": "optional",
                      "shape": {
                        "type": "alias",
                        "value": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "description": "An optional description of what the Tool does, used by the supplemental LLM to choose when and how to call the function."
                },
                {
                  "key": "parameters",
                  "valueShape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  },
                  "description": "Stringified JSON defining the parameters used by this version of the Tool.\n\nThese parameters define the inputs needed for the Tool’s execution, including the expected data type and description for each input field. Structured as a stringified JSON schema, this format ensures the Tool receives data in the expected format."
                },
                {
                  "key": "fallback_content",
                  "valueShape": {
                    "type": "alias",
                    "value": {
                      "type": "optional",
                      "shape": {
                        "type": "alias",
                        "value": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "description": "Optional text passed to the supplemental LLM in place of the tool call result. The LLM then uses this text to generate a response back to the user, ensuring continuity in the conversation if the Tool errors."
                }
              ]
            }
          }
        ],
        "responses": [
          {
            "description": "Created",
            "statusCode": 200,
            "body": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "id",
                    "id": "type_:ReturnUserDefinedTool"
                  }
                }
              }
            }
          }
        ],
        "errors": [
          {
            "description": "Bad Request",
            "name": "Tools Create Tool Request Bad Request Error",
            "statusCode": 400,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:ErrorResponse"
              }
            },
            "examples": [
              {
                "responseBody": {
                  "type": "json",
                  "value": {}
                }
              }
            ]
          }
        ],
        "examples": [
          {
            "path": "/v0/evi/tools",
            "responseStatusCode": 200,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {
                "name": "get_current_weather",
                "parameters": "{ \"type\": \"object\", \"properties\": { \"location\": { \"type\": \"string\", \"description\": \"The city and state, e.g. San Francisco, CA\" }, \"format\": { \"type\": \"string\", \"enum\": [\"celsius\", \"fahrenheit\"], \"description\": \"The temperature unit to use. Infer this from the users location.\" } }, \"required\": [\"location\", \"format\"] }",
                "version_description": "Fetches current weather and uses celsius or fahrenheit based on location of user.",
                "description": "This tool is for getting the current weather.",
                "fallback_content": "Unable to fetch current weather."
              }
            },
            "responseBody": {
              "type": "json",
              "value": {
                "tool_type": "FUNCTION",
                "id": "aa9b71c4-723c-47ff-9f83-1a1829e74376",
                "version": 0,
                "version_type": "FIXED",
                "name": "get_current_weather",
                "created_on": 1715275452390,
                "modified_on": 1715275452390,
                "parameters": "{ \"type\": \"object\", \"properties\": { \"location\": { \"type\": \"string\", \"description\": \"The city and state, e.g. San Francisco, CA\" }, \"format\": { \"type\": \"string\", \"enum\": [\"celsius\", \"fahrenheit\"], \"description\": \"The temperature unit to use. Infer this from the users location.\" } }, \"required\": [\"location\", \"format\"] }",
                "version_description": "Fetches current weather and uses celsius or fahrenheit based on location of user.",
                "fallback_content": "Unable to fetch current weather.",
                "description": "This tool is for getting the current weather."
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://api.hume.ai/v0/evi/tools \\\n     -H \"X-Hume-Api-Key: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n  \"name\": \"get_current_weather\",\n  \"parameters\": \"{ \\\"type\\\": \\\"object\\\", \\\"properties\\\": { \\\"location\\\": { \\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"The city and state, e.g. San Francisco, CA\\\" }, \\\"format\\\": { \\\"type\\\": \\\"string\\\", \\\"enum\\\": [\\\"celsius\\\", \\\"fahrenheit\\\"], \\\"description\\\": \\\"The temperature unit to use. Infer this from the users location.\\\" } }, \\\"required\\\": [\\\"location\\\", \\\"format\\\"] }\",\n  \"version_description\": \"Fetches current weather and uses celsius or fahrenheit based on location of user.\",\n  \"description\": \"This tool is for getting the current weather.\",\n  \"fallback_content\": \"Unable to fetch current weather.\"\n}'",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from hume import HumeClient\n\nclient = HumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.empathic_voice.tools.create_tool(\n    name=\"get_current_weather\",\n    parameters='{ \"type\": \"object\", \"properties\": { \"location\": { \"type\": \"string\", \"description\": \"The city and state, e.g. San Francisco, CA\" }, \"format\": { \"type\": \"string\", \"enum\": [\"celsius\", \"fahrenheit\"], \"description\": \"The temperature unit to use. Infer this from the users location.\" } }, \"required\": [\"location\", \"format\"] }',\n    version_description=\"Fetches current weather and uses celsius or fahrenheit based on location of user.\",\n    description=\"This tool is for getting the current weather.\",\n    fallback_content=\"Unable to fetch current weather.\",\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumeClient } from \"hume\";\n\nconst client = new HumeClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.empathicVoice.tools.createTool({\n    name: \"get_current_weather\",\n    parameters: \"{ \\\"type\\\": \\\"object\\\", \\\"properties\\\": { \\\"location\\\": { \\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"The city and state, e.g. San Francisco, CA\\\" }, \\\"format\\\": { \\\"type\\\": \\\"string\\\", \\\"enum\\\": [\\\"celsius\\\", \\\"fahrenheit\\\"], \\\"description\\\": \\\"The temperature unit to use. Infer this from the users location.\\\" } }, \\\"required\\\": [\\\"location\\\", \\\"format\\\"] }\",\n    versionDescription: \"Fetches current weather and uses celsius or fahrenheit based on location of user.\",\n    description: \"This tool is for getting the current weather.\",\n    fallbackContent: \"Unable to fetch current weather.\"\n});\n",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/v0/evi/tools",
            "responseStatusCode": 400,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {
                "name": "string",
                "parameters": "string"
              }
            },
            "responseBody": {
              "type": "json",
              "value": {
                "error": "string",
                "message": "string"
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://api.hume.ai/v0/evi/tools \\\n     -H \"X-Hume-Api-Key: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n  \"name\": \"string\",\n  \"parameters\": \"string\"\n}'",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from hume import HumeClient\n\nclient = HumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.empathic_voice.tools.create_tool(\n    name=\"get_current_weather\",\n    parameters='{ \"type\": \"object\", \"properties\": { \"location\": { \"type\": \"string\", \"description\": \"The city and state, e.g. San Francisco, CA\" }, \"format\": { \"type\": \"string\", \"enum\": [\"celsius\", \"fahrenheit\"], \"description\": \"The temperature unit to use. Infer this from the users location.\" } }, \"required\": [\"location\", \"format\"] }',\n    version_description=\"Fetches current weather and uses celsius or fahrenheit based on location of user.\",\n    description=\"This tool is for getting the current weather.\",\n    fallback_content=\"Unable to fetch current weather.\",\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumeClient } from \"hume\";\n\nconst client = new HumeClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.empathicVoice.tools.createTool({\n    name: \"get_current_weather\",\n    parameters: \"{ \\\"type\\\": \\\"object\\\", \\\"properties\\\": { \\\"location\\\": { \\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"The city and state, e.g. San Francisco, CA\\\" }, \\\"format\\\": { \\\"type\\\": \\\"string\\\", \\\"enum\\\": [\\\"celsius\\\", \\\"fahrenheit\\\"], \\\"description\\\": \\\"The temperature unit to use. Infer this from the users location.\\\" } }, \\\"required\\\": [\\\"location\\\", \\\"format\\\"] }\",\n    versionDescription: \"Fetches current weather and uses celsius or fahrenheit based on location of user.\",\n    description: \"This tool is for getting the current weather.\",\n    fallbackContent: \"Unable to fetch current weather.\"\n});\n",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "endpoint_tools.list-tool-versions": {
        "id": "endpoint_tools.list-tool-versions",
        "namespace": [
          "subpackage_tools"
        ],
        "description": "Fetches a list of a **Tool's** versions.\n\nRefer to our [tool use](/docs/empathic-voice-interface-evi/tool-use#function-calling) guide for comprehensive instructions on defining and integrating tools into EVI.",
        "method": "GET",
        "path": [
          {
            "type": "literal",
            "value": "/v0/evi/tools/"
          },
          {
            "type": "pathParameter",
            "value": "id"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.hume.ai"
          }
        ],
        "pathParameters": [
          {
            "key": "id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "Identifier for a Tool. Formatted as a UUID."
          }
        ],
        "queryParameters": [
          {
            "key": "page_number",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                }
              }
            },
            "description": "Specifies the page number to retrieve, enabling pagination.\n\nThis parameter uses zero-based indexing. For example, setting `page_number` to 0 retrieves the first page of results (items 0-9 if `page_size` is 10), setting `page_number` to 1 retrieves the second page (items 10-19), and so on. Defaults to 0, which retrieves the first page."
          },
          {
            "key": "page_size",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                }
              }
            },
            "description": "Specifies the maximum number of results to include per page, enabling pagination. The value must be between 1 and 100, inclusive.\n\nFor example, if `page_size` is set to 10, each page will include up to 10 items. Defaults to 10."
          },
          {
            "key": "restrict_to_most_recent",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "boolean",
                      "default": false
                    }
                  }
                }
              }
            },
            "description": "By default, `restrict_to_most_recent` is set to true, returning only the latest version of each tool. To include all versions of each tool in the list, set `restrict_to_most_recent` to false."
          }
        ],
        "requests": [],
        "responses": [
          {
            "description": "Success",
            "statusCode": 200,
            "body": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:ReturnPagedUserDefinedTools"
              }
            }
          }
        ],
        "errors": [
          {
            "description": "Bad Request",
            "name": "Tools List Tool Versions Request Bad Request Error",
            "statusCode": 400,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:ErrorResponse"
              }
            },
            "examples": [
              {
                "responseBody": {
                  "type": "json",
                  "value": {}
                }
              }
            ]
          }
        ],
        "examples": [
          {
            "path": "/v0/evi/tools/00183a3f-79ba-413d-9f3b-609864268bea",
            "responseStatusCode": 200,
            "pathParameters": {
              "id": "00183a3f-79ba-413d-9f3b-609864268bea"
            },
            "queryParameters": {},
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "page_number": 0,
                "page_size": 10,
                "total_pages": 1,
                "tools_page": [
                  {
                    "tool_type": "FUNCTION",
                    "id": "00183a3f-79ba-413d-9f3b-609864268bea",
                    "version": 1,
                    "version_type": "FIXED",
                    "name": "get_current_weather",
                    "created_on": 1715277014228,
                    "modified_on": 1715277602313,
                    "parameters": "{ \"type\": \"object\", \"properties\": { \"location\": { \"type\": \"string\", \"description\": \"The city and state, e.g. San Francisco, CA\" }, \"format\": { \"type\": \"string\", \"enum\": [\"celsius\", \"fahrenheit\", \"kelvin\"], \"description\": \"The temperature unit to use. Infer this from the users location.\" } }, \"required\": [\"location\", \"format\"] }",
                    "version_description": "Fetches current weather and uses celsius, fahrenheit, or kelvin based on location of user.",
                    "fallback_content": "Unable to fetch current weather.",
                    "description": "This tool is for getting the current weather."
                  }
                ]
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl https://api.hume.ai/v0/evi/tools/00183a3f-79ba-413d-9f3b-609864268bea \\\n     -H \"X-Hume-Api-Key: <apiKey>\"",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from hume import HumeClient\n\nclient = HumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.empathic_voice.tools.list_tool_versions(\n    id=\"00183a3f-79ba-413d-9f3b-609864268bea\",\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumeClient } from \"hume\";\n\nconst client = new HumeClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.empathicVoice.tools.listToolVersions(\"00183a3f-79ba-413d-9f3b-609864268bea\");\n",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/v0/evi/tools/:id",
            "responseStatusCode": 400,
            "pathParameters": {
              "id": ":id"
            },
            "queryParameters": {
              "page_number": 0,
              "page_size": 0
            },
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "error": "string",
                "message": "string"
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -G https://api.hume.ai/v0/evi/tools/:id \\\n     -H \"X-Hume-Api-Key: <apiKey>\" \\\n     -d page_number=0 \\\n     -d page_size=0",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from hume import HumeClient\n\nclient = HumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.empathic_voice.tools.list_tool_versions(\n    id=\"00183a3f-79ba-413d-9f3b-609864268bea\",\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumeClient } from \"hume\";\n\nconst client = new HumeClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.empathicVoice.tools.listToolVersions(\"00183a3f-79ba-413d-9f3b-609864268bea\");\n",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "endpoint_tools.create-tool-version": {
        "id": "endpoint_tools.create-tool-version",
        "namespace": [
          "subpackage_tools"
        ],
        "description": "Updates a **Tool** by creating a new version of the **Tool**.\n\nRefer to our [tool use](/docs/empathic-voice-interface-evi/tool-use#function-calling) guide for comprehensive instructions on defining and integrating tools into EVI.",
        "method": "POST",
        "path": [
          {
            "type": "literal",
            "value": "/v0/evi/tools/"
          },
          {
            "type": "pathParameter",
            "value": "id"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.hume.ai"
          }
        ],
        "pathParameters": [
          {
            "key": "id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "Identifier for a Tool. Formatted as a UUID."
          }
        ],
        "requests": [
          {
            "contentType": "application/json",
            "body": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "version_description",
                  "valueShape": {
                    "type": "alias",
                    "value": {
                      "type": "optional",
                      "shape": {
                        "type": "alias",
                        "value": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "description": "An optional description of the Tool version."
                },
                {
                  "key": "description",
                  "valueShape": {
                    "type": "alias",
                    "value": {
                      "type": "optional",
                      "shape": {
                        "type": "alias",
                        "value": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "description": "An optional description of what the Tool does, used by the supplemental LLM to choose when and how to call the function."
                },
                {
                  "key": "parameters",
                  "valueShape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  },
                  "description": "Stringified JSON defining the parameters used by this version of the Tool.\n\nThese parameters define the inputs needed for the Tool’s execution, including the expected data type and description for each input field. Structured as a stringified JSON schema, this format ensures the Tool receives data in the expected format."
                },
                {
                  "key": "fallback_content",
                  "valueShape": {
                    "type": "alias",
                    "value": {
                      "type": "optional",
                      "shape": {
                        "type": "alias",
                        "value": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "description": "Optional text passed to the supplemental LLM in place of the tool call result. The LLM then uses this text to generate a response back to the user, ensuring continuity in the conversation if the Tool errors."
                }
              ]
            }
          }
        ],
        "responses": [
          {
            "description": "Created",
            "statusCode": 200,
            "body": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "id",
                    "id": "type_:ReturnUserDefinedTool"
                  }
                }
              }
            }
          }
        ],
        "errors": [
          {
            "description": "Bad Request",
            "name": "Tools Create Tool Version Request Bad Request Error",
            "statusCode": 400,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:ErrorResponse"
              }
            },
            "examples": [
              {
                "responseBody": {
                  "type": "json",
                  "value": {}
                }
              }
            ]
          }
        ],
        "examples": [
          {
            "path": "/v0/evi/tools/00183a3f-79ba-413d-9f3b-609864268bea",
            "responseStatusCode": 200,
            "pathParameters": {
              "id": "00183a3f-79ba-413d-9f3b-609864268bea"
            },
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {
                "parameters": "{ \"type\": \"object\", \"properties\": { \"location\": { \"type\": \"string\", \"description\": \"The city and state, e.g. San Francisco, CA\" }, \"format\": { \"type\": \"string\", \"enum\": [\"celsius\", \"fahrenheit\", \"kelvin\"], \"description\": \"The temperature unit to use. Infer this from the users location.\" } }, \"required\": [\"location\", \"format\"] }",
                "version_description": "Fetches current weather and uses celsius, fahrenheit, or kelvin based on location of user.",
                "description": "This tool is for getting the current weather.",
                "fallback_content": "Unable to fetch current weather."
              }
            },
            "responseBody": {
              "type": "json",
              "value": {
                "tool_type": "FUNCTION",
                "id": "00183a3f-79ba-413d-9f3b-609864268bea",
                "version": 1,
                "version_type": "FIXED",
                "name": "get_current_weather",
                "created_on": 1715277014228,
                "modified_on": 1715277602313,
                "parameters": "{ \"type\": \"object\", \"properties\": { \"location\": { \"type\": \"string\", \"description\": \"The city and state, e.g. San Francisco, CA\" }, \"format\": { \"type\": \"string\", \"enum\": [\"celsius\", \"fahrenheit\", \"kelvin\"], \"description\": \"The temperature unit to use. Infer this from the users location.\" } }, \"required\": [\"location\", \"format\"] }",
                "version_description": "Fetches current weather and uses celsius, fahrenheit, or kelvin based on location of user.",
                "fallback_content": "Unable to fetch current weather.",
                "description": "This tool is for getting the current weather."
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://api.hume.ai/v0/evi/tools/00183a3f-79ba-413d-9f3b-609864268bea \\\n     -H \"X-Hume-Api-Key: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n  \"parameters\": \"{ \\\"type\\\": \\\"object\\\", \\\"properties\\\": { \\\"location\\\": { \\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"The city and state, e.g. San Francisco, CA\\\" }, \\\"format\\\": { \\\"type\\\": \\\"string\\\", \\\"enum\\\": [\\\"celsius\\\", \\\"fahrenheit\\\", \\\"kelvin\\\"], \\\"description\\\": \\\"The temperature unit to use. Infer this from the users location.\\\" } }, \\\"required\\\": [\\\"location\\\", \\\"format\\\"] }\",\n  \"version_description\": \"Fetches current weather and uses celsius, fahrenheit, or kelvin based on location of user.\",\n  \"description\": \"This tool is for getting the current weather.\",\n  \"fallback_content\": \"Unable to fetch current weather.\"\n}'",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from hume import HumeClient\n\nclient = HumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.empathic_voice.tools.create_tool_version(\n    id=\"00183a3f-79ba-413d-9f3b-609864268bea\",\n    parameters='{ \"type\": \"object\", \"properties\": { \"location\": { \"type\": \"string\", \"description\": \"The city and state, e.g. San Francisco, CA\" }, \"format\": { \"type\": \"string\", \"enum\": [\"celsius\", \"fahrenheit\", \"kelvin\"], \"description\": \"The temperature unit to use. Infer this from the users location.\" } }, \"required\": [\"location\", \"format\"] }',\n    version_description=\"Fetches current weather and uses celsius, fahrenheit, or kelvin based on location of user.\",\n    fallback_content=\"Unable to fetch current weather.\",\n    description=\"This tool is for getting the current weather.\",\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumeClient } from \"hume\";\n\nconst client = new HumeClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.empathicVoice.tools.createToolVersion(\"00183a3f-79ba-413d-9f3b-609864268bea\", {\n    parameters: \"{ \\\"type\\\": \\\"object\\\", \\\"properties\\\": { \\\"location\\\": { \\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"The city and state, e.g. San Francisco, CA\\\" }, \\\"format\\\": { \\\"type\\\": \\\"string\\\", \\\"enum\\\": [\\\"celsius\\\", \\\"fahrenheit\\\", \\\"kelvin\\\"], \\\"description\\\": \\\"The temperature unit to use. Infer this from the users location.\\\" } }, \\\"required\\\": [\\\"location\\\", \\\"format\\\"] }\",\n    versionDescription: \"Fetches current weather and uses celsius, fahrenheit, or kelvin based on location of user.\",\n    fallbackContent: \"Unable to fetch current weather.\",\n    description: \"This tool is for getting the current weather.\"\n});\n",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/v0/evi/tools/:id",
            "responseStatusCode": 400,
            "pathParameters": {
              "id": ":id"
            },
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {
                "parameters": "string"
              }
            },
            "responseBody": {
              "type": "json",
              "value": {
                "error": "string",
                "message": "string"
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://api.hume.ai/v0/evi/tools/:id \\\n     -H \"X-Hume-Api-Key: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n  \"parameters\": \"string\"\n}'",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from hume import HumeClient\n\nclient = HumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.empathic_voice.tools.create_tool_version(\n    id=\"00183a3f-79ba-413d-9f3b-609864268bea\",\n    parameters='{ \"type\": \"object\", \"properties\": { \"location\": { \"type\": \"string\", \"description\": \"The city and state, e.g. San Francisco, CA\" }, \"format\": { \"type\": \"string\", \"enum\": [\"celsius\", \"fahrenheit\", \"kelvin\"], \"description\": \"The temperature unit to use. Infer this from the users location.\" } }, \"required\": [\"location\", \"format\"] }',\n    version_description=\"Fetches current weather and uses celsius, fahrenheit, or kelvin based on location of user.\",\n    fallback_content=\"Unable to fetch current weather.\",\n    description=\"This tool is for getting the current weather.\",\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumeClient } from \"hume\";\n\nconst client = new HumeClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.empathicVoice.tools.createToolVersion(\"00183a3f-79ba-413d-9f3b-609864268bea\", {\n    parameters: \"{ \\\"type\\\": \\\"object\\\", \\\"properties\\\": { \\\"location\\\": { \\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"The city and state, e.g. San Francisco, CA\\\" }, \\\"format\\\": { \\\"type\\\": \\\"string\\\", \\\"enum\\\": [\\\"celsius\\\", \\\"fahrenheit\\\", \\\"kelvin\\\"], \\\"description\\\": \\\"The temperature unit to use. Infer this from the users location.\\\" } }, \\\"required\\\": [\\\"location\\\", \\\"format\\\"] }\",\n    versionDescription: \"Fetches current weather and uses celsius, fahrenheit, or kelvin based on location of user.\",\n    fallbackContent: \"Unable to fetch current weather.\",\n    description: \"This tool is for getting the current weather.\"\n});\n",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "endpoint_tools.delete-tool": {
        "id": "endpoint_tools.delete-tool",
        "namespace": [
          "subpackage_tools"
        ],
        "description": "Deletes a **Tool** and its versions.\n\nRefer to our [tool use](/docs/empathic-voice-interface-evi/tool-use#function-calling) guide for comprehensive instructions on defining and integrating tools into EVI.",
        "method": "DELETE",
        "path": [
          {
            "type": "literal",
            "value": "/v0/evi/tools/"
          },
          {
            "type": "pathParameter",
            "value": "id"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.hume.ai"
          }
        ],
        "pathParameters": [
          {
            "key": "id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "Identifier for a Tool. Formatted as a UUID."
          }
        ],
        "requests": [],
        "responses": [],
        "errors": [
          {
            "description": "Bad Request",
            "name": "Tools Delete Tool Request Bad Request Error",
            "statusCode": 400,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:ErrorResponse"
              }
            },
            "examples": [
              {
                "responseBody": {
                  "type": "json",
                  "value": {}
                }
              }
            ]
          }
        ],
        "examples": [
          {
            "path": "/v0/evi/tools/00183a3f-79ba-413d-9f3b-609864268bea",
            "responseStatusCode": 204,
            "pathParameters": {
              "id": "00183a3f-79ba-413d-9f3b-609864268bea"
            },
            "queryParameters": {},
            "headers": {},
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X DELETE https://api.hume.ai/v0/evi/tools/00183a3f-79ba-413d-9f3b-609864268bea \\\n     -H \"X-Hume-Api-Key: <apiKey>\"",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from hume import HumeClient\n\nclient = HumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.empathic_voice.tools.delete_tool(\n    id=\"00183a3f-79ba-413d-9f3b-609864268bea\",\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumeClient } from \"hume\";\n\nconst client = new HumeClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.empathicVoice.tools.deleteTool(\"00183a3f-79ba-413d-9f3b-609864268bea\");\n",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/v0/evi/tools/:id",
            "responseStatusCode": 400,
            "pathParameters": {
              "id": ":id"
            },
            "queryParameters": {},
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "error": "string",
                "message": "string"
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X DELETE https://api.hume.ai/v0/evi/tools/:id \\\n     -H \"X-Hume-Api-Key: <apiKey>\"",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from hume import HumeClient\n\nclient = HumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.empathic_voice.tools.delete_tool(\n    id=\"00183a3f-79ba-413d-9f3b-609864268bea\",\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumeClient } from \"hume\";\n\nconst client = new HumeClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.empathicVoice.tools.deleteTool(\"00183a3f-79ba-413d-9f3b-609864268bea\");\n",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "endpoint_tools.update-tool-name": {
        "id": "endpoint_tools.update-tool-name",
        "namespace": [
          "subpackage_tools"
        ],
        "description": "Updates the name of a **Tool**.\n\nRefer to our [tool use](/docs/empathic-voice-interface-evi/tool-use#function-calling) guide for comprehensive instructions on defining and integrating tools into EVI.",
        "method": "PATCH",
        "path": [
          {
            "type": "literal",
            "value": "/v0/evi/tools/"
          },
          {
            "type": "pathParameter",
            "value": "id"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.hume.ai"
          }
        ],
        "pathParameters": [
          {
            "key": "id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "Identifier for a Tool. Formatted as a UUID."
          }
        ],
        "requests": [
          {
            "contentType": "application/json",
            "body": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "name",
                  "valueShape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  },
                  "description": "Name applied to all versions of a particular Tool."
                }
              ]
            }
          }
        ],
        "responses": [],
        "errors": [
          {
            "description": "Bad Request",
            "name": "Tools Update Tool Name Request Bad Request Error",
            "statusCode": 400,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:ErrorResponse"
              }
            },
            "examples": [
              {
                "responseBody": {
                  "type": "json",
                  "value": {}
                }
              }
            ]
          }
        ],
        "examples": [
          {
            "path": "/v0/evi/tools/:id",
            "responseStatusCode": 200,
            "pathParameters": {
              "id": ":id"
            },
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {
                "name": "string"
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X PATCH https://api.hume.ai/v0/evi/tools/:id \\\n     -H \"X-Hume-Api-Key: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n  \"name\": \"string\"\n}'",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from hume import HumeClient\n\nclient = HumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.empathic_voice.tools.update_tool_name(\n    id=\"00183a3f-79ba-413d-9f3b-609864268bea\",\n    name=\"get_current_temperature\",\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumeClient } from \"hume\";\n\nconst client = new HumeClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.empathicVoice.tools.updateToolName(\"00183a3f-79ba-413d-9f3b-609864268bea\", {\n    name: \"get_current_temperature\"\n});\n",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/v0/evi/tools/:id",
            "responseStatusCode": 400,
            "pathParameters": {
              "id": ":id"
            },
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {
                "name": "string"
              }
            },
            "responseBody": {
              "type": "json",
              "value": {
                "error": "string",
                "message": "string"
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X PATCH https://api.hume.ai/v0/evi/tools/:id \\\n     -H \"X-Hume-Api-Key: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n  \"name\": \"string\"\n}'",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from hume import HumeClient\n\nclient = HumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.empathic_voice.tools.update_tool_name(\n    id=\"00183a3f-79ba-413d-9f3b-609864268bea\",\n    name=\"get_current_temperature\",\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumeClient } from \"hume\";\n\nconst client = new HumeClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.empathicVoice.tools.updateToolName(\"00183a3f-79ba-413d-9f3b-609864268bea\", {\n    name: \"get_current_temperature\"\n});\n",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "endpoint_tools.get-tool-version": {
        "id": "endpoint_tools.get-tool-version",
        "namespace": [
          "subpackage_tools"
        ],
        "description": "Fetches a specified version of a **Tool**.\n\nRefer to our [tool use](/docs/empathic-voice-interface-evi/tool-use#function-calling) guide for comprehensive instructions on defining and integrating tools into EVI.",
        "method": "GET",
        "path": [
          {
            "type": "literal",
            "value": "/v0/evi/tools/"
          },
          {
            "type": "pathParameter",
            "value": "id"
          },
          {
            "type": "literal",
            "value": "/version/"
          },
          {
            "type": "pathParameter",
            "value": "version"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.hume.ai"
          }
        ],
        "pathParameters": [
          {
            "key": "id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "Identifier for a Tool. Formatted as a UUID."
          },
          {
            "key": "version",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            },
            "description": "Version number for a Tool.\n\nTools, Configs, Custom Voices, and Prompts are versioned. This versioning system supports iterative development, allowing you to progressively refine tools and revert to previous versions if needed.\n\nVersion numbers are integer values representing different iterations of the Tool. Each update to the Tool increments its version number."
          }
        ],
        "requests": [],
        "responses": [
          {
            "description": "Success",
            "statusCode": 200,
            "body": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "id",
                    "id": "type_:ReturnUserDefinedTool"
                  }
                }
              }
            }
          }
        ],
        "errors": [
          {
            "description": "Bad Request",
            "name": "Tools Get Tool Version Request Bad Request Error",
            "statusCode": 400,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:ErrorResponse"
              }
            },
            "examples": [
              {
                "responseBody": {
                  "type": "json",
                  "value": {}
                }
              }
            ]
          }
        ],
        "examples": [
          {
            "path": "/v0/evi/tools/00183a3f-79ba-413d-9f3b-609864268bea/version/1",
            "responseStatusCode": 200,
            "pathParameters": {
              "id": "00183a3f-79ba-413d-9f3b-609864268bea",
              "version": 1
            },
            "queryParameters": {},
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "tool_type": "FUNCTION",
                "id": "00183a3f-79ba-413d-9f3b-609864268bea",
                "version": 1,
                "version_type": "FIXED",
                "name": "string",
                "created_on": 1715277014228,
                "modified_on": 1715277602313,
                "parameters": "{ \"type\": \"object\", \"properties\": { \"location\": { \"type\": \"string\", \"description\": \"The city and state, e.g. San Francisco, CA\" }, \"format\": { \"type\": \"string\", \"enum\": [\"celsius\", \"fahrenheit\", \"kelvin\"], \"description\": \"The temperature unit to use. Infer this from the users location.\" } }, \"required\": [\"location\", \"format\"] }",
                "version_description": "Fetches current weather and uses celsius, fahrenheit, or kelvin based on location of user.",
                "fallback_content": "Unable to fetch current weather.",
                "description": "This tool is for getting the current weather."
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl https://api.hume.ai/v0/evi/tools/00183a3f-79ba-413d-9f3b-609864268bea/version/1 \\\n     -H \"X-Hume-Api-Key: <apiKey>\"",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from hume import HumeClient\n\nclient = HumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.empathic_voice.tools.get_tool_version(\n    id=\"00183a3f-79ba-413d-9f3b-609864268bea\",\n    version=1,\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumeClient } from \"hume\";\n\nconst client = new HumeClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.empathicVoice.tools.getToolVersion(\"00183a3f-79ba-413d-9f3b-609864268bea\", 1);\n",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/v0/evi/tools/:id/version/0",
            "responseStatusCode": 400,
            "pathParameters": {
              "id": ":id",
              "version": 0
            },
            "queryParameters": {},
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "error": "string",
                "message": "string"
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl https://api.hume.ai/v0/evi/tools/:id/version/0 \\\n     -H \"X-Hume-Api-Key: <apiKey>\"",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from hume import HumeClient\n\nclient = HumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.empathic_voice.tools.get_tool_version(\n    id=\"00183a3f-79ba-413d-9f3b-609864268bea\",\n    version=1,\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumeClient } from \"hume\";\n\nconst client = new HumeClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.empathicVoice.tools.getToolVersion(\"00183a3f-79ba-413d-9f3b-609864268bea\", 1);\n",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "endpoint_tools.delete-tool-version": {
        "id": "endpoint_tools.delete-tool-version",
        "namespace": [
          "subpackage_tools"
        ],
        "description": "Deletes a specified version of a **Tool**.\n\nRefer to our [tool use](/docs/empathic-voice-interface-evi/tool-use#function-calling) guide for comprehensive instructions on defining and integrating tools into EVI.",
        "method": "DELETE",
        "path": [
          {
            "type": "literal",
            "value": "/v0/evi/tools/"
          },
          {
            "type": "pathParameter",
            "value": "id"
          },
          {
            "type": "literal",
            "value": "/version/"
          },
          {
            "type": "pathParameter",
            "value": "version"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.hume.ai"
          }
        ],
        "pathParameters": [
          {
            "key": "id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "Identifier for a Tool. Formatted as a UUID."
          },
          {
            "key": "version",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            },
            "description": "Version number for a Tool.\n\nTools, Configs, Custom Voices, and Prompts are versioned. This versioning system supports iterative development, allowing you to progressively refine tools and revert to previous versions if needed.\n\nVersion numbers are integer values representing different iterations of the Tool. Each update to the Tool increments its version number."
          }
        ],
        "requests": [],
        "responses": [],
        "errors": [
          {
            "description": "Bad Request",
            "name": "Tools Delete Tool Version Request Bad Request Error",
            "statusCode": 400,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:ErrorResponse"
              }
            },
            "examples": [
              {
                "responseBody": {
                  "type": "json",
                  "value": {}
                }
              }
            ]
          }
        ],
        "examples": [
          {
            "path": "/v0/evi/tools/00183a3f-79ba-413d-9f3b-609864268bea/version/1",
            "responseStatusCode": 204,
            "pathParameters": {
              "id": "00183a3f-79ba-413d-9f3b-609864268bea",
              "version": 1
            },
            "queryParameters": {},
            "headers": {},
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X DELETE https://api.hume.ai/v0/evi/tools/00183a3f-79ba-413d-9f3b-609864268bea/version/1 \\\n     -H \"X-Hume-Api-Key: <apiKey>\"",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from hume import HumeClient\n\nclient = HumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.empathic_voice.tools.delete_tool_version(\n    id=\"00183a3f-79ba-413d-9f3b-609864268bea\",\n    version=1,\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumeClient } from \"hume\";\n\nconst client = new HumeClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.empathicVoice.tools.deleteToolVersion(\"00183a3f-79ba-413d-9f3b-609864268bea\", 1);\n",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/v0/evi/tools/:id/version/0",
            "responseStatusCode": 400,
            "pathParameters": {
              "id": ":id",
              "version": 0
            },
            "queryParameters": {},
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "error": "string",
                "message": "string"
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X DELETE https://api.hume.ai/v0/evi/tools/:id/version/0 \\\n     -H \"X-Hume-Api-Key: <apiKey>\"",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from hume import HumeClient\n\nclient = HumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.empathic_voice.tools.delete_tool_version(\n    id=\"00183a3f-79ba-413d-9f3b-609864268bea\",\n    version=1,\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumeClient } from \"hume\";\n\nconst client = new HumeClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.empathicVoice.tools.deleteToolVersion(\"00183a3f-79ba-413d-9f3b-609864268bea\", 1);\n",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "endpoint_tools.update-tool-description": {
        "id": "endpoint_tools.update-tool-description",
        "namespace": [
          "subpackage_tools"
        ],
        "description": "Updates the description of a specified **Tool** version.\n\nRefer to our [tool use](/docs/empathic-voice-interface-evi/tool-use#function-calling) guide for comprehensive instructions on defining and integrating tools into EVI.",
        "method": "PATCH",
        "path": [
          {
            "type": "literal",
            "value": "/v0/evi/tools/"
          },
          {
            "type": "pathParameter",
            "value": "id"
          },
          {
            "type": "literal",
            "value": "/version/"
          },
          {
            "type": "pathParameter",
            "value": "version"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.hume.ai"
          }
        ],
        "pathParameters": [
          {
            "key": "id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "Identifier for a Tool. Formatted as a UUID."
          },
          {
            "key": "version",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            },
            "description": "Version number for a Tool.\n\nTools, Configs, Custom Voices, and Prompts are versioned. This versioning system supports iterative development, allowing you to progressively refine tools and revert to previous versions if needed.\n\nVersion numbers are integer values representing different iterations of the Tool. Each update to the Tool increments its version number."
          }
        ],
        "requests": [
          {
            "contentType": "application/json",
            "body": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "version_description",
                  "valueShape": {
                    "type": "alias",
                    "value": {
                      "type": "optional",
                      "shape": {
                        "type": "alias",
                        "value": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "description": "An optional description of the Tool version."
                }
              ]
            }
          }
        ],
        "responses": [
          {
            "description": "Success",
            "statusCode": 200,
            "body": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "id",
                    "id": "type_:ReturnUserDefinedTool"
                  }
                }
              }
            }
          }
        ],
        "errors": [
          {
            "description": "Bad Request",
            "name": "Tools Update Tool Description Request Bad Request Error",
            "statusCode": 400,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:ErrorResponse"
              }
            },
            "examples": [
              {
                "responseBody": {
                  "type": "json",
                  "value": {}
                }
              }
            ]
          }
        ],
        "examples": [
          {
            "path": "/v0/evi/tools/00183a3f-79ba-413d-9f3b-609864268bea/version/1",
            "responseStatusCode": 200,
            "pathParameters": {
              "id": "00183a3f-79ba-413d-9f3b-609864268bea",
              "version": 1
            },
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {
                "version_description": "Fetches current temperature, precipitation, wind speed, AQI, and other weather conditions. Uses Celsius, Fahrenheit, or kelvin depending on user's region."
              }
            },
            "responseBody": {
              "type": "json",
              "value": {
                "tool_type": "FUNCTION",
                "id": "00183a3f-79ba-413d-9f3b-609864268bea",
                "version": 1,
                "version_type": "FIXED",
                "name": "string",
                "created_on": 1715277014228,
                "modified_on": 1715277602313,
                "parameters": "{ \"type\": \"object\", \"properties\": { \"location\": { \"type\": \"string\", \"description\": \"The city and state, e.g. San Francisco, CA\" }, \"format\": { \"type\": \"string\", \"enum\": [\"celsius\", \"fahrenheit\", \"kelvin\"], \"description\": \"The temperature unit to use. Infer this from the users location.\" } }, \"required\": [\"location\", \"format\"] }",
                "version_description": "Fetches current temperature, precipitation, wind speed, AQI, and other weather conditions. Uses Celsius, Fahrenheit, or kelvin depending on user's region.",
                "fallback_content": "Unable to fetch current weather.",
                "description": "This tool is for getting the current weather."
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X PATCH https://api.hume.ai/v0/evi/tools/00183a3f-79ba-413d-9f3b-609864268bea/version/1 \\\n     -H \"X-Hume-Api-Key: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n  \"version_description\": \"Fetches current temperature, precipitation, wind speed, AQI, and other weather conditions. Uses Celsius, Fahrenheit, or kelvin depending on user\\'s region.\"\n}'",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from hume import HumeClient\n\nclient = HumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.empathic_voice.tools.update_tool_description(\n    id=\"00183a3f-79ba-413d-9f3b-609864268bea\",\n    version=1,\n    version_description=\"Fetches current temperature, precipitation, wind speed, AQI, and other weather conditions. Uses Celsius, Fahrenheit, or kelvin depending on user's region.\",\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumeClient } from \"hume\";\n\nconst client = new HumeClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.empathicVoice.tools.updateToolDescription(\"00183a3f-79ba-413d-9f3b-609864268bea\", 1, {\n    versionDescription: \"Fetches current temperature, precipitation, wind speed, AQI, and other weather conditions. Uses Celsius, Fahrenheit, or kelvin depending on user's region.\"\n});\n",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/v0/evi/tools/:id/version/0",
            "responseStatusCode": 400,
            "pathParameters": {
              "id": ":id",
              "version": 0
            },
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {}
            },
            "responseBody": {
              "type": "json",
              "value": {
                "error": "string",
                "message": "string"
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X PATCH https://api.hume.ai/v0/evi/tools/:id/version/0 \\\n     -H \"X-Hume-Api-Key: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{}'",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from hume import HumeClient\n\nclient = HumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.empathic_voice.tools.update_tool_description(\n    id=\"00183a3f-79ba-413d-9f3b-609864268bea\",\n    version=1,\n    version_description=\"Fetches current temperature, precipitation, wind speed, AQI, and other weather conditions. Uses Celsius, Fahrenheit, or kelvin depending on user's region.\",\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumeClient } from \"hume\";\n\nconst client = new HumeClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.empathicVoice.tools.updateToolDescription(\"00183a3f-79ba-413d-9f3b-609864268bea\", 1, {\n    versionDescription: \"Fetches current temperature, precipitation, wind speed, AQI, and other weather conditions. Uses Celsius, Fahrenheit, or kelvin depending on user's region.\"\n});\n",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "endpoint_prompts.list-prompts": {
        "id": "endpoint_prompts.list-prompts",
        "namespace": [
          "subpackage_prompts"
        ],
        "description": "Fetches a paginated list of **Prompts**.\n\nSee our [prompting guide](/docs/empathic-voice-interface-evi/phone-calling) for tips on crafting your system prompt.",
        "method": "GET",
        "path": [
          {
            "type": "literal",
            "value": "/v0/evi/prompts"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.hume.ai"
          }
        ],
        "queryParameters": [
          {
            "key": "page_number",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                }
              }
            },
            "description": "Specifies the page number to retrieve, enabling pagination.\n\nThis parameter uses zero-based indexing. For example, setting `page_number` to 0 retrieves the first page of results (items 0-9 if `page_size` is 10), setting `page_number` to 1 retrieves the second page (items 10-19), and so on. Defaults to 0, which retrieves the first page."
          },
          {
            "key": "page_size",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                }
              }
            },
            "description": "Specifies the maximum number of results to include per page, enabling pagination. The value must be between 1 and 100, inclusive.\n\nFor example, if `page_size` is set to 10, each page will include up to 10 items. Defaults to 10."
          },
          {
            "key": "restrict_to_most_recent",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "boolean",
                      "default": false
                    }
                  }
                }
              }
            },
            "description": "Only include the most recent version of each prompt in the list."
          },
          {
            "key": "name",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "description": "Filter to only include prompts with name."
          }
        ],
        "requests": [],
        "responses": [
          {
            "description": "Success",
            "statusCode": 200,
            "body": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:ReturnPagedPrompts"
              }
            }
          }
        ],
        "errors": [
          {
            "description": "Bad Request",
            "name": "Prompts List Prompts Request Bad Request Error",
            "statusCode": 400,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:ErrorResponse"
              }
            },
            "examples": [
              {
                "responseBody": {
                  "type": "json",
                  "value": {}
                }
              }
            ]
          }
        ],
        "examples": [
          {
            "path": "/v0/evi/prompts",
            "responseStatusCode": 200,
            "pathParameters": {},
            "queryParameters": {
              "page_number": 0,
              "page_size": 2
            },
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "page_number": 0,
                "page_size": 2,
                "total_pages": 1,
                "prompts_page": [
                  {
                    "id": "af699d45-2985-42cc-91b9-af9e5da3bac5",
                    "version": 0,
                    "version_type": "FIXED",
                    "name": "Weather Assistant Prompt",
                    "created_on": 1715267200693,
                    "modified_on": 1715267200693,
                    "text": "<role>You are an AI weather assistant providing users with accurate and up-to-date weather information. Respond to user queries concisely and clearly. Use simple language and avoid technical jargon. Provide temperature, precipitation, wind conditions, and any weather alerts. Include helpful tips if severe weather is expected.</role>",
                    "version_description": ""
                  },
                  {
                    "id": "616b2b4c-a096-4445-9c23-64058b564fc2",
                    "version": 0,
                    "version_type": "FIXED",
                    "name": "Web Search Assistant Prompt",
                    "created_on": 1715267200693,
                    "modified_on": 1715267200693,
                    "text": "<role>You are an AI web search assistant designed to help users find accurate and relevant information on the web. Respond to user queries promptly, using the built-in web search tool to retrieve up-to-date results. Present information clearly and concisely, summarizing key points where necessary. Use simple language and avoid technical jargon. If needed, provide helpful tips for refining search queries to obtain better results.</role>",
                    "version_description": ""
                  }
                ]
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -G https://api.hume.ai/v0/evi/prompts \\\n     -H \"X-Hume-Api-Key: <apiKey>\" \\\n     -d page_number=0 \\\n     -d page_size=2",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from hume import HumeClient\n\nclient = HumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\nresponse = client.empathic_voice.prompts.list_prompts(\n    page_number=0,\n    page_size=2,\n)\nfor item in response:\n    yield item\n# alternatively, you can paginate page-by-page\nfor page in response.iter_pages():\n    yield page\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumeClient } from \"hume\";\n\nconst client = new HumeClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.empathicVoice.prompts.listPrompts({\n    pageNumber: 0,\n    pageSize: 2\n});\n",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/v0/evi/prompts",
            "responseStatusCode": 400,
            "pathParameters": {},
            "queryParameters": {
              "page_number": 0,
              "page_size": 0
            },
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "error": "string",
                "message": "string"
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -G https://api.hume.ai/v0/evi/prompts \\\n     -H \"X-Hume-Api-Key: <apiKey>\" \\\n     -d page_number=0 \\\n     -d page_size=0",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from hume import HumeClient\n\nclient = HumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\nresponse = client.empathic_voice.prompts.list_prompts(\n    page_number=0,\n    page_size=2,\n)\nfor item in response:\n    yield item\n# alternatively, you can paginate page-by-page\nfor page in response.iter_pages():\n    yield page\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumeClient } from \"hume\";\n\nconst client = new HumeClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.empathicVoice.prompts.listPrompts({\n    pageNumber: 0,\n    pageSize: 2\n});\n",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "endpoint_prompts.create-prompt": {
        "id": "endpoint_prompts.create-prompt",
        "namespace": [
          "subpackage_prompts"
        ],
        "description": "Creates a **Prompt** that can be added to an [EVI configuration](/reference/empathic-voice-interface-evi/configs/create-config).\n\nSee our [prompting guide](/docs/empathic-voice-interface-evi/phone-calling) for tips on crafting your system prompt.",
        "method": "POST",
        "path": [
          {
            "type": "literal",
            "value": "/v0/evi/prompts"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.hume.ai"
          }
        ],
        "requests": [
          {
            "contentType": "application/json",
            "body": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "name",
                  "valueShape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  },
                  "description": "Name applied to all versions of a particular Prompt."
                },
                {
                  "key": "version_description",
                  "valueShape": {
                    "type": "alias",
                    "value": {
                      "type": "optional",
                      "shape": {
                        "type": "alias",
                        "value": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "description": "An optional description of the Prompt version."
                },
                {
                  "key": "text",
                  "valueShape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  },
                  "description": "Instructions used to shape EVI’s behavior, responses, and style.\n\nYou can use the Prompt to define a specific goal or role for EVI, specifying how it should act or what it should focus on during the conversation. For example, EVI can be instructed to act as a customer support representative, a fitness coach, or a travel advisor, each with its own set of behaviors and response styles.\n\nFor help writing a system prompt, see our [Prompting Guide](/docs/empathic-voice-interface-evi/prompting)."
                }
              ]
            }
          }
        ],
        "responses": [
          {
            "description": "Created",
            "statusCode": 200,
            "body": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "id",
                    "id": "type_:ReturnPrompt"
                  }
                }
              }
            }
          }
        ],
        "errors": [
          {
            "description": "Bad Request",
            "name": "Prompts Create Prompt Request Bad Request Error",
            "statusCode": 400,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:ErrorResponse"
              }
            },
            "examples": [
              {
                "responseBody": {
                  "type": "json",
                  "value": {}
                }
              }
            ]
          }
        ],
        "examples": [
          {
            "path": "/v0/evi/prompts",
            "responseStatusCode": 200,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {
                "name": "Weather Assistant Prompt",
                "text": "<role>You are an AI weather assistant providing users with accurate and up-to-date weather information. Respond to user queries concisely and clearly. Use simple language and avoid technical jargon. Provide temperature, precipitation, wind conditions, and any weather alerts. Include helpful tips if severe weather is expected.</role>"
              }
            },
            "responseBody": {
              "type": "json",
              "value": {
                "id": "af699d45-2985-42cc-91b9-af9e5da3bac5",
                "version": 0,
                "version_type": "FIXED",
                "name": "Weather Assistant Prompt",
                "created_on": 1722633247488,
                "modified_on": 1722633247488,
                "text": "<role>You are an AI weather assistant providing users with accurate and up-to-date weather information. Respond to user queries concisely and clearly. Use simple language and avoid technical jargon. Provide temperature, precipitation, wind conditions, and any weather alerts. Include helpful tips if severe weather is expected.</role>"
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://api.hume.ai/v0/evi/prompts \\\n     -H \"X-Hume-Api-Key: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n  \"name\": \"Weather Assistant Prompt\",\n  \"text\": \"<role>You are an AI weather assistant providing users with accurate and up-to-date weather information. Respond to user queries concisely and clearly. Use simple language and avoid technical jargon. Provide temperature, precipitation, wind conditions, and any weather alerts. Include helpful tips if severe weather is expected.</role>\"\n}'",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from hume import HumeClient\n\nclient = HumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.empathic_voice.prompts.create_prompt(\n    name=\"Weather Assistant Prompt\",\n    text=\"<role>You are an AI weather assistant providing users with accurate and up-to-date weather information. Respond to user queries concisely and clearly. Use simple language and avoid technical jargon. Provide temperature, precipitation, wind conditions, and any weather alerts. Include helpful tips if severe weather is expected.</role>\",\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumeClient } from \"hume\";\n\nconst client = new HumeClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.empathicVoice.prompts.createPrompt({\n    name: \"Weather Assistant Prompt\",\n    text: \"<role>You are an AI weather assistant providing users with accurate and up-to-date weather information. Respond to user queries concisely and clearly. Use simple language and avoid technical jargon. Provide temperature, precipitation, wind conditions, and any weather alerts. Include helpful tips if severe weather is expected.</role>\"\n});\n",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/v0/evi/prompts",
            "responseStatusCode": 400,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {
                "name": "string",
                "text": "string"
              }
            },
            "responseBody": {
              "type": "json",
              "value": {
                "error": "string",
                "message": "string"
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://api.hume.ai/v0/evi/prompts \\\n     -H \"X-Hume-Api-Key: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n  \"name\": \"string\",\n  \"text\": \"string\"\n}'",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from hume import HumeClient\n\nclient = HumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.empathic_voice.prompts.create_prompt(\n    name=\"Weather Assistant Prompt\",\n    text=\"<role>You are an AI weather assistant providing users with accurate and up-to-date weather information. Respond to user queries concisely and clearly. Use simple language and avoid technical jargon. Provide temperature, precipitation, wind conditions, and any weather alerts. Include helpful tips if severe weather is expected.</role>\",\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumeClient } from \"hume\";\n\nconst client = new HumeClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.empathicVoice.prompts.createPrompt({\n    name: \"Weather Assistant Prompt\",\n    text: \"<role>You are an AI weather assistant providing users with accurate and up-to-date weather information. Respond to user queries concisely and clearly. Use simple language and avoid technical jargon. Provide temperature, precipitation, wind conditions, and any weather alerts. Include helpful tips if severe weather is expected.</role>\"\n});\n",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "endpoint_prompts.list-prompt-versions": {
        "id": "endpoint_prompts.list-prompt-versions",
        "namespace": [
          "subpackage_prompts"
        ],
        "description": "Fetches a list of a **Prompt's** versions.\n\nSee our [prompting guide](/docs/empathic-voice-interface-evi/phone-calling) for tips on crafting your system prompt.",
        "method": "GET",
        "path": [
          {
            "type": "literal",
            "value": "/v0/evi/prompts/"
          },
          {
            "type": "pathParameter",
            "value": "id"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.hume.ai"
          }
        ],
        "pathParameters": [
          {
            "key": "id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "Identifier for a Prompt. Formatted as a UUID."
          }
        ],
        "queryParameters": [
          {
            "key": "page_number",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                }
              }
            },
            "description": "Specifies the page number to retrieve, enabling pagination.\n\nThis parameter uses zero-based indexing. For example, setting `page_number` to 0 retrieves the first page of results (items 0-9 if `page_size` is 10), setting `page_number` to 1 retrieves the second page (items 10-19), and so on. Defaults to 0, which retrieves the first page."
          },
          {
            "key": "page_size",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                }
              }
            },
            "description": "Specifies the maximum number of results to include per page, enabling pagination. The value must be between 1 and 100, inclusive.\n\nFor example, if `page_size` is set to 10, each page will include up to 10 items. Defaults to 10."
          },
          {
            "key": "restrict_to_most_recent",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "boolean",
                      "default": false
                    }
                  }
                }
              }
            },
            "description": "By default, `restrict_to_most_recent` is set to true, returning only the latest version of each prompt. To include all versions of each prompt in the list, set `restrict_to_most_recent` to false."
          }
        ],
        "requests": [],
        "responses": [
          {
            "description": "Success",
            "statusCode": 200,
            "body": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:ReturnPagedPrompts"
              }
            }
          }
        ],
        "errors": [
          {
            "description": "Bad Request",
            "name": "Prompts List Prompt Versions Request Bad Request Error",
            "statusCode": 400,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:ErrorResponse"
              }
            },
            "examples": [
              {
                "responseBody": {
                  "type": "json",
                  "value": {}
                }
              }
            ]
          }
        ],
        "examples": [
          {
            "path": "/v0/evi/prompts/af699d45-2985-42cc-91b9-af9e5da3bac5",
            "responseStatusCode": 200,
            "pathParameters": {
              "id": "af699d45-2985-42cc-91b9-af9e5da3bac5"
            },
            "queryParameters": {},
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "page_number": 0,
                "page_size": 10,
                "total_pages": 1,
                "prompts_page": [
                  {
                    "id": "af699d45-2985-42cc-91b9-af9e5da3bac5",
                    "version": 0,
                    "version_type": "FIXED",
                    "name": "Weather Assistant Prompt",
                    "created_on": 1722633247488,
                    "modified_on": 1722633247488,
                    "text": "<role>You are an AI weather assistant providing users with accurate and up-to-date weather information. Respond to user queries concisely and clearly. Use simple language and avoid technical jargon. Provide temperature, precipitation, wind conditions, and any weather alerts. Include helpful tips if severe weather is expected.</role>",
                    "version_description": ""
                  }
                ]
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl https://api.hume.ai/v0/evi/prompts/af699d45-2985-42cc-91b9-af9e5da3bac5 \\\n     -H \"X-Hume-Api-Key: <apiKey>\"",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from hume import HumeClient\n\nclient = HumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.empathic_voice.prompts.list_prompt_versions(\n    id=\"af699d45-2985-42cc-91b9-af9e5da3bac5\",\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumeClient } from \"hume\";\n\nconst client = new HumeClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.empathicVoice.prompts.listPromptVersions(\"af699d45-2985-42cc-91b9-af9e5da3bac5\");\n",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/v0/evi/prompts/:id",
            "responseStatusCode": 400,
            "pathParameters": {
              "id": ":id"
            },
            "queryParameters": {
              "page_number": 0,
              "page_size": 0
            },
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "error": "string",
                "message": "string"
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -G https://api.hume.ai/v0/evi/prompts/:id \\\n     -H \"X-Hume-Api-Key: <apiKey>\" \\\n     -d page_number=0 \\\n     -d page_size=0",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from hume import HumeClient\n\nclient = HumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.empathic_voice.prompts.list_prompt_versions(\n    id=\"af699d45-2985-42cc-91b9-af9e5da3bac5\",\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumeClient } from \"hume\";\n\nconst client = new HumeClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.empathicVoice.prompts.listPromptVersions(\"af699d45-2985-42cc-91b9-af9e5da3bac5\");\n",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "endpoint_prompts.create-prompt-verison": {
        "id": "endpoint_prompts.create-prompt-verison",
        "namespace": [
          "subpackage_prompts"
        ],
        "description": "Updates a **Prompt** by creating a new version of the **Prompt**.\n\nSee our [prompting guide](/docs/empathic-voice-interface-evi/phone-calling) for tips on crafting your system prompt.",
        "method": "POST",
        "path": [
          {
            "type": "literal",
            "value": "/v0/evi/prompts/"
          },
          {
            "type": "pathParameter",
            "value": "id"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.hume.ai"
          }
        ],
        "pathParameters": [
          {
            "key": "id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "Identifier for a Prompt. Formatted as a UUID."
          }
        ],
        "requests": [
          {
            "contentType": "application/json",
            "body": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "version_description",
                  "valueShape": {
                    "type": "alias",
                    "value": {
                      "type": "optional",
                      "shape": {
                        "type": "alias",
                        "value": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "description": "An optional description of the Prompt version."
                },
                {
                  "key": "text",
                  "valueShape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  },
                  "description": "Instructions used to shape EVI’s behavior, responses, and style for this version of the Prompt.\n\nYou can use the Prompt to define a specific goal or role for EVI, specifying how it should act or what it should focus on during the conversation. For example, EVI can be instructed to act as a customer support representative, a fitness coach, or a travel advisor, each with its own set of behaviors and response styles.\n\nFor help writing a system prompt, see our [Prompting Guide](/docs/empathic-voice-interface-evi/prompting)."
                }
              ]
            }
          }
        ],
        "responses": [
          {
            "description": "Created",
            "statusCode": 200,
            "body": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "id",
                    "id": "type_:ReturnPrompt"
                  }
                }
              }
            }
          }
        ],
        "errors": [
          {
            "description": "Bad Request",
            "name": "Prompts Create Prompt Verison Request Bad Request Error",
            "statusCode": 400,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:ErrorResponse"
              }
            },
            "examples": [
              {
                "responseBody": {
                  "type": "json",
                  "value": {}
                }
              }
            ]
          }
        ],
        "examples": [
          {
            "path": "/v0/evi/prompts/af699d45-2985-42cc-91b9-af9e5da3bac5",
            "responseStatusCode": 200,
            "pathParameters": {
              "id": "af699d45-2985-42cc-91b9-af9e5da3bac5"
            },
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {
                "text": "<role>You are an updated version of an AI weather assistant providing users with accurate and up-to-date weather information. Respond to user queries concisely and clearly. Use simple language and avoid technical jargon. Provide temperature, precipitation, wind conditions, and any weather alerts. Include helpful tips if severe weather is expected.</role>",
                "version_description": "This is an updated version of the Weather Assistant Prompt."
              }
            },
            "responseBody": {
              "type": "json",
              "value": {
                "id": "af699d45-2985-42cc-91b9-af9e5da3bac5",
                "version": 1,
                "version_type": "FIXED",
                "name": "Weather Assistant Prompt",
                "created_on": 1722633247488,
                "modified_on": 1722635140150,
                "text": "<role>You are an updated version of an AI weather assistant providing users with accurate and up-to-date weather information. Respond to user queries concisely and clearly. Use simple language and avoid technical jargon. Provide temperature, precipitation, wind conditions, and any weather alerts. Include helpful tips if severe weather is expected.</role>",
                "version_description": "This is an updated version of the Weather Assistant Prompt."
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://api.hume.ai/v0/evi/prompts/af699d45-2985-42cc-91b9-af9e5da3bac5 \\\n     -H \"X-Hume-Api-Key: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n  \"text\": \"<role>You are an updated version of an AI weather assistant providing users with accurate and up-to-date weather information. Respond to user queries concisely and clearly. Use simple language and avoid technical jargon. Provide temperature, precipitation, wind conditions, and any weather alerts. Include helpful tips if severe weather is expected.</role>\",\n  \"version_description\": \"This is an updated version of the Weather Assistant Prompt.\"\n}'",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from hume import HumeClient\n\nclient = HumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.empathic_voice.prompts.create_prompt_verison(\n    id=\"af699d45-2985-42cc-91b9-af9e5da3bac5\",\n    text=\"<role>You are an updated version of an AI weather assistant providing users with accurate and up-to-date weather information. Respond to user queries concisely and clearly. Use simple language and avoid technical jargon. Provide temperature, precipitation, wind conditions, and any weather alerts. Include helpful tips if severe weather is expected.</role>\",\n    version_description=\"This is an updated version of the Weather Assistant Prompt.\",\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumeClient } from \"hume\";\n\nconst client = new HumeClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.empathicVoice.prompts.createPromptVerison(\"af699d45-2985-42cc-91b9-af9e5da3bac5\", {\n    text: \"<role>You are an updated version of an AI weather assistant providing users with accurate and up-to-date weather information. Respond to user queries concisely and clearly. Use simple language and avoid technical jargon. Provide temperature, precipitation, wind conditions, and any weather alerts. Include helpful tips if severe weather is expected.</role>\",\n    versionDescription: \"This is an updated version of the Weather Assistant Prompt.\"\n});\n",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/v0/evi/prompts/:id",
            "responseStatusCode": 400,
            "pathParameters": {
              "id": ":id"
            },
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {
                "text": "string"
              }
            },
            "responseBody": {
              "type": "json",
              "value": {
                "error": "string",
                "message": "string"
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://api.hume.ai/v0/evi/prompts/:id \\\n     -H \"X-Hume-Api-Key: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n  \"text\": \"string\"\n}'",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from hume import HumeClient\n\nclient = HumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.empathic_voice.prompts.create_prompt_verison(\n    id=\"af699d45-2985-42cc-91b9-af9e5da3bac5\",\n    text=\"<role>You are an updated version of an AI weather assistant providing users with accurate and up-to-date weather information. Respond to user queries concisely and clearly. Use simple language and avoid technical jargon. Provide temperature, precipitation, wind conditions, and any weather alerts. Include helpful tips if severe weather is expected.</role>\",\n    version_description=\"This is an updated version of the Weather Assistant Prompt.\",\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumeClient } from \"hume\";\n\nconst client = new HumeClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.empathicVoice.prompts.createPromptVerison(\"af699d45-2985-42cc-91b9-af9e5da3bac5\", {\n    text: \"<role>You are an updated version of an AI weather assistant providing users with accurate and up-to-date weather information. Respond to user queries concisely and clearly. Use simple language and avoid technical jargon. Provide temperature, precipitation, wind conditions, and any weather alerts. Include helpful tips if severe weather is expected.</role>\",\n    versionDescription: \"This is an updated version of the Weather Assistant Prompt.\"\n});\n",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "endpoint_prompts.delete-prompt": {
        "id": "endpoint_prompts.delete-prompt",
        "namespace": [
          "subpackage_prompts"
        ],
        "description": "Deletes a **Prompt** and its versions.\n\nSee our [prompting guide](/docs/empathic-voice-interface-evi/phone-calling) for tips on crafting your system prompt.",
        "method": "DELETE",
        "path": [
          {
            "type": "literal",
            "value": "/v0/evi/prompts/"
          },
          {
            "type": "pathParameter",
            "value": "id"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.hume.ai"
          }
        ],
        "pathParameters": [
          {
            "key": "id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "Identifier for a Prompt. Formatted as a UUID."
          }
        ],
        "requests": [],
        "responses": [],
        "errors": [
          {
            "description": "Bad Request",
            "name": "Prompts Delete Prompt Request Bad Request Error",
            "statusCode": 400,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:ErrorResponse"
              }
            },
            "examples": [
              {
                "responseBody": {
                  "type": "json",
                  "value": {}
                }
              }
            ]
          }
        ],
        "examples": [
          {
            "path": "/v0/evi/prompts/af699d45-2985-42cc-91b9-af9e5da3bac5",
            "responseStatusCode": 204,
            "pathParameters": {
              "id": "af699d45-2985-42cc-91b9-af9e5da3bac5"
            },
            "queryParameters": {},
            "headers": {},
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X DELETE https://api.hume.ai/v0/evi/prompts/af699d45-2985-42cc-91b9-af9e5da3bac5 \\\n     -H \"X-Hume-Api-Key: <apiKey>\"",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from hume import HumeClient\n\nclient = HumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.empathic_voice.prompts.delete_prompt(\n    id=\"af699d45-2985-42cc-91b9-af9e5da3bac5\",\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumeClient } from \"hume\";\n\nconst client = new HumeClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.empathicVoice.prompts.deletePrompt(\"af699d45-2985-42cc-91b9-af9e5da3bac5\");\n",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/v0/evi/prompts/:id",
            "responseStatusCode": 400,
            "pathParameters": {
              "id": ":id"
            },
            "queryParameters": {},
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "error": "string",
                "message": "string"
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X DELETE https://api.hume.ai/v0/evi/prompts/:id \\\n     -H \"X-Hume-Api-Key: <apiKey>\"",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from hume import HumeClient\n\nclient = HumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.empathic_voice.prompts.delete_prompt(\n    id=\"af699d45-2985-42cc-91b9-af9e5da3bac5\",\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumeClient } from \"hume\";\n\nconst client = new HumeClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.empathicVoice.prompts.deletePrompt(\"af699d45-2985-42cc-91b9-af9e5da3bac5\");\n",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "endpoint_prompts.update-prompt-name": {
        "id": "endpoint_prompts.update-prompt-name",
        "namespace": [
          "subpackage_prompts"
        ],
        "description": "Updates the name of a **Prompt**.\n\nSee our [prompting guide](/docs/empathic-voice-interface-evi/phone-calling) for tips on crafting your system prompt.",
        "method": "PATCH",
        "path": [
          {
            "type": "literal",
            "value": "/v0/evi/prompts/"
          },
          {
            "type": "pathParameter",
            "value": "id"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.hume.ai"
          }
        ],
        "pathParameters": [
          {
            "key": "id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "Identifier for a Prompt. Formatted as a UUID."
          }
        ],
        "requests": [
          {
            "contentType": "application/json",
            "body": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "name",
                  "valueShape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  },
                  "description": "Name applied to all versions of a particular Prompt."
                }
              ]
            }
          }
        ],
        "responses": [],
        "errors": [
          {
            "description": "Bad Request",
            "name": "Prompts Update Prompt Name Request Bad Request Error",
            "statusCode": 400,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:ErrorResponse"
              }
            },
            "examples": [
              {
                "responseBody": {
                  "type": "json",
                  "value": {}
                }
              }
            ]
          }
        ],
        "examples": [
          {
            "path": "/v0/evi/prompts/:id",
            "responseStatusCode": 200,
            "pathParameters": {
              "id": ":id"
            },
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {
                "name": "string"
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X PATCH https://api.hume.ai/v0/evi/prompts/:id \\\n     -H \"X-Hume-Api-Key: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n  \"name\": \"string\"\n}'",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from hume import HumeClient\n\nclient = HumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.empathic_voice.prompts.update_prompt_name(\n    id=\"af699d45-2985-42cc-91b9-af9e5da3bac5\",\n    name=\"Updated Weather Assistant Prompt Name\",\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumeClient } from \"hume\";\n\nconst client = new HumeClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.empathicVoice.prompts.updatePromptName(\"af699d45-2985-42cc-91b9-af9e5da3bac5\", {\n    name: \"Updated Weather Assistant Prompt Name\"\n});\n",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/v0/evi/prompts/:id",
            "responseStatusCode": 400,
            "pathParameters": {
              "id": ":id"
            },
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {
                "name": "string"
              }
            },
            "responseBody": {
              "type": "json",
              "value": {
                "error": "string",
                "message": "string"
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X PATCH https://api.hume.ai/v0/evi/prompts/:id \\\n     -H \"X-Hume-Api-Key: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n  \"name\": \"string\"\n}'",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from hume import HumeClient\n\nclient = HumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.empathic_voice.prompts.update_prompt_name(\n    id=\"af699d45-2985-42cc-91b9-af9e5da3bac5\",\n    name=\"Updated Weather Assistant Prompt Name\",\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumeClient } from \"hume\";\n\nconst client = new HumeClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.empathicVoice.prompts.updatePromptName(\"af699d45-2985-42cc-91b9-af9e5da3bac5\", {\n    name: \"Updated Weather Assistant Prompt Name\"\n});\n",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "endpoint_prompts.get-prompt-version": {
        "id": "endpoint_prompts.get-prompt-version",
        "namespace": [
          "subpackage_prompts"
        ],
        "description": "Fetches a specified version of a **Prompt**.\n\nSee our [prompting guide](/docs/empathic-voice-interface-evi/phone-calling) for tips on crafting your system prompt.",
        "method": "GET",
        "path": [
          {
            "type": "literal",
            "value": "/v0/evi/prompts/"
          },
          {
            "type": "pathParameter",
            "value": "id"
          },
          {
            "type": "literal",
            "value": "/version/"
          },
          {
            "type": "pathParameter",
            "value": "version"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.hume.ai"
          }
        ],
        "pathParameters": [
          {
            "key": "id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "Identifier for a Prompt. Formatted as a UUID."
          },
          {
            "key": "version",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            },
            "description": "Version number for a Prompt.\n\nPrompts, Configs, Custom Voices, and Tools are versioned. This versioning system supports iterative development, allowing you to progressively refine prompts and revert to previous versions if needed.\n\nVersion numbers are integer values representing different iterations of the Prompt. Each update to the Prompt increments its version number."
          }
        ],
        "requests": [],
        "responses": [
          {
            "description": "Success",
            "statusCode": 200,
            "body": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "id",
                    "id": "type_:ReturnPrompt"
                  }
                }
              }
            }
          }
        ],
        "errors": [
          {
            "description": "Bad Request",
            "name": "Prompts Get Prompt Version Request Bad Request Error",
            "statusCode": 400,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:ErrorResponse"
              }
            },
            "examples": [
              {
                "responseBody": {
                  "type": "json",
                  "value": {}
                }
              }
            ]
          }
        ],
        "examples": [
          {
            "path": "/v0/evi/prompts/af699d45-2985-42cc-91b9-af9e5da3bac5/version/0",
            "responseStatusCode": 200,
            "pathParameters": {
              "id": "af699d45-2985-42cc-91b9-af9e5da3bac5",
              "version": 0
            },
            "queryParameters": {},
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "id": "af699d45-2985-42cc-91b9-af9e5da3bac5",
                "version": 0,
                "version_type": "FIXED",
                "name": "Weather Assistant Prompt",
                "created_on": 1722633247488,
                "modified_on": 1722633247488,
                "text": "<role>You are an AI weather assistant providing users with accurate and up-to-date weather information. Respond to user queries concisely and clearly. Use simple language and avoid technical jargon. Provide temperature, precipitation, wind conditions, and any weather alerts. Include helpful tips if severe weather is expected.</role>",
                "version_description": ""
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl https://api.hume.ai/v0/evi/prompts/af699d45-2985-42cc-91b9-af9e5da3bac5/version/0 \\\n     -H \"X-Hume-Api-Key: <apiKey>\"",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from hume import HumeClient\n\nclient = HumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.empathic_voice.prompts.get_prompt_version(\n    id=\"af699d45-2985-42cc-91b9-af9e5da3bac5\",\n    version=0,\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumeClient } from \"hume\";\n\nconst client = new HumeClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.empathicVoice.prompts.getPromptVersion(\"af699d45-2985-42cc-91b9-af9e5da3bac5\", 0);\n",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/v0/evi/prompts/:id/version/0",
            "responseStatusCode": 400,
            "pathParameters": {
              "id": ":id",
              "version": 0
            },
            "queryParameters": {},
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "error": "string",
                "message": "string"
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl https://api.hume.ai/v0/evi/prompts/:id/version/0 \\\n     -H \"X-Hume-Api-Key: <apiKey>\"",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from hume import HumeClient\n\nclient = HumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.empathic_voice.prompts.get_prompt_version(\n    id=\"af699d45-2985-42cc-91b9-af9e5da3bac5\",\n    version=0,\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumeClient } from \"hume\";\n\nconst client = new HumeClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.empathicVoice.prompts.getPromptVersion(\"af699d45-2985-42cc-91b9-af9e5da3bac5\", 0);\n",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "endpoint_prompts.delete-prompt-version": {
        "id": "endpoint_prompts.delete-prompt-version",
        "namespace": [
          "subpackage_prompts"
        ],
        "description": "Deletes a specified version of a **Prompt**.\n\nSee our [prompting guide](/docs/empathic-voice-interface-evi/phone-calling) for tips on crafting your system prompt.",
        "method": "DELETE",
        "path": [
          {
            "type": "literal",
            "value": "/v0/evi/prompts/"
          },
          {
            "type": "pathParameter",
            "value": "id"
          },
          {
            "type": "literal",
            "value": "/version/"
          },
          {
            "type": "pathParameter",
            "value": "version"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.hume.ai"
          }
        ],
        "pathParameters": [
          {
            "key": "id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "Identifier for a Prompt. Formatted as a UUID."
          },
          {
            "key": "version",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            },
            "description": "Version number for a Prompt.\n\nPrompts, Configs, Custom Voices, and Tools are versioned. This versioning system supports iterative development, allowing you to progressively refine prompts and revert to previous versions if needed.\n\nVersion numbers are integer values representing different iterations of the Prompt. Each update to the Prompt increments its version number."
          }
        ],
        "requests": [],
        "responses": [],
        "errors": [
          {
            "description": "Bad Request",
            "name": "Prompts Delete Prompt Version Request Bad Request Error",
            "statusCode": 400,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:ErrorResponse"
              }
            },
            "examples": [
              {
                "responseBody": {
                  "type": "json",
                  "value": {}
                }
              }
            ]
          }
        ],
        "examples": [
          {
            "path": "/v0/evi/prompts/af699d45-2985-42cc-91b9-af9e5da3bac5/version/1",
            "responseStatusCode": 204,
            "pathParameters": {
              "id": "af699d45-2985-42cc-91b9-af9e5da3bac5",
              "version": 1
            },
            "queryParameters": {},
            "headers": {},
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X DELETE https://api.hume.ai/v0/evi/prompts/af699d45-2985-42cc-91b9-af9e5da3bac5/version/1 \\\n     -H \"X-Hume-Api-Key: <apiKey>\"",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from hume import HumeClient\n\nclient = HumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.empathic_voice.prompts.delete_prompt_version(\n    id=\"af699d45-2985-42cc-91b9-af9e5da3bac5\",\n    version=1,\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumeClient } from \"hume\";\n\nconst client = new HumeClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.empathicVoice.prompts.deletePromptVersion(\"af699d45-2985-42cc-91b9-af9e5da3bac5\", 1);\n",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/v0/evi/prompts/:id/version/0",
            "responseStatusCode": 400,
            "pathParameters": {
              "id": ":id",
              "version": 0
            },
            "queryParameters": {},
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "error": "string",
                "message": "string"
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X DELETE https://api.hume.ai/v0/evi/prompts/:id/version/0 \\\n     -H \"X-Hume-Api-Key: <apiKey>\"",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from hume import HumeClient\n\nclient = HumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.empathic_voice.prompts.delete_prompt_version(\n    id=\"af699d45-2985-42cc-91b9-af9e5da3bac5\",\n    version=1,\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumeClient } from \"hume\";\n\nconst client = new HumeClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.empathicVoice.prompts.deletePromptVersion(\"af699d45-2985-42cc-91b9-af9e5da3bac5\", 1);\n",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "endpoint_prompts.update-prompt-description": {
        "id": "endpoint_prompts.update-prompt-description",
        "namespace": [
          "subpackage_prompts"
        ],
        "description": "Updates the description of a **Prompt**.\n\nSee our [prompting guide](/docs/empathic-voice-interface-evi/phone-calling) for tips on crafting your system prompt.",
        "method": "PATCH",
        "path": [
          {
            "type": "literal",
            "value": "/v0/evi/prompts/"
          },
          {
            "type": "pathParameter",
            "value": "id"
          },
          {
            "type": "literal",
            "value": "/version/"
          },
          {
            "type": "pathParameter",
            "value": "version"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.hume.ai"
          }
        ],
        "pathParameters": [
          {
            "key": "id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "Identifier for a Prompt. Formatted as a UUID."
          },
          {
            "key": "version",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            },
            "description": "Version number for a Prompt.\n\nPrompts, Configs, Custom Voices, and Tools are versioned. This versioning system supports iterative development, allowing you to progressively refine prompts and revert to previous versions if needed.\n\nVersion numbers are integer values representing different iterations of the Prompt. Each update to the Prompt increments its version number."
          }
        ],
        "requests": [
          {
            "contentType": "application/json",
            "body": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "version_description",
                  "valueShape": {
                    "type": "alias",
                    "value": {
                      "type": "optional",
                      "shape": {
                        "type": "alias",
                        "value": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "description": "An optional description of the Prompt version."
                }
              ]
            }
          }
        ],
        "responses": [
          {
            "description": "Success",
            "statusCode": 200,
            "body": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "id",
                    "id": "type_:ReturnPrompt"
                  }
                }
              }
            }
          }
        ],
        "errors": [
          {
            "description": "Bad Request",
            "name": "Prompts Update Prompt Description Request Bad Request Error",
            "statusCode": 400,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:ErrorResponse"
              }
            },
            "examples": [
              {
                "responseBody": {
                  "type": "json",
                  "value": {}
                }
              }
            ]
          }
        ],
        "examples": [
          {
            "path": "/v0/evi/prompts/af699d45-2985-42cc-91b9-af9e5da3bac5/version/1",
            "responseStatusCode": 200,
            "pathParameters": {
              "id": "af699d45-2985-42cc-91b9-af9e5da3bac5",
              "version": 1
            },
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {
                "version_description": "This is an updated version_description."
              }
            },
            "responseBody": {
              "type": "json",
              "value": {
                "id": "af699d45-2985-42cc-91b9-af9e5da3bac5",
                "version": 1,
                "version_type": "FIXED",
                "name": "string",
                "created_on": 1722633247488,
                "modified_on": 1722634770585,
                "text": "<role>You are an AI weather assistant providing users with accurate and up-to-date weather information. Respond to user queries concisely and clearly. Use simple language and avoid technical jargon. Provide temperature, precipitation, wind conditions, and any weather alerts. Include helpful tips if severe weather is expected.</role>",
                "version_description": "This is an updated version_description."
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X PATCH https://api.hume.ai/v0/evi/prompts/af699d45-2985-42cc-91b9-af9e5da3bac5/version/1 \\\n     -H \"X-Hume-Api-Key: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n  \"version_description\": \"This is an updated version_description.\"\n}'",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from hume import HumeClient\n\nclient = HumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.empathic_voice.prompts.update_prompt_description(\n    id=\"af699d45-2985-42cc-91b9-af9e5da3bac5\",\n    version=1,\n    version_description=\"This is an updated version_description.\",\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumeClient } from \"hume\";\n\nconst client = new HumeClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.empathicVoice.prompts.updatePromptDescription(\"af699d45-2985-42cc-91b9-af9e5da3bac5\", 1, {\n    versionDescription: \"This is an updated version_description.\"\n});\n",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/v0/evi/prompts/:id/version/0",
            "responseStatusCode": 400,
            "pathParameters": {
              "id": ":id",
              "version": 0
            },
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {}
            },
            "responseBody": {
              "type": "json",
              "value": {
                "error": "string",
                "message": "string"
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X PATCH https://api.hume.ai/v0/evi/prompts/:id/version/0 \\\n     -H \"X-Hume-Api-Key: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{}'",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from hume import HumeClient\n\nclient = HumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.empathic_voice.prompts.update_prompt_description(\n    id=\"af699d45-2985-42cc-91b9-af9e5da3bac5\",\n    version=1,\n    version_description=\"This is an updated version_description.\",\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumeClient } from \"hume\";\n\nconst client = new HumeClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.empathicVoice.prompts.updatePromptDescription(\"af699d45-2985-42cc-91b9-af9e5da3bac5\", 1, {\n    versionDescription: \"This is an updated version_description.\"\n});\n",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "endpoint_customVoices.list-custom-voices": {
        "id": "endpoint_customVoices.list-custom-voices",
        "namespace": [
          "subpackage_customVoices"
        ],
        "description": "Fetches a paginated list of **Custom Voices**.\n\nRefer to our [voices guide](/docs/empathic-voice-interface-evi/voices) for details on creating a custom voice.",
        "method": "GET",
        "path": [
          {
            "type": "literal",
            "value": "/v0/evi/custom_voices"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.hume.ai"
          }
        ],
        "queryParameters": [
          {
            "key": "page_number",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                }
              }
            },
            "description": "Specifies the page number to retrieve, enabling pagination.\n\nThis parameter uses zero-based indexing. For example, setting `page_number` to 0 retrieves the first page of results (items 0-9 if `page_size` is 10), setting `page_number` to 1 retrieves the second page (items 10-19), and so on. Defaults to 0, which retrieves the first page."
          },
          {
            "key": "page_size",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                }
              }
            },
            "description": "Specifies the maximum number of results to include per page, enabling pagination. The value must be between 1 and 100, inclusive.\n\nFor example, if `page_size` is set to 10, each page will include up to 10 items. Defaults to 10."
          },
          {
            "key": "name",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "description": "Filter to only include custom voices with name."
          }
        ],
        "requests": [],
        "responses": [
          {
            "description": "Success",
            "statusCode": 200,
            "body": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:ReturnPagedCustomVoices"
              }
            }
          }
        ],
        "errors": [
          {
            "description": "Bad Request",
            "name": "Custom Voices List Custom Voices Request Bad Request Error",
            "statusCode": 400,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:ErrorResponse"
              }
            },
            "examples": [
              {
                "responseBody": {
                  "type": "json",
                  "value": {}
                }
              }
            ]
          }
        ],
        "examples": [
          {
            "path": "/v0/evi/custom_voices",
            "responseStatusCode": 200,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "page_number": 1,
                "page_size": 1,
                "total_pages": 1,
                "custom_voices_page": [
                  {
                    "id": "id",
                    "version": 1,
                    "name": "name",
                    "created_on": 1000000,
                    "modified_on": 1000000,
                    "base_voice": "ITO",
                    "parameter_model": "20241004-11parameter",
                    "parameters": {}
                  }
                ]
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl https://api.hume.ai/v0/evi/custom_voices \\\n     -H \"X-Hume-Api-Key: <apiKey>\"",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from hume import HumeClient\n\nclient = HumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.empathic_voice.custom_voices.list_custom_voices()\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumeClient } from \"hume\";\n\nconst client = new HumeClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.empathicVoice.customVoices.listCustomVoices();\n",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/v0/evi/custom_voices",
            "responseStatusCode": 400,
            "pathParameters": {},
            "queryParameters": {
              "page_number": 0,
              "page_size": 0
            },
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "error": "string",
                "message": "string"
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -G https://api.hume.ai/v0/evi/custom_voices \\\n     -H \"X-Hume-Api-Key: <apiKey>\" \\\n     -d page_number=0 \\\n     -d page_size=0",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from hume import HumeClient\n\nclient = HumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.empathic_voice.custom_voices.list_custom_voices()\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumeClient } from \"hume\";\n\nconst client = new HumeClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.empathicVoice.customVoices.listCustomVoices();\n",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "endpoint_customVoices.create-custom-voice": {
        "id": "endpoint_customVoices.create-custom-voice",
        "namespace": [
          "subpackage_customVoices"
        ],
        "description": "Creates a **Custom Voice** that can be added to an [EVI configuration](/reference/empathic-voice-interface-evi/configs/create-config).\n\nRefer to our [voices guide](/docs/empathic-voice-interface-evi/voices) for details on creating a custom voice.",
        "method": "POST",
        "path": [
          {
            "type": "literal",
            "value": "/v0/evi/custom_voices"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.hume.ai"
          }
        ],
        "requests": [
          {
            "contentType": "application/json",
            "body": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:PostedCustomVoice"
              }
            }
          }
        ],
        "responses": [
          {
            "description": "Created",
            "statusCode": 200,
            "body": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:ReturnCustomVoice"
              }
            }
          }
        ],
        "errors": [
          {
            "description": "Bad Request",
            "name": "Custom Voices Create Custom Voice Request Bad Request Error",
            "statusCode": 400,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:ErrorResponse"
              }
            },
            "examples": [
              {
                "responseBody": {
                  "type": "json",
                  "value": {}
                }
              }
            ]
          }
        ],
        "examples": [
          {
            "path": "/v0/evi/custom_voices",
            "responseStatusCode": 200,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {
                "name": "name",
                "base_voice": "ITO",
                "parameter_model": "20241004-11parameter"
              }
            },
            "responseBody": {
              "type": "json",
              "value": {
                "id": "id",
                "version": 1,
                "name": "name",
                "created_on": 1000000,
                "modified_on": 1000000,
                "base_voice": "ITO",
                "parameter_model": "20241004-11parameter",
                "parameters": {
                  "gender": 1,
                  "articulation": 1,
                  "assertiveness": 1,
                  "buoyancy": 1,
                  "confidence": 1,
                  "enthusiasm": 1,
                  "nasality": 1,
                  "relaxedness": 1,
                  "smoothness": 1,
                  "tepidity": 1,
                  "tightness": 1
                }
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://api.hume.ai/v0/evi/custom_voices \\\n     -H \"X-Hume-Api-Key: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n  \"name\": \"name\",\n  \"base_voice\": \"ITO\",\n  \"parameter_model\": \"20241004-11parameter\"\n}'",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from hume import HumeClient\n\nclient = HumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.empathic_voice.custom_voices.create_custom_voice(\n    name=\"name\",\n    base_voice=\"ITO\",\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumeClient, Hume } from \"hume\";\n\nconst client = new HumeClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.empathicVoice.customVoices.createCustomVoice({\n    name: \"name\",\n    baseVoice: Hume.PostedCustomVoiceBaseVoice.Ito,\n    parameterModel: \"20241004-11parameter\"\n});\n",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/v0/evi/custom_voices",
            "responseStatusCode": 400,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {
                "name": "string",
                "base_voice": "ITO",
                "parameter_model": "20241004-11parameter"
              }
            },
            "responseBody": {
              "type": "json",
              "value": {
                "error": "string",
                "message": "string"
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://api.hume.ai/v0/evi/custom_voices \\\n     -H \"X-Hume-Api-Key: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n  \"name\": \"string\",\n  \"base_voice\": \"ITO\",\n  \"parameter_model\": \"20241004-11parameter\"\n}'",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from hume import HumeClient\n\nclient = HumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.empathic_voice.custom_voices.create_custom_voice(\n    name=\"name\",\n    base_voice=\"ITO\",\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumeClient, Hume } from \"hume\";\n\nconst client = new HumeClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.empathicVoice.customVoices.createCustomVoice({\n    name: \"name\",\n    baseVoice: Hume.PostedCustomVoiceBaseVoice.Ito,\n    parameterModel: \"20241004-11parameter\"\n});\n",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "endpoint_customVoices.get-custom-voice": {
        "id": "endpoint_customVoices.get-custom-voice",
        "namespace": [
          "subpackage_customVoices"
        ],
        "description": "Fetches a specific **Custom Voice** by ID.\n\nRefer to our [voices guide](/docs/empathic-voice-interface-evi/voices) for details on creating a custom voice.",
        "method": "GET",
        "path": [
          {
            "type": "literal",
            "value": "/v0/evi/custom_voices/"
          },
          {
            "type": "pathParameter",
            "value": "id"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.hume.ai"
          }
        ],
        "pathParameters": [
          {
            "key": "id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "Identifier for a Custom Voice. Formatted as a UUID."
          }
        ],
        "requests": [],
        "responses": [
          {
            "description": "Success",
            "statusCode": 200,
            "body": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:ReturnCustomVoice"
              }
            }
          }
        ],
        "errors": [
          {
            "description": "Bad Request",
            "name": "Custom Voices Get Custom Voice Request Bad Request Error",
            "statusCode": 400,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:ErrorResponse"
              }
            },
            "examples": [
              {
                "responseBody": {
                  "type": "json",
                  "value": {}
                }
              }
            ]
          }
        ],
        "examples": [
          {
            "path": "/v0/evi/custom_voices/id",
            "responseStatusCode": 200,
            "pathParameters": {
              "id": "id"
            },
            "queryParameters": {},
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "id": "id",
                "version": 1,
                "name": "name",
                "created_on": 1000000,
                "modified_on": 1000000,
                "base_voice": "ITO",
                "parameter_model": "20241004-11parameter",
                "parameters": {
                  "gender": 1,
                  "articulation": 1,
                  "assertiveness": 1,
                  "buoyancy": 1,
                  "confidence": 1,
                  "enthusiasm": 1,
                  "nasality": 1,
                  "relaxedness": 1,
                  "smoothness": 1,
                  "tepidity": 1,
                  "tightness": 1
                }
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl https://api.hume.ai/v0/evi/custom_voices/id \\\n     -H \"X-Hume-Api-Key: <apiKey>\"",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from hume import HumeClient\n\nclient = HumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.empathic_voice.custom_voices.get_custom_voice(\n    id=\"id\",\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumeClient } from \"hume\";\n\nconst client = new HumeClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.empathicVoice.customVoices.getCustomVoice(\"id\");\n",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/v0/evi/custom_voices/:id",
            "responseStatusCode": 400,
            "pathParameters": {
              "id": ":id"
            },
            "queryParameters": {},
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "error": "string",
                "message": "string"
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl https://api.hume.ai/v0/evi/custom_voices/:id \\\n     -H \"X-Hume-Api-Key: <apiKey>\"",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from hume import HumeClient\n\nclient = HumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.empathic_voice.custom_voices.get_custom_voice(\n    id=\"id\",\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumeClient } from \"hume\";\n\nconst client = new HumeClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.empathicVoice.customVoices.getCustomVoice(\"id\");\n",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "endpoint_customVoices.create-custom-voice-version": {
        "id": "endpoint_customVoices.create-custom-voice-version",
        "namespace": [
          "subpackage_customVoices"
        ],
        "description": "Updates a **Custom Voice** by creating a new version of the **Custom Voice**.\n\nRefer to our [voices guide](/docs/empathic-voice-interface-evi/voices) for details on creating a custom voice.",
        "method": "POST",
        "path": [
          {
            "type": "literal",
            "value": "/v0/evi/custom_voices/"
          },
          {
            "type": "pathParameter",
            "value": "id"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.hume.ai"
          }
        ],
        "pathParameters": [
          {
            "key": "id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "Identifier for a Custom Voice. Formatted as a UUID."
          }
        ],
        "requests": [
          {
            "contentType": "application/json",
            "body": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:PostedCustomVoice"
              }
            }
          }
        ],
        "responses": [
          {
            "description": "Created",
            "statusCode": 200,
            "body": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:ReturnCustomVoice"
              }
            }
          }
        ],
        "errors": [
          {
            "description": "Bad Request",
            "name": "Custom Voices Create Custom Voice Version Request Bad Request Error",
            "statusCode": 400,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:ErrorResponse"
              }
            },
            "examples": [
              {
                "responseBody": {
                  "type": "json",
                  "value": {}
                }
              }
            ]
          }
        ],
        "examples": [
          {
            "path": "/v0/evi/custom_voices/id",
            "responseStatusCode": 200,
            "pathParameters": {
              "id": "id"
            },
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {
                "name": "name",
                "base_voice": "ITO",
                "parameter_model": "20241004-11parameter"
              }
            },
            "responseBody": {
              "type": "json",
              "value": {
                "id": "id",
                "version": 1,
                "name": "name",
                "created_on": 1000000,
                "modified_on": 1000000,
                "base_voice": "ITO",
                "parameter_model": "20241004-11parameter",
                "parameters": {
                  "gender": 1,
                  "articulation": 1,
                  "assertiveness": 1,
                  "buoyancy": 1,
                  "confidence": 1,
                  "enthusiasm": 1,
                  "nasality": 1,
                  "relaxedness": 1,
                  "smoothness": 1,
                  "tepidity": 1,
                  "tightness": 1
                }
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://api.hume.ai/v0/evi/custom_voices/id \\\n     -H \"X-Hume-Api-Key: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n  \"name\": \"name\",\n  \"base_voice\": \"ITO\",\n  \"parameter_model\": \"20241004-11parameter\"\n}'",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from hume import HumeClient\n\nclient = HumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.empathic_voice.custom_voices.create_custom_voice_version(\n    id=\"id\",\n    name=\"name\",\n    base_voice=\"ITO\",\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumeClient, Hume } from \"hume\";\n\nconst client = new HumeClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.empathicVoice.customVoices.createCustomVoiceVersion(\"id\", {\n    name: \"name\",\n    baseVoice: Hume.PostedCustomVoiceBaseVoice.Ito,\n    parameterModel: \"20241004-11parameter\"\n});\n",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/v0/evi/custom_voices/:id",
            "responseStatusCode": 400,
            "pathParameters": {
              "id": ":id"
            },
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {
                "name": "string",
                "base_voice": "ITO",
                "parameter_model": "20241004-11parameter"
              }
            },
            "responseBody": {
              "type": "json",
              "value": {
                "error": "string",
                "message": "string"
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://api.hume.ai/v0/evi/custom_voices/:id \\\n     -H \"X-Hume-Api-Key: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n  \"name\": \"string\",\n  \"base_voice\": \"ITO\",\n  \"parameter_model\": \"20241004-11parameter\"\n}'",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from hume import HumeClient\n\nclient = HumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.empathic_voice.custom_voices.create_custom_voice_version(\n    id=\"id\",\n    name=\"name\",\n    base_voice=\"ITO\",\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumeClient, Hume } from \"hume\";\n\nconst client = new HumeClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.empathicVoice.customVoices.createCustomVoiceVersion(\"id\", {\n    name: \"name\",\n    baseVoice: Hume.PostedCustomVoiceBaseVoice.Ito,\n    parameterModel: \"20241004-11parameter\"\n});\n",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "endpoint_customVoices.delete-custom-voice": {
        "id": "endpoint_customVoices.delete-custom-voice",
        "namespace": [
          "subpackage_customVoices"
        ],
        "description": "Deletes a **Custom Voice** and its versions.\n\nRefer to our [voices guide](/docs/empathic-voice-interface-evi/voices) for details on creating a custom voice.",
        "method": "DELETE",
        "path": [
          {
            "type": "literal",
            "value": "/v0/evi/custom_voices/"
          },
          {
            "type": "pathParameter",
            "value": "id"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.hume.ai"
          }
        ],
        "pathParameters": [
          {
            "key": "id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "Identifier for a Custom Voice. Formatted as a UUID."
          }
        ],
        "requests": [],
        "responses": [],
        "errors": [
          {
            "description": "Bad Request",
            "name": "Custom Voices Delete Custom Voice Request Bad Request Error",
            "statusCode": 400,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:ErrorResponse"
              }
            },
            "examples": [
              {
                "responseBody": {
                  "type": "json",
                  "value": {}
                }
              }
            ]
          }
        ],
        "examples": [
          {
            "path": "/v0/evi/custom_voices/id",
            "responseStatusCode": 204,
            "pathParameters": {
              "id": "id"
            },
            "queryParameters": {},
            "headers": {},
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X DELETE https://api.hume.ai/v0/evi/custom_voices/id \\\n     -H \"X-Hume-Api-Key: <apiKey>\"",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from hume import HumeClient\n\nclient = HumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.empathic_voice.custom_voices.delete_custom_voice(\n    id=\"id\",\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumeClient } from \"hume\";\n\nconst client = new HumeClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.empathicVoice.customVoices.deleteCustomVoice(\"id\");\n",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/v0/evi/custom_voices/:id",
            "responseStatusCode": 400,
            "pathParameters": {
              "id": ":id"
            },
            "queryParameters": {},
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "error": "string",
                "message": "string"
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X DELETE https://api.hume.ai/v0/evi/custom_voices/:id \\\n     -H \"X-Hume-Api-Key: <apiKey>\"",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from hume import HumeClient\n\nclient = HumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.empathic_voice.custom_voices.delete_custom_voice(\n    id=\"id\",\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumeClient } from \"hume\";\n\nconst client = new HumeClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.empathicVoice.customVoices.deleteCustomVoice(\"id\");\n",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "endpoint_customVoices.update-custom-voice-name": {
        "id": "endpoint_customVoices.update-custom-voice-name",
        "namespace": [
          "subpackage_customVoices"
        ],
        "description": "Updates the name of a **Custom Voice**.\n\nRefer to our [voices guide](/docs/empathic-voice-interface-evi/voices) for details on creating a custom voice.",
        "method": "PATCH",
        "path": [
          {
            "type": "literal",
            "value": "/v0/evi/custom_voices/"
          },
          {
            "type": "pathParameter",
            "value": "id"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.hume.ai"
          }
        ],
        "pathParameters": [
          {
            "key": "id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "Identifier for a Custom Voice. Formatted as a UUID."
          }
        ],
        "requests": [
          {
            "contentType": "application/json",
            "body": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "name",
                  "valueShape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  },
                  "description": "The name of the Custom Voice. Maximum length of 75 characters. Will be converted to all-uppercase. (e.g., \"sample voice\" becomes \"SAMPLE VOICE\")"
                }
              ]
            }
          }
        ],
        "responses": [],
        "errors": [
          {
            "description": "Bad Request",
            "name": "Custom Voices Update Custom Voice Name Request Bad Request Error",
            "statusCode": 400,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:ErrorResponse"
              }
            },
            "examples": [
              {
                "responseBody": {
                  "type": "json",
                  "value": {}
                }
              }
            ]
          }
        ],
        "examples": [
          {
            "path": "/v0/evi/custom_voices/:id",
            "responseStatusCode": 200,
            "pathParameters": {
              "id": ":id"
            },
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {
                "name": "string"
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X PATCH https://api.hume.ai/v0/evi/custom_voices/:id \\\n     -H \"X-Hume-Api-Key: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n  \"name\": \"string\"\n}'",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/v0/evi/custom_voices/:id",
            "responseStatusCode": 400,
            "pathParameters": {
              "id": ":id"
            },
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {
                "name": "string"
              }
            },
            "responseBody": {
              "type": "json",
              "value": {
                "error": "string",
                "message": "string"
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X PATCH https://api.hume.ai/v0/evi/custom_voices/:id \\\n     -H \"X-Hume-Api-Key: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n  \"name\": \"string\"\n}'",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "endpoint_configs.list-configs": {
        "id": "endpoint_configs.list-configs",
        "namespace": [
          "subpackage_configs"
        ],
        "description": "Fetches a paginated list of **Configs**.\n\nFor more details on configuration options and how to configure EVI, see our [configuration guide](/docs/empathic-voice-interface-evi/configuration).",
        "method": "GET",
        "path": [
          {
            "type": "literal",
            "value": "/v0/evi/configs"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.hume.ai"
          }
        ],
        "queryParameters": [
          {
            "key": "page_number",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                }
              }
            },
            "description": "Specifies the page number to retrieve, enabling pagination.\n\nThis parameter uses zero-based indexing. For example, setting `page_number` to 0 retrieves the first page of results (items 0-9 if `page_size` is 10), setting `page_number` to 1 retrieves the second page (items 10-19), and so on. Defaults to 0, which retrieves the first page."
          },
          {
            "key": "page_size",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                }
              }
            },
            "description": "Specifies the maximum number of results to include per page, enabling pagination. The value must be between 1 and 100, inclusive.\n\nFor example, if `page_size` is set to 10, each page will include up to 10 items. Defaults to 10."
          },
          {
            "key": "restrict_to_most_recent",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "boolean",
                      "default": false
                    }
                  }
                }
              }
            },
            "description": "By default, `restrict_to_most_recent` is set to true, returning only the latest version of each tool. To include all versions of each tool in the list, set `restrict_to_most_recent` to false."
          },
          {
            "key": "name",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "description": "Filter to only include configs with this name."
          }
        ],
        "requests": [],
        "responses": [
          {
            "description": "Success",
            "statusCode": 200,
            "body": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:ReturnPagedConfigs"
              }
            }
          }
        ],
        "errors": [
          {
            "description": "Bad Request",
            "name": "Configs List Configs Request Bad Request Error",
            "statusCode": 400,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:ErrorResponse"
              }
            },
            "examples": [
              {
                "responseBody": {
                  "type": "json",
                  "value": {}
                }
              }
            ]
          }
        ],
        "examples": [
          {
            "path": "/v0/evi/configs",
            "responseStatusCode": 200,
            "pathParameters": {},
            "queryParameters": {
              "page_number": 0,
              "page_size": 1
            },
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "total_pages": 1,
                "page_number": 0,
                "page_size": 1,
                "configs_page": [
                  {
                    "id": "1b60e1a0-cc59-424a-8d2c-189d354db3f3",
                    "version": 0,
                    "evi_version": "2",
                    "version_description": "",
                    "name": "Weather Assistant Config",
                    "created_on": 1715267200693,
                    "modified_on": 1715267200693,
                    "prompt": {
                      "id": "af699d45-2985-42cc-91b9-af9e5da3bac5",
                      "version": 0,
                      "version_type": "FIXED",
                      "name": "Weather Assistant Prompt",
                      "created_on": 1715267200693,
                      "modified_on": 1715267200693,
                      "text": "<role>You are an AI weather assistant providing users with accurate and up-to-date weather information. Respond to user queries concisely and clearly. Use simple language and avoid technical jargon. Provide temperature, precipitation, wind conditions, and any weather alerts. Include helpful tips if severe weather is expected.</role>",
                      "version_description": ""
                    },
                    "voice": {
                      "provider": "HUME_AI",
                      "name": "SAMPLE VOICE",
                      "custom_voice": {
                        "id": "00aa8ee9-c50e-4ea1-9af0-7b08ad451704",
                        "version": 1,
                        "name": "SAMPLE VOICE",
                        "created_on": 1724704587367,
                        "modified_on": 1725489961583,
                        "base_voice": "KORA",
                        "parameter_model": "20241004-11parameter",
                        "parameters": {
                          "gender": 0,
                          "articulation": -10,
                          "assertiveness": 20,
                          "buoyancy": -30,
                          "confidence": -40,
                          "enthusiasm": 50,
                          "nasality": 45,
                          "relaxedness": -35,
                          "smoothness": 25,
                          "tepidity": 15,
                          "tightness": 5
                        }
                      }
                    },
                    "language_model": {
                      "model_provider": "ANTHROPIC",
                      "model_resource": "claude-3-5-sonnet-20240620",
                      "temperature": 1
                    },
                    "ellm_model": {
                      "allow_short_responses": false
                    },
                    "tools": [],
                    "builtin_tools": [],
                    "event_messages": {
                      "on_new_chat": {
                        "enabled": false,
                        "text": ""
                      },
                      "on_inactivity_timeout": {
                        "enabled": false,
                        "text": ""
                      },
                      "on_max_duration_timeout": {
                        "enabled": false,
                        "text": ""
                      }
                    },
                    "timeouts": {
                      "inactivity": {
                        "enabled": true,
                        "duration_secs": 600
                      },
                      "max_duration": {
                        "enabled": true,
                        "duration_secs": 1800
                      }
                    }
                  }
                ]
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -G https://api.hume.ai/v0/evi/configs \\\n     -H \"X-Hume-Api-Key: <apiKey>\" \\\n     -d page_number=0 \\\n     -d page_size=1",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from hume import HumeClient\n\nclient = HumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.empathic_voice.configs.list_configs(\n    page_number=0,\n    page_size=1,\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumeClient } from \"hume\";\n\nconst client = new HumeClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.empathicVoice.configs.listConfigs({\n    pageNumber: 0,\n    pageSize: 1\n});\n",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/v0/evi/configs",
            "responseStatusCode": 400,
            "pathParameters": {},
            "queryParameters": {
              "page_number": 0,
              "page_size": 0
            },
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "error": "string",
                "message": "string"
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -G https://api.hume.ai/v0/evi/configs \\\n     -H \"X-Hume-Api-Key: <apiKey>\" \\\n     -d page_number=0 \\\n     -d page_size=0",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from hume import HumeClient\n\nclient = HumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.empathic_voice.configs.list_configs(\n    page_number=0,\n    page_size=1,\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumeClient } from \"hume\";\n\nconst client = new HumeClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.empathicVoice.configs.listConfigs({\n    pageNumber: 0,\n    pageSize: 1\n});\n",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "endpoint_configs.create-config": {
        "id": "endpoint_configs.create-config",
        "namespace": [
          "subpackage_configs"
        ],
        "description": "Creates a **Config** which can be applied to EVI.\n\nFor more details on configuration options and how to configure EVI, see our [configuration guide](/docs/empathic-voice-interface-evi/configuration).",
        "method": "POST",
        "path": [
          {
            "type": "literal",
            "value": "/v0/evi/configs"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.hume.ai"
          }
        ],
        "requests": [
          {
            "contentType": "application/json",
            "body": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "evi_version",
                  "valueShape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  },
                  "description": "Specifies the EVI version to use. Use `\"1\"` for version 1, or `\"2\"` for the latest enhanced version. For a detailed comparison of the two versions, refer to our [guide](/docs/empathic-voice-interface-evi/evi-2)."
                },
                {
                  "key": "name",
                  "valueShape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  },
                  "description": "Name applied to all versions of a particular Config."
                },
                {
                  "key": "version_description",
                  "valueShape": {
                    "type": "alias",
                    "value": {
                      "type": "optional",
                      "shape": {
                        "type": "alias",
                        "value": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "description": "An optional description of the Config version."
                },
                {
                  "key": "prompt",
                  "valueShape": {
                    "type": "alias",
                    "value": {
                      "type": "optional",
                      "shape": {
                        "type": "alias",
                        "value": {
                          "type": "id",
                          "id": "type_:PostedConfigPromptSpec"
                        }
                      }
                    }
                  }
                },
                {
                  "key": "voice",
                  "valueShape": {
                    "type": "alias",
                    "value": {
                      "type": "optional",
                      "shape": {
                        "type": "alias",
                        "value": {
                          "type": "id",
                          "id": "type_:PostedVoice"
                        }
                      }
                    }
                  },
                  "description": "A voice specification associated with this Config."
                },
                {
                  "key": "language_model",
                  "valueShape": {
                    "type": "alias",
                    "value": {
                      "type": "optional",
                      "shape": {
                        "type": "alias",
                        "value": {
                          "type": "id",
                          "id": "type_:PostedLanguageModel"
                        }
                      }
                    }
                  },
                  "description": "The supplemental language model associated with this Config.\n\nThis model is used to generate longer, more detailed responses from EVI. Choosing an appropriate supplemental language model for your use case is crucial for generating fast, high-quality responses from EVI."
                },
                {
                  "key": "ellm_model",
                  "valueShape": {
                    "type": "alias",
                    "value": {
                      "type": "optional",
                      "shape": {
                        "type": "alias",
                        "value": {
                          "type": "id",
                          "id": "type_:PostedEllmModel"
                        }
                      }
                    }
                  },
                  "description": "The eLLM setup associated with this Config.\n\nHume's eLLM (empathic Large Language Model) is a multimodal language model that takes into account both expression measures and language. The eLLM generates short, empathic language responses and guides text-to-speech (TTS) prosody."
                },
                {
                  "key": "tools",
                  "valueShape": {
                    "type": "alias",
                    "value": {
                      "type": "optional",
                      "shape": {
                        "type": "alias",
                        "value": {
                          "type": "list",
                          "itemShape": {
                            "type": "alias",
                            "value": {
                              "type": "optional",
                              "shape": {
                                "type": "alias",
                                "value": {
                                  "type": "id",
                                  "id": "type_:PostedUserDefinedToolSpec"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  },
                  "description": "List of user-defined tools associated with this Config."
                },
                {
                  "key": "builtin_tools",
                  "valueShape": {
                    "type": "alias",
                    "value": {
                      "type": "optional",
                      "shape": {
                        "type": "alias",
                        "value": {
                          "type": "list",
                          "itemShape": {
                            "type": "alias",
                            "value": {
                              "type": "optional",
                              "shape": {
                                "type": "alias",
                                "value": {
                                  "type": "id",
                                  "id": "type_:PostedBuiltinTool"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  },
                  "description": "List of built-in tools associated with this Config."
                },
                {
                  "key": "event_messages",
                  "valueShape": {
                    "type": "alias",
                    "value": {
                      "type": "optional",
                      "shape": {
                        "type": "alias",
                        "value": {
                          "type": "id",
                          "id": "type_:PostedEventMessageSpecs"
                        }
                      }
                    }
                  }
                },
                {
                  "key": "timeouts",
                  "valueShape": {
                    "type": "alias",
                    "value": {
                      "type": "optional",
                      "shape": {
                        "type": "alias",
                        "value": {
                          "type": "id",
                          "id": "type_:PostedTimeoutSpecs"
                        }
                      }
                    }
                  }
                }
              ]
            }
          }
        ],
        "responses": [
          {
            "description": "Created",
            "statusCode": 200,
            "body": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:ReturnConfig"
              }
            }
          }
        ],
        "errors": [
          {
            "description": "Bad Request",
            "name": "Configs Create Config Request Bad Request Error",
            "statusCode": 400,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:ErrorResponse"
              }
            },
            "examples": [
              {
                "responseBody": {
                  "type": "json",
                  "value": {}
                }
              }
            ]
          }
        ],
        "examples": [
          {
            "path": "/v0/evi/configs",
            "responseStatusCode": 200,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {
                "evi_version": "2",
                "name": "Weather Assistant Config",
                "prompt": {
                  "id": "af699d45-2985-42cc-91b9-af9e5da3bac5",
                  "version": 0
                },
                "voice": {
                  "provider": "HUME_AI",
                  "name": "SAMPLE VOICE"
                },
                "language_model": {
                  "model_provider": "ANTHROPIC",
                  "model_resource": "claude-3-5-sonnet-20240620",
                  "temperature": 1
                },
                "event_messages": {
                  "on_new_chat": {
                    "enabled": false,
                    "text": ""
                  },
                  "on_inactivity_timeout": {
                    "enabled": false,
                    "text": ""
                  },
                  "on_max_duration_timeout": {
                    "enabled": false,
                    "text": ""
                  }
                }
              }
            },
            "responseBody": {
              "type": "json",
              "value": {
                "id": "1b60e1a0-cc59-424a-8d2c-189d354db3f3",
                "version": 0,
                "evi_version": "2",
                "version_description": "",
                "name": "Weather Assistant Config",
                "created_on": 1715275452390,
                "modified_on": 1715275452390,
                "prompt": {
                  "id": "af699d45-2985-42cc-91b9-af9e5da3bac5",
                  "version": 0,
                  "version_type": "FIXED",
                  "name": "Weather Assistant Prompt",
                  "created_on": 1715267200693,
                  "modified_on": 1715267200693,
                  "text": "<role>You are an AI weather assistant providing users with accurate and up-to-date weather information. Respond to user queries concisely and clearly. Use simple language and avoid technical jargon. Provide temperature, precipitation, wind conditions, and any weather alerts. Include helpful tips if severe weather is expected.</role>",
                  "version_description": ""
                },
                "voice": {
                  "provider": "HUME_AI",
                  "name": "SAMPLE VOICE",
                  "custom_voice": {
                    "id": "00aa8ee9-c50e-4ea1-9af0-7b08ad451704",
                    "version": 1,
                    "name": "SAMPLE VOICE",
                    "created_on": 1724704587367,
                    "modified_on": 1725489961583,
                    "base_voice": "KORA",
                    "parameter_model": "20241004-11parameter",
                    "parameters": {
                      "gender": 0,
                      "articulation": -10,
                      "assertiveness": 20,
                      "buoyancy": -30,
                      "confidence": -40,
                      "enthusiasm": 50,
                      "nasality": 45,
                      "relaxedness": -35,
                      "smoothness": 25,
                      "tepidity": 15,
                      "tightness": 5
                    }
                  }
                },
                "language_model": {
                  "model_provider": "ANTHROPIC",
                  "model_resource": "claude-3-5-sonnet-20240620",
                  "temperature": 1
                },
                "ellm_model": {
                  "allow_short_responses": false
                },
                "tools": [],
                "builtin_tools": [],
                "event_messages": {
                  "on_new_chat": {
                    "enabled": false,
                    "text": ""
                  },
                  "on_inactivity_timeout": {
                    "enabled": false,
                    "text": ""
                  },
                  "on_max_duration_timeout": {
                    "enabled": false,
                    "text": ""
                  }
                },
                "timeouts": {
                  "inactivity": {
                    "enabled": true,
                    "duration_secs": 600
                  },
                  "max_duration": {
                    "enabled": true,
                    "duration_secs": 1800
                  }
                }
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://api.hume.ai/v0/evi/configs \\\n     -H \"X-Hume-Api-Key: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n  \"evi_version\": \"2\",\n  \"name\": \"Weather Assistant Config\",\n  \"prompt\": {\n    \"id\": \"af699d45-2985-42cc-91b9-af9e5da3bac5\",\n    \"version\": 0\n  },\n  \"voice\": {\n    \"provider\": \"HUME_AI\",\n    \"name\": \"SAMPLE VOICE\"\n  },\n  \"language_model\": {\n    \"model_provider\": \"ANTHROPIC\",\n    \"model_resource\": \"claude-3-5-sonnet-20240620\",\n    \"temperature\": 1\n  },\n  \"event_messages\": {\n    \"on_new_chat\": {\n      \"enabled\": false,\n      \"text\": \"\"\n    },\n    \"on_inactivity_timeout\": {\n      \"enabled\": false,\n      \"text\": \"\"\n    },\n    \"on_max_duration_timeout\": {\n      \"enabled\": false,\n      \"text\": \"\"\n    }\n  }\n}'",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from hume import HumeClient\nfrom hume.empathic_voice import (\n    PostedConfigPromptSpec,\n    PostedEventMessageSpec,\n    PostedEventMessageSpecs,\n    PostedLanguageModel,\n    PostedVoice,\n)\n\nclient = HumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.empathic_voice.configs.create_config(\n    name=\"Weather Assistant Config\",\n    prompt=PostedConfigPromptSpec(\n        id=\"af699d45-2985-42cc-91b9-af9e5da3bac5\",\n        version=0,\n    ),\n    evi_version=\"2\",\n    voice=PostedVoice(\n        provider=\"HUME_AI\",\n        name=\"SAMPLE VOICE\",\n    ),\n    language_model=PostedLanguageModel(\n        model_provider=\"ANTHROPIC\",\n        model_resource=\"claude-3-5-sonnet-20240620\",\n        temperature=1.0,\n    ),\n    event_messages=PostedEventMessageSpecs(\n        on_new_chat=PostedEventMessageSpec(\n            enabled=False,\n            text=\"\",\n        ),\n        on_inactivity_timeout=PostedEventMessageSpec(\n            enabled=False,\n            text=\"\",\n        ),\n        on_max_duration_timeout=PostedEventMessageSpec(\n            enabled=False,\n            text=\"\",\n        ),\n    ),\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumeClient, Hume } from \"hume\";\n\nconst client = new HumeClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.empathicVoice.configs.createConfig({\n    name: \"Weather Assistant Config\",\n    prompt: {\n        id: \"af699d45-2985-42cc-91b9-af9e5da3bac5\",\n        version: 0\n    },\n    eviVersion: \"2\",\n    voice: {\n        provider: Hume.PostedVoiceProvider.HumeAi,\n        name: \"SAMPLE VOICE\"\n    },\n    languageModel: {\n        modelProvider: Hume.PostedLanguageModelModelProvider.Anthropic,\n        modelResource: Hume.PostedLanguageModelModelResource.Claude35Sonnet20240620,\n        temperature: 1\n    },\n    eventMessages: {\n        onNewChat: {\n            enabled: false,\n            text: \"\"\n        },\n        onInactivityTimeout: {\n            enabled: false,\n            text: \"\"\n        },\n        onMaxDurationTimeout: {\n            enabled: false,\n            text: \"\"\n        }\n    }\n});\n",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/v0/evi/configs",
            "responseStatusCode": 400,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {
                "evi_version": "string",
                "name": "string"
              }
            },
            "responseBody": {
              "type": "json",
              "value": {
                "error": "string",
                "message": "string"
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://api.hume.ai/v0/evi/configs \\\n     -H \"X-Hume-Api-Key: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n  \"evi_version\": \"string\",\n  \"name\": \"string\"\n}'",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from hume import HumeClient\nfrom hume.empathic_voice import (\n    PostedConfigPromptSpec,\n    PostedEventMessageSpec,\n    PostedEventMessageSpecs,\n    PostedLanguageModel,\n    PostedVoice,\n)\n\nclient = HumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.empathic_voice.configs.create_config(\n    name=\"Weather Assistant Config\",\n    prompt=PostedConfigPromptSpec(\n        id=\"af699d45-2985-42cc-91b9-af9e5da3bac5\",\n        version=0,\n    ),\n    evi_version=\"2\",\n    voice=PostedVoice(\n        provider=\"HUME_AI\",\n        name=\"SAMPLE VOICE\",\n    ),\n    language_model=PostedLanguageModel(\n        model_provider=\"ANTHROPIC\",\n        model_resource=\"claude-3-5-sonnet-20240620\",\n        temperature=1.0,\n    ),\n    event_messages=PostedEventMessageSpecs(\n        on_new_chat=PostedEventMessageSpec(\n            enabled=False,\n            text=\"\",\n        ),\n        on_inactivity_timeout=PostedEventMessageSpec(\n            enabled=False,\n            text=\"\",\n        ),\n        on_max_duration_timeout=PostedEventMessageSpec(\n            enabled=False,\n            text=\"\",\n        ),\n    ),\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumeClient, Hume } from \"hume\";\n\nconst client = new HumeClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.empathicVoice.configs.createConfig({\n    name: \"Weather Assistant Config\",\n    prompt: {\n        id: \"af699d45-2985-42cc-91b9-af9e5da3bac5\",\n        version: 0\n    },\n    eviVersion: \"2\",\n    voice: {\n        provider: Hume.PostedVoiceProvider.HumeAi,\n        name: \"SAMPLE VOICE\"\n    },\n    languageModel: {\n        modelProvider: Hume.PostedLanguageModelModelProvider.Anthropic,\n        modelResource: Hume.PostedLanguageModelModelResource.Claude35Sonnet20240620,\n        temperature: 1\n    },\n    eventMessages: {\n        onNewChat: {\n            enabled: false,\n            text: \"\"\n        },\n        onInactivityTimeout: {\n            enabled: false,\n            text: \"\"\n        },\n        onMaxDurationTimeout: {\n            enabled: false,\n            text: \"\"\n        }\n    }\n});\n",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "endpoint_configs.list-config-versions": {
        "id": "endpoint_configs.list-config-versions",
        "namespace": [
          "subpackage_configs"
        ],
        "description": "Fetches a list of a **Config's** versions.\n\nFor more details on configuration options and how to configure EVI, see our [configuration guide](/docs/empathic-voice-interface-evi/configuration).",
        "method": "GET",
        "path": [
          {
            "type": "literal",
            "value": "/v0/evi/configs/"
          },
          {
            "type": "pathParameter",
            "value": "id"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.hume.ai"
          }
        ],
        "pathParameters": [
          {
            "key": "id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "Identifier for a Config. Formatted as a UUID."
          }
        ],
        "queryParameters": [
          {
            "key": "page_number",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                }
              }
            },
            "description": "Specifies the page number to retrieve, enabling pagination.\n\nThis parameter uses zero-based indexing. For example, setting `page_number` to 0 retrieves the first page of results (items 0-9 if `page_size` is 10), setting `page_number` to 1 retrieves the second page (items 10-19), and so on. Defaults to 0, which retrieves the first page."
          },
          {
            "key": "page_size",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                }
              }
            },
            "description": "Specifies the maximum number of results to include per page, enabling pagination. The value must be between 1 and 100, inclusive.\n\nFor example, if `page_size` is set to 10, each page will include up to 10 items. Defaults to 10."
          },
          {
            "key": "restrict_to_most_recent",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "boolean",
                      "default": false
                    }
                  }
                }
              }
            },
            "description": "By default, `restrict_to_most_recent` is set to true, returning only the latest version of each config. To include all versions of each config in the list, set `restrict_to_most_recent` to false."
          }
        ],
        "requests": [],
        "responses": [
          {
            "description": "Success",
            "statusCode": 200,
            "body": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:ReturnPagedConfigs"
              }
            }
          }
        ],
        "errors": [
          {
            "description": "Bad Request",
            "name": "Configs List Config Versions Request Bad Request Error",
            "statusCode": 400,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:ErrorResponse"
              }
            },
            "examples": [
              {
                "responseBody": {
                  "type": "json",
                  "value": {}
                }
              }
            ]
          }
        ],
        "examples": [
          {
            "path": "/v0/evi/configs/1b60e1a0-cc59-424a-8d2c-189d354db3f3",
            "responseStatusCode": 200,
            "pathParameters": {
              "id": "1b60e1a0-cc59-424a-8d2c-189d354db3f3"
            },
            "queryParameters": {},
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "total_pages": 1,
                "page_number": 0,
                "page_size": 10,
                "configs_page": [
                  {
                    "id": "1b60e1a0-cc59-424a-8d2c-189d354db3f3",
                    "version": 0,
                    "evi_version": "2",
                    "version_description": "",
                    "name": "Weather Assistant Config",
                    "created_on": 1715275452390,
                    "modified_on": 1715275452390,
                    "prompt": {
                      "id": "af699d45-2985-42cc-91b9-af9e5da3bac5",
                      "version": 0,
                      "version_type": "FIXED",
                      "name": "Weather Assistant Prompt",
                      "created_on": 1715267200693,
                      "modified_on": 1715267200693,
                      "text": "<role>You are an AI weather assistant providing users with accurate and up-to-date weather information. Respond to user queries concisely and clearly. Use simple language and avoid technical jargon. Provide temperature, precipitation, wind conditions, and any weather alerts. Include helpful tips if severe weather is expected.</role>",
                      "version_description": ""
                    },
                    "voice": {
                      "provider": "HUME_AI",
                      "name": "SAMPLE VOICE",
                      "custom_voice": {
                        "id": "00aa8ee9-c50e-4ea1-9af0-7b08ad451704",
                        "version": 1,
                        "name": "SAMPLE VOICE",
                        "created_on": 1724704587367,
                        "modified_on": 1725489961583,
                        "base_voice": "KORA",
                        "parameter_model": "20241004-11parameter",
                        "parameters": {
                          "gender": 0,
                          "articulation": -10,
                          "assertiveness": 20,
                          "buoyancy": -30,
                          "confidence": -40,
                          "enthusiasm": 50,
                          "nasality": 45,
                          "relaxedness": -35,
                          "smoothness": 25,
                          "tepidity": 15,
                          "tightness": 5
                        }
                      }
                    },
                    "language_model": {
                      "model_provider": "ANTHROPIC",
                      "model_resource": "claude-3-5-sonnet-20240620",
                      "temperature": 1
                    },
                    "ellm_model": {
                      "allow_short_responses": false
                    },
                    "tools": [],
                    "builtin_tools": [],
                    "event_messages": {
                      "on_new_chat": {
                        "enabled": false,
                        "text": ""
                      },
                      "on_inactivity_timeout": {
                        "enabled": false,
                        "text": ""
                      },
                      "on_max_duration_timeout": {
                        "enabled": false,
                        "text": ""
                      }
                    },
                    "timeouts": {
                      "inactivity": {
                        "enabled": true,
                        "duration_secs": 600
                      },
                      "max_duration": {
                        "enabled": true,
                        "duration_secs": 1800
                      }
                    }
                  }
                ]
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl https://api.hume.ai/v0/evi/configs/1b60e1a0-cc59-424a-8d2c-189d354db3f3 \\\n     -H \"X-Hume-Api-Key: <apiKey>\"",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from hume import HumeClient\n\nclient = HumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.empathic_voice.configs.list_config_versions(\n    id=\"1b60e1a0-cc59-424a-8d2c-189d354db3f3\",\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumeClient } from \"hume\";\n\nconst client = new HumeClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.empathicVoice.configs.listConfigVersions(\"1b60e1a0-cc59-424a-8d2c-189d354db3f3\");\n",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/v0/evi/configs/:id",
            "responseStatusCode": 400,
            "pathParameters": {
              "id": ":id"
            },
            "queryParameters": {
              "page_number": 0,
              "page_size": 0
            },
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "error": "string",
                "message": "string"
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -G https://api.hume.ai/v0/evi/configs/:id \\\n     -H \"X-Hume-Api-Key: <apiKey>\" \\\n     -d page_number=0 \\\n     -d page_size=0",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from hume import HumeClient\n\nclient = HumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.empathic_voice.configs.list_config_versions(\n    id=\"1b60e1a0-cc59-424a-8d2c-189d354db3f3\",\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumeClient } from \"hume\";\n\nconst client = new HumeClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.empathicVoice.configs.listConfigVersions(\"1b60e1a0-cc59-424a-8d2c-189d354db3f3\");\n",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "endpoint_configs.create-config-version": {
        "id": "endpoint_configs.create-config-version",
        "namespace": [
          "subpackage_configs"
        ],
        "description": "Updates a **Config** by creating a new version of the **Config**.\n\nFor more details on configuration options and how to configure EVI, see our [configuration guide](/docs/empathic-voice-interface-evi/configuration).",
        "method": "POST",
        "path": [
          {
            "type": "literal",
            "value": "/v0/evi/configs/"
          },
          {
            "type": "pathParameter",
            "value": "id"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.hume.ai"
          }
        ],
        "pathParameters": [
          {
            "key": "id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "Identifier for a Config. Formatted as a UUID."
          }
        ],
        "requests": [
          {
            "contentType": "application/json",
            "body": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "evi_version",
                  "valueShape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  },
                  "description": "The version of the EVI used with this config."
                },
                {
                  "key": "version_description",
                  "valueShape": {
                    "type": "alias",
                    "value": {
                      "type": "optional",
                      "shape": {
                        "type": "alias",
                        "value": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "description": "An optional description of the Config version."
                },
                {
                  "key": "prompt",
                  "valueShape": {
                    "type": "alias",
                    "value": {
                      "type": "optional",
                      "shape": {
                        "type": "alias",
                        "value": {
                          "type": "id",
                          "id": "type_:PostedConfigPromptSpec"
                        }
                      }
                    }
                  }
                },
                {
                  "key": "voice",
                  "valueShape": {
                    "type": "alias",
                    "value": {
                      "type": "optional",
                      "shape": {
                        "type": "alias",
                        "value": {
                          "type": "id",
                          "id": "type_:PostedVoice"
                        }
                      }
                    }
                  },
                  "description": "A voice specification associated with this Config version."
                },
                {
                  "key": "language_model",
                  "valueShape": {
                    "type": "alias",
                    "value": {
                      "type": "optional",
                      "shape": {
                        "type": "alias",
                        "value": {
                          "type": "id",
                          "id": "type_:PostedLanguageModel"
                        }
                      }
                    }
                  },
                  "description": "The supplemental language model associated with this Config version.\n\nThis model is used to generate longer, more detailed responses from EVI. Choosing an appropriate supplemental language model for your use case is crucial for generating fast, high-quality responses from EVI."
                },
                {
                  "key": "ellm_model",
                  "valueShape": {
                    "type": "alias",
                    "value": {
                      "type": "optional",
                      "shape": {
                        "type": "alias",
                        "value": {
                          "type": "id",
                          "id": "type_:PostedEllmModel"
                        }
                      }
                    }
                  },
                  "description": "The eLLM setup associated with this Config version.\n\nHume's eLLM (empathic Large Language Model) is a multimodal language model that takes into account both expression measures and language. The eLLM generates short, empathic language responses and guides text-to-speech (TTS) prosody."
                },
                {
                  "key": "tools",
                  "valueShape": {
                    "type": "alias",
                    "value": {
                      "type": "optional",
                      "shape": {
                        "type": "alias",
                        "value": {
                          "type": "list",
                          "itemShape": {
                            "type": "alias",
                            "value": {
                              "type": "optional",
                              "shape": {
                                "type": "alias",
                                "value": {
                                  "type": "id",
                                  "id": "type_:PostedUserDefinedToolSpec"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  },
                  "description": "List of user-defined tools associated with this Config version."
                },
                {
                  "key": "builtin_tools",
                  "valueShape": {
                    "type": "alias",
                    "value": {
                      "type": "optional",
                      "shape": {
                        "type": "alias",
                        "value": {
                          "type": "list",
                          "itemShape": {
                            "type": "alias",
                            "value": {
                              "type": "optional",
                              "shape": {
                                "type": "alias",
                                "value": {
                                  "type": "id",
                                  "id": "type_:PostedBuiltinTool"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  },
                  "description": "List of built-in tools associated with this Config version."
                },
                {
                  "key": "event_messages",
                  "valueShape": {
                    "type": "alias",
                    "value": {
                      "type": "optional",
                      "shape": {
                        "type": "alias",
                        "value": {
                          "type": "id",
                          "id": "type_:PostedEventMessageSpecs"
                        }
                      }
                    }
                  }
                },
                {
                  "key": "timeouts",
                  "valueShape": {
                    "type": "alias",
                    "value": {
                      "type": "optional",
                      "shape": {
                        "type": "alias",
                        "value": {
                          "type": "id",
                          "id": "type_:PostedTimeoutSpecs"
                        }
                      }
                    }
                  }
                }
              ]
            }
          }
        ],
        "responses": [
          {
            "description": "Created",
            "statusCode": 200,
            "body": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:ReturnConfig"
              }
            }
          }
        ],
        "errors": [
          {
            "description": "Bad Request",
            "name": "Configs Create Config Version Request Bad Request Error",
            "statusCode": 400,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:ErrorResponse"
              }
            },
            "examples": [
              {
                "responseBody": {
                  "type": "json",
                  "value": {}
                }
              }
            ]
          }
        ],
        "examples": [
          {
            "path": "/v0/evi/configs/1b60e1a0-cc59-424a-8d2c-189d354db3f3",
            "responseStatusCode": 200,
            "pathParameters": {
              "id": "1b60e1a0-cc59-424a-8d2c-189d354db3f3"
            },
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {
                "evi_version": "2",
                "version_description": "This is an updated version of the Weather Assistant Config.",
                "prompt": {
                  "id": "af699d45-2985-42cc-91b9-af9e5da3bac5",
                  "version": 0
                },
                "voice": {
                  "provider": "HUME_AI",
                  "name": "ITO"
                },
                "language_model": {
                  "model_provider": "ANTHROPIC",
                  "model_resource": "claude-3-5-sonnet-20240620",
                  "temperature": 1
                },
                "ellm_model": {
                  "allow_short_responses": true
                },
                "event_messages": {
                  "on_new_chat": {
                    "enabled": false,
                    "text": ""
                  },
                  "on_inactivity_timeout": {
                    "enabled": false,
                    "text": ""
                  },
                  "on_max_duration_timeout": {
                    "enabled": false,
                    "text": ""
                  }
                }
              }
            },
            "responseBody": {
              "type": "json",
              "value": {
                "id": "1b60e1a0-cc59-424a-8d2c-189d354db3f3",
                "version": 1,
                "evi_version": "2",
                "version_description": "This is an updated version of the Weather Assistant Config.",
                "name": "Weather Assistant Config",
                "created_on": 1715275452390,
                "modified_on": 1722642242998,
                "prompt": {
                  "id": "af699d45-2985-42cc-91b9-af9e5da3bac5",
                  "version": 0,
                  "version_type": "FIXED",
                  "name": "Weather Assistant Prompt",
                  "created_on": 1715267200693,
                  "modified_on": 1715267200693,
                  "text": "<role>You are an AI weather assistant providing users with accurate and up-to-date weather information. Respond to user queries concisely and clearly. Use simple language and avoid technical jargon. Provide temperature, precipitation, wind conditions, and any weather alerts. Include helpful tips if severe weather is expected.</role>",
                  "version_description": ""
                },
                "voice": {
                  "provider": "HUME_AI",
                  "name": "ITO",
                  "custom_voice": {
                    "id": "00aa8ee9-c50e-4ea1-9af0-7b08ad451704",
                    "version": 1,
                    "name": "SAMPLE VOICE",
                    "created_on": 1724704587367,
                    "modified_on": 1725489961583,
                    "base_voice": "KORA",
                    "parameter_model": "20241004-11parameter",
                    "parameters": {
                      "gender": 0,
                      "articulation": -10,
                      "assertiveness": 20,
                      "buoyancy": -30,
                      "confidence": -40,
                      "enthusiasm": 50,
                      "nasality": 45,
                      "relaxedness": -35,
                      "smoothness": 25,
                      "tepidity": 15,
                      "tightness": 5
                    }
                  }
                },
                "language_model": {
                  "model_provider": "ANTHROPIC",
                  "model_resource": "claude-3-5-sonnet-20240620",
                  "temperature": 1
                },
                "ellm_model": {
                  "allow_short_responses": true
                },
                "tools": [],
                "builtin_tools": [],
                "event_messages": {
                  "on_new_chat": {
                    "enabled": false,
                    "text": ""
                  },
                  "on_inactivity_timeout": {
                    "enabled": false,
                    "text": ""
                  },
                  "on_max_duration_timeout": {
                    "enabled": false,
                    "text": ""
                  }
                },
                "timeouts": {
                  "inactivity": {
                    "enabled": true,
                    "duration_secs": 600
                  },
                  "max_duration": {
                    "enabled": true,
                    "duration_secs": 1800
                  }
                }
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://api.hume.ai/v0/evi/configs/1b60e1a0-cc59-424a-8d2c-189d354db3f3 \\\n     -H \"X-Hume-Api-Key: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n  \"evi_version\": \"2\",\n  \"version_description\": \"This is an updated version of the Weather Assistant Config.\",\n  \"prompt\": {\n    \"id\": \"af699d45-2985-42cc-91b9-af9e5da3bac5\",\n    \"version\": 0\n  },\n  \"voice\": {\n    \"provider\": \"HUME_AI\",\n    \"name\": \"ITO\"\n  },\n  \"language_model\": {\n    \"model_provider\": \"ANTHROPIC\",\n    \"model_resource\": \"claude-3-5-sonnet-20240620\",\n    \"temperature\": 1\n  },\n  \"ellm_model\": {\n    \"allow_short_responses\": true\n  },\n  \"event_messages\": {\n    \"on_new_chat\": {\n      \"enabled\": false,\n      \"text\": \"\"\n    },\n    \"on_inactivity_timeout\": {\n      \"enabled\": false,\n      \"text\": \"\"\n    },\n    \"on_max_duration_timeout\": {\n      \"enabled\": false,\n      \"text\": \"\"\n    }\n  }\n}'",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from hume import HumeClient\nfrom hume.empathic_voice import (\n    PostedConfigPromptSpec,\n    PostedEllmModel,\n    PostedEventMessageSpec,\n    PostedEventMessageSpecs,\n    PostedLanguageModel,\n    PostedVoice,\n)\n\nclient = HumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.empathic_voice.configs.create_config_version(\n    id=\"1b60e1a0-cc59-424a-8d2c-189d354db3f3\",\n    version_description=\"This is an updated version of the Weather Assistant Config.\",\n    evi_version=\"2\",\n    prompt=PostedConfigPromptSpec(\n        id=\"af699d45-2985-42cc-91b9-af9e5da3bac5\",\n        version=0,\n    ),\n    voice=PostedVoice(\n        provider=\"HUME_AI\",\n        name=\"ITO\",\n    ),\n    language_model=PostedLanguageModel(\n        model_provider=\"ANTHROPIC\",\n        model_resource=\"claude-3-5-sonnet-20240620\",\n        temperature=1.0,\n    ),\n    ellm_model=PostedEllmModel(\n        allow_short_responses=True,\n    ),\n    event_messages=PostedEventMessageSpecs(\n        on_new_chat=PostedEventMessageSpec(\n            enabled=False,\n            text=\"\",\n        ),\n        on_inactivity_timeout=PostedEventMessageSpec(\n            enabled=False,\n            text=\"\",\n        ),\n        on_max_duration_timeout=PostedEventMessageSpec(\n            enabled=False,\n            text=\"\",\n        ),\n    ),\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumeClient, Hume } from \"hume\";\n\nconst client = new HumeClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.empathicVoice.configs.createConfigVersion(\"1b60e1a0-cc59-424a-8d2c-189d354db3f3\", {\n    versionDescription: \"This is an updated version of the Weather Assistant Config.\",\n    eviVersion: \"2\",\n    prompt: {\n        id: \"af699d45-2985-42cc-91b9-af9e5da3bac5\",\n        version: 0\n    },\n    voice: {\n        provider: Hume.PostedVoiceProvider.HumeAi,\n        name: \"ITO\"\n    },\n    languageModel: {\n        modelProvider: Hume.PostedLanguageModelModelProvider.Anthropic,\n        modelResource: Hume.PostedLanguageModelModelResource.Claude35Sonnet20240620,\n        temperature: 1\n    },\n    ellmModel: {\n        allowShortResponses: true\n    },\n    eventMessages: {\n        onNewChat: {\n            enabled: false,\n            text: \"\"\n        },\n        onInactivityTimeout: {\n            enabled: false,\n            text: \"\"\n        },\n        onMaxDurationTimeout: {\n            enabled: false,\n            text: \"\"\n        }\n    }\n});\n",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/v0/evi/configs/:id",
            "responseStatusCode": 400,
            "pathParameters": {
              "id": ":id"
            },
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {
                "evi_version": "string"
              }
            },
            "responseBody": {
              "type": "json",
              "value": {
                "error": "string",
                "message": "string"
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://api.hume.ai/v0/evi/configs/:id \\\n     -H \"X-Hume-Api-Key: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n  \"evi_version\": \"string\"\n}'",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from hume import HumeClient\nfrom hume.empathic_voice import (\n    PostedConfigPromptSpec,\n    PostedEllmModel,\n    PostedEventMessageSpec,\n    PostedEventMessageSpecs,\n    PostedLanguageModel,\n    PostedVoice,\n)\n\nclient = HumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.empathic_voice.configs.create_config_version(\n    id=\"1b60e1a0-cc59-424a-8d2c-189d354db3f3\",\n    version_description=\"This is an updated version of the Weather Assistant Config.\",\n    evi_version=\"2\",\n    prompt=PostedConfigPromptSpec(\n        id=\"af699d45-2985-42cc-91b9-af9e5da3bac5\",\n        version=0,\n    ),\n    voice=PostedVoice(\n        provider=\"HUME_AI\",\n        name=\"ITO\",\n    ),\n    language_model=PostedLanguageModel(\n        model_provider=\"ANTHROPIC\",\n        model_resource=\"claude-3-5-sonnet-20240620\",\n        temperature=1.0,\n    ),\n    ellm_model=PostedEllmModel(\n        allow_short_responses=True,\n    ),\n    event_messages=PostedEventMessageSpecs(\n        on_new_chat=PostedEventMessageSpec(\n            enabled=False,\n            text=\"\",\n        ),\n        on_inactivity_timeout=PostedEventMessageSpec(\n            enabled=False,\n            text=\"\",\n        ),\n        on_max_duration_timeout=PostedEventMessageSpec(\n            enabled=False,\n            text=\"\",\n        ),\n    ),\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumeClient, Hume } from \"hume\";\n\nconst client = new HumeClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.empathicVoice.configs.createConfigVersion(\"1b60e1a0-cc59-424a-8d2c-189d354db3f3\", {\n    versionDescription: \"This is an updated version of the Weather Assistant Config.\",\n    eviVersion: \"2\",\n    prompt: {\n        id: \"af699d45-2985-42cc-91b9-af9e5da3bac5\",\n        version: 0\n    },\n    voice: {\n        provider: Hume.PostedVoiceProvider.HumeAi,\n        name: \"ITO\"\n    },\n    languageModel: {\n        modelProvider: Hume.PostedLanguageModelModelProvider.Anthropic,\n        modelResource: Hume.PostedLanguageModelModelResource.Claude35Sonnet20240620,\n        temperature: 1\n    },\n    ellmModel: {\n        allowShortResponses: true\n    },\n    eventMessages: {\n        onNewChat: {\n            enabled: false,\n            text: \"\"\n        },\n        onInactivityTimeout: {\n            enabled: false,\n            text: \"\"\n        },\n        onMaxDurationTimeout: {\n            enabled: false,\n            text: \"\"\n        }\n    }\n});\n",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "endpoint_configs.delete-config": {
        "id": "endpoint_configs.delete-config",
        "namespace": [
          "subpackage_configs"
        ],
        "description": "Deletes a **Config** and its versions.\n\nFor more details on configuration options and how to configure EVI, see our [configuration guide](/docs/empathic-voice-interface-evi/configuration).",
        "method": "DELETE",
        "path": [
          {
            "type": "literal",
            "value": "/v0/evi/configs/"
          },
          {
            "type": "pathParameter",
            "value": "id"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.hume.ai"
          }
        ],
        "pathParameters": [
          {
            "key": "id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "Identifier for a Config. Formatted as a UUID."
          }
        ],
        "requests": [],
        "responses": [],
        "errors": [
          {
            "description": "Bad Request",
            "name": "Configs Delete Config Request Bad Request Error",
            "statusCode": 400,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:ErrorResponse"
              }
            },
            "examples": [
              {
                "responseBody": {
                  "type": "json",
                  "value": {}
                }
              }
            ]
          }
        ],
        "examples": [
          {
            "path": "/v0/evi/configs/1b60e1a0-cc59-424a-8d2c-189d354db3f3",
            "responseStatusCode": 204,
            "pathParameters": {
              "id": "1b60e1a0-cc59-424a-8d2c-189d354db3f3"
            },
            "queryParameters": {},
            "headers": {},
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X DELETE https://api.hume.ai/v0/evi/configs/1b60e1a0-cc59-424a-8d2c-189d354db3f3 \\\n     -H \"X-Hume-Api-Key: <apiKey>\"",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from hume import HumeClient\n\nclient = HumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.empathic_voice.configs.delete_config(\n    id=\"1b60e1a0-cc59-424a-8d2c-189d354db3f3\",\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumeClient } from \"hume\";\n\nconst client = new HumeClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.empathicVoice.configs.deleteConfig(\"1b60e1a0-cc59-424a-8d2c-189d354db3f3\");\n",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/v0/evi/configs/:id",
            "responseStatusCode": 400,
            "pathParameters": {
              "id": ":id"
            },
            "queryParameters": {},
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "error": "string",
                "message": "string"
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X DELETE https://api.hume.ai/v0/evi/configs/:id \\\n     -H \"X-Hume-Api-Key: <apiKey>\"",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from hume import HumeClient\n\nclient = HumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.empathic_voice.configs.delete_config(\n    id=\"1b60e1a0-cc59-424a-8d2c-189d354db3f3\",\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumeClient } from \"hume\";\n\nconst client = new HumeClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.empathicVoice.configs.deleteConfig(\"1b60e1a0-cc59-424a-8d2c-189d354db3f3\");\n",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "endpoint_configs.update-config-name": {
        "id": "endpoint_configs.update-config-name",
        "namespace": [
          "subpackage_configs"
        ],
        "description": "Updates the name of a **Config**.\n\nFor more details on configuration options and how to configure EVI, see our [configuration guide](/docs/empathic-voice-interface-evi/configuration).",
        "method": "PATCH",
        "path": [
          {
            "type": "literal",
            "value": "/v0/evi/configs/"
          },
          {
            "type": "pathParameter",
            "value": "id"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.hume.ai"
          }
        ],
        "pathParameters": [
          {
            "key": "id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "Identifier for a Config. Formatted as a UUID."
          }
        ],
        "requests": [
          {
            "contentType": "application/json",
            "body": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "name",
                  "valueShape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  },
                  "description": "Name applied to all versions of a particular Config."
                }
              ]
            }
          }
        ],
        "responses": [],
        "errors": [
          {
            "description": "Bad Request",
            "name": "Configs Update Config Name Request Bad Request Error",
            "statusCode": 400,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:ErrorResponse"
              }
            },
            "examples": [
              {
                "responseBody": {
                  "type": "json",
                  "value": {}
                }
              }
            ]
          }
        ],
        "examples": [
          {
            "path": "/v0/evi/configs/:id",
            "responseStatusCode": 200,
            "pathParameters": {
              "id": ":id"
            },
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {
                "name": "string"
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X PATCH https://api.hume.ai/v0/evi/configs/:id \\\n     -H \"X-Hume-Api-Key: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n  \"name\": \"string\"\n}'",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from hume import HumeClient\n\nclient = HumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.empathic_voice.configs.update_config_name(\n    id=\"1b60e1a0-cc59-424a-8d2c-189d354db3f3\",\n    name=\"Updated Weather Assistant Config Name\",\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumeClient } from \"hume\";\n\nconst client = new HumeClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.empathicVoice.configs.updateConfigName(\"1b60e1a0-cc59-424a-8d2c-189d354db3f3\", {\n    name: \"Updated Weather Assistant Config Name\"\n});\n",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/v0/evi/configs/:id",
            "responseStatusCode": 400,
            "pathParameters": {
              "id": ":id"
            },
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {
                "name": "string"
              }
            },
            "responseBody": {
              "type": "json",
              "value": {
                "error": "string",
                "message": "string"
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X PATCH https://api.hume.ai/v0/evi/configs/:id \\\n     -H \"X-Hume-Api-Key: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n  \"name\": \"string\"\n}'",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from hume import HumeClient\n\nclient = HumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.empathic_voice.configs.update_config_name(\n    id=\"1b60e1a0-cc59-424a-8d2c-189d354db3f3\",\n    name=\"Updated Weather Assistant Config Name\",\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumeClient } from \"hume\";\n\nconst client = new HumeClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.empathicVoice.configs.updateConfigName(\"1b60e1a0-cc59-424a-8d2c-189d354db3f3\", {\n    name: \"Updated Weather Assistant Config Name\"\n});\n",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "endpoint_configs.get-config-version": {
        "id": "endpoint_configs.get-config-version",
        "namespace": [
          "subpackage_configs"
        ],
        "description": "Fetches a specified version of a **Config**.\n\nFor more details on configuration options and how to configure EVI, see our [configuration guide](/docs/empathic-voice-interface-evi/configuration).",
        "method": "GET",
        "path": [
          {
            "type": "literal",
            "value": "/v0/evi/configs/"
          },
          {
            "type": "pathParameter",
            "value": "id"
          },
          {
            "type": "literal",
            "value": "/version/"
          },
          {
            "type": "pathParameter",
            "value": "version"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.hume.ai"
          }
        ],
        "pathParameters": [
          {
            "key": "id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "Identifier for a Config. Formatted as a UUID."
          },
          {
            "key": "version",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            },
            "description": "Version number for a Config.\n\nConfigs, Prompts, Custom Voices, and Tools are versioned. This versioning system supports iterative development, allowing you to progressively refine configurations and revert to previous versions if needed.\n\nVersion numbers are integer values representing different iterations of the Config. Each update to the Config increments its version number."
          }
        ],
        "requests": [],
        "responses": [
          {
            "description": "Success",
            "statusCode": 200,
            "body": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:ReturnConfig"
              }
            }
          }
        ],
        "errors": [
          {
            "description": "Bad Request",
            "name": "Configs Get Config Version Request Bad Request Error",
            "statusCode": 400,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:ErrorResponse"
              }
            },
            "examples": [
              {
                "responseBody": {
                  "type": "json",
                  "value": {}
                }
              }
            ]
          }
        ],
        "examples": [
          {
            "path": "/v0/evi/configs/1b60e1a0-cc59-424a-8d2c-189d354db3f3/version/1",
            "responseStatusCode": 200,
            "pathParameters": {
              "id": "1b60e1a0-cc59-424a-8d2c-189d354db3f3",
              "version": 1
            },
            "queryParameters": {},
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "id": "1b60e1a0-cc59-424a-8d2c-189d354db3f3",
                "version": 1,
                "evi_version": "2",
                "version_description": "",
                "name": "Weather Assistant Config",
                "created_on": 1715275452390,
                "modified_on": 1715275452390,
                "prompt": {
                  "id": "af699d45-2985-42cc-91b9-af9e5da3bac5",
                  "version": 0,
                  "version_type": "FIXED",
                  "name": "Weather Assistant Prompt",
                  "created_on": 1715267200693,
                  "modified_on": 1715267200693,
                  "text": "<role>You are an AI weather assistant providing users with accurate and up-to-date weather information. Respond to user queries concisely and clearly. Use simple language and avoid technical jargon. Provide temperature, precipitation, wind conditions, and any weather alerts. Include helpful tips if severe weather is expected.</role>",
                  "version_description": ""
                },
                "voice": {
                  "provider": "HUME_AI",
                  "name": "SAMPLE VOICE",
                  "custom_voice": {
                    "id": "00aa8ee9-c50e-4ea1-9af0-7b08ad451704",
                    "version": 1,
                    "name": "SAMPLE VOICE",
                    "created_on": 1724704587367,
                    "modified_on": 1725489961583,
                    "base_voice": "KORA",
                    "parameter_model": "20241004-11parameter",
                    "parameters": {
                      "gender": 0,
                      "articulation": -10,
                      "assertiveness": 20,
                      "buoyancy": -30,
                      "confidence": -40,
                      "enthusiasm": 50,
                      "nasality": 45,
                      "relaxedness": -35,
                      "smoothness": 25,
                      "tepidity": 15,
                      "tightness": 5
                    }
                  }
                },
                "language_model": {
                  "model_provider": "ANTHROPIC",
                  "model_resource": "claude-3-5-sonnet-20240620",
                  "temperature": 1
                },
                "ellm_model": {
                  "allow_short_responses": false
                },
                "tools": [],
                "builtin_tools": [],
                "event_messages": {
                  "on_new_chat": {
                    "enabled": false,
                    "text": ""
                  },
                  "on_inactivity_timeout": {
                    "enabled": false,
                    "text": ""
                  },
                  "on_max_duration_timeout": {
                    "enabled": false,
                    "text": ""
                  }
                },
                "timeouts": {
                  "inactivity": {
                    "enabled": true,
                    "duration_secs": 600
                  },
                  "max_duration": {
                    "enabled": true,
                    "duration_secs": 1800
                  }
                }
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl https://api.hume.ai/v0/evi/configs/1b60e1a0-cc59-424a-8d2c-189d354db3f3/version/1 \\\n     -H \"X-Hume-Api-Key: <apiKey>\"",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from hume import HumeClient\n\nclient = HumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.empathic_voice.configs.get_config_version(\n    id=\"1b60e1a0-cc59-424a-8d2c-189d354db3f3\",\n    version=1,\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumeClient } from \"hume\";\n\nconst client = new HumeClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.empathicVoice.configs.getConfigVersion(\"1b60e1a0-cc59-424a-8d2c-189d354db3f3\", 1);\n",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/v0/evi/configs/:id/version/0",
            "responseStatusCode": 400,
            "pathParameters": {
              "id": ":id",
              "version": 0
            },
            "queryParameters": {},
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "error": "string",
                "message": "string"
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl https://api.hume.ai/v0/evi/configs/:id/version/0 \\\n     -H \"X-Hume-Api-Key: <apiKey>\"",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from hume import HumeClient\n\nclient = HumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.empathic_voice.configs.get_config_version(\n    id=\"1b60e1a0-cc59-424a-8d2c-189d354db3f3\",\n    version=1,\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumeClient } from \"hume\";\n\nconst client = new HumeClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.empathicVoice.configs.getConfigVersion(\"1b60e1a0-cc59-424a-8d2c-189d354db3f3\", 1);\n",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "endpoint_configs.delete-config-version": {
        "id": "endpoint_configs.delete-config-version",
        "namespace": [
          "subpackage_configs"
        ],
        "description": "Deletes a specified version of a **Config**.\n\nFor more details on configuration options and how to configure EVI, see our [configuration guide](/docs/empathic-voice-interface-evi/configuration).",
        "method": "DELETE",
        "path": [
          {
            "type": "literal",
            "value": "/v0/evi/configs/"
          },
          {
            "type": "pathParameter",
            "value": "id"
          },
          {
            "type": "literal",
            "value": "/version/"
          },
          {
            "type": "pathParameter",
            "value": "version"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.hume.ai"
          }
        ],
        "pathParameters": [
          {
            "key": "id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "Identifier for a Config. Formatted as a UUID."
          },
          {
            "key": "version",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            },
            "description": "Version number for a Config.\n\nConfigs, Prompts, Custom Voices, and Tools are versioned. This versioning system supports iterative development, allowing you to progressively refine configurations and revert to previous versions if needed.\n\nVersion numbers are integer values representing different iterations of the Config. Each update to the Config increments its version number."
          }
        ],
        "requests": [],
        "responses": [],
        "errors": [
          {
            "description": "Bad Request",
            "name": "Configs Delete Config Version Request Bad Request Error",
            "statusCode": 400,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:ErrorResponse"
              }
            },
            "examples": [
              {
                "responseBody": {
                  "type": "json",
                  "value": {}
                }
              }
            ]
          }
        ],
        "examples": [
          {
            "path": "/v0/evi/configs/1b60e1a0-cc59-424a-8d2c-189d354db3f3/version/1",
            "responseStatusCode": 204,
            "pathParameters": {
              "id": "1b60e1a0-cc59-424a-8d2c-189d354db3f3",
              "version": 1
            },
            "queryParameters": {},
            "headers": {},
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X DELETE https://api.hume.ai/v0/evi/configs/1b60e1a0-cc59-424a-8d2c-189d354db3f3/version/1 \\\n     -H \"X-Hume-Api-Key: <apiKey>\"",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from hume import HumeClient\n\nclient = HumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.empathic_voice.configs.delete_config_version(\n    id=\"1b60e1a0-cc59-424a-8d2c-189d354db3f3\",\n    version=1,\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumeClient } from \"hume\";\n\nconst client = new HumeClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.empathicVoice.configs.deleteConfigVersion(\"1b60e1a0-cc59-424a-8d2c-189d354db3f3\", 1);\n",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/v0/evi/configs/:id/version/0",
            "responseStatusCode": 400,
            "pathParameters": {
              "id": ":id",
              "version": 0
            },
            "queryParameters": {},
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "error": "string",
                "message": "string"
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X DELETE https://api.hume.ai/v0/evi/configs/:id/version/0 \\\n     -H \"X-Hume-Api-Key: <apiKey>\"",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from hume import HumeClient\n\nclient = HumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.empathic_voice.configs.delete_config_version(\n    id=\"1b60e1a0-cc59-424a-8d2c-189d354db3f3\",\n    version=1,\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumeClient } from \"hume\";\n\nconst client = new HumeClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.empathicVoice.configs.deleteConfigVersion(\"1b60e1a0-cc59-424a-8d2c-189d354db3f3\", 1);\n",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "endpoint_configs.update-config-description": {
        "id": "endpoint_configs.update-config-description",
        "namespace": [
          "subpackage_configs"
        ],
        "description": "Updates the description of a **Config**.\n\nFor more details on configuration options and how to configure EVI, see our [configuration guide](/docs/empathic-voice-interface-evi/configuration).",
        "method": "PATCH",
        "path": [
          {
            "type": "literal",
            "value": "/v0/evi/configs/"
          },
          {
            "type": "pathParameter",
            "value": "id"
          },
          {
            "type": "literal",
            "value": "/version/"
          },
          {
            "type": "pathParameter",
            "value": "version"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.hume.ai"
          }
        ],
        "pathParameters": [
          {
            "key": "id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "Identifier for a Config. Formatted as a UUID."
          },
          {
            "key": "version",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            },
            "description": "Version number for a Config.\n\nConfigs, Prompts, Custom Voices, and Tools are versioned. This versioning system supports iterative development, allowing you to progressively refine configurations and revert to previous versions if needed.\n\nVersion numbers are integer values representing different iterations of the Config. Each update to the Config increments its version number."
          }
        ],
        "requests": [
          {
            "contentType": "application/json",
            "body": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "version_description",
                  "valueShape": {
                    "type": "alias",
                    "value": {
                      "type": "optional",
                      "shape": {
                        "type": "alias",
                        "value": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "description": "An optional description of the Config version."
                }
              ]
            }
          }
        ],
        "responses": [
          {
            "description": "Success",
            "statusCode": 200,
            "body": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:ReturnConfig"
              }
            }
          }
        ],
        "errors": [
          {
            "description": "Bad Request",
            "name": "Configs Update Config Description Request Bad Request Error",
            "statusCode": 400,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:ErrorResponse"
              }
            },
            "examples": [
              {
                "responseBody": {
                  "type": "json",
                  "value": {}
                }
              }
            ]
          }
        ],
        "examples": [
          {
            "path": "/v0/evi/configs/1b60e1a0-cc59-424a-8d2c-189d354db3f3/version/1",
            "responseStatusCode": 200,
            "pathParameters": {
              "id": "1b60e1a0-cc59-424a-8d2c-189d354db3f3",
              "version": 1
            },
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {
                "version_description": "This is an updated version_description."
              }
            },
            "responseBody": {
              "type": "json",
              "value": {
                "id": "1b60e1a0-cc59-424a-8d2c-189d354db3f3",
                "version": 1,
                "evi_version": "2",
                "version_description": "This is an updated version_description.",
                "name": "Weather Assistant Config",
                "created_on": 1715275452390,
                "modified_on": 1715275452390,
                "prompt": {
                  "id": "af699d45-2985-42cc-91b9-af9e5da3bac5",
                  "version": 0,
                  "version_type": "FIXED",
                  "name": "Weather Assistant Prompt",
                  "created_on": 1715267200693,
                  "modified_on": 1715267200693,
                  "text": "<role>You are an AI weather assistant providing users with accurate and up-to-date weather information. Respond to user queries concisely and clearly. Use simple language and avoid technical jargon. Provide temperature, precipitation, wind conditions, and any weather alerts. Include helpful tips if severe weather is expected.</role>",
                  "version_description": ""
                },
                "voice": {
                  "provider": "HUME_AI",
                  "name": "SAMPLE VOICE",
                  "custom_voice": {
                    "id": "00aa8ee9-c50e-4ea1-9af0-7b08ad451704",
                    "version": 1,
                    "name": "SAMPLE VOICE",
                    "created_on": 1724704587367,
                    "modified_on": 1725489961583,
                    "base_voice": "KORA",
                    "parameter_model": "20241004-11parameter",
                    "parameters": {
                      "gender": 0,
                      "articulation": -10,
                      "assertiveness": 20,
                      "buoyancy": -30,
                      "confidence": -40,
                      "enthusiasm": 50,
                      "nasality": 45,
                      "relaxedness": -35,
                      "smoothness": 25,
                      "tepidity": 15,
                      "tightness": 5
                    }
                  }
                },
                "language_model": {
                  "model_provider": "ANTHROPIC",
                  "model_resource": "claude-3-5-sonnet-20240620",
                  "temperature": 1
                },
                "ellm_model": {
                  "allow_short_responses": false
                },
                "tools": [],
                "builtin_tools": [],
                "event_messages": {
                  "on_new_chat": {
                    "enabled": false,
                    "text": ""
                  },
                  "on_inactivity_timeout": {
                    "enabled": false,
                    "text": ""
                  },
                  "on_max_duration_timeout": {
                    "enabled": false,
                    "text": ""
                  }
                },
                "timeouts": {
                  "inactivity": {
                    "enabled": true,
                    "duration_secs": 600
                  },
                  "max_duration": {
                    "enabled": true,
                    "duration_secs": 1800
                  }
                }
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X PATCH https://api.hume.ai/v0/evi/configs/1b60e1a0-cc59-424a-8d2c-189d354db3f3/version/1 \\\n     -H \"X-Hume-Api-Key: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n  \"version_description\": \"This is an updated version_description.\"\n}'",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from hume import HumeClient\n\nclient = HumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.empathic_voice.configs.update_config_description(\n    id=\"1b60e1a0-cc59-424a-8d2c-189d354db3f3\",\n    version=1,\n    version_description=\"This is an updated version_description.\",\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumeClient } from \"hume\";\n\nconst client = new HumeClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.empathicVoice.configs.updateConfigDescription(\"1b60e1a0-cc59-424a-8d2c-189d354db3f3\", 1, {\n    versionDescription: \"This is an updated version_description.\"\n});\n",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/v0/evi/configs/:id/version/0",
            "responseStatusCode": 400,
            "pathParameters": {
              "id": ":id",
              "version": 0
            },
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {}
            },
            "responseBody": {
              "type": "json",
              "value": {
                "error": "string",
                "message": "string"
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X PATCH https://api.hume.ai/v0/evi/configs/:id/version/0 \\\n     -H \"X-Hume-Api-Key: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{}'",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from hume import HumeClient\n\nclient = HumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.empathic_voice.configs.update_config_description(\n    id=\"1b60e1a0-cc59-424a-8d2c-189d354db3f3\",\n    version=1,\n    version_description=\"This is an updated version_description.\",\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumeClient } from \"hume\";\n\nconst client = new HumeClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.empathicVoice.configs.updateConfigDescription(\"1b60e1a0-cc59-424a-8d2c-189d354db3f3\", 1, {\n    versionDescription: \"This is an updated version_description.\"\n});\n",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "endpoint_chats.list-chats": {
        "id": "endpoint_chats.list-chats",
        "namespace": [
          "subpackage_chats"
        ],
        "description": "Fetches a paginated list of **Chats**.",
        "method": "GET",
        "path": [
          {
            "type": "literal",
            "value": "/v0/evi/chats"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.hume.ai"
          }
        ],
        "queryParameters": [
          {
            "key": "page_number",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                }
              }
            },
            "description": "Specifies the page number to retrieve, enabling pagination.\n\nThis parameter uses zero-based indexing. For example, setting `page_number` to 0 retrieves the first page of results (items 0-9 if `page_size` is 10), setting `page_number` to 1 retrieves the second page (items 10-19), and so on. Defaults to 0, which retrieves the first page."
          },
          {
            "key": "page_size",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                }
              }
            },
            "description": "Specifies the maximum number of results to include per page, enabling pagination. The value must be between 1 and 100, inclusive.\n\nFor example, if `page_size` is set to 10, each page will include up to 10 items. Defaults to 10."
          },
          {
            "key": "ascending_order",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "boolean",
                      "default": false
                    }
                  }
                }
              }
            },
            "description": "Specifies the sorting order of the results based on their creation date. Set to true for ascending order (chronological, with the oldest records first) and false for descending order (reverse-chronological, with the newest records first). Defaults to true."
          }
        ],
        "requests": [],
        "responses": [
          {
            "description": "Success",
            "statusCode": 200,
            "body": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:ReturnPagedChats"
              }
            }
          }
        ],
        "errors": [
          {
            "description": "Bad Request",
            "name": "Chats List Chats Request Bad Request Error",
            "statusCode": 400,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:ErrorResponse"
              }
            },
            "examples": [
              {
                "responseBody": {
                  "type": "json",
                  "value": {}
                }
              }
            ]
          }
        ],
        "examples": [
          {
            "path": "/v0/evi/chats",
            "responseStatusCode": 200,
            "pathParameters": {},
            "queryParameters": {
              "page_number": 0,
              "page_size": 1,
              "ascending_order": true
            },
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "page_number": 0,
                "page_size": 1,
                "total_pages": 1,
                "pagination_direction": "ASC",
                "chats_page": [
                  {
                    "id": "470a49f6-1dec-4afe-8b61-035d3b2d63b0",
                    "chat_group_id": "9fc18597-3567-42d5-94d6-935bde84bf2f",
                    "status": "USER_ENDED",
                    "start_timestamp": 1716244940648,
                    "end_timestamp": 1716244958546,
                    "event_count": 3,
                    "metadata": "",
                    "config": {
                      "id": "1b60e1a0-cc59-424a-8d2c-189d354db3f3",
                      "version": 0
                    }
                  }
                ]
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -G https://api.hume.ai/v0/evi/chats \\\n     -H \"X-Hume-Api-Key: <apiKey>\" \\\n     -d page_number=0 \\\n     -d page_size=1 \\\n     -d ascending_order=true",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from hume import HumeClient\n\nclient = HumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\nresponse = client.empathic_voice.chats.list_chats(\n    page_number=0,\n    page_size=1,\n    ascending_order=True,\n)\nfor item in response:\n    yield item\n# alternatively, you can paginate page-by-page\nfor page in response.iter_pages():\n    yield page\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumeClient } from \"hume\";\n\nconst client = new HumeClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.empathicVoice.chats.listChats({\n    pageNumber: 0,\n    pageSize: 1,\n    ascendingOrder: true\n});\n",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/v0/evi/chats",
            "responseStatusCode": 400,
            "pathParameters": {},
            "queryParameters": {
              "page_number": 0,
              "page_size": 0
            },
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "error": "string",
                "message": "string"
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -G https://api.hume.ai/v0/evi/chats \\\n     -H \"X-Hume-Api-Key: <apiKey>\" \\\n     -d page_number=0 \\\n     -d page_size=0",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from hume import HumeClient\n\nclient = HumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\nresponse = client.empathic_voice.chats.list_chats(\n    page_number=0,\n    page_size=1,\n    ascending_order=True,\n)\nfor item in response:\n    yield item\n# alternatively, you can paginate page-by-page\nfor page in response.iter_pages():\n    yield page\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumeClient } from \"hume\";\n\nconst client = new HumeClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.empathicVoice.chats.listChats({\n    pageNumber: 0,\n    pageSize: 1,\n    ascendingOrder: true\n});\n",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "endpoint_chats.list-chat-events": {
        "id": "endpoint_chats.list-chat-events",
        "namespace": [
          "subpackage_chats"
        ],
        "description": "Fetches a paginated list of **Chat** events.",
        "method": "GET",
        "path": [
          {
            "type": "literal",
            "value": "/v0/evi/chats/"
          },
          {
            "type": "pathParameter",
            "value": "id"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.hume.ai"
          }
        ],
        "pathParameters": [
          {
            "key": "id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "Identifier for a Chat. Formatted as a UUID."
          }
        ],
        "queryParameters": [
          {
            "key": "page_size",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                }
              }
            },
            "description": "Specifies the maximum number of results to include per page, enabling pagination. The value must be between 1 and 100, inclusive.\n\nFor example, if `page_size` is set to 10, each page will include up to 10 items. Defaults to 10."
          },
          {
            "key": "page_number",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                }
              }
            },
            "description": "Specifies the page number to retrieve, enabling pagination.\n\nThis parameter uses zero-based indexing. For example, setting `page_number` to 0 retrieves the first page of results (items 0-9 if `page_size` is 10), setting `page_number` to 1 retrieves the second page (items 10-19), and so on. Defaults to 0, which retrieves the first page."
          },
          {
            "key": "ascending_order",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "boolean",
                      "default": false
                    }
                  }
                }
              }
            },
            "description": "Specifies the sorting order of the results based on their creation date. Set to true for ascending order (chronological, with the oldest records first) and false for descending order (reverse-chronological, with the newest records first). Defaults to true."
          }
        ],
        "requests": [],
        "responses": [
          {
            "description": "Success",
            "statusCode": 200,
            "body": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:ReturnChatPagedEvents"
              }
            }
          }
        ],
        "errors": [
          {
            "description": "Bad Request",
            "name": "Chats List Chat Events Request Bad Request Error",
            "statusCode": 400,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:ErrorResponse"
              }
            },
            "examples": [
              {
                "responseBody": {
                  "type": "json",
                  "value": {}
                }
              }
            ]
          }
        ],
        "examples": [
          {
            "path": "/v0/evi/chats/470a49f6-1dec-4afe-8b61-035d3b2d63b0",
            "responseStatusCode": 200,
            "pathParameters": {
              "id": "470a49f6-1dec-4afe-8b61-035d3b2d63b0"
            },
            "queryParameters": {
              "page_number": 0,
              "page_size": 3,
              "ascending_order": true
            },
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "id": "470a49f6-1dec-4afe-8b61-035d3b2d63b0",
                "chat_group_id": "9fc18597-3567-42d5-94d6-935bde84bf2f",
                "status": "USER_ENDED",
                "start_timestamp": 1716244940648,
                "pagination_direction": "ASC",
                "events_page": [
                  {
                    "id": "5d44bdbb-49a3-40fb-871d-32bf7e76efe7",
                    "chat_id": "470a49f6-1dec-4afe-8b61-035d3b2d63b0",
                    "timestamp": 1716244940762,
                    "role": "SYSTEM",
                    "type": "SYSTEM_PROMPT",
                    "message_text": "<role>You are an AI weather assistant providing users with accurate and up-to-date weather information. Respond to user queries concisely and clearly. Use simple language and avoid technical jargon. Provide temperature, precipitation, wind conditions, and any weather alerts. Include helpful tips if severe weather is expected.</role>",
                    "emotion_features": "",
                    "metadata": ""
                  },
                  {
                    "id": "5976ddf6-d093-4bb9-ba60-8f6c25832dde",
                    "chat_id": "470a49f6-1dec-4afe-8b61-035d3b2d63b0",
                    "timestamp": 1716244956278,
                    "role": "USER",
                    "type": "USER_MESSAGE",
                    "message_text": "Hello.",
                    "emotion_features": "{\"Admiration\": 0.09906005859375, \"Adoration\": 0.12213134765625, \"Aesthetic Appreciation\": 0.05035400390625, \"Amusement\": 0.16552734375, \"Anger\": 0.0037384033203125, \"Anxiety\": 0.010101318359375, \"Awe\": 0.058197021484375, \"Awkwardness\": 0.10552978515625, \"Boredom\": 0.1141357421875, \"Calmness\": 0.115234375, \"Concentration\": 0.00444793701171875, \"Confusion\": 0.0343017578125, \"Contemplation\": 0.00812530517578125, \"Contempt\": 0.009002685546875, \"Contentment\": 0.087158203125, \"Craving\": 0.00818634033203125, \"Desire\": 0.018310546875, \"Determination\": 0.003238677978515625, \"Disappointment\": 0.024169921875, \"Disgust\": 0.00702667236328125, \"Distress\": 0.00936126708984375, \"Doubt\": 0.00632476806640625, \"Ecstasy\": 0.0293731689453125, \"Embarrassment\": 0.01800537109375, \"Empathic Pain\": 0.0088348388671875, \"Entrancement\": 0.013397216796875, \"Envy\": 0.02557373046875, \"Excitement\": 0.12109375, \"Fear\": 0.004413604736328125, \"Guilt\": 0.016571044921875, \"Horror\": 0.00274658203125, \"Interest\": 0.2142333984375, \"Joy\": 0.29638671875, \"Love\": 0.16015625, \"Nostalgia\": 0.007843017578125, \"Pain\": 0.007160186767578125, \"Pride\": 0.00508880615234375, \"Realization\": 0.054229736328125, \"Relief\": 0.048736572265625, \"Romance\": 0.026397705078125, \"Sadness\": 0.0265350341796875, \"Satisfaction\": 0.051361083984375, \"Shame\": 0.00974273681640625, \"Surprise (negative)\": 0.0218963623046875, \"Surprise (positive)\": 0.216064453125, \"Sympathy\": 0.021728515625, \"Tiredness\": 0.0173797607421875, \"Triumph\": 0.004520416259765625}",
                    "metadata": "{\"segments\": [{\"content\": \"Hello.\", \"embedding\": [0.6181640625, 0.1763916015625, -30.921875, 1.2705078125, 0.927734375, 0.63720703125, 2.865234375, 0.1080322265625, 0.2978515625, 1.0107421875, 1.34375, 0.74560546875, 0.416259765625, 0.99462890625, -0.333740234375, 0.361083984375, -1.388671875, 1.0107421875, 1.3173828125, 0.55615234375, 0.541015625, -0.1837158203125, 1.697265625, 0.228515625, 2.087890625, -0.311767578125, 0.053680419921875, 1.3349609375, 0.95068359375, 0.00441741943359375, 0.705078125, 1.8916015625, -0.939453125, 0.93701171875, -0.28955078125, 1.513671875, 0.5595703125, 1.0126953125, -0.1624755859375, 1.4072265625, -0.28857421875, -0.4560546875, -0.1500244140625, -0.1102294921875, -0.222412109375, 0.8779296875, 1.275390625, 1.6689453125, 0.80712890625, -0.34814453125, -0.325439453125, 0.412841796875, 0.81689453125, 0.55126953125, 1.671875, 0.6611328125, 0.7451171875, 1.50390625, 1.0224609375, -1.671875, 0.7373046875, 2.1328125, 2.166015625, 0.41015625, -0.127685546875, 1.9345703125, -4.2734375, 0.332275390625, 0.26171875, 0.76708984375, 0.2685546875, 0.468017578125, 1.208984375, -1.517578125, 1.083984375, 0.84814453125, 1.0244140625, -0.0072174072265625, 1.34375, 1.0712890625, 1.517578125, -0.52001953125, 0.59228515625, 0.8154296875, -0.951171875, -0.07757568359375, 1.3330078125, 1.125, 0.61181640625, 1.494140625, 0.357421875, 1.1796875, 1.482421875, 0.8046875, 0.1536865234375, 1.8076171875, 0.68115234375, -15.171875, 1.2294921875, 0.319091796875, 0.499755859375, 1.5771484375, 0.94677734375, -0.2490234375, 0.88525390625, 3.47265625, 0.75927734375, 0.71044921875, 1.2333984375, 1.4169921875, -0.56640625, -1.8095703125, 1.37109375, 0.428955078125, 1.89453125, -0.39013671875, 0.1734619140625, 1.5595703125, -1.2294921875, 2.552734375, 0.58349609375, 0.2156982421875, -0.00984954833984375, -0.6865234375, -0.0272979736328125, -0.2264404296875, 2.853515625, 1.3896484375, 0.52978515625, 0.783203125, 3.0390625, 0.75537109375, 0.219970703125, 0.384521484375, 0.385986328125, 2.0546875, -0.10443115234375, 1.5146484375, 1.4296875, 1.9716796875, 1.1318359375, 0.31591796875, 0.338623046875, 1.654296875, -0.88037109375, -0.21484375, 1.45703125, 1.0380859375, -0.52294921875, -0.47802734375, 0.1650390625, 1.2392578125, -1.138671875, 0.56787109375, 1.318359375, 0.4287109375, 0.1981201171875, 2.4375, 0.281005859375, 0.89404296875, -0.1552734375, 0.6474609375, -0.08331298828125, 0.00740814208984375, -0.045501708984375, -0.578125, 2.02734375, 0.59228515625, 0.35693359375, 1.2919921875, 1.22265625, 1.0537109375, 0.145263671875, 1.05859375, -0.369140625, 0.207275390625, 0.78857421875, 0.599609375, 0.99072265625, 0.24462890625, 1.26953125, 0.08404541015625, 1.349609375, 0.73291015625, 1.3212890625, 0.388916015625, 1.0869140625, 0.9931640625, -1.5673828125, 0.0462646484375, 0.650390625, 0.253662109375, 0.58251953125, 1.8134765625, 0.8642578125, 2.591796875, 0.7314453125, 0.85986328125, 0.5615234375, 0.9296875, 0.04144287109375, 1.66015625, 1.99609375, 1.171875, 1.181640625, 1.5126953125, 0.0224456787109375, 0.58349609375, -1.4931640625, 0.81884765625, 0.732421875, -0.6455078125, -0.62451171875, 1.7802734375, 0.01526641845703125, -0.423095703125, 0.461669921875, 4.87890625, 1.2392578125, -0.6953125, 0.6689453125, 0.62451171875, -1.521484375, 1.7685546875, 0.810546875, 0.65478515625, 0.26123046875, 1.6396484375, 0.87548828125, 1.7353515625, 2.046875, 1.5634765625, 0.69384765625, 1.375, 0.8916015625, 1.0107421875, 0.1304931640625, 2.009765625, 0.06402587890625, -0.08428955078125, 0.04351806640625, -1.7529296875, 2.02734375, 3.521484375, 0.404541015625, 1.6337890625, -0.276611328125, 0.8837890625, -0.1287841796875, 0.91064453125, 0.8193359375, 0.701171875, 0.036529541015625, 1.26171875, 1.0478515625, -0.1422119140625, 1.0634765625, 0.61083984375, 1.3505859375, 1.208984375, 0.57275390625, 1.3623046875, 2.267578125, 0.484375, 0.9150390625, 0.56787109375, -0.70068359375, 0.27587890625, -0.70654296875, 0.8466796875, 0.57568359375, 1.6162109375, 0.87939453125, 2.248046875, -0.5458984375, 1.7744140625, 1.328125, 1.232421875, 0.6806640625, 0.9365234375, 1.052734375, -1.08984375, 1.8330078125, -0.4033203125, 1.0673828125, 0.297607421875, 1.5703125, 1.67578125, 1.34765625, 2.8203125, 2.025390625, -0.48583984375, 0.7626953125, 0.01007843017578125, 1.435546875, 0.007205963134765625, 0.05157470703125, -0.9853515625, 0.26708984375, 1.16796875, 1.2041015625, 1.99609375, -0.07916259765625, 1.244140625, -0.32080078125, 0.6748046875, 0.419921875, 1.3212890625, 1.291015625, 0.599609375, 0.0550537109375, 0.9599609375, 0.93505859375, 0.111083984375, 1.302734375, 0.0833740234375, 2.244140625, 1.25390625, 1.6015625, 0.58349609375, 1.7568359375, -0.263427734375, -0.019866943359375, -0.24658203125, -0.1871337890625, 0.927734375, 0.62255859375, 0.275146484375, 0.79541015625, 1.1796875, 1.1767578125, -0.26123046875, -0.268310546875, 1.8994140625, 1.318359375, 2.1875, 0.2469482421875, 1.41015625, 0.03973388671875, 1.2685546875, 1.1025390625, 0.9560546875, 0.865234375, -1.92578125, 1.154296875, 0.389892578125, 1.130859375, 0.95947265625, 0.72314453125, 2.244140625, 0.048553466796875, 0.626953125, 0.42919921875, 0.82275390625, 0.311767578125, -0.320556640625, 0.01041412353515625, 0.1483154296875, 0.10809326171875, -0.3173828125, 1.1337890625, -0.8642578125, 1.4033203125, 0.048828125, 1.1787109375, 0.98779296875, 1.818359375, 1.1552734375, 0.6015625, 1.2392578125, -1.2685546875, 0.39208984375, 0.83251953125, 0.224365234375, 0.0019989013671875, 0.87548828125, 1.6572265625, 1.107421875, 0.434814453125, 1.8251953125, 0.442626953125, 1.2587890625, 0.09320068359375, -0.896484375, 1.8017578125, 1.451171875, -0.0755615234375, 0.6083984375, 2.06640625, 0.673828125, -0.33740234375, 0.192138671875, 0.21435546875, 0.80224609375, -1.490234375, 0.9501953125, 0.86083984375, -0.40283203125, 4.109375, 2.533203125, 1.2529296875, 0.8271484375, 0.225830078125, 1.0478515625, -1.9755859375, 0.841796875, 0.392822265625, 0.525390625, 0.33935546875, -0.79443359375, 0.71630859375, 0.97998046875, -0.175537109375, 0.97705078125, 1.705078125, 0.29638671875, 0.68359375, 0.54150390625, 0.435791015625, 0.99755859375, -0.369140625, 1.009765625, -0.140380859375, 0.426513671875, 0.189697265625, 1.8193359375, 1.1201171875, -0.5009765625, -0.331298828125, 0.759765625, -0.09442138671875, 0.74609375, -1.947265625, 1.3544921875, -3.935546875, 2.544921875, 1.359375, 0.1363525390625, 0.79296875, 0.79931640625, -0.3466796875, 1.1396484375, -0.33447265625, 2.0078125, -0.241455078125, 0.6318359375, 0.365234375, 0.296142578125, 0.830078125, 1.0458984375, 0.5830078125, 0.61572265625, 14.0703125, -2.0078125, -0.381591796875, 1.228515625, 0.08282470703125, -0.67822265625, -0.04339599609375, 0.397216796875, 0.1656494140625, 0.137451171875, 0.244873046875, 1.1611328125, -1.3818359375, 0.8447265625, 1.171875, 0.36328125, 0.252685546875, 0.1197509765625, 0.232177734375, -0.020172119140625, 0.64404296875, -0.01100921630859375, -1.9267578125, 0.222412109375, 0.56005859375, 1.3046875, 1.1630859375, 1.197265625, 1.02734375, 1.6806640625, -0.043731689453125, 1.4697265625, 0.81201171875, 1.5390625, 1.240234375, -0.7353515625, 1.828125, 1.115234375, 1.931640625, -0.517578125, 0.77880859375, 1.0546875, 0.95361328125, 3.42578125, 0.0160369873046875, 0.875, 0.56005859375, 1.2421875, 1.986328125, 1.4814453125, 0.0948486328125, 1.115234375, 0.00665283203125, 2.09375, 0.3544921875, -0.52783203125, 1.2099609375, 0.45068359375, 0.65625, 0.1112060546875, 1.0751953125, -0.9521484375, -0.30029296875, 1.4462890625, 2.046875, 3.212890625, 1.68359375, 1.07421875, -0.5263671875, 0.74560546875, 1.37890625, 0.15283203125, 0.2440185546875, 0.62646484375, -0.1280517578125, 0.7646484375, -0.515625, -0.35693359375, 1.2958984375, 0.96923828125, 0.58935546875, 1.3701171875, 1.0673828125, 0.2337646484375, 0.93115234375, 0.66357421875, 6.0, 1.1025390625, -0.51708984375, -0.38330078125, 0.7197265625, 0.246826171875, -0.45166015625, 1.9521484375, 0.5546875, 0.08807373046875, 0.18505859375, 0.8857421875, -0.57177734375, 0.251708984375, 0.234375, 2.57421875, 0.9599609375, 0.5029296875, 0.10382080078125, 0.08331298828125, 0.66748046875, -0.349609375, 1.287109375, 0.259765625, 2.015625, 2.828125, -0.3095703125, -0.164306640625, -0.3408203125, 0.486572265625, 0.8466796875, 1.9130859375, 0.09088134765625, 0.66552734375, 0.00972747802734375, -0.83154296875, 1.755859375, 0.654296875, 0.173828125, 0.27587890625, -0.47607421875, -0.264404296875, 0.7529296875, 0.6533203125, 0.7275390625, 0.499755859375, 0.833984375, -0.44775390625, -0.05078125, -0.454833984375, 0.75439453125, 0.68505859375, 0.210693359375, -0.283935546875, -0.53564453125, 0.96826171875, 0.861328125, -3.33984375, -0.26171875, 0.77734375, 0.26513671875, -0.14111328125, -0.042236328125, -0.84814453125, 0.2137451171875, 0.94921875, 0.65185546875, -0.5380859375, 0.1529541015625, -0.360595703125, -0.0333251953125, -0.69189453125, 0.8974609375, 0.7109375, 0.81494140625, -0.259521484375, 1.1904296875, 0.62158203125, 1.345703125, 0.89404296875, 0.70556640625, 1.0673828125, 1.392578125, 0.5068359375, 0.962890625, 0.736328125, 1.55078125, 0.50390625, -0.398681640625, 2.361328125, 0.345947265625, -0.61962890625, 0.330078125, 0.75439453125, -0.673828125, -0.2379150390625, 1.5673828125, 1.369140625, 0.1119384765625, -0.1834716796875, 1.4599609375, -0.77587890625, 0.5556640625, 0.09954833984375, 0.0285186767578125, 0.58935546875, -0.501953125, 0.212890625, 0.02679443359375, 0.1715087890625, 0.03466796875, -0.564453125, 2.029296875, 2.45703125, -0.72216796875, 2.138671875, 0.50830078125, -0.09356689453125, 0.230224609375, 1.6943359375, 1.5126953125, 0.39453125, 0.411376953125, 1.07421875, -0.8046875, 0.51416015625, 0.2271728515625, -0.283447265625, 0.38427734375, 0.73388671875, 0.6962890625, 1.4990234375, 0.02813720703125, 0.40478515625, 1.2451171875, 1.1162109375, -5.5703125, 0.76171875, 0.322021484375, 1.0361328125, 1.197265625, 0.1163330078125, 0.2425537109375, 1.5595703125, 1.5791015625, -0.0921630859375, 0.484619140625, 1.9052734375, 5.31640625, 1.6337890625, 0.95947265625, -0.1751708984375, 0.466552734375, 0.8330078125, 1.03125, 0.2044677734375, 0.31298828125, -1.1220703125, 0.5517578125, 0.93505859375, 0.45166015625, 1.951171875, 0.65478515625, 1.30859375, 1.0859375, 0.56494140625, 2.322265625, 0.242919921875, 1.81640625, -0.469970703125, -0.841796875, 0.90869140625, 1.5361328125, 0.923828125, 1.0595703125, 0.356689453125, -0.46142578125, 2.134765625, 1.3037109375, -0.32373046875, -9.2265625, 0.4521484375, 0.88037109375, -0.53955078125, 0.96484375, 0.7705078125, 0.84521484375, 1.580078125, -0.1448974609375, 0.7607421875, 1.0166015625, -0.086669921875, 1.611328125, 0.05938720703125, 0.5078125, 0.8427734375, 2.431640625, 0.66357421875, 3.203125, 0.132080078125, 0.461181640625, 0.779296875, 1.9482421875, 1.8720703125, 0.845703125, -1.3837890625, -0.138916015625, 0.35546875, 0.2457275390625, 0.75341796875, 1.828125, 1.4169921875, 0.60791015625, 1.0068359375, 1.109375, 0.484130859375, -0.302001953125, 0.4951171875, 0.802734375, 1.9482421875, 0.916015625, 0.1646728515625, 2.599609375, 1.7177734375, -0.2374267578125, 0.98046875, 0.39306640625, -1.1396484375, 1.6533203125, 0.375244140625], \"scores\": [0.09906005859375, 0.12213134765625, 0.05035400390625, 0.16552734375, 0.0037384033203125, 0.010101318359375, 0.058197021484375, 0.10552978515625, 0.1141357421875, 0.115234375, 0.00444793701171875, 0.00812530517578125, 0.0343017578125, 0.009002685546875, 0.087158203125, 0.00818634033203125, 0.003238677978515625, 0.024169921875, 0.00702667236328125, 0.00936126708984375, 0.00632476806640625, 0.0293731689453125, 0.01800537109375, 0.0088348388671875, 0.013397216796875, 0.02557373046875, 0.12109375, 0.004413604736328125, 0.016571044921875, 0.00274658203125, 0.2142333984375, 0.29638671875, 0.16015625, 0.007843017578125, 0.007160186767578125, 0.00508880615234375, 0.054229736328125, 0.048736572265625, 0.026397705078125, 0.0265350341796875, 0.051361083984375, 0.018310546875, 0.00974273681640625, 0.0218963623046875, 0.216064453125, 0.021728515625, 0.0173797607421875, 0.004520416259765625], \"stoks\": [52, 52, 52, 52, 52, 41, 41, 374, 303, 303, 303, 427], \"time\": {\"begin_ms\": 640, \"end_ms\": 1140}}]}"
                  },
                  {
                    "id": "7645a0d1-2e64-410d-83a8-b96040432e9a",
                    "chat_id": "470a49f6-1dec-4afe-8b61-035d3b2d63b0",
                    "timestamp": 1716244957031,
                    "role": "AGENT",
                    "type": "AGENT_MESSAGE",
                    "message_text": "Hello!",
                    "emotion_features": "{\"Admiration\": 0.044921875, \"Adoration\": 0.0253753662109375, \"Aesthetic Appreciation\": 0.03265380859375, \"Amusement\": 0.118408203125, \"Anger\": 0.06719970703125, \"Anxiety\": 0.0411376953125, \"Awe\": 0.03802490234375, \"Awkwardness\": 0.056549072265625, \"Boredom\": 0.04217529296875, \"Calmness\": 0.08709716796875, \"Concentration\": 0.070556640625, \"Confusion\": 0.06964111328125, \"Contemplation\": 0.0343017578125, \"Contempt\": 0.037689208984375, \"Contentment\": 0.059417724609375, \"Craving\": 0.01132965087890625, \"Desire\": 0.01406097412109375, \"Determination\": 0.1143798828125, \"Disappointment\": 0.051177978515625, \"Disgust\": 0.028594970703125, \"Distress\": 0.054901123046875, \"Doubt\": 0.04638671875, \"Ecstasy\": 0.0258026123046875, \"Embarrassment\": 0.0222015380859375, \"Empathic Pain\": 0.015777587890625, \"Entrancement\": 0.0160980224609375, \"Envy\": 0.0163421630859375, \"Excitement\": 0.129638671875, \"Fear\": 0.03125, \"Guilt\": 0.01483917236328125, \"Horror\": 0.0194549560546875, \"Interest\": 0.1341552734375, \"Joy\": 0.0738525390625, \"Love\": 0.0216522216796875, \"Nostalgia\": 0.0210418701171875, \"Pain\": 0.020721435546875, \"Pride\": 0.05499267578125, \"Realization\": 0.0728759765625, \"Relief\": 0.04052734375, \"Romance\": 0.0129241943359375, \"Sadness\": 0.0254669189453125, \"Satisfaction\": 0.07159423828125, \"Shame\": 0.01495361328125, \"Surprise (negative)\": 0.05560302734375, \"Surprise (positive)\": 0.07965087890625, \"Sympathy\": 0.022247314453125, \"Tiredness\": 0.0194549560546875, \"Triumph\": 0.04107666015625}",
                    "metadata": ""
                  }
                ],
                "page_number": 0,
                "page_size": 3,
                "total_pages": 1,
                "end_timestamp": 1716244958546,
                "metadata": "",
                "config": {
                  "id": "1b60e1a0-cc59-424a-8d2c-189d354db3f3",
                  "version": 0
                }
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -G https://api.hume.ai/v0/evi/chats/470a49f6-1dec-4afe-8b61-035d3b2d63b0 \\\n     -H \"X-Hume-Api-Key: <apiKey>\" \\\n     -d page_number=0 \\\n     -d page_size=3 \\\n     -d ascending_order=true",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from hume import HumeClient\n\nclient = HumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\nresponse = client.empathic_voice.chats.list_chat_events(\n    id=\"470a49f6-1dec-4afe-8b61-035d3b2d63b0\",\n    page_number=0,\n    page_size=3,\n    ascending_order=True,\n)\nfor item in response:\n    yield item\n# alternatively, you can paginate page-by-page\nfor page in response.iter_pages():\n    yield page\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumeClient } from \"hume\";\n\nconst client = new HumeClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.empathicVoice.chats.listChatEvents(\"470a49f6-1dec-4afe-8b61-035d3b2d63b0\", {\n    pageNumber: 0,\n    pageSize: 3,\n    ascendingOrder: true\n});\n",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/v0/evi/chats/:id",
            "responseStatusCode": 400,
            "pathParameters": {
              "id": ":id"
            },
            "queryParameters": {
              "page_size": 0,
              "page_number": 0
            },
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "error": "string",
                "message": "string"
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -G https://api.hume.ai/v0/evi/chats/:id \\\n     -H \"X-Hume-Api-Key: <apiKey>\" \\\n     -d page_size=0 \\\n     -d page_number=0",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from hume import HumeClient\n\nclient = HumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\nresponse = client.empathic_voice.chats.list_chat_events(\n    id=\"470a49f6-1dec-4afe-8b61-035d3b2d63b0\",\n    page_number=0,\n    page_size=3,\n    ascending_order=True,\n)\nfor item in response:\n    yield item\n# alternatively, you can paginate page-by-page\nfor page in response.iter_pages():\n    yield page\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumeClient } from \"hume\";\n\nconst client = new HumeClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.empathicVoice.chats.listChatEvents(\"470a49f6-1dec-4afe-8b61-035d3b2d63b0\", {\n    pageNumber: 0,\n    pageSize: 3,\n    ascendingOrder: true\n});\n",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "endpoint_chats.get-audio": {
        "id": "endpoint_chats.get-audio",
        "namespace": [
          "subpackage_chats"
        ],
        "description": "Fetches the audio of a previous **Chat**. For more details, see our guide on audio reconstruction [here](/docs/empathic-voice-interface-evi/faq#can-i-access-the-audio-of-previous-conversations-with-evi).",
        "method": "GET",
        "path": [
          {
            "type": "literal",
            "value": "/v0/evi/chats/"
          },
          {
            "type": "pathParameter",
            "value": "id"
          },
          {
            "type": "literal",
            "value": "/audio"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.hume.ai"
          }
        ],
        "pathParameters": [
          {
            "key": "id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "Identifier for a chat. Formatted as a UUID."
          }
        ],
        "requests": [],
        "responses": [
          {
            "description": "Success",
            "statusCode": 200,
            "body": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:ReturnChatAudioReconstruction"
              }
            }
          }
        ],
        "errors": [
          {
            "description": "Bad Request",
            "name": "Chats Get Audio Request Bad Request Error",
            "statusCode": 400,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:ErrorResponse"
              }
            },
            "examples": [
              {
                "responseBody": {
                  "type": "json",
                  "value": {}
                }
              }
            ]
          }
        ],
        "examples": [
          {
            "path": "/v0/evi/chats/470a49f6-1dec-4afe-8b61-035d3b2d63b0/audio",
            "responseStatusCode": 200,
            "pathParameters": {
              "id": "470a49f6-1dec-4afe-8b61-035d3b2d63b0"
            },
            "queryParameters": {},
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "id": "470a49f6-1dec-4afe-8b61-035d3b2d63b0",
                "user_id": "e6235940-cfda-3988-9147-ff531627cf42",
                "status": "COMPLETE",
                "filename": "e6235940-cfda-3988-9147-ff531627cf42/470a49f6-1dec-4afe-8b61-035d3b2d63b0/reconstructed_audio.mp4",
                "modified_at": 1729875432555,
                "signed_audio_url": "https://storage.googleapis.com/...etc.",
                "signed_url_expiration_timestamp_millis": 1730232816964
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl https://api.hume.ai/v0/evi/chats/470a49f6-1dec-4afe-8b61-035d3b2d63b0/audio \\\n     -H \"X-Hume-Api-Key: <apiKey>\"",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from hume import HumeClient\n\nclient = HumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.empathic_voice.chats.get_audio(\n    id=\"470a49f6-1dec-4afe-8b61-035d3b2d63b0\",\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumeClient } from \"hume\";\n\nconst client = new HumeClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.empathicVoice.chats.getAudio(\"470a49f6-1dec-4afe-8b61-035d3b2d63b0\");\n",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/v0/evi/chats/:id/audio",
            "responseStatusCode": 400,
            "pathParameters": {
              "id": ":id"
            },
            "queryParameters": {},
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "error": "string",
                "message": "string"
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl https://api.hume.ai/v0/evi/chats/:id/audio \\\n     -H \"X-Hume-Api-Key: <apiKey>\"",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from hume import HumeClient\n\nclient = HumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.empathic_voice.chats.get_audio(\n    id=\"470a49f6-1dec-4afe-8b61-035d3b2d63b0\",\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumeClient } from \"hume\";\n\nconst client = new HumeClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.empathicVoice.chats.getAudio(\"470a49f6-1dec-4afe-8b61-035d3b2d63b0\");\n",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "endpoint_chatGroups.list-chat-groups": {
        "id": "endpoint_chatGroups.list-chat-groups",
        "namespace": [
          "subpackage_chatGroups"
        ],
        "description": "Fetches a paginated list of **Chat Groups**.",
        "method": "GET",
        "path": [
          {
            "type": "literal",
            "value": "/v0/evi/chat_groups"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.hume.ai"
          }
        ],
        "queryParameters": [
          {
            "key": "page_number",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                }
              }
            },
            "description": "Specifies the page number to retrieve, enabling pagination.\n\nThis parameter uses zero-based indexing. For example, setting `page_number` to 0 retrieves the first page of results (items 0-9 if `page_size` is 10), setting `page_number` to 1 retrieves the second page (items 10-19), and so on. Defaults to 0, which retrieves the first page."
          },
          {
            "key": "page_size",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                }
              }
            },
            "description": "Specifies the maximum number of results to include per page, enabling pagination. The value must be between 1 and 100, inclusive.\n\nFor example, if `page_size` is set to 10, each page will include up to 10 items. Defaults to 10."
          },
          {
            "key": "ascending_order",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "boolean",
                      "default": false
                    }
                  }
                }
              }
            },
            "description": "Specifies the sorting order of the results based on their creation date. Set to true for ascending order (chronological, with the oldest records first) and false for descending order (reverse-chronological, with the newest records first). Defaults to true."
          },
          {
            "key": "config_id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "description": "The unique identifier for an EVI configuration.\n\nFilter Chat Groups to only include Chats that used this `config_id` in their most recent Chat."
          }
        ],
        "requests": [],
        "responses": [
          {
            "description": "Success",
            "statusCode": 200,
            "body": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:ReturnPagedChatGroups"
              }
            }
          }
        ],
        "errors": [
          {
            "description": "Bad Request",
            "name": "Chat Groups List Chat Groups Request Bad Request Error",
            "statusCode": 400,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:ErrorResponse"
              }
            },
            "examples": [
              {
                "responseBody": {
                  "type": "json",
                  "value": {}
                }
              }
            ]
          }
        ],
        "examples": [
          {
            "path": "/v0/evi/chat_groups",
            "responseStatusCode": 200,
            "pathParameters": {},
            "queryParameters": {
              "page_number": 0,
              "page_size": 1,
              "ascending_order": true,
              "config_id": "1b60e1a0-cc59-424a-8d2c-189d354db3f3"
            },
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "page_number": 0,
                "page_size": 1,
                "total_pages": 1,
                "pagination_direction": "ASC",
                "chat_groups_page": [
                  {
                    "id": "697056f0-6c7e-487d-9bd8-9c19df79f05f",
                    "first_start_timestamp": 1721844196397,
                    "most_recent_start_timestamp": 1721861821717,
                    "num_chats": 5,
                    "most_recent_chat_id": "dfdbdd4d-0ddf-418b-8fc4-80a266579d36",
                    "active": false
                  }
                ]
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -G https://api.hume.ai/v0/evi/chat_groups \\\n     -H \"X-Hume-Api-Key: <apiKey>\" \\\n     -d page_number=0 \\\n     -d page_size=1 \\\n     -d ascending_order=true \\\n     -d config_id=1b60e1a0-cc59-424a-8d2c-189d354db3f3",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from hume import HumeClient\n\nclient = HumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.empathic_voice.chat_groups.list_chat_groups(\n    page_number=0,\n    page_size=1,\n    ascending_order=True,\n    config_id=\"1b60e1a0-cc59-424a-8d2c-189d354db3f3\",\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumeClient } from \"hume\";\n\nconst client = new HumeClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.empathicVoice.chatGroups.listChatGroups({\n    pageNumber: 0,\n    pageSize: 1,\n    ascendingOrder: true,\n    configId: \"1b60e1a0-cc59-424a-8d2c-189d354db3f3\"\n});\n",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/v0/evi/chat_groups",
            "responseStatusCode": 400,
            "pathParameters": {},
            "queryParameters": {
              "page_number": 0,
              "page_size": 0
            },
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "error": "string",
                "message": "string"
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -G https://api.hume.ai/v0/evi/chat_groups \\\n     -H \"X-Hume-Api-Key: <apiKey>\" \\\n     -d page_number=0 \\\n     -d page_size=0",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from hume import HumeClient\n\nclient = HumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.empathic_voice.chat_groups.list_chat_groups(\n    page_number=0,\n    page_size=1,\n    ascending_order=True,\n    config_id=\"1b60e1a0-cc59-424a-8d2c-189d354db3f3\",\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumeClient } from \"hume\";\n\nconst client = new HumeClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.empathicVoice.chatGroups.listChatGroups({\n    pageNumber: 0,\n    pageSize: 1,\n    ascendingOrder: true,\n    configId: \"1b60e1a0-cc59-424a-8d2c-189d354db3f3\"\n});\n",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "endpoint_chatGroups.get-chat-group": {
        "id": "endpoint_chatGroups.get-chat-group",
        "namespace": [
          "subpackage_chatGroups"
        ],
        "description": "Fetches a **ChatGroup** by ID, including a paginated list of **Chats** associated with the **ChatGroup**.",
        "method": "GET",
        "path": [
          {
            "type": "literal",
            "value": "/v0/evi/chat_groups/"
          },
          {
            "type": "pathParameter",
            "value": "id"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.hume.ai"
          }
        ],
        "pathParameters": [
          {
            "key": "id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "Identifier for a Chat Group. Formatted as a UUID."
          }
        ],
        "queryParameters": [
          {
            "key": "page_size",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                }
              }
            },
            "description": "Specifies the maximum number of results to include per page, enabling pagination. The value must be between 1 and 100, inclusive.\n\nFor example, if `page_size` is set to 10, each page will include up to 10 items. Defaults to 10."
          },
          {
            "key": "page_number",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                }
              }
            },
            "description": "Specifies the page number to retrieve, enabling pagination.\n\nThis parameter uses zero-based indexing. For example, setting `page_number` to 0 retrieves the first page of results (items 0-9 if `page_size` is 10), setting `page_number` to 1 retrieves the second page (items 10-19), and so on. Defaults to 0, which retrieves the first page."
          },
          {
            "key": "ascending_order",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "boolean",
                      "default": false
                    }
                  }
                }
              }
            },
            "description": "Specifies the sorting order of the results based on their creation date. Set to true for ascending order (chronological, with the oldest records first) and false for descending order (reverse-chronological, with the newest records first). Defaults to true."
          }
        ],
        "requests": [],
        "responses": [
          {
            "description": "Success",
            "statusCode": 200,
            "body": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:ReturnChatGroupPagedChats"
              }
            }
          }
        ],
        "errors": [
          {
            "description": "Bad Request",
            "name": "Chat Groups Get Chat Group Request Bad Request Error",
            "statusCode": 400,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:ErrorResponse"
              }
            },
            "examples": [
              {
                "responseBody": {
                  "type": "json",
                  "value": {}
                }
              }
            ]
          }
        ],
        "examples": [
          {
            "path": "/v0/evi/chat_groups/697056f0-6c7e-487d-9bd8-9c19df79f05f",
            "responseStatusCode": 200,
            "pathParameters": {
              "id": "697056f0-6c7e-487d-9bd8-9c19df79f05f"
            },
            "queryParameters": {
              "page_number": 0,
              "page_size": 1,
              "ascending_order": true
            },
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "id": "369846cf-6ad5-404d-905e-a8acb5cdfc78",
                "first_start_timestamp": 1712334213647,
                "most_recent_start_timestamp": 1712334213647,
                "num_chats": 1,
                "page_number": 0,
                "page_size": 1,
                "total_pages": 1,
                "pagination_direction": "ASC",
                "chats_page": [
                  {
                    "id": "6375d4f8-cd3e-4d6b-b13b-ace66b7c8aaa",
                    "chat_group_id": "369846cf-6ad5-404d-905e-a8acb5cdfc78",
                    "status": "USER_ENDED",
                    "start_timestamp": 1712334213647,
                    "end_timestamp": 1712334332571,
                    "event_count": 0
                  }
                ],
                "active": false
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -G https://api.hume.ai/v0/evi/chat_groups/697056f0-6c7e-487d-9bd8-9c19df79f05f \\\n     -H \"X-Hume-Api-Key: <apiKey>\" \\\n     -d page_number=0 \\\n     -d page_size=1 \\\n     -d ascending_order=true",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from hume import HumeClient\n\nclient = HumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.empathic_voice.chat_groups.get_chat_group(\n    id=\"697056f0-6c7e-487d-9bd8-9c19df79f05f\",\n    page_number=0,\n    page_size=1,\n    ascending_order=True,\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumeClient } from \"hume\";\n\nconst client = new HumeClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.empathicVoice.chatGroups.getChatGroup(\"697056f0-6c7e-487d-9bd8-9c19df79f05f\", {\n    pageNumber: 0,\n    pageSize: 1,\n    ascendingOrder: true\n});\n",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/v0/evi/chat_groups/:id",
            "responseStatusCode": 400,
            "pathParameters": {
              "id": ":id"
            },
            "queryParameters": {
              "page_size": 0,
              "page_number": 0
            },
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "error": "string",
                "message": "string"
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -G https://api.hume.ai/v0/evi/chat_groups/:id \\\n     -H \"X-Hume-Api-Key: <apiKey>\" \\\n     -d page_size=0 \\\n     -d page_number=0",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from hume import HumeClient\n\nclient = HumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.empathic_voice.chat_groups.get_chat_group(\n    id=\"697056f0-6c7e-487d-9bd8-9c19df79f05f\",\n    page_number=0,\n    page_size=1,\n    ascending_order=True,\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumeClient } from \"hume\";\n\nconst client = new HumeClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.empathicVoice.chatGroups.getChatGroup(\"697056f0-6c7e-487d-9bd8-9c19df79f05f\", {\n    pageNumber: 0,\n    pageSize: 1,\n    ascendingOrder: true\n});\n",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "endpoint_chatGroups.list-chat-group-events": {
        "id": "endpoint_chatGroups.list-chat-group-events",
        "namespace": [
          "subpackage_chatGroups"
        ],
        "description": "Fetches a paginated list of **Chat** events associated with a **Chat Group**.",
        "method": "GET",
        "path": [
          {
            "type": "literal",
            "value": "/v0/evi/chat_groups/"
          },
          {
            "type": "pathParameter",
            "value": "id"
          },
          {
            "type": "literal",
            "value": "/events"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.hume.ai"
          }
        ],
        "pathParameters": [
          {
            "key": "id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "Identifier for a Chat Group. Formatted as a UUID."
          }
        ],
        "queryParameters": [
          {
            "key": "page_size",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                }
              }
            },
            "description": "Specifies the maximum number of results to include per page, enabling pagination. The value must be between 1 and 100, inclusive.\n\nFor example, if `page_size` is set to 10, each page will include up to 10 items. Defaults to 10."
          },
          {
            "key": "page_number",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                }
              }
            },
            "description": "Specifies the page number to retrieve, enabling pagination.\n\nThis parameter uses zero-based indexing. For example, setting `page_number` to 0 retrieves the first page of results (items 0-9 if `page_size` is 10), setting `page_number` to 1 retrieves the second page (items 10-19), and so on. Defaults to 0, which retrieves the first page."
          },
          {
            "key": "ascending_order",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "boolean",
                      "default": false
                    }
                  }
                }
              }
            },
            "description": "Specifies the sorting order of the results based on their creation date. Set to true for ascending order (chronological, with the oldest records first) and false for descending order (reverse-chronological, with the newest records first). Defaults to true."
          }
        ],
        "requests": [],
        "responses": [
          {
            "description": "Success",
            "statusCode": 200,
            "body": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:ReturnChatGroupPagedEvents"
              }
            }
          }
        ],
        "errors": [
          {
            "description": "Bad Request",
            "name": "Chat Groups List Chat Group Events Request Bad Request Error",
            "statusCode": 400,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:ErrorResponse"
              }
            },
            "examples": [
              {
                "responseBody": {
                  "type": "json",
                  "value": {}
                }
              }
            ]
          }
        ],
        "examples": [
          {
            "path": "/v0/evi/chat_groups/697056f0-6c7e-487d-9bd8-9c19df79f05f/events",
            "responseStatusCode": 200,
            "pathParameters": {
              "id": "697056f0-6c7e-487d-9bd8-9c19df79f05f"
            },
            "queryParameters": {
              "page_number": 0,
              "page_size": 3,
              "ascending_order": true
            },
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "id": "697056f0-6c7e-487d-9bd8-9c19df79f05f",
                "page_number": 0,
                "page_size": 3,
                "total_pages": 1,
                "pagination_direction": "ASC",
                "events_page": [
                  {
                    "id": "5d44bdbb-49a3-40fb-871d-32bf7e76efe7",
                    "chat_id": "470a49f6-1dec-4afe-8b61-035d3b2d63b0",
                    "timestamp": 1716244940762,
                    "role": "SYSTEM",
                    "type": "SYSTEM_PROMPT",
                    "message_text": "<role>You are an AI weather assistant providing users with accurate and up-to-date weather information. Respond to user queries concisely and clearly. Use simple language and avoid technical jargon. Provide temperature, precipitation, wind conditions, and any weather alerts. Include helpful tips if severe weather is expected.</role>",
                    "emotion_features": "",
                    "metadata": ""
                  },
                  {
                    "id": "5976ddf6-d093-4bb9-ba60-8f6c25832dde",
                    "chat_id": "470a49f6-1dec-4afe-8b61-035d3b2d63b0",
                    "timestamp": 1716244956278,
                    "role": "USER",
                    "type": "USER_MESSAGE",
                    "message_text": "Hello.",
                    "emotion_features": "{\"Admiration\": 0.09906005859375, \"Adoration\": 0.12213134765625, \"Aesthetic Appreciation\": 0.05035400390625, \"Amusement\": 0.16552734375, \"Anger\": 0.0037384033203125, \"Anxiety\": 0.010101318359375, \"Awe\": 0.058197021484375, \"Awkwardness\": 0.10552978515625, \"Boredom\": 0.1141357421875, \"Calmness\": 0.115234375, \"Concentration\": 0.00444793701171875, \"Confusion\": 0.0343017578125, \"Contemplation\": 0.00812530517578125, \"Contempt\": 0.009002685546875, \"Contentment\": 0.087158203125, \"Craving\": 0.00818634033203125, \"Desire\": 0.018310546875, \"Determination\": 0.003238677978515625, \"Disappointment\": 0.024169921875, \"Disgust\": 0.00702667236328125, \"Distress\": 0.00936126708984375, \"Doubt\": 0.00632476806640625, \"Ecstasy\": 0.0293731689453125, \"Embarrassment\": 0.01800537109375, \"Empathic Pain\": 0.0088348388671875, \"Entrancement\": 0.013397216796875, \"Envy\": 0.02557373046875, \"Excitement\": 0.12109375, \"Fear\": 0.004413604736328125, \"Guilt\": 0.016571044921875, \"Horror\": 0.00274658203125, \"Interest\": 0.2142333984375, \"Joy\": 0.29638671875, \"Love\": 0.16015625, \"Nostalgia\": 0.007843017578125, \"Pain\": 0.007160186767578125, \"Pride\": 0.00508880615234375, \"Realization\": 0.054229736328125, \"Relief\": 0.048736572265625, \"Romance\": 0.026397705078125, \"Sadness\": 0.0265350341796875, \"Satisfaction\": 0.051361083984375, \"Shame\": 0.00974273681640625, \"Surprise (negative)\": 0.0218963623046875, \"Surprise (positive)\": 0.216064453125, \"Sympathy\": 0.021728515625, \"Tiredness\": 0.0173797607421875, \"Triumph\": 0.004520416259765625}",
                    "metadata": "{\"segments\": [{\"content\": \"Hello.\", \"embedding\": [0.6181640625, 0.1763916015625, -30.921875, 1.2705078125, 0.927734375, 0.63720703125, 2.865234375, 0.1080322265625, 0.2978515625, 1.0107421875, 1.34375, 0.74560546875, 0.416259765625, 0.99462890625, -0.333740234375, 0.361083984375, -1.388671875, 1.0107421875, 1.3173828125, 0.55615234375, 0.541015625, -0.1837158203125, 1.697265625, 0.228515625, 2.087890625, -0.311767578125, 0.053680419921875, 1.3349609375, 0.95068359375, 0.00441741943359375, 0.705078125, 1.8916015625, -0.939453125, 0.93701171875, -0.28955078125, 1.513671875, 0.5595703125, 1.0126953125, -0.1624755859375, 1.4072265625, -0.28857421875, -0.4560546875, -0.1500244140625, -0.1102294921875, -0.222412109375, 0.8779296875, 1.275390625, 1.6689453125, 0.80712890625, -0.34814453125, -0.325439453125, 0.412841796875, 0.81689453125, 0.55126953125, 1.671875, 0.6611328125, 0.7451171875, 1.50390625, 1.0224609375, -1.671875, 0.7373046875, 2.1328125, 2.166015625, 0.41015625, -0.127685546875, 1.9345703125, -4.2734375, 0.332275390625, 0.26171875, 0.76708984375, 0.2685546875, 0.468017578125, 1.208984375, -1.517578125, 1.083984375, 0.84814453125, 1.0244140625, -0.0072174072265625, 1.34375, 1.0712890625, 1.517578125, -0.52001953125, 0.59228515625, 0.8154296875, -0.951171875, -0.07757568359375, 1.3330078125, 1.125, 0.61181640625, 1.494140625, 0.357421875, 1.1796875, 1.482421875, 0.8046875, 0.1536865234375, 1.8076171875, 0.68115234375, -15.171875, 1.2294921875, 0.319091796875, 0.499755859375, 1.5771484375, 0.94677734375, -0.2490234375, 0.88525390625, 3.47265625, 0.75927734375, 0.71044921875, 1.2333984375, 1.4169921875, -0.56640625, -1.8095703125, 1.37109375, 0.428955078125, 1.89453125, -0.39013671875, 0.1734619140625, 1.5595703125, -1.2294921875, 2.552734375, 0.58349609375, 0.2156982421875, -0.00984954833984375, -0.6865234375, -0.0272979736328125, -0.2264404296875, 2.853515625, 1.3896484375, 0.52978515625, 0.783203125, 3.0390625, 0.75537109375, 0.219970703125, 0.384521484375, 0.385986328125, 2.0546875, -0.10443115234375, 1.5146484375, 1.4296875, 1.9716796875, 1.1318359375, 0.31591796875, 0.338623046875, 1.654296875, -0.88037109375, -0.21484375, 1.45703125, 1.0380859375, -0.52294921875, -0.47802734375, 0.1650390625, 1.2392578125, -1.138671875, 0.56787109375, 1.318359375, 0.4287109375, 0.1981201171875, 2.4375, 0.281005859375, 0.89404296875, -0.1552734375, 0.6474609375, -0.08331298828125, 0.00740814208984375, -0.045501708984375, -0.578125, 2.02734375, 0.59228515625, 0.35693359375, 1.2919921875, 1.22265625, 1.0537109375, 0.145263671875, 1.05859375, -0.369140625, 0.207275390625, 0.78857421875, 0.599609375, 0.99072265625, 0.24462890625, 1.26953125, 0.08404541015625, 1.349609375, 0.73291015625, 1.3212890625, 0.388916015625, 1.0869140625, 0.9931640625, -1.5673828125, 0.0462646484375, 0.650390625, 0.253662109375, 0.58251953125, 1.8134765625, 0.8642578125, 2.591796875, 0.7314453125, 0.85986328125, 0.5615234375, 0.9296875, 0.04144287109375, 1.66015625, 1.99609375, 1.171875, 1.181640625, 1.5126953125, 0.0224456787109375, 0.58349609375, -1.4931640625, 0.81884765625, 0.732421875, -0.6455078125, -0.62451171875, 1.7802734375, 0.01526641845703125, -0.423095703125, 0.461669921875, 4.87890625, 1.2392578125, -0.6953125, 0.6689453125, 0.62451171875, -1.521484375, 1.7685546875, 0.810546875, 0.65478515625, 0.26123046875, 1.6396484375, 0.87548828125, 1.7353515625, 2.046875, 1.5634765625, 0.69384765625, 1.375, 0.8916015625, 1.0107421875, 0.1304931640625, 2.009765625, 0.06402587890625, -0.08428955078125, 0.04351806640625, -1.7529296875, 2.02734375, 3.521484375, 0.404541015625, 1.6337890625, -0.276611328125, 0.8837890625, -0.1287841796875, 0.91064453125, 0.8193359375, 0.701171875, 0.036529541015625, 1.26171875, 1.0478515625, -0.1422119140625, 1.0634765625, 0.61083984375, 1.3505859375, 1.208984375, 0.57275390625, 1.3623046875, 2.267578125, 0.484375, 0.9150390625, 0.56787109375, -0.70068359375, 0.27587890625, -0.70654296875, 0.8466796875, 0.57568359375, 1.6162109375, 0.87939453125, 2.248046875, -0.5458984375, 1.7744140625, 1.328125, 1.232421875, 0.6806640625, 0.9365234375, 1.052734375, -1.08984375, 1.8330078125, -0.4033203125, 1.0673828125, 0.297607421875, 1.5703125, 1.67578125, 1.34765625, 2.8203125, 2.025390625, -0.48583984375, 0.7626953125, 0.01007843017578125, 1.435546875, 0.007205963134765625, 0.05157470703125, -0.9853515625, 0.26708984375, 1.16796875, 1.2041015625, 1.99609375, -0.07916259765625, 1.244140625, -0.32080078125, 0.6748046875, 0.419921875, 1.3212890625, 1.291015625, 0.599609375, 0.0550537109375, 0.9599609375, 0.93505859375, 0.111083984375, 1.302734375, 0.0833740234375, 2.244140625, 1.25390625, 1.6015625, 0.58349609375, 1.7568359375, -0.263427734375, -0.019866943359375, -0.24658203125, -0.1871337890625, 0.927734375, 0.62255859375, 0.275146484375, 0.79541015625, 1.1796875, 1.1767578125, -0.26123046875, -0.268310546875, 1.8994140625, 1.318359375, 2.1875, 0.2469482421875, 1.41015625, 0.03973388671875, 1.2685546875, 1.1025390625, 0.9560546875, 0.865234375, -1.92578125, 1.154296875, 0.389892578125, 1.130859375, 0.95947265625, 0.72314453125, 2.244140625, 0.048553466796875, 0.626953125, 0.42919921875, 0.82275390625, 0.311767578125, -0.320556640625, 0.01041412353515625, 0.1483154296875, 0.10809326171875, -0.3173828125, 1.1337890625, -0.8642578125, 1.4033203125, 0.048828125, 1.1787109375, 0.98779296875, 1.818359375, 1.1552734375, 0.6015625, 1.2392578125, -1.2685546875, 0.39208984375, 0.83251953125, 0.224365234375, 0.0019989013671875, 0.87548828125, 1.6572265625, 1.107421875, 0.434814453125, 1.8251953125, 0.442626953125, 1.2587890625, 0.09320068359375, -0.896484375, 1.8017578125, 1.451171875, -0.0755615234375, 0.6083984375, 2.06640625, 0.673828125, -0.33740234375, 0.192138671875, 0.21435546875, 0.80224609375, -1.490234375, 0.9501953125, 0.86083984375, -0.40283203125, 4.109375, 2.533203125, 1.2529296875, 0.8271484375, 0.225830078125, 1.0478515625, -1.9755859375, 0.841796875, 0.392822265625, 0.525390625, 0.33935546875, -0.79443359375, 0.71630859375, 0.97998046875, -0.175537109375, 0.97705078125, 1.705078125, 0.29638671875, 0.68359375, 0.54150390625, 0.435791015625, 0.99755859375, -0.369140625, 1.009765625, -0.140380859375, 0.426513671875, 0.189697265625, 1.8193359375, 1.1201171875, -0.5009765625, -0.331298828125, 0.759765625, -0.09442138671875, 0.74609375, -1.947265625, 1.3544921875, -3.935546875, 2.544921875, 1.359375, 0.1363525390625, 0.79296875, 0.79931640625, -0.3466796875, 1.1396484375, -0.33447265625, 2.0078125, -0.241455078125, 0.6318359375, 0.365234375, 0.296142578125, 0.830078125, 1.0458984375, 0.5830078125, 0.61572265625, 14.0703125, -2.0078125, -0.381591796875, 1.228515625, 0.08282470703125, -0.67822265625, -0.04339599609375, 0.397216796875, 0.1656494140625, 0.137451171875, 0.244873046875, 1.1611328125, -1.3818359375, 0.8447265625, 1.171875, 0.36328125, 0.252685546875, 0.1197509765625, 0.232177734375, -0.020172119140625, 0.64404296875, -0.01100921630859375, -1.9267578125, 0.222412109375, 0.56005859375, 1.3046875, 1.1630859375, 1.197265625, 1.02734375, 1.6806640625, -0.043731689453125, 1.4697265625, 0.81201171875, 1.5390625, 1.240234375, -0.7353515625, 1.828125, 1.115234375, 1.931640625, -0.517578125, 0.77880859375, 1.0546875, 0.95361328125, 3.42578125, 0.0160369873046875, 0.875, 0.56005859375, 1.2421875, 1.986328125, 1.4814453125, 0.0948486328125, 1.115234375, 0.00665283203125, 2.09375, 0.3544921875, -0.52783203125, 1.2099609375, 0.45068359375, 0.65625, 0.1112060546875, 1.0751953125, -0.9521484375, -0.30029296875, 1.4462890625, 2.046875, 3.212890625, 1.68359375, 1.07421875, -0.5263671875, 0.74560546875, 1.37890625, 0.15283203125, 0.2440185546875, 0.62646484375, -0.1280517578125, 0.7646484375, -0.515625, -0.35693359375, 1.2958984375, 0.96923828125, 0.58935546875, 1.3701171875, 1.0673828125, 0.2337646484375, 0.93115234375, 0.66357421875, 6.0, 1.1025390625, -0.51708984375, -0.38330078125, 0.7197265625, 0.246826171875, -0.45166015625, 1.9521484375, 0.5546875, 0.08807373046875, 0.18505859375, 0.8857421875, -0.57177734375, 0.251708984375, 0.234375, 2.57421875, 0.9599609375, 0.5029296875, 0.10382080078125, 0.08331298828125, 0.66748046875, -0.349609375, 1.287109375, 0.259765625, 2.015625, 2.828125, -0.3095703125, -0.164306640625, -0.3408203125, 0.486572265625, 0.8466796875, 1.9130859375, 0.09088134765625, 0.66552734375, 0.00972747802734375, -0.83154296875, 1.755859375, 0.654296875, 0.173828125, 0.27587890625, -0.47607421875, -0.264404296875, 0.7529296875, 0.6533203125, 0.7275390625, 0.499755859375, 0.833984375, -0.44775390625, -0.05078125, -0.454833984375, 0.75439453125, 0.68505859375, 0.210693359375, -0.283935546875, -0.53564453125, 0.96826171875, 0.861328125, -3.33984375, -0.26171875, 0.77734375, 0.26513671875, -0.14111328125, -0.042236328125, -0.84814453125, 0.2137451171875, 0.94921875, 0.65185546875, -0.5380859375, 0.1529541015625, -0.360595703125, -0.0333251953125, -0.69189453125, 0.8974609375, 0.7109375, 0.81494140625, -0.259521484375, 1.1904296875, 0.62158203125, 1.345703125, 0.89404296875, 0.70556640625, 1.0673828125, 1.392578125, 0.5068359375, 0.962890625, 0.736328125, 1.55078125, 0.50390625, -0.398681640625, 2.361328125, 0.345947265625, -0.61962890625, 0.330078125, 0.75439453125, -0.673828125, -0.2379150390625, 1.5673828125, 1.369140625, 0.1119384765625, -0.1834716796875, 1.4599609375, -0.77587890625, 0.5556640625, 0.09954833984375, 0.0285186767578125, 0.58935546875, -0.501953125, 0.212890625, 0.02679443359375, 0.1715087890625, 0.03466796875, -0.564453125, 2.029296875, 2.45703125, -0.72216796875, 2.138671875, 0.50830078125, -0.09356689453125, 0.230224609375, 1.6943359375, 1.5126953125, 0.39453125, 0.411376953125, 1.07421875, -0.8046875, 0.51416015625, 0.2271728515625, -0.283447265625, 0.38427734375, 0.73388671875, 0.6962890625, 1.4990234375, 0.02813720703125, 0.40478515625, 1.2451171875, 1.1162109375, -5.5703125, 0.76171875, 0.322021484375, 1.0361328125, 1.197265625, 0.1163330078125, 0.2425537109375, 1.5595703125, 1.5791015625, -0.0921630859375, 0.484619140625, 1.9052734375, 5.31640625, 1.6337890625, 0.95947265625, -0.1751708984375, 0.466552734375, 0.8330078125, 1.03125, 0.2044677734375, 0.31298828125, -1.1220703125, 0.5517578125, 0.93505859375, 0.45166015625, 1.951171875, 0.65478515625, 1.30859375, 1.0859375, 0.56494140625, 2.322265625, 0.242919921875, 1.81640625, -0.469970703125, -0.841796875, 0.90869140625, 1.5361328125, 0.923828125, 1.0595703125, 0.356689453125, -0.46142578125, 2.134765625, 1.3037109375, -0.32373046875, -9.2265625, 0.4521484375, 0.88037109375, -0.53955078125, 0.96484375, 0.7705078125, 0.84521484375, 1.580078125, -0.1448974609375, 0.7607421875, 1.0166015625, -0.086669921875, 1.611328125, 0.05938720703125, 0.5078125, 0.8427734375, 2.431640625, 0.66357421875, 3.203125, 0.132080078125, 0.461181640625, 0.779296875, 1.9482421875, 1.8720703125, 0.845703125, -1.3837890625, -0.138916015625, 0.35546875, 0.2457275390625, 0.75341796875, 1.828125, 1.4169921875, 0.60791015625, 1.0068359375, 1.109375, 0.484130859375, -0.302001953125, 0.4951171875, 0.802734375, 1.9482421875, 0.916015625, 0.1646728515625, 2.599609375, 1.7177734375, -0.2374267578125, 0.98046875, 0.39306640625, -1.1396484375, 1.6533203125, 0.375244140625], \"scores\": [0.09906005859375, 0.12213134765625, 0.05035400390625, 0.16552734375, 0.0037384033203125, 0.010101318359375, 0.058197021484375, 0.10552978515625, 0.1141357421875, 0.115234375, 0.00444793701171875, 0.00812530517578125, 0.0343017578125, 0.009002685546875, 0.087158203125, 0.00818634033203125, 0.003238677978515625, 0.024169921875, 0.00702667236328125, 0.00936126708984375, 0.00632476806640625, 0.0293731689453125, 0.01800537109375, 0.0088348388671875, 0.013397216796875, 0.02557373046875, 0.12109375, 0.004413604736328125, 0.016571044921875, 0.00274658203125, 0.2142333984375, 0.29638671875, 0.16015625, 0.007843017578125, 0.007160186767578125, 0.00508880615234375, 0.054229736328125, 0.048736572265625, 0.026397705078125, 0.0265350341796875, 0.051361083984375, 0.018310546875, 0.00974273681640625, 0.0218963623046875, 0.216064453125, 0.021728515625, 0.0173797607421875, 0.004520416259765625], \"stoks\": [52, 52, 52, 52, 52, 41, 41, 374, 303, 303, 303, 427], \"time\": {\"begin_ms\": 640, \"end_ms\": 1140}}]}"
                  },
                  {
                    "id": "7645a0d1-2e64-410d-83a8-b96040432e9a",
                    "chat_id": "470a49f6-1dec-4afe-8b61-035d3b2d63b0",
                    "timestamp": 1716244957031,
                    "role": "AGENT",
                    "type": "AGENT_MESSAGE",
                    "message_text": "Hello!",
                    "emotion_features": "{\"Admiration\": 0.044921875, \"Adoration\": 0.0253753662109375, \"Aesthetic Appreciation\": 0.03265380859375, \"Amusement\": 0.118408203125, \"Anger\": 0.06719970703125, \"Anxiety\": 0.0411376953125, \"Awe\": 0.03802490234375, \"Awkwardness\": 0.056549072265625, \"Boredom\": 0.04217529296875, \"Calmness\": 0.08709716796875, \"Concentration\": 0.070556640625, \"Confusion\": 0.06964111328125, \"Contemplation\": 0.0343017578125, \"Contempt\": 0.037689208984375, \"Contentment\": 0.059417724609375, \"Craving\": 0.01132965087890625, \"Desire\": 0.01406097412109375, \"Determination\": 0.1143798828125, \"Disappointment\": 0.051177978515625, \"Disgust\": 0.028594970703125, \"Distress\": 0.054901123046875, \"Doubt\": 0.04638671875, \"Ecstasy\": 0.0258026123046875, \"Embarrassment\": 0.0222015380859375, \"Empathic Pain\": 0.015777587890625, \"Entrancement\": 0.0160980224609375, \"Envy\": 0.0163421630859375, \"Excitement\": 0.129638671875, \"Fear\": 0.03125, \"Guilt\": 0.01483917236328125, \"Horror\": 0.0194549560546875, \"Interest\": 0.1341552734375, \"Joy\": 0.0738525390625, \"Love\": 0.0216522216796875, \"Nostalgia\": 0.0210418701171875, \"Pain\": 0.020721435546875, \"Pride\": 0.05499267578125, \"Realization\": 0.0728759765625, \"Relief\": 0.04052734375, \"Romance\": 0.0129241943359375, \"Sadness\": 0.0254669189453125, \"Satisfaction\": 0.07159423828125, \"Shame\": 0.01495361328125, \"Surprise (negative)\": 0.05560302734375, \"Surprise (positive)\": 0.07965087890625, \"Sympathy\": 0.022247314453125, \"Tiredness\": 0.0194549560546875, \"Triumph\": 0.04107666015625}",
                    "metadata": ""
                  }
                ]
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -G https://api.hume.ai/v0/evi/chat_groups/697056f0-6c7e-487d-9bd8-9c19df79f05f/events \\\n     -H \"X-Hume-Api-Key: <apiKey>\" \\\n     -d page_number=0 \\\n     -d page_size=3 \\\n     -d ascending_order=true",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from hume import HumeClient\n\nclient = HumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.empathic_voice.chat_groups.list_chat_group_events(\n    id=\"697056f0-6c7e-487d-9bd8-9c19df79f05f\",\n    page_number=0,\n    page_size=3,\n    ascending_order=True,\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumeClient } from \"hume\";\n\nconst client = new HumeClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.empathicVoice.chatGroups.listChatGroupEvents(\"697056f0-6c7e-487d-9bd8-9c19df79f05f\", {\n    pageNumber: 0,\n    pageSize: 3,\n    ascendingOrder: true\n});\n",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/v0/evi/chat_groups/:id/events",
            "responseStatusCode": 400,
            "pathParameters": {
              "id": ":id"
            },
            "queryParameters": {
              "page_size": 0,
              "page_number": 0
            },
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "error": "string",
                "message": "string"
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -G https://api.hume.ai/v0/evi/chat_groups/:id/events \\\n     -H \"X-Hume-Api-Key: <apiKey>\" \\\n     -d page_size=0 \\\n     -d page_number=0",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from hume import HumeClient\n\nclient = HumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.empathic_voice.chat_groups.list_chat_group_events(\n    id=\"697056f0-6c7e-487d-9bd8-9c19df79f05f\",\n    page_number=0,\n    page_size=3,\n    ascending_order=True,\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumeClient } from \"hume\";\n\nconst client = new HumeClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.empathicVoice.chatGroups.listChatGroupEvents(\"697056f0-6c7e-487d-9bd8-9c19df79f05f\", {\n    pageNumber: 0,\n    pageSize: 3,\n    ascendingOrder: true\n});\n",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "endpoint_chatGroups.get-audio": {
        "id": "endpoint_chatGroups.get-audio",
        "namespace": [
          "subpackage_chatGroups"
        ],
        "description": "Fetches a paginated list of audio for each **Chat** within the specified **Chat Group**. For more details, see our guide on audio reconstruction [here](/docs/empathic-voice-interface-evi/faq#can-i-access-the-audio-of-previous-conversations-with-evi).",
        "method": "GET",
        "path": [
          {
            "type": "literal",
            "value": "/v0/evi/chat_groups/"
          },
          {
            "type": "pathParameter",
            "value": "id"
          },
          {
            "type": "literal",
            "value": "/audio"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.hume.ai"
          }
        ],
        "pathParameters": [
          {
            "key": "id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "Identifier for a chat. Formatted as a UUID."
          }
        ],
        "queryParameters": [
          {
            "key": "page_number",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                }
              }
            },
            "description": "Specifies the page number to retrieve, enabling pagination.\n\nThis parameter uses zero-based indexing. For example, setting `page_number` to 0 retrieves the first page of results (items 0-9 if `page_size` is 10), setting `page_number` to 1 retrieves the second page (items 10-19), and so on. Defaults to 0, which retrieves the first page."
          },
          {
            "key": "page_size",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                }
              }
            },
            "description": "Specifies the maximum number of results to include per page, enabling pagination. The value must be between 1 and 100, inclusive.\n\nFor example, if `page_size` is set to 10, each page will include up to 10 items. Defaults to 10."
          },
          {
            "key": "ascending_order",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "boolean",
                      "default": false
                    }
                  }
                }
              }
            },
            "description": "Boolean to indicate if the results should be paginated in chronological order or reverse-chronological order. Defaults to true."
          }
        ],
        "requests": [],
        "responses": [
          {
            "description": "Success",
            "statusCode": 200,
            "body": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:ReturnChatGroupPagedAudioReconstructions"
              }
            }
          }
        ],
        "errors": [
          {
            "description": "Bad Request",
            "name": "Chat Groups Get Audio Request Bad Request Error",
            "statusCode": 400,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:ErrorResponse"
              }
            },
            "examples": [
              {
                "responseBody": {
                  "type": "json",
                  "value": {}
                }
              }
            ]
          }
        ],
        "examples": [
          {
            "path": "/v0/evi/chat_groups/369846cf-6ad5-404d-905e-a8acb5cdfc78/audio",
            "responseStatusCode": 200,
            "pathParameters": {
              "id": "369846cf-6ad5-404d-905e-a8acb5cdfc78"
            },
            "queryParameters": {
              "page_number": 0,
              "page_size": 10,
              "ascending_order": true
            },
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "id": "369846cf-6ad5-404d-905e-a8acb5cdfc78",
                "user_id": "e6235940-cfda-3988-9147-ff531627cf42",
                "num_chats": 1,
                "page_number": 0,
                "page_size": 10,
                "total_pages": 1,
                "pagination_direction": "ASC",
                "audio_reconstructions_page": [
                  {
                    "id": "470a49f6-1dec-4afe-8b61-035d3b2d63b0",
                    "user_id": "e6235940-cfda-3988-9147-ff531627cf42",
                    "status": "COMPLETE",
                    "filename": "e6235940-cfda-3988-9147-ff531627cf42/470a49f6-1dec-4afe-8b61-035d3b2d63b0/reconstructed_audio.mp4",
                    "modified_at": 1729875432555,
                    "signed_audio_url": "https://storage.googleapis.com/...etc.",
                    "signed_url_expiration_timestamp_millis": 1730232816964
                  }
                ]
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -G https://api.hume.ai/v0/evi/chat_groups/369846cf-6ad5-404d-905e-a8acb5cdfc78/audio \\\n     -H \"X-Hume-Api-Key: <apiKey>\" \\\n     -d page_number=0 \\\n     -d page_size=10 \\\n     -d ascending_order=true",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from hume import HumeClient\n\nclient = HumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.empathic_voice.chat_groups.get_audio(\n    id=\"369846cf-6ad5-404d-905e-a8acb5cdfc78\",\n    page_number=0,\n    page_size=10,\n    ascending_order=True,\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumeClient } from \"hume\";\n\nconst client = new HumeClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.empathicVoice.chatGroups.getAudio(\"369846cf-6ad5-404d-905e-a8acb5cdfc78\", {\n    pageNumber: 0,\n    pageSize: 10,\n    ascendingOrder: true\n});\n",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/v0/evi/chat_groups/:id/audio",
            "responseStatusCode": 400,
            "pathParameters": {
              "id": ":id"
            },
            "queryParameters": {
              "page_number": 0,
              "page_size": 0
            },
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "error": "string",
                "message": "string"
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -G https://api.hume.ai/v0/evi/chat_groups/:id/audio \\\n     -H \"X-Hume-Api-Key: <apiKey>\" \\\n     -d page_number=0 \\\n     -d page_size=0",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from hume import HumeClient\n\nclient = HumeClient(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.empathic_voice.chat_groups.get_audio(\n    id=\"369846cf-6ad5-404d-905e-a8acb5cdfc78\",\n    page_number=0,\n    page_size=10,\n    ascending_order=True,\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumeClient } from \"hume\";\n\nconst client = new HumeClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.empathicVoice.chatGroups.getAudio(\"369846cf-6ad5-404d-905e-a8acb5cdfc78\", {\n    pageNumber: 0,\n    pageSize: 10,\n    ascendingOrder: true\n});\n",
                  "generated": true
                }
              ]
            }
          }
        ]
      }
    },
    "websockets": {
      "subpackage_chat.chat": {
        "id": "subpackage_chat.chat",
        "namespace": [
          "subpackage_chat"
        ],
        "path": [
          {
            "type": "literal",
            "value": "/v0/evi/chat"
          }
        ],
        "messages": [
          {
            "type": "subscribe",
            "origin": "server",
            "body": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_chat:SubscribeEvent"
              }
            }
          },
          {
            "type": "publish",
            "origin": "client",
            "body": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_chat:PublishEvent"
              }
            }
          }
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "wss://api.hume.ai"
          }
        ],
        "queryParameters": [
          {
            "key": "config_id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "description": "The unique identifier for an EVI configuration.\n\nInclude this ID in your connection request to equip EVI with the Prompt, Language Model, Voice, and Tools associated with the specified configuration. If omitted, EVI will apply [default configuration settings](/docs/empathic-voice-interface-evi/configuration#default-configuration).\n\nFor help obtaining this ID, see our [Configuration Guide](/docs/empathic-voice-interface-evi/configuration)."
          },
          {
            "key": "config_version",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                }
              }
            },
            "description": "The version number of the EVI configuration specified by the `config_id`.\n\nConfigs, as well as Prompts and Tools, are versioned. This versioning system supports iterative development, allowing you to progressively refine configurations and revert to previous versions if needed.\n\nInclude this parameter to apply a specific version of an EVI configuration. If omitted, the latest version will be applied."
          },
          {
            "key": "resumed_chat_group_id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "description": "The unique identifier for a Chat Group. Use this field to preserve context from a previous Chat session.\n\nA Chat represents a single session from opening to closing a WebSocket connection. In contrast, a Chat Group is a series of resumed Chats that collectively represent a single conversation spanning multiple sessions. Each Chat includes a Chat Group ID, which is used to preserve the context of previous Chat sessions when starting a new one.\n\nIncluding the Chat Group ID in the `resumed_chat_group_id` query parameter is useful for seamlessly resuming a Chat after unexpected network disconnections and for picking up conversations exactly where you left off at a later time. This ensures preserved context across multiple sessions.\n\nThere are three ways to obtain the Chat Group ID:\n\n- [Chat Metadata](/reference/empathic-voice-interface-evi/chat/chat#receive.Chat%20Metadata.type): Upon establishing a WebSocket connection with EVI, the user receives a Chat Metadata message. This message contains a `chat_group_id`, which can be used to resume conversations within this chat group in future sessions.\n\n- [List Chats endpoint](/reference/empathic-voice-interface-evi/chats/list-chats): Use the GET `/v0/evi/chats` endpoint to obtain the Chat Group ID of individual Chat sessions. This endpoint lists all available Chat sessions and their associated Chat Group ID.\n\n- [List Chat Groups endpoint](/reference/empathic-voice-interface-evi/chat-groups/list-chat-groups): Use the GET `/v0/evi/chat_groups` endpoint to obtain the Chat Group IDs of all Chat Groups associated with an API key. This endpoint returns a list of all available chat groups."
          },
          {
            "key": "access_token",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "description": "Access token used for authenticating the client. If not provided, an `api_key` must be provided to authenticate.\n\nThe access token is generated using both an API key and a Secret key, which provides an additional layer of security compared to using just an API key.\n\nFor more details, refer to the [Authentication Strategies Guide](/docs/introduction/api-key#authentication-strategies)."
          },
          {
            "key": "api_key",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "description": "API key used for authenticating the client. If not provided, an `access_token` must be provided to authenticate.\n\nFor more details, refer to the [Authentication Strategies Guide](/docs/introduction/api-key#authentication-strategies)."
          }
        ],
        "examples": [
          {
            "path": "/v0/evi/chat",
            "pathParameters": {},
            "queryParameters": {},
            "requestHeaders": {},
            "messages": [
              {
                "type": "publish",
                "body": {
                  "type": "audio_input",
                  "data": "data"
                }
              },
              {
                "type": "subscribe",
                "body": {
                  "type": "assistant_end"
                }
              }
            ]
          }
        ]
      }
    },
    "webhooks": {},
    "types": {
      "type_chat:SubscribeEvent": {
        "name": "SubscribeEvent",
        "shape": {
          "type": "undiscriminatedUnion",
          "variants": [
            {
              "displayName": "Assistant End",
              "shape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:AssistantEnd"
                }
              }
            },
            {
              "displayName": "Assistant Message",
              "shape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:AssistantMessage"
                }
              }
            },
            {
              "displayName": "Audio Output",
              "shape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:AudioOutput"
                }
              }
            },
            {
              "displayName": "Chat Metadata",
              "shape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:ChatMetadata"
                }
              }
            },
            {
              "displayName": "Web Socket Error",
              "shape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:WebSocketError"
                }
              }
            },
            {
              "displayName": "User Interruption",
              "shape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:UserInterruption"
                }
              }
            },
            {
              "displayName": "User Message",
              "shape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:UserMessage"
                }
              }
            },
            {
              "displayName": "Tool Call Message",
              "shape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:ToolCallMessage"
                }
              }
            },
            {
              "displayName": "Tool Response Message",
              "shape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:ToolResponseMessage"
                }
              }
            },
            {
              "displayName": "Tool Error Message",
              "shape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:ToolErrorMessage"
                }
              }
            }
          ]
        }
      },
      "type_chat:PublishEvent": {
        "name": "PublishEvent",
        "shape": {
          "type": "undiscriminatedUnion",
          "variants": [
            {
              "displayName": "Audio Input",
              "shape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:AudioInput"
                }
              }
            },
            {
              "displayName": "Session Settings",
              "shape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:SessionSettings"
                }
              }
            },
            {
              "displayName": "User Input",
              "shape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:UserInput"
                }
              }
            },
            {
              "displayName": "Assistant Input",
              "shape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:AssistantInput"
                }
              }
            },
            {
              "displayName": "Tool Response Message",
              "shape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:ToolResponseMessage"
                }
              }
            },
            {
              "displayName": "Tool Error Message",
              "shape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:ToolErrorMessage"
                }
              }
            },
            {
              "displayName": "Pause Assistant Message",
              "shape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:PauseAssistantMessage"
                }
              }
            },
            {
              "displayName": "Resume Assistant Message",
              "shape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:ResumeAssistantMessage"
                }
              }
            }
          ]
        }
      },
      "type_:ErrorResponse": {
        "name": "ErrorResponse",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "error",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "message",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          ],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_:ReturnUserDefinedToolToolType": {
        "name": "ReturnUserDefinedToolToolType",
        "description": "Type of Tool. Either `BUILTIN` for natively implemented tools, like web search, or `FUNCTION` for user-defined tools.",
        "shape": {
          "type": "enum",
          "values": [
            {
              "value": "BUILTIN"
            },
            {
              "value": "FUNCTION"
            }
          ]
        }
      },
      "type_:ReturnUserDefinedToolVersionType": {
        "name": "ReturnUserDefinedToolVersionType",
        "description": "Versioning method for a Tool. Either `FIXED` for using a fixed version number or `LATEST` for auto-updating to the latest version.",
        "shape": {
          "type": "enum",
          "values": [
            {
              "value": "FIXED"
            },
            {
              "value": "LATEST"
            }
          ]
        }
      },
      "type_:ReturnUserDefinedTool": {
        "name": "ReturnUserDefinedTool",
        "description": "A specific tool version returned from the server",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "tool_type",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:ReturnUserDefinedToolToolType"
                }
              },
              "description": "Type of Tool. Either `BUILTIN` for natively implemented tools, like web search, or `FUNCTION` for user-defined tools."
            },
            {
              "key": "id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "Identifier for a Tool. Formatted as a UUID."
            },
            {
              "key": "version",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              },
              "description": "Version number for a Tool.\n\nTools, Configs, Custom Voices, and Prompts are versioned. This versioning system supports iterative development, allowing you to progressively refine tools and revert to previous versions if needed.\n\nVersion numbers are integer values representing different iterations of the Tool. Each update to the Tool increments its version number."
            },
            {
              "key": "version_type",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:ReturnUserDefinedToolVersionType"
                }
              },
              "description": "Versioning method for a Tool. Either `FIXED` for using a fixed version number or `LATEST` for auto-updating to the latest version."
            },
            {
              "key": "version_description",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "An optional description of the Tool version."
            },
            {
              "key": "name",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "Name applied to all versions of a particular Tool."
            },
            {
              "key": "created_on",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "long",
                    "default": 0
                  }
                }
              },
              "description": "Time at which the Tool was created. Measured in seconds since the Unix epoch."
            },
            {
              "key": "modified_on",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "long",
                    "default": 0
                  }
                }
              },
              "description": "Time at which the Tool was last modified. Measured in seconds since the Unix epoch."
            },
            {
              "key": "fallback_content",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "Optional text passed to the supplemental LLM in place of the tool call result. The LLM then uses this text to generate a response back to the user, ensuring continuity in the conversation if the Tool errors."
            },
            {
              "key": "description",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "An optional description of what the Tool does, used by the supplemental LLM to choose when and how to call the function."
            },
            {
              "key": "parameters",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "Stringified JSON defining the parameters used by this version of the Tool.\n\nThese parameters define the inputs needed for the Tool’s execution, including the expected data type and description for each input field. Structured as a stringified JSON schema, this format ensures the tool receives data in the expected format."
            }
          ],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_:ReturnPromptVersionType": {
        "name": "ReturnPromptVersionType",
        "description": "Versioning method for a Prompt. Either `FIXED` for using a fixed version number or `LATEST` for auto-updating to the latest version.",
        "shape": {
          "type": "enum",
          "values": [
            {
              "value": "FIXED"
            },
            {
              "value": "LATEST"
            }
          ]
        }
      },
      "type_:ReturnPrompt": {
        "name": "ReturnPrompt",
        "description": "A Prompt associated with this Config.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "Identifier for a Prompt. Formatted as a UUID."
            },
            {
              "key": "version",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              },
              "description": "Version number for a Prompt.\n\nPrompts, Configs, Custom Voices, and Tools are versioned. This versioning system supports iterative development, allowing you to progressively refine prompts and revert to previous versions if needed.\n\nVersion numbers are integer values representing different iterations of the Prompt. Each update to the Prompt increments its version number."
            },
            {
              "key": "version_type",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:ReturnPromptVersionType"
                }
              },
              "description": "Versioning method for a Prompt. Either `FIXED` for using a fixed version number or `LATEST` for auto-updating to the latest version."
            },
            {
              "key": "version_description",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "An optional description of the Prompt version."
            },
            {
              "key": "name",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "Name applied to all versions of a particular Prompt."
            },
            {
              "key": "created_on",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "long",
                    "default": 0
                  }
                }
              },
              "description": "Time at which the Prompt was created. Measured in seconds since the Unix epoch."
            },
            {
              "key": "modified_on",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "long",
                    "default": 0
                  }
                }
              },
              "description": "Time at which the Prompt was last modified. Measured in seconds since the Unix epoch."
            },
            {
              "key": "text",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "Instructions used to shape EVI’s behavior, responses, and style.\n\nYou can use the Prompt to define a specific goal or role for EVI, specifying how it should act or what it should focus on during the conversation. For example, EVI can be instructed to act as a customer support representative, a fitness coach, or a travel advisor, each with its own set of behaviors and response styles.\n\nFor help writing a system prompt, see our [Prompting Guide](/docs/empathic-voice-interface-evi/prompting)."
            }
          ],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_:PostedCustomVoiceBaseVoice": {
        "name": "PostedCustomVoiceBaseVoice",
        "description": "Specifies the base voice used to create the Custom Voice.",
        "shape": {
          "type": "enum",
          "values": [
            {
              "value": "ITO"
            },
            {
              "value": "KORA"
            },
            {
              "value": "DACHER"
            },
            {
              "value": "AURA"
            },
            {
              "value": "FINN"
            },
            {
              "value": "WHIMSY"
            },
            {
              "value": "STELLA"
            },
            {
              "value": "SUNNY"
            }
          ]
        }
      },
      "type_:PostedCustomVoiceParameters": {
        "name": "PostedCustomVoiceParameters",
        "description": "The specified attributes of a Custom Voice.\n\nIf no parameters are specified then all attributes will be set to their defaults, meaning no modfications will be made to the base voice.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "gender",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                }
              },
              "description": "The vocalization of gender, ranging between more masculine and more feminine.\n\nThe default value is `0`, with a minimum of `-100` (more masculine) and a maximum of `100` (more feminine). A value of `0` leaves this parameter unchanged from the base voice."
            },
            {
              "key": "articulation",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                }
              },
              "description": "The clarity of the voice, ranging between mumbled and articulate.\n\nThe default value is `0`, with a minimum of `-100` (mumbled) and a maximum of `100` (articulate). A value of `0` leaves this parameter unchanged from the base voice."
            },
            {
              "key": "assertiveness",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                }
              },
              "description": "The firmness of the voice, ranging between whiny and bold.\n\nThe default value is `0`, with a minimum of `-100` (whiny) and a maximum of `100` (bold). A value of `0` leaves this parameter unchanged from the base voice."
            },
            {
              "key": "buoyancy",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                }
              },
              "description": "The density of the voice, ranging between deflated and buoyant.\n\nThe default value is `0`, with a minimum of `-100` (deflated) and a maximum of `100` (buoyant). A value of `0` leaves this parameter unchanged from the base voice."
            },
            {
              "key": "confidence",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                }
              },
              "description": "The assuredness of the voice, ranging between shy and confident.\n\nThe default value is `0`, with a minimum of `-100` (shy) and a maximum of `100` (confident). A value of `0` leaves this parameter unchanged from the base voice."
            },
            {
              "key": "enthusiasm",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                }
              },
              "description": "The excitement within the voice, ranging between calm and enthusiastic.\n\nThe default value is `0`, with a minimum of `-100` (calm) and a maximum of `100` (enthusiastic). A value of `0` leaves this parameter unchanged from the base voice."
            },
            {
              "key": "nasality",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                }
              },
              "description": "The openness of the voice, ranging between clear and nasal.\n\nThe default value is `0`, with a minimum of `-100` (clear) and a maximum of `100` (nasal). A value of `0` leaves this parameter unchanged from the base voice."
            },
            {
              "key": "relaxedness",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                }
              },
              "description": "The stress within the voice, ranging between tense and relaxed.\n\nThe default value is `0`, with a minimum of `-100` (tense) and a maximum of `100` (relaxed). A value of `0` leaves this parameter unchanged from the base voice."
            },
            {
              "key": "smoothness",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                }
              },
              "description": "The texture of the voice, ranging between smooth and staccato.\n\nThe default value is `0`, with a minimum of `-100` (smooth) and a maximum of `100` (staccato). A value of `0` leaves this parameter unchanged from the base voice."
            },
            {
              "key": "tepidity",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                }
              },
              "description": "The liveliness behind the voice, ranging between tepid and vigorous.\n\nThe default value is `0`, with a minimum of `-100` (tepid) and a maximum of `100` (vigorous). A value of `0` leaves this parameter unchanged from the base voice."
            },
            {
              "key": "tightness",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                }
              },
              "description": "The containment of the voice, ranging between tight and breathy.\n\nThe default value is `0`, with a minimum of `-100` (tight) and a maximum of `100` (breathy). A value of `0` leaves this parameter unchanged from the base voice."
            }
          ],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_:PostedCustomVoice": {
        "name": "PostedCustomVoice",
        "description": "A Custom Voice specification to be associated with this Config.\n\nIf a Custom Voice specification is not provided then the [name](/reference/empathic-voice-interface-evi/configs/create-config#request.body.voice.name) of a base voice or previously created Custom Voice must be provided.\n\nSee our [Voices guide](/docs/empathic-voice-interface-evi/voices) for a tutorial on how to craft a Custom Voice.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "name",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "The name of the Custom Voice. Maximum length of 75 characters. Will be converted to all-uppercase. (e.g., \"sample voice\" becomes \"SAMPLE VOICE\")"
            },
            {
              "key": "base_voice",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:PostedCustomVoiceBaseVoice"
                }
              },
              "description": "Specifies the base voice used to create the Custom Voice."
            },
            {
              "key": "parameter_model",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "literal",
                  "value": {
                    "type": "stringLiteral",
                    "value": "20241004-11parameter"
                  }
                }
              },
              "description": "The name of the parameter model used to define which attributes are used by the `parameters` field. Currently, only `20241004-11parameter` is supported as the parameter model."
            },
            {
              "key": "parameters",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:PostedCustomVoiceParameters"
                    }
                  }
                }
              },
              "description": "The specified attributes of a Custom Voice.\n\nIf no parameters are specified then all attributes will be set to their defaults, meaning no modfications will be made to the base voice."
            }
          ],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_:ReturnCustomVoiceBaseVoice": {
        "name": "ReturnCustomVoiceBaseVoice",
        "description": "The base voice used to create the Custom Voice.",
        "shape": {
          "type": "enum",
          "values": [
            {
              "value": "ITO"
            },
            {
              "value": "KORA"
            },
            {
              "value": "DACHER"
            },
            {
              "value": "AURA"
            },
            {
              "value": "FINN"
            },
            {
              "value": "WHIMSY"
            },
            {
              "value": "STELLA"
            },
            {
              "value": "SUNNY"
            }
          ]
        }
      },
      "type_:ReturnCustomVoiceParameters": {
        "name": "ReturnCustomVoiceParameters",
        "description": "The specified attributes of a Custom Voice. If a parameter's value is `0` (default), it will not be included in the response.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "gender",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                }
              },
              "description": "The vocalization of gender, ranging between more masculine and more feminine.\n\nThe default value is `0`, with a minimum of `-100` (more masculine) and a maximum of `100` (more feminine). A value of `0` leaves this parameter unchanged from the base voice."
            },
            {
              "key": "articulation",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                }
              },
              "description": "The clarity of the voice, ranging between mumbled and articulate.\n\nThe default value is `0`, with a minimum of `-100` (mumbled) and a maximum of `100` (articulate). A value of `0` leaves this parameter unchanged from the base voice."
            },
            {
              "key": "assertiveness",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                }
              },
              "description": "The firmness of the voice, ranging between whiny and bold.\n\nThe default value is `0`, with a minimum of `-100` (whiny) and a maximum of `100` (bold). A value of `0` leaves this parameter unchanged from the base voice."
            },
            {
              "key": "buoyancy",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                }
              },
              "description": "The density of the voice, ranging between deflated and buoyant.\n\nThe default value is `0`, with a minimum of `-100` (deflated) and a maximum of `100` (buoyant). A value of `0` leaves this parameter unchanged from the base voice."
            },
            {
              "key": "confidence",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                }
              },
              "description": "The assuredness of the voice, ranging between shy and confident.\n\nThe default value is `0`, with a minimum of `-100` (shy) and a maximum of `100` (confident). A value of `0` leaves this parameter unchanged from the base voice."
            },
            {
              "key": "enthusiasm",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                }
              },
              "description": "The excitement within the voice, ranging between calm and enthusiastic.\n\nThe default value is `0`, with a minimum of `-100` (calm) and a maximum of `100` (enthusiastic). A value of `0` leaves this parameter unchanged from the base voice."
            },
            {
              "key": "nasality",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                }
              },
              "description": "The openness of the voice, ranging between clear and nasal.\n\nThe default value is `0`, with a minimum of `-100` (clear) and a maximum of `100` (nasal). A value of `0` leaves this parameter unchanged from the base voice."
            },
            {
              "key": "relaxedness",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                }
              },
              "description": "The stress within the voice, ranging between tense and relaxed.\n\nThe default value is `0`, with a minimum of `-100` (tense) and a maximum of `100` (relaxed). A value of `0` leaves this parameter unchanged from the base voice."
            },
            {
              "key": "smoothness",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                }
              },
              "description": "The texture of the voice, ranging between smooth and staccato.\n\nThe default value is `0`, with a minimum of `-100` (smooth) and a maximum of `100` (staccato). A value of `0` leaves this parameter unchanged from the base voice."
            },
            {
              "key": "tepidity",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                }
              },
              "description": "The liveliness behind the voice, ranging between tepid and vigorous.\n\nThe default value is `0`, with a minimum of `-100` (tepid) and a maximum of `100` (vigorous). A value of `0` leaves this parameter unchanged from the base voice."
            },
            {
              "key": "tightness",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                }
              },
              "description": "The containment of the voice, ranging between tight and breathy.\n\nThe default value is `0`, with a minimum of `-100` (tight) and a maximum of `100` (breathy). A value of `0` leaves this parameter unchanged from the base voice."
            }
          ],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_:ReturnCustomVoice": {
        "name": "ReturnCustomVoice",
        "description": "A Custom Voice specification associated with this Config.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "Identifier for a Custom Voice. Formatted as a UUID."
            },
            {
              "key": "version",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              },
              "description": "Version number for a Custom Voice.\n\nCustom Voices, Prompts, Configs, and Tools are versioned. This versioning system supports iterative development, allowing you to progressively refine configurations and revert to previous versions if needed.\n\nVersion numbers are integer values representing different iterations of the Custom Voice. Each update to the Custom Voice increments its version number."
            },
            {
              "key": "name",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "The name of the Custom Voice. Maximum length of 75 characters."
            },
            {
              "key": "created_on",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "long",
                    "default": 0
                  }
                }
              },
              "description": "Time at which the Custom Voice was created. Measured in seconds since the Unix epoch."
            },
            {
              "key": "modified_on",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "long",
                    "default": 0
                  }
                }
              },
              "description": "Time at which the Custom Voice was last modified. Measured in seconds since the Unix epoch."
            },
            {
              "key": "base_voice",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:ReturnCustomVoiceBaseVoice"
                }
              },
              "description": "The base voice used to create the Custom Voice."
            },
            {
              "key": "parameter_model",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "literal",
                  "value": {
                    "type": "stringLiteral",
                    "value": "20241004-11parameter"
                  }
                }
              },
              "description": "The name of the parameter model used to define which attributes are used by the `parameters` field. Currently, only `20241004-11parameter` is supported as the parameter model."
            },
            {
              "key": "parameters",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:ReturnCustomVoiceParameters"
                }
              },
              "description": "The specified attributes of a Custom Voice. If a parameter's value is `0` (default), it will not be included in the response."
            }
          ],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_:PostedBuiltinToolName": {
        "name": "PostedBuiltinToolName",
        "description": "Name of the built-in tool to use. Hume supports the following built-in tools:\n\n- **web_search:** enables EVI to search the web for up-to-date information when applicable.\n- **hang_up:** closes the WebSocket connection when appropriate (e.g., after detecting a farewell in the conversation).\n\nFor more information, see our guide on [using built-in tools](/docs/empathic-voice-interface-evi/tool-use#using-built-in-tools).",
        "shape": {
          "type": "enum",
          "values": [
            {
              "value": "web_search"
            },
            {
              "value": "hang_up"
            }
          ]
        }
      },
      "type_:PostedBuiltinTool": {
        "name": "PostedBuiltinTool",
        "description": "A configuration of a built-in tool to be posted to the server",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "name",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:PostedBuiltinToolName"
                }
              },
              "description": "Name of the built-in tool to use. Hume supports the following built-in tools:\n\n- **web_search:** enables EVI to search the web for up-to-date information when applicable.\n- **hang_up:** closes the WebSocket connection when appropriate (e.g., after detecting a farewell in the conversation).\n\nFor more information, see our guide on [using built-in tools](/docs/empathic-voice-interface-evi/tool-use#using-built-in-tools)."
            },
            {
              "key": "fallback_content",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "Optional text passed to the supplemental LLM in place of the tool call result. The LLM then uses this text to generate a response back to the user, ensuring continuity in the conversation if the Tool errors."
            }
          ],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_:PostedConfigPromptSpec": {
        "name": "PostedConfigPromptSpec",
        "description": "Identifies which prompt to use in a a config OR how to create a new prompt to use in the config",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "Identifier for a Prompt. Formatted as a UUID."
            },
            {
              "key": "version",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                }
              },
              "description": "Version number for a Prompt. Version numbers should be integers. The combination of configId and version number is unique."
            },
            {
              "key": "text",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "Text used to create a new prompt for a particular config."
            }
          ],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_:PostedEllmModel": {
        "name": "PostedEllmModel",
        "description": "A eLLM model configuration to be posted to the server",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "allow_short_responses",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean",
                        "default": false
                      }
                    }
                  }
                }
              },
              "description": "Boolean indicating if the eLLM is allowed to generate short responses.\n\nIf omitted, short responses from the eLLM are enabled by default."
            }
          ],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_:PostedEventMessageSpec": {
        "name": "PostedEventMessageSpec",
        "description": "Settings for a specific event_message to be posted to the server",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "enabled",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "boolean",
                    "default": false
                  }
                }
              },
              "description": "Boolean indicating if this event message is enabled.\n\nIf set to `true`, a message will be sent when the circumstances for the specific event are met."
            },
            {
              "key": "text",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "Text to use as the event message when the corresponding event occurs. If no text is specified, EVI will generate an appropriate message based on its current context and the system prompt."
            }
          ],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_:PostedEventMessageSpecs": {
        "name": "PostedEventMessageSpecs",
        "description": "Collection of event messages returned by the server.\n\nEvent messages are sent by the server when specific events occur during a chat session. These messages are used to configure behaviors for EVI, such as controlling how EVI starts a new conversation.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "on_new_chat",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:PostedEventMessageSpec"
                    }
                  }
                }
              },
              "description": "Specifies the initial message EVI provides when a new chat is started, such as a greeting or welcome message."
            },
            {
              "key": "on_inactivity_timeout",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:PostedEventMessageSpec"
                    }
                  }
                }
              },
              "description": "Specifies the message EVI provides when the chat is about to be disconnected due to a user inactivity timeout, such as a message mentioning a lack of user input for a period of time.\n\nEnabling an inactivity message allows developers to use this message event for \"checking in\" with the user if they are not responding to see if they are still active.\n\nIf the user does not respond in the number of seconds specified in the `inactivity_timeout` field, then EVI will say the message and the user has 15 seconds to respond. If they respond in time, the conversation will continue; if not, the conversation will end.\n\nHowever, if the inactivity message is not enabled, then reaching the inactivity timeout will immediately end the connection."
            },
            {
              "key": "on_max_duration_timeout",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:PostedEventMessageSpec"
                    }
                  }
                }
              },
              "description": "Specifies the message EVI provides when the chat is disconnected due to reaching the maximum chat duration, such as a message mentioning the time limit for the chat has been reached."
            }
          ],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_:PostedLanguageModelModelProvider": {
        "name": "PostedLanguageModelModelProvider",
        "description": "The provider of the supplemental language model.",
        "shape": {
          "type": "enum",
          "values": [
            {
              "value": "OPEN_AI"
            },
            {
              "value": "CUSTOM_LANGUAGE_MODEL"
            },
            {
              "value": "ANTHROPIC"
            },
            {
              "value": "FIREWORKS"
            },
            {
              "value": "GROQ"
            },
            {
              "value": "GOOGLE"
            }
          ]
        }
      },
      "type_:PostedLanguageModelModelResource": {
        "name": "PostedLanguageModelModelResource",
        "description": "String that specifies the language model to use with `model_provider`.",
        "shape": {
          "type": "enum",
          "values": [
            {
              "value": "claude-3-5-sonnet-latest"
            },
            {
              "value": "claude-3-5-sonnet-20240620"
            },
            {
              "value": "claude-3-opus-20240229"
            },
            {
              "value": "claude-3-sonnet-20240229"
            },
            {
              "value": "claude-3-haiku-20240307"
            },
            {
              "value": "claude-2.1"
            },
            {
              "value": "claude-instant-1.2"
            },
            {
              "value": "gemini-1.5-pro"
            },
            {
              "value": "gemini-1.5-flash"
            },
            {
              "value": "gemini-1.5-pro-002"
            },
            {
              "value": "gemini-1.5-flash-002"
            },
            {
              "value": "gpt-4-turbo-preview"
            },
            {
              "value": "gpt-3.5-turbo-0125"
            },
            {
              "value": "gpt-3.5-turbo"
            },
            {
              "value": "gpt-4o"
            },
            {
              "value": "gpt-4o-mini"
            },
            {
              "value": "gemma-7b-it"
            },
            {
              "value": "llama3-8b-8192"
            },
            {
              "value": "llama3-70b-8192"
            },
            {
              "value": "llama-3.1-70b-versatile"
            },
            {
              "value": "llama-3.1-8b-instant"
            },
            {
              "value": "accounts/fireworks/models/mixtral-8x7b-instruct"
            },
            {
              "value": "accounts/fireworks/models/llama-v3p1-405b-instruct"
            },
            {
              "value": "accounts/fireworks/models/llama-v3p1-70b-instruct"
            },
            {
              "value": "accounts/fireworks/models/llama-v3p1-8b-instruct"
            },
            {
              "value": "ellm"
            }
          ]
        }
      },
      "type_:PostedLanguageModel": {
        "name": "PostedLanguageModel",
        "description": "A LanguageModel to be posted to the server",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "model_provider",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:PostedLanguageModelModelProvider"
                    }
                  }
                }
              },
              "description": "The provider of the supplemental language model."
            },
            {
              "key": "model_resource",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:PostedLanguageModelModelResource"
                    }
                  }
                }
              },
              "description": "String that specifies the language model to use with `model_provider`."
            },
            {
              "key": "temperature",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "double",
                        "minimum": 2.2250738585072014e-308,
                        "maximum": 1.7976931348623157e+308,
                        "default": 0
                      }
                    }
                  }
                }
              },
              "description": "The model temperature, with values between 0 to 1 (inclusive).\n\nControls the randomness of the LLM’s output, with values closer to 0 yielding focused, deterministic responses and values closer to 1 producing more creative, diverse responses."
            }
          ],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_:PostedTimeoutSpec": {
        "name": "PostedTimeoutSpec",
        "description": "Settings for a specific timeout to be posted to the server",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "enabled",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "boolean",
                    "default": false
                  }
                }
              },
              "description": "Boolean indicating if this event message is enabled."
            },
            {
              "key": "duration_secs",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                }
              },
              "description": "Duration in seconds for the timeout."
            }
          ],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_:PostedTimeoutSpecsInactivity": {
        "name": "PostedTimeoutSpecsInactivity",
        "description": "Specifies the duration of user inactivity (in seconds) after which the EVI WebSocket connection will be automatically disconnected. Default is 600 seconds (10 minutes).\n\nAccepts a minimum value of 30 seconds and a maximum value of 1,800 seconds.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "enabled",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "boolean",
                    "default": false
                  }
                }
              },
              "description": "Boolean indicating if this timeout is enabled.\n\nIf set to false, EVI will not timeout due to a specified duration of user inactivity being reached. However, the conversation will eventually disconnect after 1,800 seconds (30 minutes), which is the maximum WebSocket duration limit for EVI."
            },
            {
              "key": "duration_secs",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                }
              },
              "description": "Duration in seconds for the timeout (e.g. 600 seconds represents 10 minutes)."
            }
          ],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_:PostedTimeoutSpecsMaxDuration": {
        "name": "PostedTimeoutSpecsMaxDuration",
        "description": "Specifies the maximum allowed duration (in seconds) for an EVI WebSocket connection before it is automatically disconnected. Default is 1,800 seconds (30 minutes).\n\nAccepts a minimum value of 30 seconds and a maximum value of 1,800 seconds.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "enabled",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "boolean",
                    "default": false
                  }
                }
              },
              "description": "Boolean indicating if this timeout is enabled.\n\nIf set to false, EVI will not timeout due to a specified maximum duration being reached. However, the conversation will eventually disconnect after 1,800 seconds (30 minutes), which is the maximum WebSocket duration limit for EVI."
            },
            {
              "key": "duration_secs",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                }
              },
              "description": "Duration in seconds for the timeout (e.g. 600 seconds represents 10 minutes)."
            }
          ],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_:PostedTimeoutSpecs": {
        "name": "PostedTimeoutSpecs",
        "description": "Collection of timeout specifications returned by the server.\n\nTimeouts are sent by the server when specific time-based events occur during a chat session. These specifications set the inactivity timeout and the maximum duration an EVI WebSocket connection can stay open before it is automatically disconnected.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "inactivity",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:PostedTimeoutSpecsInactivity"
                    }
                  }
                }
              },
              "description": "Specifies the duration of user inactivity (in seconds) after which the EVI WebSocket connection will be automatically disconnected. Default is 600 seconds (10 minutes).\n\nAccepts a minimum value of 30 seconds and a maximum value of 1,800 seconds."
            },
            {
              "key": "max_duration",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:PostedTimeoutSpecsMaxDuration"
                    }
                  }
                }
              },
              "description": "Specifies the maximum allowed duration (in seconds) for an EVI WebSocket connection before it is automatically disconnected. Default is 1,800 seconds (30 minutes).\n\nAccepts a minimum value of 30 seconds and a maximum value of 1,800 seconds."
            }
          ],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_:PostedUserDefinedToolSpec": {
        "name": "PostedUserDefinedToolSpec",
        "description": "A specific tool identifier to be posted to the server",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "Identifier for a Tool. Formatted as a UUID."
            },
            {
              "key": "version",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                }
              },
              "description": "Version number for a Tool.\n\nTools, Configs, Custom Voices, and Prompts are versioned. This versioning system supports iterative development, allowing you to progressively refine tools and revert to previous versions if needed.\n\nVersion numbers are integer values representing different iterations of the Tool. Each update to the Tool increments its version number."
            }
          ],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_:PostedVoiceProvider": {
        "name": "PostedVoiceProvider",
        "description": "The provider of the voice to use. Supported values are `HUME_AI` and `CUSTOM_VOICE`.",
        "shape": {
          "type": "enum",
          "values": [
            {
              "value": "HUME_AI"
            },
            {
              "value": "CUSTOM_VOICE"
            }
          ]
        }
      },
      "type_:PostedVoice": {
        "name": "PostedVoice",
        "description": "A Voice specification posted to the server",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "provider",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:PostedVoiceProvider"
                }
              },
              "description": "The provider of the voice to use. Supported values are `HUME_AI` and `CUSTOM_VOICE`."
            },
            {
              "key": "name",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "Specifies the name of the voice to use.\n\nThis can be either the name of a previously created Custom Voice or one of our 8 base voices: `ITO`, `KORA`, `DACHER`, `AURA`, `FINN`, `WHIMSY`, `STELLA`, or `SUNNY`.\n\nThe name will be automatically converted to uppercase (e.g., \"Ito\" becomes \"ITO\"). If a name is not specified, then a [Custom Voice](/reference/empathic-voice-interface-evi/configs/create-config#request.body.voice.custom_voice) specification must be provided."
            },
            {
              "key": "custom_voice",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:PostedCustomVoice"
                    }
                  }
                }
              }
            }
          ],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_:ReturnBuiltinToolToolType": {
        "name": "ReturnBuiltinToolToolType",
        "description": "Type of Tool. Either `BUILTIN` for natively implemented tools, like web search, or `FUNCTION` for user-defined tools.",
        "shape": {
          "type": "enum",
          "values": [
            {
              "value": "BUILTIN"
            },
            {
              "value": "FUNCTION"
            }
          ]
        }
      },
      "type_:ReturnBuiltinTool": {
        "name": "ReturnBuiltinTool",
        "description": "A specific builtin tool version returned from the server",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "tool_type",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:ReturnBuiltinToolToolType"
                }
              },
              "description": "Type of Tool. Either `BUILTIN` for natively implemented tools, like web search, or `FUNCTION` for user-defined tools."
            },
            {
              "key": "name",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "Name applied to all versions of a particular Tool."
            },
            {
              "key": "fallback_content",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "Optional text passed to the supplemental LLM in place of the tool call result. The LLM then uses this text to generate a response back to the user, ensuring continuity in the conversation if the Tool errors."
            }
          ],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_:ReturnConfig": {
        "name": "ReturnConfig",
        "description": "A specific config version returned from the server",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "Identifier for a Config. Formatted as a UUID."
            },
            {
              "key": "version",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                }
              },
              "description": "Version number for a Config.\n\nConfigs, Prompts, Custom Voices, and Tools are versioned. This versioning system supports iterative development, allowing you to progressively refine configurations and revert to previous versions if needed.\n\nVersion numbers are integer values representing different iterations of the Config. Each update to the Config increments its version number."
            },
            {
              "key": "evi_version",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "Specifies the EVI version to use. Use `\"1\"` for version 1, or `\"2\"` for the latest enhanced version. For a detailed comparison of the two versions, refer to our [guide](/docs/empathic-voice-interface-evi/evi-2)."
            },
            {
              "key": "version_description",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "An optional description of the Config version."
            },
            {
              "key": "name",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "Name applied to all versions of a particular Config."
            },
            {
              "key": "created_on",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "long",
                        "default": 0
                      }
                    }
                  }
                }
              },
              "description": "Time at which the Config was created. Measured in seconds since the Unix epoch."
            },
            {
              "key": "modified_on",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "long",
                        "default": 0
                      }
                    }
                  }
                }
              },
              "description": "Time at which the Config was last modified. Measured in seconds since the Unix epoch."
            },
            {
              "key": "prompt",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:ReturnPrompt"
                    }
                  }
                }
              }
            },
            {
              "key": "voice",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:ReturnVoice"
                    }
                  }
                }
              },
              "description": "A voice specification associated with this Config."
            },
            {
              "key": "language_model",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:ReturnLanguageModel"
                    }
                  }
                }
              },
              "description": "The supplemental language model associated with this Config.\n\nThis model is used to generate longer, more detailed responses from EVI. Choosing an appropriate supplemental language model for your use case is crucial for generating fast, high-quality responses from EVI."
            },
            {
              "key": "ellm_model",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:ReturnEllmModel"
                    }
                  }
                }
              },
              "description": "The eLLM setup associated with this Config.\n\nHume's eLLM (empathic Large Language Model) is a multimodal language model that takes into account both expression measures and language. The eLLM generates short, empathic language responses and guides text-to-speech (TTS) prosody."
            },
            {
              "key": "tools",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "list",
                      "itemShape": {
                        "type": "alias",
                        "value": {
                          "type": "optional",
                          "shape": {
                            "type": "alias",
                            "value": {
                              "type": "id",
                              "id": "type_:ReturnUserDefinedTool"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              },
              "description": "List of user-defined tools associated with this Config."
            },
            {
              "key": "builtin_tools",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "list",
                      "itemShape": {
                        "type": "alias",
                        "value": {
                          "type": "optional",
                          "shape": {
                            "type": "alias",
                            "value": {
                              "type": "id",
                              "id": "type_:ReturnBuiltinTool"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              },
              "description": "List of built-in tools associated with this Config."
            },
            {
              "key": "event_messages",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:ReturnEventMessageSpecs"
                    }
                  }
                }
              }
            },
            {
              "key": "timeouts",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:ReturnTimeoutSpecs"
                    }
                  }
                }
              }
            }
          ],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_:ReturnEllmModel": {
        "name": "ReturnEllmModel",
        "description": "A specific eLLM Model configuration",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "allow_short_responses",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "boolean",
                    "default": false
                  }
                }
              },
              "description": "Boolean indicating if the eLLM is allowed to generate short responses.\n\nIf omitted, short responses from the eLLM are enabled by default."
            }
          ],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_:ReturnEventMessageSpec": {
        "name": "ReturnEventMessageSpec",
        "description": "A specific event message configuration to be returned from the server",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "enabled",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "boolean",
                    "default": false
                  }
                }
              },
              "description": "Boolean indicating if this event message is enabled.\n\nIf set to `true`, a message will be sent when the circumstances for the specific event are met."
            },
            {
              "key": "text",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "Text to use as the event message when the corresponding event occurs. If no text is specified, EVI will generate an appropriate message based on its current context and the system prompt."
            }
          ],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_:ReturnEventMessageSpecs": {
        "name": "ReturnEventMessageSpecs",
        "description": "Collection of event messages returned by the server.\n\nEvent messages are sent by the server when specific events occur during a chat session. These messages are used to configure behaviors for EVI, such as controlling how EVI starts a new conversation.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "on_new_chat",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:ReturnEventMessageSpec"
                    }
                  }
                }
              },
              "description": "Specifies the initial message EVI provides when a new chat is started, such as a greeting or welcome message."
            },
            {
              "key": "on_inactivity_timeout",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:ReturnEventMessageSpec"
                    }
                  }
                }
              },
              "description": "Specifies the message EVI provides when the chat is about to be disconnected due to a user inactivity timeout, such as a message mentioning a lack of user input for a period of time.\n\nEnabling an inactivity message allows developers to use this message event for \"checking in\" with the user if they are not responding to see if they are still active.\n\nIf the user does not respond in the number of seconds specified in the `inactivity_timeout` field, then EVI will say the message and the user has 15 seconds to respond. If they respond in time, the conversation will continue; if not, the conversation will end.\n\nHowever, if the inactivity message is not enabled, then reaching the inactivity timeout will immediately end the connection."
            },
            {
              "key": "on_max_duration_timeout",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:ReturnEventMessageSpec"
                    }
                  }
                }
              },
              "description": "Specifies the message EVI provides when the chat is disconnected due to reaching the maximum chat duration, such as a message mentioning the time limit for the chat has been reached."
            }
          ],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_:ReturnLanguageModelModelProvider": {
        "name": "ReturnLanguageModelModelProvider",
        "description": "The provider of the supplemental language model.",
        "shape": {
          "type": "enum",
          "values": [
            {
              "value": "OPEN_AI"
            },
            {
              "value": "CUSTOM_LANGUAGE_MODEL"
            },
            {
              "value": "ANTHROPIC"
            },
            {
              "value": "FIREWORKS"
            },
            {
              "value": "GROQ"
            },
            {
              "value": "GOOGLE"
            }
          ]
        }
      },
      "type_:ReturnLanguageModelModelResource": {
        "name": "ReturnLanguageModelModelResource",
        "description": "String that specifies the language model to use with `model_provider`.",
        "shape": {
          "type": "enum",
          "values": [
            {
              "value": "claude-3-5-sonnet-latest"
            },
            {
              "value": "claude-3-5-sonnet-20240620"
            },
            {
              "value": "claude-3-opus-20240229"
            },
            {
              "value": "claude-3-sonnet-20240229"
            },
            {
              "value": "claude-3-haiku-20240307"
            },
            {
              "value": "claude-2.1"
            },
            {
              "value": "claude-instant-1.2"
            },
            {
              "value": "gemini-1.5-pro"
            },
            {
              "value": "gemini-1.5-flash"
            },
            {
              "value": "gemini-1.5-pro-002"
            },
            {
              "value": "gemini-1.5-flash-002"
            },
            {
              "value": "gpt-4-turbo-preview"
            },
            {
              "value": "gpt-3.5-turbo-0125"
            },
            {
              "value": "gpt-3.5-turbo"
            },
            {
              "value": "gpt-4o"
            },
            {
              "value": "gpt-4o-mini"
            },
            {
              "value": "gemma-7b-it"
            },
            {
              "value": "llama3-8b-8192"
            },
            {
              "value": "llama3-70b-8192"
            },
            {
              "value": "llama-3.1-70b-versatile"
            },
            {
              "value": "llama-3.1-8b-instant"
            },
            {
              "value": "accounts/fireworks/models/mixtral-8x7b-instruct"
            },
            {
              "value": "accounts/fireworks/models/llama-v3p1-405b-instruct"
            },
            {
              "value": "accounts/fireworks/models/llama-v3p1-70b-instruct"
            },
            {
              "value": "accounts/fireworks/models/llama-v3p1-8b-instruct"
            },
            {
              "value": "ellm"
            }
          ]
        }
      },
      "type_:ReturnLanguageModel": {
        "name": "ReturnLanguageModel",
        "description": "A specific LanguageModel",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "model_provider",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:ReturnLanguageModelModelProvider"
                    }
                  }
                }
              },
              "description": "The provider of the supplemental language model."
            },
            {
              "key": "model_resource",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:ReturnLanguageModelModelResource"
                    }
                  }
                }
              },
              "description": "String that specifies the language model to use with `model_provider`."
            },
            {
              "key": "temperature",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "double",
                        "minimum": 2.2250738585072014e-308,
                        "maximum": 1.7976931348623157e+308,
                        "default": 0
                      }
                    }
                  }
                }
              },
              "description": "The model temperature, with values between 0 to 1 (inclusive).\n\nControls the randomness of the LLM’s output, with values closer to 0 yielding focused, deterministic responses and values closer to 1 producing more creative, diverse responses."
            }
          ],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_:ReturnTimeoutSpec": {
        "name": "ReturnTimeoutSpec",
        "description": "A specific timeout configuration to be returned from the server",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "enabled",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "boolean",
                    "default": false
                  }
                }
              },
              "description": "Boolean indicating if this timeout is enabled.\n\nIf set to false, EVI will not timeout due to a specified duration being reached. However, the conversation will eventually disconnect after 1,800 seconds (30 minutes), which is the maximum WebSocket duration limit for EVI."
            },
            {
              "key": "duration_secs",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                }
              },
              "description": "Duration in seconds for the timeout (e.g. 600 seconds represents 10 minutes)."
            }
          ],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_:ReturnTimeoutSpecs": {
        "name": "ReturnTimeoutSpecs",
        "description": "Collection of timeout specifications returned by the server.\n\nTimeouts are sent by the server when specific time-based events occur during a chat session. These specifications set the inactivity timeout and the maximum duration an EVI WebSocket connection can stay open before it is automatically disconnected.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "inactivity",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:ReturnTimeoutSpec"
                }
              },
              "description": "Specifies the duration of user inactivity (in seconds) after which the EVI WebSocket connection will be automatically disconnected. Default is 600 seconds (10 minutes).\n\nAccepts a minimum value of 30 seconds and a maximum value of 1,800 seconds."
            },
            {
              "key": "max_duration",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:ReturnTimeoutSpec"
                }
              },
              "description": "Specifies the maximum allowed duration (in seconds) for an EVI WebSocket connection before it is automatically disconnected. Default is 1,800 seconds (30 minutes).\n\nAccepts a minimum value of 30 seconds and a maximum value of 1,800 seconds."
            }
          ],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_:ReturnVoiceProvider": {
        "name": "ReturnVoiceProvider",
        "description": "The provider of the voice to use. Supported values are `HUME_AI` and `CUSTOM_VOICE`.",
        "shape": {
          "type": "enum",
          "values": [
            {
              "value": "HUME_AI"
            },
            {
              "value": "CUSTOM_VOICE"
            }
          ]
        }
      },
      "type_:ReturnVoice": {
        "name": "ReturnVoice",
        "description": "A specific voice specification",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "provider",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:ReturnVoiceProvider"
                }
              },
              "description": "The provider of the voice to use. Supported values are `HUME_AI` and `CUSTOM_VOICE`."
            },
            {
              "key": "name",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "The name of the specified voice.\n\nThis will either be the name of a previously created Custom Voice or one of our 8 base voices: `ITO`, `KORA`, `DACHER`, `AURA`, `FINN`, `WHIMSY`, `STELLA`, or `SUNNY`."
            },
            {
              "key": "custom_voice",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:ReturnCustomVoice"
                    }
                  }
                }
              }
            }
          ],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_:ReturnPagedUserDefinedTools": {
        "name": "ReturnPagedUserDefinedTools",
        "description": "A paginated list of user defined tool versions returned from the server",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "page_number",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              },
              "description": "The page number of the returned list.\n\nThis value corresponds to the `page_number` parameter specified in the request. Pagination uses zero-based indexing."
            },
            {
              "key": "page_size",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              },
              "description": "The maximum number of items returned per page.\n\nThis value corresponds to the `page_size` parameter specified in the request."
            },
            {
              "key": "total_pages",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              },
              "description": "The total number of pages in the collection."
            },
            {
              "key": "tools_page",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "list",
                  "itemShape": {
                    "type": "alias",
                    "value": {
                      "type": "optional",
                      "shape": {
                        "type": "alias",
                        "value": {
                          "type": "id",
                          "id": "type_:ReturnUserDefinedTool"
                        }
                      }
                    }
                  }
                }
              },
              "description": "List of tools returned for the specified `page_number` and `page_size`."
            }
          ],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_:ReturnPagedPrompts": {
        "name": "ReturnPagedPrompts",
        "description": "A paginated list of prompt versions returned from the server",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "page_number",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              },
              "description": "The page number of the returned list.\n\nThis value corresponds to the `page_number` parameter specified in the request. Pagination uses zero-based indexing."
            },
            {
              "key": "page_size",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              },
              "description": "The maximum number of items returned per page.\n\nThis value corresponds to the `page_size` parameter specified in the request."
            },
            {
              "key": "total_pages",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              },
              "description": "The total number of pages in the collection."
            },
            {
              "key": "prompts_page",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "list",
                  "itemShape": {
                    "type": "alias",
                    "value": {
                      "type": "optional",
                      "shape": {
                        "type": "alias",
                        "value": {
                          "type": "id",
                          "id": "type_:ReturnPrompt"
                        }
                      }
                    }
                  }
                }
              },
              "description": "List of prompts returned for the specified `page_number` and `page_size`."
            }
          ],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_:ReturnPagedCustomVoices": {
        "name": "ReturnPagedCustomVoices",
        "description": "A paginated list of custom voices returned from the server",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "page_number",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              },
              "description": "The page number of the returned list.\n\nThis value corresponds to the `page_number` parameter specified in the request. Pagination uses zero-based indexing."
            },
            {
              "key": "page_size",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              },
              "description": "The maximum number of items returned per page.\n\nThis value corresponds to the `page_size` parameter specified in the request."
            },
            {
              "key": "total_pages",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              },
              "description": "The total number of pages in the collection."
            },
            {
              "key": "custom_voices_page",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "list",
                  "itemShape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:ReturnCustomVoice"
                    }
                  }
                }
              },
              "description": "List of Custom Voices for the specified `page_number` and `page_size`."
            }
          ],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_:ReturnPagedConfigs": {
        "name": "ReturnPagedConfigs",
        "description": "A paginated list of config versions returned from the server",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "page_number",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                }
              },
              "description": "The page number of the returned list.\n\nThis value corresponds to the `page_number` parameter specified in the request. Pagination uses zero-based indexing."
            },
            {
              "key": "page_size",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                }
              },
              "description": "The maximum number of items returned per page.\n\nThis value corresponds to the `page_size` parameter specified in the request."
            },
            {
              "key": "total_pages",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              },
              "description": "The total number of pages in the collection."
            },
            {
              "key": "configs_page",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "list",
                      "itemShape": {
                        "type": "alias",
                        "value": {
                          "type": "id",
                          "id": "type_:ReturnConfig"
                        }
                      }
                    }
                  }
                }
              },
              "description": "List of configs returned for the specified `page_number` and `page_size`."
            }
          ],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_:ReturnChatStatus": {
        "name": "ReturnChatStatus",
        "description": "Indicates the current state of the chat. There are six possible statuses:\n\n- `ACTIVE`: The chat is currently active and ongoing.\n\n- `USER_ENDED`: The chat was manually ended by the user.\n\n- `USER_TIMEOUT`: The chat ended due to a user-defined timeout.\n\n- `MAX_DURATION_TIMEOUT`: The chat ended because it reached the maximum allowed duration.\n\n- `INACTIVITY_TIMEOUT`: The chat ended due to an inactivity timeout.\n\n- `ERROR`: The chat ended unexpectedly due to an error.",
        "shape": {
          "type": "enum",
          "values": [
            {
              "value": "ACTIVE"
            },
            {
              "value": "USER_ENDED"
            },
            {
              "value": "USER_TIMEOUT"
            },
            {
              "value": "MAX_DURATION_TIMEOUT"
            },
            {
              "value": "INACTIVITY_TIMEOUT"
            },
            {
              "value": "ERROR"
            }
          ]
        }
      },
      "type_:ReturnChat": {
        "name": "ReturnChat",
        "description": "A description of chat and its status",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "Identifier for a Chat. Formatted as a UUID."
            },
            {
              "key": "chat_group_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "Identifier for the Chat Group. Any chat resumed from this Chat will have the same `chat_group_id`. Formatted as a UUID."
            },
            {
              "key": "status",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:ReturnChatStatus"
                }
              },
              "description": "Indicates the current state of the chat. There are six possible statuses:\n\n- `ACTIVE`: The chat is currently active and ongoing.\n\n- `USER_ENDED`: The chat was manually ended by the user.\n\n- `USER_TIMEOUT`: The chat ended due to a user-defined timeout.\n\n- `MAX_DURATION_TIMEOUT`: The chat ended because it reached the maximum allowed duration.\n\n- `INACTIVITY_TIMEOUT`: The chat ended due to an inactivity timeout.\n\n- `ERROR`: The chat ended unexpectedly due to an error."
            },
            {
              "key": "start_timestamp",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "long",
                    "default": 0
                  }
                }
              },
              "description": "Time at which the Chat started. Measured in seconds since the Unix epoch."
            },
            {
              "key": "end_timestamp",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "long",
                        "default": 0
                      }
                    }
                  }
                }
              },
              "description": "Time at which the Chat ended. Measured in seconds since the Unix epoch."
            },
            {
              "key": "event_count",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "long",
                        "default": 0
                      }
                    }
                  }
                }
              },
              "description": "The total number of events currently in this chat."
            },
            {
              "key": "metadata",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "Stringified JSON with additional metadata about the chat."
            },
            {
              "key": "config",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:ReturnConfigSpec"
                    }
                  }
                }
              }
            }
          ],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_:ReturnConfigSpec": {
        "name": "ReturnConfigSpec",
        "description": "The Config associated with this Chat.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "Identifier for a Config. Formatted as a UUID."
            },
            {
              "key": "version",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                }
              },
              "description": "Version number for a Config.\n\nConfigs, Prompts, Custom Voices, and Tools are versioned. This versioning system supports iterative development, allowing you to progressively refine configurations and revert to previous versions if needed.\n\nVersion numbers are integer values representing different iterations of the Config. Each update to the Config increments its version number."
            }
          ],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_:ReturnPagedChatsPaginationDirection": {
        "name": "ReturnPagedChatsPaginationDirection",
        "description": "Indicates the order in which the paginated results are presented, based on their creation date.\n\nIt shows `ASC` for ascending order (chronological, with the oldest records first) or `DESC` for descending order (reverse-chronological, with the newest records first). This value corresponds to the `ascending_order` query parameter used in the request.",
        "shape": {
          "type": "enum",
          "values": [
            {
              "value": "ASC"
            },
            {
              "value": "DESC"
            }
          ]
        }
      },
      "type_:ReturnPagedChats": {
        "name": "ReturnPagedChats",
        "description": "A paginated list of chats returned from the server",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "page_number",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              },
              "description": "The page number of the returned list.\n\nThis value corresponds to the `page_number` parameter specified in the request. Pagination uses zero-based indexing."
            },
            {
              "key": "page_size",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              },
              "description": "The maximum number of items returned per page.\n\nThis value corresponds to the `page_size` parameter specified in the request."
            },
            {
              "key": "total_pages",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              },
              "description": "The total number of pages in the collection."
            },
            {
              "key": "pagination_direction",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:ReturnPagedChatsPaginationDirection"
                }
              },
              "description": "Indicates the order in which the paginated results are presented, based on their creation date.\n\nIt shows `ASC` for ascending order (chronological, with the oldest records first) or `DESC` for descending order (reverse-chronological, with the newest records first). This value corresponds to the `ascending_order` query parameter used in the request."
            },
            {
              "key": "chats_page",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "list",
                  "itemShape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:ReturnChat"
                    }
                  }
                }
              },
              "description": "List of Chats and their metadata returned for the specified `page_number` and `page_size`."
            }
          ],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_:ReturnChatEventRole": {
        "name": "ReturnChatEventRole",
        "description": "The role of the entity which generated the Chat Event. There are four possible values:\n\n- `USER`: The user, capable of sending user messages and interruptions.\n\n- `AGENT`: The assistant, capable of sending agent messages.\n\n- `SYSTEM`: The backend server, capable of transmitting errors.\n\n- `TOOL`: The function calling mechanism.",
        "shape": {
          "type": "enum",
          "values": [
            {
              "value": "USER"
            },
            {
              "value": "AGENT"
            },
            {
              "value": "SYSTEM"
            },
            {
              "value": "TOOL"
            }
          ]
        }
      },
      "type_:ReturnChatEventType": {
        "name": "ReturnChatEventType",
        "description": "Type of Chat Event. There are six possible values:\n\n- `SYSTEM_PROMPT`: Contains the system prompt for use in the session.\n\n- `USER_MESSAGE`: Contains the message sent by the user.\n\n- `USER_INTERRUPTION`: Contains an interruption made by the user while the agent is speaking.\n\n- `AGENT_MESSAGE`: Contains the assistant’s message, generated by Hume’s eLLM and supplemental LLM.\n\n- `FUNCTION_CALL`: Contains the invocation of a tool.\n\n- `FUNCTION_CALL_RESPONSE`: Contains the tool response.",
        "shape": {
          "type": "enum",
          "values": [
            {
              "value": "SYSTEM_PROMPT"
            },
            {
              "value": "USER_MESSAGE"
            },
            {
              "value": "USER_INTERRUPTION"
            },
            {
              "value": "AGENT_MESSAGE"
            },
            {
              "value": "FUNCTION_CALL"
            },
            {
              "value": "FUNCTION_CALL_RESPONSE"
            }
          ]
        }
      },
      "type_:ReturnChatEvent": {
        "name": "ReturnChatEvent",
        "description": "A description of a single event in a chat returned from the server",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "Identifier for a Chat Event. Formatted as a UUID."
            },
            {
              "key": "chat_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "Identifier for the Chat this event occurred in. Formatted as a UUID."
            },
            {
              "key": "timestamp",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "long",
                    "default": 0
                  }
                }
              },
              "description": "Time at which the Chat Event occurred. Measured in seconds since the Unix epoch."
            },
            {
              "key": "role",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:ReturnChatEventRole"
                }
              },
              "description": "The role of the entity which generated the Chat Event. There are four possible values:\n\n- `USER`: The user, capable of sending user messages and interruptions.\n\n- `AGENT`: The assistant, capable of sending agent messages.\n\n- `SYSTEM`: The backend server, capable of transmitting errors.\n\n- `TOOL`: The function calling mechanism."
            },
            {
              "key": "type",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:ReturnChatEventType"
                }
              },
              "description": "Type of Chat Event. There are six possible values:\n\n- `SYSTEM_PROMPT`: Contains the system prompt for use in the session.\n\n- `USER_MESSAGE`: Contains the message sent by the user.\n\n- `USER_INTERRUPTION`: Contains an interruption made by the user while the agent is speaking.\n\n- `AGENT_MESSAGE`: Contains the assistant’s message, generated by Hume’s eLLM and supplemental LLM.\n\n- `FUNCTION_CALL`: Contains the invocation of a tool.\n\n- `FUNCTION_CALL_RESPONSE`: Contains the tool response."
            },
            {
              "key": "message_text",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "The text of the Chat Event. This field contains the message content for each event type listed in the `type` field."
            },
            {
              "key": "emotion_features",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "Stringified JSON containing the prosody model inference results.\n\nEVI uses the prosody model to measure 48 expressions related to speech and vocal characteristics. These results contain a detailed emotional and tonal analysis of the audio. Scores typically range from 0 to 1, with higher values indicating a stronger confidence level in the measured attribute."
            },
            {
              "key": "metadata",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "Stringified JSON with additional metadata about the chat event."
            }
          ],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_:ReturnChatPagedEventsStatus": {
        "name": "ReturnChatPagedEventsStatus",
        "description": "Indicates the current state of the chat. There are six possible statuses:\n\n- `ACTIVE`: The chat is currently active and ongoing.\n\n- `USER_ENDED`: The chat was manually ended by the user.\n\n- `USER_TIMEOUT`: The chat ended due to a user-defined timeout.\n\n- `MAX_DURATION_TIMEOUT`: The chat ended because it reached the maximum allowed duration.\n\n- `INACTIVITY_TIMEOUT`: The chat ended due to an inactivity timeout.\n\n- `ERROR`: The chat ended unexpectedly due to an error.",
        "shape": {
          "type": "enum",
          "values": [
            {
              "value": "ACTIVE"
            },
            {
              "value": "USER_ENDED"
            },
            {
              "value": "USER_TIMEOUT"
            },
            {
              "value": "MAX_DURATION_TIMEOUT"
            },
            {
              "value": "INACTIVITY_TIMEOUT"
            },
            {
              "value": "ERROR"
            }
          ]
        }
      },
      "type_:ReturnChatPagedEventsPaginationDirection": {
        "name": "ReturnChatPagedEventsPaginationDirection",
        "description": "Indicates the order in which the paginated results are presented, based on their creation date.\n\nIt shows `ASC` for ascending order (chronological, with the oldest records first) or `DESC` for descending order (reverse-chronological, with the newest records first). This value corresponds to the `ascending_order` query parameter used in the request.",
        "shape": {
          "type": "enum",
          "values": [
            {
              "value": "ASC"
            },
            {
              "value": "DESC"
            }
          ]
        }
      },
      "type_:ReturnChatPagedEvents": {
        "name": "ReturnChatPagedEvents",
        "description": "A description of chat status with a paginated list of chat events returned from the server",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "Identifier for a Chat. Formatted as a UUID."
            },
            {
              "key": "chat_group_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "Identifier for the Chat Group. Any chat resumed from this Chat will have the same `chat_group_id`. Formatted as a UUID."
            },
            {
              "key": "status",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:ReturnChatPagedEventsStatus"
                }
              },
              "description": "Indicates the current state of the chat. There are six possible statuses:\n\n- `ACTIVE`: The chat is currently active and ongoing.\n\n- `USER_ENDED`: The chat was manually ended by the user.\n\n- `USER_TIMEOUT`: The chat ended due to a user-defined timeout.\n\n- `MAX_DURATION_TIMEOUT`: The chat ended because it reached the maximum allowed duration.\n\n- `INACTIVITY_TIMEOUT`: The chat ended due to an inactivity timeout.\n\n- `ERROR`: The chat ended unexpectedly due to an error."
            },
            {
              "key": "start_timestamp",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "long",
                    "default": 0
                  }
                }
              },
              "description": "Time at which the Chat started. Measured in seconds since the Unix epoch."
            },
            {
              "key": "end_timestamp",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "long",
                        "default": 0
                      }
                    }
                  }
                }
              },
              "description": "Time at which the Chat ended. Measured in seconds since the Unix epoch."
            },
            {
              "key": "pagination_direction",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:ReturnChatPagedEventsPaginationDirection"
                }
              },
              "description": "Indicates the order in which the paginated results are presented, based on their creation date.\n\nIt shows `ASC` for ascending order (chronological, with the oldest records first) or `DESC` for descending order (reverse-chronological, with the newest records first). This value corresponds to the `ascending_order` query parameter used in the request."
            },
            {
              "key": "events_page",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "list",
                  "itemShape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:ReturnChatEvent"
                    }
                  }
                }
              },
              "description": "List of Chat Events for the specified `page_number` and `page_size`."
            },
            {
              "key": "metadata",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "Stringified JSON with additional metadata about the chat."
            },
            {
              "key": "page_number",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              },
              "description": "The page number of the returned list.\n\nThis value corresponds to the `page_number` parameter specified in the request. Pagination uses zero-based indexing."
            },
            {
              "key": "page_size",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              },
              "description": "The maximum number of items returned per page.\n\nThis value corresponds to the `page_size` parameter specified in the request."
            },
            {
              "key": "total_pages",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              },
              "description": "The total number of pages in the collection."
            },
            {
              "key": "config",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:ReturnConfigSpec"
                    }
                  }
                }
              }
            }
          ],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_:ReturnChatAudioReconstructionStatus": {
        "name": "ReturnChatAudioReconstructionStatus",
        "description": "Indicates the current state of the audio reconstruction job. There are five possible statuses:\n\n- `QUEUED`: The reconstruction job is waiting to be processed.\n\n- `IN_PROGRESS`: The reconstruction is currently being processed.\n\n- `COMPLETE`: The audio reconstruction is finished and ready for download.\n\n- `ERROR`: An error occurred during the reconstruction process.\n\n- `CANCELED`: The reconstruction job has been canceled.",
        "shape": {
          "type": "enum",
          "values": [
            {
              "value": "QUEUED"
            },
            {
              "value": "IN_PROGRESS"
            },
            {
              "value": "COMPLETE"
            },
            {
              "value": "ERROR"
            },
            {
              "value": "CANCELLED"
            }
          ]
        }
      },
      "type_:ReturnChatAudioReconstruction": {
        "name": "ReturnChatAudioReconstruction",
        "description": "List of chat audio reconstructions returned for the specified page number and page size.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "Identifier for the chat. Formatted as a UUID."
            },
            {
              "key": "user_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "Identifier for the user that owns this chat. Formatted as a UUID."
            },
            {
              "key": "status",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:ReturnChatAudioReconstructionStatus"
                }
              },
              "description": "Indicates the current state of the audio reconstruction job. There are five possible statuses:\n\n- `QUEUED`: The reconstruction job is waiting to be processed.\n\n- `IN_PROGRESS`: The reconstruction is currently being processed.\n\n- `COMPLETE`: The audio reconstruction is finished and ready for download.\n\n- `ERROR`: An error occurred during the reconstruction process.\n\n- `CANCELED`: The reconstruction job has been canceled."
            },
            {
              "key": "filename",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "Name of the chat audio reconstruction file."
            },
            {
              "key": "modified_at",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "long",
                        "default": 0
                      }
                    }
                  }
                }
              },
              "description": "The timestamp of the most recent status change for this audio reconstruction, formatted milliseconds since the Unix epoch."
            },
            {
              "key": "signed_audio_url",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "Signed URL used to download the chat audio reconstruction file."
            },
            {
              "key": "signed_url_expiration_timestamp_millis",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "long",
                        "default": 0
                      }
                    }
                  }
                }
              },
              "description": "The timestamp when the signed URL will expire, formatted as a Unix epoch milliseconds."
            }
          ],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_:ReturnActiveChatCount": {
        "name": "ReturnActiveChatCount",
        "description": "A description of current chat chat sessions for a user",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "timestamp",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "long",
                    "default": 0
                  }
                }
              },
              "description": "The timestamp for when chat status was measured. Formatted as a Unix epoch milliseconds."
            },
            {
              "key": "total_user_active_chats",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              },
              "description": "The total number of active chats for this user."
            },
            {
              "key": "max_allowed_active_chats",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                }
              },
              "description": "The maximum number of concurrent active chats for this user."
            },
            {
              "key": "more_active_chats_allowed",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "boolean",
                    "default": false
                  }
                }
              },
              "description": "Boolean indicating if the user is allowed to start more chats."
            },
            {
              "key": "per_tag",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "list",
                      "itemShape": {
                        "type": "alias",
                        "value": {
                          "type": "optional",
                          "shape": {
                            "type": "alias",
                            "value": {
                              "type": "id",
                              "id": "type_:ReturnActiveChatCountPerTag"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              },
              "description": "Optional List of chat counts per tag."
            }
          ],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_:ReturnActiveChatCountPerTag": {
        "name": "ReturnActiveChatCountPerTag",
        "description": "A description of current chat chat sessions per tag",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "tag",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "User tag applied to a chat."
            },
            {
              "key": "total_tag_active_chats",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              },
              "description": "The total number of active chats for this user with the specified tag."
            }
          ],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_:ReturnChatGroup": {
        "name": "ReturnChatGroup",
        "description": "A description of chat_group and its status",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "Identifier for the Chat Group. Any Chat resumed from this Chat Group will have the same `chat_group_id`. Formatted as a UUID."
            },
            {
              "key": "first_start_timestamp",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "long",
                    "default": 0
                  }
                }
              },
              "description": "Time at which the first Chat in this Chat Group was created. Measured in seconds since the Unix epoch."
            },
            {
              "key": "most_recent_start_timestamp",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "long",
                    "default": 0
                  }
                }
              },
              "description": "Time at which the most recent Chat in this Chat Group was created. Measured in seconds since the Unix epoch."
            },
            {
              "key": "most_recent_chat_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "The `chat_id` of the most recent Chat in this Chat Group. Formatted as a UUID."
            },
            {
              "key": "num_chats",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              },
              "description": "The total number of Chats in this Chat Group."
            },
            {
              "key": "active",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean",
                        "default": false
                      }
                    }
                  }
                }
              },
              "description": "Denotes whether there is an active Chat associated with this Chat Group."
            }
          ],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_:ReturnPagedChatGroupsPaginationDirection": {
        "name": "ReturnPagedChatGroupsPaginationDirection",
        "description": "Indicates the order in which the paginated results are presented, based on their creation date.\n\nIt shows `ASC` for ascending order (chronological, with the oldest records first) or `DESC` for descending order (reverse-chronological, with the newest records first). This value corresponds to the `ascending_order` query parameter used in the request.",
        "shape": {
          "type": "enum",
          "values": [
            {
              "value": "ASC"
            },
            {
              "value": "DESC"
            }
          ]
        }
      },
      "type_:ReturnPagedChatGroups": {
        "name": "ReturnPagedChatGroups",
        "description": "A paginated list of chat_groups returned from the server",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "page_number",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              },
              "description": "The page number of the returned list.\n\nThis value corresponds to the `page_number` parameter specified in the request. Pagination uses zero-based indexing."
            },
            {
              "key": "page_size",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              },
              "description": "The maximum number of items returned per page.\n\nThis value corresponds to the `page_size` parameter specified in the request."
            },
            {
              "key": "total_pages",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              },
              "description": "The total number of pages in the collection."
            },
            {
              "key": "pagination_direction",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:ReturnPagedChatGroupsPaginationDirection"
                }
              },
              "description": "Indicates the order in which the paginated results are presented, based on their creation date.\n\nIt shows `ASC` for ascending order (chronological, with the oldest records first) or `DESC` for descending order (reverse-chronological, with the newest records first). This value corresponds to the `ascending_order` query parameter used in the request."
            },
            {
              "key": "chat_groups_page",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "list",
                  "itemShape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:ReturnChatGroup"
                    }
                  }
                }
              },
              "description": "List of Chat Groups and their metadata returned for the specified `page_number` and `page_size`."
            }
          ],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_:ReturnChatGroupPagedChatsPaginationDirection": {
        "name": "ReturnChatGroupPagedChatsPaginationDirection",
        "description": "Indicates the order in which the paginated results are presented, based on their creation date.\n\nIt shows `ASC` for ascending order (chronological, with the oldest records first) or `DESC` for descending order (reverse-chronological, with the newest records first). This value corresponds to the `ascending_order` query parameter used in the request.",
        "shape": {
          "type": "enum",
          "values": [
            {
              "value": "ASC"
            },
            {
              "value": "DESC"
            }
          ]
        }
      },
      "type_:ReturnChatGroupPagedChats": {
        "name": "ReturnChatGroupPagedChats",
        "description": "A description of chat_group and its status with a paginated list of each chat in the chat_group",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "Identifier for the Chat Group. Any Chat resumed from this Chat Group will have the same `chat_group_id`. Formatted as a UUID."
            },
            {
              "key": "first_start_timestamp",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "long",
                    "default": 0
                  }
                }
              },
              "description": "Time at which the first Chat in this Chat Group was created. Measured in seconds since the Unix epoch."
            },
            {
              "key": "most_recent_start_timestamp",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "long",
                    "default": 0
                  }
                }
              },
              "description": "Time at which the most recent Chat in this Chat Group was created. Measured in seconds since the Unix epoch."
            },
            {
              "key": "num_chats",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              },
              "description": "The total number of Chats associated with this Chat Group."
            },
            {
              "key": "page_number",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              },
              "description": "The page number of the returned list.\n\nThis value corresponds to the `page_number` parameter specified in the request. Pagination uses zero-based indexing."
            },
            {
              "key": "page_size",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              },
              "description": "The maximum number of items returned per page.\n\nThis value corresponds to the `page_size` parameter specified in the request."
            },
            {
              "key": "total_pages",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              },
              "description": "The total number of pages in the collection."
            },
            {
              "key": "pagination_direction",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:ReturnChatGroupPagedChatsPaginationDirection"
                }
              },
              "description": "Indicates the order in which the paginated results are presented, based on their creation date.\n\nIt shows `ASC` for ascending order (chronological, with the oldest records first) or `DESC` for descending order (reverse-chronological, with the newest records first). This value corresponds to the `ascending_order` query parameter used in the request."
            },
            {
              "key": "chats_page",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "list",
                  "itemShape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:ReturnChat"
                    }
                  }
                }
              },
              "description": "List of Chats for the specified `page_number` and `page_size`."
            },
            {
              "key": "active",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean",
                        "default": false
                      }
                    }
                  }
                }
              },
              "description": "Denotes whether there is an active Chat associated with this Chat Group."
            }
          ],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_:ReturnChatGroupPagedEventsPaginationDirection": {
        "name": "ReturnChatGroupPagedEventsPaginationDirection",
        "description": "Indicates the order in which the paginated results are presented, based on their creation date.\n\nIt shows `ASC` for ascending order (chronological, with the oldest records first) or `DESC` for descending order (reverse-chronological, with the newest records first). This value corresponds to the `ascending_order` query parameter used in the request.",
        "shape": {
          "type": "enum",
          "values": [
            {
              "value": "ASC"
            },
            {
              "value": "DESC"
            }
          ]
        }
      },
      "type_:ReturnChatGroupPagedEvents": {
        "name": "ReturnChatGroupPagedEvents",
        "description": "A paginated list of chat events that occurred across chats in this chat_group from the server",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "Identifier for the Chat Group. Any Chat resumed from this Chat Group will have the same `chat_group_id`. Formatted as a UUID."
            },
            {
              "key": "page_number",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              },
              "description": "The page number of the returned list.\n\nThis value corresponds to the `page_number` parameter specified in the request. Pagination uses zero-based indexing."
            },
            {
              "key": "page_size",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              },
              "description": "The maximum number of items returned per page.\n\nThis value corresponds to the `page_size` parameter specified in the request."
            },
            {
              "key": "total_pages",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              },
              "description": "The total number of pages in the collection."
            },
            {
              "key": "pagination_direction",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:ReturnChatGroupPagedEventsPaginationDirection"
                }
              },
              "description": "Indicates the order in which the paginated results are presented, based on their creation date.\n\nIt shows `ASC` for ascending order (chronological, with the oldest records first) or `DESC` for descending order (reverse-chronological, with the newest records first). This value corresponds to the `ascending_order` query parameter used in the request."
            },
            {
              "key": "events_page",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "list",
                  "itemShape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:ReturnChatEvent"
                    }
                  }
                }
              },
              "description": "List of Chat Events for the specified `page_number` and `page_size`."
            }
          ],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_:ReturnChatGroupPagedAudioReconstructionsPaginationDirection": {
        "name": "ReturnChatGroupPagedAudioReconstructionsPaginationDirection",
        "description": "Indicates the order in which the paginated results are presented, based on their creation date.\n\nIt shows `ASC` for ascending order (chronological, with the oldest records first) or `DESC` for descending order (reverse-chronological, with the newest records first). This value corresponds to the `ascending_order` query parameter used in the request.",
        "shape": {
          "type": "enum",
          "values": [
            {
              "value": "ASC"
            },
            {
              "value": "DESC"
            }
          ]
        }
      },
      "type_:ReturnChatGroupPagedAudioReconstructions": {
        "name": "ReturnChatGroupPagedAudioReconstructions",
        "description": "A paginated list of chat reconstructions for a particular chatgroup",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "Identifier for the chat group. Formatted as a UUID."
            },
            {
              "key": "user_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "Identifier for the user that owns this chat. Formatted as a UUID."
            },
            {
              "key": "num_chats",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              },
              "description": "Total number of chats in this chatgroup"
            },
            {
              "key": "page_number",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              },
              "description": "The page number of the returned list.\n\nThis value corresponds to the `page_number` parameter specified in the request. Pagination uses zero-based indexing."
            },
            {
              "key": "page_size",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              },
              "description": "The maximum number of items returned per page.\n\nThis value corresponds to the `page_size` parameter specified in the request."
            },
            {
              "key": "total_pages",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              },
              "description": "The total number of pages in the collection."
            },
            {
              "key": "pagination_direction",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:ReturnChatGroupPagedAudioReconstructionsPaginationDirection"
                }
              },
              "description": "Indicates the order in which the paginated results are presented, based on their creation date.\n\nIt shows `ASC` for ascending order (chronological, with the oldest records first) or `DESC` for descending order (reverse-chronological, with the newest records first). This value corresponds to the `ascending_order` query parameter used in the request."
            },
            {
              "key": "audio_reconstructions_page",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "list",
                  "itemShape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:ReturnChatAudioReconstruction"
                    }
                  }
                }
              },
              "description": "List of chat audio reconstructions returned for the specified page number and page size."
            }
          ],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_:PostedPromptSpec": {
        "name": "PostedPromptSpec",
        "description": "A Prompt associated with this Config.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "version",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "unknown"
                    }
                  }
                }
              }
            }
          ],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_:AssistantInput": {
        "name": "AssistantInput",
        "description": "When provided, the input is spoken by EVI.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "type",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "literal",
                  "value": {
                    "type": "stringLiteral",
                    "value": "assistant_input"
                  }
                }
              },
              "description": "The type of message sent through the socket; must be `assistant_input` for our server to correctly identify and process it as an Assistant Input message."
            },
            {
              "key": "custom_session_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "Used to manage conversational state, correlate frontend and backend data, and persist conversations across EVI sessions."
            },
            {
              "key": "text",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "Assistant text to synthesize into spoken audio and insert into the conversation.\n\nEVI uses this text to generate spoken audio using our proprietary expressive text-to-speech model. Our model adds appropriate emotional inflections and tones to the text based on the user’s expressions and the context of the conversation. The synthesized audio is streamed back to the user as an [Assistant Message](/reference/empathic-voice-interface-evi/chat/chat#receive.Assistant%20Message.type)."
            }
          ],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_:AudioConfiguration": {
        "name": "AudioConfiguration",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "encoding",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:Encoding"
                }
              },
              "description": "Encoding format of the audio input, such as `linear16`."
            },
            {
              "key": "channels",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              },
              "description": "Number of audio channels."
            },
            {
              "key": "sample_rate",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              },
              "description": "Audio sample rate. Number of samples per second in the audio input, measured in Hertz."
            }
          ],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_:AudioInput": {
        "name": "AudioInput",
        "description": "When provided, the input is audio.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "type",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "literal",
                  "value": {
                    "type": "stringLiteral",
                    "value": "audio_input"
                  }
                }
              },
              "description": "The type of message sent through the socket; must be `audio_input` for our server to correctly identify and process it as an Audio Input message.\n\nThis message is used for sending audio input data to EVI for processing and expression measurement. Audio data should be sent as a continuous stream, encoded in Base64."
            },
            {
              "key": "custom_session_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "Used to manage conversational state, correlate frontend and backend data, and persist conversations across EVI sessions."
            },
            {
              "key": "data",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "Base64 encoded audio input to insert into the conversation.\n\nThe content of an Audio Input message is treated as the user’s speech to EVI and must be streamed continuously. Pre-recorded audio files are not supported.\n\nFor optimal transcription quality, the audio data should be transmitted in small chunks.\n\nHume recommends streaming audio with a buffer window of 20 milliseconds (ms), or 100 milliseconds (ms) for web applications."
            }
          ],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_:BuiltInTool": {
        "name": "BuiltInTool",
        "description": "Name of the built-in tool. Set to `web_search` to equip EVI with the built-in Web Search tool.",
        "shape": {
          "type": "enum",
          "values": [
            {
              "value": "web_search"
            },
            {
              "value": "hang_up"
            }
          ]
        }
      },
      "type_:BuiltinToolConfig": {
        "name": "BuiltinToolConfig",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "name",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:BuiltInTool"
                }
              }
            },
            {
              "key": "fallback_content",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "Optional text passed to the supplemental LLM if the tool call fails. The LLM then uses this text to generate a response back to the user, ensuring continuity in the conversation."
            }
          ],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_:Context": {
        "name": "Context",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "type",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:ContextType"
                    }
                  }
                }
              },
              "description": "The persistence level of the injected context. Specifies how long the injected context will remain active in the session.\n\nThere are three possible context types:\n\n- **Persistent**: The context is appended to all user messages for the duration of the session.\n\n- **Temporary**: The context is appended only to the next user message.\n\n- **Editable**: The original context is updated to reflect the new context.\n\nIf the type is not specified, it will default to `temporary`."
            },
            {
              "key": "text",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "The context to be injected into the conversation. Helps inform the LLM's response by providing relevant information about the ongoing conversation.\n\nThis text will be appended to the end of user messages based on the chosen persistence level. For example, if you want to remind EVI of its role as a helpful weather assistant, the context you insert will be appended to the end of user messages as `{Context: You are a helpful weather assistant}`."
            }
          ],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_:ContextType": {
        "name": "ContextType",
        "shape": {
          "type": "enum",
          "values": [
            {
              "value": "editable"
            },
            {
              "value": "persistent"
            },
            {
              "value": "temporary"
            }
          ]
        }
      },
      "type_:Encoding": {
        "name": "Encoding",
        "shape": {
          "type": "alias",
          "value": {
            "type": "literal",
            "value": {
              "type": "stringLiteral",
              "value": "linear16"
            }
          }
        }
      },
      "type_:ErrorLevel": {
        "name": "ErrorLevel",
        "shape": {
          "type": "alias",
          "value": {
            "type": "literal",
            "value": {
              "type": "stringLiteral",
              "value": "warn"
            }
          }
        }
      },
      "type_:PauseAssistantMessage": {
        "name": "PauseAssistantMessage",
        "description": "Pause responses from EVI. Chat history is still saved and sent after resuming.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "type",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "literal",
                  "value": {
                    "type": "stringLiteral",
                    "value": "pause_assistant_message"
                  }
                }
              },
              "description": "The type of message sent through the socket; must be `pause_assistant_message` for our server to correctly identify and process it as a Pause Assistant message.\n\nOnce this message is sent, EVI will not respond until a [Resume Assistant message](/reference/empathic-voice-interface-evi/chat/chat#send.Resume%20Assistant%20Message.type) is sent. When paused, EVI won’t respond, but transcriptions of your audio inputs will still be recorded."
            },
            {
              "key": "custom_session_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "Used to manage conversational state, correlate frontend and backend data, and persist conversations across EVI sessions."
            }
          ],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_:ResumeAssistantMessage": {
        "name": "ResumeAssistantMessage",
        "description": "Resume responses from EVI. Chat history sent while paused will now be sent.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "type",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "literal",
                  "value": {
                    "type": "stringLiteral",
                    "value": "resume_assistant_message"
                  }
                }
              },
              "description": "The type of message sent through the socket; must be `resume_assistant_message` for our server to correctly identify and process it as a Resume Assistant message.\n\nUpon resuming, if any audio input was sent during the pause, EVI will retain context from all messages sent but only respond to the last user message. (e.g., If you ask EVI two questions while paused and then send a `resume_assistant_message`, EVI will respond to the second question and have added the first question to its conversation context.)"
            },
            {
              "key": "custom_session_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "Used to manage conversational state, correlate frontend and backend data, and persist conversations across EVI sessions."
            }
          ],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_:SessionSettings": {
        "name": "SessionSettings",
        "description": "Settings for this chat session.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "type",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "literal",
                  "value": {
                    "type": "stringLiteral",
                    "value": "session_settings"
                  }
                }
              },
              "description": "The type of message sent through the socket; must be `session_settings` for our server to correctly identify and process it as a Session Settings message.\n\nSession settings are temporary and apply only to the current Chat session. These settings can be adjusted dynamically based on the requirements of each session to ensure optimal performance and user experience.\n\nFor more information, please refer to the [Session Settings section](/docs/empathic-voice-interface-evi/configuration#session-settings) on the EVI Configuration page."
            },
            {
              "key": "custom_session_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "Unique identifier for the session. Used to manage conversational state, correlate frontend and backend data, and persist conversations across EVI sessions.\n\nIf included, the response sent from Hume to your backend will include this ID. This allows you to correlate frontend users with their incoming messages.\n\nIt is recommended to pass a `custom_session_id` if you are using a Custom Language Model. Please see our guide to [using a custom language model](/docs/empathic-voice-interface-evi/custom-language-model) with EVI to learn more."
            },
            {
              "key": "system_prompt",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "Instructions used to shape EVI’s behavior, responses, and style for the session.\n\nWhen included in a Session Settings message, the provided Prompt overrides the existing one specified in the EVI configuration. If no Prompt was defined in the configuration, this Prompt will be the one used for the session.\n\nYou can use the Prompt to define a specific goal or role for EVI, specifying how it should act or what it should focus on during the conversation. For example, EVI can be instructed to act as a customer support representative, a fitness coach, or a travel advisor, each with its own set of behaviors and response styles.\n\nFor help writing a system prompt, see our [Prompting Guide](/docs/empathic-voice-interface-evi/prompting)."
            },
            {
              "key": "context",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:Context"
                    }
                  }
                }
              },
              "description": "Allows developers to inject additional context into the conversation, which is appended to the end of user messages for the session.\n\nWhen included in a Session Settings message, the provided context can be used to remind the LLM of its role in every user message, prevent it from forgetting important details, or add new relevant information to the conversation.\n\nSet to `null` to disable context injection."
            },
            {
              "key": "audio",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:AudioConfiguration"
                    }
                  }
                }
              },
              "description": "Configuration details for the audio input used during the session. Ensures the audio is being correctly set up for processing.\n\nThis optional field is only required when the audio input is encoded in PCM Linear 16 (16-bit, little-endian, signed PCM WAV data). For detailed instructions on how to configure session settings for PCM Linear 16 audio, please refer to the [Session Settings section](/docs/empathic-voice-interface-evi/configuration#session-settings) on the EVI Configuration page."
            },
            {
              "key": "language_model_api_key",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "Third party API key for the supplemental language model.\n\nWhen provided, EVI will use this key instead of Hume’s API key for the supplemental LLM. This allows you to bypass rate limits and utilize your own API key as needed."
            },
            {
              "key": "tools",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "list",
                      "itemShape": {
                        "type": "alias",
                        "value": {
                          "type": "id",
                          "id": "type_:Tool"
                        }
                      }
                    }
                  }
                }
              },
              "description": "List of user-defined tools to enable for the session.\n\nTools are resources used by EVI to perform various tasks, such as searching the web or calling external APIs. Built-in tools, like web search, are natively integrated, while user-defined tools are created and invoked by the user. To learn more, see our [Tool Use Guide](/docs/empathic-voice-interface-evi/tool-use)."
            },
            {
              "key": "builtin_tools",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "list",
                      "itemShape": {
                        "type": "alias",
                        "value": {
                          "type": "id",
                          "id": "type_:BuiltinToolConfig"
                        }
                      }
                    }
                  }
                }
              },
              "description": "List of built-in tools to enable for the session.\n\nTools are resources used by EVI to perform various tasks, such as searching the web or calling external APIs. Built-in tools, like web search, are natively integrated, while user-defined tools are created and invoked by the user. To learn more, see our [Tool Use Guide](/docs/empathic-voice-interface-evi/tool-use).\n\nCurrently, the only built-in tool Hume provides is **Web Search**. When enabled, Web Search equips EVI with the ability to search the web for up-to-date information."
            },
            {
              "key": "metadata",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "map",
                      "keyShape": {
                        "type": "alias",
                        "value": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      },
                      "valueShape": {
                        "type": "alias",
                        "value": {
                          "type": "unknown"
                        }
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "variables",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "map",
                      "keyShape": {
                        "type": "alias",
                        "value": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      },
                      "valueShape": {
                        "type": "alias",
                        "value": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              },
              "description": "Dynamic values that can be used to populate EVI prompts."
            }
          ],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_:Tool": {
        "name": "Tool",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "type",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:ToolType"
                }
              },
              "description": "Type of tool. Set to `function` for user-defined tools."
            },
            {
              "key": "name",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "Name of the user-defined tool to be enabled."
            },
            {
              "key": "parameters",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "Parameters of the tool. Is a stringified JSON schema.\n\nThese parameters define the inputs needed for the tool’s execution, including the expected data type and description for each input field. Structured as a JSON schema, this format ensures the tool receives data in the expected format."
            },
            {
              "key": "description",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "An optional description of what the tool does, used by the supplemental LLM to choose when and how to call the function."
            },
            {
              "key": "fallback_content",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "Optional text passed to the supplemental LLM if the tool call fails. The LLM then uses this text to generate a response back to the user, ensuring continuity in the conversation."
            }
          ],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_:ToolErrorMessage": {
        "name": "ToolErrorMessage",
        "description": "When provided, the output is a function call error.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "type",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "literal",
                  "value": {
                    "type": "stringLiteral",
                    "value": "tool_error"
                  }
                }
              },
              "description": "The type of message sent through the socket; for a Tool Error message, this must be `tool_error`.\n\nUpon receiving a [Tool Call message](/reference/empathic-voice-interface-evi/chat/chat#receive.Tool%20Call%20Message.type) and failing to invoke the function, this message is sent to notify EVI of the tool's failure."
            },
            {
              "key": "custom_session_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "Used to manage conversational state, correlate frontend and backend data, and persist conversations across EVI sessions."
            },
            {
              "key": "tool_type",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:ToolType"
                    }
                  }
                }
              },
              "description": "Type of tool called. Either `builtin` for natively implemented tools, like web search, or `function` for user-defined tools."
            },
            {
              "key": "tool_call_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "The unique identifier for a specific tool call instance.\n\nThis ID is used to track the request and response of a particular tool invocation, ensuring that the Tool Error message is linked to the appropriate tool call request. The specified `tool_call_id` must match the one received in the [Tool Call message](/reference/empathic-voice-interface-evi/chat/chat#receive.Tool%20Call%20Message.type)."
            },
            {
              "key": "content",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "Optional text passed to the supplemental LLM in place of the tool call result. The LLM then uses this text to generate a response back to the user, ensuring continuity in the conversation if the tool errors."
            },
            {
              "key": "error",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "Error message from the tool call, not exposed to the LLM or user."
            },
            {
              "key": "code",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "Error code. Identifies the type of error encountered."
            },
            {
              "key": "level",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:ErrorLevel"
                    }
                  }
                }
              },
              "description": "Indicates the severity of an error; for a Tool Error message, this must be `warn` to signal an unexpected event."
            }
          ],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_:ToolResponseMessage": {
        "name": "ToolResponseMessage",
        "description": "When provided, the output is a function call response.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "type",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "literal",
                  "value": {
                    "type": "stringLiteral",
                    "value": "tool_response"
                  }
                }
              },
              "description": "The type of message sent through the socket; for a Tool Response message, this must be `tool_response`.\n\nUpon receiving a [Tool Call message](/reference/empathic-voice-interface-evi/chat/chat#receive.Tool%20Call%20Message.type) and successfully invoking the function, this message is sent to convey the result of the function call back to EVI."
            },
            {
              "key": "custom_session_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "Used to manage conversational state, correlate frontend and backend data, and persist conversations across EVI sessions."
            },
            {
              "key": "tool_call_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "The unique identifier for a specific tool call instance.\n\nThis ID is used to track the request and response of a particular tool invocation, ensuring that the correct response is linked to the appropriate request. The specified `tool_call_id` must match the one received in the [Tool Call message](/reference/empathic-voice-interface-evi/chat/chat#receive.Tool%20Call%20Message.tool_call_id)."
            },
            {
              "key": "content",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "Return value of the tool call. Contains the output generated by the tool to pass back to EVI."
            },
            {
              "key": "tool_name",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "Name of the tool.\n\nInclude this optional field to help the supplemental LLM identify which tool generated the response. The specified `tool_name` must match the one received in the [Tool Call message](/reference/empathic-voice-interface-evi/chat/chat#receive.Tool%20Call%20Message.type)."
            },
            {
              "key": "tool_type",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:ToolType"
                    }
                  }
                }
              },
              "description": "Type of tool called. Either `builtin` for natively implemented tools, like web search, or `function` for user-defined tools."
            }
          ],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_:ToolType": {
        "name": "ToolType",
        "shape": {
          "type": "enum",
          "values": [
            {
              "value": "builtin"
            },
            {
              "value": "function"
            }
          ]
        }
      },
      "type_:UserInput": {
        "name": "UserInput",
        "description": "User text to insert into the conversation. Text sent through a User Input message is treated as the user’s speech to EVI. EVI processes this input and provides a corresponding response.\n\nExpression measurement results are not available for User Input messages, as the prosody model relies on audio input and cannot process text alone.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "type",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "literal",
                  "value": {
                    "type": "stringLiteral",
                    "value": "user_input"
                  }
                }
              },
              "description": "The type of message sent through the socket; must be `user_input` for our server to correctly identify and process it as a User Input message."
            },
            {
              "key": "custom_session_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "Used to manage conversational state, correlate frontend and backend data, and persist conversations across EVI sessions."
            },
            {
              "key": "text",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "User text to insert into the conversation. Text sent through a User Input message is treated as the user’s speech to EVI. EVI processes this input and provides a corresponding response.\n\nExpression measurement results are not available for User Input messages, as the prosody model relies on audio input and cannot process text alone."
            }
          ],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_:AssistantEnd": {
        "name": "AssistantEnd",
        "description": "When provided, the output is an assistant end message.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "type",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "literal",
                  "value": {
                    "type": "stringLiteral",
                    "value": "assistant_end"
                  }
                }
              },
              "description": "The type of message sent through the socket; for an Assistant End message, this must be `assistant_end`.\n\nThis message indicates the conclusion of the assistant’s response, signaling that the assistant has finished speaking for the current conversational turn."
            },
            {
              "key": "custom_session_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "Used to manage conversational state, correlate frontend and backend data, and persist conversations across EVI sessions."
            }
          ],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_:AssistantMessage": {
        "name": "AssistantMessage",
        "description": "When provided, the output is an assistant message.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "type",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "literal",
                  "value": {
                    "type": "stringLiteral",
                    "value": "assistant_message"
                  }
                }
              },
              "description": "The type of message sent through the socket; for an Assistant Message, this must be `assistant_message`.\n\nThis message contains both a transcript of the assistant’s response and the expression measurement predictions of the assistant’s audio output."
            },
            {
              "key": "custom_session_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "Used to manage conversational state, correlate frontend and backend data, and persist conversations across EVI sessions."
            },
            {
              "key": "id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "ID of the assistant message. Allows the Assistant Message to be tracked and referenced."
            },
            {
              "key": "message",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:ChatMessage"
                }
              },
              "description": "Transcript of the message."
            },
            {
              "key": "models",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:Inference"
                }
              },
              "description": "Inference model results."
            },
            {
              "key": "from_text",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "boolean",
                    "default": false
                  }
                }
              },
              "description": "Indicates if this message was inserted into the conversation as text from an [Assistant Input message](/reference/empathic-voice-interface-evi/chat/chat#send.Assistant%20Input.text)."
            }
          ],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_:AudioOutput": {
        "name": "AudioOutput",
        "description": "The type of message sent through the socket; for an Audio Output message, this must be `audio_output`.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "type",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "literal",
                  "value": {
                    "type": "stringLiteral",
                    "value": "audio_output"
                  }
                }
              },
              "description": "The type of message sent through the socket; for an Audio Output message, this must be `audio_output`."
            },
            {
              "key": "custom_session_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "Used to manage conversational state, correlate frontend and backend data, and persist conversations across EVI sessions."
            },
            {
              "key": "id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "ID of the audio output. Allows the Audio Output message to be tracked and referenced."
            },
            {
              "key": "index",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              },
              "description": "Index of the chunk of audio relative to the whole audio segment."
            },
            {
              "key": "data",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "Base64 encoded audio output. This encoded audio is transmitted to the client, where it can be decoded and played back as part of the user interaction."
            }
          ],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_:ChatMessageToolResult": {
        "name": "ChatMessageToolResult",
        "description": "Function call response from client.",
        "shape": {
          "type": "undiscriminatedUnion",
          "variants": [
            {
              "displayName": "Tool Response Message",
              "shape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:ToolResponseMessage"
                }
              }
            },
            {
              "displayName": "Tool Error Message",
              "shape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:ToolErrorMessage"
                }
              }
            }
          ]
        }
      },
      "type_:ChatMessage": {
        "name": "ChatMessage",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "role",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:Role"
                }
              },
              "description": "Role of who is providing the message."
            },
            {
              "key": "content",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "Transcript of the message."
            },
            {
              "key": "tool_call",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:ToolCallMessage"
                    }
                  }
                }
              },
              "description": "Function call name and arguments."
            },
            {
              "key": "tool_result",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:ChatMessageToolResult"
                    }
                  }
                }
              },
              "description": "Function call response from client."
            }
          ],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_:ChatMetadata": {
        "name": "ChatMetadata",
        "description": "When provided, the output is a chat metadata message.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "type",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "literal",
                  "value": {
                    "type": "stringLiteral",
                    "value": "chat_metadata"
                  }
                }
              },
              "description": "The type of message sent through the socket; for a Chat Metadata message, this must be `chat_metadata`.\n\nThe Chat Metadata message is the first message you receive after establishing a connection with EVI and contains important identifiers for the current Chat session."
            },
            {
              "key": "custom_session_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "Used to manage conversational state, correlate frontend and backend data, and persist conversations across EVI sessions."
            },
            {
              "key": "chat_group_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "ID of the Chat Group.\n\nUsed to resume a Chat when passed in the [resumed_chat_group_id](/reference/empathic-voice-interface-evi/chat/chat#request.query.resumed_chat_group_id) query parameter of a subsequent connection request. This allows EVI to continue the conversation from where it left off within the Chat Group.\n\nLearn more about [supporting chat resumability](/docs/empathic-voice-interface-evi/faq#does-evi-support-chat-resumability) from the EVI FAQ."
            },
            {
              "key": "chat_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "ID of the Chat session. Allows the Chat session to be tracked and referenced."
            },
            {
              "key": "request_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "ID of the initiating request."
            }
          ],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_:EmotionScores": {
        "name": "EmotionScores",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "Admiration",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "double"
                  }
                }
              }
            },
            {
              "key": "Adoration",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "double"
                  }
                }
              }
            },
            {
              "key": "Aesthetic Appreciation",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "double"
                  }
                }
              }
            },
            {
              "key": "Amusement",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "double"
                  }
                }
              }
            },
            {
              "key": "Anger",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "double"
                  }
                }
              }
            },
            {
              "key": "Anxiety",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "double"
                  }
                }
              }
            },
            {
              "key": "Awe",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "double"
                  }
                }
              }
            },
            {
              "key": "Awkwardness",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "double"
                  }
                }
              }
            },
            {
              "key": "Boredom",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "double"
                  }
                }
              }
            },
            {
              "key": "Calmness",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "double"
                  }
                }
              }
            },
            {
              "key": "Concentration",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "double"
                  }
                }
              }
            },
            {
              "key": "Confusion",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "double"
                  }
                }
              }
            },
            {
              "key": "Contemplation",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "double"
                  }
                }
              }
            },
            {
              "key": "Contempt",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "double"
                  }
                }
              }
            },
            {
              "key": "Contentment",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "double"
                  }
                }
              }
            },
            {
              "key": "Craving",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "double"
                  }
                }
              }
            },
            {
              "key": "Desire",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "double"
                  }
                }
              }
            },
            {
              "key": "Determination",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "double"
                  }
                }
              }
            },
            {
              "key": "Disappointment",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "double"
                  }
                }
              }
            },
            {
              "key": "Disgust",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "double"
                  }
                }
              }
            },
            {
              "key": "Distress",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "double"
                  }
                }
              }
            },
            {
              "key": "Doubt",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "double"
                  }
                }
              }
            },
            {
              "key": "Ecstasy",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "double"
                  }
                }
              }
            },
            {
              "key": "Embarrassment",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "double"
                  }
                }
              }
            },
            {
              "key": "Empathic Pain",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "double"
                  }
                }
              }
            },
            {
              "key": "Entrancement",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "double"
                  }
                }
              }
            },
            {
              "key": "Envy",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "double"
                  }
                }
              }
            },
            {
              "key": "Excitement",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "double"
                  }
                }
              }
            },
            {
              "key": "Fear",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "double"
                  }
                }
              }
            },
            {
              "key": "Guilt",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "double"
                  }
                }
              }
            },
            {
              "key": "Horror",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "double"
                  }
                }
              }
            },
            {
              "key": "Interest",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "double"
                  }
                }
              }
            },
            {
              "key": "Joy",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "double"
                  }
                }
              }
            },
            {
              "key": "Love",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "double"
                  }
                }
              }
            },
            {
              "key": "Nostalgia",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "double"
                  }
                }
              }
            },
            {
              "key": "Pain",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "double"
                  }
                }
              }
            },
            {
              "key": "Pride",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "double"
                  }
                }
              }
            },
            {
              "key": "Realization",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "double"
                  }
                }
              }
            },
            {
              "key": "Relief",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "double"
                  }
                }
              }
            },
            {
              "key": "Romance",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "double"
                  }
                }
              }
            },
            {
              "key": "Sadness",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "double"
                  }
                }
              }
            },
            {
              "key": "Satisfaction",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "double"
                  }
                }
              }
            },
            {
              "key": "Shame",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "double"
                  }
                }
              }
            },
            {
              "key": "Surprise (negative)",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "double"
                  }
                }
              }
            },
            {
              "key": "Surprise (positive)",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "double"
                  }
                }
              }
            },
            {
              "key": "Sympathy",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "double"
                  }
                }
              }
            },
            {
              "key": "Tiredness",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "double"
                  }
                }
              }
            },
            {
              "key": "Triumph",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "double"
                  }
                }
              }
            }
          ],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_:WebSocketError": {
        "name": "WebSocketError",
        "description": "When provided, the output is an error message.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "type",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "literal",
                  "value": {
                    "type": "stringLiteral",
                    "value": "error"
                  }
                }
              },
              "description": "The type of message sent through the socket; for a Web Socket Error message, this must be `error`.\n\nThis message indicates a disruption in the WebSocket connection, such as an unexpected disconnection, protocol error, or data transmission issue."
            },
            {
              "key": "custom_session_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "Used to manage conversational state, correlate frontend and backend data, and persist conversations across EVI sessions."
            },
            {
              "key": "code",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "Error code. Identifies the type of error encountered."
            },
            {
              "key": "slug",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "Short, human-readable identifier and description for the error. See a complete list of error slugs on the [Errors page](/docs/resources/errors)."
            },
            {
              "key": "message",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "Detailed description of the error."
            }
          ],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_:Inference": {
        "name": "Inference",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "prosody",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:ProsodyInference"
                    }
                  }
                }
              },
              "description": "Prosody model inference results.\n\nEVI uses the prosody model to measure 48 emotions related to speech and vocal characteristics within a given expression."
            }
          ],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_:MillisecondInterval": {
        "name": "MillisecondInterval",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "begin",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              },
              "description": "Start time of the interval in milliseconds."
            },
            {
              "key": "end",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              },
              "description": "End time of the interval in milliseconds."
            }
          ],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_:ProsodyInference": {
        "name": "ProsodyInference",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "scores",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:EmotionScores"
                }
              },
              "description": "The confidence scores for 48 emotions within the detected expression of an audio sample.\n\nScores typically range from 0 to 1, with higher values indicating a stronger confidence level in the measured attribute.\n\nSee our guide on [interpreting expression measurement results](/docs/expression-measurement/faq#how-do-i-interpret-my-results) to learn more."
            }
          ],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_:Role": {
        "name": "Role",
        "shape": {
          "type": "enum",
          "values": [
            {
              "value": "assistant"
            },
            {
              "value": "system"
            },
            {
              "value": "user"
            },
            {
              "value": "all"
            },
            {
              "value": "tool"
            }
          ]
        }
      },
      "type_:ToolCallMessage": {
        "name": "ToolCallMessage",
        "description": "When provided, the output is a tool call.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "name",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "Name of the tool called."
            },
            {
              "key": "parameters",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "Parameters of the tool.\n\nThese parameters define the inputs needed for the tool’s execution, including the expected data type and description for each input field. Structured as a stringified JSON schema, this format ensures the tool receives data in the expected format."
            },
            {
              "key": "tool_call_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "The unique identifier for a specific tool call instance.\n\nThis ID is used to track the request and response of a particular tool invocation, ensuring that the correct response is linked to the appropriate request."
            },
            {
              "key": "type",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "literal",
                  "value": {
                    "type": "stringLiteral",
                    "value": "tool_call"
                  }
                }
              },
              "description": "The type of message sent through the socket; for a Tool Call message, this must be `tool_call`.\n\nThis message indicates that the supplemental LLM has detected a need to invoke the specified tool."
            },
            {
              "key": "custom_session_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "Used to manage conversational state, correlate frontend and backend data, and persist conversations across EVI sessions."
            },
            {
              "key": "tool_type",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:ToolType"
                    }
                  }
                }
              },
              "description": "Type of tool called. Either `builtin` for natively implemented tools, like web search, or `function` for user-defined tools."
            },
            {
              "key": "response_required",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "boolean",
                    "default": false
                  }
                }
              },
              "description": "Indicates whether a response to the tool call is required from the developer, either in the form of a [Tool Response message](/reference/empathic-voice-interface-evi/chat/chat#send.Tool%20Response%20Message.type) or a [Tool Error message](/reference/empathic-voice-interface-evi/chat/chat#send.Tool%20Error%20Message.type)."
            }
          ],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_:UserInterruption": {
        "name": "UserInterruption",
        "description": "When provided, the output is an interruption.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "type",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "literal",
                  "value": {
                    "type": "stringLiteral",
                    "value": "user_interruption"
                  }
                }
              },
              "description": "The type of message sent through the socket; for a User Interruption message, this must be `user_interruption`.\n\nThis message indicates the user has interrupted the assistant’s response. EVI detects the interruption in real-time and sends this message to signal the interruption event. This message allows the system to stop the current audio playback, clear the audio queue, and prepare to handle new user input."
            },
            {
              "key": "custom_session_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "Used to manage conversational state, correlate frontend and backend data, and persist conversations across EVI sessions."
            },
            {
              "key": "time",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              },
              "description": "Unix timestamp of the detected user interruption."
            }
          ],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_:UserMessage": {
        "name": "UserMessage",
        "description": "When provided, the output is a user message.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "type",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "literal",
                  "value": {
                    "type": "stringLiteral",
                    "value": "user_message"
                  }
                }
              },
              "description": "The type of message sent through the socket; for a User Message, this must be `user_message`.\n\nThis message contains both a transcript of the user’s input and the expression measurement predictions if the input was sent as an [Audio Input message](/reference/empathic-voice-interface-evi/chat/chat#send.Audio%20Input.type). Expression measurement predictions are not provided for a [User Input message](/reference/empathic-voice-interface-evi/chat/chat#send.User%20Input.type), as the prosody model relies on audio input and cannot process text alone."
            },
            {
              "key": "custom_session_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "Used to manage conversational state, correlate frontend and backend data, and persist conversations across EVI sessions."
            },
            {
              "key": "message",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:ChatMessage"
                }
              },
              "description": "Transcript of the message."
            },
            {
              "key": "models",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:Inference"
                }
              },
              "description": "Inference model results."
            },
            {
              "key": "time",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:MillisecondInterval"
                }
              },
              "description": "Start and End time of user message."
            },
            {
              "key": "from_text",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "boolean",
                    "default": false
                  }
                }
              },
              "description": "Indicates if this message was inserted into the conversation as text from a [User Input](/reference/empathic-voice-interface-evi/chat/chat#send.User%20Input.text) message."
            }
          ],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_:JsonMessage": {
        "name": "JsonMessage",
        "shape": {
          "type": "undiscriminatedUnion",
          "variants": [
            {
              "displayName": "Assistant End",
              "shape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:AssistantEnd"
                }
              }
            },
            {
              "displayName": "Assistant Message",
              "shape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:AssistantMessage"
                }
              }
            },
            {
              "displayName": "Chat Metadata",
              "shape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:ChatMetadata"
                }
              }
            },
            {
              "displayName": "Web Socket Error",
              "shape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:WebSocketError"
                }
              }
            },
            {
              "displayName": "User Interruption",
              "shape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:UserInterruption"
                }
              }
            },
            {
              "displayName": "User Message",
              "shape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:UserMessage"
                }
              }
            },
            {
              "displayName": "Tool Call Message",
              "shape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:ToolCallMessage"
                }
              }
            },
            {
              "displayName": "Tool Response Message",
              "shape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:ToolResponseMessage"
                }
              }
            },
            {
              "displayName": "Tool Error Message",
              "shape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:ToolErrorMessage"
                }
              }
            }
          ]
        }
      },
      "type_:TtsInput": {
        "name": "TtsInput",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "type",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "literal",
                      "value": {
                        "type": "stringLiteral",
                        "value": "tts"
                      }
                    }
                  }
                }
              }
            }
          ],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_:TextInput": {
        "name": "TextInput",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "type",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "literal",
                      "value": {
                        "type": "stringLiteral",
                        "value": "text_input"
                      }
                    }
                  }
                }
              }
            }
          ],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_:FunctionCallResponseInput": {
        "name": "FunctionCallResponseInput",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "type",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "literal",
                      "value": {
                        "type": "stringLiteral",
                        "value": "function_call_response"
                      }
                    }
                  }
                }
              }
            }
          ],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_:HTTPValidationError": {
        "name": "HTTPValidationError",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "detail",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "list",
                      "itemShape": {
                        "type": "alias",
                        "value": {
                          "type": "id",
                          "id": "type_:ValidationError"
                        }
                      }
                    }
                  }
                }
              }
            }
          ],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_:ValidationErrorLocItem": {
        "name": "ValidationErrorLocItem",
        "shape": {
          "type": "undiscriminatedUnion",
          "variants": [
            {
              "shape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "shape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              }
            }
          ]
        }
      },
      "type_:ValidationError": {
        "name": "ValidationError",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "loc",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "list",
                  "itemShape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:ValidationErrorLocItem"
                    }
                  }
                }
              }
            },
            {
              "key": "msg",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "key": "type",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          ],
          "extraProperties": {
            "type": "unknown"
          }
        }
      },
      "type_:VoiceNameEnum": {
        "name": "VoiceNameEnum",
        "shape": {
          "type": "enum",
          "values": [
            {
              "value": "ITO"
            },
            {
              "value": "KORA"
            },
            {
              "value": "DACHER"
            },
            {
              "value": "AURA"
            },
            {
              "value": "FINN"
            },
            {
              "value": "SIENNA"
            },
            {
              "value": "WILLOW"
            },
            {
              "value": "SCOUT"
            },
            {
              "value": "WHIMSY"
            },
            {
              "value": "ACE"
            },
            {
              "value": "JUNO"
            },
            {
              "value": "STELLA"
            },
            {
              "value": "HIRO"
            },
            {
              "value": "SUNNY"
            }
          ]
        }
      }
    },
    "subpackages": {
      "subpackage_tools": {
        "id": "subpackage_tools",
        "name": "tools"
      },
      "subpackage_prompts": {
        "id": "subpackage_prompts",
        "name": "prompts"
      },
      "subpackage_customVoices": {
        "id": "subpackage_customVoices",
        "name": "customVoices"
      },
      "subpackage_configs": {
        "id": "subpackage_configs",
        "name": "configs"
      },
      "subpackage_chats": {
        "id": "subpackage_chats",
        "name": "chats"
      },
      "subpackage_chatGroups": {
        "id": "subpackage_chatGroups",
        "name": "chatGroups"
      },
      "subpackage_chat": {
        "id": "subpackage_chat",
        "name": "chat"
      }
    },
    "auths": {
      "default": {
        "type": "header",
        "headerWireValue": "X-Hume-Api-Key",
        "nameOverride": "apiKey"
      }
    }
  }
]